#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PuzzleSelectionComponent

#include "Basic.hpp"

#include "BP_PuzzleSelectionComponent_classes.hpp"
#include "BP_PuzzleSelectionComponent_parameters.hpp"


namespace SDK
{

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.OnSwapItem__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PreviousItemIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SelectedItemIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PuzzleSelectionComponent_C::OnSwapItem__DelegateSignature(int32 PreviousItemIndex, int32 SelectedItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "OnSwapItem__DelegateSignature");

	Params::BP_PuzzleSelectionComponent_C_OnSwapItem__DelegateSignature Parms{};

	Parms.PreviousItemIndex = PreviousItemIndex;
	Parms.SelectedItemIndex = SelectedItemIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.OnItemHeld__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   HeldItemIndex_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PuzzleSelectionComponent_C::OnItemHeld__DelegateSignature(int32 HeldItemIndex_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "OnItemHeld__DelegateSignature");

	Params::BP_PuzzleSelectionComponent_C_OnItemHeld__DelegateSignature Parms{};

	Parms.HeldItemIndex_0 = HeldItemIndex_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.OnItemReleased__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   HeldItemIndex_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PuzzleSelectionComponent_C::OnItemReleased__DelegateSignature(int32 HeldItemIndex_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "OnItemReleased__DelegateSignature");

	Params::BP_PuzzleSelectionComponent_C_OnItemReleased__DelegateSignature Parms{};

	Parms.HeldItemIndex_0 = HeldItemIndex_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.OnPuzzleStopped__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::OnPuzzleStopped__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "OnPuzzleStopped__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.OnNavigated__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsHoldingItem                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   CurrentSelectedIndex                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PreviousSelectedIndex                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NavigationSuccessful                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PuzzleSelectionComponent_C::OnNavigated__DelegateSignature(bool IsHoldingItem, int32 CurrentSelectedIndex, int32 PreviousSelectedIndex, bool NavigationSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "OnNavigated__DelegateSignature");

	Params::BP_PuzzleSelectionComponent_C_OnNavigated__DelegateSignature Parms{};

	Parms.IsHoldingItem = IsHoldingItem;
	Parms.CurrentSelectedIndex = CurrentSelectedIndex;
	Parms.PreviousSelectedIndex = PreviousSelectedIndex;
	Parms.NavigationSuccessful = NavigationSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.OnSlotToggled__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UPrimitiveComponent*              Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PuzzleSelectionComponent_C::OnSlotToggled__DelegateSignature(bool Enabled, class UPrimitiveComponent* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "OnSlotToggled__DelegateSignature");

	Params::BP_PuzzleSelectionComponent_C_OnSlotToggled__DelegateSignature Parms{};

	Parms.Enabled = Enabled;
	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.OnPuzzleStarted__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::OnPuzzleStarted__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "OnPuzzleStarted__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.ExecuteUbergraph_BP_PuzzleSelectionComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PuzzleSelectionComponent_C::ExecuteUbergraph_BP_PuzzleSelectionComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "ExecuteUbergraph_BP_PuzzleSelectionComponent");

	Params::BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.LockInput
// (BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::LockInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "LockInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.ReceiveBeginPlay
// (Exec, Event, Public, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.ReceiveTick
// (Exec, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PuzzleSelectionComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "ReceiveTick");

	Params::BP_PuzzleSelectionComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.UnlockInput
// (BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::UnlockInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "UnlockInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.SetState
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EPuzzleMovementStates                   State_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PuzzleSelectionComponent_C::SetState(EPuzzleMovementStates State_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "SetState");

	Params::BP_PuzzleSelectionComponent_C_SetState Parms{};

	Parms.State_0 = State_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.StopPuzzle
// (BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::StopPuzzle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "StopPuzzle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.StartPuzzle
// (BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::StartPuzzle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "StartPuzzle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.HorizontalSelectionInput
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   RightAxis                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PuzzleSelectionComponent_C::HorizontalSelectionInput(float RightAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "HorizontalSelectionInput");

	Params::BP_PuzzleSelectionComponent_C_HorizontalSelectionInput Parms{};

	Parms.RightAxis = RightAxis;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.VerticalSelectionInput
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ForwardAxis                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PuzzleSelectionComponent_C::VerticalSelectionInput(const float ForwardAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "VerticalSelectionInput");

	Params::BP_PuzzleSelectionComponent_C_VerticalSelectionInput Parms{};

	Parms.ForwardAxis = ForwardAxis;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.SetupPuzzleItems
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UPrimitiveComponent*>      PuzzleItems_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void UBP_PuzzleSelectionComponent_C::SetupPuzzleItems(TArray<class UPrimitiveComponent*>& PuzzleItems_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "SetupPuzzleItems");

	Params::BP_PuzzleSelectionComponent_C_SetupPuzzleItems Parms{};

	Parms.PuzzleItems_0 = std::move(PuzzleItems_0);

	UObject::ProcessEvent(Func, &Parms);

	PuzzleItems_0 = std::move(Parms.PuzzleItems_0);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.MapItemsToSlots
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::MapItemsToSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "MapItemsToSlots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.GetSelectedItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UPrimitiveComponent* UBP_PuzzleSelectionComponent_C::GetSelectedItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "GetSelectedItem");

	Params::BP_PuzzleSelectionComponent_C_GetSelectedItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.SwapItemsBetweenSlots
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   FromIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ToIndex                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SwapSuccessful                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PuzzleSelectionComponent_C::SwapItemsBetweenSlots(int32 FromIndex, int32 ToIndex, bool* SwapSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "SwapItemsBetweenSlots");

	Params::BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots Parms{};

	Parms.FromIndex = FromIndex;
	Parms.ToIndex = ToIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (SwapSuccessful != nullptr)
		*SwapSuccessful = Parms.SwapSuccessful;
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.GetItemInIndex
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UPrimitiveComponent* UBP_PuzzleSelectionComponent_C::GetItemInIndex(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "GetItemInIndex");

	Params::BP_PuzzleSelectionComponent_C_GetItemInIndex Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.GetSlotTransformInIndex
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)

struct FTransform UBP_PuzzleSelectionComponent_C::GetSlotTransformInIndex(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "GetSlotTransformInIndex");

	Params::BP_PuzzleSelectionComponent_C_GetSlotTransformInIndex Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.GetHeldItemIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_PuzzleSelectionComponent_C::GetHeldItemIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "GetHeldItemIndex");

	Params::BP_PuzzleSelectionComponent_C_GetHeldItemIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.GetSelectedItemIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_PuzzleSelectionComponent_C::GetSelectedItemIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "GetSelectedItemIndex");

	Params::BP_PuzzleSelectionComponent_C_GetSelectedItemIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.SetupSelectionMaterial
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::SetupSelectionMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "SetupSelectionMaterial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.ToggleHighlightOnItemInSlot
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsHighlit                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PuzzleSelectionComponent_C::ToggleHighlightOnItemInSlot(bool IsHighlit, int32 SlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "ToggleHighlightOnItemInSlot");

	Params::BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot Parms{};

	Parms.IsHighlit = IsHighlit;
	Parms.SlotIndex = SlotIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.StartHighlight
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::StartHighlight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "StartHighlight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.StopHighlight
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::StopHighlight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "StopHighlight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.GetHeldItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UPrimitiveComponent* UBP_PuzzleSelectionComponent_C::GetHeldItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "GetHeldItem");

	Params::BP_PuzzleSelectionComponent_C_GetHeldItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.SwapItems
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::SwapItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "SwapItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.NavigateUp
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::NavigateUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "NavigateUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.NavigateRight
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::NavigateRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "NavigateRight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.NavigateLeft
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::NavigateLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "NavigateLeft");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.NavigateDown
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::NavigateDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "NavigateDown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.HoldItem
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::HoldItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "HoldItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.DebugStates
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::DebugStates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "DebugStates");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.StopHoldingItem
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::StopHoldingItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "StopHoldingItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.ResetLocationOfItems
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::ResetLocationOfItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "ResetLocationOfItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.PuzzleStopped
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::PuzzleStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "PuzzleStopped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.PuzzleStarted
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::PuzzleStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "PuzzleStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.HoldSelectedItem
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::HoldSelectedItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "HoldSelectedItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.ToggleSlotOfItem
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              PuzzleItem                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PuzzleSelectionComponent_C::ToggleSlotOfItem(class UPrimitiveComponent* PuzzleItem, bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "ToggleSlotOfItem");

	Params::BP_PuzzleSelectionComponent_C_ToggleSlotOfItem Parms{};

	Parms.PuzzleItem = PuzzleItem;
	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.EnableSlotOfItem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              PuzzleItem                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PuzzleSelectionComponent_C::EnableSlotOfItem(class UPrimitiveComponent* PuzzleItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "EnableSlotOfItem");

	Params::BP_PuzzleSelectionComponent_C_EnableSlotOfItem Parms{};

	Parms.PuzzleItem = PuzzleItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.DisableSlotOfItem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              PuzzleItem                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PuzzleSelectionComponent_C::DisableSlotOfItem(class UPrimitiveComponent* PuzzleItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "DisableSlotOfItem");

	Params::BP_PuzzleSelectionComponent_C_DisableSlotOfItem Parms{};

	Parms.PuzzleItem = PuzzleItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.GetSlotIndexOfItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              PuzzleItem                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SlotIndex                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PuzzleSelectionComponent_C::GetSlotIndexOfItem(class UPrimitiveComponent* PuzzleItem, int32* SlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "GetSlotIndexOfItem");

	Params::BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem Parms{};

	Parms.PuzzleItem = PuzzleItem;

	UObject::ProcessEvent(Func, &Parms);

	if (SlotIndex != nullptr)
		*SlotIndex = Parms.SlotIndex;
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.IsSlotIndexDisabled
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_PuzzleSelectionComponent_C::IsSlotIndexDisabled(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "IsSlotIndexDisabled");

	Params::BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.GetDisabledSlotIndices
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>                           DisabledIndices_0                                      (Parm, OutParm)

void UBP_PuzzleSelectionComponent_C::GetDisabledSlotIndices(TArray<int32>* DisabledIndices_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "GetDisabledSlotIndices");

	Params::BP_PuzzleSelectionComponent_C_GetDisabledSlotIndices Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DisabledIndices_0 != nullptr)
		*DisabledIndices_0 = std::move(Parms.DisabledIndices_0);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.IncrementHorizontalIndex
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CurrentIndex                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PreviousSelectedIndex                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NavigationSuccessful                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PuzzleSelectionComponent_C::IncrementHorizontalIndex(int32* CurrentIndex, int32* PreviousSelectedIndex, bool* NavigationSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "IncrementHorizontalIndex");

	Params::BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentIndex != nullptr)
		*CurrentIndex = Parms.CurrentIndex;

	if (PreviousSelectedIndex != nullptr)
		*PreviousSelectedIndex = Parms.PreviousSelectedIndex;

	if (NavigationSuccessful != nullptr)
		*NavigationSuccessful = Parms.NavigationSuccessful;
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.DecrementHorizontalIndex
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CurrentIndex                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PreviousSelectedIndex                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NavigationSuccessful                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PuzzleSelectionComponent_C::DecrementHorizontalIndex(int32* CurrentIndex, int32* PreviousSelectedIndex, bool* NavigationSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "DecrementHorizontalIndex");

	Params::BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentIndex != nullptr)
		*CurrentIndex = Parms.CurrentIndex;

	if (PreviousSelectedIndex != nullptr)
		*PreviousSelectedIndex = Parms.PreviousSelectedIndex;

	if (NavigationSuccessful != nullptr)
		*NavigationSuccessful = Parms.NavigationSuccessful;
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.IncrementVerticalIndex
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CurrentIndex                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PreviousSelectedIndex                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NavigationSuccessful                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PuzzleSelectionComponent_C::IncrementVerticalIndex(int32* CurrentIndex, int32* PreviousSelectedIndex, bool* NavigationSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "IncrementVerticalIndex");

	Params::BP_PuzzleSelectionComponent_C_IncrementVerticalIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentIndex != nullptr)
		*CurrentIndex = Parms.CurrentIndex;

	if (PreviousSelectedIndex != nullptr)
		*PreviousSelectedIndex = Parms.PreviousSelectedIndex;

	if (NavigationSuccessful != nullptr)
		*NavigationSuccessful = Parms.NavigationSuccessful;
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.DecrementVerticalIndex
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CurrentIndex                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PreviousSelectedIndex                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NavigationSuccessful                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PuzzleSelectionComponent_C::DecrementVerticalIndex(int32* CurrentIndex, int32* PreviousSelectedIndex, bool* NavigationSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "DecrementVerticalIndex");

	Params::BP_PuzzleSelectionComponent_C_DecrementVerticalIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentIndex != nullptr)
		*CurrentIndex = Parms.CurrentIndex;

	if (PreviousSelectedIndex != nullptr)
		*PreviousSelectedIndex = Parms.PreviousSelectedIndex;

	if (NavigationSuccessful != nullptr)
		*NavigationSuccessful = Parms.NavigationSuccessful;
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.ResetInput
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::ResetInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "ResetInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.GetIsHoldingItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsHoldingItem                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PuzzleSelectionComponent_C::GetIsHoldingItem(bool* IsHoldingItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "GetIsHoldingItem");

	Params::BP_PuzzleSelectionComponent_C_GetIsHoldingItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsHoldingItem != nullptr)
		*IsHoldingItem = Parms.IsHoldingItem;
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.FindFirstEnabledSlot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   EnabledIndex                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PuzzleSelectionComponent_C::FindFirstEnabledSlot(int32* EnabledIndex, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "FindFirstEnabledSlot");

	Params::BP_PuzzleSelectionComponent_C_FindFirstEnabledSlot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EnabledIndex != nullptr)
		*EnabledIndex = Parms.EnabledIndex;

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.FindAndSetFirstEnabledSlot
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::FindAndSetFirstEnabledSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "FindAndSetFirstEnabledSlot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.SetSelectedItemIndex
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CurrentItemIndex_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PuzzleSelectionComponent_C::SetSelectedItemIndex(int32 CurrentItemIndex_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "SetSelectedItemIndex");

	Params::BP_PuzzleSelectionComponent_C_SetSelectedItemIndex Parms{};

	Parms.CurrentItemIndex_0 = CurrentItemIndex_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.SetSelectedItemIndexOfItem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              PuzzleItem                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PuzzleSelectionComponent_C::SetSelectedItemIndexOfItem(class UPrimitiveComponent* PuzzleItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "SetSelectedItemIndexOfItem");

	Params::BP_PuzzleSelectionComponent_C_SetSelectedItemIndexOfItem Parms{};

	Parms.PuzzleItem = PuzzleItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.FindFirstDisabledSlot
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PuzzleSelectionComponent_C::FindFirstDisabledSlot(int32* Index_0, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "FindFirstDisabledSlot");

	Params::BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.DiscreetSwap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   FromIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ToIndex                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PuzzleSelectionComponent_C::DiscreetSwap(int32 FromIndex, int32 ToIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "DiscreetSwap");

	Params::BP_PuzzleSelectionComponent_C_DiscreetSwap Parms{};

	Parms.FromIndex = FromIndex;
	Parms.ToIndex = ToIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.SwapTransformsOfTwoIndices
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   FromIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ToIndex                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PuzzleSelectionComponent_C::SwapTransformsOfTwoIndices(int32 FromIndex, int32 ToIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "SwapTransformsOfTwoIndices");

	Params::BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices Parms{};

	Parms.FromIndex = FromIndex;
	Parms.ToIndex = ToIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.GetState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EPuzzleMovementStates                   State_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PuzzleSelectionComponent_C::GetState(EPuzzleMovementStates* State_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "GetState");

	Params::BP_PuzzleSelectionComponent_C_GetState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (State_0 != nullptr)
		*State_0 = Parms.State_0;
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.GetSlotTransformOfItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              PuzzleItem                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SlotTransform                                          (Parm, OutParm, IsPlainOldData, NoDestructor)

void UBP_PuzzleSelectionComponent_C::GetSlotTransformOfItem(class UPrimitiveComponent* PuzzleItem, struct FTransform* SlotTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "GetSlotTransformOfItem");

	Params::BP_PuzzleSelectionComponent_C_GetSlotTransformOfItem Parms{};

	Parms.PuzzleItem = PuzzleItem;

	UObject::ProcessEvent(Func, &Parms);

	if (SlotTransform != nullptr)
		*SlotTransform = std::move(Parms.SlotTransform);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.IsAnySlotsEnabled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_PuzzleSelectionComponent_C::IsAnySlotsEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "IsAnySlotsEnabled");

	Params::BP_PuzzleSelectionComponent_C_IsAnySlotsEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.HandleHighlightOnFailedNavigation
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NavigationSucessful                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PuzzleSelectionComponent_C::HandleHighlightOnFailedNavigation(bool NavigationSucessful, int32 SlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "HandleHighlightOnFailedNavigation");

	Params::BP_PuzzleSelectionComponent_C_HandleHighlightOnFailedNavigation Parms{};

	Parms.NavigationSucessful = NavigationSucessful;
	Parms.SlotIndex = SlotIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.SavePuzzle
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::SavePuzzle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "SavePuzzle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.LoadPuzzle
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::LoadPuzzle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "LoadPuzzle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.StopHighlightOfAllPuzzleItems
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_PuzzleSelectionComponent_C::StopHighlightOfAllPuzzleItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "StopHighlightOfAllPuzzleItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.IsSavedItemsTheSameAsSetup
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsItemsTheSame                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_PuzzleSelectionComponent_C::IsSavedItemsTheSameAsSetup(bool* IsItemsTheSame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "IsSavedItemsTheSameAsSetup");

	Params::BP_PuzzleSelectionComponent_C_IsSavedItemsTheSameAsSetup Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsItemsTheSame != nullptr)
		*IsItemsTheSame = Parms.IsItemsTheSame;
}


// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.IsSavedArrayTheSameLengthAsSetup
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_PuzzleSelectionComponent_C::IsSavedArrayTheSameLengthAsSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PuzzleSelectionComponent_C", "IsSavedArrayTheSameLengthAsSetup");

	Params::BP_PuzzleSelectionComponent_C_IsSavedArrayTheSameLengthAsSetup Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

