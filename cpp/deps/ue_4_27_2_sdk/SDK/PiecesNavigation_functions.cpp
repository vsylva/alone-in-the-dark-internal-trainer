#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PiecesNavigation

#include "Basic.hpp"

#include "PiecesNavigation_classes.hpp"
#include "PiecesNavigation_parameters.hpp"


namespace SDK
{

// Function PiecesNavigation.PiecesAsyncNavigationSystem.FindPathToActorAsynchronously
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          PathStart                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           GoalActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TetherDistance                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           PathfindingContext                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UNavigationQueryFilter>FilterClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNavAsyncQueryId                 OutQueryId                                             (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPiecesAsyncNavigationSystem::FindPathToActorAsynchronously(const struct FVector& PathStart, class AActor* GoalActor, float TetherDistance, class AActor* PathfindingContext, TSubclassOf<class UNavigationQueryFilter> FilterClass, struct FNavAsyncQueryId* OutQueryId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesAsyncNavigationSystem", "FindPathToActorAsynchronously");

	Params::PiecesAsyncNavigationSystem_FindPathToActorAsynchronously Parms{};

	Parms.PathStart = std::move(PathStart);
	Parms.GoalActor = GoalActor;
	Parms.TetherDistance = TetherDistance;
	Parms.PathfindingContext = PathfindingContext;
	Parms.FilterClass = FilterClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutQueryId != nullptr)
		*OutQueryId = std::move(Parms.OutQueryId);

	return Parms.ReturnValue;
}


// Function PiecesNavigation.PiecesAsyncNavigationSystem.FindPathToLocationAsynchronously
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          PathStart                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          PathEnd                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           PathfindingContext                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UNavigationQueryFilter>FilterClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNavAsyncQueryId                 OutQueryId                                             (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPiecesAsyncNavigationSystem::FindPathToLocationAsynchronously(const struct FVector& PathStart, const struct FVector& PathEnd, class AActor* PathfindingContext, TSubclassOf<class UNavigationQueryFilter> FilterClass, struct FNavAsyncQueryId* OutQueryId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesAsyncNavigationSystem", "FindPathToLocationAsynchronously");

	Params::PiecesAsyncNavigationSystem_FindPathToLocationAsynchronously Parms{};

	Parms.PathStart = std::move(PathStart);
	Parms.PathEnd = std::move(PathEnd);
	Parms.PathfindingContext = PathfindingContext;
	Parms.FilterClass = FilterClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutQueryId != nullptr)
		*OutQueryId = std::move(Parms.OutQueryId);

	return Parms.ReturnValue;
}


// Function PiecesNavigation.PiecesAsyncNavigationSystem.GetQueryStatusWithResult
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FNavAsyncQueryId                 RefQueryId                                             (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UNavigationPath*                  OutPath                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EQueryStatus                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EQueryStatus UPiecesAsyncNavigationSystem::GetQueryStatusWithResult(struct FNavAsyncQueryId& RefQueryId, class UNavigationPath** OutPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesAsyncNavigationSystem", "GetQueryStatusWithResult");

	Params::PiecesAsyncNavigationSystem_GetQueryStatusWithResult Parms{};

	Parms.RefQueryId = std::move(RefQueryId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	RefQueryId = std::move(Parms.RefQueryId);

	if (OutPath != nullptr)
		*OutPath = Parms.OutPath;

	return Parms.ReturnValue;
}

}

