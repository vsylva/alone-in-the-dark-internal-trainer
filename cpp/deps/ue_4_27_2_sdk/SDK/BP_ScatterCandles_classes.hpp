#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ScatterCandles

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ScatterCandles.BP_ScatterCandles_C
// 0x0188 (0x03C0 - 0x0238)
class ABP_ScatterCandles_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UHierarchicalInstancedStaticMeshComponent* LitCandle2;                                        // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHierarchicalInstancedStaticMeshComponent* LitICandle1;                                       // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHierarchicalInstancedStaticMeshComponent* UnlitCandle2;                                      // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHierarchicalInstancedStaticMeshComponent* UnlitCandle1;                                      // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MeshWithSockets;                                   // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Amount;                                            // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Spawn_Area;                                        // 0x027C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinSize_XY;                                        // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSize_XY;                                        // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMesh*>                    UnlitCandles;                                      // 0x0290(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         MinSize_Z;                                         // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSize_Z;                                         // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreviousPosition;                                  // 0x02A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHierarchicalInstancedStaticMeshComponent* RandomInstance;                                    // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Minimum_Distance;                                  // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Random_Seed;                                       // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          Stream;                                            // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	bool                                          NewVar_0;                                          // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           UnlitTag;                                          // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UStaticMesh*>                    LitCandles;                                        // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           LitTag;                                            // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Percent_Lit_Candles;                               // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RandomTransform;                                   // 0x0310(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Light_Intensity__Candelas_;                        // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light_Attenuation_Radius;                          // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light_Height;                                      // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light_Temperature;                                 // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Spawn_Light_Sources;                               // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Spawn_Candle_Flames;                               // 0x0351(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_352[0x6];                                      // 0x0352(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNiagaraSystem>          CandleFlame;                                       // 0x0358(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FTransform>                     AllTransforms;                                     // 0x0380(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Overlap_Prevention;                                // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Socket_Placement;                                  // 0x0391(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_392[0x6];                                      // 0x0392(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Socketed_Mesh;                                     // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Socketed_Mesh_Rotation;                            // 0x03A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         EmissiveIntensityMultiplier;                       // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Locked;                                            // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_3B1[0x3];                                      // 0x03B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TotalInstanceCount;                                // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PreviewStaticMesh;                                 // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_ScatterCandles(int32 EntryPoint);
	void DebugInstanceCounts();
	void Unlock_For_Editing();
	void Lock_Editing_and_Make_Persistent();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void CreateCandlePreviewInstanceComponents();
	void SetRandomTransformInArea(const struct FVector& Area, struct FTransform* TransformOut);
	void SetRandomInstance(bool LitInstance, bool* InstanceIsLit);
	void AddPointLightAtPosition(const struct FTransform& RelativeTransform);
	void PreventOverlap(const struct FTransform& InTransform);
	void SetSpecificLocation(const struct FVector& Location, const struct FRotator& Rotation);
	void SetRandomPreviewInstance(bool LitInstance, bool* InstanceIsLit);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ScatterCandles_C">();
	}
	static class ABP_ScatterCandles_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ScatterCandles_C>();
	}
};
static_assert(alignof(ABP_ScatterCandles_C) == 0x000010, "Wrong alignment on ABP_ScatterCandles_C");
static_assert(sizeof(ABP_ScatterCandles_C) == 0x0003C0, "Wrong size on ABP_ScatterCandles_C");
static_assert(offsetof(ABP_ScatterCandles_C, UberGraphFrame) == 0x000238, "Member 'ABP_ScatterCandles_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, LitCandle2) == 0x000240, "Member 'ABP_ScatterCandles_C::LitCandle2' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, LitICandle1) == 0x000248, "Member 'ABP_ScatterCandles_C::LitICandle1' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, UnlitCandle2) == 0x000250, "Member 'ABP_ScatterCandles_C::UnlitCandle2' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, UnlitCandle1) == 0x000258, "Member 'ABP_ScatterCandles_C::UnlitCandle1' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, MeshWithSockets) == 0x000260, "Member 'ABP_ScatterCandles_C::MeshWithSockets' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, Box) == 0x000268, "Member 'ABP_ScatterCandles_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, DefaultSceneRoot) == 0x000270, "Member 'ABP_ScatterCandles_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, Amount) == 0x000278, "Member 'ABP_ScatterCandles_C::Amount' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, Spawn_Area) == 0x00027C, "Member 'ABP_ScatterCandles_C::Spawn_Area' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, MinSize_XY) == 0x000288, "Member 'ABP_ScatterCandles_C::MinSize_XY' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, MaxSize_XY) == 0x00028C, "Member 'ABP_ScatterCandles_C::MaxSize_XY' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, UnlitCandles) == 0x000290, "Member 'ABP_ScatterCandles_C::UnlitCandles' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, MinSize_Z) == 0x0002A0, "Member 'ABP_ScatterCandles_C::MinSize_Z' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, MaxSize_Z) == 0x0002A4, "Member 'ABP_ScatterCandles_C::MaxSize_Z' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, PreviousPosition) == 0x0002A8, "Member 'ABP_ScatterCandles_C::PreviousPosition' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, RandomInstance) == 0x0002B8, "Member 'ABP_ScatterCandles_C::RandomInstance' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, Minimum_Distance) == 0x0002C0, "Member 'ABP_ScatterCandles_C::Minimum_Distance' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, Random_Seed) == 0x0002C4, "Member 'ABP_ScatterCandles_C::Random_Seed' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, Stream) == 0x0002C8, "Member 'ABP_ScatterCandles_C::Stream' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, NewVar_0) == 0x0002D0, "Member 'ABP_ScatterCandles_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, UnlitTag) == 0x0002D8, "Member 'ABP_ScatterCandles_C::UnlitTag' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, LitCandles) == 0x0002E8, "Member 'ABP_ScatterCandles_C::LitCandles' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, LitTag) == 0x0002F8, "Member 'ABP_ScatterCandles_C::LitTag' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, Percent_Lit_Candles) == 0x000308, "Member 'ABP_ScatterCandles_C::Percent_Lit_Candles' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, RandomTransform) == 0x000310, "Member 'ABP_ScatterCandles_C::RandomTransform' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, Light_Intensity__Candelas_) == 0x000340, "Member 'ABP_ScatterCandles_C::Light_Intensity__Candelas_' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, Light_Attenuation_Radius) == 0x000344, "Member 'ABP_ScatterCandles_C::Light_Attenuation_Radius' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, Light_Height) == 0x000348, "Member 'ABP_ScatterCandles_C::Light_Height' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, Light_Temperature) == 0x00034C, "Member 'ABP_ScatterCandles_C::Light_Temperature' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, Spawn_Light_Sources) == 0x000350, "Member 'ABP_ScatterCandles_C::Spawn_Light_Sources' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, Spawn_Candle_Flames) == 0x000351, "Member 'ABP_ScatterCandles_C::Spawn_Candle_Flames' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, CandleFlame) == 0x000358, "Member 'ABP_ScatterCandles_C::CandleFlame' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, AllTransforms) == 0x000380, "Member 'ABP_ScatterCandles_C::AllTransforms' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, Overlap_Prevention) == 0x000390, "Member 'ABP_ScatterCandles_C::Overlap_Prevention' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, Socket_Placement) == 0x000391, "Member 'ABP_ScatterCandles_C::Socket_Placement' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, Socketed_Mesh) == 0x000398, "Member 'ABP_ScatterCandles_C::Socketed_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, Socketed_Mesh_Rotation) == 0x0003A0, "Member 'ABP_ScatterCandles_C::Socketed_Mesh_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, EmissiveIntensityMultiplier) == 0x0003AC, "Member 'ABP_ScatterCandles_C::EmissiveIntensityMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, Locked) == 0x0003B0, "Member 'ABP_ScatterCandles_C::Locked' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, TotalInstanceCount) == 0x0003B4, "Member 'ABP_ScatterCandles_C::TotalInstanceCount' has a wrong offset!");
static_assert(offsetof(ABP_ScatterCandles_C, PreviewStaticMesh) == 0x0003B8, "Member 'ABP_ScatterCandles_C::PreviewStaticMesh' has a wrong offset!");

}

