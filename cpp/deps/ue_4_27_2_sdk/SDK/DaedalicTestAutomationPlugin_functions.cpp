#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DaedalicTestAutomationPlugin

#include "Basic.hpp"

#include "DaedalicTestAutomationPlugin_classes.hpp"
#include "DaedalicTestAutomationPlugin_parameters.hpp"


namespace SDK
{

// Function DaedalicTestAutomationPlugin.DaeGauntletTestController.ChangeLevel
// (Final, Native, Private)

void UDaeGauntletTestController::ChangeLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DaeGauntletTestController", "ChangeLevel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeGauntletTestController.DiscoverTests
// (Final, Native, Private)

void UDaeGauntletTestController::DiscoverTests()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DaeGauntletTestController", "DiscoverTests");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeGauntletTestController.OnTestSuiteFinished
// (Final, Native, Private)
// Parameters:
// class ADaeTestSuiteActor*               TestSuite                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeGauntletTestController::OnTestSuiteFinished(class ADaeTestSuiteActor* TestSuite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DaeGauntletTestController", "OnTestSuiteFinished");

	Params::DaeGauntletTestController_OnTestSuiteFinished Parms{};

	Parms.TestSuite = TestSuite;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestActor.FinishAct
// (Final, Native, Public, BlueprintCallable)

void ADaeTestActor::FinishAct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DaeTestActor", "FinishAct");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestActor.ReceiveOnAct
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          Parameter                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADaeTestActor::ReceiveOnAct(class UObject* Parameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DaeTestActor", "ReceiveOnAct");

	Params::DaeTestActor_ReceiveOnAct Parms{};

	Parms.Parameter = Parameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestActor.ReceiveOnArrange
// (Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          Parameter                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADaeTestActor::ReceiveOnArrange(class UObject* Parameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DaeTestActor", "ReceiveOnArrange");

	Params::DaeTestActor_ReceiveOnArrange Parms{};

	Parms.Parameter = Parameter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DaedalicTestAutomationPlugin.DaeTestActor.ReceiveOnAssert
// (Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          Parameter                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADaeTestActor::ReceiveOnAssert(class UObject* Parameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DaeTestActor", "ReceiveOnAssert");

	Params::DaeTestActor_ReceiveOnAssert Parms{};

	Parms.Parameter = Parameter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DaedalicTestAutomationPlugin.DaeTestActor.ReceiveOnAssume
// (Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          Parameter                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADaeTestActor::ReceiveOnAssume(class UObject* Parameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DaeTestActor", "ReceiveOnAssume");

	Params::DaeTestActor_ReceiveOnAssume Parms{};

	Parms.Parameter = Parameter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DaedalicTestAutomationPlugin.DaeTestActor.GetCurrentParameter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* ADaeTestActor::GetCurrentParameter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DaeTestActor", "GetCurrentParameter");

	Params::DaeTestActor_GetCurrentParameter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertCompareByte
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// uint8                                   First                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDaeTestComparisonMethod                ShouldBe                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Second                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertCompareByte(uint8 First, EDaeTestComparisonMethod ShouldBe, uint8 Second, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertCompareByte");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertCompareByte Parms{};

	Parms.First = First;
	Parms.ShouldBe = ShouldBe;
	Parms.Second = Second;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertCompareFloat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   First                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDaeTestComparisonMethod                ShouldBe                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Second                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertCompareFloat(float First, EDaeTestComparisonMethod ShouldBe, float Second, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertCompareFloat");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertCompareFloat Parms{};

	Parms.First = First;
	Parms.ShouldBe = ShouldBe;
	Parms.Second = Second;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertCompareInt32
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   First                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDaeTestComparisonMethod                ShouldBe                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Second                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertCompareInt32(int32 First, EDaeTestComparisonMethod ShouldBe, int32 Second, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertCompareInt32");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt32 Parms{};

	Parms.First = First;
	Parms.ShouldBe = ShouldBe;
	Parms.Second = Second;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertCompareInt64
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int64                                   First                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDaeTestComparisonMethod                ShouldBe                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   Second                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertCompareInt64(int64 First, EDaeTestComparisonMethod ShouldBe, int64 Second, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertCompareInt64");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt64 Parms{};

	Parms.First = First;
	Parms.ShouldBe = ShouldBe;
	Parms.Second = Second;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertEqualByte
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// uint8                                   Actual                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Expected                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertEqualByte(uint8 Actual, uint8 Expected, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertEqualByte");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertEqualByte Parms{};

	Parms.Actual = Actual;
	Parms.Expected = Expected;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertEqualFloat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   Actual                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Expected                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Tolerance                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertEqualFloat(float Actual, float Expected, const class FString& What, class UObject* Context, const float Tolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertEqualFloat");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertEqualFloat Parms{};

	Parms.Actual = Actual;
	Parms.Expected = Expected;
	Parms.What = std::move(What);
	Parms.Context = Context;
	Parms.Tolerance = Tolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertEqualInt32
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Actual                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Expected                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertEqualInt32(int32 Actual, int32 Expected, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertEqualInt32");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt32 Parms{};

	Parms.Actual = Actual;
	Parms.Expected = Expected;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertEqualInt64
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int64                                   Actual                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   Expected                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertEqualInt64(int64 Actual, int64 Expected, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertEqualInt64");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt64 Parms{};

	Parms.Actual = Actual;
	Parms.Expected = Expected;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertEqualName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             Actual                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Expected                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreCase                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertEqualName(const class FName& Actual, const class FName& Expected, bool bIgnoreCase, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertEqualName");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertEqualName Parms{};

	Parms.Actual = Actual;
	Parms.Expected = Expected;
	Parms.bIgnoreCase = bIgnoreCase;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertEqualRotator
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         Actual                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         Expected                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Tolerance                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertEqualRotator(const struct FRotator& Actual, const struct FRotator& Expected, const class FString& What, class UObject* Context, const float Tolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertEqualRotator");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertEqualRotator Parms{};

	Parms.Actual = std::move(Actual);
	Parms.Expected = std::move(Expected);
	Parms.What = std::move(What);
	Parms.Context = Context;
	Parms.Tolerance = Tolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertEqualString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Actual                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Expected                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreCase                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertEqualString(const class FString& Actual, const class FString& Expected, bool bIgnoreCase, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertEqualString");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertEqualString Parms{};

	Parms.Actual = std::move(Actual);
	Parms.Expected = std::move(Expected);
	Parms.bIgnoreCase = bIgnoreCase;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertEqualText
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Actual                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             Expected                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bIgnoreCase                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertEqualText(const class FText& Actual, const class FText& Expected, bool bIgnoreCase, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertEqualText");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertEqualText Parms{};

	Parms.Actual = std::move(Actual);
	Parms.Expected = std::move(Expected);
	Parms.bIgnoreCase = bIgnoreCase;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertEqualTransform
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       Actual                                                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform                       Expected                                               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Tolerance                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertEqualTransform(const struct FTransform& Actual, const struct FTransform& Expected, const class FString& What, class UObject* Context, const float Tolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertEqualTransform");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertEqualTransform Parms{};

	Parms.Actual = std::move(Actual);
	Parms.Expected = std::move(Expected);
	Parms.What = std::move(What);
	Parms.Context = Context;
	Parms.Tolerance = Tolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertEqualVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Actual                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Expected                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Tolerance                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertEqualVector(const struct FVector& Actual, const struct FVector& Expected, const class FString& What, class UObject* Context, const float Tolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertEqualVector");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertEqualVector Parms{};

	Parms.Actual = std::move(Actual);
	Parms.Expected = std::move(Expected);
	Parms.What = std::move(What);
	Parms.Context = Context;
	Parms.Tolerance = Tolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertFail
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertFail(const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertFail");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertFail Parms{};

	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertFalse
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertFalse(bool bValue, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertFalse");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertFalse Parms{};

	Parms.bValue = bValue;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertImageIsSet
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UImage*                           Image                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertImageIsSet(class UImage* Image, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertImageIsSet");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertImageIsSet Parms{};

	Parms.Image = Image;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertInRangeByte
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// uint8                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   MinInclusive                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   MaxInclusive                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertInRangeByte(uint8 Value, uint8 MinInclusive, uint8 MaxInclusive, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertInRangeByte");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertInRangeByte Parms{};

	Parms.Value = Value;
	Parms.MinInclusive = MinInclusive;
	Parms.MaxInclusive = MaxInclusive;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertInRangeFloat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinInclusive                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxInclusive                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertInRangeFloat(float Value, float MinInclusive, float MaxInclusive, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertInRangeFloat");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertInRangeFloat Parms{};

	Parms.Value = Value;
	Parms.MinInclusive = MinInclusive;
	Parms.MaxInclusive = MaxInclusive;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertInRangeInt32
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinInclusive                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxInclusive                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertInRangeInt32(int32 Value, int32 MinInclusive, int32 MaxInclusive, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertInRangeInt32");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt32 Parms{};

	Parms.Value = Value;
	Parms.MinInclusive = MinInclusive;
	Parms.MaxInclusive = MaxInclusive;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertInRangeInt64
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int64                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   MinInclusive                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   MaxInclusive                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertInRangeInt64(int64 Value, int64 MinInclusive, int64 MaxInclusive, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertInRangeInt64");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt64 Parms{};

	Parms.Value = Value;
	Parms.MinInclusive = MinInclusive;
	Parms.MaxInclusive = MaxInclusive;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertInvalid
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertInvalid(class UObject* Object, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertInvalid");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertInvalid Parms{};

	Parms.Object = Object;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotEqualByte
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// uint8                                   Actual                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Unexpected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertNotEqualByte(uint8 Actual, uint8 Unexpected, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertNotEqualByte");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualByte Parms{};

	Parms.Actual = Actual;
	Parms.Unexpected = Unexpected;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotEqualFloat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   Actual                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Unexpected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Tolerance                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertNotEqualFloat(float Actual, float Unexpected, const class FString& What, class UObject* Context, const float Tolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertNotEqualFloat");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualFloat Parms{};

	Parms.Actual = Actual;
	Parms.Unexpected = Unexpected;
	Parms.What = std::move(What);
	Parms.Context = Context;
	Parms.Tolerance = Tolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotEqualInt32
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Actual                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Unexpected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertNotEqualInt32(int32 Actual, int32 Unexpected, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertNotEqualInt32");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt32 Parms{};

	Parms.Actual = Actual;
	Parms.Unexpected = Unexpected;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotEqualInt64
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int64                                   Actual                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   Unexpected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertNotEqualInt64(int64 Actual, int64 Unexpected, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertNotEqualInt64");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt64 Parms{};

	Parms.Actual = Actual;
	Parms.Unexpected = Unexpected;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotEqualName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             Actual                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Unexpected                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreCase                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertNotEqualName(const class FName& Actual, const class FName& Unexpected, bool bIgnoreCase, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertNotEqualName");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualName Parms{};

	Parms.Actual = Actual;
	Parms.Unexpected = Unexpected;
	Parms.bIgnoreCase = bIgnoreCase;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotEqualRotator
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         Actual                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         Unexpected                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Tolerance                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertNotEqualRotator(const struct FRotator& Actual, const struct FRotator& Unexpected, const class FString& What, class UObject* Context, const float Tolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertNotEqualRotator");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualRotator Parms{};

	Parms.Actual = std::move(Actual);
	Parms.Unexpected = std::move(Unexpected);
	Parms.What = std::move(What);
	Parms.Context = Context;
	Parms.Tolerance = Tolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotEqualString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Actual                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Unexpected                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreCase                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertNotEqualString(const class FString& Actual, const class FString& Unexpected, bool bIgnoreCase, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertNotEqualString");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualString Parms{};

	Parms.Actual = std::move(Actual);
	Parms.Unexpected = std::move(Unexpected);
	Parms.bIgnoreCase = bIgnoreCase;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotEqualText
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Actual                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             Unexpected                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bIgnoreCase                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertNotEqualText(const class FText& Actual, const class FText& Unexpected, bool bIgnoreCase, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertNotEqualText");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualText Parms{};

	Parms.Actual = std::move(Actual);
	Parms.Unexpected = std::move(Unexpected);
	Parms.bIgnoreCase = bIgnoreCase;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotEqualTransform
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       Actual                                                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform                       Unexpected                                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Tolerance                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertNotEqualTransform(const struct FTransform& Actual, const struct FTransform& Unexpected, const class FString& What, class UObject* Context, const float Tolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertNotEqualTransform");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualTransform Parms{};

	Parms.Actual = std::move(Actual);
	Parms.Unexpected = std::move(Unexpected);
	Parms.What = std::move(What);
	Parms.Context = Context;
	Parms.Tolerance = Tolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotEqualVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Actual                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Unexpected                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Tolerance                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertNotEqualVector(const struct FVector& Actual, const struct FVector& Unexpected, const class FString& What, class UObject* Context, const float Tolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertNotEqualVector");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualVector Parms{};

	Parms.Actual = std::move(Actual);
	Parms.Unexpected = std::move(Unexpected);
	Parms.What = std::move(What);
	Parms.Context = Context;
	Parms.Tolerance = Tolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotInRangeByte
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// uint8                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   MinInclusive                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   MaxInclusive                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertNotInRangeByte(uint8 Value, uint8 MinInclusive, uint8 MaxInclusive, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertNotInRangeByte");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeByte Parms{};

	Parms.Value = Value;
	Parms.MinInclusive = MinInclusive;
	Parms.MaxInclusive = MaxInclusive;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotInRangeFloat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinInclusive                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxInclusive                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertNotInRangeFloat(float Value, float MinInclusive, float MaxInclusive, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertNotInRangeFloat");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeFloat Parms{};

	Parms.Value = Value;
	Parms.MinInclusive = MinInclusive;
	Parms.MaxInclusive = MaxInclusive;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotInRangeInt32
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinInclusive                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxInclusive                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertNotInRangeInt32(int32 Value, int32 MinInclusive, int32 MaxInclusive, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertNotInRangeInt32");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt32 Parms{};

	Parms.Value = Value;
	Parms.MinInclusive = MinInclusive;
	Parms.MaxInclusive = MaxInclusive;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotInRangeInt64
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int64                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   MinInclusive                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   MaxInclusive                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertNotInRangeInt64(int64 Value, int64 MinInclusive, int64 MaxInclusive, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertNotInRangeInt64");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt64 Parms{};

	Parms.Value = Value;
	Parms.MinInclusive = MinInclusive;
	Parms.MaxInclusive = MaxInclusive;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertRichTextIsSet
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class URichTextBlock*                   RichTextBlock                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertRichTextIsSet(class URichTextBlock* RichTextBlock, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertRichTextIsSet");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertRichTextIsSet Parms{};

	Parms.RichTextBlock = RichTextBlock;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertTextIsSet
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UTextBlock*                       TextBlock                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertTextIsSet(class UTextBlock* TextBlock, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertTextIsSet");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertTextIsSet Parms{};

	Parms.TextBlock = TextBlock;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertTrue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertTrue(bool bValue, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertTrue");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertTrue Parms{};

	Parms.bValue = bValue;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertValid
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertValid(class UObject* Object, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertValid");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertValid Parms{};

	Parms.Object = Object;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertWasNotTriggered
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ADaeTestTriggerBox*               TestTriggerBox                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertWasNotTriggered(class ADaeTestTriggerBox* TestTriggerBox, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertWasNotTriggered");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertWasNotTriggered Parms{};

	Parms.TestTriggerBox = TestTriggerBox;
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertWasTriggered
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ADaeTestTriggerBox*               TestTriggerBox                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertWasTriggered(class ADaeTestTriggerBox* TestTriggerBox, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertWasTriggered");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertWasTriggered Parms{};

	Parms.TestTriggerBox = TestTriggerBox;
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertWidgetIsVisible
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssertBlueprintFunctionLibrary::AssertWidgetIsVisible(class UUserWidget* Widget, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssertBlueprintFunctionLibrary", "AssertWidgetIsVisible");

	Params::DaeTestAssertBlueprintFunctionLibrary_AssertWidgetIsVisible Parms{};

	Parms.Widget = Widget;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssumeBlueprintFunctionLibrary.AssumeFalse
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssumeBlueprintFunctionLibrary::AssumeFalse(bool bValue, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssumeBlueprintFunctionLibrary", "AssumeFalse");

	Params::DaeTestAssumeBlueprintFunctionLibrary_AssumeFalse Parms{};

	Parms.bValue = bValue;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestAssumeBlueprintFunctionLibrary.AssumeTrue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           What                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestAssumeBlueprintFunctionLibrary::AssumeTrue(bool bValue, const class FString& What, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestAssumeBlueprintFunctionLibrary", "AssumeTrue");

	Params::DaeTestAssumeBlueprintFunctionLibrary_AssumeTrue Parms{};

	Parms.bValue = bValue;
	Parms.What = std::move(What);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestDelayBlueprintFunctionLibrary.DelayFrames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   NumFrames                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestDelayBlueprintFunctionLibrary::DelayFrames(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, int32 NumFrames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestDelayBlueprintFunctionLibrary", "DelayFrames");

	Params::DaeTestDelayBlueprintFunctionLibrary_DelayFrames Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.NumFrames = NumFrames;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestDelayBlueprintFunctionLibrary.DelayUntilTriggered
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class ADaeTestTriggerBox*               TestTriggerBox                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestDelayBlueprintFunctionLibrary::DelayUntilTriggered(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, class ADaeTestTriggerBox* TestTriggerBox)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestDelayBlueprintFunctionLibrary", "DelayUntilTriggered");

	Params::DaeTestDelayBlueprintFunctionLibrary_DelayUntilTriggered Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.TestTriggerBox = TestTriggerBox;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestInputBlueprintFunctionLibrary.ApplyInputAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ActionName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInputEvent                             InputEventType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestInputBlueprintFunctionLibrary::ApplyInputAction(class UObject* Context, const class FName& ActionName, EInputEvent InputEventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestInputBlueprintFunctionLibrary", "ApplyInputAction");

	Params::DaeTestInputBlueprintFunctionLibrary_ApplyInputAction Parms{};

	Parms.Context = Context;
	Parms.ActionName = ActionName;
	Parms.InputEventType = InputEventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestInputBlueprintFunctionLibrary.ApplyInputAxis
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AxisName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AxisValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDaeTestInputBlueprintFunctionLibrary::ApplyInputAxis(class UObject* Context, const class FName& AxisName, float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DaeTestInputBlueprintFunctionLibrary", "ApplyInputAxis");

	Params::DaeTestInputBlueprintFunctionLibrary_ApplyInputAxis Parms{};

	Parms.Context = Context;
	Parms.AxisName = AxisName;
	Parms.AxisValue = AxisValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestParameterProviderActor.GetParameters
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// TArray<class UObject*>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UObject*> ADaeTestParameterProviderActor::GetParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DaeTestParameterProviderActor", "GetParameters");

	Params::DaeTestParameterProviderActor_GetParameters Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DaedalicTestAutomationPlugin.DaeTestSuiteActor.OnTestFailed
// (Final, Native, Private)
// Parameters:
// class ADaeTestActor*                    Test                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Parameter                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FailureMessage                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADaeTestSuiteActor::OnTestFailed(class ADaeTestActor* Test, class UObject* Parameter, const class FString& FailureMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DaeTestSuiteActor", "OnTestFailed");

	Params::DaeTestSuiteActor_OnTestFailed Parms{};

	Parms.Test = Test;
	Parms.Parameter = Parameter;
	Parms.FailureMessage = std::move(FailureMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestSuiteActor.OnTestSkipped
// (Final, Native, Private)
// Parameters:
// class ADaeTestActor*                    Test                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Parameter                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SkipReason                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADaeTestSuiteActor::OnTestSkipped(class ADaeTestActor* Test, class UObject* Parameter, const class FString& SkipReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DaeTestSuiteActor", "OnTestSkipped");

	Params::DaeTestSuiteActor_OnTestSkipped Parms{};

	Parms.Test = Test;
	Parms.Parameter = Parameter;
	Parms.SkipReason = std::move(SkipReason);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestSuiteActor.OnTestSuccessful
// (Final, Native, Private)
// Parameters:
// class ADaeTestActor*                    Test                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Parameter                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADaeTestSuiteActor::OnTestSuccessful(class ADaeTestActor* Test, class UObject* Parameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DaeTestSuiteActor", "OnTestSuccessful");

	Params::DaeTestSuiteActor_OnTestSuccessful Parms{};

	Parms.Test = Test;
	Parms.Parameter = Parameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestSuiteActor.ReceiveOnAfterAll
// (Event, Public, BlueprintEvent)

void ADaeTestSuiteActor::ReceiveOnAfterAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DaeTestSuiteActor", "ReceiveOnAfterAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DaedalicTestAutomationPlugin.DaeTestSuiteActor.ReceiveOnAfterEach
// (Event, Public, BlueprintEvent)

void ADaeTestSuiteActor::ReceiveOnAfterEach()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DaeTestSuiteActor", "ReceiveOnAfterEach");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DaedalicTestAutomationPlugin.DaeTestSuiteActor.ReceiveOnBeforeAll
// (Event, Public, BlueprintEvent)

void ADaeTestSuiteActor::ReceiveOnBeforeAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DaeTestSuiteActor", "ReceiveOnBeforeAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DaedalicTestAutomationPlugin.DaeTestSuiteActor.ReceiveOnBeforeEach
// (Event, Public, BlueprintEvent)

void ADaeTestSuiteActor::ReceiveOnBeforeEach()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DaeTestSuiteActor", "ReceiveOnBeforeEach");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DaedalicTestAutomationPlugin.DaeTestTriggerBox.OnActorBeginOverlapBroadcast
// (Final, Native, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADaeTestTriggerBox::OnActorBeginOverlapBroadcast(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DaeTestTriggerBox", "OnActorBeginOverlapBroadcast");

	Params::DaeTestTriggerBox_OnActorBeginOverlapBroadcast Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DaedalicTestAutomationPlugin.DaeTestTriggerBox.WasTriggered
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ADaeTestTriggerBox::WasTriggered() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DaeTestTriggerBox", "WasTriggered");

	Params::DaeTestTriggerBox_WasTriggered Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

