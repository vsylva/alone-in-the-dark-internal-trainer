#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ModelingComponents

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum ModelingComponents.EBaseCreateFromSelectedTargetType
// NumValues: 0x0004
enum class EBaseCreateFromSelectedTargetType : uint32
{
	NewAsset                                 = 0,
	FirstInputAsset                          = 1,
	LastInputAsset                           = 2,
	EBaseCreateFromSelectedTargetType_MAX    = 3,
};

// Enum ModelingComponents.EDynamicMeshTangentCalcType
// NumValues: 0x0004
enum class EDynamicMeshTangentCalcType : uint8
{
	NoTangents                               = 0,
	AutoCalculated                           = 1,
	ExternallyCalculated                     = 2,
	EDynamicMeshTangentCalcType_MAX          = 3,
};

// Enum ModelingComponents.EMultiTransformerMode
// NumValues: 0x0003
enum class EMultiTransformerMode : uint8
{
	DefaultGizmo                             = 1,
	QuickAxisTranslation                     = 2,
	EMultiTransformerMode_MAX                = 3,
};

// Enum ModelingComponents.EHandleSourcesMethod
// NumValues: 0x0004
enum class EHandleSourcesMethod : uint8
{
	DeleteSources                            = 0,
	HideSources                              = 1,
	KeepSources                              = 2,
	EHandleSourcesMethod_MAX                 = 3,
};

// Enum ModelingComponents.ESpaceCurveControlPointFalloffType
// NumValues: 0x0003
enum class ESpaceCurveControlPointFalloffType : uint32
{
	Linear                                   = 0,
	Smooth                                   = 1,
	ESpaceCurveControlPointFalloffType_MAX   = 2,
};

// Enum ModelingComponents.ESpaceCurveControlPointOriginMode
// NumValues: 0x0004
enum class ESpaceCurveControlPointOriginMode : uint32
{
	Shared                                   = 0,
	First                                    = 1,
	Last                                     = 2,
	ESpaceCurveControlPointOriginMode_MAX    = 3,
};

// Enum ModelingComponents.ESpaceCurveControlPointTransformMode
// NumValues: 0x0003
enum class ESpaceCurveControlPointTransformMode : uint32
{
	Shared                                   = 0,
	PerVertex                                = 1,
	ESpaceCurveControlPointTransformMode_MAX = 2,
};

// Enum ModelingComponents.EUVLayoutPreviewSide
// NumValues: 0x0003
enum class EUVLayoutPreviewSide : uint32
{
	Left                                     = 0,
	Right                                    = 1,
	EUVLayoutPreviewSide_MAX                 = 2,
};

// ScriptStruct ModelingComponents.RenderableTriangleVertex
// 0x0024 (0x0024 - 0x0000)
struct FRenderableTriangleVertex final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV;                                                // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRenderableTriangleVertex) == 0x000004, "Wrong alignment on FRenderableTriangleVertex");
static_assert(sizeof(FRenderableTriangleVertex) == 0x000024, "Wrong size on FRenderableTriangleVertex");
static_assert(offsetof(FRenderableTriangleVertex, Position) == 0x000000, "Member 'FRenderableTriangleVertex::Position' has a wrong offset!");
static_assert(offsetof(FRenderableTriangleVertex, UV) == 0x00000C, "Member 'FRenderableTriangleVertex::UV' has a wrong offset!");
static_assert(offsetof(FRenderableTriangleVertex, Normal) == 0x000014, "Member 'FRenderableTriangleVertex::Normal' has a wrong offset!");
static_assert(offsetof(FRenderableTriangleVertex, Color) == 0x000020, "Member 'FRenderableTriangleVertex::Color' has a wrong offset!");

// ScriptStruct ModelingComponents.RenderableTriangle
// 0x0078 (0x0078 - 0x0000)
struct FRenderableTriangle final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRenderableTriangleVertex              Vertex0;                                           // 0x0008(0x0024)(NoDestructor, NativeAccessSpecifierPublic)
	struct FRenderableTriangleVertex              Vertex1;                                           // 0x002C(0x0024)(NoDestructor, NativeAccessSpecifierPublic)
	struct FRenderableTriangleVertex              Vertex2;                                           // 0x0050(0x0024)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRenderableTriangle) == 0x000008, "Wrong alignment on FRenderableTriangle");
static_assert(sizeof(FRenderableTriangle) == 0x000078, "Wrong size on FRenderableTriangle");
static_assert(offsetof(FRenderableTriangle, Material) == 0x000000, "Member 'FRenderableTriangle::Material' has a wrong offset!");
static_assert(offsetof(FRenderableTriangle, Vertex0) == 0x000008, "Member 'FRenderableTriangle::Vertex0' has a wrong offset!");
static_assert(offsetof(FRenderableTriangle, Vertex1) == 0x00002C, "Member 'FRenderableTriangle::Vertex1' has a wrong offset!");
static_assert(offsetof(FRenderableTriangle, Vertex2) == 0x000050, "Member 'FRenderableTriangle::Vertex2' has a wrong offset!");

}

