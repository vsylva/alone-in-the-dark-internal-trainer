#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MediaFrameworkUtilities

#include "Basic.hpp"

#include "MediaAssets_classes.hpp"
#include "OpenCVLensDistortion_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "TimeManagement_classes.hpp"
#include "MediaIOCore_classes.hpp"


namespace SDK
{

// Class MediaFrameworkUtilities.MediaBundle
// 0x00C8 (0x00F0 - 0x0028)
class UMediaBundle final : public UObject
{
public:
	class UMediaSource*                           MediaSource;                                       // 0x0028(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoopMediaSource;                                  // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReopenSourceOnError;                              // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMediaPlayer*                           MediaPlayer;                                       // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMediaTexture*                          MediaTexture;                                      // 0x0040(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     Material;                                          // 0x0048(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FOpenCVLensDistortionParameters        LensParameters;                                    // 0x0050(0x0034)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FOpenCVCameraViewInfo                  UndistortedCameraViewInfo;                         // 0x0084(0x000C)(Edit, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FOpenCVLensDistortionParameters        CurrentLensParameters;                             // 0x0090(0x0034)(Transient, NonTransactional, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 LensDisplacementMap;                               // 0x00C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ReferenceCount;                                    // 0x00D0(0x0004)(Edit, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, DuplicateTransient, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D4[0x1C];                                      // 0x00D4(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UTextureRenderTarget2D* GetLensDisplacementTexture();
	class UMaterialInterface* GetMaterial();
	class UMediaPlayer* GetMediaPlayer();
	class UMediaSource* GetMediaSource();
	class UMediaTexture* GetMediaTexture();
	struct FOpenCVCameraViewInfo GetUndistortedCameraViewInfo();
	void OnMediaClosed();
	void OnMediaOpenFailed(const class FString& DeviceUrl);
	void OnMediaOpenOpened(const class FString& DeviceUrl);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MediaBundle">();
	}
	static class UMediaBundle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMediaBundle>();
	}
};
static_assert(alignof(UMediaBundle) == 0x000008, "Wrong alignment on UMediaBundle");
static_assert(sizeof(UMediaBundle) == 0x0000F0, "Wrong size on UMediaBundle");
static_assert(offsetof(UMediaBundle, MediaSource) == 0x000028, "Member 'UMediaBundle::MediaSource' has a wrong offset!");
static_assert(offsetof(UMediaBundle, bLoopMediaSource) == 0x000030, "Member 'UMediaBundle::bLoopMediaSource' has a wrong offset!");
static_assert(offsetof(UMediaBundle, bReopenSourceOnError) == 0x000031, "Member 'UMediaBundle::bReopenSourceOnError' has a wrong offset!");
static_assert(offsetof(UMediaBundle, MediaPlayer) == 0x000038, "Member 'UMediaBundle::MediaPlayer' has a wrong offset!");
static_assert(offsetof(UMediaBundle, MediaTexture) == 0x000040, "Member 'UMediaBundle::MediaTexture' has a wrong offset!");
static_assert(offsetof(UMediaBundle, Material) == 0x000048, "Member 'UMediaBundle::Material' has a wrong offset!");
static_assert(offsetof(UMediaBundle, LensParameters) == 0x000050, "Member 'UMediaBundle::LensParameters' has a wrong offset!");
static_assert(offsetof(UMediaBundle, UndistortedCameraViewInfo) == 0x000084, "Member 'UMediaBundle::UndistortedCameraViewInfo' has a wrong offset!");
static_assert(offsetof(UMediaBundle, CurrentLensParameters) == 0x000090, "Member 'UMediaBundle::CurrentLensParameters' has a wrong offset!");
static_assert(offsetof(UMediaBundle, LensDisplacementMap) == 0x0000C8, "Member 'UMediaBundle::LensDisplacementMap' has a wrong offset!");
static_assert(offsetof(UMediaBundle, ReferenceCount) == 0x0000D0, "Member 'UMediaBundle::ReferenceCount' has a wrong offset!");

// Class MediaFrameworkUtilities.MediaBundleActorBase
// 0x0040 (0x0278 - 0x0238)
class AMediaBundleActorBase final : public AActor
{
public:
	class UTextureRenderTarget2D*                 GarbageMatteMask;                                  // 0x0238(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaBundle*                           MediaBundle;                                       // 0x0240(0x0008)(Edit, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoPlay;                                         // 0x0248(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPlayWhileEditing;                                 // 0x0249(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_24A[0x6];                                      // 0x024A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    PrimitiveCmp;                                      // 0x0250(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMediaSoundComponent*                   MediaSoundCmp;                                     // 0x0258(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoClear, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               Material;                                          // 0x0260(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PrimitiveMaterialIndex;                            // 0x0268(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_26C[0xC];                                      // 0x026C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMediaBundle* GetMediaBundle();
	void RequestCloseMediaSource();
	bool RequestOpenMediaSource();
	void SetComponent(class UPrimitiveComponent* InPrimitive, class UMediaSoundComponent* InMediaSound);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MediaBundleActorBase">();
	}
	static class AMediaBundleActorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMediaBundleActorBase>();
	}
};
static_assert(alignof(AMediaBundleActorBase) == 0x000008, "Wrong alignment on AMediaBundleActorBase");
static_assert(sizeof(AMediaBundleActorBase) == 0x000278, "Wrong size on AMediaBundleActorBase");
static_assert(offsetof(AMediaBundleActorBase, GarbageMatteMask) == 0x000238, "Member 'AMediaBundleActorBase::GarbageMatteMask' has a wrong offset!");
static_assert(offsetof(AMediaBundleActorBase, MediaBundle) == 0x000240, "Member 'AMediaBundleActorBase::MediaBundle' has a wrong offset!");
static_assert(offsetof(AMediaBundleActorBase, bAutoPlay) == 0x000248, "Member 'AMediaBundleActorBase::bAutoPlay' has a wrong offset!");
static_assert(offsetof(AMediaBundleActorBase, bPlayWhileEditing) == 0x000249, "Member 'AMediaBundleActorBase::bPlayWhileEditing' has a wrong offset!");
static_assert(offsetof(AMediaBundleActorBase, PrimitiveCmp) == 0x000250, "Member 'AMediaBundleActorBase::PrimitiveCmp' has a wrong offset!");
static_assert(offsetof(AMediaBundleActorBase, MediaSoundCmp) == 0x000258, "Member 'AMediaBundleActorBase::MediaSoundCmp' has a wrong offset!");
static_assert(offsetof(AMediaBundleActorBase, Material) == 0x000260, "Member 'AMediaBundleActorBase::Material' has a wrong offset!");
static_assert(offsetof(AMediaBundleActorBase, PrimitiveMaterialIndex) == 0x000268, "Member 'AMediaBundleActorBase::PrimitiveMaterialIndex' has a wrong offset!");

// Class MediaFrameworkUtilities.MediaBundleTimeSynchronizationSource
// 0x0030 (0x0060 - 0x0030)
class UMediaBundleTimeSynchronizationSource final : public UTimeSynchronizationSource
{
public:
	class UMediaBundle*                           MediaBundle;                                       // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x28];                                      // 0x0038(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MediaBundleTimeSynchronizationSource">();
	}
	static class UMediaBundleTimeSynchronizationSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMediaBundleTimeSynchronizationSource>();
	}
};
static_assert(alignof(UMediaBundleTimeSynchronizationSource) == 0x000008, "Wrong alignment on UMediaBundleTimeSynchronizationSource");
static_assert(sizeof(UMediaBundleTimeSynchronizationSource) == 0x000060, "Wrong size on UMediaBundleTimeSynchronizationSource");
static_assert(offsetof(UMediaBundleTimeSynchronizationSource, MediaBundle) == 0x000030, "Member 'UMediaBundleTimeSynchronizationSource::MediaBundle' has a wrong offset!");

// Class MediaFrameworkUtilities.MediaPlayerTimeSynchronizationSource
// 0x0038 (0x0068 - 0x0030)
class UMediaPlayerTimeSynchronizationSource final : public UTimeSynchronizationSource
{
public:
	class UMediaSource*                           MediaSource;                                       // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaTexture*                          MediaTexture;                                      // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x28];                                      // 0x0040(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MediaPlayerTimeSynchronizationSource">();
	}
	static class UMediaPlayerTimeSynchronizationSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMediaPlayerTimeSynchronizationSource>();
	}
};
static_assert(alignof(UMediaPlayerTimeSynchronizationSource) == 0x000008, "Wrong alignment on UMediaPlayerTimeSynchronizationSource");
static_assert(sizeof(UMediaPlayerTimeSynchronizationSource) == 0x000068, "Wrong size on UMediaPlayerTimeSynchronizationSource");
static_assert(offsetof(UMediaPlayerTimeSynchronizationSource, MediaSource) == 0x000030, "Member 'UMediaPlayerTimeSynchronizationSource::MediaSource' has a wrong offset!");
static_assert(offsetof(UMediaPlayerTimeSynchronizationSource, MediaTexture) == 0x000038, "Member 'UMediaPlayerTimeSynchronizationSource::MediaTexture' has a wrong offset!");

// Class MediaFrameworkUtilities.MediaProfile
// 0x0070 (0x0098 - 0x0028)
class UMediaProfile final : public UObject
{
public:
	TArray<class UMediaSource*>                   MediaSources;                                      // 0x0028(0x0010)(Edit, ExportObject, EditFixedSize, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UMediaOutput*>                   MediaOutputs;                                      // 0x0038(0x0010)(Edit, ExportObject, EditFixedSize, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bOverrideTimecodeProvider;                         // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimecodeProvider*                      TimecodeProvider;                                  // 0x0050(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOverrideCustomTimeStep;                           // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEngineCustomTimeStep*                  CustomTimeStep;                                    // 0x0060(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimecodeProvider*                      AppliedTimecodeProvider;                           // 0x0070(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTimecodeProvider*                      PreviousTimecodeProvider;                          // 0x0078(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UEngineCustomTimeStep*                  AppliedCustomTimeStep;                             // 0x0088(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEngineCustomTimeStep*                  PreviousCustomTimeStep;                            // 0x0090(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MediaProfile">();
	}
	static class UMediaProfile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMediaProfile>();
	}
};
static_assert(alignof(UMediaProfile) == 0x000008, "Wrong alignment on UMediaProfile");
static_assert(sizeof(UMediaProfile) == 0x000098, "Wrong size on UMediaProfile");
static_assert(offsetof(UMediaProfile, MediaSources) == 0x000028, "Member 'UMediaProfile::MediaSources' has a wrong offset!");
static_assert(offsetof(UMediaProfile, MediaOutputs) == 0x000038, "Member 'UMediaProfile::MediaOutputs' has a wrong offset!");
static_assert(offsetof(UMediaProfile, bOverrideTimecodeProvider) == 0x000048, "Member 'UMediaProfile::bOverrideTimecodeProvider' has a wrong offset!");
static_assert(offsetof(UMediaProfile, TimecodeProvider) == 0x000050, "Member 'UMediaProfile::TimecodeProvider' has a wrong offset!");
static_assert(offsetof(UMediaProfile, bOverrideCustomTimeStep) == 0x000058, "Member 'UMediaProfile::bOverrideCustomTimeStep' has a wrong offset!");
static_assert(offsetof(UMediaProfile, CustomTimeStep) == 0x000060, "Member 'UMediaProfile::CustomTimeStep' has a wrong offset!");
static_assert(offsetof(UMediaProfile, AppliedTimecodeProvider) == 0x000070, "Member 'UMediaProfile::AppliedTimecodeProvider' has a wrong offset!");
static_assert(offsetof(UMediaProfile, PreviousTimecodeProvider) == 0x000078, "Member 'UMediaProfile::PreviousTimecodeProvider' has a wrong offset!");
static_assert(offsetof(UMediaProfile, AppliedCustomTimeStep) == 0x000088, "Member 'UMediaProfile::AppliedCustomTimeStep' has a wrong offset!");
static_assert(offsetof(UMediaProfile, PreviousCustomTimeStep) == 0x000090, "Member 'UMediaProfile::PreviousCustomTimeStep' has a wrong offset!");

// Class MediaFrameworkUtilities.MediaProfileBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UMediaProfileBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static TArray<class UProxyMediaOutput*> GetAllMediaOutputProxy();
	static TArray<class UProxyMediaSource*> GetAllMediaSourceProxy();
	static class UMediaProfile* GetMediaProfile();
	static void SetMediaProfile(class UMediaProfile* MediaProfile);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MediaProfileBlueprintLibrary">();
	}
	static class UMediaProfileBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMediaProfileBlueprintLibrary>();
	}
};
static_assert(alignof(UMediaProfileBlueprintLibrary) == 0x000008, "Wrong alignment on UMediaProfileBlueprintLibrary");
static_assert(sizeof(UMediaProfileBlueprintLibrary) == 0x000028, "Wrong size on UMediaProfileBlueprintLibrary");

// Class MediaFrameworkUtilities.MediaProfileSettings
// 0x0050 (0x0078 - 0x0028)
class UMediaProfileSettings final : public UObject
{
public:
	bool                                          bApplyInCommandlet;                                // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UProxyMediaSource>> MediaSourceProxy;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, Config, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TSoftObjectPtr<class UProxyMediaOutput>> MediaOutputProxy;                                  // 0x0040(0x0010)(Edit, ZeroConstructor, Config, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UMediaProfile>           StartupMediaProfile;                               // 0x0050(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MediaProfileSettings">();
	}
	static class UMediaProfileSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMediaProfileSettings>();
	}
};
static_assert(alignof(UMediaProfileSettings) == 0x000008, "Wrong alignment on UMediaProfileSettings");
static_assert(sizeof(UMediaProfileSettings) == 0x000078, "Wrong size on UMediaProfileSettings");
static_assert(offsetof(UMediaProfileSettings, bApplyInCommandlet) == 0x000028, "Member 'UMediaProfileSettings::bApplyInCommandlet' has a wrong offset!");
static_assert(offsetof(UMediaProfileSettings, MediaSourceProxy) == 0x000030, "Member 'UMediaProfileSettings::MediaSourceProxy' has a wrong offset!");
static_assert(offsetof(UMediaProfileSettings, MediaOutputProxy) == 0x000040, "Member 'UMediaProfileSettings::MediaOutputProxy' has a wrong offset!");
static_assert(offsetof(UMediaProfileSettings, StartupMediaProfile) == 0x000050, "Member 'UMediaProfileSettings::StartupMediaProfile' has a wrong offset!");

// Class MediaFrameworkUtilities.MediaProfileEditorSettings
// 0x0000 (0x0028 - 0x0028)
class UMediaProfileEditorSettings final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MediaProfileEditorSettings">();
	}
	static class UMediaProfileEditorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMediaProfileEditorSettings>();
	}
};
static_assert(alignof(UMediaProfileEditorSettings) == 0x000008, "Wrong alignment on UMediaProfileEditorSettings");
static_assert(sizeof(UMediaProfileEditorSettings) == 0x000028, "Wrong size on UMediaProfileEditorSettings");

// Class MediaFrameworkUtilities.ProxyMediaOutput
// 0x0018 (0x0048 - 0x0030)
class UProxyMediaOutput final : public UMediaOutput
{
public:
	class UMediaOutput*                           DynamicProxy;                                      // 0x0030(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMediaOutput*                           Proxy;                                             // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsProxyValid() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProxyMediaOutput">();
	}
	static class UProxyMediaOutput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProxyMediaOutput>();
	}
};
static_assert(alignof(UProxyMediaOutput) == 0x000008, "Wrong alignment on UProxyMediaOutput");
static_assert(sizeof(UProxyMediaOutput) == 0x000048, "Wrong size on UProxyMediaOutput");
static_assert(offsetof(UProxyMediaOutput, DynamicProxy) == 0x000030, "Member 'UProxyMediaOutput::DynamicProxy' has a wrong offset!");
static_assert(offsetof(UProxyMediaOutput, Proxy) == 0x000038, "Member 'UProxyMediaOutput::Proxy' has a wrong offset!");

// Class MediaFrameworkUtilities.ProxyMediaSource
// 0x0018 (0x0098 - 0x0080)
class UProxyMediaSource final : public UMediaSource
{
public:
	class UMediaSource*                           DynamicProxy;                                      // 0x0080(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMediaSource*                           Proxy;                                             // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_90[0x8];                                       // 0x0090(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsProxyValid() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProxyMediaSource">();
	}
	static class UProxyMediaSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProxyMediaSource>();
	}
};
static_assert(alignof(UProxyMediaSource) == 0x000008, "Wrong alignment on UProxyMediaSource");
static_assert(sizeof(UProxyMediaSource) == 0x000098, "Wrong size on UProxyMediaSource");
static_assert(offsetof(UProxyMediaSource, DynamicProxy) == 0x000080, "Member 'UProxyMediaSource::DynamicProxy' has a wrong offset!");
static_assert(offsetof(UProxyMediaSource, Proxy) == 0x000088, "Member 'UProxyMediaSource::Proxy' has a wrong offset!");

}

