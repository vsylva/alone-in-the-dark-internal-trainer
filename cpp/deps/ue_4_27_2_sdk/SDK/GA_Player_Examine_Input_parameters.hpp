#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Player_Examine_Input

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function GA_Player_Examine_Input.GA_Player_Examine_Input_C.ExecuteUbergraph_GA_Player_Examine_Input
// 0x0080 (0x0080 - 0x0000)
struct GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetAbilityLevel_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0028(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0038(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x0048(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x0058(0x0010)(ZeroConstructor, NoDestructor)
	class UAbilityTask_WaitInputActionAll*        CallFunc_WaitInputActionTriggered_ReturnValue;     // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_CommitAbility_ReturnValue;             // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bWasCancelled;                        // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_73[0x1];                                       // 0x0073(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue; // 0x0074(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input) == 0x000008, "Wrong alignment on GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input");
static_assert(sizeof(GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input) == 0x000080, "Wrong size on GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input");
static_assert(offsetof(GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input, EntryPoint) == 0x000000, "Member 'GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input, CallFunc_GetAbilityLevel_ReturnValue) == 0x000004, "Member 'GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input::CallFunc_GetAbilityLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input, K2Node_CreateDelegate_OutputDelegate_1) == 0x000018, "Member 'GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input, K2Node_CreateDelegate_OutputDelegate_2) == 0x000028, "Member 'GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input, K2Node_CreateDelegate_OutputDelegate_3) == 0x000038, "Member 'GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input, K2Node_CreateDelegate_OutputDelegate_4) == 0x000048, "Member 'GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input, K2Node_CreateDelegate_OutputDelegate_5) == 0x000058, "Member 'GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input, CallFunc_WaitInputActionTriggered_ReturnValue) == 0x000068, "Member 'GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input::CallFunc_WaitInputActionTriggered_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input, CallFunc_K2_CommitAbility_ReturnValue) == 0x000071, "Member 'GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input::CallFunc_K2_CommitAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input, K2Node_Event_bWasCancelled) == 0x000072, "Member 'GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input::K2Node_Event_bWasCancelled' has a wrong offset!");
static_assert(offsetof(GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input, CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue) == 0x000074, "Member 'GA_Player_Examine_Input_C_ExecuteUbergraph_GA_Player_Examine_Input::CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue' has a wrong offset!");

// Function GA_Player_Examine_Input.GA_Player_Examine_Input_C.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct GA_Player_Examine_Input_C_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Player_Examine_Input_C_K2_OnEndAbility) == 0x000001, "Wrong alignment on GA_Player_Examine_Input_C_K2_OnEndAbility");
static_assert(sizeof(GA_Player_Examine_Input_C_K2_OnEndAbility) == 0x000001, "Wrong size on GA_Player_Examine_Input_C_K2_OnEndAbility");
static_assert(offsetof(GA_Player_Examine_Input_C_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'GA_Player_Examine_Input_C_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// Function GA_Player_Examine_Input.GA_Player_Examine_Input_C.CheckForExaminationPoints
// 0x0020 (0x0020 - 0x0000)
struct GA_Player_Examine_Input_C_CheckForExaminationPoints final
{
public:
	bool                                          bExaminationPointFound;                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOFPlayerCharacter*                     K2Node_DynamicCast_AsOFPlayer_Character;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasSelectedInteractable_ReturnValue;      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Player_Examine_Input_C_CheckForExaminationPoints) == 0x000008, "Wrong alignment on GA_Player_Examine_Input_C_CheckForExaminationPoints");
static_assert(sizeof(GA_Player_Examine_Input_C_CheckForExaminationPoints) == 0x000020, "Wrong size on GA_Player_Examine_Input_C_CheckForExaminationPoints");
static_assert(offsetof(GA_Player_Examine_Input_C_CheckForExaminationPoints, bExaminationPointFound) == 0x000000, "Member 'GA_Player_Examine_Input_C_CheckForExaminationPoints::bExaminationPointFound' has a wrong offset!");
static_assert(offsetof(GA_Player_Examine_Input_C_CheckForExaminationPoints, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000008, "Member 'GA_Player_Examine_Input_C_CheckForExaminationPoints::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Examine_Input_C_CheckForExaminationPoints, K2Node_DynamicCast_AsOFPlayer_Character) == 0x000010, "Member 'GA_Player_Examine_Input_C_CheckForExaminationPoints::K2Node_DynamicCast_AsOFPlayer_Character' has a wrong offset!");
static_assert(offsetof(GA_Player_Examine_Input_C_CheckForExaminationPoints, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'GA_Player_Examine_Input_C_CheckForExaminationPoints::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Player_Examine_Input_C_CheckForExaminationPoints, CallFunc_HasSelectedInteractable_ReturnValue) == 0x000019, "Member 'GA_Player_Examine_Input_C_CheckForExaminationPoints::CallFunc_HasSelectedInteractable_ReturnValue' has a wrong offset!");

// Function GA_Player_Examine_Input.GA_Player_Examine_Input_C.InteractWithExaminationPoint
// 0x0018 (0x0018 - 0x0000)
struct GA_Player_Examine_Input_C_InteractWithExaminationPoint final
{
public:
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOFPlayerCharacter*                     K2Node_DynamicCast_AsOFPlayer_Character;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Player_Examine_Input_C_InteractWithExaminationPoint) == 0x000008, "Wrong alignment on GA_Player_Examine_Input_C_InteractWithExaminationPoint");
static_assert(sizeof(GA_Player_Examine_Input_C_InteractWithExaminationPoint) == 0x000018, "Wrong size on GA_Player_Examine_Input_C_InteractWithExaminationPoint");
static_assert(offsetof(GA_Player_Examine_Input_C_InteractWithExaminationPoint, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000000, "Member 'GA_Player_Examine_Input_C_InteractWithExaminationPoint::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Examine_Input_C_InteractWithExaminationPoint, K2Node_DynamicCast_AsOFPlayer_Character) == 0x000008, "Member 'GA_Player_Examine_Input_C_InteractWithExaminationPoint::K2Node_DynamicCast_AsOFPlayer_Character' has a wrong offset!");
static_assert(offsetof(GA_Player_Examine_Input_C_InteractWithExaminationPoint, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'GA_Player_Examine_Input_C_InteractWithExaminationPoint::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

