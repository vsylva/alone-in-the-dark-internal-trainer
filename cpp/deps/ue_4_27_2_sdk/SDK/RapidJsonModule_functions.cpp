#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RapidJsonModule

#include "Basic.hpp"

#include "RapidJsonModule_classes.hpp"
#include "RapidJsonModule_parameters.hpp"


namespace SDK
{

// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeBool_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URapidJsonFunctionLibrary::DeserializeBool_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeBool_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeBool_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeFColor_Wrapper
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor URapidJsonFunctionLibrary::DeserializeFColor_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeFColor_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeFColor_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeFloat_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float URapidJsonFunctionLibrary::DeserializeFloat_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeFloat_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeFloat_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeFName_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName URapidJsonFunctionLibrary::DeserializeFName_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeFName_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeFName_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeFRotator_Wrapper
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator URapidJsonFunctionLibrary::DeserializeFRotator_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeFRotator_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeFRotator_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeFString_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::DeserializeFString_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeFString_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeFString_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeFText_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText URapidJsonFunctionLibrary::DeserializeFText_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeFText_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeFText_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeFTransform_Wrapper
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform URapidJsonFunctionLibrary::DeserializeFTransform_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeFTransform_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeFTransform_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeFVector_Wrapper
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector URapidJsonFunctionLibrary::DeserializeFVector_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeFVector_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeFVector_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeInt64_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 URapidJsonFunctionLibrary::DeserializeInt64_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeInt64_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeInt64_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeInt_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 URapidJsonFunctionLibrary::DeserializeInt_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeInt_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeInt_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeTArrayBool_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<bool>                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<bool> URapidJsonFunctionLibrary::DeserializeTArrayBool_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeTArrayBool_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeTArrayBool_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeTArrayFColor_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FColor>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FColor> URapidJsonFunctionLibrary::DeserializeTArrayFColor_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeTArrayFColor_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeTArrayFColor_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeTArrayFloat_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<float> URapidJsonFunctionLibrary::DeserializeTArrayFloat_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeTArrayFloat_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeTArrayFloat_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeTArrayFName_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> URapidJsonFunctionLibrary::DeserializeTArrayFName_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeTArrayFName_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeTArrayFName_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeTArrayFRotator_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FRotator>                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FRotator> URapidJsonFunctionLibrary::DeserializeTArrayFRotator_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeTArrayFRotator_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeTArrayFRotator_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeTArrayFString_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> URapidJsonFunctionLibrary::DeserializeTArrayFString_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeTArrayFString_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeTArrayFString_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeTArrayFText_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FText>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FText> URapidJsonFunctionLibrary::DeserializeTArrayFText_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeTArrayFText_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeTArrayFText_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeTArrayFTransform_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FTransform>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FTransform> URapidJsonFunctionLibrary::DeserializeTArrayFTransform_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeTArrayFTransform_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeTArrayFTransform_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeTArrayFVector_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector> URapidJsonFunctionLibrary::DeserializeTArrayFVector_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeTArrayFVector_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeTArrayFVector_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeTArrayInt64_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int64>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int64> URapidJsonFunctionLibrary::DeserializeTArrayInt64_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeTArrayInt64_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeTArrayInt64_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeTArrayInt_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> URapidJsonFunctionLibrary::DeserializeTArrayInt_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeTArrayInt_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeTArrayInt_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeTArrayUInt8_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<uint8> URapidJsonFunctionLibrary::DeserializeTArrayUInt8_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeTArrayUInt8_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeTArrayUInt8_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.DeserializeUInt8_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           JsonString                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 URapidJsonFunctionLibrary::DeserializeUInt8_Wrapper(const class FString& JsonString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "DeserializeUInt8_Wrapper");

	Params::RapidJsonFunctionLibrary_DeserializeUInt8_Wrapper Parms{};

	Parms.JsonString = std::move(JsonString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeBool_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    BoolValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeBool_Wrapper(bool BoolValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeBool_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeBool_Wrapper Parms{};

	Parms.BoolValue = BoolValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeFColor_Wrapper
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FColor                           ColorValue                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeFColor_Wrapper(const struct FColor& ColorValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeFColor_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeFColor_Wrapper Parms{};

	Parms.ColorValue = std::move(ColorValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeFloat_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   TextValue                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeFloat_Wrapper(const float& TextValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeFloat_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeFloat_Wrapper Parms{};

	Parms.TextValue = TextValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeFName_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             NameValue                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeFName_Wrapper(const class FName& NameValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeFName_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeFName_Wrapper Parms{};

	Parms.NameValue = NameValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeFRotator_Wrapper
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         TextValue                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeFRotator_Wrapper(const struct FRotator& TextValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeFRotator_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeFRotator_Wrapper Parms{};

	Parms.TextValue = std::move(TextValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeFString_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           StringValue                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeFString_Wrapper(const class FString& StringValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeFString_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeFString_Wrapper Parms{};

	Parms.StringValue = std::move(StringValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeFText_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             TextValue                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeFText_Wrapper(const class FText& TextValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeFText_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeFText_Wrapper Parms{};

	Parms.TextValue = std::move(TextValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeFTransform_Wrapper
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       TextValue                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeFTransform_Wrapper(const struct FTransform& TextValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeFTransform_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeFTransform_Wrapper Parms{};

	Parms.TextValue = std::move(TextValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeFVector_Wrapper
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          TextValue                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeFVector_Wrapper(const struct FVector& TextValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeFVector_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeFVector_Wrapper Parms{};

	Parms.TextValue = std::move(TextValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeInt64_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int64                                   Int64Value                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeInt64_Wrapper(int64 Int64Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeInt64_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeInt64_Wrapper Parms{};

	Parms.Int64Value = Int64Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeInt_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   IntValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeInt_Wrapper(int32 IntValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeInt_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeInt_Wrapper Parms{};

	Parms.IntValue = IntValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeTArrayBool_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<bool>                            InBools                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeTArrayBool_Wrapper(const TArray<bool>& InBools)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeTArrayBool_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeTArrayBool_Wrapper Parms{};

	Parms.InBools = std::move(InBools);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeTArrayFColor_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FColor>                   Colors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeTArrayFColor_Wrapper(const TArray<struct FColor>& Colors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeTArrayFColor_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeTArrayFColor_Wrapper Parms{};

	Parms.Colors = std::move(Colors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeTArrayFloat_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           InFloats                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeTArrayFloat_Wrapper(const TArray<float>& InFloats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeTArrayFloat_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeTArrayFloat_Wrapper Parms{};

	Parms.InFloats = std::move(InFloats);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeTArrayFName_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     InNames                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeTArrayFName_Wrapper(const TArray<class FName>& InNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeTArrayFName_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeTArrayFName_Wrapper Parms{};

	Parms.InNames = std::move(InNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeTArrayFRotator_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FRotator>                 InRotator                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeTArrayFRotator_Wrapper(const TArray<struct FRotator>& InRotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeTArrayFRotator_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeTArrayFRotator_Wrapper Parms{};

	Parms.InRotator = std::move(InRotator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeTArrayFString_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   InStrings                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeTArrayFString_Wrapper(const TArray<class FString>& InStrings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeTArrayFString_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeTArrayFString_Wrapper Parms{};

	Parms.InStrings = std::move(InStrings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeTArrayFText_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FText>                     InTexts                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeTArrayFText_Wrapper(const TArray<class FText>& InTexts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeTArrayFText_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeTArrayFText_Wrapper Parms{};

	Parms.InTexts = std::move(InTexts);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeTArrayFTransform_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FTransform>               InTransform                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeTArrayFTransform_Wrapper(const TArray<struct FTransform>& InTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeTArrayFTransform_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeTArrayFTransform_Wrapper Parms{};

	Parms.InTransform = std::move(InTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeTArrayFVector_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FVector>                  InFVector                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeTArrayFVector_Wrapper(const TArray<struct FVector>& InFVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeTArrayFVector_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeTArrayFVector_Wrapper Parms{};

	Parms.InFVector = std::move(InFVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeTArrayInt64_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int64>                           InInt64s                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeTArrayInt64_Wrapper(const TArray<int64>& InInt64s)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeTArrayInt64_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeTArrayInt64_Wrapper Parms{};

	Parms.InInt64s = std::move(InInt64s);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeTArrayInt_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int32>                           InInts                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeTArrayInt_Wrapper(const TArray<int32>& InInts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeTArrayInt_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeTArrayInt_Wrapper Parms{};

	Parms.InInts = std::move(InInts);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeTArrayUInt8_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<uint8>                           InUInt8s                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeTArrayUInt8_Wrapper(const TArray<uint8>& InUInt8s)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeTArrayUInt8_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeTArrayUInt8_Wrapper Parms{};

	Parms.InUInt8s = std::move(InUInt8s);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RapidJsonModule.RapidJsonFunctionLibrary.SerializeUInt8_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// uint8                                   UInt8Value                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URapidJsonFunctionLibrary::SerializeUInt8_Wrapper(uint8 UInt8Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RapidJsonFunctionLibrary", "SerializeUInt8_Wrapper");

	Params::RapidJsonFunctionLibrary_SerializeUInt8_Wrapper Parms{};

	Parms.UInt8Value = UInt8Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

