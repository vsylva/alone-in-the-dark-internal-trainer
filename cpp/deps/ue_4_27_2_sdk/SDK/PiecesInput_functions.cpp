#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PiecesInput

#include "Basic.hpp"

#include "PiecesInput_classes.hpp"
#include "PiecesInput_parameters.hpp"


namespace SDK
{

// Function PiecesInput.PiecesInputBlueprintLibrary.GetInputTriggerTreatedAsHold
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameplayTag                     InputTriggerTreatAsHoldTag                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPiecesInputBlueprintLibrary::GetInputTriggerTreatedAsHold(const struct FGameplayTag& InputTriggerTreatAsHoldTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PiecesInputBlueprintLibrary", "GetInputTriggerTreatedAsHold");

	Params::PiecesInputBlueprintLibrary_GetInputTriggerTreatedAsHold Parms{};

	Parms.InputTriggerTreatAsHoldTag = std::move(InputTriggerTreatAsHoldTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesInput.PiecesInputBlueprintLibrary.SetInputTriggerTreatedAsHold
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     InputTriggerTreatAsHoldTag                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTreatAsHold                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPiecesInputBlueprintLibrary::SetInputTriggerTreatedAsHold(const struct FGameplayTag& InputTriggerTreatAsHoldTag, bool bTreatAsHold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PiecesInputBlueprintLibrary", "SetInputTriggerTreatedAsHold");

	Params::PiecesInputBlueprintLibrary_SetInputTriggerTreatedAsHold Parms{};

	Parms.InputTriggerTreatAsHoldTag = std::move(InputTriggerTreatAsHoldTag);
	Parms.bTreatAsHold = bTreatAsHold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesInput.PiecesInputSubsystem.GetActionName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             BindingName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UPiecesInputSubsystem::GetActionName(class FName BindingName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesInputSubsystem", "GetActionName");

	Params::PiecesInputSubsystem_GetActionName Parms{};

	Parms.BindingName = BindingName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesInput.PiecesInputSubsystem.GetActiveMappingContext
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPiecesInputMappingContext*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPiecesInputMappingContext* UPiecesInputSubsystem::GetActiveMappingContext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesInputSubsystem", "GetActiveMappingContext");

	Params::PiecesInputSubsystem_GetActiveMappingContext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesInput.PiecesInputSubsystem.GetBindingsForKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UPiecesInputSubsystem::GetBindingsForKey(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesInputSubsystem", "GetBindingsForKey");

	Params::PiecesInputSubsystem_GetBindingsForKey Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesInput.PiecesInputSubsystem.GetCurrentGamepadKeyForAction
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKey                             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FKey UPiecesInputSubsystem::GetCurrentGamepadKeyForAction(class FName ActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesInputSubsystem", "GetCurrentGamepadKeyForAction");

	Params::PiecesInputSubsystem_GetCurrentGamepadKeyForAction Parms{};

	Parms.ActionName = ActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesInput.PiecesInputSubsystem.GetCurrentPrimaryKeyForAction
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKey                             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FKey UPiecesInputSubsystem::GetCurrentPrimaryKeyForAction(class FName ActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesInputSubsystem", "GetCurrentPrimaryKeyForAction");

	Params::PiecesInputSubsystem_GetCurrentPrimaryKeyForAction Parms{};

	Parms.ActionName = ActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesInput.PiecesInputSubsystem.GetCurrentSecondaryKeyForAction
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKey                             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FKey UPiecesInputSubsystem::GetCurrentSecondaryKeyForAction(class FName ActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesInputSubsystem", "GetCurrentSecondaryKeyForAction");

	Params::PiecesInputSubsystem_GetCurrentSecondaryKeyForAction Parms{};

	Parms.ActionName = ActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesInput.PiecesInputSubsystem.IsBindingGamepad
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           BindingName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPiecesInputSubsystem::IsBindingGamepad(const class FString& BindingName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesInputSubsystem", "IsBindingGamepad");

	Params::PiecesInputSubsystem_IsBindingGamepad Parms{};

	Parms.BindingName = std::move(BindingName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesInput.PiecesInputSubsystem.IsBindingPrimary
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           BindingName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPiecesInputSubsystem::IsBindingPrimary(const class FString& BindingName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesInputSubsystem", "IsBindingPrimary");

	Params::PiecesInputSubsystem_IsBindingPrimary Parms{};

	Parms.BindingName = std::move(BindingName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesInput.PiecesInputSubsystem.IsBindingSecondary
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           BindingName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPiecesInputSubsystem::IsBindingSecondary(const class FString& BindingName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesInputSubsystem", "IsBindingSecondary");

	Params::PiecesInputSubsystem_IsBindingSecondary Parms{};

	Parms.BindingName = std::move(BindingName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesInput.PiecesInputSubsystem.KeyAlreadyBound
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKey                             Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPiecesInputSubsystem::KeyAlreadyBound(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesInputSubsystem", "KeyAlreadyBound");

	Params::PiecesInputSubsystem_KeyAlreadyBound Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesInput.PiecesInputSubsystem.RemoveCustomKey
// (Final, Native, Private)
// Parameters:
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKey                             OldKey                                                 (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsPrimaryKey                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPiecesInputSubsystem::RemoveCustomKey(class FName ActionName, const struct FKey& OldKey, bool bIsPrimaryKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesInputSubsystem", "RemoveCustomKey");

	Params::PiecesInputSubsystem_RemoveCustomKey Parms{};

	Parms.ActionName = ActionName;
	Parms.OldKey = std::move(OldKey);
	Parms.bIsPrimaryKey = bIsPrimaryKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PiecesInput.PiecesInputSubsystem.ResetCustomContext
// (Final, Native, Private)

void UPiecesInputSubsystem::ResetCustomContext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesInputSubsystem", "ResetCustomContext");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PiecesInput.PiecesInputSubsystem.UnBindKey
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKey                             Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPiecesInputSubsystem::UnBindKey(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesInputSubsystem", "UnBindKey");

	Params::PiecesInputSubsystem_UnBindKey Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PiecesInput.PiecesInputSubsystem.UpdateCustomKey
// (Final, Native, Private)
// Parameters:
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKey                             NewKey                                                 (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsPrimaryKey                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUnbindExisting                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPiecesInputSubsystem::UpdateCustomKey(class FName ActionName, const struct FKey& NewKey, bool bIsPrimaryKey, bool bUnbindExisting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesInputSubsystem", "UpdateCustomKey");

	Params::PiecesInputSubsystem_UpdateCustomKey Parms{};

	Parms.ActionName = ActionName;
	Parms.NewKey = std::move(NewKey);
	Parms.bIsPrimaryKey = bIsPrimaryKey;
	Parms.bUnbindExisting = bUnbindExisting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PiecesInput.PiecesInputSubsystem.GetActionDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsGamepadKey                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UPiecesInputSubsystem::GetActionDisplayName(class FName ActionName, bool bIsGamepadKey) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesInputSubsystem", "GetActionDisplayName");

	Params::PiecesInputSubsystem_GetActionDisplayName Parms{};

	Parms.ActionName = ActionName;
	Parms.bIsGamepadKey = bIsGamepadKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesInput.PiecesInputSubsystem.GetActionKeyMappingDefault
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ActionName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsGamepadKey                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FEnhancedActionKeyMapping  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const struct FEnhancedActionKeyMapping UPiecesInputSubsystem::GetActionKeyMappingDefault(const class FName ActionName, bool bIsGamepadKey) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesInputSubsystem", "GetActionKeyMappingDefault");

	Params::PiecesInputSubsystem_GetActionKeyMappingDefault Parms{};

	Parms.ActionName = ActionName;
	Parms.bIsGamepadKey = bIsGamepadKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesInput.InputTriggerToggleableHold.UpdateStateNonHeld
// (Native, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class UEnhancedPlayerInput*             PlayerInput                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputActionValue                ModifiedValue                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETriggerState                           State                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETriggerState                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETriggerState UInputTriggerToggleableHold::UpdateStateNonHeld(const class UEnhancedPlayerInput* PlayerInput, const struct FInputActionValue& ModifiedValue, float DeltaTime, ETriggerState* State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputTriggerToggleableHold", "UpdateStateNonHeld");

	Params::InputTriggerToggleableHold_UpdateStateNonHeld Parms{};

	Parms.PlayerInput = PlayerInput;
	Parms.ModifiedValue = std::move(ModifiedValue);
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (State != nullptr)
		*State = Parms.State;

	return Parms.ReturnValue;
}

}

