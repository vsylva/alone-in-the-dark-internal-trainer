#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ObsidianFoxSettings

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "DeveloperSettings_classes.hpp"
#include "ObsidianFoxSettings_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Class ObsidianFoxSettings.OFDeveloperSettingsBase
// 0x0000 (0x0038 - 0x0038)
class UOFDeveloperSettingsBase : public UDeveloperSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OFDeveloperSettingsBase">();
	}
	static class UOFDeveloperSettingsBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOFDeveloperSettingsBase>();
	}
};
static_assert(alignof(UOFDeveloperSettingsBase) == 0x000008, "Wrong alignment on UOFDeveloperSettingsBase");
static_assert(sizeof(UOFDeveloperSettingsBase) == 0x000038, "Wrong size on UOFDeveloperSettingsBase");

// Class ObsidianFoxSettings.OFProjectDeveloperSettings
// 0x0008 (0x0040 - 0x0038)
class UOFProjectDeveloperSettings final : public UOFDeveloperSettingsBase
{
public:
	EProjectType                                  ProjectType;                                       // 0x0038(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OFProjectDeveloperSettings">();
	}
	static class UOFProjectDeveloperSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOFProjectDeveloperSettings>();
	}
};
static_assert(alignof(UOFProjectDeveloperSettings) == 0x000008, "Wrong alignment on UOFProjectDeveloperSettings");
static_assert(sizeof(UOFProjectDeveloperSettings) == 0x000040, "Wrong size on UOFProjectDeveloperSettings");
static_assert(offsetof(UOFProjectDeveloperSettings, ProjectType) == 0x000038, "Member 'UOFProjectDeveloperSettings::ProjectType' has a wrong offset!");

// Class ObsidianFoxSettings.OFDefaultGameDeveloperSettings
// 0x00C0 (0x00F8 - 0x0038)
class UOFDefaultGameDeveloperSettings final : public UOFDeveloperSettingsBase
{
public:
	float                                         DefaultBrightness;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultContrast;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvertedVerticalCamera;                            // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvertedHorizontalCamera;                          // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFeedbackEnabled;                              // 0x0042(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraSensitivity;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimSensitivity;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraShakeScale;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOV;                                               // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MasterVolume;                                      // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectsVolume;                                     // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MusicVolume;                                       // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VoiceVolume;                                       // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DefaultVOLanguage;                                 // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Subtitles;                                         // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HDREnabled;                                        // 0x0079(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VSync;                                             // 0x007A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B[0x1];                                       // 0x007B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FSRMode;                                           // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DLSSMode;                                          // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DLAAEnabled;                                       // 0x0084(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FrameRateLimit;                                    // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMotionBlurQuality                            MotionBlurSettingDefault;                          // 0x008C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDepthOfFieldEnabled;                              // 0x008D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChromaticAberrationEnabled;                       // 0x008E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubtitleSizes                                SubtitleSizeDefault;                               // 0x008F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TutorialsEnabled;                                  // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateShadersOnLoad;                               // 0x0091(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SlowHDDMode;                                       // 0x0092(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_93[0x5];                                       // 0x0093(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FGameplayTag>                     InputTriggerTagsTreatedAsHold;                     // 0x0098(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	float                                         SteamDeckFrameRateLimit;                           // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SteamDeckScalabilityLevel;                         // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CopyrightMusic;                                    // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OFDefaultGameDeveloperSettings">();
	}
	static class UOFDefaultGameDeveloperSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOFDefaultGameDeveloperSettings>();
	}
};
static_assert(alignof(UOFDefaultGameDeveloperSettings) == 0x000008, "Wrong alignment on UOFDefaultGameDeveloperSettings");
static_assert(sizeof(UOFDefaultGameDeveloperSettings) == 0x0000F8, "Wrong size on UOFDefaultGameDeveloperSettings");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, DefaultBrightness) == 0x000038, "Member 'UOFDefaultGameDeveloperSettings::DefaultBrightness' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, DefaultContrast) == 0x00003C, "Member 'UOFDefaultGameDeveloperSettings::DefaultContrast' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, InvertedVerticalCamera) == 0x000040, "Member 'UOFDefaultGameDeveloperSettings::InvertedVerticalCamera' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, InvertedHorizontalCamera) == 0x000041, "Member 'UOFDefaultGameDeveloperSettings::InvertedHorizontalCamera' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, ForceFeedbackEnabled) == 0x000042, "Member 'UOFDefaultGameDeveloperSettings::ForceFeedbackEnabled' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, CameraSensitivity) == 0x000044, "Member 'UOFDefaultGameDeveloperSettings::CameraSensitivity' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, AimSensitivity) == 0x000048, "Member 'UOFDefaultGameDeveloperSettings::AimSensitivity' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, CameraShakeScale) == 0x00004C, "Member 'UOFDefaultGameDeveloperSettings::CameraShakeScale' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, FOV) == 0x000050, "Member 'UOFDefaultGameDeveloperSettings::FOV' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, MasterVolume) == 0x000054, "Member 'UOFDefaultGameDeveloperSettings::MasterVolume' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, EffectsVolume) == 0x000058, "Member 'UOFDefaultGameDeveloperSettings::EffectsVolume' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, MusicVolume) == 0x00005C, "Member 'UOFDefaultGameDeveloperSettings::MusicVolume' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, VoiceVolume) == 0x000060, "Member 'UOFDefaultGameDeveloperSettings::VoiceVolume' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, DefaultVOLanguage) == 0x000068, "Member 'UOFDefaultGameDeveloperSettings::DefaultVOLanguage' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, Subtitles) == 0x000078, "Member 'UOFDefaultGameDeveloperSettings::Subtitles' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, HDREnabled) == 0x000079, "Member 'UOFDefaultGameDeveloperSettings::HDREnabled' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, VSync) == 0x00007A, "Member 'UOFDefaultGameDeveloperSettings::VSync' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, FSRMode) == 0x00007C, "Member 'UOFDefaultGameDeveloperSettings::FSRMode' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, DLSSMode) == 0x000080, "Member 'UOFDefaultGameDeveloperSettings::DLSSMode' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, DLAAEnabled) == 0x000084, "Member 'UOFDefaultGameDeveloperSettings::DLAAEnabled' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, FrameRateLimit) == 0x000088, "Member 'UOFDefaultGameDeveloperSettings::FrameRateLimit' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, MotionBlurSettingDefault) == 0x00008C, "Member 'UOFDefaultGameDeveloperSettings::MotionBlurSettingDefault' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, bDepthOfFieldEnabled) == 0x00008D, "Member 'UOFDefaultGameDeveloperSettings::bDepthOfFieldEnabled' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, bChromaticAberrationEnabled) == 0x00008E, "Member 'UOFDefaultGameDeveloperSettings::bChromaticAberrationEnabled' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, SubtitleSizeDefault) == 0x00008F, "Member 'UOFDefaultGameDeveloperSettings::SubtitleSizeDefault' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, TutorialsEnabled) == 0x000090, "Member 'UOFDefaultGameDeveloperSettings::TutorialsEnabled' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, CreateShadersOnLoad) == 0x000091, "Member 'UOFDefaultGameDeveloperSettings::CreateShadersOnLoad' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, SlowHDDMode) == 0x000092, "Member 'UOFDefaultGameDeveloperSettings::SlowHDDMode' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, InputTriggerTagsTreatedAsHold) == 0x000098, "Member 'UOFDefaultGameDeveloperSettings::InputTriggerTagsTreatedAsHold' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, SteamDeckFrameRateLimit) == 0x0000E8, "Member 'UOFDefaultGameDeveloperSettings::SteamDeckFrameRateLimit' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, SteamDeckScalabilityLevel) == 0x0000EC, "Member 'UOFDefaultGameDeveloperSettings::SteamDeckScalabilityLevel' has a wrong offset!");
static_assert(offsetof(UOFDefaultGameDeveloperSettings, CopyrightMusic) == 0x0000F0, "Member 'UOFDefaultGameDeveloperSettings::CopyrightMusic' has a wrong offset!");

// Class ObsidianFoxSettings.OFDeveloperInputSettings
// 0x0010 (0x0048 - 0x0038)
class UOFDeveloperInputSettings final : public UDeveloperSettings
{
public:
	struct FGameplayTag                           SprintTreatAsHoldTag_Gamepad;                      // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SprintTreatAsHoldTag_KBM;                          // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OFDeveloperInputSettings">();
	}
	static class UOFDeveloperInputSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOFDeveloperInputSettings>();
	}
};
static_assert(alignof(UOFDeveloperInputSettings) == 0x000008, "Wrong alignment on UOFDeveloperInputSettings");
static_assert(sizeof(UOFDeveloperInputSettings) == 0x000048, "Wrong size on UOFDeveloperInputSettings");
static_assert(offsetof(UOFDeveloperInputSettings, SprintTreatAsHoldTag_Gamepad) == 0x000038, "Member 'UOFDeveloperInputSettings::SprintTreatAsHoldTag_Gamepad' has a wrong offset!");
static_assert(offsetof(UOFDeveloperInputSettings, SprintTreatAsHoldTag_KBM) == 0x000040, "Member 'UOFDeveloperInputSettings::SprintTreatAsHoldTag_KBM' has a wrong offset!");

// Class ObsidianFoxSettings.OFDeveloperSettingsExtra
// 0x0190 (0x01C8 - 0x0038)
class UOFDeveloperSettingsExtra final : public UOFDeveloperSettingsBase
{
public:
	TMap<EPostEffectExtra, struct FPostProcessEffectSelector> ExtraPostEffects;                                  // 0x0038(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FPostProcessEffectSelector             Character1982PostEffects;                          // 0x0088(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           Edward1982;                                        // 0x0128(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           Emily1982;                                         // 0x0150(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           EdwardNormal;                                      // 0x0178(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           EmilyNormal;                                       // 0x01A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OFDeveloperSettingsExtra">();
	}
	static class UOFDeveloperSettingsExtra* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOFDeveloperSettingsExtra>();
	}
};
static_assert(alignof(UOFDeveloperSettingsExtra) == 0x000008, "Wrong alignment on UOFDeveloperSettingsExtra");
static_assert(sizeof(UOFDeveloperSettingsExtra) == 0x0001C8, "Wrong size on UOFDeveloperSettingsExtra");
static_assert(offsetof(UOFDeveloperSettingsExtra, ExtraPostEffects) == 0x000038, "Member 'UOFDeveloperSettingsExtra::ExtraPostEffects' has a wrong offset!");
static_assert(offsetof(UOFDeveloperSettingsExtra, Character1982PostEffects) == 0x000088, "Member 'UOFDeveloperSettingsExtra::Character1982PostEffects' has a wrong offset!");
static_assert(offsetof(UOFDeveloperSettingsExtra, Edward1982) == 0x000128, "Member 'UOFDeveloperSettingsExtra::Edward1982' has a wrong offset!");
static_assert(offsetof(UOFDeveloperSettingsExtra, Emily1982) == 0x000150, "Member 'UOFDeveloperSettingsExtra::Emily1982' has a wrong offset!");
static_assert(offsetof(UOFDeveloperSettingsExtra, EdwardNormal) == 0x000178, "Member 'UOFDeveloperSettingsExtra::EdwardNormal' has a wrong offset!");
static_assert(offsetof(UOFDeveloperSettingsExtra, EmilyNormal) == 0x0001A0, "Member 'UOFDeveloperSettingsExtra::EmilyNormal' has a wrong offset!");

// Class ObsidianFoxSettings.OFGameUserSettings
// 0x0308 (0x0440 - 0x0138)
class UOFGameUserSettings final : public UGameUserSettings
{
public:
	uint8                                         Pad_138[0x10];                                     // 0x0138(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSettingsChangedDelegate;                         // 0x0148(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnScaleabilitySettingsValueChanged;                // 0x0158(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnUpdateKeyBind;                                   // 0x0168(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnResetKeyBind;                                    // 0x0178(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnResetAllKeyBinds;                                // 0x0188(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         MasterVolume;                                      // 0x0198(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectsVolume;                                     // 0x019C(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MusicVolume;                                       // 0x01A0(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VoiceVolume;                                       // 0x01A4(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VOLanguage;                                        // 0x01A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmbientOcclusionLevel;                             // 0x01B8(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FSRQualityLevel;                                   // 0x01BC(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DLSSQualityLevel;                                  // 0x01C0(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DLAAEnabled;                                       // 0x01C4(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C5[0x13];                                     // 0x01C5(0x0013)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          OpenDisplayAdjustmentWidgetAtStartup;              // 0x01D8(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasShownNewGamePlusPopUp;                          // 0x01D9(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CameraControlsInverted;                            // 0x01DA(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCameraControlsHorizontalInverted;                 // 0x01DB(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CameraSensitvity;                                  // 0x01DC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AimSensitivity;                                    // 0x01E0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CameraShakeScale;                                  // 0x01E4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CameraFieldOfView;                                 // 0x01E8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bForceFeedbackEnabled;                             // 0x01EC(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Gamma;                                             // 0x01F0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Contrast;                                          // 0x01F4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, struct FKey>                CustomPrimaryPlayerMappings;                       // 0x01F8(0x0050)(Config, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FKey>                CustomSecondaryPlayerMappings;                     // 0x0248(0x0050)(Config, Protected, NativeAccessSpecifierProtected)
	TSet<struct FGameplayTag>                     InputTriggerTagsTreatedAsHold;                     // 0x0298(0x0050)(Config, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FKey>                CustomGamepadPlayerMappings;                       // 0x02E8(0x0050)(Config, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_338[0x50];                                     // 0x0338(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	EFGraphicsMode                                GraphicsMode;                                      // 0x0388(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowSubtitles;                                    // 0x0389(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPostEffectExtra                              PostEffectExtra;                                   // 0x038A(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUse1982Character;                                 // 0x038B(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseDevCommentTrack;                               // 0x038C(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMotionBlurQuality                            MotionBlurQuality;                                 // 0x038D(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DepthOfFieldEnabled;                               // 0x038E(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ChromaticAberrationEnabled;                        // 0x038F(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          TutorialsEnabled;                                  // 0x0390(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SlowHDDMode;                                       // 0x0391(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CreateShadersOnLoad;                               // 0x0392(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          TelemetryEnabled;                                  // 0x0393(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_394[0x8E];                                     // 0x0394(0x008E)(Fixing Size After Last Property [ Dumper-7 ])
	ESubtitleSizes                                SubtitleSize;                                      // 0x0422(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CopyrightMusic;                                    // 0x0423(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_424[0x1C];                                     // 0x0424(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FText ChangeLanguage(bool bMoveRight);
	void EngineLoopInitCompleteCallback();
	void LoadAllDefaultSettings();
	void LoadDefaultSettings(EFOptionsSection Section);
	void OnApplicationWindowActivatedEvent(bool IsActive);
	void ResetAllKeyBindings();
	void ResetPrimaryKeyBinding(class FName BindingToReset, bool bIsGamepadKey);
	void ResetSecondaryKeyBinding(class FName BindingToReset);
	void ResetVideoSettingToConfirmedSetting();
	void ScaleabilitySettingsValueChanged__DelegateSignature(bool HasChanged);
	void SetAimSensitivity(float Value, bool bApply);
	void SetCameraControlsInverted(bool Value, bool bApply);
	void SetCameraFieldOfView(float NewFOV, bool bApply);
	void SetCameraHorizontalInverted(bool bInverted, bool bApply);
	void SetCameraSensitivity(float Value, bool bApply);
	void SetCameraShakeScale(float Value, bool bApply);
	void SetConfirmedVideoSettingsToCurrentVideoSettings();
	void SetContrast(float Value, bool bApply);
	void SetCopyrightMusic(bool InCopyrightMusic, bool InApply);
	void SetCreateShadersOnLoad(bool InCreateShadersOnLoad, bool InApply);
	void SetForceFeedbackEnabled(const bool bEnabled, bool bApply);
	void SetGamma(float Value, bool bApply);
	void SetMotionBlurQuality(EMotionBlurQuality Quality, bool bApply);
	void SetOFAmbientOcclusionQuality(int32 Value);
	void SetOFAnisotropicFilteringQuality(int32 Value);
	void SetOFAntiAliasingQuality(int32 Value);
	void SetOFChromaticAberrationEnabled(bool bEnable, bool bApply);
	void SetOFDepthOfFieldEnabled(bool bEnable, bool bApply);
	void SetOFDetailQuality(int32 Value);
	void SetOFDLAA(bool Enabled, bool bApply);
	void SetOFDLSS(int32 Value, bool bApply);
	void SetOFEffectsQuality(int32 Value);
	void SetOFFoliageQuality(int32 Value);
	void SetOFFrameRate(float Value);
	void SetOFFSR(int32 Value, bool bApply);
	void SetOFGraphicsMode(EFGraphicsMode Value, bool bApply);
	void SetOFHDRValue(bool Enable);
	void SetOFParticlesQuality(int32 Value);
	void SetOFPostProcessQuality(int32 Value);
	void SetOFScreenMode(EWindowMode InFullscreenMode);
	void SetOFScreenResolution(const struct FIntPoint& Resolution);
	void SetOFScreenSpaceReflectionsQuality(int32 Value);
	void SetOFShadingQuality(int32 Value);
	void SetOFShadowQuality(int32 Value);
	void SetOFShowSubtitles(bool Value, bool bApply);
	void SetOFSubSurfaceScatteringQuality(int32 Value);
	void SetOFTextureQuality(int32 Value);
	void SetOFVideoQuality(int32 Value);
	void SetOFViewDistance(int32 Value);
	void SetOFVolumetricQuality(int32 Value);
	void SetOFVSyncEnabled(bool Enable);
	void SetPostEffectExtra(const EPostEffectExtra NewPostEffectExtra, bool bApply);
	void SetSlowHDDMode(bool InSlowHDDMode, bool InApply);
	void SetSubtitleSize(const ESubtitleSizes InSubtitleSize);
	void SetTelemetryEnabled(bool InTelemetryEnabled);
	void SettingsChangedSignature__DelegateSignature(class UOFGameUserSettings* Settings);
	void SetTutorialsEnabled(bool bEnable);
	void SetUse1982Character(bool bInUse1982Character, bool bApply);
	void SetUseDeveloperCommentary(bool bInEnableDeveloperCommentary, bool bApply, const class UObject* WorldContext);
	void SetVOLanguage(const class FString& NewVOLanguage, bool bApply);
	void SubtitleSizeChanged__DelegateSignature(ESubtitleSizes NewSubtitleSize);
	void UpdatePrimaryKeyBinding(class FName BindingToChange, const struct FKey& NewKey, class UObject* WorldContext);
	void UpdateSecondaryKeyBinding(class FName BindingToChange, const struct FKey& NewKey, class UObject* WorldContext);

	bool DoesActionHaveCustomBinding(class FName ActionName, bool bIsPrimaryBinding, bool bIsGamepadBinding) const;
	float GetAimSensitivity() const;
	bool GetCameraControlsHorizontalInverted() const;
	bool GetCameraControlsInverted() const;
	float GetCameraFieldOfView() const;
	float GetCameraSensitivity() const;
	float GetCameraShakeScale() const;
	float GetContrast() const;
	bool GetCopyrightMusic() const;
	bool GetCreateShadersOnLoad() const;
	float GetGamma() const;
	EMotionBlurQuality GetMotionBlurQuality() const;
	int32 GetOFAmbientOcclusionQuality() const;
	int32 GetOFAnisotropicFilteringQuality() const;
	bool GetOFChromaticAberrationEnabled() const;
	class FText GetOFCurrentRenderSettingsAsText() const;
	int32 GetOFCurrentRenderSettingsSingleQualityLevel() const;
	bool GetOFDepthOfFieldEnabled() const;
	int32 GetOFDetailQuality() const;
	bool GetOFDLAAEnabled() const;
	int32 GetOFDLSSValue() const;
	float GetOFFrameRate() const;
	int32 GetOFFSRValue() const;
	EFGraphicsMode GetOFGraphicsMode() const;
	int32 GetOFParticlesQuality() const;
	int32 GetOFScreenSpaceReflectionsQuality() const;
	bool GetOFShowSubtitles() const;
	int32 GetOFSubSurfaceScatteringQuality() const;
	int32 GetOFVolumetricQuality() const;
	EPostEffectExtra GetPostEffectExtra(const class UObject* WorldContext) const;
	bool GetSlowHDDMode() const;
	ESubtitleSizes GetSubtitleSize() const;
	bool GetTelemetryEnabled() const;
	bool GetTutorialsEnabled() const;
	bool GetUse1982Character(const class UObject* WorldContext) const;
	bool GetUseDeveloperCommentary(const class UObject* WorldContext) const;
	bool HasVideoSettingsChanged() const;
	bool IsForceFeedbackEnabled() const;
	bool IsHDREnabledForDisplay() const;
	bool ShouldRunBenchmark() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OFGameUserSettings">();
	}
	static class UOFGameUserSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOFGameUserSettings>();
	}
};
static_assert(alignof(UOFGameUserSettings) == 0x000008, "Wrong alignment on UOFGameUserSettings");
static_assert(sizeof(UOFGameUserSettings) == 0x000440, "Wrong size on UOFGameUserSettings");
static_assert(offsetof(UOFGameUserSettings, OnSettingsChangedDelegate) == 0x000148, "Member 'UOFGameUserSettings::OnSettingsChangedDelegate' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, OnScaleabilitySettingsValueChanged) == 0x000158, "Member 'UOFGameUserSettings::OnScaleabilitySettingsValueChanged' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, OnUpdateKeyBind) == 0x000168, "Member 'UOFGameUserSettings::OnUpdateKeyBind' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, OnResetKeyBind) == 0x000178, "Member 'UOFGameUserSettings::OnResetKeyBind' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, OnResetAllKeyBinds) == 0x000188, "Member 'UOFGameUserSettings::OnResetAllKeyBinds' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, MasterVolume) == 0x000198, "Member 'UOFGameUserSettings::MasterVolume' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, EffectsVolume) == 0x00019C, "Member 'UOFGameUserSettings::EffectsVolume' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, MusicVolume) == 0x0001A0, "Member 'UOFGameUserSettings::MusicVolume' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, VoiceVolume) == 0x0001A4, "Member 'UOFGameUserSettings::VoiceVolume' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, VOLanguage) == 0x0001A8, "Member 'UOFGameUserSettings::VOLanguage' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, AmbientOcclusionLevel) == 0x0001B8, "Member 'UOFGameUserSettings::AmbientOcclusionLevel' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, FSRQualityLevel) == 0x0001BC, "Member 'UOFGameUserSettings::FSRQualityLevel' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, DLSSQualityLevel) == 0x0001C0, "Member 'UOFGameUserSettings::DLSSQualityLevel' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, DLAAEnabled) == 0x0001C4, "Member 'UOFGameUserSettings::DLAAEnabled' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, OpenDisplayAdjustmentWidgetAtStartup) == 0x0001D8, "Member 'UOFGameUserSettings::OpenDisplayAdjustmentWidgetAtStartup' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, HasShownNewGamePlusPopUp) == 0x0001D9, "Member 'UOFGameUserSettings::HasShownNewGamePlusPopUp' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, CameraControlsInverted) == 0x0001DA, "Member 'UOFGameUserSettings::CameraControlsInverted' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, bCameraControlsHorizontalInverted) == 0x0001DB, "Member 'UOFGameUserSettings::bCameraControlsHorizontalInverted' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, CameraSensitvity) == 0x0001DC, "Member 'UOFGameUserSettings::CameraSensitvity' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, AimSensitivity) == 0x0001E0, "Member 'UOFGameUserSettings::AimSensitivity' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, CameraShakeScale) == 0x0001E4, "Member 'UOFGameUserSettings::CameraShakeScale' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, CameraFieldOfView) == 0x0001E8, "Member 'UOFGameUserSettings::CameraFieldOfView' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, bForceFeedbackEnabled) == 0x0001EC, "Member 'UOFGameUserSettings::bForceFeedbackEnabled' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, Gamma) == 0x0001F0, "Member 'UOFGameUserSettings::Gamma' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, Contrast) == 0x0001F4, "Member 'UOFGameUserSettings::Contrast' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, CustomPrimaryPlayerMappings) == 0x0001F8, "Member 'UOFGameUserSettings::CustomPrimaryPlayerMappings' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, CustomSecondaryPlayerMappings) == 0x000248, "Member 'UOFGameUserSettings::CustomSecondaryPlayerMappings' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, InputTriggerTagsTreatedAsHold) == 0x000298, "Member 'UOFGameUserSettings::InputTriggerTagsTreatedAsHold' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, CustomGamepadPlayerMappings) == 0x0002E8, "Member 'UOFGameUserSettings::CustomGamepadPlayerMappings' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, GraphicsMode) == 0x000388, "Member 'UOFGameUserSettings::GraphicsMode' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, bShowSubtitles) == 0x000389, "Member 'UOFGameUserSettings::bShowSubtitles' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, PostEffectExtra) == 0x00038A, "Member 'UOFGameUserSettings::PostEffectExtra' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, bUse1982Character) == 0x00038B, "Member 'UOFGameUserSettings::bUse1982Character' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, bUseDevCommentTrack) == 0x00038C, "Member 'UOFGameUserSettings::bUseDevCommentTrack' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, MotionBlurQuality) == 0x00038D, "Member 'UOFGameUserSettings::MotionBlurQuality' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, DepthOfFieldEnabled) == 0x00038E, "Member 'UOFGameUserSettings::DepthOfFieldEnabled' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, ChromaticAberrationEnabled) == 0x00038F, "Member 'UOFGameUserSettings::ChromaticAberrationEnabled' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, TutorialsEnabled) == 0x000390, "Member 'UOFGameUserSettings::TutorialsEnabled' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, SlowHDDMode) == 0x000391, "Member 'UOFGameUserSettings::SlowHDDMode' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, CreateShadersOnLoad) == 0x000392, "Member 'UOFGameUserSettings::CreateShadersOnLoad' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, TelemetryEnabled) == 0x000393, "Member 'UOFGameUserSettings::TelemetryEnabled' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, SubtitleSize) == 0x000422, "Member 'UOFGameUserSettings::SubtitleSize' has a wrong offset!");
static_assert(offsetof(UOFGameUserSettings, CopyrightMusic) == 0x000423, "Member 'UOFGameUserSettings::CopyrightMusic' has a wrong offset!");

// Class ObsidianFoxSettings.OFGraphicsModeDeveloperSettings
// 0x00F8 (0x0130 - 0x0038)
class UOFGraphicsModeDeveloperSettings final : public UOFDeveloperSettingsBase
{
public:
	TMap<EFGraphicsMode, struct FOFGraphicsModeSettings> XSX_GraphicsModes;                                 // 0x0038(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EFGraphicsMode, struct FOFGraphicsModeSettings> XSS_GraphicsModes;                                 // 0x0088(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EFGraphicsMode, struct FOFGraphicsModeSettings> PS5_GraphicsModes;                                 // 0x00D8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EFGraphicsMode                                XSX_DefaultGraphicsMode;                           // 0x0128(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFGraphicsMode                                XSS_DefaultGraphicsMode;                           // 0x0129(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFGraphicsMode                                PS5_DefaultGraphicsMode;                           // 0x012A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12B[0x5];                                      // 0x012B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OFGraphicsModeDeveloperSettings">();
	}
	static class UOFGraphicsModeDeveloperSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOFGraphicsModeDeveloperSettings>();
	}
};
static_assert(alignof(UOFGraphicsModeDeveloperSettings) == 0x000008, "Wrong alignment on UOFGraphicsModeDeveloperSettings");
static_assert(sizeof(UOFGraphicsModeDeveloperSettings) == 0x000130, "Wrong size on UOFGraphicsModeDeveloperSettings");
static_assert(offsetof(UOFGraphicsModeDeveloperSettings, XSX_GraphicsModes) == 0x000038, "Member 'UOFGraphicsModeDeveloperSettings::XSX_GraphicsModes' has a wrong offset!");
static_assert(offsetof(UOFGraphicsModeDeveloperSettings, XSS_GraphicsModes) == 0x000088, "Member 'UOFGraphicsModeDeveloperSettings::XSS_GraphicsModes' has a wrong offset!");
static_assert(offsetof(UOFGraphicsModeDeveloperSettings, PS5_GraphicsModes) == 0x0000D8, "Member 'UOFGraphicsModeDeveloperSettings::PS5_GraphicsModes' has a wrong offset!");
static_assert(offsetof(UOFGraphicsModeDeveloperSettings, XSX_DefaultGraphicsMode) == 0x000128, "Member 'UOFGraphicsModeDeveloperSettings::XSX_DefaultGraphicsMode' has a wrong offset!");
static_assert(offsetof(UOFGraphicsModeDeveloperSettings, XSS_DefaultGraphicsMode) == 0x000129, "Member 'UOFGraphicsModeDeveloperSettings::XSS_DefaultGraphicsMode' has a wrong offset!");
static_assert(offsetof(UOFGraphicsModeDeveloperSettings, PS5_DefaultGraphicsMode) == 0x00012A, "Member 'UOFGraphicsModeDeveloperSettings::PS5_DefaultGraphicsMode' has a wrong offset!");

// Class ObsidianFoxSettings.OFLocalizationDeveloperSettings
// 0x0050 (0x0088 - 0x0038)
class UOFLocalizationDeveloperSettings final : public UOFDeveloperSettingsBase
{
public:
	TMap<class FString, class FText>              CultureToLocalizationText;                         // 0x0038(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OFLocalizationDeveloperSettings">();
	}
	static class UOFLocalizationDeveloperSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOFLocalizationDeveloperSettings>();
	}
};
static_assert(alignof(UOFLocalizationDeveloperSettings) == 0x000008, "Wrong alignment on UOFLocalizationDeveloperSettings");
static_assert(sizeof(UOFLocalizationDeveloperSettings) == 0x000088, "Wrong size on UOFLocalizationDeveloperSettings");
static_assert(offsetof(UOFLocalizationDeveloperSettings, CultureToLocalizationText) == 0x000038, "Member 'UOFLocalizationDeveloperSettings::CultureToLocalizationText' has a wrong offset!");

// Class ObsidianFoxSettings.OFSaveGameDataSubsystem
// 0x0030 (0x0060 - 0x0030)
class UOFSaveGameDataSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPlayerGuidanceSystemStateUpdated;                // 0x0038(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnDifficultyUpdated;                               // 0x0048(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EDifficulty                                   Difficulty;                                        // 0x0058(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         EnabledPlayerGuidanceSystems;                      // 0x0059(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetDifficulty(EDifficulty NewDifficulty);
	void SetPlayerGuidanceLevel(const EPlayerGuidanceLevel GuidanceLevel);
	void SetPlayerGuidanceSystemState(const EPlayerGuidanceSystem GuidanceSystem, bool bState);

	EDifficulty GetCurrentDifficulty() const;
	EPlayerGuidanceLevel GetPlayerGuidanceLevel() const;
	bool GetPlayerGuidanceSystemState(const EPlayerGuidanceSystem GuidanceSystem) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OFSaveGameDataSubsystem">();
	}
	static class UOFSaveGameDataSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOFSaveGameDataSubsystem>();
	}
};
static_assert(alignof(UOFSaveGameDataSubsystem) == 0x000008, "Wrong alignment on UOFSaveGameDataSubsystem");
static_assert(sizeof(UOFSaveGameDataSubsystem) == 0x000060, "Wrong size on UOFSaveGameDataSubsystem");
static_assert(offsetof(UOFSaveGameDataSubsystem, OnPlayerGuidanceSystemStateUpdated) == 0x000038, "Member 'UOFSaveGameDataSubsystem::OnPlayerGuidanceSystemStateUpdated' has a wrong offset!");
static_assert(offsetof(UOFSaveGameDataSubsystem, OnDifficultyUpdated) == 0x000048, "Member 'UOFSaveGameDataSubsystem::OnDifficultyUpdated' has a wrong offset!");
static_assert(offsetof(UOFSaveGameDataSubsystem, Difficulty) == 0x000058, "Member 'UOFSaveGameDataSubsystem::Difficulty' has a wrong offset!");
static_assert(offsetof(UOFSaveGameDataSubsystem, EnabledPlayerGuidanceSystems) == 0x000059, "Member 'UOFSaveGameDataSubsystem::EnabledPlayerGuidanceSystems' has a wrong offset!");

// Class ObsidianFoxSettings.OFSlowHDDModeDeveloperSettings
// 0x0008 (0x0040 - 0x0038)
class UOFSlowHDDModeDeveloperSettings final : public UDeveloperSettings
{
public:
	struct FOFSlowHDDModeSettings                 DefaultHDDSettings;                                // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FOFSlowHDDModeSettings                 SlowHDDSettings;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OFSlowHDDModeDeveloperSettings">();
	}
	static class UOFSlowHDDModeDeveloperSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOFSlowHDDModeDeveloperSettings>();
	}
};
static_assert(alignof(UOFSlowHDDModeDeveloperSettings) == 0x000008, "Wrong alignment on UOFSlowHDDModeDeveloperSettings");
static_assert(sizeof(UOFSlowHDDModeDeveloperSettings) == 0x000040, "Wrong size on UOFSlowHDDModeDeveloperSettings");
static_assert(offsetof(UOFSlowHDDModeDeveloperSettings, DefaultHDDSettings) == 0x000038, "Member 'UOFSlowHDDModeDeveloperSettings::DefaultHDDSettings' has a wrong offset!");
static_assert(offsetof(UOFSlowHDDModeDeveloperSettings, SlowHDDSettings) == 0x00003C, "Member 'UOFSlowHDDModeDeveloperSettings::SlowHDDSettings' has a wrong offset!");

}

