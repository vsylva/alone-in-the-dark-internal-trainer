#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VertexPaintDetectionPlugin

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "VertexPaintDetectionPlugin_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function VertexPaintDetectionPlugin.VertexPaintClothOverlapComponent.GetClothObjectsToSphereTrace
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintClothOverlapComponent_GetClothObjectsToSphereTrace final
{
public:
	TArray<EObjectTypeQuery>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintClothOverlapComponent_GetClothObjectsToSphereTrace) == 0x000008, "Wrong alignment on VertexPaintClothOverlapComponent_GetClothObjectsToSphereTrace");
static_assert(sizeof(VertexPaintClothOverlapComponent_GetClothObjectsToSphereTrace) == 0x000010, "Wrong size on VertexPaintClothOverlapComponent_GetClothObjectsToSphereTrace");
static_assert(offsetof(VertexPaintClothOverlapComponent_GetClothObjectsToSphereTrace, ReturnValue) == 0x000000, "Member 'VertexPaintClothOverlapComponent_GetClothObjectsToSphereTrace::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintClothOverlapComponent.SetClothObjectsToSphereTrace
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintClothOverlapComponent_SetClothObjectsToSphereTrace final
{
public:
	TArray<EObjectTypeQuery>                      Objects;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintClothOverlapComponent_SetClothObjectsToSphereTrace) == 0x000008, "Wrong alignment on VertexPaintClothOverlapComponent_SetClothObjectsToSphereTrace");
static_assert(sizeof(VertexPaintClothOverlapComponent_SetClothObjectsToSphereTrace) == 0x000010, "Wrong size on VertexPaintClothOverlapComponent_SetClothObjectsToSphereTrace");
static_assert(offsetof(VertexPaintClothOverlapComponent_SetClothObjectsToSphereTrace, Objects) == 0x000000, "Member 'VertexPaintClothOverlapComponent_SetClothObjectsToSphereTrace::Objects' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintClothOverlapComponent.SetClothOverlapTracingEnabled
// 0x0001 (0x0001 - 0x0000)
struct VertexPaintClothOverlapComponent_SetClothOverlapTracingEnabled final
{
public:
	bool                                          EnableClothTracing;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintClothOverlapComponent_SetClothOverlapTracingEnabled) == 0x000001, "Wrong alignment on VertexPaintClothOverlapComponent_SetClothOverlapTracingEnabled");
static_assert(sizeof(VertexPaintClothOverlapComponent_SetClothOverlapTracingEnabled) == 0x000001, "Wrong size on VertexPaintClothOverlapComponent_SetClothOverlapTracingEnabled");
static_assert(offsetof(VertexPaintClothOverlapComponent_SetClothOverlapTracingEnabled, EnableClothTracing) == 0x000000, "Member 'VertexPaintClothOverlapComponent_SetClothOverlapTracingEnabled::EnableClothTracing' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintColorSnippetRefs.ContainsColorSnippet
// 0x0018 (0x0018 - 0x0000)
struct VertexPaintColorSnippetRefs_ContainsColorSnippet final
{
public:
	class FString                                 SnippetID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintColorSnippetRefs_ContainsColorSnippet) == 0x000008, "Wrong alignment on VertexPaintColorSnippetRefs_ContainsColorSnippet");
static_assert(sizeof(VertexPaintColorSnippetRefs_ContainsColorSnippet) == 0x000018, "Wrong size on VertexPaintColorSnippetRefs_ContainsColorSnippet");
static_assert(offsetof(VertexPaintColorSnippetRefs_ContainsColorSnippet, SnippetID) == 0x000000, "Member 'VertexPaintColorSnippetRefs_ContainsColorSnippet::SnippetID' has a wrong offset!");
static_assert(offsetof(VertexPaintColorSnippetRefs_ContainsColorSnippet, ReturnValue) == 0x000010, "Member 'VertexPaintColorSnippetRefs_ContainsColorSnippet::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintColorSnippetRefs.GetAllColorSnippetsAndDataAssetForObject
// 0x0058 (0x0058 - 0x0000)
struct VertexPaintColorSnippetRefs_GetAllColorSnippetsAndDataAssetForObject final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>> ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintColorSnippetRefs_GetAllColorSnippetsAndDataAssetForObject) == 0x000008, "Wrong alignment on VertexPaintColorSnippetRefs_GetAllColorSnippetsAndDataAssetForObject");
static_assert(sizeof(VertexPaintColorSnippetRefs_GetAllColorSnippetsAndDataAssetForObject) == 0x000058, "Wrong size on VertexPaintColorSnippetRefs_GetAllColorSnippetsAndDataAssetForObject");
static_assert(offsetof(VertexPaintColorSnippetRefs_GetAllColorSnippetsAndDataAssetForObject, Object) == 0x000000, "Member 'VertexPaintColorSnippetRefs_GetAllColorSnippetsAndDataAssetForObject::Object' has a wrong offset!");
static_assert(offsetof(VertexPaintColorSnippetRefs_GetAllColorSnippetsAndDataAssetForObject, ReturnValue) == 0x000008, "Member 'VertexPaintColorSnippetRefs_GetAllColorSnippetsAndDataAssetForObject::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintColorSnippetRefs.GetObjectFromSnippetID
// 0x0038 (0x0038 - 0x0000)
struct VertexPaintColorSnippetRefs_GetObjectFromSnippetID final
{
public:
	class FString                                 SnippetID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintColorSnippetRefs_GetObjectFromSnippetID) == 0x000008, "Wrong alignment on VertexPaintColorSnippetRefs_GetObjectFromSnippetID");
static_assert(sizeof(VertexPaintColorSnippetRefs_GetObjectFromSnippetID) == 0x000038, "Wrong size on VertexPaintColorSnippetRefs_GetObjectFromSnippetID");
static_assert(offsetof(VertexPaintColorSnippetRefs_GetObjectFromSnippetID, SnippetID) == 0x000000, "Member 'VertexPaintColorSnippetRefs_GetObjectFromSnippetID::SnippetID' has a wrong offset!");
static_assert(offsetof(VertexPaintColorSnippetRefs_GetObjectFromSnippetID, ReturnValue) == 0x000010, "Member 'VertexPaintColorSnippetRefs_GetObjectFromSnippetID::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.ClothBeginOverlappingMesh
// 0x0018 (0x0018 - 0x0000)
struct VertexPaintDetectionInterface_ClothBeginOverlappingMesh final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_ClothBeginOverlappingMesh) == 0x000008, "Wrong alignment on VertexPaintDetectionInterface_ClothBeginOverlappingMesh");
static_assert(sizeof(VertexPaintDetectionInterface_ClothBeginOverlappingMesh) == 0x000018, "Wrong size on VertexPaintDetectionInterface_ClothBeginOverlappingMesh");
static_assert(offsetof(VertexPaintDetectionInterface_ClothBeginOverlappingMesh, OverlappedComponent) == 0x000000, "Member 'VertexPaintDetectionInterface_ClothBeginOverlappingMesh::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_ClothBeginOverlappingMesh, OtherActor) == 0x000008, "Member 'VertexPaintDetectionInterface_ClothBeginOverlappingMesh::OtherActor' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_ClothBeginOverlappingMesh, OtherComp) == 0x000010, "Member 'VertexPaintDetectionInterface_ClothBeginOverlappingMesh::OtherComp' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.ClothEndOverlappingMesh
// 0x0018 (0x0018 - 0x0000)
struct VertexPaintDetectionInterface_ClothEndOverlappingMesh final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_ClothEndOverlappingMesh) == 0x000008, "Wrong alignment on VertexPaintDetectionInterface_ClothEndOverlappingMesh");
static_assert(sizeof(VertexPaintDetectionInterface_ClothEndOverlappingMesh) == 0x000018, "Wrong size on VertexPaintDetectionInterface_ClothEndOverlappingMesh");
static_assert(offsetof(VertexPaintDetectionInterface_ClothEndOverlappingMesh, OverlappedComponent) == 0x000000, "Member 'VertexPaintDetectionInterface_ClothEndOverlappingMesh::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_ClothEndOverlappingMesh, OtherActor) == 0x000008, "Member 'VertexPaintDetectionInterface_ClothEndOverlappingMesh::OtherActor' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_ClothEndOverlappingMesh, OtherComp) == 0x000010, "Member 'VertexPaintDetectionInterface_ClothEndOverlappingMesh::OtherComp' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.ColorsAppliedOnActor
// 0x0D10 (0x0D10 - 0x0000)
struct VertexPaintDetectionInterface_ColorsAppliedOnActor final
{
public:
	struct FVertexDetectTaskResultInfo            TaskResultInfo;                                    // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectMeshDataStruct            MeshData;                                          // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexPaintStruct                     PaintedOnActorSettings;                            // 0x0070(0x0038)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexDetectAmountOfPaintedColorsOfEachChannel AmountOfPaintedColorsOfEachChannel;                // 0x00A8(0x0034)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectVertexColorsOnEachBone    VertexColorsOnEachBone;                            // 0x00E0(0x0058)(Parm, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectAdditionalDataToPassThrough AdditionalData;                                    // 0x0140(0x0BD0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_ColorsAppliedOnActor) == 0x000010, "Wrong alignment on VertexPaintDetectionInterface_ColorsAppliedOnActor");
static_assert(sizeof(VertexPaintDetectionInterface_ColorsAppliedOnActor) == 0x000D10, "Wrong size on VertexPaintDetectionInterface_ColorsAppliedOnActor");
static_assert(offsetof(VertexPaintDetectionInterface_ColorsAppliedOnActor, TaskResultInfo) == 0x000000, "Member 'VertexPaintDetectionInterface_ColorsAppliedOnActor::TaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_ColorsAppliedOnActor, MeshData) == 0x000010, "Member 'VertexPaintDetectionInterface_ColorsAppliedOnActor::MeshData' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_ColorsAppliedOnActor, PaintedOnActorSettings) == 0x000070, "Member 'VertexPaintDetectionInterface_ColorsAppliedOnActor::PaintedOnActorSettings' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_ColorsAppliedOnActor, AmountOfPaintedColorsOfEachChannel) == 0x0000A8, "Member 'VertexPaintDetectionInterface_ColorsAppliedOnActor::AmountOfPaintedColorsOfEachChannel' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_ColorsAppliedOnActor, VertexColorsOnEachBone) == 0x0000E0, "Member 'VertexPaintDetectionInterface_ColorsAppliedOnActor::VertexColorsOnEachBone' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_ColorsAppliedOnActor, AdditionalData) == 0x000140, "Member 'VertexPaintDetectionInterface_ColorsAppliedOnActor::AdditionalData' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.GetAllVertexColorsOnlyOnActor
// 0x0D00 (0x0D00 - 0x0000)
struct VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor final
{
public:
	struct FVertexDetectTaskResultInfo            TaskResultInfo;                                    // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectMeshDataStruct            MeshData;                                          // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexDetectGetColorsOnlyStruct       GotAllVertexColorsWithSettings;                    // 0x0070(0x0028)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexDetectAmountOfPaintedColorsOfEachChannel AmountOfPaintedColorsOfEachChannel;                // 0x0098(0x0034)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectVertexColorsOnEachBone    VertexColorsOnEachBone;                            // 0x00D0(0x0058)(Parm, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectAdditionalDataToPassThrough AdditionalData;                                    // 0x0130(0x0BD0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor) == 0x000010, "Wrong alignment on VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor");
static_assert(sizeof(VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor) == 0x000D00, "Wrong size on VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor");
static_assert(offsetof(VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor, TaskResultInfo) == 0x000000, "Member 'VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor::TaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor, MeshData) == 0x000010, "Member 'VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor::MeshData' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor, GotAllVertexColorsWithSettings) == 0x000070, "Member 'VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor::GotAllVertexColorsWithSettings' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor, AmountOfPaintedColorsOfEachChannel) == 0x000098, "Member 'VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor::AmountOfPaintedColorsOfEachChannel' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor, VertexColorsOnEachBone) == 0x0000D0, "Member 'VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor::VertexColorsOnEachBone' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor, AdditionalData) == 0x000130, "Member 'VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor::AdditionalData' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.GetClosestVertexDataOnActor
// 0x1100 (0x1100 - 0x0000)
struct VertexPaintDetectionInterface_GetClosestVertexDataOnActor final
{
public:
	struct FVertexDetectTaskResultInfo            TaskResultInfo;                                    // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectMeshDataStruct            MeshData;                                          // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexDetectInfoStruct                DetectedMeshWithSettings;                          // 0x0070(0x0078)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexDetectClosestVertexDataResultStruct ClosestVertexColorResult;                          // 0x00E8(0x0170)(Parm, NativeAccessSpecifierPublic)
	struct FVertexDetectEstimatedColorAtHitLocationResultStruct EstimatedColorAtHitLocationResult;                 // 0x0258(0x0130)(Parm, NativeAccessSpecifierPublic)
	struct FVertexDetectAvarageColorInAreaInfo    AvarageColorInAreaInfo;                            // 0x0388(0x0118)(Parm, NativeAccessSpecifierPublic)
	struct FVertexDetectAmountOfPaintedColorsOfEachChannel AmountOfPaintedColorsOfEachChannel;                // 0x04A0(0x0034)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D4[0x4];                                      // 0x04D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectVertexColorsOnEachBone    VertexColorsOnEachBone;                            // 0x04D8(0x0058)(Parm, NativeAccessSpecifierPublic)
	struct FVertexDetectAdditionalDataToPassThrough AdditionalData;                                    // 0x0530(0x0BD0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_GetClosestVertexDataOnActor) == 0x000010, "Wrong alignment on VertexPaintDetectionInterface_GetClosestVertexDataOnActor");
static_assert(sizeof(VertexPaintDetectionInterface_GetClosestVertexDataOnActor) == 0x001100, "Wrong size on VertexPaintDetectionInterface_GetClosestVertexDataOnActor");
static_assert(offsetof(VertexPaintDetectionInterface_GetClosestVertexDataOnActor, TaskResultInfo) == 0x000000, "Member 'VertexPaintDetectionInterface_GetClosestVertexDataOnActor::TaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetClosestVertexDataOnActor, MeshData) == 0x000010, "Member 'VertexPaintDetectionInterface_GetClosestVertexDataOnActor::MeshData' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetClosestVertexDataOnActor, DetectedMeshWithSettings) == 0x000070, "Member 'VertexPaintDetectionInterface_GetClosestVertexDataOnActor::DetectedMeshWithSettings' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetClosestVertexDataOnActor, ClosestVertexColorResult) == 0x0000E8, "Member 'VertexPaintDetectionInterface_GetClosestVertexDataOnActor::ClosestVertexColorResult' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetClosestVertexDataOnActor, EstimatedColorAtHitLocationResult) == 0x000258, "Member 'VertexPaintDetectionInterface_GetClosestVertexDataOnActor::EstimatedColorAtHitLocationResult' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetClosestVertexDataOnActor, AvarageColorInAreaInfo) == 0x000388, "Member 'VertexPaintDetectionInterface_GetClosestVertexDataOnActor::AvarageColorInAreaInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetClosestVertexDataOnActor, AmountOfPaintedColorsOfEachChannel) == 0x0004A0, "Member 'VertexPaintDetectionInterface_GetClosestVertexDataOnActor::AmountOfPaintedColorsOfEachChannel' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetClosestVertexDataOnActor, VertexColorsOnEachBone) == 0x0004D8, "Member 'VertexPaintDetectionInterface_GetClosestVertexDataOnActor::VertexColorsOnEachBone' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetClosestVertexDataOnActor, AdditionalData) == 0x000530, "Member 'VertexPaintDetectionInterface_GetClosestVertexDataOnActor::AdditionalData' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.GetSkeletalMeshClothPhysicsSettings
// 0x0058 (0x0058 - 0x0000)
struct VertexPaintDetectionInterface_GetSkeletalMeshClothPhysicsSettings final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponentTryingToGetClothSettingsFor;  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class UClothingAssetBase*, struct FVertexDetectClothSettingsStruct> ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_GetSkeletalMeshClothPhysicsSettings) == 0x000008, "Wrong alignment on VertexPaintDetectionInterface_GetSkeletalMeshClothPhysicsSettings");
static_assert(sizeof(VertexPaintDetectionInterface_GetSkeletalMeshClothPhysicsSettings) == 0x000058, "Wrong size on VertexPaintDetectionInterface_GetSkeletalMeshClothPhysicsSettings");
static_assert(offsetof(VertexPaintDetectionInterface_GetSkeletalMeshClothPhysicsSettings, SkeletalMeshComponentTryingToGetClothSettingsFor) == 0x000000, "Member 'VertexPaintDetectionInterface_GetSkeletalMeshClothPhysicsSettings::SkeletalMeshComponentTryingToGetClothSettingsFor' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_GetSkeletalMeshClothPhysicsSettings, ReturnValue) == 0x000008, "Member 'VertexPaintDetectionInterface_GetSkeletalMeshClothPhysicsSettings::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.PaintedOnActor_AtLocation
// 0x12A0 (0x12A0 - 0x0000)
struct VertexPaintDetectionInterface_PaintedOnActor_AtLocation final
{
public:
	struct FVertexDetectTaskResultInfo            TaskResultInfo;                                    // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectMeshDataStruct            MeshData;                                          // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexPaintAtLocationStruct           PaintedAtLocationSettings;                         // 0x0070(0x0210)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexDetectClosestVertexDataResultStruct ClosestVertexColorResult;                          // 0x0280(0x0170)(Parm, NativeAccessSpecifierPublic)
	struct FVertexDetectEstimatedColorAtHitLocationResultStruct EstimatedColorAtHitLocationResult;                 // 0x03F0(0x0130)(Parm, NativeAccessSpecifierPublic)
	struct FVertexDetectAvarageColorInAreaInfo    AvarageColorInAreaInfo;                            // 0x0520(0x0118)(Parm, NativeAccessSpecifierPublic)
	struct FVertexDetectAmountOfPaintedColorsOfEachChannel AmountOfPaintedColorsOfEachChannel;                // 0x0638(0x0034)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_66C[0x4];                                      // 0x066C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectVertexColorsOnEachBone    VertexColorsOnEachBone;                            // 0x0670(0x0058)(Parm, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C8[0x8];                                      // 0x06C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectAdditionalDataToPassThrough AdditionalData;                                    // 0x06D0(0x0BD0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_PaintedOnActor_AtLocation) == 0x000010, "Wrong alignment on VertexPaintDetectionInterface_PaintedOnActor_AtLocation");
static_assert(sizeof(VertexPaintDetectionInterface_PaintedOnActor_AtLocation) == 0x0012A0, "Wrong size on VertexPaintDetectionInterface_PaintedOnActor_AtLocation");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_AtLocation, TaskResultInfo) == 0x000000, "Member 'VertexPaintDetectionInterface_PaintedOnActor_AtLocation::TaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_AtLocation, MeshData) == 0x000010, "Member 'VertexPaintDetectionInterface_PaintedOnActor_AtLocation::MeshData' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_AtLocation, PaintedAtLocationSettings) == 0x000070, "Member 'VertexPaintDetectionInterface_PaintedOnActor_AtLocation::PaintedAtLocationSettings' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_AtLocation, ClosestVertexColorResult) == 0x000280, "Member 'VertexPaintDetectionInterface_PaintedOnActor_AtLocation::ClosestVertexColorResult' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_AtLocation, EstimatedColorAtHitLocationResult) == 0x0003F0, "Member 'VertexPaintDetectionInterface_PaintedOnActor_AtLocation::EstimatedColorAtHitLocationResult' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_AtLocation, AvarageColorInAreaInfo) == 0x000520, "Member 'VertexPaintDetectionInterface_PaintedOnActor_AtLocation::AvarageColorInAreaInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_AtLocation, AmountOfPaintedColorsOfEachChannel) == 0x000638, "Member 'VertexPaintDetectionInterface_PaintedOnActor_AtLocation::AmountOfPaintedColorsOfEachChannel' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_AtLocation, VertexColorsOnEachBone) == 0x000670, "Member 'VertexPaintDetectionInterface_PaintedOnActor_AtLocation::VertexColorsOnEachBone' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_AtLocation, AdditionalData) == 0x0006D0, "Member 'VertexPaintDetectionInterface_PaintedOnActor_AtLocation::AdditionalData' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.PaintedOnActor_EntireMesh
// 0x0E40 (0x0E40 - 0x0000)
struct VertexPaintDetectionInterface_PaintedOnActor_EntireMesh final
{
public:
	struct FVertexDetectTaskResultInfo            TaskResultInfo;                                    // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectMeshDataStruct            MeshData;                                          // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexPaintOnEntireMeshStruct         PaintedEntireMeshSettings;                         // 0x0070(0x0170)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexDetectAmountOfPaintedColorsOfEachChannel AmountOfPaintedColorsOfEachChannel;                // 0x01E0(0x0034)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectVertexColorsOnEachBone    VertexColorsOnEachBone;                            // 0x0218(0x0058)(Parm, NativeAccessSpecifierPublic)
	struct FVertexDetectAdditionalDataToPassThrough AdditionalData;                                    // 0x0270(0x0BD0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_PaintedOnActor_EntireMesh) == 0x000010, "Wrong alignment on VertexPaintDetectionInterface_PaintedOnActor_EntireMesh");
static_assert(sizeof(VertexPaintDetectionInterface_PaintedOnActor_EntireMesh) == 0x000E40, "Wrong size on VertexPaintDetectionInterface_PaintedOnActor_EntireMesh");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_EntireMesh, TaskResultInfo) == 0x000000, "Member 'VertexPaintDetectionInterface_PaintedOnActor_EntireMesh::TaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_EntireMesh, MeshData) == 0x000010, "Member 'VertexPaintDetectionInterface_PaintedOnActor_EntireMesh::MeshData' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_EntireMesh, PaintedEntireMeshSettings) == 0x000070, "Member 'VertexPaintDetectionInterface_PaintedOnActor_EntireMesh::PaintedEntireMeshSettings' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_EntireMesh, AmountOfPaintedColorsOfEachChannel) == 0x0001E0, "Member 'VertexPaintDetectionInterface_PaintedOnActor_EntireMesh::AmountOfPaintedColorsOfEachChannel' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_EntireMesh, VertexColorsOnEachBone) == 0x000218, "Member 'VertexPaintDetectionInterface_PaintedOnActor_EntireMesh::VertexColorsOnEachBone' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_EntireMesh, AdditionalData) == 0x000270, "Member 'VertexPaintDetectionInterface_PaintedOnActor_EntireMesh::AdditionalData' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.PaintedOnActor_PaintColorSnippet
// 0x0D30 (0x0D30 - 0x0000)
struct VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet final
{
public:
	struct FVertexDetectTaskResultInfo            TaskResultInfo;                                    // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectMeshDataStruct            MeshData;                                          // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexPaintColorSnippetStruct         PaintedColorSnippetSettings;                       // 0x0070(0x0060)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexDetectAmountOfPaintedColorsOfEachChannel AmountOfPaintedColorsOfEachChannel;                // 0x00D0(0x0034)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectVertexColorsOnEachBone    VertexColorsOnEachBone;                            // 0x0108(0x0058)(Parm, NativeAccessSpecifierPublic)
	struct FVertexDetectAdditionalDataToPassThrough AdditionalData;                                    // 0x0160(0x0BD0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet) == 0x000010, "Wrong alignment on VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet");
static_assert(sizeof(VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet) == 0x000D30, "Wrong size on VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet, TaskResultInfo) == 0x000000, "Member 'VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet::TaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet, MeshData) == 0x000010, "Member 'VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet::MeshData' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet, PaintedColorSnippetSettings) == 0x000070, "Member 'VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet::PaintedColorSnippetSettings' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet, AmountOfPaintedColorsOfEachChannel) == 0x0000D0, "Member 'VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet::AmountOfPaintedColorsOfEachChannel' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet, VertexColorsOnEachBone) == 0x000108, "Member 'VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet::VertexColorsOnEachBone' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet, AdditionalData) == 0x000160, "Member 'VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet::AdditionalData' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.PaintedOnActor_WithinArea
// 0x0E50 (0x0E50 - 0x0000)
struct VertexPaintDetectionInterface_PaintedOnActor_WithinArea final
{
public:
	struct FVertexDetectTaskResultInfo            TaskResultInfo;                                    // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectMeshDataStruct            MeshData;                                          // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexPainthWithinAreaStruct          PaintedWithinAreaSettings;                         // 0x0070(0x0180)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexDetectAmountOfPaintedColorsOfEachChannel AmountOfPaintedColorsOfEachChannel;                // 0x01F0(0x0034)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectVertexColorsOnEachBone    VertexColorsOnEachBone;                            // 0x0228(0x0058)(Parm, NativeAccessSpecifierPublic)
	struct FVertexDetectAdditionalDataToPassThrough AdditionalData;                                    // 0x0280(0x0BD0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintDetectionInterface_PaintedOnActor_WithinArea) == 0x000010, "Wrong alignment on VertexPaintDetectionInterface_PaintedOnActor_WithinArea");
static_assert(sizeof(VertexPaintDetectionInterface_PaintedOnActor_WithinArea) == 0x000E50, "Wrong size on VertexPaintDetectionInterface_PaintedOnActor_WithinArea");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_WithinArea, TaskResultInfo) == 0x000000, "Member 'VertexPaintDetectionInterface_PaintedOnActor_WithinArea::TaskResultInfo' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_WithinArea, MeshData) == 0x000010, "Member 'VertexPaintDetectionInterface_PaintedOnActor_WithinArea::MeshData' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_WithinArea, PaintedWithinAreaSettings) == 0x000070, "Member 'VertexPaintDetectionInterface_PaintedOnActor_WithinArea::PaintedWithinAreaSettings' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_WithinArea, AmountOfPaintedColorsOfEachChannel) == 0x0001F0, "Member 'VertexPaintDetectionInterface_PaintedOnActor_WithinArea::AmountOfPaintedColorsOfEachChannel' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_WithinArea, VertexColorsOnEachBone) == 0x000228, "Member 'VertexPaintDetectionInterface_PaintedOnActor_WithinArea::VertexColorsOnEachBone' has a wrong offset!");
static_assert(offsetof(VertexPaintDetectionInterface_PaintedOnActor_WithinArea, AdditionalData) == 0x000280, "Member 'VertexPaintDetectionInterface_PaintedOnActor_WithinArea::AdditionalData' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.ClearMeshPaintedSinceSessionStarted_Wrapper
// 0x0008 (0x0008 - 0x0000)
struct VertexPaintFunctionLibrary_ClearMeshPaintedSinceSessionStarted_Wrapper final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_ClearMeshPaintedSinceSessionStarted_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_ClearMeshPaintedSinceSessionStarted_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_ClearMeshPaintedSinceSessionStarted_Wrapper) == 0x000008, "Wrong size on VertexPaintFunctionLibrary_ClearMeshPaintedSinceSessionStarted_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_ClearMeshPaintedSinceSessionStarted_Wrapper, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_ClearMeshPaintedSinceSessionStarted_Wrapper::WorldContextObject' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.CollisionChannelToObjectType
// 0x0002 (0x0002 - 0x0000)
struct VertexPaintFunctionLibrary_CollisionChannelToObjectType final
{
public:
	ECollisionChannel                             Channel;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectTypeQuery                              ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_CollisionChannelToObjectType) == 0x000001, "Wrong alignment on VertexPaintFunctionLibrary_CollisionChannelToObjectType");
static_assert(sizeof(VertexPaintFunctionLibrary_CollisionChannelToObjectType) == 0x000002, "Wrong size on VertexPaintFunctionLibrary_CollisionChannelToObjectType");
static_assert(offsetof(VertexPaintFunctionLibrary_CollisionChannelToObjectType, Channel) == 0x000000, "Member 'VertexPaintFunctionLibrary_CollisionChannelToObjectType::Channel' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_CollisionChannelToObjectType, ReturnValue) == 0x000001, "Member 'VertexPaintFunctionLibrary_CollisionChannelToObjectType::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.DrawPrimitiveComponentBoundsBox
// 0x0020 (0x0020 - 0x0000)
struct VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lifetime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorToDraw;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox");
static_assert(sizeof(VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox) == 0x000020, "Wrong size on VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox");
static_assert(offsetof(VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox, Component) == 0x000000, "Member 'VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox::Component' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox, Lifetime) == 0x000008, "Member 'VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox::Lifetime' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox, Thickness) == 0x00000C, "Member 'VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox::Thickness' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox, ColorToDraw) == 0x000010, "Member 'VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox::ColorToDraw' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllMeshColorSnippetsAsString_Wrapper
// 0x0058 (0x0058 - 0x0000)
struct VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsString_Wrapper final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>> AvailableColorSnippetsAndDataAssets;               // 0x0008(0x0050)(Parm, OutParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsString_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsString_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsString_Wrapper) == 0x000058, "Wrong size on VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsString_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsString_Wrapper, MeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsString_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsString_Wrapper, AvailableColorSnippetsAndDataAssets) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsString_Wrapper::AvailableColorSnippetsAndDataAssets' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllMeshColorSnippetsAsTags_Wrapper
// 0x0058 (0x0058 - 0x0000)
struct VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsTags_Wrapper final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>> AvailableColorSnippetTagsAndDataAssets;            // 0x0008(0x0050)(Parm, OutParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsTags_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsTags_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsTags_Wrapper) == 0x000058, "Wrong size on VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsTags_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsTags_Wrapper, MeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsTags_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsTags_Wrapper, AvailableColorSnippetTagsAndDataAssets) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsTags_Wrapper::AvailableColorSnippetTagsAndDataAssets' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper
// 0x0060 (0x0060 - 0x0000)
struct VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TagCategory;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>> AvailableColorSnippetTagsAndDataAssetsUnderTagCategory; // 0x0010(0x0050)(Parm, OutParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper) == 0x000060, "Wrong size on VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper, MeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper, TagCategory) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper::TagCategory' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper, AvailableColorSnippetTagsAndDataAssetsUnderTagCategory) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper::AvailableColorSnippetTagsAndDataAssetsUnderTagCategory' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllPhysicsSurfaces
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_GetAllPhysicsSurfaces final
{
public:
	TArray<EPhysicalSurface>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetAllPhysicsSurfaces) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetAllPhysicsSurfaces");
static_assert(sizeof(VertexPaintFunctionLibrary_GetAllPhysicsSurfaces) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_GetAllPhysicsSurfaces");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllPhysicsSurfaces, ReturnValue) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetAllPhysicsSurfaces::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper
// 0x0020 (0x0020 - 0x0000)
struct VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PhysicsSurface;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Successfull;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<Enum_SurfaceAtChannel>                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper) == 0x000020, "Wrong size on VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper, Material) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper::Material' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper, PhysicsSurface) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper::PhysicsSurface' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper, Successfull) == 0x000009, "Member 'VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper::Successfull' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper, ReturnValue) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllVertexColorsOnly_Wrapper
// 0x0C10 (0x0C10 - 0x0000)
struct VertexPaintFunctionLibrary_GetAllVertexColorsOnly_Wrapper final
{
public:
	class UVertexPaintDetectionComponent*         RuntimeVertexPaintAndDetectionComponent;           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVertexDetectGetColorsOnlyStruct       GetAllVertexColorsStruct;                          // 0x0010(0x0028)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectAdditionalDataToPassThrough AdditionalDataToPassThrough;                       // 0x0040(0x0BD0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetAllVertexColorsOnly_Wrapper) == 0x000010, "Wrong alignment on VertexPaintFunctionLibrary_GetAllVertexColorsOnly_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetAllVertexColorsOnly_Wrapper) == 0x000C10, "Wrong size on VertexPaintFunctionLibrary_GetAllVertexColorsOnly_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllVertexColorsOnly_Wrapper, RuntimeVertexPaintAndDetectionComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetAllVertexColorsOnly_Wrapper::RuntimeVertexPaintAndDetectionComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllVertexColorsOnly_Wrapper, MeshComponent) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetAllVertexColorsOnly_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllVertexColorsOnly_Wrapper, GetAllVertexColorsStruct) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetAllVertexColorsOnly_Wrapper::GetAllVertexColorsStruct' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAllVertexColorsOnly_Wrapper, AdditionalDataToPassThrough) == 0x000040, "Member 'VertexPaintFunctionLibrary_GetAllVertexColorsOnly_Wrapper::AdditionalDataToPassThrough' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAmountOfLODsToPaintOn
// 0x0018 (0x0018 - 0x0000)
struct VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn final
{
public:
	class UPrimitiveComponent*                    MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideLODToPaintUpOn;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OverrideUpToLOD;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn");
static_assert(sizeof(VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn) == 0x000018, "Wrong size on VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn, MeshComp) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn::MeshComp' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn, OverrideLODToPaintUpOn) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn::OverrideLODToPaintUpOn' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn, OverrideUpToLOD) == 0x00000C, "Member 'VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn::OverrideUpToLOD' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn, ReturnValue) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAmountOfPaintedColorsForEachChannel
// 0x0048 (0x0048 - 0x0000)
struct VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel final
{
public:
	TArray<struct FColor>                         VertexColors;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         MinColorAmountToBeConsidered;                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVertexDetectAmountOfPaintedColorsOfEachChannel ReturnValue;                                       // 0x0014(0x0034)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel");
static_assert(sizeof(VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel) == 0x000048, "Wrong size on VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel, VertexColors) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel::VertexColors' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel, MinColorAmountToBeConsidered) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel::MinColorAmountToBeConsidered' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel, ReturnValue) == 0x000014, "Member 'VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAmountOfTasksStartedByComponent
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_GetAmountOfTasksStartedByComponent final
{
public:
	class UVertexPaintDetectionComponent*         PaintComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_GetAmountOfTasksStartedByComponent) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetAmountOfTasksStartedByComponent");
static_assert(sizeof(VertexPaintFunctionLibrary_GetAmountOfTasksStartedByComponent) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_GetAmountOfTasksStartedByComponent");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfTasksStartedByComponent, PaintComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetAmountOfTasksStartedByComponent::PaintComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetAmountOfTasksStartedByComponent, ReturnValue) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetAmountOfTasksStartedByComponent::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetCalculateColorsDetectionTasksAmount_Wrapper
// 0x0058 (0x0058 - 0x0000)
struct VertexPaintFunctionLibrary_GetCalculateColorsDetectionTasksAmount_Wrapper final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class UPrimitiveComponent*, int32>       ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetCalculateColorsDetectionTasksAmount_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetCalculateColorsDetectionTasksAmount_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetCalculateColorsDetectionTasksAmount_Wrapper) == 0x000058, "Wrong size on VertexPaintFunctionLibrary_GetCalculateColorsDetectionTasksAmount_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetCalculateColorsDetectionTasksAmount_Wrapper, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetCalculateColorsDetectionTasksAmount_Wrapper::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetCalculateColorsDetectionTasksAmount_Wrapper, ReturnValue) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetCalculateColorsDetectionTasksAmount_Wrapper::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetCalculateColorsPaintTasksAmount_Wrapper
// 0x0058 (0x0058 - 0x0000)
struct VertexPaintFunctionLibrary_GetCalculateColorsPaintTasksAmount_Wrapper final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class UPrimitiveComponent*, int32>       ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetCalculateColorsPaintTasksAmount_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetCalculateColorsPaintTasksAmount_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetCalculateColorsPaintTasksAmount_Wrapper) == 0x000058, "Wrong size on VertexPaintFunctionLibrary_GetCalculateColorsPaintTasksAmount_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetCalculateColorsPaintTasksAmount_Wrapper, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetCalculateColorsPaintTasksAmount_Wrapper::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetCalculateColorsPaintTasksAmount_Wrapper, ReturnValue) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetCalculateColorsPaintTasksAmount_Wrapper::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetClosestVertexDataOnMesh_Wrapper
// 0x0C60 (0x0C60 - 0x0000)
struct VertexPaintFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper final
{
public:
	class UVertexPaintDetectionComponent*         RuntimeVertexPaintAndDetectionComponent;           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVertexDetectInfoStruct                GetClosestVertexDataStruct;                        // 0x0010(0x0078)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectAdditionalDataToPassThrough AdditionalDataToPassThrough;                       // 0x0090(0x0BD0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper) == 0x000010, "Wrong alignment on VertexPaintFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper) == 0x000C60, "Wrong size on VertexPaintFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper, RuntimeVertexPaintAndDetectionComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper::RuntimeVertexPaintAndDetectionComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper, MeshComponent) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper, GetClosestVertexDataStruct) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper::GetClosestVertexDataStruct' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper, AdditionalDataToPassThrough) == 0x000090, "Member 'VertexPaintFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper::AdditionalDataToPassThrough' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetClothAssets
// 0x0018 (0x0018 - 0x0000)
struct VertexPaintFunctionLibrary_GetClothAssets final
{
public:
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UClothingAssetBase*>             ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetClothAssets) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetClothAssets");
static_assert(sizeof(VertexPaintFunctionLibrary_GetClothAssets) == 0x000018, "Wrong size on VertexPaintFunctionLibrary_GetClothAssets");
static_assert(offsetof(VertexPaintFunctionLibrary_GetClothAssets, SkeletalMesh) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetClothAssets::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetClothAssets, ReturnValue) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetClothAssets::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetColorSnippetReferenceDataAsset
// 0x0008 (0x0008 - 0x0000)
struct VertexPaintFunctionLibrary_GetColorSnippetReferenceDataAsset final
{
public:
	class UVertexPaintColorSnippetRefs*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetColorSnippetReferenceDataAsset) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetColorSnippetReferenceDataAsset");
static_assert(sizeof(VertexPaintFunctionLibrary_GetColorSnippetReferenceDataAsset) == 0x000008, "Wrong size on VertexPaintFunctionLibrary_GetColorSnippetReferenceDataAsset");
static_assert(offsetof(VertexPaintFunctionLibrary_GetColorSnippetReferenceDataAsset, ReturnValue) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetColorSnippetReferenceDataAsset::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetColorsToApplyFromPhysicsMaterial_Wrapper
// 0x0028 (0x0028 - 0x0000)
struct VertexPaintFunctionLibrary_GetColorsToApplyFromPhysicsMaterial_Wrapper final
{
public:
	class UMaterialInterface*                     MaterialToApplyColorsTo;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PhysicalSurface;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RedAmountToApply;                                  // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GreenAmountToApply;                                // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         blueAmountToApply;                                 // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaAmountToApply;                                // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultAmountIfFailOrChannelIsNotRegistered;       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_GetColorsToApplyFromPhysicsMaterial_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetColorsToApplyFromPhysicsMaterial_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetColorsToApplyFromPhysicsMaterial_Wrapper) == 0x000028, "Wrong size on VertexPaintFunctionLibrary_GetColorsToApplyFromPhysicsMaterial_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetColorsToApplyFromPhysicsMaterial_Wrapper, MaterialToApplyColorsTo) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetColorsToApplyFromPhysicsMaterial_Wrapper::MaterialToApplyColorsTo' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetColorsToApplyFromPhysicsMaterial_Wrapper, PhysicalSurface) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetColorsToApplyFromPhysicsMaterial_Wrapper::PhysicalSurface' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetColorsToApplyFromPhysicsMaterial_Wrapper, RedAmountToApply) == 0x00000C, "Member 'VertexPaintFunctionLibrary_GetColorsToApplyFromPhysicsMaterial_Wrapper::RedAmountToApply' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetColorsToApplyFromPhysicsMaterial_Wrapper, GreenAmountToApply) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetColorsToApplyFromPhysicsMaterial_Wrapper::GreenAmountToApply' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetColorsToApplyFromPhysicsMaterial_Wrapper, blueAmountToApply) == 0x000014, "Member 'VertexPaintFunctionLibrary_GetColorsToApplyFromPhysicsMaterial_Wrapper::blueAmountToApply' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetColorsToApplyFromPhysicsMaterial_Wrapper, AlphaAmountToApply) == 0x000018, "Member 'VertexPaintFunctionLibrary_GetColorsToApplyFromPhysicsMaterial_Wrapper::AlphaAmountToApply' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetColorsToApplyFromPhysicsMaterial_Wrapper, DefaultAmountIfFailOrChannelIsNotRegistered) == 0x00001C, "Member 'VertexPaintFunctionLibrary_GetColorsToApplyFromPhysicsMaterial_Wrapper::DefaultAmountIfFailOrChannelIsNotRegistered' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetColorsToApplyFromPhysicsMaterial_Wrapper, ReturnValue) == 0x000020, "Member 'VertexPaintFunctionLibrary_GetColorsToApplyFromPhysicsMaterial_Wrapper::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetMeshColorSnippetsTagsInTagCategory_Wrapper
// 0x0060 (0x0060 - 0x0000)
struct VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TagCategory;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>> AvailableColorSnippetTagsAndDataAssetsUnderTagCategory; // 0x0010(0x0050)(Parm, OutParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper) == 0x000060, "Wrong size on VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper, MeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper, TagCategory) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper::TagCategory' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper, AvailableColorSnippetTagsAndDataAssetsUnderTagCategory) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper::AvailableColorSnippetTagsAndDataAssetsUnderTagCategory' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetMeshComponentVertexColors_Wrapper
// 0x0070 (0x0070 - 0x0000)
struct VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GetColorsForAllLODs;                               // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GetColorsUpToLOD;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVertexDetectMeshDataStruct            ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper) == 0x000070, "Wrong size on VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper, MeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper, Success) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper::Success' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper, GetColorsForAllLODs) == 0x000009, "Member 'VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper::GetColorsForAllLODs' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper, GetColorsUpToLOD) == 0x00000C, "Member 'VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper::GetColorsUpToLOD' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper, ReturnValue) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetMeshPaintedSinceSessionStarted_Wrapper
// 0x0058 (0x0058 - 0x0000)
struct VertexPaintFunctionLibrary_GetMeshPaintedSinceSessionStarted_Wrapper final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class UPrimitiveComponent*, int32>       ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetMeshPaintedSinceSessionStarted_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetMeshPaintedSinceSessionStarted_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetMeshPaintedSinceSessionStarted_Wrapper) == 0x000058, "Wrong size on VertexPaintFunctionLibrary_GetMeshPaintedSinceSessionStarted_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshPaintedSinceSessionStarted_Wrapper, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetMeshPaintedSinceSessionStarted_Wrapper::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetMeshPaintedSinceSessionStarted_Wrapper, ReturnValue) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetMeshPaintedSinceSessionStarted_Wrapper::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetOptimizationDataAsset
// 0x0008 (0x0008 - 0x0000)
struct VertexPaintFunctionLibrary_GetOptimizationDataAsset final
{
public:
	class UVertexPaintOptimizationDataAsset*      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetOptimizationDataAsset) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetOptimizationDataAsset");
static_assert(sizeof(VertexPaintFunctionLibrary_GetOptimizationDataAsset) == 0x000008, "Wrong size on VertexPaintFunctionLibrary_GetOptimizationDataAsset");
static_assert(offsetof(VertexPaintFunctionLibrary_GetOptimizationDataAsset, ReturnValue) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetOptimizationDataAsset::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetPhysicalMaterialUsingPhysicsSurface_Wrapper
// 0x0020 (0x0020 - 0x0000)
struct VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPhysicalMaterial>          PhysicalMaterialClass;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PhysicsSurface;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper) == 0x000020, "Wrong size on VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper, PhysicalMaterialClass) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper::PhysicalMaterialClass' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper, PhysicsSurface) == 0x000010, "Member 'VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper::PhysicsSurface' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper, ReturnValue) == 0x000018, "Member 'VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetTheMostDominantPhysicsSurface_Wrapper
// 0x0038 (0x0038 - 0x0000)
struct VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper final
{
public:
	class UMaterialInterface*                     OptionalMaterialPhysicsSurfaceWasDetectedOn;       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EPhysicalSurface>                      PhysicsSurfaces;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PhysicsSurfaceValues;                              // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EPhysicalSurface                              MostDominantPhysicsSurfaceFromArray;               // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MostDominantPhysicsSurfaceColorValue;              // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper) == 0x000038, "Wrong size on VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper, OptionalMaterialPhysicsSurfaceWasDetectedOn) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper::OptionalMaterialPhysicsSurfaceWasDetectedOn' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper, PhysicsSurfaces) == 0x000008, "Member 'VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper::PhysicsSurfaces' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper, PhysicsSurfaceValues) == 0x000018, "Member 'VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper::PhysicsSurfaceValues' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper, MostDominantPhysicsSurfaceFromArray) == 0x000028, "Member 'VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper::MostDominantPhysicsSurfaceFromArray' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper, MostDominantPhysicsSurfaceColorValue) == 0x00002C, "Member 'VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper::MostDominantPhysicsSurfaceColorValue' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper, ReturnValue) == 0x000030, "Member 'VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetVertexPaintMaterialDataAsset
// 0x0008 (0x0008 - 0x0000)
struct VertexPaintFunctionLibrary_GetVertexPaintMaterialDataAsset final
{
public:
	class UVertexPaintMaterialDataAsset*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_GetVertexPaintMaterialDataAsset) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_GetVertexPaintMaterialDataAsset");
static_assert(sizeof(VertexPaintFunctionLibrary_GetVertexPaintMaterialDataAsset) == 0x000008, "Wrong size on VertexPaintFunctionLibrary_GetVertexPaintMaterialDataAsset");
static_assert(offsetof(VertexPaintFunctionLibrary_GetVertexPaintMaterialDataAsset, ReturnValue) == 0x000000, "Member 'VertexPaintFunctionLibrary_GetVertexPaintMaterialDataAsset::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.IsWorldValid
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_IsWorldValid final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_IsWorldValid) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_IsWorldValid");
static_assert(sizeof(VertexPaintFunctionLibrary_IsWorldValid) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_IsWorldValid");
static_assert(offsetof(VertexPaintFunctionLibrary_IsWorldValid, World) == 0x000000, "Member 'VertexPaintFunctionLibrary_IsWorldValid::World' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_IsWorldValid, ReturnValue) == 0x000008, "Member 'VertexPaintFunctionLibrary_IsWorldValid::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.MultisphereTraceForPaintAtLocation_Wrapper
// 0x0040 (0x0040 - 0x0000)
struct VertexPaintFunctionLibrary_MultisphereTraceForPaintAtLocation_Wrapper final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AreaOfEffect;                                      // 0x0014(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      ObjectTypesToTraceFor;                             // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ExpectedCallbacksFromPaintAtLocation;              // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_MultisphereTraceForPaintAtLocation_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_MultisphereTraceForPaintAtLocation_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_MultisphereTraceForPaintAtLocation_Wrapper) == 0x000040, "Wrong size on VertexPaintFunctionLibrary_MultisphereTraceForPaintAtLocation_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_MultisphereTraceForPaintAtLocation_Wrapper, WorldContextObject) == 0x000000, "Member 'VertexPaintFunctionLibrary_MultisphereTraceForPaintAtLocation_Wrapper::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_MultisphereTraceForPaintAtLocation_Wrapper, Location) == 0x000008, "Member 'VertexPaintFunctionLibrary_MultisphereTraceForPaintAtLocation_Wrapper::Location' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_MultisphereTraceForPaintAtLocation_Wrapper, AreaOfEffect) == 0x000014, "Member 'VertexPaintFunctionLibrary_MultisphereTraceForPaintAtLocation_Wrapper::AreaOfEffect' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_MultisphereTraceForPaintAtLocation_Wrapper, ObjectTypesToTraceFor) == 0x000018, "Member 'VertexPaintFunctionLibrary_MultisphereTraceForPaintAtLocation_Wrapper::ObjectTypesToTraceFor' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_MultisphereTraceForPaintAtLocation_Wrapper, ExpectedCallbacksFromPaintAtLocation) == 0x000028, "Member 'VertexPaintFunctionLibrary_MultisphereTraceForPaintAtLocation_Wrapper::ExpectedCallbacksFromPaintAtLocation' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_MultisphereTraceForPaintAtLocation_Wrapper, ReturnValue) == 0x000030, "Member 'VertexPaintFunctionLibrary_MultisphereTraceForPaintAtLocation_Wrapper::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.ObjectTypeToCollisionChannel
// 0x0002 (0x0002 - 0x0000)
struct VertexPaintFunctionLibrary_ObjectTypeToCollisionChannel final
{
public:
	EObjectTypeQuery                              Object;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_ObjectTypeToCollisionChannel) == 0x000001, "Wrong alignment on VertexPaintFunctionLibrary_ObjectTypeToCollisionChannel");
static_assert(sizeof(VertexPaintFunctionLibrary_ObjectTypeToCollisionChannel) == 0x000002, "Wrong size on VertexPaintFunctionLibrary_ObjectTypeToCollisionChannel");
static_assert(offsetof(VertexPaintFunctionLibrary_ObjectTypeToCollisionChannel, Object) == 0x000000, "Member 'VertexPaintFunctionLibrary_ObjectTypeToCollisionChannel::Object' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_ObjectTypeToCollisionChannel, ReturnValue) == 0x000001, "Member 'VertexPaintFunctionLibrary_ObjectTypeToCollisionChannel::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.PaintColorSnippetOnMesh_Wrappers
// 0x0C40 (0x0C40 - 0x0000)
struct VertexPaintFunctionLibrary_PaintColorSnippetOnMesh_Wrappers final
{
public:
	class UVertexPaintDetectionComponent*         RuntimeVertexPaintAndDetectionComponent;           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVertexPaintColorSnippetStruct         PaintColorSnippetStruct;                           // 0x0010(0x0060)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexDetectAdditionalDataToPassThrough AdditionalDataToPassThrough;                       // 0x0070(0x0BD0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_PaintColorSnippetOnMesh_Wrappers) == 0x000010, "Wrong alignment on VertexPaintFunctionLibrary_PaintColorSnippetOnMesh_Wrappers");
static_assert(sizeof(VertexPaintFunctionLibrary_PaintColorSnippetOnMesh_Wrappers) == 0x000C40, "Wrong size on VertexPaintFunctionLibrary_PaintColorSnippetOnMesh_Wrappers");
static_assert(offsetof(VertexPaintFunctionLibrary_PaintColorSnippetOnMesh_Wrappers, RuntimeVertexPaintAndDetectionComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_PaintColorSnippetOnMesh_Wrappers::RuntimeVertexPaintAndDetectionComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_PaintColorSnippetOnMesh_Wrappers, MeshComponent) == 0x000008, "Member 'VertexPaintFunctionLibrary_PaintColorSnippetOnMesh_Wrappers::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_PaintColorSnippetOnMesh_Wrappers, PaintColorSnippetStruct) == 0x000010, "Member 'VertexPaintFunctionLibrary_PaintColorSnippetOnMesh_Wrappers::PaintColorSnippetStruct' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_PaintColorSnippetOnMesh_Wrappers, AdditionalDataToPassThrough) == 0x000070, "Member 'VertexPaintFunctionLibrary_PaintColorSnippetOnMesh_Wrappers::AdditionalDataToPassThrough' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.PaintOnEntireMesh_Wrapper
// 0x0D50 (0x0D50 - 0x0000)
struct VertexPaintFunctionLibrary_PaintOnEntireMesh_Wrapper final
{
public:
	class UVertexPaintDetectionComponent*         RuntimeVertexPaintAndDetectionComponent;           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVertexPaintOnEntireMeshStruct         PaintOnEntireMeshStruct;                           // 0x0010(0x0170)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexDetectAdditionalDataToPassThrough AdditionalDataToPassThrough;                       // 0x0180(0x0BD0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_PaintOnEntireMesh_Wrapper) == 0x000010, "Wrong alignment on VertexPaintFunctionLibrary_PaintOnEntireMesh_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_PaintOnEntireMesh_Wrapper) == 0x000D50, "Wrong size on VertexPaintFunctionLibrary_PaintOnEntireMesh_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_PaintOnEntireMesh_Wrapper, RuntimeVertexPaintAndDetectionComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_PaintOnEntireMesh_Wrapper::RuntimeVertexPaintAndDetectionComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_PaintOnEntireMesh_Wrapper, MeshComponent) == 0x000008, "Member 'VertexPaintFunctionLibrary_PaintOnEntireMesh_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_PaintOnEntireMesh_Wrapper, PaintOnEntireMeshStruct) == 0x000010, "Member 'VertexPaintFunctionLibrary_PaintOnEntireMesh_Wrapper::PaintOnEntireMeshStruct' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_PaintOnEntireMesh_Wrapper, AdditionalDataToPassThrough) == 0x000180, "Member 'VertexPaintFunctionLibrary_PaintOnEntireMesh_Wrapper::AdditionalDataToPassThrough' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.PaintOnMeshAtLocation_Wrapper
// 0x0DF0 (0x0DF0 - 0x0000)
struct VertexPaintFunctionLibrary_PaintOnMeshAtLocation_Wrapper final
{
public:
	class UVertexPaintDetectionComponent*         RuntimeVertexPaintAndDetectionComponent;           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVertexPaintAtLocationStruct           PaintAtLocationStruct;                             // 0x0010(0x0210)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexDetectAdditionalDataToPassThrough AdditionalDataToPassThrough;                       // 0x0220(0x0BD0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_PaintOnMeshAtLocation_Wrapper) == 0x000010, "Wrong alignment on VertexPaintFunctionLibrary_PaintOnMeshAtLocation_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_PaintOnMeshAtLocation_Wrapper) == 0x000DF0, "Wrong size on VertexPaintFunctionLibrary_PaintOnMeshAtLocation_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_PaintOnMeshAtLocation_Wrapper, RuntimeVertexPaintAndDetectionComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_PaintOnMeshAtLocation_Wrapper::RuntimeVertexPaintAndDetectionComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_PaintOnMeshAtLocation_Wrapper, MeshComponent) == 0x000008, "Member 'VertexPaintFunctionLibrary_PaintOnMeshAtLocation_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_PaintOnMeshAtLocation_Wrapper, PaintAtLocationStruct) == 0x000010, "Member 'VertexPaintFunctionLibrary_PaintOnMeshAtLocation_Wrapper::PaintAtLocationStruct' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_PaintOnMeshAtLocation_Wrapper, AdditionalDataToPassThrough) == 0x000220, "Member 'VertexPaintFunctionLibrary_PaintOnMeshAtLocation_Wrapper::AdditionalDataToPassThrough' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.PaintOnMeshWithinArea_Wrapper
// 0x0D70 (0x0D70 - 0x0000)
struct VertexPaintFunctionLibrary_PaintOnMeshWithinArea_Wrapper final
{
public:
	class UVertexPaintDetectionComponent*         RuntimeVertexPaintAndDetectionComponent;           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVertexPainthWithinArea_ComponentToCheckIfIsWithinInfo> ComponentsToCheckIfIsWithin;                       // 0x0010(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexPainthWithinAreaStruct          PaintWithinAreaStruct;                             // 0x0020(0x0180)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexDetectAdditionalDataToPassThrough AdditionalDataToPassThrough;                       // 0x01A0(0x0BD0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_PaintOnMeshWithinArea_Wrapper) == 0x000010, "Wrong alignment on VertexPaintFunctionLibrary_PaintOnMeshWithinArea_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_PaintOnMeshWithinArea_Wrapper) == 0x000D70, "Wrong size on VertexPaintFunctionLibrary_PaintOnMeshWithinArea_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_PaintOnMeshWithinArea_Wrapper, RuntimeVertexPaintAndDetectionComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_PaintOnMeshWithinArea_Wrapper::RuntimeVertexPaintAndDetectionComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_PaintOnMeshWithinArea_Wrapper, MeshComponent) == 0x000008, "Member 'VertexPaintFunctionLibrary_PaintOnMeshWithinArea_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_PaintOnMeshWithinArea_Wrapper, ComponentsToCheckIfIsWithin) == 0x000010, "Member 'VertexPaintFunctionLibrary_PaintOnMeshWithinArea_Wrapper::ComponentsToCheckIfIsWithin' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_PaintOnMeshWithinArea_Wrapper, PaintWithinAreaStruct) == 0x000020, "Member 'VertexPaintFunctionLibrary_PaintOnMeshWithinArea_Wrapper::PaintWithinAreaStruct' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_PaintOnMeshWithinArea_Wrapper, AdditionalDataToPassThrough) == 0x0001A0, "Member 'VertexPaintFunctionLibrary_PaintOnMeshWithinArea_Wrapper::AdditionalDataToPassThrough' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.SetChaosClothPhysics
// 0x00C8 (0x00C8 - 0x0000)
struct VertexPaintFunctionLibrary_SetChaosClothPhysics final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClothingAssetBase*                     ClothingAsset;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVertexDetectChaosClothPhysicsSettings ClothPhysicsSettings;                              // 0x0010(0x00B4)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintFunctionLibrary_SetChaosClothPhysics) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_SetChaosClothPhysics");
static_assert(sizeof(VertexPaintFunctionLibrary_SetChaosClothPhysics) == 0x0000C8, "Wrong size on VertexPaintFunctionLibrary_SetChaosClothPhysics");
static_assert(offsetof(VertexPaintFunctionLibrary_SetChaosClothPhysics, SkeletalMeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_SetChaosClothPhysics::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_SetChaosClothPhysics, ClothingAsset) == 0x000008, "Member 'VertexPaintFunctionLibrary_SetChaosClothPhysics::ClothingAsset' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_SetChaosClothPhysics, ClothPhysicsSettings) == 0x000010, "Member 'VertexPaintFunctionLibrary_SetChaosClothPhysics::ClothPhysicsSettings' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.SetChaosWheeledVehicleFrictionMultiplier_Wrapper
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper final
{
public:
	class UChaosWheeledVehicleMovementComponent*  ChaosWheeledVehicleMovementComponent;              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WheelIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Friction;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper, ChaosWheeledVehicleMovementComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper::ChaosWheeledVehicleMovementComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper, WheelIndex) == 0x000008, "Member 'VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper::WheelIndex' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper, Friction) == 0x00000C, "Member 'VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper::Friction' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.SetMeshComponentVertexColors_Wrapper
// 0x0C30 (0x0C30 - 0x0000)
struct VertexPaintFunctionLibrary_SetMeshComponentVertexColors_Wrapper final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVertexPaintSetMeshComponentVertexColors SetMeshComponentVertexColorsSettings;              // 0x0008(0x0050)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectAdditionalDataToPassThrough AdditionalDataToPassThrough;                       // 0x0060(0x0BD0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_SetMeshComponentVertexColors_Wrapper) == 0x000010, "Wrong alignment on VertexPaintFunctionLibrary_SetMeshComponentVertexColors_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_SetMeshComponentVertexColors_Wrapper) == 0x000C30, "Wrong size on VertexPaintFunctionLibrary_SetMeshComponentVertexColors_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_SetMeshComponentVertexColors_Wrapper, MeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_SetMeshComponentVertexColors_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_SetMeshComponentVertexColors_Wrapper, SetMeshComponentVertexColorsSettings) == 0x000008, "Member 'VertexPaintFunctionLibrary_SetMeshComponentVertexColors_Wrapper::SetMeshComponentVertexColorsSettings' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_SetMeshComponentVertexColors_Wrapper, AdditionalDataToPassThrough) == 0x000060, "Member 'VertexPaintFunctionLibrary_SetMeshComponentVertexColors_Wrapper::AdditionalDataToPassThrough' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.SetMeshComponentVertexColorsUsingSerializedString_Wrapper
// 0x0C30 (0x0C30 - 0x0000)
struct VertexPaintFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVertexPaintSetMeshComponentVertexColorsUsingSerializedString SetMeshComponentVertexColorsUsingSerializedStringSettings; // 0x0008(0x0050)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectAdditionalDataToPassThrough AdditionalDataToPassThrough;                       // 0x0060(0x0BD0)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper) == 0x000010, "Wrong alignment on VertexPaintFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper");
static_assert(sizeof(VertexPaintFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper) == 0x000C30, "Wrong size on VertexPaintFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper");
static_assert(offsetof(VertexPaintFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper, MeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper::MeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper, SetMeshComponentVertexColorsUsingSerializedStringSettings) == 0x000008, "Member 'VertexPaintFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper::SetMeshComponentVertexColorsUsingSerializedStringSettings' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper, AdditionalDataToPassThrough) == 0x000060, "Member 'VertexPaintFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper::AdditionalDataToPassThrough' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.UpdateChaosClothPhysicsWithExistingColors
// 0x0008 (0x0008 - 0x0000)
struct VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColors final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColors) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColors");
static_assert(sizeof(VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColors) == 0x000008, "Wrong size on VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColors");
static_assert(offsetof(VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColors, SkeletalMeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColors::SkeletalMeshComponent' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.VertexPaintDetectionPlugin_GetSkeletalMesh
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComp;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMesh) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMesh");
static_assert(sizeof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMesh) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMesh");
static_assert(offsetof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMesh, SkeletalMeshComp) == 0x000000, "Member 'VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMesh::SkeletalMeshComp' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMesh, ReturnValue) == 0x000008, "Member 'VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMesh::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.VertexPaintDetectionPlugin_GetSkeletalMeshVertexColorsAtLOD
// 0x0020 (0x0020 - 0x0000)
struct VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMeshVertexColorsAtLOD final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lod;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FColor>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMeshVertexColorsAtLOD) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMeshVertexColorsAtLOD");
static_assert(sizeof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMeshVertexColorsAtLOD) == 0x000020, "Wrong size on VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMeshVertexColorsAtLOD");
static_assert(offsetof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMeshVertexColorsAtLOD, SkeletalMeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMeshVertexColorsAtLOD::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMeshVertexColorsAtLOD, Lod) == 0x000008, "Member 'VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMeshVertexColorsAtLOD::Lod' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMeshVertexColorsAtLOD, ReturnValue) == 0x000010, "Member 'VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMeshVertexColorsAtLOD::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.VertexPaintDetectionPlugin_GetStaticMeshVertexColorsAtLOD
// 0x0020 (0x0020 - 0x0000)
struct VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetStaticMeshVertexColorsAtLOD final
{
public:
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lod;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FColor>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetStaticMeshVertexColorsAtLOD) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetStaticMeshVertexColorsAtLOD");
static_assert(sizeof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetStaticMeshVertexColorsAtLOD) == 0x000020, "Wrong size on VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetStaticMeshVertexColorsAtLOD");
static_assert(offsetof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetStaticMeshVertexColorsAtLOD, StaticMeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetStaticMeshVertexColorsAtLOD::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetStaticMeshVertexColorsAtLOD, Lod) == 0x000008, "Member 'VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetStaticMeshVertexColorsAtLOD::Lod' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetStaticMeshVertexColorsAtLOD, ReturnValue) == 0x000010, "Member 'VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetStaticMeshVertexColorsAtLOD::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.VertexPaintDetectionPlugin_SetSkeletalMeshAndReleaseResources
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SetSkeletalMeshAndReleaseResources final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          NewMesh;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SetSkeletalMeshAndReleaseResources) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SetSkeletalMeshAndReleaseResources");
static_assert(sizeof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SetSkeletalMeshAndReleaseResources) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SetSkeletalMeshAndReleaseResources");
static_assert(offsetof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SetSkeletalMeshAndReleaseResources, SkeletalMeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SetSkeletalMeshAndReleaseResources::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SetSkeletalMeshAndReleaseResources, NewMesh) == 0x000008, "Member 'VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SetSkeletalMeshAndReleaseResources::NewMesh' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.VertexPaintDetectionPlugin_SetStaticMeshAndReleaseOverrideVertexColors
// 0x0010 (0x0010 - 0x0000)
struct VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SetStaticMeshAndReleaseOverrideVertexColors final
{
public:
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            NewMesh;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SetStaticMeshAndReleaseOverrideVertexColors) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SetStaticMeshAndReleaseOverrideVertexColors");
static_assert(sizeof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SetStaticMeshAndReleaseOverrideVertexColors) == 0x000010, "Wrong size on VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SetStaticMeshAndReleaseOverrideVertexColors");
static_assert(offsetof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SetStaticMeshAndReleaseOverrideVertexColors, StaticMeshComponent) == 0x000000, "Member 'VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SetStaticMeshAndReleaseOverrideVertexColors::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SetStaticMeshAndReleaseOverrideVertexColors, NewMesh) == 0x000008, "Member 'VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SetStaticMeshAndReleaseOverrideVertexColors::NewMesh' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically
// 0x00A0 (0x00A0 - 0x0000)
struct VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically final
{
public:
	TMap<int32, class FString>                    AssetIndexAndName;                                 // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	TMap<int32, class FString>                    ReturnValue;                                       // 0x0050(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically");
static_assert(sizeof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically) == 0x0000A0, "Wrong size on VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically");
static_assert(offsetof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically, AssetIndexAndName) == 0x000000, "Member 'VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically::AssetIndexAndName' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically, ReturnValue) == 0x000050, "Member 'VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.VertexPaintDetectionPlugin_SortStringArrayAlphabetically
// 0x0020 (0x0020 - 0x0000)
struct VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortStringArrayAlphabetically final
{
public:
	TArray<class FString>                         Strings;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortStringArrayAlphabetically) == 0x000008, "Wrong alignment on VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortStringArrayAlphabetically");
static_assert(sizeof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortStringArrayAlphabetically) == 0x000020, "Wrong size on VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortStringArrayAlphabetically");
static_assert(offsetof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortStringArrayAlphabetically, Strings) == 0x000000, "Member 'VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortStringArrayAlphabetically::Strings' has a wrong offset!");
static_assert(offsetof(VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortStringArrayAlphabetically, ReturnValue) == 0x000010, "Member 'VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortStringArrayAlphabetically::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintMaterialDataAsset.AddToVertexPaintMaterialInterface
// 0x00D0 (0x00D0 - 0x0000)
struct VertexPaintMaterialDataAsset_AddToVertexPaintMaterialInterface final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      Material;                                          // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVertexPaintMaterialDataAssetStruct    MaterialDataAssetStruct;                           // 0x0028(0x00A8)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintMaterialDataAsset_AddToVertexPaintMaterialInterface) == 0x000008, "Wrong alignment on VertexPaintMaterialDataAsset_AddToVertexPaintMaterialInterface");
static_assert(sizeof(VertexPaintMaterialDataAsset_AddToVertexPaintMaterialInterface) == 0x0000D0, "Wrong size on VertexPaintMaterialDataAsset_AddToVertexPaintMaterialInterface");
static_assert(offsetof(VertexPaintMaterialDataAsset_AddToVertexPaintMaterialInterface, Material) == 0x000000, "Member 'VertexPaintMaterialDataAsset_AddToVertexPaintMaterialInterface::Material' has a wrong offset!");
static_assert(offsetof(VertexPaintMaterialDataAsset_AddToVertexPaintMaterialInterface, MaterialDataAssetStruct) == 0x000028, "Member 'VertexPaintMaterialDataAsset_AddToVertexPaintMaterialInterface::MaterialDataAssetStruct' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintMaterialDataAsset.GetVertexPaintMaterialInterface
// 0x0050 (0x0050 - 0x0000)
struct VertexPaintMaterialDataAsset_GetVertexPaintMaterialInterface final
{
public:
	TMap<TSoftObjectPtr<class UMaterialInterface>, struct FVertexPaintMaterialDataAssetStruct> ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintMaterialDataAsset_GetVertexPaintMaterialInterface) == 0x000008, "Wrong alignment on VertexPaintMaterialDataAsset_GetVertexPaintMaterialInterface");
static_assert(sizeof(VertexPaintMaterialDataAsset_GetVertexPaintMaterialInterface) == 0x000050, "Wrong size on VertexPaintMaterialDataAsset_GetVertexPaintMaterialInterface");
static_assert(offsetof(VertexPaintMaterialDataAsset_GetVertexPaintMaterialInterface, ReturnValue) == 0x000000, "Member 'VertexPaintMaterialDataAsset_GetVertexPaintMaterialInterface::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintMaterialDataAsset.IsMaterialAddedToPaintOnMaterialDataAsset
// 0x0030 (0x0030 - 0x0000)
struct VertexPaintMaterialDataAsset_IsMaterialAddedToPaintOnMaterialDataAsset final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      Material;                                          // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VertexPaintMaterialDataAsset_IsMaterialAddedToPaintOnMaterialDataAsset) == 0x000008, "Wrong alignment on VertexPaintMaterialDataAsset_IsMaterialAddedToPaintOnMaterialDataAsset");
static_assert(sizeof(VertexPaintMaterialDataAsset_IsMaterialAddedToPaintOnMaterialDataAsset) == 0x000030, "Wrong size on VertexPaintMaterialDataAsset_IsMaterialAddedToPaintOnMaterialDataAsset");
static_assert(offsetof(VertexPaintMaterialDataAsset_IsMaterialAddedToPaintOnMaterialDataAsset, Material) == 0x000000, "Member 'VertexPaintMaterialDataAsset_IsMaterialAddedToPaintOnMaterialDataAsset::Material' has a wrong offset!");
static_assert(offsetof(VertexPaintMaterialDataAsset_IsMaterialAddedToPaintOnMaterialDataAsset, ReturnValue) == 0x000028, "Member 'VertexPaintMaterialDataAsset_IsMaterialAddedToPaintOnMaterialDataAsset::ReturnValue' has a wrong offset!");

// Function VertexPaintDetectionPlugin.VertexPaintMaterialDataAsset.RemoveFromVertexPaintMaterialInterface
// 0x0028 (0x0028 - 0x0000)
struct VertexPaintMaterialDataAsset_RemoveFromVertexPaintMaterialInterface final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      Material;                                          // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VertexPaintMaterialDataAsset_RemoveFromVertexPaintMaterialInterface) == 0x000008, "Wrong alignment on VertexPaintMaterialDataAsset_RemoveFromVertexPaintMaterialInterface");
static_assert(sizeof(VertexPaintMaterialDataAsset_RemoveFromVertexPaintMaterialInterface) == 0x000028, "Wrong size on VertexPaintMaterialDataAsset_RemoveFromVertexPaintMaterialInterface");
static_assert(offsetof(VertexPaintMaterialDataAsset_RemoveFromVertexPaintMaterialInterface, Material) == 0x000000, "Member 'VertexPaintMaterialDataAsset_RemoveFromVertexPaintMaterialInterface::Material' has a wrong offset!");

}

