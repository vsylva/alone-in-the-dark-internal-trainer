#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Player_Opportunity_Quick

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GA_Player_Opportunity_Target_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Player_Opportunity_Quick.GA_Player_Opportunity_Quick_C
// 0x0020 (0x0550 - 0x0530)
class UGA_Player_Opportunity_Quick_C final : public UGA_Player_Opportunity_Target_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_GA_Player_Opportunity_Quick_C;      // 0x0530(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          bRotateCamera;                                     // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_539[0x7];                                      // 0x0539(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraModifier*                        Throw_Camera_Modifier;                             // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Enemy_Lock_Range;                                  // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GA_Player_Opportunity_Quick(int32 EntryPoint);
	void Initialize();
	void ImmediateThrow();
	void StartTargeting();
	void K2_OnEndAbility(bool bWasCancelled);
	void OnFinish_81557D5649EC0396C05B2284FBDA9994();
	void InitializeOpportunityThrowingValues(const struct FGameplayAbilityTargetDataHandle& TargetData);
	void Rotate_Character___Camera(class AObsidianFoxCharacter* Target);
	void Get_Facing_Rotation_In_Camera(class AActor*& TargetActor, float CameraRotationTolerance, struct FRotator* FacingRotation, bool* RotatingOk);

	void GetPlayerCameraManager(class APlayerCameraManager** PlayerCameraManager) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Player_Opportunity_Quick_C">();
	}
	static class UGA_Player_Opportunity_Quick_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Player_Opportunity_Quick_C>();
	}
};
static_assert(alignof(UGA_Player_Opportunity_Quick_C) == 0x000008, "Wrong alignment on UGA_Player_Opportunity_Quick_C");
static_assert(sizeof(UGA_Player_Opportunity_Quick_C) == 0x000550, "Wrong size on UGA_Player_Opportunity_Quick_C");
static_assert(offsetof(UGA_Player_Opportunity_Quick_C, UberGraphFrame_GA_Player_Opportunity_Quick_C) == 0x000530, "Member 'UGA_Player_Opportunity_Quick_C::UberGraphFrame_GA_Player_Opportunity_Quick_C' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Quick_C, bRotateCamera) == 0x000538, "Member 'UGA_Player_Opportunity_Quick_C::bRotateCamera' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Quick_C, Throw_Camera_Modifier) == 0x000540, "Member 'UGA_Player_Opportunity_Quick_C::Throw_Camera_Modifier' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Quick_C, Enemy_Lock_Range) == 0x000548, "Member 'UGA_Player_Opportunity_Quick_C::Enemy_Lock_Range' has a wrong offset!");

}

