#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MasterPuzzle

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "EPuzzleMovementStates_structs.hpp"
#include "ObsidianFox_structs.hpp"
#include "ObsidianFox_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "EOtherworldPathwayStage_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MasterPuzzle.BP_MasterPuzzle_C
// 0x03F0 (0x07B0 - 0x03C0)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_MasterPuzzle_C : public APuzzleActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFlowComponent*                         Flow;                                              // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LargeClockHand;                                    // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MediumClockHand;                                   // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SmallClockHand;                                    // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       ClockCamera;                                       // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WallClock01;                                    // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       MainCamera;                                        // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PuzzleSocket;                                      // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       ItemCamera;                                        // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Tile09;                                            // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Tile08;                                            // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Tile07;                                            // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Tile06;                                            // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Tile01;                                            // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Tile04;                                            // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Tile03;                                            // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Tile02;                                            // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Tile05;                                            // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TalismanHolder;                                    // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ItemMesh;                                          // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Drawer;                                            // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PuzzleSelectionComponent_C*         PuzzleSelectionComponent;                          // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MainMesh;                                          // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         FadeUITime_Opacity_560B0C6D4D667A946F80109A405C0EBC; // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FadeUITime__Direction_560B0C6D4D667A946F80109A405C0EBC; // 0x048C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48D[0x3];                                      // 0x048D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FadeUITime;                                        // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveCameraTime_Alpha_FEF7C30E49D64B6A62641F9BC35DC5CE; // 0x0498(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            MoveCameraTime__Direction_FEF7C30E49D64B6A62641F9BC35DC5CE; // 0x049C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49D[0x3];                                      // 0x049D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     MoveCameraTime;                                    // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SwapPieceTime_Alpha_D8B666974AEDCA842529F38FD3710BEC; // 0x04A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SwapPieceTime__Direction_D8B666974AEDCA842529F38FD3710BEC; // 0x04AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4AD[0x3];                                      // 0x04AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SwapPieceTime;                                     // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotateItemTime_LerpTime_74B430454EAA96316C3E1CBACC2615BB; // 0x04B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            RotateItemTime__Direction_74B430454EAA96316C3E1CBACC2615BB; // 0x04BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BD[0x3];                                      // 0x04BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     RotateItemTime;                                    // 0x04C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Clock_Solve_Timeline_SolveAlpha_4711264949752CCF4490319317EB8DA5; // 0x04C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Clock_Solve_Timeline_Speed_4711264949752CCF4490319317EB8DA5; // 0x04CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Clock_Solve_Timeline__Direction_4711264949752CCF4490319317EB8DA5; // 0x04D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D1[0x7];                                      // 0x04D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Clock_Solve_Timeline;                              // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInputBlocked;                                     // 0x04E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E1[0x7];                                      // 0x04E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             TileAddedEvent;                                    // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UItemData*, bool>                  AdditionalPuzzlePieces;                            // 0x04F0(0x0050)(Edit, BlueprintVisible, SaveGame)
	TArray<class UItemData*>                      Items_Added_On_Completion;                         // 0x0540(0x0010)(Edit, BlueprintVisible)
	bool                                          bCachedAllItemsInDesiredPositions;                 // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_551[0xF];                                      // 0x0551(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             AddedTileTargetTransform;                          // 0x0560(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         TalismanCombination;                               // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Talisman_Flow_Tag;                                 // 0x0594(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	bool                                          bClockEventEnabled;                                // 0x059C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59D[0x3];                                      // 0x059D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PickupOffsetTransform;                             // 0x05A0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	float                                         Piece_Slide_Time;                                  // 0x05D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D4[0xC];                                      // 0x05D4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TalismanTransform;                                 // 0x05E0(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         LargeHandMaxValue;                                 // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LargeHandStartOffset;                              // 0x0614(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLargeHandRotatesClockwise;                        // 0x0618(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_619[0x3];                                      // 0x0619(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MediumHandMaxValue;                                // 0x061C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MediumHandStartOffset;                             // 0x0620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMediumHandRotatesClockwise;                       // 0x0624(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_625[0x3];                                      // 0x0625(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SmallHandMaxValue;                                 // 0x0628(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SmallHandStartOffset;                              // 0x062C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSmallHandRotatesClockwise;                        // 0x0630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AutoEquipTalisman;                                 // 0x0631(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_632[0xE];                                      // 0x0632(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             MainCameraOriginalRelTransform;                    // 0x0640(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         TileOffset;                                        // 0x0670(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          bIsInTalismanMode;                                 // 0x0674(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_675[0x3];                                      // 0x0675(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Talisman_IP_C*                      TalismanPuzzleActor;                               // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasSpawnedTalisman;                               // 0x0680(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_681[0x7];                                      // 0x0681(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ItemPickerTargetName;                              // 0x0688(0x0018)(Edit, BlueprintVisible)
	struct FGameplayTag                           SolvingNotifyTag;                                  // 0x06A0(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           InteractNotifyTag;                                 // 0x06A8(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EnterNotifyTag;                                    // 0x06B0(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SocketCompleteNotifyTag;                           // 0x06B8(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	EFInventoryPopUp                              Pop_Up;                                            // 0x06C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C1[0x3];                                      // 0x06C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DrawerOpenPosition;                                // 0x06C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SolveExitDelay;                                    // 0x06D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotationModifier;                                  // 0x06D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetRotation;                                    // 0x06D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseRotations;                                     // 0x06E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bUseRandomRotations;                               // 0x06E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E6[0x2];                                      // 0x06E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRotator>                       RandomStartRotations;                              // 0x06E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FRotator>                       StartRotations;                                    // 0x06F8(0x0010)(Edit, BlueprintVisible)
	struct FVector                                TalismanOffsetLoc;                                 // 0x0708(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_714[0x4];                                      // 0x0714(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           LerpCurve;                                         // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             MainCameraDiscTargetTransform;                     // 0x0720(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	bool                                          bShouldTranslateCamera;                            // 0x0750(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bTranslatedCamera;                                 // 0x0751(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_752[0x6];                                      // 0x0752(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnItemPickerOpened;                                // 0x0758(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FGameplayTag                           ExitNotifyTag;                                     // 0x0768(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	bool                                          Fade_to_Black_on_Exit;                             // 0x0770(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_771[0x7];                                      // 0x0771(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             TilePickUpEvent;                                   // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             TilePlacedEvent;                                   // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             TileSwappedEvent;                                  // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             TileRotatedEvent;                                  // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             UnlockEvent;                                       // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             DrawerPopout;                                      // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnItemPickerOpened__DelegateSignature();
	void ExecuteUbergraph_BP_MasterPuzzle(int32 EntryPoint);
	void FadeInUI();
	void FadeOutUI();
	void Rotate_Tile(float ActionValue);
	void TranslateCameraToPuzzleView();
	void ResetRotation();
	void BndEvt__BP_MasterPuzzle_InteractionComponentFlow_K2Node_ComponentBoundEvent_3_InteractionSignature__DelegateSignature(class ACharacter* InteractionCharacter);
	void SolvingPuzzle(class AOFPlayerController* InteractingPlayerController);
	void OnExitPuzzle(class APuzzleActor* PuzzleActor, class AOFPlayerController* InteractingController);
	void TalismanMode();
	void Move_Camera_to_Original_Position(float OverTime);
	void MoveCameraToClock(float CameraPanTime);
	void OnValidCombinationEntered(const struct FGameplayTag& GameplayTag, class ABP_Talisman_IP_C* TalismanActor);
	void Bring_Up_Talisman();
	void MoveCameraToTalisman();
	void Open_Item_Drawer();
	void Clock_Event();
	void ReceiveTick(float DeltaSeconds);
	void AnimateAddedTiles(class USceneComponent* Added_Tile);
	void PickUpTile();
	void PutBackTile(bool Param_ExitingPuzzle_0);
	void BndEvt__BP_KeyholeBox_PuzzleSelectionComponent_K2Node_ComponentBoundEvent_1_OnNavigated__DelegateSignature(bool IsHoldingItem, int32 CurrentSelectedIndex, int32 PreviousSelectedIndex, bool NavigationSuccessful);
	void BndEvt__BP_KeyholeBox_PuzzleSelectionComponent_K2Node_ComponentBoundEvent_0_OnSwapItem__DelegateSignature(int32 PreviousItemIndex, int32 SelectedItemIndex);
	void OnWindowClose();
	void InpActEvt_IA_Interact_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime);
	void InpActEvt_T_K2Node_InputDebugKeyEvent_0(const struct FKey& Key);
	void InpActEvt_IA_PuzzleSelection_Rotate_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime);
	void InpActEvt_IA_PuzzleSelection_Cancel_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime);
	void InpActEvt_IA_PuzzleSelection_Up_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime);
	void InpActEvt_IA_PuzzleSelection_Right_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime);
	void FadeUITime__UpdateFunc();
	void FadeUITime__FinishedFunc();
	void MoveCameraTime__UpdateFunc();
	void MoveCameraTime__FinishedFunc();
	void SwapPieceTime__UpdateFunc();
	void SwapPieceTime__FinishedFunc();
	void RotateItemTime__UpdateFunc();
	void RotateItemTime__FinishedFunc();
	void Clock_Solve_Timeline__UpdateFunc();
	void Clock_Solve_Timeline__FinishedFunc();
	void UserConstructionScript();
	void ReceiveBeginPlay();
	bool IsItem_In_Desired_Position(class UObject* Item, int32 Desired_Index);
	bool All_Items_In_Desired_Positions();
	void Set_Solved_Tile_Positions();
	void Interact_With_Tile();
	void Rebuild_Puzzle();
	void SetItemMesh();
	void SetAdditionalTilesAsHidden();
	void Add_Missing_Tile(class UItemData* ItemData);
	void Open_Item_Picker();
	void Attach_Tiles_to_Puzzle_Socket();
	void UpdateClockTime();
	void SetClockTalismanNumbers();
	bool CancelExitsPuzzle();
	void SetTalismanCombinationValue();
	void Cache_Original_Camera_Transform();
	void AlignTiles();
	void SetOtherworldState(EOtherworldPathwayStage Enum);
	void EnteringPuzzle(class ACharacter* InteractingCharacter);
	void ExitingPuzzle(class AOFPlayerController* InteractingPlayerController);
	TSet<class UItemData*> GetRequiredItems();
	struct FRotator MakeNewRotation();
	void LerpToNewRotation(float Alpha);
	struct FRotator GetRotationOfHeldItem();
	void GetPermanentPuzzleItems(TArray<class UStaticMeshComponent*>* PermanentPuzzleItems);
	void SetPuzzleItemsPermanentlyInPlace();
	void LerpSwappedItem(int32 Index_0, float Alpha, const struct FVector& Offset, float CurveMultiplier);
	void SetCameraToPuzzleView();
	void FlowNotify_Cheat(class UFlowComponent* FlowComponent_0, const struct FGameplayTag& NotifyTag);
	struct FRotator DetermineStartRotations(int32 Index_0);
	bool CheckIfRightItem(class UItemData* ItemData);
	class FText GetTargetName();

	void GetPuzzleItems(TArray<class UStaticMeshComponent*>* Array) const;
	void AllPiecesAdded(bool* bAllPiecesAdded) const;
	void GetDesiredPuzzleItems(TArray<class UStaticMeshComponent*>* Array) const;
	void GetDialRotationFromValue(int32 InValue, int32 MaxHandValue, int32 StartOffset, bool bClockwiseRotation, float* Rotation) const;
	void GetClockHandsCombinationRotation(struct FRotator* Large_Hand_Rotation, struct FRotator* Medium_Hand_Rotation, struct FRotator* Small_Hand_Rotation) const;
	struct FDateTime GetTime() const;
	bool CanRotateSelectedPiece() const;
	struct FGameplayTag GetItemCategoryGameplayTag() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MasterPuzzle_C">();
	}
	static class ABP_MasterPuzzle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MasterPuzzle_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_MasterPuzzle_C) == 0x000010, "Wrong alignment on ABP_MasterPuzzle_C");
static_assert(sizeof(ABP_MasterPuzzle_C) == 0x0007B0, "Wrong size on ABP_MasterPuzzle_C");
static_assert(offsetof(ABP_MasterPuzzle_C, UberGraphFrame) == 0x0003C0, "Member 'ABP_MasterPuzzle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, Flow) == 0x0003C8, "Member 'ABP_MasterPuzzle_C::Flow' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, LargeClockHand) == 0x0003D0, "Member 'ABP_MasterPuzzle_C::LargeClockHand' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, MediumClockHand) == 0x0003D8, "Member 'ABP_MasterPuzzle_C::MediumClockHand' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, SmallClockHand) == 0x0003E0, "Member 'ABP_MasterPuzzle_C::SmallClockHand' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, ClockCamera) == 0x0003E8, "Member 'ABP_MasterPuzzle_C::ClockCamera' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, SM_WallClock01) == 0x0003F0, "Member 'ABP_MasterPuzzle_C::SM_WallClock01' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, MainCamera) == 0x0003F8, "Member 'ABP_MasterPuzzle_C::MainCamera' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, PuzzleSocket) == 0x000400, "Member 'ABP_MasterPuzzle_C::PuzzleSocket' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, ItemCamera) == 0x000408, "Member 'ABP_MasterPuzzle_C::ItemCamera' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, Tile09) == 0x000410, "Member 'ABP_MasterPuzzle_C::Tile09' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, Tile08) == 0x000418, "Member 'ABP_MasterPuzzle_C::Tile08' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, Tile07) == 0x000420, "Member 'ABP_MasterPuzzle_C::Tile07' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, Tile06) == 0x000428, "Member 'ABP_MasterPuzzle_C::Tile06' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, Tile01) == 0x000430, "Member 'ABP_MasterPuzzle_C::Tile01' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, Tile04) == 0x000438, "Member 'ABP_MasterPuzzle_C::Tile04' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, Tile03) == 0x000440, "Member 'ABP_MasterPuzzle_C::Tile03' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, Tile02) == 0x000448, "Member 'ABP_MasterPuzzle_C::Tile02' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, Tile05) == 0x000450, "Member 'ABP_MasterPuzzle_C::Tile05' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, SpotLight) == 0x000458, "Member 'ABP_MasterPuzzle_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, TalismanHolder) == 0x000460, "Member 'ABP_MasterPuzzle_C::TalismanHolder' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, ItemMesh) == 0x000468, "Member 'ABP_MasterPuzzle_C::ItemMesh' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, Drawer) == 0x000470, "Member 'ABP_MasterPuzzle_C::Drawer' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, PuzzleSelectionComponent) == 0x000478, "Member 'ABP_MasterPuzzle_C::PuzzleSelectionComponent' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, MainMesh) == 0x000480, "Member 'ABP_MasterPuzzle_C::MainMesh' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, FadeUITime_Opacity_560B0C6D4D667A946F80109A405C0EBC) == 0x000488, "Member 'ABP_MasterPuzzle_C::FadeUITime_Opacity_560B0C6D4D667A946F80109A405C0EBC' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, FadeUITime__Direction_560B0C6D4D667A946F80109A405C0EBC) == 0x00048C, "Member 'ABP_MasterPuzzle_C::FadeUITime__Direction_560B0C6D4D667A946F80109A405C0EBC' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, FadeUITime) == 0x000490, "Member 'ABP_MasterPuzzle_C::FadeUITime' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, MoveCameraTime_Alpha_FEF7C30E49D64B6A62641F9BC35DC5CE) == 0x000498, "Member 'ABP_MasterPuzzle_C::MoveCameraTime_Alpha_FEF7C30E49D64B6A62641F9BC35DC5CE' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, MoveCameraTime__Direction_FEF7C30E49D64B6A62641F9BC35DC5CE) == 0x00049C, "Member 'ABP_MasterPuzzle_C::MoveCameraTime__Direction_FEF7C30E49D64B6A62641F9BC35DC5CE' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, MoveCameraTime) == 0x0004A0, "Member 'ABP_MasterPuzzle_C::MoveCameraTime' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, SwapPieceTime_Alpha_D8B666974AEDCA842529F38FD3710BEC) == 0x0004A8, "Member 'ABP_MasterPuzzle_C::SwapPieceTime_Alpha_D8B666974AEDCA842529F38FD3710BEC' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, SwapPieceTime__Direction_D8B666974AEDCA842529F38FD3710BEC) == 0x0004AC, "Member 'ABP_MasterPuzzle_C::SwapPieceTime__Direction_D8B666974AEDCA842529F38FD3710BEC' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, SwapPieceTime) == 0x0004B0, "Member 'ABP_MasterPuzzle_C::SwapPieceTime' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, RotateItemTime_LerpTime_74B430454EAA96316C3E1CBACC2615BB) == 0x0004B8, "Member 'ABP_MasterPuzzle_C::RotateItemTime_LerpTime_74B430454EAA96316C3E1CBACC2615BB' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, RotateItemTime__Direction_74B430454EAA96316C3E1CBACC2615BB) == 0x0004BC, "Member 'ABP_MasterPuzzle_C::RotateItemTime__Direction_74B430454EAA96316C3E1CBACC2615BB' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, RotateItemTime) == 0x0004C0, "Member 'ABP_MasterPuzzle_C::RotateItemTime' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, Clock_Solve_Timeline_SolveAlpha_4711264949752CCF4490319317EB8DA5) == 0x0004C8, "Member 'ABP_MasterPuzzle_C::Clock_Solve_Timeline_SolveAlpha_4711264949752CCF4490319317EB8DA5' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, Clock_Solve_Timeline_Speed_4711264949752CCF4490319317EB8DA5) == 0x0004CC, "Member 'ABP_MasterPuzzle_C::Clock_Solve_Timeline_Speed_4711264949752CCF4490319317EB8DA5' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, Clock_Solve_Timeline__Direction_4711264949752CCF4490319317EB8DA5) == 0x0004D0, "Member 'ABP_MasterPuzzle_C::Clock_Solve_Timeline__Direction_4711264949752CCF4490319317EB8DA5' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, Clock_Solve_Timeline) == 0x0004D8, "Member 'ABP_MasterPuzzle_C::Clock_Solve_Timeline' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, bInputBlocked) == 0x0004E0, "Member 'ABP_MasterPuzzle_C::bInputBlocked' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, TileAddedEvent) == 0x0004E8, "Member 'ABP_MasterPuzzle_C::TileAddedEvent' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, AdditionalPuzzlePieces) == 0x0004F0, "Member 'ABP_MasterPuzzle_C::AdditionalPuzzlePieces' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, Items_Added_On_Completion) == 0x000540, "Member 'ABP_MasterPuzzle_C::Items_Added_On_Completion' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, bCachedAllItemsInDesiredPositions) == 0x000550, "Member 'ABP_MasterPuzzle_C::bCachedAllItemsInDesiredPositions' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, AddedTileTargetTransform) == 0x000560, "Member 'ABP_MasterPuzzle_C::AddedTileTargetTransform' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, TalismanCombination) == 0x000590, "Member 'ABP_MasterPuzzle_C::TalismanCombination' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, Talisman_Flow_Tag) == 0x000594, "Member 'ABP_MasterPuzzle_C::Talisman_Flow_Tag' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, bClockEventEnabled) == 0x00059C, "Member 'ABP_MasterPuzzle_C::bClockEventEnabled' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, PickupOffsetTransform) == 0x0005A0, "Member 'ABP_MasterPuzzle_C::PickupOffsetTransform' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, Piece_Slide_Time) == 0x0005D0, "Member 'ABP_MasterPuzzle_C::Piece_Slide_Time' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, TalismanTransform) == 0x0005E0, "Member 'ABP_MasterPuzzle_C::TalismanTransform' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, LargeHandMaxValue) == 0x000610, "Member 'ABP_MasterPuzzle_C::LargeHandMaxValue' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, LargeHandStartOffset) == 0x000614, "Member 'ABP_MasterPuzzle_C::LargeHandStartOffset' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, bLargeHandRotatesClockwise) == 0x000618, "Member 'ABP_MasterPuzzle_C::bLargeHandRotatesClockwise' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, MediumHandMaxValue) == 0x00061C, "Member 'ABP_MasterPuzzle_C::MediumHandMaxValue' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, MediumHandStartOffset) == 0x000620, "Member 'ABP_MasterPuzzle_C::MediumHandStartOffset' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, bMediumHandRotatesClockwise) == 0x000624, "Member 'ABP_MasterPuzzle_C::bMediumHandRotatesClockwise' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, SmallHandMaxValue) == 0x000628, "Member 'ABP_MasterPuzzle_C::SmallHandMaxValue' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, SmallHandStartOffset) == 0x00062C, "Member 'ABP_MasterPuzzle_C::SmallHandStartOffset' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, bSmallHandRotatesClockwise) == 0x000630, "Member 'ABP_MasterPuzzle_C::bSmallHandRotatesClockwise' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, AutoEquipTalisman) == 0x000631, "Member 'ABP_MasterPuzzle_C::AutoEquipTalisman' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, MainCameraOriginalRelTransform) == 0x000640, "Member 'ABP_MasterPuzzle_C::MainCameraOriginalRelTransform' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, TileOffset) == 0x000670, "Member 'ABP_MasterPuzzle_C::TileOffset' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, bIsInTalismanMode) == 0x000674, "Member 'ABP_MasterPuzzle_C::bIsInTalismanMode' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, TalismanPuzzleActor) == 0x000678, "Member 'ABP_MasterPuzzle_C::TalismanPuzzleActor' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, bHasSpawnedTalisman) == 0x000680, "Member 'ABP_MasterPuzzle_C::bHasSpawnedTalisman' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, ItemPickerTargetName) == 0x000688, "Member 'ABP_MasterPuzzle_C::ItemPickerTargetName' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, SolvingNotifyTag) == 0x0006A0, "Member 'ABP_MasterPuzzle_C::SolvingNotifyTag' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, InteractNotifyTag) == 0x0006A8, "Member 'ABP_MasterPuzzle_C::InteractNotifyTag' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, EnterNotifyTag) == 0x0006B0, "Member 'ABP_MasterPuzzle_C::EnterNotifyTag' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, SocketCompleteNotifyTag) == 0x0006B8, "Member 'ABP_MasterPuzzle_C::SocketCompleteNotifyTag' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, Pop_Up) == 0x0006C0, "Member 'ABP_MasterPuzzle_C::Pop_Up' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, DrawerOpenPosition) == 0x0006C4, "Member 'ABP_MasterPuzzle_C::DrawerOpenPosition' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, SolveExitDelay) == 0x0006D0, "Member 'ABP_MasterPuzzle_C::SolveExitDelay' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, RotationModifier) == 0x0006D4, "Member 'ABP_MasterPuzzle_C::RotationModifier' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, TargetRotation) == 0x0006D8, "Member 'ABP_MasterPuzzle_C::TargetRotation' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, bUseRotations) == 0x0006E4, "Member 'ABP_MasterPuzzle_C::bUseRotations' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, bUseRandomRotations) == 0x0006E5, "Member 'ABP_MasterPuzzle_C::bUseRandomRotations' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, RandomStartRotations) == 0x0006E8, "Member 'ABP_MasterPuzzle_C::RandomStartRotations' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, StartRotations) == 0x0006F8, "Member 'ABP_MasterPuzzle_C::StartRotations' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, TalismanOffsetLoc) == 0x000708, "Member 'ABP_MasterPuzzle_C::TalismanOffsetLoc' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, LerpCurve) == 0x000718, "Member 'ABP_MasterPuzzle_C::LerpCurve' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, MainCameraDiscTargetTransform) == 0x000720, "Member 'ABP_MasterPuzzle_C::MainCameraDiscTargetTransform' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, bShouldTranslateCamera) == 0x000750, "Member 'ABP_MasterPuzzle_C::bShouldTranslateCamera' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, bTranslatedCamera) == 0x000751, "Member 'ABP_MasterPuzzle_C::bTranslatedCamera' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, OnItemPickerOpened) == 0x000758, "Member 'ABP_MasterPuzzle_C::OnItemPickerOpened' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, ExitNotifyTag) == 0x000768, "Member 'ABP_MasterPuzzle_C::ExitNotifyTag' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, Fade_to_Black_on_Exit) == 0x000770, "Member 'ABP_MasterPuzzle_C::Fade_to_Black_on_Exit' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, TilePickUpEvent) == 0x000778, "Member 'ABP_MasterPuzzle_C::TilePickUpEvent' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, TilePlacedEvent) == 0x000780, "Member 'ABP_MasterPuzzle_C::TilePlacedEvent' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, TileSwappedEvent) == 0x000788, "Member 'ABP_MasterPuzzle_C::TileSwappedEvent' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, TileRotatedEvent) == 0x000790, "Member 'ABP_MasterPuzzle_C::TileRotatedEvent' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, UnlockEvent) == 0x000798, "Member 'ABP_MasterPuzzle_C::UnlockEvent' has a wrong offset!");
static_assert(offsetof(ABP_MasterPuzzle_C, DrawerPopout) == 0x0007A0, "Member 'ABP_MasterPuzzle_C::DrawerPopout' has a wrong offset!");

}

