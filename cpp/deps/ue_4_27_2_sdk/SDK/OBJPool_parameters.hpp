#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OBJPool

#include "Basic.hpp"

#include "OBJPool_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function OBJPool.PooledProjectile.ProjectileBounce
// 0x0094 (0x0094 - 0x0000)
struct PooledProjectile_ProjectileBounce final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0088(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PooledProjectile_ProjectileBounce) == 0x000004, "Wrong alignment on PooledProjectile_ProjectileBounce");
static_assert(sizeof(PooledProjectile_ProjectileBounce) == 0x000094, "Wrong size on PooledProjectile_ProjectileBounce");
static_assert(offsetof(PooledProjectile_ProjectileBounce, HitResult) == 0x000000, "Member 'PooledProjectile_ProjectileBounce::HitResult' has a wrong offset!");
static_assert(offsetof(PooledProjectile_ProjectileBounce, Velocity) == 0x000088, "Member 'PooledProjectile_ProjectileBounce::Velocity' has a wrong offset!");

// Function OBJPool.PooledProjectile.ProjectileStop
// 0x0088 (0x0088 - 0x0000)
struct PooledProjectile_ProjectileStop final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PooledProjectile_ProjectileStop) == 0x000004, "Wrong alignment on PooledProjectile_ProjectileStop");
static_assert(sizeof(PooledProjectile_ProjectileStop) == 0x000088, "Wrong size on PooledProjectile_ProjectileStop");
static_assert(offsetof(PooledProjectile_ProjectileStop, HitResult) == 0x000000, "Member 'PooledProjectile_ProjectileStop::HitResult' has a wrong offset!");

// Function OBJPool.PooledProjectile.GetMovementComponent
// 0x0008 (0x0008 - 0x0000)
struct PooledProjectile_GetMovementComponent final
{
public:
	class UProjectileMovementComponent*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PooledProjectile_GetMovementComponent) == 0x000008, "Wrong alignment on PooledProjectile_GetMovementComponent");
static_assert(sizeof(PooledProjectile_GetMovementComponent) == 0x000008, "Wrong size on PooledProjectile_GetMovementComponent");
static_assert(offsetof(PooledProjectile_GetMovementComponent, ReturnValue) == 0x000000, "Member 'PooledProjectile_GetMovementComponent::ReturnValue' has a wrong offset!");

// Function OBJPool.ObjectPool.BeginDeferredSpawnFromPool
// 0x0070 (0x0070 - 0x0000)
struct ObjectPool_BeginDeferredSpawnFromPool final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObjectPool*                            ObjectPool;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 PooledClass;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoolSpawnOptions                      SpawnOptions;                                      // 0x0018(0x0005)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0020(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ESpawnActorCollisionHandlingMethod            CollisionHandlingOverride;                         // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reconstruct;                                       // 0x0060(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpawnSuccessful;                                   // 0x0061(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APooledActor*                           ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPool_BeginDeferredSpawnFromPool) == 0x000010, "Wrong alignment on ObjectPool_BeginDeferredSpawnFromPool");
static_assert(sizeof(ObjectPool_BeginDeferredSpawnFromPool) == 0x000070, "Wrong size on ObjectPool_BeginDeferredSpawnFromPool");
static_assert(offsetof(ObjectPool_BeginDeferredSpawnFromPool, WorldContextObject) == 0x000000, "Member 'ObjectPool_BeginDeferredSpawnFromPool::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ObjectPool_BeginDeferredSpawnFromPool, ObjectPool) == 0x000008, "Member 'ObjectPool_BeginDeferredSpawnFromPool::ObjectPool' has a wrong offset!");
static_assert(offsetof(ObjectPool_BeginDeferredSpawnFromPool, PooledClass) == 0x000010, "Member 'ObjectPool_BeginDeferredSpawnFromPool::PooledClass' has a wrong offset!");
static_assert(offsetof(ObjectPool_BeginDeferredSpawnFromPool, SpawnOptions) == 0x000018, "Member 'ObjectPool_BeginDeferredSpawnFromPool::SpawnOptions' has a wrong offset!");
static_assert(offsetof(ObjectPool_BeginDeferredSpawnFromPool, SpawnTransform) == 0x000020, "Member 'ObjectPool_BeginDeferredSpawnFromPool::SpawnTransform' has a wrong offset!");
static_assert(offsetof(ObjectPool_BeginDeferredSpawnFromPool, CollisionHandlingOverride) == 0x000050, "Member 'ObjectPool_BeginDeferredSpawnFromPool::CollisionHandlingOverride' has a wrong offset!");
static_assert(offsetof(ObjectPool_BeginDeferredSpawnFromPool, Owner) == 0x000058, "Member 'ObjectPool_BeginDeferredSpawnFromPool::Owner' has a wrong offset!");
static_assert(offsetof(ObjectPool_BeginDeferredSpawnFromPool, Reconstruct) == 0x000060, "Member 'ObjectPool_BeginDeferredSpawnFromPool::Reconstruct' has a wrong offset!");
static_assert(offsetof(ObjectPool_BeginDeferredSpawnFromPool, SpawnSuccessful) == 0x000061, "Member 'ObjectPool_BeginDeferredSpawnFromPool::SpawnSuccessful' has a wrong offset!");
static_assert(offsetof(ObjectPool_BeginDeferredSpawnFromPool, ReturnValue) == 0x000068, "Member 'ObjectPool_BeginDeferredSpawnFromPool::ReturnValue' has a wrong offset!");

// Function OBJPool.ObjectPool.FinishDeferredSpawnFromPool
// 0x0050 (0x0050 - 0x0000)
struct ObjectPool_FinishDeferredSpawnFromPool final
{
public:
	class APooledActor*                           Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reconstruct;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class APooledActor*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ObjectPool_FinishDeferredSpawnFromPool) == 0x000010, "Wrong alignment on ObjectPool_FinishDeferredSpawnFromPool");
static_assert(sizeof(ObjectPool_FinishDeferredSpawnFromPool) == 0x000050, "Wrong size on ObjectPool_FinishDeferredSpawnFromPool");
static_assert(offsetof(ObjectPool_FinishDeferredSpawnFromPool, Actor) == 0x000000, "Member 'ObjectPool_FinishDeferredSpawnFromPool::Actor' has a wrong offset!");
static_assert(offsetof(ObjectPool_FinishDeferredSpawnFromPool, Reconstruct) == 0x000008, "Member 'ObjectPool_FinishDeferredSpawnFromPool::Reconstruct' has a wrong offset!");
static_assert(offsetof(ObjectPool_FinishDeferredSpawnFromPool, SpawnTransform) == 0x000010, "Member 'ObjectPool_FinishDeferredSpawnFromPool::SpawnTransform' has a wrong offset!");
static_assert(offsetof(ObjectPool_FinishDeferredSpawnFromPool, ReturnValue) == 0x000040, "Member 'ObjectPool_FinishDeferredSpawnFromPool::ReturnValue' has a wrong offset!");

// Function OBJPool.ObjectPool.GetInactiveObjects
// 0x0010 (0x0010 - 0x0000)
struct ObjectPool_GetInactiveObjects final
{
public:
	TArray<class APooledActor*>                   Inactive;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPool_GetInactiveObjects) == 0x000008, "Wrong alignment on ObjectPool_GetInactiveObjects");
static_assert(sizeof(ObjectPool_GetInactiveObjects) == 0x000010, "Wrong size on ObjectPool_GetInactiveObjects");
static_assert(offsetof(ObjectPool_GetInactiveObjects, Inactive) == 0x000000, "Member 'ObjectPool_GetInactiveObjects::Inactive' has a wrong offset!");

// Function OBJPool.ObjectPool.GetObjectsFromPool
// 0x0020 (0x0020 - 0x0000)
struct ObjectPool_GetObjectsFromPool final
{
public:
	TArray<class APooledActor*>                   Spawned;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class APooledActor*>                   Inactive;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPool_GetObjectsFromPool) == 0x000008, "Wrong alignment on ObjectPool_GetObjectsFromPool");
static_assert(sizeof(ObjectPool_GetObjectsFromPool) == 0x000020, "Wrong size on ObjectPool_GetObjectsFromPool");
static_assert(offsetof(ObjectPool_GetObjectsFromPool, Spawned) == 0x000000, "Member 'ObjectPool_GetObjectsFromPool::Spawned' has a wrong offset!");
static_assert(offsetof(ObjectPool_GetObjectsFromPool, Inactive) == 0x000010, "Member 'ObjectPool_GetObjectsFromPool::Inactive' has a wrong offset!");

// Function OBJPool.ObjectPool.GetSpawnedObjects
// 0x0010 (0x0010 - 0x0000)
struct ObjectPool_GetSpawnedObjects final
{
public:
	TArray<class APooledActor*>                   Spawned;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPool_GetSpawnedObjects) == 0x000008, "Wrong alignment on ObjectPool_GetSpawnedObjects");
static_assert(sizeof(ObjectPool_GetSpawnedObjects) == 0x000010, "Wrong size on ObjectPool_GetSpawnedObjects");
static_assert(offsetof(ObjectPool_GetSpawnedObjects, Spawned) == 0x000000, "Member 'ObjectPool_GetSpawnedObjects::Spawned' has a wrong offset!");

// Function OBJPool.ObjectPool.InitializeObjectPoolWithNewTemplateClass
// 0x0010 (0x0010 - 0x0000)
struct ObjectPool_InitializeObjectPoolWithNewTemplateClass final
{
public:
	TSubclassOf<class APooledActor>               Template;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeOfPool;                                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ObjectPool_InitializeObjectPoolWithNewTemplateClass) == 0x000008, "Wrong alignment on ObjectPool_InitializeObjectPoolWithNewTemplateClass");
static_assert(sizeof(ObjectPool_InitializeObjectPoolWithNewTemplateClass) == 0x000010, "Wrong size on ObjectPool_InitializeObjectPoolWithNewTemplateClass");
static_assert(offsetof(ObjectPool_InitializeObjectPoolWithNewTemplateClass, Template) == 0x000000, "Member 'ObjectPool_InitializeObjectPoolWithNewTemplateClass::Template' has a wrong offset!");
static_assert(offsetof(ObjectPool_InitializeObjectPoolWithNewTemplateClass, SizeOfPool) == 0x000008, "Member 'ObjectPool_InitializeObjectPoolWithNewTemplateClass::SizeOfPool' has a wrong offset!");

// Function OBJPool.ObjectPool.ReturnActor
// 0x0008 (0x0008 - 0x0000)
struct ObjectPool_ReturnActor final
{
public:
	class APooledActor*                           PooledActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPool_ReturnActor) == 0x000008, "Wrong alignment on ObjectPool_ReturnActor");
static_assert(sizeof(ObjectPool_ReturnActor) == 0x000008, "Wrong size on ObjectPool_ReturnActor");
static_assert(offsetof(ObjectPool_ReturnActor, PooledActor) == 0x000000, "Member 'ObjectPool_ReturnActor::PooledActor' has a wrong offset!");

// Function OBJPool.ObjectPool.GetInactiveObject
// 0x0008 (0x0008 - 0x0000)
struct ObjectPool_GetInactiveObject final
{
public:
	class APooledActor*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPool_GetInactiveObject) == 0x000008, "Wrong alignment on ObjectPool_GetInactiveObject");
static_assert(sizeof(ObjectPool_GetInactiveObject) == 0x000008, "Wrong size on ObjectPool_GetInactiveObject");
static_assert(offsetof(ObjectPool_GetInactiveObject, ReturnValue) == 0x000000, "Member 'ObjectPool_GetInactiveObject::ReturnValue' has a wrong offset!");

// Function OBJPool.ObjectPool.GetObjectArray
// 0x0010 (0x0010 - 0x0000)
struct ObjectPool_GetObjectArray final
{
public:
	TArray<class APooledActor*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPool_GetObjectArray) == 0x000008, "Wrong alignment on ObjectPool_GetObjectArray");
static_assert(sizeof(ObjectPool_GetObjectArray) == 0x000010, "Wrong size on ObjectPool_GetObjectArray");
static_assert(offsetof(ObjectPool_GetObjectArray, ReturnValue) == 0x000000, "Member 'ObjectPool_GetObjectArray::ReturnValue' has a wrong offset!");

// Function OBJPool.ObjectPool.GetSpawnedObject
// 0x0008 (0x0008 - 0x0000)
struct ObjectPool_GetSpawnedObject final
{
public:
	class APooledActor*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPool_GetSpawnedObject) == 0x000008, "Wrong alignment on ObjectPool_GetSpawnedObject");
static_assert(sizeof(ObjectPool_GetSpawnedObject) == 0x000008, "Wrong size on ObjectPool_GetSpawnedObject");
static_assert(offsetof(ObjectPool_GetSpawnedObject, ReturnValue) == 0x000000, "Member 'ObjectPool_GetSpawnedObject::ReturnValue' has a wrong offset!");

// Function OBJPool.PawnPool.BeginDeferredSpawnFromPool
// 0x0070 (0x0070 - 0x0000)
struct PawnPool_BeginDeferredSpawnFromPool final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPawnPool*                              ObjectPool;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 PooledClass;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoolSpawnOptions                      SpawnOptions;                                      // 0x0018(0x0005)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0020(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ESpawnActorCollisionHandlingMethod            CollisionHandlingOverride;                         // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reconstruct;                                       // 0x0060(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpawnSuccessful;                                   // 0x0061(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APooledPawn*                            ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PawnPool_BeginDeferredSpawnFromPool) == 0x000010, "Wrong alignment on PawnPool_BeginDeferredSpawnFromPool");
static_assert(sizeof(PawnPool_BeginDeferredSpawnFromPool) == 0x000070, "Wrong size on PawnPool_BeginDeferredSpawnFromPool");
static_assert(offsetof(PawnPool_BeginDeferredSpawnFromPool, WorldContextObject) == 0x000000, "Member 'PawnPool_BeginDeferredSpawnFromPool::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PawnPool_BeginDeferredSpawnFromPool, ObjectPool) == 0x000008, "Member 'PawnPool_BeginDeferredSpawnFromPool::ObjectPool' has a wrong offset!");
static_assert(offsetof(PawnPool_BeginDeferredSpawnFromPool, PooledClass) == 0x000010, "Member 'PawnPool_BeginDeferredSpawnFromPool::PooledClass' has a wrong offset!");
static_assert(offsetof(PawnPool_BeginDeferredSpawnFromPool, SpawnOptions) == 0x000018, "Member 'PawnPool_BeginDeferredSpawnFromPool::SpawnOptions' has a wrong offset!");
static_assert(offsetof(PawnPool_BeginDeferredSpawnFromPool, SpawnTransform) == 0x000020, "Member 'PawnPool_BeginDeferredSpawnFromPool::SpawnTransform' has a wrong offset!");
static_assert(offsetof(PawnPool_BeginDeferredSpawnFromPool, CollisionHandlingOverride) == 0x000050, "Member 'PawnPool_BeginDeferredSpawnFromPool::CollisionHandlingOverride' has a wrong offset!");
static_assert(offsetof(PawnPool_BeginDeferredSpawnFromPool, Owner) == 0x000058, "Member 'PawnPool_BeginDeferredSpawnFromPool::Owner' has a wrong offset!");
static_assert(offsetof(PawnPool_BeginDeferredSpawnFromPool, Reconstruct) == 0x000060, "Member 'PawnPool_BeginDeferredSpawnFromPool::Reconstruct' has a wrong offset!");
static_assert(offsetof(PawnPool_BeginDeferredSpawnFromPool, SpawnSuccessful) == 0x000061, "Member 'PawnPool_BeginDeferredSpawnFromPool::SpawnSuccessful' has a wrong offset!");
static_assert(offsetof(PawnPool_BeginDeferredSpawnFromPool, ReturnValue) == 0x000068, "Member 'PawnPool_BeginDeferredSpawnFromPool::ReturnValue' has a wrong offset!");

// Function OBJPool.PawnPool.FinishDeferredSpawnFromPool
// 0x0050 (0x0050 - 0x0000)
struct PawnPool_FinishDeferredSpawnFromPool final
{
public:
	class APooledPawn*                            Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reconstruct;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class APooledPawn*                            ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PawnPool_FinishDeferredSpawnFromPool) == 0x000010, "Wrong alignment on PawnPool_FinishDeferredSpawnFromPool");
static_assert(sizeof(PawnPool_FinishDeferredSpawnFromPool) == 0x000050, "Wrong size on PawnPool_FinishDeferredSpawnFromPool");
static_assert(offsetof(PawnPool_FinishDeferredSpawnFromPool, Pawn) == 0x000000, "Member 'PawnPool_FinishDeferredSpawnFromPool::Pawn' has a wrong offset!");
static_assert(offsetof(PawnPool_FinishDeferredSpawnFromPool, Reconstruct) == 0x000008, "Member 'PawnPool_FinishDeferredSpawnFromPool::Reconstruct' has a wrong offset!");
static_assert(offsetof(PawnPool_FinishDeferredSpawnFromPool, SpawnTransform) == 0x000010, "Member 'PawnPool_FinishDeferredSpawnFromPool::SpawnTransform' has a wrong offset!");
static_assert(offsetof(PawnPool_FinishDeferredSpawnFromPool, ReturnValue) == 0x000040, "Member 'PawnPool_FinishDeferredSpawnFromPool::ReturnValue' has a wrong offset!");

// Function OBJPool.PawnPool.GetInactiveObjects
// 0x0010 (0x0010 - 0x0000)
struct PawnPool_GetInactiveObjects final
{
public:
	TArray<class APooledPawn*>                    Inactive;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PawnPool_GetInactiveObjects) == 0x000008, "Wrong alignment on PawnPool_GetInactiveObjects");
static_assert(sizeof(PawnPool_GetInactiveObjects) == 0x000010, "Wrong size on PawnPool_GetInactiveObjects");
static_assert(offsetof(PawnPool_GetInactiveObjects, Inactive) == 0x000000, "Member 'PawnPool_GetInactiveObjects::Inactive' has a wrong offset!");

// Function OBJPool.PawnPool.GetObjectsFromPool
// 0x0020 (0x0020 - 0x0000)
struct PawnPool_GetObjectsFromPool final
{
public:
	TArray<class APooledPawn*>                    Spawned;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class APooledPawn*>                    Inactive;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PawnPool_GetObjectsFromPool) == 0x000008, "Wrong alignment on PawnPool_GetObjectsFromPool");
static_assert(sizeof(PawnPool_GetObjectsFromPool) == 0x000020, "Wrong size on PawnPool_GetObjectsFromPool");
static_assert(offsetof(PawnPool_GetObjectsFromPool, Spawned) == 0x000000, "Member 'PawnPool_GetObjectsFromPool::Spawned' has a wrong offset!");
static_assert(offsetof(PawnPool_GetObjectsFromPool, Inactive) == 0x000010, "Member 'PawnPool_GetObjectsFromPool::Inactive' has a wrong offset!");

// Function OBJPool.PawnPool.GetSpawnedObjects
// 0x0010 (0x0010 - 0x0000)
struct PawnPool_GetSpawnedObjects final
{
public:
	TArray<class APooledPawn*>                    Spawned;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PawnPool_GetSpawnedObjects) == 0x000008, "Wrong alignment on PawnPool_GetSpawnedObjects");
static_assert(sizeof(PawnPool_GetSpawnedObjects) == 0x000010, "Wrong size on PawnPool_GetSpawnedObjects");
static_assert(offsetof(PawnPool_GetSpawnedObjects, Spawned) == 0x000000, "Member 'PawnPool_GetSpawnedObjects::Spawned' has a wrong offset!");

// Function OBJPool.PawnPool.InitializeObjectPoolWithNewTemplateClass
// 0x0010 (0x0010 - 0x0000)
struct PawnPool_InitializeObjectPoolWithNewTemplateClass final
{
public:
	TSubclassOf<class APooledPawn>                Template;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeOfPool;                                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PawnPool_InitializeObjectPoolWithNewTemplateClass) == 0x000008, "Wrong alignment on PawnPool_InitializeObjectPoolWithNewTemplateClass");
static_assert(sizeof(PawnPool_InitializeObjectPoolWithNewTemplateClass) == 0x000010, "Wrong size on PawnPool_InitializeObjectPoolWithNewTemplateClass");
static_assert(offsetof(PawnPool_InitializeObjectPoolWithNewTemplateClass, Template) == 0x000000, "Member 'PawnPool_InitializeObjectPoolWithNewTemplateClass::Template' has a wrong offset!");
static_assert(offsetof(PawnPool_InitializeObjectPoolWithNewTemplateClass, SizeOfPool) == 0x000008, "Member 'PawnPool_InitializeObjectPoolWithNewTemplateClass::SizeOfPool' has a wrong offset!");

// Function OBJPool.PawnPool.ReturnActor
// 0x0008 (0x0008 - 0x0000)
struct PawnPool_ReturnActor final
{
public:
	class APooledPawn*                            PooledActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PawnPool_ReturnActor) == 0x000008, "Wrong alignment on PawnPool_ReturnActor");
static_assert(sizeof(PawnPool_ReturnActor) == 0x000008, "Wrong size on PawnPool_ReturnActor");
static_assert(offsetof(PawnPool_ReturnActor, PooledActor) == 0x000000, "Member 'PawnPool_ReturnActor::PooledActor' has a wrong offset!");

// Function OBJPool.PawnPool.GetInactiveObject
// 0x0008 (0x0008 - 0x0000)
struct PawnPool_GetInactiveObject final
{
public:
	class APooledPawn*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PawnPool_GetInactiveObject) == 0x000008, "Wrong alignment on PawnPool_GetInactiveObject");
static_assert(sizeof(PawnPool_GetInactiveObject) == 0x000008, "Wrong size on PawnPool_GetInactiveObject");
static_assert(offsetof(PawnPool_GetInactiveObject, ReturnValue) == 0x000000, "Member 'PawnPool_GetInactiveObject::ReturnValue' has a wrong offset!");

// Function OBJPool.PawnPool.GetObjectArray
// 0x0010 (0x0010 - 0x0000)
struct PawnPool_GetObjectArray final
{
public:
	TArray<class APooledPawn*>                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PawnPool_GetObjectArray) == 0x000008, "Wrong alignment on PawnPool_GetObjectArray");
static_assert(sizeof(PawnPool_GetObjectArray) == 0x000010, "Wrong size on PawnPool_GetObjectArray");
static_assert(offsetof(PawnPool_GetObjectArray, ReturnValue) == 0x000000, "Member 'PawnPool_GetObjectArray::ReturnValue' has a wrong offset!");

// Function OBJPool.PawnPool.GetSpawnedObject
// 0x0008 (0x0008 - 0x0000)
struct PawnPool_GetSpawnedObject final
{
public:
	class APooledPawn*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PawnPool_GetSpawnedObject) == 0x000008, "Wrong alignment on PawnPool_GetSpawnedObject");
static_assert(sizeof(PawnPool_GetSpawnedObject) == 0x000008, "Wrong size on PawnPool_GetSpawnedObject");
static_assert(offsetof(PawnPool_GetSpawnedObject, ReturnValue) == 0x000000, "Member 'PawnPool_GetSpawnedObject::ReturnValue' has a wrong offset!");

// Function OBJPool.CharacterPool.BeginDeferredSpawnFromPool
// 0x0070 (0x0070 - 0x0000)
struct CharacterPool_BeginDeferredSpawnFromPool final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCharacterPool*                         ObjectPool;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 PooledClass;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoolSpawnOptions                      SpawnOptions;                                      // 0x0018(0x0005)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0020(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ESpawnActorCollisionHandlingMethod            CollisionHandlingOverride;                         // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reconstruct;                                       // 0x0060(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpawnSuccessful;                                   // 0x0061(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APooledCharacter*                       ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterPool_BeginDeferredSpawnFromPool) == 0x000010, "Wrong alignment on CharacterPool_BeginDeferredSpawnFromPool");
static_assert(sizeof(CharacterPool_BeginDeferredSpawnFromPool) == 0x000070, "Wrong size on CharacterPool_BeginDeferredSpawnFromPool");
static_assert(offsetof(CharacterPool_BeginDeferredSpawnFromPool, WorldContextObject) == 0x000000, "Member 'CharacterPool_BeginDeferredSpawnFromPool::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterPool_BeginDeferredSpawnFromPool, ObjectPool) == 0x000008, "Member 'CharacterPool_BeginDeferredSpawnFromPool::ObjectPool' has a wrong offset!");
static_assert(offsetof(CharacterPool_BeginDeferredSpawnFromPool, PooledClass) == 0x000010, "Member 'CharacterPool_BeginDeferredSpawnFromPool::PooledClass' has a wrong offset!");
static_assert(offsetof(CharacterPool_BeginDeferredSpawnFromPool, SpawnOptions) == 0x000018, "Member 'CharacterPool_BeginDeferredSpawnFromPool::SpawnOptions' has a wrong offset!");
static_assert(offsetof(CharacterPool_BeginDeferredSpawnFromPool, SpawnTransform) == 0x000020, "Member 'CharacterPool_BeginDeferredSpawnFromPool::SpawnTransform' has a wrong offset!");
static_assert(offsetof(CharacterPool_BeginDeferredSpawnFromPool, CollisionHandlingOverride) == 0x000050, "Member 'CharacterPool_BeginDeferredSpawnFromPool::CollisionHandlingOverride' has a wrong offset!");
static_assert(offsetof(CharacterPool_BeginDeferredSpawnFromPool, Owner) == 0x000058, "Member 'CharacterPool_BeginDeferredSpawnFromPool::Owner' has a wrong offset!");
static_assert(offsetof(CharacterPool_BeginDeferredSpawnFromPool, Reconstruct) == 0x000060, "Member 'CharacterPool_BeginDeferredSpawnFromPool::Reconstruct' has a wrong offset!");
static_assert(offsetof(CharacterPool_BeginDeferredSpawnFromPool, SpawnSuccessful) == 0x000061, "Member 'CharacterPool_BeginDeferredSpawnFromPool::SpawnSuccessful' has a wrong offset!");
static_assert(offsetof(CharacterPool_BeginDeferredSpawnFromPool, ReturnValue) == 0x000068, "Member 'CharacterPool_BeginDeferredSpawnFromPool::ReturnValue' has a wrong offset!");

// Function OBJPool.CharacterPool.FinishDeferredSpawnFromPool
// 0x0050 (0x0050 - 0x0000)
struct CharacterPool_FinishDeferredSpawnFromPool final
{
public:
	class APooledCharacter*                       Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reconstruct;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class APooledCharacter*                       ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterPool_FinishDeferredSpawnFromPool) == 0x000010, "Wrong alignment on CharacterPool_FinishDeferredSpawnFromPool");
static_assert(sizeof(CharacterPool_FinishDeferredSpawnFromPool) == 0x000050, "Wrong size on CharacterPool_FinishDeferredSpawnFromPool");
static_assert(offsetof(CharacterPool_FinishDeferredSpawnFromPool, Character) == 0x000000, "Member 'CharacterPool_FinishDeferredSpawnFromPool::Character' has a wrong offset!");
static_assert(offsetof(CharacterPool_FinishDeferredSpawnFromPool, Reconstruct) == 0x000008, "Member 'CharacterPool_FinishDeferredSpawnFromPool::Reconstruct' has a wrong offset!");
static_assert(offsetof(CharacterPool_FinishDeferredSpawnFromPool, SpawnTransform) == 0x000010, "Member 'CharacterPool_FinishDeferredSpawnFromPool::SpawnTransform' has a wrong offset!");
static_assert(offsetof(CharacterPool_FinishDeferredSpawnFromPool, ReturnValue) == 0x000040, "Member 'CharacterPool_FinishDeferredSpawnFromPool::ReturnValue' has a wrong offset!");

// Function OBJPool.CharacterPool.GetInactiveObjects
// 0x0010 (0x0010 - 0x0000)
struct CharacterPool_GetInactiveObjects final
{
public:
	TArray<class APooledCharacter*>               Inactive;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterPool_GetInactiveObjects) == 0x000008, "Wrong alignment on CharacterPool_GetInactiveObjects");
static_assert(sizeof(CharacterPool_GetInactiveObjects) == 0x000010, "Wrong size on CharacterPool_GetInactiveObjects");
static_assert(offsetof(CharacterPool_GetInactiveObjects, Inactive) == 0x000000, "Member 'CharacterPool_GetInactiveObjects::Inactive' has a wrong offset!");

// Function OBJPool.CharacterPool.GetObjectsFromPool
// 0x0020 (0x0020 - 0x0000)
struct CharacterPool_GetObjectsFromPool final
{
public:
	TArray<class APooledCharacter*>               Spawned;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class APooledCharacter*>               Inactive;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterPool_GetObjectsFromPool) == 0x000008, "Wrong alignment on CharacterPool_GetObjectsFromPool");
static_assert(sizeof(CharacterPool_GetObjectsFromPool) == 0x000020, "Wrong size on CharacterPool_GetObjectsFromPool");
static_assert(offsetof(CharacterPool_GetObjectsFromPool, Spawned) == 0x000000, "Member 'CharacterPool_GetObjectsFromPool::Spawned' has a wrong offset!");
static_assert(offsetof(CharacterPool_GetObjectsFromPool, Inactive) == 0x000010, "Member 'CharacterPool_GetObjectsFromPool::Inactive' has a wrong offset!");

// Function OBJPool.CharacterPool.GetSpawnedObjects
// 0x0010 (0x0010 - 0x0000)
struct CharacterPool_GetSpawnedObjects final
{
public:
	TArray<class APooledCharacter*>               Spawned;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterPool_GetSpawnedObjects) == 0x000008, "Wrong alignment on CharacterPool_GetSpawnedObjects");
static_assert(sizeof(CharacterPool_GetSpawnedObjects) == 0x000010, "Wrong size on CharacterPool_GetSpawnedObjects");
static_assert(offsetof(CharacterPool_GetSpawnedObjects, Spawned) == 0x000000, "Member 'CharacterPool_GetSpawnedObjects::Spawned' has a wrong offset!");

// Function OBJPool.CharacterPool.InitializeObjectPoolWithNewTemplateClass
// 0x0010 (0x0010 - 0x0000)
struct CharacterPool_InitializeObjectPoolWithNewTemplateClass final
{
public:
	TSubclassOf<class APooledCharacter>           Template;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeOfPool;                                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterPool_InitializeObjectPoolWithNewTemplateClass) == 0x000008, "Wrong alignment on CharacterPool_InitializeObjectPoolWithNewTemplateClass");
static_assert(sizeof(CharacterPool_InitializeObjectPoolWithNewTemplateClass) == 0x000010, "Wrong size on CharacterPool_InitializeObjectPoolWithNewTemplateClass");
static_assert(offsetof(CharacterPool_InitializeObjectPoolWithNewTemplateClass, Template) == 0x000000, "Member 'CharacterPool_InitializeObjectPoolWithNewTemplateClass::Template' has a wrong offset!");
static_assert(offsetof(CharacterPool_InitializeObjectPoolWithNewTemplateClass, SizeOfPool) == 0x000008, "Member 'CharacterPool_InitializeObjectPoolWithNewTemplateClass::SizeOfPool' has a wrong offset!");

// Function OBJPool.CharacterPool.ReturnActor
// 0x0008 (0x0008 - 0x0000)
struct CharacterPool_ReturnActor final
{
public:
	class APooledCharacter*                       PooledActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterPool_ReturnActor) == 0x000008, "Wrong alignment on CharacterPool_ReturnActor");
static_assert(sizeof(CharacterPool_ReturnActor) == 0x000008, "Wrong size on CharacterPool_ReturnActor");
static_assert(offsetof(CharacterPool_ReturnActor, PooledActor) == 0x000000, "Member 'CharacterPool_ReturnActor::PooledActor' has a wrong offset!");

// Function OBJPool.CharacterPool.GetInactiveObject
// 0x0008 (0x0008 - 0x0000)
struct CharacterPool_GetInactiveObject final
{
public:
	class APooledCharacter*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterPool_GetInactiveObject) == 0x000008, "Wrong alignment on CharacterPool_GetInactiveObject");
static_assert(sizeof(CharacterPool_GetInactiveObject) == 0x000008, "Wrong size on CharacterPool_GetInactiveObject");
static_assert(offsetof(CharacterPool_GetInactiveObject, ReturnValue) == 0x000000, "Member 'CharacterPool_GetInactiveObject::ReturnValue' has a wrong offset!");

// Function OBJPool.CharacterPool.GetObjectArray
// 0x0010 (0x0010 - 0x0000)
struct CharacterPool_GetObjectArray final
{
public:
	TArray<class APooledCharacter*>               ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterPool_GetObjectArray) == 0x000008, "Wrong alignment on CharacterPool_GetObjectArray");
static_assert(sizeof(CharacterPool_GetObjectArray) == 0x000010, "Wrong size on CharacterPool_GetObjectArray");
static_assert(offsetof(CharacterPool_GetObjectArray, ReturnValue) == 0x000000, "Member 'CharacterPool_GetObjectArray::ReturnValue' has a wrong offset!");

// Function OBJPool.CharacterPool.GetSpawnedObject
// 0x0008 (0x0008 - 0x0000)
struct CharacterPool_GetSpawnedObject final
{
public:
	class APooledCharacter*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterPool_GetSpawnedObject) == 0x000008, "Wrong alignment on CharacterPool_GetSpawnedObject");
static_assert(sizeof(CharacterPool_GetSpawnedObject) == 0x000008, "Wrong size on CharacterPool_GetSpawnedObject");
static_assert(offsetof(CharacterPool_GetSpawnedObject, ReturnValue) == 0x000000, "Member 'CharacterPool_GetSpawnedObject::ReturnValue' has a wrong offset!");

// Function OBJPool.SharedObjectPool.BeginDeferredSpawnFromPool
// 0x0070 (0x0070 - 0x0000)
struct SharedObjectPool_BeginDeferredSpawnFromPool final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USharedObjectPool*                      SharedPool;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 Class_0;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoolSpawnOptions                      SpawnOptions;                                      // 0x0018(0x0005)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0020(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ESpawnActorCollisionHandlingMethod            CollisionHandlingOverride;                         // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reconstruct;                                       // 0x0060(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpawnSuccessful;                                   // 0x0061(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APooledActor*                           ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SharedObjectPool_BeginDeferredSpawnFromPool) == 0x000010, "Wrong alignment on SharedObjectPool_BeginDeferredSpawnFromPool");
static_assert(sizeof(SharedObjectPool_BeginDeferredSpawnFromPool) == 0x000070, "Wrong size on SharedObjectPool_BeginDeferredSpawnFromPool");
static_assert(offsetof(SharedObjectPool_BeginDeferredSpawnFromPool, WorldContextObject) == 0x000000, "Member 'SharedObjectPool_BeginDeferredSpawnFromPool::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SharedObjectPool_BeginDeferredSpawnFromPool, SharedPool) == 0x000008, "Member 'SharedObjectPool_BeginDeferredSpawnFromPool::SharedPool' has a wrong offset!");
static_assert(offsetof(SharedObjectPool_BeginDeferredSpawnFromPool, Class_0) == 0x000010, "Member 'SharedObjectPool_BeginDeferredSpawnFromPool::Class_0' has a wrong offset!");
static_assert(offsetof(SharedObjectPool_BeginDeferredSpawnFromPool, SpawnOptions) == 0x000018, "Member 'SharedObjectPool_BeginDeferredSpawnFromPool::SpawnOptions' has a wrong offset!");
static_assert(offsetof(SharedObjectPool_BeginDeferredSpawnFromPool, SpawnTransform) == 0x000020, "Member 'SharedObjectPool_BeginDeferredSpawnFromPool::SpawnTransform' has a wrong offset!");
static_assert(offsetof(SharedObjectPool_BeginDeferredSpawnFromPool, CollisionHandlingOverride) == 0x000050, "Member 'SharedObjectPool_BeginDeferredSpawnFromPool::CollisionHandlingOverride' has a wrong offset!");
static_assert(offsetof(SharedObjectPool_BeginDeferredSpawnFromPool, Owner) == 0x000058, "Member 'SharedObjectPool_BeginDeferredSpawnFromPool::Owner' has a wrong offset!");
static_assert(offsetof(SharedObjectPool_BeginDeferredSpawnFromPool, Reconstruct) == 0x000060, "Member 'SharedObjectPool_BeginDeferredSpawnFromPool::Reconstruct' has a wrong offset!");
static_assert(offsetof(SharedObjectPool_BeginDeferredSpawnFromPool, SpawnSuccessful) == 0x000061, "Member 'SharedObjectPool_BeginDeferredSpawnFromPool::SpawnSuccessful' has a wrong offset!");
static_assert(offsetof(SharedObjectPool_BeginDeferredSpawnFromPool, ReturnValue) == 0x000068, "Member 'SharedObjectPool_BeginDeferredSpawnFromPool::ReturnValue' has a wrong offset!");

// Function OBJPool.SharedObjectPool.FinishDeferredSpawnFromPool
// 0x0050 (0x0050 - 0x0000)
struct SharedObjectPool_FinishDeferredSpawnFromPool final
{
public:
	class APooledActor*                           Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reconstruct;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class APooledActor*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SharedObjectPool_FinishDeferredSpawnFromPool) == 0x000010, "Wrong alignment on SharedObjectPool_FinishDeferredSpawnFromPool");
static_assert(sizeof(SharedObjectPool_FinishDeferredSpawnFromPool) == 0x000050, "Wrong size on SharedObjectPool_FinishDeferredSpawnFromPool");
static_assert(offsetof(SharedObjectPool_FinishDeferredSpawnFromPool, Actor) == 0x000000, "Member 'SharedObjectPool_FinishDeferredSpawnFromPool::Actor' has a wrong offset!");
static_assert(offsetof(SharedObjectPool_FinishDeferredSpawnFromPool, Reconstruct) == 0x000008, "Member 'SharedObjectPool_FinishDeferredSpawnFromPool::Reconstruct' has a wrong offset!");
static_assert(offsetof(SharedObjectPool_FinishDeferredSpawnFromPool, SpawnTransform) == 0x000010, "Member 'SharedObjectPool_FinishDeferredSpawnFromPool::SpawnTransform' has a wrong offset!");
static_assert(offsetof(SharedObjectPool_FinishDeferredSpawnFromPool, ReturnValue) == 0x000040, "Member 'SharedObjectPool_FinishDeferredSpawnFromPool::ReturnValue' has a wrong offset!");

// Function OBJPool.SharedObjectPool.EmptyObjectPool
// 0x0008 (0x0008 - 0x0000)
struct SharedObjectPool_EmptyObjectPool final
{
public:
	const class UClass*                           Class_0;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SharedObjectPool_EmptyObjectPool) == 0x000008, "Wrong alignment on SharedObjectPool_EmptyObjectPool");
static_assert(sizeof(SharedObjectPool_EmptyObjectPool) == 0x000008, "Wrong size on SharedObjectPool_EmptyObjectPool");
static_assert(offsetof(SharedObjectPool_EmptyObjectPool, Class_0) == 0x000000, "Member 'SharedObjectPool_EmptyObjectPool::Class_0' has a wrong offset!");

// Function OBJPool.SharedObjectPool.GetInactiveObjects
// 0x0018 (0x0018 - 0x0000)
struct SharedObjectPool_GetInactiveObjects final
{
public:
	const class UClass*                           Class_0;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APooledActor*>                   Inactive;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SharedObjectPool_GetInactiveObjects) == 0x000008, "Wrong alignment on SharedObjectPool_GetInactiveObjects");
static_assert(sizeof(SharedObjectPool_GetInactiveObjects) == 0x000018, "Wrong size on SharedObjectPool_GetInactiveObjects");
static_assert(offsetof(SharedObjectPool_GetInactiveObjects, Class_0) == 0x000000, "Member 'SharedObjectPool_GetInactiveObjects::Class_0' has a wrong offset!");
static_assert(offsetof(SharedObjectPool_GetInactiveObjects, Inactive) == 0x000008, "Member 'SharedObjectPool_GetInactiveObjects::Inactive' has a wrong offset!");

// Function OBJPool.SharedObjectPool.GetObjectsFromPool
// 0x0028 (0x0028 - 0x0000)
struct SharedObjectPool_GetObjectsFromPool final
{
public:
	const class UClass*                           Class_0;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APooledActor*>                   Spawned;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class APooledActor*>                   Inactive;                                          // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SharedObjectPool_GetObjectsFromPool) == 0x000008, "Wrong alignment on SharedObjectPool_GetObjectsFromPool");
static_assert(sizeof(SharedObjectPool_GetObjectsFromPool) == 0x000028, "Wrong size on SharedObjectPool_GetObjectsFromPool");
static_assert(offsetof(SharedObjectPool_GetObjectsFromPool, Class_0) == 0x000000, "Member 'SharedObjectPool_GetObjectsFromPool::Class_0' has a wrong offset!");
static_assert(offsetof(SharedObjectPool_GetObjectsFromPool, Spawned) == 0x000008, "Member 'SharedObjectPool_GetObjectsFromPool::Spawned' has a wrong offset!");
static_assert(offsetof(SharedObjectPool_GetObjectsFromPool, Inactive) == 0x000018, "Member 'SharedObjectPool_GetObjectsFromPool::Inactive' has a wrong offset!");

// Function OBJPool.SharedObjectPool.GetSpawnedObjects
// 0x0018 (0x0018 - 0x0000)
struct SharedObjectPool_GetSpawnedObjects final
{
public:
	const class UClass*                           Class_0;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APooledActor*>                   Spawned;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SharedObjectPool_GetSpawnedObjects) == 0x000008, "Wrong alignment on SharedObjectPool_GetSpawnedObjects");
static_assert(sizeof(SharedObjectPool_GetSpawnedObjects) == 0x000018, "Wrong size on SharedObjectPool_GetSpawnedObjects");
static_assert(offsetof(SharedObjectPool_GetSpawnedObjects, Class_0) == 0x000000, "Member 'SharedObjectPool_GetSpawnedObjects::Class_0' has a wrong offset!");
static_assert(offsetof(SharedObjectPool_GetSpawnedObjects, Spawned) == 0x000008, "Member 'SharedObjectPool_GetSpawnedObjects::Spawned' has a wrong offset!");

// Function OBJPool.SharedObjectPool.ReturnActor
// 0x0008 (0x0008 - 0x0000)
struct SharedObjectPool_ReturnActor final
{
public:
	class APooledActor*                           PooledActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SharedObjectPool_ReturnActor) == 0x000008, "Wrong alignment on SharedObjectPool_ReturnActor");
static_assert(sizeof(SharedObjectPool_ReturnActor) == 0x000008, "Wrong size on SharedObjectPool_ReturnActor");
static_assert(offsetof(SharedObjectPool_ReturnActor, PooledActor) == 0x000000, "Member 'SharedObjectPool_ReturnActor::PooledActor' has a wrong offset!");

// Function OBJPool.SharedObjectPool.GetInactiveObject
// 0x0010 (0x0010 - 0x0000)
struct SharedObjectPool_GetInactiveObject final
{
public:
	const class UClass*                           Class_0;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APooledActor*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SharedObjectPool_GetInactiveObject) == 0x000008, "Wrong alignment on SharedObjectPool_GetInactiveObject");
static_assert(sizeof(SharedObjectPool_GetInactiveObject) == 0x000010, "Wrong size on SharedObjectPool_GetInactiveObject");
static_assert(offsetof(SharedObjectPool_GetInactiveObject, Class_0) == 0x000000, "Member 'SharedObjectPool_GetInactiveObject::Class_0' has a wrong offset!");
static_assert(offsetof(SharedObjectPool_GetInactiveObject, ReturnValue) == 0x000008, "Member 'SharedObjectPool_GetInactiveObject::ReturnValue' has a wrong offset!");

// Function OBJPool.SharedObjectPool.GetObjectArray
// 0x0010 (0x0010 - 0x0000)
struct SharedObjectPool_GetObjectArray final
{
public:
	TArray<class APooledActor*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SharedObjectPool_GetObjectArray) == 0x000008, "Wrong alignment on SharedObjectPool_GetObjectArray");
static_assert(sizeof(SharedObjectPool_GetObjectArray) == 0x000010, "Wrong size on SharedObjectPool_GetObjectArray");
static_assert(offsetof(SharedObjectPool_GetObjectArray, ReturnValue) == 0x000000, "Member 'SharedObjectPool_GetObjectArray::ReturnValue' has a wrong offset!");

// Function OBJPool.SharedObjectPool.GetSpawnedObject
// 0x0010 (0x0010 - 0x0000)
struct SharedObjectPool_GetSpawnedObject final
{
public:
	const class UClass*                           Class_0;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APooledActor*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SharedObjectPool_GetSpawnedObject) == 0x000008, "Wrong alignment on SharedObjectPool_GetSpawnedObject");
static_assert(sizeof(SharedObjectPool_GetSpawnedObject) == 0x000010, "Wrong size on SharedObjectPool_GetSpawnedObject");
static_assert(offsetof(SharedObjectPool_GetSpawnedObject, Class_0) == 0x000000, "Member 'SharedObjectPool_GetSpawnedObject::Class_0' has a wrong offset!");
static_assert(offsetof(SharedObjectPool_GetSpawnedObject, ReturnValue) == 0x000008, "Member 'SharedObjectPool_GetSpawnedObject::ReturnValue' has a wrong offset!");

// Function OBJPool.PooledActor.SetLifeSpanPool
// 0x0004 (0x0004 - 0x0000)
struct PooledActor_SetLifeSpanPool final
{
public:
	float                                         InLifespan;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PooledActor_SetLifeSpanPool) == 0x000004, "Wrong alignment on PooledActor_SetLifeSpanPool");
static_assert(sizeof(PooledActor_SetLifeSpanPool) == 0x000004, "Wrong size on PooledActor_SetLifeSpanPool");
static_assert(offsetof(PooledActor_SetLifeSpanPool, InLifespan) == 0x000000, "Member 'PooledActor_SetLifeSpanPool::InLifespan' has a wrong offset!");

// Function OBJPool.PooledActor.SpawnFromPool
// 0x0040 (0x0040 - 0x0000)
struct PooledActor_SpawnFromPool final
{
public:
	bool                                          Reconstruct;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoolSpawnOptions                      SpawnOptions;                                      // 0x0001(0x0005)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0xA];                                        // 0x0006(0x000A)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PooledActor_SpawnFromPool) == 0x000010, "Wrong alignment on PooledActor_SpawnFromPool");
static_assert(sizeof(PooledActor_SpawnFromPool) == 0x000040, "Wrong size on PooledActor_SpawnFromPool");
static_assert(offsetof(PooledActor_SpawnFromPool, Reconstruct) == 0x000000, "Member 'PooledActor_SpawnFromPool::Reconstruct' has a wrong offset!");
static_assert(offsetof(PooledActor_SpawnFromPool, SpawnOptions) == 0x000001, "Member 'PooledActor_SpawnFromPool::SpawnOptions' has a wrong offset!");
static_assert(offsetof(PooledActor_SpawnFromPool, SpawnTransform) == 0x000010, "Member 'PooledActor_SpawnFromPool::SpawnTransform' has a wrong offset!");

// Function OBJPool.PooledActor.GetLifeSpanPool
// 0x0004 (0x0004 - 0x0000)
struct PooledActor_GetLifeSpanPool final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PooledActor_GetLifeSpanPool) == 0x000004, "Wrong alignment on PooledActor_GetLifeSpanPool");
static_assert(sizeof(PooledActor_GetLifeSpanPool) == 0x000004, "Wrong size on PooledActor_GetLifeSpanPool");
static_assert(offsetof(PooledActor_GetLifeSpanPool, ReturnValue) == 0x000000, "Member 'PooledActor_GetLifeSpanPool::ReturnValue' has a wrong offset!");

// Function OBJPool.PooledActor.GetOwningPool
// 0x0008 (0x0008 - 0x0000)
struct PooledActor_GetOwningPool final
{
public:
	class UObjectPool*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PooledActor_GetOwningPool) == 0x000008, "Wrong alignment on PooledActor_GetOwningPool");
static_assert(sizeof(PooledActor_GetOwningPool) == 0x000008, "Wrong size on PooledActor_GetOwningPool");
static_assert(offsetof(PooledActor_GetOwningPool, ReturnValue) == 0x000000, "Member 'PooledActor_GetOwningPool::ReturnValue' has a wrong offset!");

// Function OBJPool.PooledActor.GetSharedPool
// 0x0008 (0x0008 - 0x0000)
struct PooledActor_GetSharedPool final
{
public:
	class USharedObjectPool*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PooledActor_GetSharedPool) == 0x000008, "Wrong alignment on PooledActor_GetSharedPool");
static_assert(sizeof(PooledActor_GetSharedPool) == 0x000008, "Wrong size on PooledActor_GetSharedPool");
static_assert(offsetof(PooledActor_GetSharedPool, ReturnValue) == 0x000000, "Member 'PooledActor_GetSharedPool::ReturnValue' has a wrong offset!");

// Function OBJPool.PooledCharacter.SetLifeSpanPool
// 0x0004 (0x0004 - 0x0000)
struct PooledCharacter_SetLifeSpanPool final
{
public:
	float                                         InLifespan;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PooledCharacter_SetLifeSpanPool) == 0x000004, "Wrong alignment on PooledCharacter_SetLifeSpanPool");
static_assert(sizeof(PooledCharacter_SetLifeSpanPool) == 0x000004, "Wrong size on PooledCharacter_SetLifeSpanPool");
static_assert(offsetof(PooledCharacter_SetLifeSpanPool, InLifespan) == 0x000000, "Member 'PooledCharacter_SetLifeSpanPool::InLifespan' has a wrong offset!");

// Function OBJPool.PooledCharacter.SpawnFromPool
// 0x0040 (0x0040 - 0x0000)
struct PooledCharacter_SpawnFromPool final
{
public:
	bool                                          Reconstruct;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoolSpawnOptions                      SpawnOptions;                                      // 0x0001(0x0005)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0xA];                                        // 0x0006(0x000A)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PooledCharacter_SpawnFromPool) == 0x000010, "Wrong alignment on PooledCharacter_SpawnFromPool");
static_assert(sizeof(PooledCharacter_SpawnFromPool) == 0x000040, "Wrong size on PooledCharacter_SpawnFromPool");
static_assert(offsetof(PooledCharacter_SpawnFromPool, Reconstruct) == 0x000000, "Member 'PooledCharacter_SpawnFromPool::Reconstruct' has a wrong offset!");
static_assert(offsetof(PooledCharacter_SpawnFromPool, SpawnOptions) == 0x000001, "Member 'PooledCharacter_SpawnFromPool::SpawnOptions' has a wrong offset!");
static_assert(offsetof(PooledCharacter_SpawnFromPool, SpawnTransform) == 0x000010, "Member 'PooledCharacter_SpawnFromPool::SpawnTransform' has a wrong offset!");

// Function OBJPool.PooledCharacter.GetLifeSpanPool
// 0x0004 (0x0004 - 0x0000)
struct PooledCharacter_GetLifeSpanPool final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PooledCharacter_GetLifeSpanPool) == 0x000004, "Wrong alignment on PooledCharacter_GetLifeSpanPool");
static_assert(sizeof(PooledCharacter_GetLifeSpanPool) == 0x000004, "Wrong size on PooledCharacter_GetLifeSpanPool");
static_assert(offsetof(PooledCharacter_GetLifeSpanPool, ReturnValue) == 0x000000, "Member 'PooledCharacter_GetLifeSpanPool::ReturnValue' has a wrong offset!");

// Function OBJPool.PooledCharacter.GetOwningPool
// 0x0008 (0x0008 - 0x0000)
struct PooledCharacter_GetOwningPool final
{
public:
	class UCharacterPool*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PooledCharacter_GetOwningPool) == 0x000008, "Wrong alignment on PooledCharacter_GetOwningPool");
static_assert(sizeof(PooledCharacter_GetOwningPool) == 0x000008, "Wrong size on PooledCharacter_GetOwningPool");
static_assert(offsetof(PooledCharacter_GetOwningPool, ReturnValue) == 0x000000, "Member 'PooledCharacter_GetOwningPool::ReturnValue' has a wrong offset!");

// Function OBJPool.PooledPawn.SetLifeSpanPool
// 0x0004 (0x0004 - 0x0000)
struct PooledPawn_SetLifeSpanPool final
{
public:
	float                                         InLifespan;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PooledPawn_SetLifeSpanPool) == 0x000004, "Wrong alignment on PooledPawn_SetLifeSpanPool");
static_assert(sizeof(PooledPawn_SetLifeSpanPool) == 0x000004, "Wrong size on PooledPawn_SetLifeSpanPool");
static_assert(offsetof(PooledPawn_SetLifeSpanPool, InLifespan) == 0x000000, "Member 'PooledPawn_SetLifeSpanPool::InLifespan' has a wrong offset!");

// Function OBJPool.PooledPawn.SpawnFromPool
// 0x0040 (0x0040 - 0x0000)
struct PooledPawn_SpawnFromPool final
{
public:
	bool                                          Reconstruct;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoolSpawnOptions                      SpawnOptions;                                      // 0x0001(0x0005)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0xA];                                        // 0x0006(0x000A)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PooledPawn_SpawnFromPool) == 0x000010, "Wrong alignment on PooledPawn_SpawnFromPool");
static_assert(sizeof(PooledPawn_SpawnFromPool) == 0x000040, "Wrong size on PooledPawn_SpawnFromPool");
static_assert(offsetof(PooledPawn_SpawnFromPool, Reconstruct) == 0x000000, "Member 'PooledPawn_SpawnFromPool::Reconstruct' has a wrong offset!");
static_assert(offsetof(PooledPawn_SpawnFromPool, SpawnOptions) == 0x000001, "Member 'PooledPawn_SpawnFromPool::SpawnOptions' has a wrong offset!");
static_assert(offsetof(PooledPawn_SpawnFromPool, SpawnTransform) == 0x000010, "Member 'PooledPawn_SpawnFromPool::SpawnTransform' has a wrong offset!");

// Function OBJPool.PooledPawn.GetLifeSpanPool
// 0x0004 (0x0004 - 0x0000)
struct PooledPawn_GetLifeSpanPool final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PooledPawn_GetLifeSpanPool) == 0x000004, "Wrong alignment on PooledPawn_GetLifeSpanPool");
static_assert(sizeof(PooledPawn_GetLifeSpanPool) == 0x000004, "Wrong size on PooledPawn_GetLifeSpanPool");
static_assert(offsetof(PooledPawn_GetLifeSpanPool, ReturnValue) == 0x000000, "Member 'PooledPawn_GetLifeSpanPool::ReturnValue' has a wrong offset!");

// Function OBJPool.PooledPawn.GetOwningPool
// 0x0008 (0x0008 - 0x0000)
struct PooledPawn_GetOwningPool final
{
public:
	class UPawnPool*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PooledPawn_GetOwningPool) == 0x000008, "Wrong alignment on PooledPawn_GetOwningPool");
static_assert(sizeof(PooledPawn_GetOwningPool) == 0x000008, "Wrong size on PooledPawn_GetOwningPool");
static_assert(offsetof(PooledPawn_GetOwningPool, ReturnValue) == 0x000000, "Member 'PooledPawn_GetOwningPool::ReturnValue' has a wrong offset!");

// Function OBJPool.PooledSplineProjectile.SetSplineComponent
// 0x0008 (0x0008 - 0x0000)
struct PooledSplineProjectile_SetSplineComponent final
{
public:
	class USplineComponent*                       Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PooledSplineProjectile_SetSplineComponent) == 0x000008, "Wrong alignment on PooledSplineProjectile_SetSplineComponent");
static_assert(sizeof(PooledSplineProjectile_SetSplineComponent) == 0x000008, "Wrong size on PooledSplineProjectile_SetSplineComponent");
static_assert(offsetof(PooledSplineProjectile_SetSplineComponent, Target) == 0x000000, "Member 'PooledSplineProjectile_SetSplineComponent::Target' has a wrong offset!");

// Function OBJPool.PooledSplineProjectile.GetSplineComponent
// 0x0008 (0x0008 - 0x0000)
struct PooledSplineProjectile_GetSplineComponent final
{
public:
	class USplineComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PooledSplineProjectile_GetSplineComponent) == 0x000008, "Wrong alignment on PooledSplineProjectile_GetSplineComponent");
static_assert(sizeof(PooledSplineProjectile_GetSplineComponent) == 0x000008, "Wrong size on PooledSplineProjectile_GetSplineComponent");
static_assert(offsetof(PooledSplineProjectile_GetSplineComponent, ReturnValue) == 0x000000, "Member 'PooledSplineProjectile_GetSplineComponent::ReturnValue' has a wrong offset!");

}

