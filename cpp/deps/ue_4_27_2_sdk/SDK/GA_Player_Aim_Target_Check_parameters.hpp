#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Player_Aim_Target_Check

#include "Basic.hpp"

#include "PiecesGameplayAbilities_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CharacterSize_structs.hpp"
#include "AnimationMontageIdentifier_structs.hpp"
#include "CemeteryCreatureType_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.ExecuteUbergraph_GA_Player_Aim_Target_Check
// 0x03A8 (0x03A8 - 0x0000)
struct GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FGameplayAbilityTargetDataHandle& Data)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityTargetDataHandle       K2Node_CustomEvent_Data_3;                         // 0x0020(0x0028)(ConstParm)
	struct FGameplayAbilityTargetDataHandle       K2Node_CustomEvent_Data_2;                         // 0x0048(0x0028)(ConstParm)
	TDelegate<void(struct FGameplayAbilityTargetDataHandle& Data)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0070(0x0010)(ZeroConstructor, NoDestructor)
	struct FGameplayAbilityTargetDataHandle       Temp_struct_Variable;                              // 0x0080(0x0028)()
	class UAbilityTask_WaitTargetData*            CallFunc_WaitTargetData_ReturnValue;               // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameplayAbilityTargetActor*            CallFunc_BeginSpawningActor_SpawnedActor;          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BeginSpawningActor_ReturnValue;           // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActiveGameplayEffectHandle>    CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue; // 0x00C8(0x0010)(ReferenceParm)
	TArray<class AActor*>                         CallFunc_GetActorsFromTargetData_ReturnValue;      // 0x00D8(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TargetDataHasActor_ReturnValue;           // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CombatInterface_C> K2Node_DynamicCast_AsBPI_Combat_Interface;         // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_aimedAt_return;                           // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityTargetDataHandle       K2Node_CustomEvent_Data_1;                         // 0x0110(0x0028)(ConstParm)
	TDelegate<void(struct FGameplayAbilityTargetDataHandle& Data)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0138(0x0010)(ZeroConstructor, NoDestructor)
	struct FGameplayAbilityTargetDataHandle       K2Node_CustomEvent_Data;                           // 0x0148(0x0028)(ConstParm)
	TDelegate<void(struct FGameplayAbilityTargetDataHandle& Data)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0170(0x0010)(ZeroConstructor, NoDestructor)
	struct FGameplayAbilityTargetDataHandle       Temp_struct_Variable_1;                            // 0x0180(0x0028)()
	class UAbilityTask_WaitTargetData*            CallFunc_WaitTargetData_ReturnValue_1;             // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameplayAbilityTargetActor*            CallFunc_BeginSpawningActor_SpawnedActor_1;        // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BeginSpawningActor_ReturnValue_1;         // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Run_Aim_Assist_On_Target_Data_Target_Met; // 0x01C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(const struct FVector2D& Value, float ElapsedTime, float TriggeredSeconds)> K2Node_CreateDelegate_OutputDelegate_4;            // 0x01C4(0x0010)(ZeroConstructor, NoDestructor)
	struct FVector2D                              K2Node_CustomEvent_value;                          // 0x01D4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_ElapsedTime;                    // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_TriggeredSeconds;               // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_2;                            // 0x01EC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitInputActionTriggered_Vector2D* CallFunc_WaitInputActionTriggered_ReturnValue;     // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_201[0x3];                                      // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSize2D_ReturnValue;                      // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECemeteryCreatureType                         K2Node_Event_CreatureType;                         // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20A[0x2];                                      // 0x020A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_CurrentProgress;                      // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_MaxProgress;                          // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_StartVector;                          // 0x0214(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_EndVector;                            // 0x0220(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_FocusTarget;                          // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_Grapple_Location;                     // 0x0238(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimationMontageIdentifier                   K2Node_Event_Value;                                // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_245[0x3];                                      // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_currentHealthPercentage;              // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCollisionProfileName                  Temp_struct_Variable_3;                            // 0x024C(0x0008)(ConstParm, NoDestructor)
	bool                                          CallFunc_K2_CommitAbility_ReturnValue;             // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_255[0x3];                                      // 0x0255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class AActor>>             K2Node_MakeArray_Array;                            // 0x0258(0x0010)(ReferenceParm)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue; // 0x0268(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FPiecesGameplayTargetDataFilter        K2Node_MakeStruct_PiecesGameplayTargetDataFilter;  // 0x0270(0x0070)()
	struct FCollisionProfileName                  Temp_struct_Variable_4;                            // 0x02E0(0x0008)(ConstParm, NoDestructor)
	struct FGameplayTargetDataFilterHandle        CallFunc_MakePiecesGameplayTargetDataFilterHandle_ReturnValue; // 0x02E8(0x0010)()
	TArray<TSubclassOf<class AActor>>             K2Node_MakeArray_Array_1;                          // 0x02F8(0x0010)(ReferenceParm)
	struct FPiecesGameplayTargetDataFilter        K2Node_MakeStruct_PiecesGameplayTargetDataFilter_1; // 0x0308(0x0070)()
	struct FGameplayTargetDataFilterHandle        CallFunc_MakePiecesGameplayTargetDataFilterHandle_ReturnValue_1; // 0x0378(0x0010)()
	bool                                          CallFunc_IsGamepadLastInputUsed_ReturnValue;       // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_389[0x3];                                      // 0x0389(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x038C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x03A0(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check) == 0x000008, "Wrong alignment on GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check) == 0x0003A8, "Wrong size on GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, EntryPoint) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000004, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_CustomEvent_Data_3) == 0x000020, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_CustomEvent_Data_3' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_CustomEvent_Data_2) == 0x000048, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_CustomEvent_Data_2' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_CreateDelegate_OutputDelegate_1) == 0x000070, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, Temp_struct_Variable) == 0x000080, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_WaitTargetData_ReturnValue) == 0x0000A8, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_WaitTargetData_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_IsValid_ReturnValue) == 0x0000B0, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_BeginSpawningActor_SpawnedActor) == 0x0000B8, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_BeginSpawningActor_SpawnedActor' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_BeginSpawningActor_ReturnValue) == 0x0000C0, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_BeginSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_IsValid_ReturnValue_1) == 0x0000C1, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue) == 0x0000C8, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_GetActorsFromTargetData_ReturnValue) == 0x0000D8, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_GetActorsFromTargetData_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_Array_Get_Item) == 0x0000E8, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_TargetDataHasActor_ReturnValue) == 0x0000F0, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_TargetDataHasActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_DynamicCast_AsBPI_Combat_Interface) == 0x0000F8, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_DynamicCast_AsBPI_Combat_Interface' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_DynamicCast_bSuccess) == 0x000108, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_aimedAt_return) == 0x000109, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_aimedAt_return' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_CustomEvent_Data_1) == 0x000110, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_CustomEvent_Data_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_CreateDelegate_OutputDelegate_2) == 0x000138, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_CustomEvent_Data) == 0x000148, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_CustomEvent_Data' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_CreateDelegate_OutputDelegate_3) == 0x000170, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, Temp_struct_Variable_1) == 0x000180, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_WaitTargetData_ReturnValue_1) == 0x0001A8, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_WaitTargetData_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_IsValid_ReturnValue_2) == 0x0001B0, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_BeginSpawningActor_SpawnedActor_1) == 0x0001B8, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_BeginSpawningActor_SpawnedActor_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_BeginSpawningActor_ReturnValue_1) == 0x0001C0, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_BeginSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_IsValid_ReturnValue_3) == 0x0001C1, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_Run_Aim_Assist_On_Target_Data_Target_Met) == 0x0001C2, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_Run_Aim_Assist_On_Target_Data_Target_Met' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_BooleanAND_ReturnValue) == 0x0001C3, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_CreateDelegate_OutputDelegate_4) == 0x0001C4, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_CustomEvent_value) == 0x0001D4, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_CustomEvent_value' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_CustomEvent_ElapsedTime) == 0x0001DC, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_CustomEvent_ElapsedTime' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_CustomEvent_TriggeredSeconds) == 0x0001E0, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_CustomEvent_TriggeredSeconds' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, Temp_float_Variable) == 0x0001E4, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, Temp_float_Variable_1) == 0x0001E8, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, Temp_struct_Variable_2) == 0x0001EC, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_WaitInputActionTriggered_ReturnValue) == 0x0001F8, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_WaitInputActionTriggered_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_IsValid_ReturnValue_4) == 0x000200, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_VSize2D_ReturnValue) == 0x000204, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_VSize2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000208, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_Event_CreatureType) == 0x000209, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_Event_CreatureType' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_Event_CurrentProgress) == 0x00020C, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_Event_CurrentProgress' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_Event_MaxProgress) == 0x000210, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_Event_MaxProgress' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_Event_StartVector) == 0x000214, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_Event_StartVector' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_Event_EndVector) == 0x000220, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_Event_EndVector' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_Event_FocusTarget) == 0x000230, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_Event_FocusTarget' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_Event_Grapple_Location) == 0x000238, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_Event_Grapple_Location' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_Event_Value) == 0x000244, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_Event_currentHealthPercentage) == 0x000248, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_Event_currentHealthPercentage' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, Temp_struct_Variable_3) == 0x00024C, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_K2_CommitAbility_ReturnValue) == 0x000254, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_K2_CommitAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_MakeArray_Array) == 0x000258, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue) == 0x000268, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_MakeStruct_PiecesGameplayTargetDataFilter) == 0x000270, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_MakeStruct_PiecesGameplayTargetDataFilter' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, Temp_struct_Variable_4) == 0x0002E0, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_MakePiecesGameplayTargetDataFilterHandle_ReturnValue) == 0x0002E8, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_MakePiecesGameplayTargetDataFilterHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_MakeArray_Array_1) == 0x0002F8, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_MakeStruct_PiecesGameplayTargetDataFilter_1) == 0x000308, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_MakeStruct_PiecesGameplayTargetDataFilter_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_MakePiecesGameplayTargetDataFilterHandle_ReturnValue_1) == 0x000378, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_MakePiecesGameplayTargetDataFilterHandle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_IsGamepadLastInputUsed_ReturnValue) == 0x000388, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_IsGamepadLastInputUsed_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, K2Node_CreateDelegate_OutputDelegate_5) == 0x00038C, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0003A0, "Member 'GA_Player_Aim_Target_Check_C_ExecuteUbergraph_GA_Player_Aim_Target_Check::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.updateBossHealthData
// 0x0004 (0x0004 - 0x0000)
struct GA_Player_Aim_Target_Check_C_UpdateBossHealthData final
{
public:
	float                                         CurrentHealthPercentage;                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_UpdateBossHealthData) == 0x000004, "Wrong alignment on GA_Player_Aim_Target_Check_C_UpdateBossHealthData");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_UpdateBossHealthData) == 0x000004, "Wrong size on GA_Player_Aim_Target_Check_C_UpdateBossHealthData");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_UpdateBossHealthData, CurrentHealthPercentage) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_UpdateBossHealthData::CurrentHealthPercentage' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.SetMostSuitableMeleeSection
// 0x0001 (0x0001 - 0x0000)
struct GA_Player_Aim_Target_Check_C_SetMostSuitableMeleeSection final
{
public:
	EAnimationMontageIdentifier                   Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_SetMostSuitableMeleeSection) == 0x000001, "Wrong alignment on GA_Player_Aim_Target_Check_C_SetMostSuitableMeleeSection");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_SetMostSuitableMeleeSection) == 0x000001, "Wrong size on GA_Player_Aim_Target_Check_C_SetMostSuitableMeleeSection");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SetMostSuitableMeleeSection, Value) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_SetMostSuitableMeleeSection::Value' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.MoveToGrappleLocatio
// 0x000C (0x000C - 0x0000)
struct GA_Player_Aim_Target_Check_C_MoveToGrappleLocatio final
{
public:
	struct FVector                                Grapple_Location;                                  // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_MoveToGrappleLocatio) == 0x000004, "Wrong alignment on GA_Player_Aim_Target_Check_C_MoveToGrappleLocatio");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_MoveToGrappleLocatio) == 0x00000C, "Wrong size on GA_Player_Aim_Target_Check_C_MoveToGrappleLocatio");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_MoveToGrappleLocatio, Grapple_Location) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_MoveToGrappleLocatio::Grapple_Location' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.ControlRotationFocus
// 0x0008 (0x0008 - 0x0000)
struct GA_Player_Aim_Target_Check_C_ControlRotationFocus final
{
public:
	class AActor*                                 FocusTarget;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_ControlRotationFocus) == 0x000008, "Wrong alignment on GA_Player_Aim_Target_Check_C_ControlRotationFocus");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_ControlRotationFocus) == 0x000008, "Wrong size on GA_Player_Aim_Target_Check_C_ControlRotationFocus");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ControlRotationFocus, FocusTarget) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_ControlRotationFocus::FocusTarget' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.MeleeAttackTranslate
// 0x0018 (0x0018 - 0x0000)
struct GA_Player_Aim_Target_Check_C_MeleeAttackTranslate final
{
public:
	struct FVector                                StartVector;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndVector;                                         // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_MeleeAttackTranslate) == 0x000004, "Wrong alignment on GA_Player_Aim_Target_Check_C_MeleeAttackTranslate");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_MeleeAttackTranslate) == 0x000018, "Wrong size on GA_Player_Aim_Target_Check_C_MeleeAttackTranslate");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_MeleeAttackTranslate, StartVector) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_MeleeAttackTranslate::StartVector' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_MeleeAttackTranslate, EndVector) == 0x00000C, "Member 'GA_Player_Aim_Target_Check_C_MeleeAttackTranslate::EndVector' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.QuicktimeInput
// 0x0008 (0x0008 - 0x0000)
struct GA_Player_Aim_Target_Check_C_QuicktimeInput final
{
public:
	float                                         CurrentProgress;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxProgress;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_QuicktimeInput) == 0x000004, "Wrong alignment on GA_Player_Aim_Target_Check_C_QuicktimeInput");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_QuicktimeInput) == 0x000008, "Wrong size on GA_Player_Aim_Target_Check_C_QuicktimeInput");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_QuicktimeInput, CurrentProgress) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_QuicktimeInput::CurrentProgress' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_QuicktimeInput, MaxProgress) == 0x000004, "Member 'GA_Player_Aim_Target_Check_C_QuicktimeInput::MaxProgress' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.SetCemeteryCreatureType
// 0x0001 (0x0001 - 0x0000)
struct GA_Player_Aim_Target_Check_C_SetCemeteryCreatureType final
{
public:
	ECemeteryCreatureType                         CreatureType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_SetCemeteryCreatureType) == 0x000001, "Wrong alignment on GA_Player_Aim_Target_Check_C_SetCemeteryCreatureType");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_SetCemeteryCreatureType) == 0x000001, "Wrong size on GA_Player_Aim_Target_Check_C_SetCemeteryCreatureType");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SetCemeteryCreatureType, CreatureType) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_SetCemeteryCreatureType::CreatureType' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.Triggered_006A72AB49E9C46267C83583A97E6534
// 0x0010 (0x0010 - 0x0000)
struct GA_Player_Aim_Target_Check_C_Triggered_006A72AB49E9C46267C83583A97E6534 final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElapsedTime;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TriggeredSeconds;                                  // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_Triggered_006A72AB49E9C46267C83583A97E6534) == 0x000004, "Wrong alignment on GA_Player_Aim_Target_Check_C_Triggered_006A72AB49E9C46267C83583A97E6534");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_Triggered_006A72AB49E9C46267C83583A97E6534) == 0x000010, "Wrong size on GA_Player_Aim_Target_Check_C_Triggered_006A72AB49E9C46267C83583A97E6534");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Triggered_006A72AB49E9C46267C83583A97E6534, Value) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_Triggered_006A72AB49E9C46267C83583A97E6534::Value' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Triggered_006A72AB49E9C46267C83583A97E6534, ElapsedTime) == 0x000008, "Member 'GA_Player_Aim_Target_Check_C_Triggered_006A72AB49E9C46267C83583A97E6534::ElapsedTime' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Triggered_006A72AB49E9C46267C83583A97E6534, TriggeredSeconds) == 0x00000C, "Member 'GA_Player_Aim_Target_Check_C_Triggered_006A72AB49E9C46267C83583A97E6534::TriggeredSeconds' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.ValidData_E0F84E8A4305C51ADA12A6BAD8CDA469
// 0x0028 (0x0028 - 0x0000)
struct GA_Player_Aim_Target_Check_C_ValidData_E0F84E8A4305C51ADA12A6BAD8CDA469 final
{
public:
	struct FGameplayAbilityTargetDataHandle       Data;                                              // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_ValidData_E0F84E8A4305C51ADA12A6BAD8CDA469) == 0x000008, "Wrong alignment on GA_Player_Aim_Target_Check_C_ValidData_E0F84E8A4305C51ADA12A6BAD8CDA469");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_ValidData_E0F84E8A4305C51ADA12A6BAD8CDA469) == 0x000028, "Wrong size on GA_Player_Aim_Target_Check_C_ValidData_E0F84E8A4305C51ADA12A6BAD8CDA469");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ValidData_E0F84E8A4305C51ADA12A6BAD8CDA469, Data) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_ValidData_E0F84E8A4305C51ADA12A6BAD8CDA469::Data' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.Cancelled_E0F84E8A4305C51ADA12A6BAD8CDA469
// 0x0028 (0x0028 - 0x0000)
struct GA_Player_Aim_Target_Check_C_Cancelled_E0F84E8A4305C51ADA12A6BAD8CDA469 final
{
public:
	struct FGameplayAbilityTargetDataHandle       Data;                                              // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_Cancelled_E0F84E8A4305C51ADA12A6BAD8CDA469) == 0x000008, "Wrong alignment on GA_Player_Aim_Target_Check_C_Cancelled_E0F84E8A4305C51ADA12A6BAD8CDA469");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_Cancelled_E0F84E8A4305C51ADA12A6BAD8CDA469) == 0x000028, "Wrong size on GA_Player_Aim_Target_Check_C_Cancelled_E0F84E8A4305C51ADA12A6BAD8CDA469");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Cancelled_E0F84E8A4305C51ADA12A6BAD8CDA469, Data) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_Cancelled_E0F84E8A4305C51ADA12A6BAD8CDA469::Data' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.ValidData_84311F3F44DD37131F18D89ACE2BDDA7
// 0x0028 (0x0028 - 0x0000)
struct GA_Player_Aim_Target_Check_C_ValidData_84311F3F44DD37131F18D89ACE2BDDA7 final
{
public:
	struct FGameplayAbilityTargetDataHandle       Data;                                              // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_ValidData_84311F3F44DD37131F18D89ACE2BDDA7) == 0x000008, "Wrong alignment on GA_Player_Aim_Target_Check_C_ValidData_84311F3F44DD37131F18D89ACE2BDDA7");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_ValidData_84311F3F44DD37131F18D89ACE2BDDA7) == 0x000028, "Wrong size on GA_Player_Aim_Target_Check_C_ValidData_84311F3F44DD37131F18D89ACE2BDDA7");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_ValidData_84311F3F44DD37131F18D89ACE2BDDA7, Data) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_ValidData_84311F3F44DD37131F18D89ACE2BDDA7::Data' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.Cancelled_84311F3F44DD37131F18D89ACE2BDDA7
// 0x0028 (0x0028 - 0x0000)
struct GA_Player_Aim_Target_Check_C_Cancelled_84311F3F44DD37131F18D89ACE2BDDA7 final
{
public:
	struct FGameplayAbilityTargetDataHandle       Data;                                              // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_Cancelled_84311F3F44DD37131F18D89ACE2BDDA7) == 0x000008, "Wrong alignment on GA_Player_Aim_Target_Check_C_Cancelled_84311F3F44DD37131F18D89ACE2BDDA7");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_Cancelled_84311F3F44DD37131F18D89ACE2BDDA7) == 0x000028, "Wrong size on GA_Player_Aim_Target_Check_C_Cancelled_84311F3F44DD37131F18D89ACE2BDDA7");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Cancelled_84311F3F44DD37131F18D89ACE2BDDA7, Data) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_Cancelled_84311F3F44DD37131F18D89ACE2BDDA7::Data' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.TryApplyingAimBlockerForCloseObjects
// 0x0158 (0x0158 - 0x0000)
struct GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects final
{
public:
	struct FGameplayAbilityTargetDataHandle       HitResult;                                         // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FHitResult                             CallFunc_GetHitResultFromTargetData_ReturnValue;   // 0x0028(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 CallFunc_GetOwningActorFromActorInfo_ReturnValue;  // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BA[0x2];                                       // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue;    // 0x0140(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue; // 0x0148(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0152(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0153(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0155(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects) == 0x000008, "Wrong alignment on GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects) == 0x000158, "Wrong size on GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, HitResult) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::HitResult' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_GetHitResultFromTargetData_ReturnValue) == 0x000028, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_GetHitResultFromTargetData_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_GetOwningActorFromActorInfo_ReturnValue) == 0x0000B0, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_GetOwningActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_BreakHitResult_bBlockingHit) == 0x0000B8, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000B9, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_BreakHitResult_Time) == 0x0000BC, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_BreakHitResult_Distance) == 0x0000C0, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_BreakHitResult_Location) == 0x0000C4, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_BreakHitResult_ImpactPoint) == 0x0000D0, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_BreakHitResult_Normal) == 0x0000DC, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_BreakHitResult_ImpactNormal) == 0x0000E8, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_BreakHitResult_PhysMat) == 0x0000F8, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_BreakHitResult_HitActor) == 0x000100, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_BreakHitResult_HitComponent) == 0x000108, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_BreakHitResult_HitBoneName) == 0x000110, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_BreakHitResult_HitItem) == 0x000118, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_BreakHitResult_ElementIndex) == 0x00011C, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_BreakHitResult_FaceIndex) == 0x000120, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_BreakHitResult_TraceStart) == 0x000124, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_BreakHitResult_TraceEnd) == 0x000130, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_GetAbilitySystemComponent_ReturnValue) == 0x000140, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_GetAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue) == 0x000148, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000150, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_IsValid_ReturnValue) == 0x000151, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_IsValid_ReturnValue_1) == 0x000152, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_Less_FloatFloat_ReturnValue) == 0x000153, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_BooleanOR_ReturnValue) == 0x000154, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects, CallFunc_BooleanAND_ReturnValue) == 0x000155, "Member 'GA_Player_Aim_Target_Check_C_TryApplyingAimBlockerForCloseObjects::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.Send Aim At GameplayEvent
// 0x0130 (0x0130 - 0x0000)
struct GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent final
{
public:
	struct FGameplayAbilityTargetDataHandle       InputPin;                                          // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectContextHandle           CallFunc_GetContextFromOwner_ReturnValue;          // 0x0030(0x0018)()
	TArray<class AActor*>                         CallFunc_GetAllActorsFromTargetData_ReturnValue;   // 0x0048(0x0010)(ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     K2Node_MakeStruct_GameplayEventData;               // 0x0080(0x00B0)()
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent) == 0x000008, "Wrong alignment on GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent) == 0x000130, "Wrong size on GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent, InputPin) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent::InputPin' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent, Temp_int_Array_Index_Variable) == 0x000028, "Member 'GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent, CallFunc_GetContextFromOwner_ReturnValue) == 0x000030, "Member 'GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent::CallFunc_GetContextFromOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent, CallFunc_GetAllActorsFromTargetData_ReturnValue) == 0x000048, "Member 'GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent::CallFunc_GetAllActorsFromTargetData_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent, Temp_int_Loop_Counter_Variable) == 0x000058, "Member 'GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent, CallFunc_Array_Get_Item) == 0x000060, "Member 'GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent, CallFunc_Add_IntInt_ReturnValue) == 0x000068, "Member 'GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent, CallFunc_Array_Length_ReturnValue) == 0x00006C, "Member 'GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent, CallFunc_Less_IntInt_ReturnValue) == 0x000070, "Member 'GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000078, "Member 'GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent, K2Node_MakeStruct_GameplayEventData) == 0x000080, "Member 'GA_Player_Aim_Target_Check_C_Send_Aim_At_GameplayEvent::K2Node_MakeStruct_GameplayEventData' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.Run Aim Assist On Target Data
// 0x01B0 (0x01B0 - 0x0000)
struct GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data final
{
public:
	struct FGameplayAbilityTargetDataHandle       Target_Data;                                       // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Target_Met;                                        // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Look_at_Vector;                                    // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetLookAtRotation;                              // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CameraToTargetDotProduct;                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TargetDataHasAnyActor_ReturnValue;        // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Character_Socket_Visible_SocketIsVisible; // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B[0x1];                                       // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Is_Character_Socket_Visible_SocketWorldLocation; // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetCameraLookAtRotationForActor_Look_At_Rotation; // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetCameraLookAtRotationForActor_Look_At_Vector; // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCamera_Angle_Dot_Product_Dot_Product;  // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class AActor*, class FName>              CallFunc_Parse_Visible_Targets_ActorsWithVisibleSockets; // 0x0080(0x0050)()
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x00D0(0x0048)(ContainsInstancedReference)
	float                                         CallFunc_SelectActorWithClosestDotProduct_ReturnValue; // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_SelectActorWithClosestDotProduct_Look_At_Rotation; // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_SelectActorWithClosestDotProduct_Selected_Actor; // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_SelectActorWithClosestDotProduct_Socket_Name; // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectActorWithClosestDotProduct_Look_At_Vector; // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0145(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_146[0x2];                                      // 0x0146(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCamera_Angle_Dot_Product_Dot_Product_1; // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x014D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14E[0x2];                                      // 0x014E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue_1;               // 0x0150(0x0048)(ContainsInstancedReference)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetEasedAimRotation_New_Control_Rotation; // 0x01A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data) == 0x000008, "Wrong alignment on GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data) == 0x0001B0, "Wrong size on GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, Target_Data) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::Target_Data' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, Target_Met) == 0x000028, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::Target_Met' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, Look_at_Vector) == 0x00002C, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::Look_at_Vector' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, TargetLookAtRotation) == 0x000038, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::TargetLookAtRotation' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CameraToTargetDotProduct) == 0x000044, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CameraToTargetDotProduct' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_TargetDataHasAnyActor_ReturnValue) == 0x000048, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_TargetDataHasAnyActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_DoesImplementInterface_ReturnValue) == 0x000049, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_Is_Character_Socket_Visible_SocketIsVisible) == 0x00004A, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_Is_Character_Socket_Visible_SocketIsVisible' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_Is_Character_Socket_Visible_SocketWorldLocation) == 0x00004C, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_Is_Character_Socket_Visible_SocketWorldLocation' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000058, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_GetCameraLookAtRotationForActor_Look_At_Rotation) == 0x00005C, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_GetCameraLookAtRotationForActor_Look_At_Rotation' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_GetCameraLookAtRotationForActor_Look_At_Vector) == 0x000068, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_GetCameraLookAtRotationForActor_Look_At_Vector' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_GetCamera_Angle_Dot_Product_Dot_Product) == 0x000074, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_GetCamera_Angle_Dot_Product_Dot_Product' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_IsValid_ReturnValue) == 0x000078, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_Parse_Visible_Targets_ActorsWithVisibleSockets) == 0x000080, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_Parse_Visible_Targets_ActorsWithVisibleSockets' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_GetActorInfo_ReturnValue) == 0x0000D0, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_SelectActorWithClosestDotProduct_ReturnValue) == 0x000118, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_SelectActorWithClosestDotProduct_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_SelectActorWithClosestDotProduct_Look_At_Rotation) == 0x00011C, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_SelectActorWithClosestDotProduct_Look_At_Rotation' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_SelectActorWithClosestDotProduct_Selected_Actor) == 0x000128, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_SelectActorWithClosestDotProduct_Selected_Actor' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_SelectActorWithClosestDotProduct_Socket_Name) == 0x000130, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_SelectActorWithClosestDotProduct_Socket_Name' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_SelectActorWithClosestDotProduct_Look_At_Vector) == 0x000138, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_SelectActorWithClosestDotProduct_Look_At_Vector' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_IsValid_ReturnValue_1) == 0x000144, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_BooleanAND_ReturnValue) == 0x000145, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_GetCamera_Angle_Dot_Product_Dot_Product_1) == 0x000148, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_GetCamera_Angle_Dot_Product_Dot_Product_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00014C, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x00014D, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_GetActorInfo_ReturnValue_1) == 0x000150, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_GetActorInfo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_GetControlRotation_ReturnValue) == 0x000198, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data, CallFunc_GetEasedAimRotation_New_Control_Rotation) == 0x0001A4, "Member 'GA_Player_Aim_Target_Check_C_Run_Aim_Assist_On_Target_Data::CallFunc_GetEasedAimRotation_New_Control_Rotation' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.Stop Aim Assist
// 0x0001 (0x0001 - 0x0000)
struct GA_Player_Aim_Target_Check_C_Stop_Aim_Assist final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_Stop_Aim_Assist) == 0x000001, "Wrong alignment on GA_Player_Aim_Target_Check_C_Stop_Aim_Assist");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_Stop_Aim_Assist) == 0x000001, "Wrong size on GA_Player_Aim_Target_Check_C_Stop_Aim_Assist");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Stop_Aim_Assist, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_Stop_Aim_Assist::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.Handle Aim Assist Blockage Timer
// 0x0020 (0x0020 - 0x0000)
struct GA_Player_Aim_Target_Check_C_Handle_Aim_Assist_Blockage_Timer final
{
public:
	bool                                          bSocket_Is_Visible;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_Handle_Aim_Assist_Blockage_Timer) == 0x000008, "Wrong alignment on GA_Player_Aim_Target_Check_C_Handle_Aim_Assist_Blockage_Timer");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_Handle_Aim_Assist_Blockage_Timer) == 0x000020, "Wrong size on GA_Player_Aim_Target_Check_C_Handle_Aim_Assist_Blockage_Timer");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Handle_Aim_Assist_Blockage_Timer, bSocket_Is_Visible) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_Handle_Aim_Assist_Blockage_Timer::bSocket_Is_Visible' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Handle_Aim_Assist_Blockage_Timer, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000001, "Member 'GA_Player_Aim_Target_Check_C_Handle_Aim_Assist_Blockage_Timer::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Handle_Aim_Assist_Blockage_Timer, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'GA_Player_Aim_Target_Check_C_Handle_Aim_Assist_Blockage_Timer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Handle_Aim_Assist_Blockage_Timer, CallFunc_Not_PreBool_ReturnValue) == 0x000014, "Member 'GA_Player_Aim_Target_Check_C_Handle_Aim_Assist_Blockage_Timer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Handle_Aim_Assist_Blockage_Timer, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000018, "Member 'GA_Player_Aim_Target_Check_C_Handle_Aim_Assist_Blockage_Timer::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.AimedAt
// 0x0001 (0x0001 - 0x0000)
struct GA_Player_Aim_Target_Check_C_AimedAt final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_AimedAt) == 0x000001, "Wrong alignment on GA_Player_Aim_Target_Check_C_AimedAt");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_AimedAt) == 0x000001, "Wrong size on GA_Player_Aim_Target_Check_C_AimedAt");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_AimedAt, Return) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_AimedAt::Return' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.GetUpgradeComponent
// 0x0008 (0x0008 - 0x0000)
struct GA_Player_Aim_Target_Check_C_GetUpgradeComponent final
{
public:
	class UWeaponUpgradeComponent_C*              UpgradeComponent;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_GetUpgradeComponent) == 0x000008, "Wrong alignment on GA_Player_Aim_Target_Check_C_GetUpgradeComponent");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_GetUpgradeComponent) == 0x000008, "Wrong size on GA_Player_Aim_Target_Check_C_GetUpgradeComponent");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetUpgradeComponent, UpgradeComponent) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_GetUpgradeComponent::UpgradeComponent' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.FlashlightHit
// 0x0008 (0x0008 - 0x0000)
struct GA_Player_Aim_Target_Check_C_FlashlightHit final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_FlashlightHit) == 0x000004, "Wrong alignment on GA_Player_Aim_Target_Check_C_FlashlightHit");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_FlashlightHit) == 0x000008, "Wrong size on GA_Player_Aim_Target_Check_C_FlashlightHit");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_FlashlightHit, Distance) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_FlashlightHit::Distance' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_FlashlightHit, Success) == 0x000004, "Member 'GA_Player_Aim_Target_Check_C_FlashlightHit::Success' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.setStartOnWall
// 0x0002 (0x0002 - 0x0000)
struct GA_Player_Aim_Target_Check_C_SetStartOnWall final
{
public:
	bool                                          StartOnWall;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_SetStartOnWall) == 0x000001, "Wrong alignment on GA_Player_Aim_Target_Check_C_SetStartOnWall");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_SetStartOnWall) == 0x000002, "Wrong size on GA_Player_Aim_Target_Check_C_SetStartOnWall");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SetStartOnWall, StartOnWall) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_SetStartOnWall::StartOnWall' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SetStartOnWall, Success) == 0x000001, "Member 'GA_Player_Aim_Target_Check_C_SetStartOnWall::Success' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.setCanCirculate
// 0x0002 (0x0002 - 0x0000)
struct GA_Player_Aim_Target_Check_C_SetCanCirculate final
{
public:
	bool                                          CanCirculate;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_SetCanCirculate) == 0x000001, "Wrong alignment on GA_Player_Aim_Target_Check_C_SetCanCirculate");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_SetCanCirculate) == 0x000002, "Wrong size on GA_Player_Aim_Target_Check_C_SetCanCirculate");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SetCanCirculate, CanCirculate) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_SetCanCirculate::CanCirculate' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SetCanCirculate, Success) == 0x000001, "Member 'GA_Player_Aim_Target_Check_C_SetCanCirculate::Success' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.getCemeteryCreatureType
// 0x0001 (0x0001 - 0x0000)
struct GA_Player_Aim_Target_Check_C_GetCemeteryCreatureType final
{
public:
	ECemeteryCreatureType                         CemeteryCreatureType;                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_GetCemeteryCreatureType) == 0x000001, "Wrong alignment on GA_Player_Aim_Target_Check_C_GetCemeteryCreatureType");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_GetCemeteryCreatureType) == 0x000001, "Wrong size on GA_Player_Aim_Target_Check_C_GetCemeteryCreatureType");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetCemeteryCreatureType, CemeteryCreatureType) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_GetCemeteryCreatureType::CemeteryCreatureType' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.GetCharacterSize
// 0x0001 (0x0001 - 0x0000)
struct GA_Player_Aim_Target_Check_C_GetCharacterSize final
{
public:
	ECharacterSize                                Size;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_GetCharacterSize) == 0x000001, "Wrong alignment on GA_Player_Aim_Target_Check_C_GetCharacterSize");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_GetCharacterSize) == 0x000001, "Wrong size on GA_Player_Aim_Target_Check_C_GetCharacterSize");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetCharacterSize, Size) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_GetCharacterSize::Size' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.IncrementJac3ProneCounter
// 0x0004 (0x0004 - 0x0000)
struct GA_Player_Aim_Target_Check_C_IncrementJac3ProneCounter final
{
public:
	int32                                         ProneCounter;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_IncrementJac3ProneCounter) == 0x000004, "Wrong alignment on GA_Player_Aim_Target_Check_C_IncrementJac3ProneCounter");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_IncrementJac3ProneCounter) == 0x000004, "Wrong size on GA_Player_Aim_Target_Check_C_IncrementJac3ProneCounter");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_IncrementJac3ProneCounter, ProneCounter) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_IncrementJac3ProneCounter::ProneCounter' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.setNewAggro
// 0x0002 (0x0002 - 0x0000)
struct GA_Player_Aim_Target_Check_C_SetNewAggro final
{
public:
	bool                                          NewAggro;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_SetNewAggro) == 0x000001, "Wrong alignment on GA_Player_Aim_Target_Check_C_SetNewAggro");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_SetNewAggro) == 0x000002, "Wrong size on GA_Player_Aim_Target_Check_C_SetNewAggro");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SetNewAggro, NewAggro) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_SetNewAggro::NewAggro' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SetNewAggro, Success) == 0x000001, "Member 'GA_Player_Aim_Target_Check_C_SetNewAggro::Success' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.getAggroState
// 0x0001 (0x0001 - 0x0000)
struct GA_Player_Aim_Target_Check_C_GetAggroState final
{
public:
	bool                                          Aggro;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_GetAggroState) == 0x000001, "Wrong alignment on GA_Player_Aim_Target_Check_C_GetAggroState");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_GetAggroState) == 0x000001, "Wrong size on GA_Player_Aim_Target_Check_C_GetAggroState");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetAggroState, Aggro) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_GetAggroState::Aggro' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.GetMostSuitableMeleeSection
// 0x0001 (0x0001 - 0x0000)
struct GA_Player_Aim_Target_Check_C_GetMostSuitableMeleeSection final
{
public:
	EAnimationMontageIdentifier                   Value;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_GetMostSuitableMeleeSection) == 0x000001, "Wrong alignment on GA_Player_Aim_Target_Check_C_GetMostSuitableMeleeSection");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_GetMostSuitableMeleeSection) == 0x000001, "Wrong size on GA_Player_Aim_Target_Check_C_GetMostSuitableMeleeSection");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetMostSuitableMeleeSection, Value) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_GetMostSuitableMeleeSection::Value' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.hitscanWeaponFired
// 0x0001 (0x0001 - 0x0000)
struct GA_Player_Aim_Target_Check_C_HitscanWeaponFired final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_HitscanWeaponFired) == 0x000001, "Wrong alignment on GA_Player_Aim_Target_Check_C_HitscanWeaponFired");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_HitscanWeaponFired) == 0x000001, "Wrong size on GA_Player_Aim_Target_Check_C_HitscanWeaponFired");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_HitscanWeaponFired, Success) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_HitscanWeaponFired::Success' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.setOrderTarget
// 0x0010 (0x0010 - 0x0000)
struct GA_Player_Aim_Target_Check_C_SetOrderTarget final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_SetOrderTarget) == 0x000004, "Wrong alignment on GA_Player_Aim_Target_Check_C_SetOrderTarget");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_SetOrderTarget) == 0x000010, "Wrong size on GA_Player_Aim_Target_Check_C_SetOrderTarget");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SetOrderTarget, Location) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_SetOrderTarget::Location' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SetOrderTarget, Success) == 0x00000C, "Member 'GA_Player_Aim_Target_Check_C_SetOrderTarget::Success' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.setStartBurrowed
// 0x0002 (0x0002 - 0x0000)
struct GA_Player_Aim_Target_Check_C_SetStartBurrowed final
{
public:
	bool                                          beginBurrowed;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_SetStartBurrowed) == 0x000001, "Wrong alignment on GA_Player_Aim_Target_Check_C_SetStartBurrowed");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_SetStartBurrowed) == 0x000002, "Wrong size on GA_Player_Aim_Target_Check_C_SetStartBurrowed");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SetStartBurrowed, beginBurrowed) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_SetStartBurrowed::beginBurrowed' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SetStartBurrowed, Success) == 0x000001, "Member 'GA_Player_Aim_Target_Check_C_SetStartBurrowed::Success' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.GetCameraLookAtRotationForActor
// 0x00C8 (0x00C8 - 0x0000)
struct GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor final
{
public:
	class AActor*                                 Look_At_Actor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Aim_Assist_Location;                               // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Look_At_Rotation;                                  // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Look_at_Vector;                                    // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0038(0x0048)(ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor) == 0x000008, "Wrong alignment on GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor) == 0x0000C8, "Wrong size on GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor, Look_At_Actor) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor::Look_At_Actor' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor, Aim_Assist_Location) == 0x000008, "Member 'GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor::Aim_Assist_Location' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor, Look_At_Rotation) == 0x000014, "Member 'GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor::Look_At_Rotation' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor, Look_at_Vector) == 0x000020, "Member 'GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor::Look_at_Vector' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000030, "Member 'GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor, CallFunc_GetActorInfo_ReturnValue) == 0x000038, "Member 'GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000080, "Member 'GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor, CallFunc_GetCameraLocation_ReturnValue) == 0x00008C, "Member 'GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000098, "Member 'GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor, CallFunc_Add_VectorVector_ReturnValue) == 0x0000A4, "Member 'GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor, CallFunc_FindLookAtRotation_ReturnValue) == 0x0000B0, "Member 'GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x0000BC, "Member 'GA_Player_Aim_Target_Check_C_GetCameraLookAtRotationForActor::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.GetCamera Angle Dot Product
// 0x0080 (0x0080 - 0x0000)
struct GA_Player_Aim_Target_Check_C_GetCamera_Angle_Dot_Product final
{
public:
	struct FRotator                               InRot;                                             // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Dot_Product;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0010(0x0048)(ContainsInstancedReference)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_GetCamera_Angle_Dot_Product) == 0x000008, "Wrong alignment on GA_Player_Aim_Target_Check_C_GetCamera_Angle_Dot_Product");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_GetCamera_Angle_Dot_Product) == 0x000080, "Wrong size on GA_Player_Aim_Target_Check_C_GetCamera_Angle_Dot_Product");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetCamera_Angle_Dot_Product, InRot) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_GetCamera_Angle_Dot_Product::InRot' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetCamera_Angle_Dot_Product, Dot_Product) == 0x00000C, "Member 'GA_Player_Aim_Target_Check_C_GetCamera_Angle_Dot_Product::Dot_Product' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetCamera_Angle_Dot_Product, CallFunc_GetActorInfo_ReturnValue) == 0x000010, "Member 'GA_Player_Aim_Target_Check_C_GetCamera_Angle_Dot_Product::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetCamera_Angle_Dot_Product, CallFunc_GetForwardVector_ReturnValue) == 0x000058, "Member 'GA_Player_Aim_Target_Check_C_GetCamera_Angle_Dot_Product::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetCamera_Angle_Dot_Product, CallFunc_GetCameraRotation_ReturnValue) == 0x000064, "Member 'GA_Player_Aim_Target_Check_C_GetCamera_Angle_Dot_Product::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetCamera_Angle_Dot_Product, CallFunc_GetForwardVector_ReturnValue_1) == 0x000070, "Member 'GA_Player_Aim_Target_Check_C_GetCamera_Angle_Dot_Product::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetCamera_Angle_Dot_Product, CallFunc_Dot_VectorVector_ReturnValue) == 0x00007C, "Member 'GA_Player_Aim_Target_Check_C_GetCamera_Angle_Dot_Product::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.SelectActorWithClosestDotProduct
// 0x0130 (0x0130 - 0x0000)
struct GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct final
{
public:
	TMap<class AActor*, class FName>              TargetMap;                                         // 0x0000(0x0050)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Look_At_Rotation;                                  // 0x0054(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 Selected_Actor;                                    // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Socket_Name;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Look_at_Vector;                                    // 0x0070(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Selected_Look_At_Vector;                           // 0x007C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Target_Socket_Name;                                // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor_Selected;                                    // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LookAtRotation;                                    // 0x0098(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Biggest_Dot_Product;                               // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_Map_Keys_Keys;                            // 0x00A8(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IAimAssistInterface>   K2Node_DynamicCast_AsAim_Assist_Interface;         // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class USceneComponent*                  CallFunc_GetAimAssistSocketComponent_ReturnValue;  // 0x00E8(0x0008)(ConstParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Map_Find_Value;                           // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCameraLookAtRotationForActor_Look_At_Rotation; // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetCameraLookAtRotationForActor_Look_At_Vector; // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCamera_Angle_Dot_Product_Dot_Product;  // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct) == 0x000008, "Wrong alignment on GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct) == 0x000130, "Wrong size on GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, TargetMap) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::TargetMap' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, ReturnValue) == 0x000050, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, Look_At_Rotation) == 0x000054, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::Look_At_Rotation' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, Selected_Actor) == 0x000060, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::Selected_Actor' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, Socket_Name) == 0x000068, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::Socket_Name' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, Look_at_Vector) == 0x000070, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::Look_at_Vector' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, Selected_Look_At_Vector) == 0x00007C, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::Selected_Look_At_Vector' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, Target_Socket_Name) == 0x000088, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::Target_Socket_Name' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, Actor_Selected) == 0x000090, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::Actor_Selected' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, LookAtRotation) == 0x000098, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::LookAtRotation' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, Biggest_Dot_Product) == 0x0000A4, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::Biggest_Dot_Product' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, CallFunc_Map_Keys_Keys) == 0x0000A8, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, CallFunc_Array_Length_ReturnValue) == 0x0000B8, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, Temp_int_Array_Index_Variable) == 0x0000BC, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, Temp_int_Loop_Counter_Variable) == 0x0000C0, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, K2Node_DynamicCast_AsAim_Assist_Interface) == 0x0000D0, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::K2Node_DynamicCast_AsAim_Assist_Interface' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, K2Node_DynamicCast_bSuccess) == 0x0000E0, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, CallFunc_GetAimAssistSocketComponent_ReturnValue) == 0x0000E8, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::CallFunc_GetAimAssistSocketComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, CallFunc_Less_IntInt_ReturnValue) == 0x0000F0, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, CallFunc_Add_IntInt_ReturnValue) == 0x0000F4, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, CallFunc_Map_Find_Value) == 0x0000F8, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, CallFunc_Map_Find_ReturnValue) == 0x000100, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, CallFunc_GetSocketLocation_ReturnValue) == 0x000104, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, CallFunc_GetCameraLookAtRotationForActor_Look_At_Rotation) == 0x000110, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::CallFunc_GetCameraLookAtRotationForActor_Look_At_Rotation' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, CallFunc_GetCameraLookAtRotationForActor_Look_At_Vector) == 0x00011C, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::CallFunc_GetCameraLookAtRotationForActor_Look_At_Vector' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, CallFunc_GetCamera_Angle_Dot_Product_Dot_Product) == 0x000128, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::CallFunc_GetCamera_Angle_Dot_Product_Dot_Product' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00012C, "Member 'GA_Player_Aim_Target_Check_C_SelectActorWithClosestDotProduct::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.TargetDataHasAnyActor
// 0x0048 (0x0048 - 0x0000)
struct GA_Player_Aim_Target_Check_C_TargetDataHasAnyActor final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetAllActorsFromTargetData_ReturnValue;   // 0x0030(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_TargetDataHasAnyActor) == 0x000008, "Wrong alignment on GA_Player_Aim_Target_Check_C_TargetDataHasAnyActor");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_TargetDataHasAnyActor) == 0x000048, "Wrong size on GA_Player_Aim_Target_Check_C_TargetDataHasAnyActor");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TargetDataHasAnyActor, TargetData) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_TargetDataHasAnyActor::TargetData' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TargetDataHasAnyActor, ReturnValue) == 0x000028, "Member 'GA_Player_Aim_Target_Check_C_TargetDataHasAnyActor::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TargetDataHasAnyActor, CallFunc_GetAllActorsFromTargetData_ReturnValue) == 0x000030, "Member 'GA_Player_Aim_Target_Check_C_TargetDataHasAnyActor::CallFunc_GetAllActorsFromTargetData_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TargetDataHasAnyActor, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'GA_Player_Aim_Target_Check_C_TargetDataHasAnyActor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_TargetDataHasAnyActor, CallFunc_Greater_IntInt_ReturnValue) == 0x000044, "Member 'GA_Player_Aim_Target_Check_C_TargetDataHasAnyActor::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.Parse Visible Targets
// 0x0100 (0x0100 - 0x0000)
struct GA_Player_Aim_Target_Check_C_Parse_Visible_Targets final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TMap<class AActor*, class FName>              ActorsWithVisibleSockets;                          // 0x0028(0x0050)(Parm, OutParm)
	TMap<class AActor*, class FName>              ActorsWithVisibleSocketMap;                        // 0x0078(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class AActor*>                         CallFunc_GetAllActorsFromTargetData_ReturnValue;   // 0x00C8(0x0010)(ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetActorsVisibleAimSocket_bHasVisisbleSocket; // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EA[0x2];                                       // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetActorsVisibleAimSocket_VisibleSocketName; // 0x00EC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_Parse_Visible_Targets) == 0x000008, "Wrong alignment on GA_Player_Aim_Target_Check_C_Parse_Visible_Targets");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_Parse_Visible_Targets) == 0x000100, "Wrong size on GA_Player_Aim_Target_Check_C_Parse_Visible_Targets");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Parse_Visible_Targets, TargetData) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_Parse_Visible_Targets::TargetData' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Parse_Visible_Targets, ActorsWithVisibleSockets) == 0x000028, "Member 'GA_Player_Aim_Target_Check_C_Parse_Visible_Targets::ActorsWithVisibleSockets' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Parse_Visible_Targets, ActorsWithVisibleSocketMap) == 0x000078, "Member 'GA_Player_Aim_Target_Check_C_Parse_Visible_Targets::ActorsWithVisibleSocketMap' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Parse_Visible_Targets, CallFunc_GetAllActorsFromTargetData_ReturnValue) == 0x0000C8, "Member 'GA_Player_Aim_Target_Check_C_Parse_Visible_Targets::CallFunc_GetAllActorsFromTargetData_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Parse_Visible_Targets, Temp_int_Array_Index_Variable) == 0x0000D8, "Member 'GA_Player_Aim_Target_Check_C_Parse_Visible_Targets::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Parse_Visible_Targets, CallFunc_Array_Length_ReturnValue) == 0x0000DC, "Member 'GA_Player_Aim_Target_Check_C_Parse_Visible_Targets::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Parse_Visible_Targets, CallFunc_Array_Get_Item) == 0x0000E0, "Member 'GA_Player_Aim_Target_Check_C_Parse_Visible_Targets::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Parse_Visible_Targets, CallFunc_IsValid_ReturnValue) == 0x0000E8, "Member 'GA_Player_Aim_Target_Check_C_Parse_Visible_Targets::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Parse_Visible_Targets, CallFunc_GetActorsVisibleAimSocket_bHasVisisbleSocket) == 0x0000E9, "Member 'GA_Player_Aim_Target_Check_C_Parse_Visible_Targets::CallFunc_GetActorsVisibleAimSocket_bHasVisisbleSocket' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Parse_Visible_Targets, CallFunc_GetActorsVisibleAimSocket_VisibleSocketName) == 0x0000EC, "Member 'GA_Player_Aim_Target_Check_C_Parse_Visible_Targets::CallFunc_GetActorsVisibleAimSocket_VisibleSocketName' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Parse_Visible_Targets, Temp_int_Loop_Counter_Variable) == 0x0000F4, "Member 'GA_Player_Aim_Target_Check_C_Parse_Visible_Targets::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Parse_Visible_Targets, CallFunc_Less_IntInt_ReturnValue) == 0x0000F8, "Member 'GA_Player_Aim_Target_Check_C_Parse_Visible_Targets::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Parse_Visible_Targets, CallFunc_Add_IntInt_ReturnValue) == 0x0000FC, "Member 'GA_Player_Aim_Target_Check_C_Parse_Visible_Targets::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.GetActorsVisibleAimSocket
// 0x0068 (0x0068 - 0x0000)
struct GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasVisisbleSocket;                                // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   VisibleSocketName;                                 // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IAimAssistInterface>   K2Node_DynamicCast_AsAim_Assist_Interface;         // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetAimAssistSockets_ReturnValue;          // 0x0030(0x0010)(ConstParm, ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Character_Socket_Visible_SocketIsVisible; // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Is_Character_Socket_Visible_SocketWorldLocation; // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket) == 0x000008, "Wrong alignment on GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket) == 0x000068, "Wrong size on GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket, TargetActor) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket::TargetActor' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket, bHasVisisbleSocket) == 0x000008, "Member 'GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket::bHasVisisbleSocket' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket, VisibleSocketName) == 0x00000C, "Member 'GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket::VisibleSocketName' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket, K2Node_DynamicCast_AsAim_Assist_Interface) == 0x000018, "Member 'GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket::K2Node_DynamicCast_AsAim_Assist_Interface' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket, CallFunc_GetAimAssistSockets_ReturnValue) == 0x000030, "Member 'GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket::CallFunc_GetAimAssistSockets_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket, CallFunc_Array_Get_Item) == 0x000040, "Member 'GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket, CallFunc_Is_Character_Socket_Visible_SocketIsVisible) == 0x000048, "Member 'GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket::CallFunc_Is_Character_Socket_Visible_SocketIsVisible' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket, CallFunc_Is_Character_Socket_Visible_SocketWorldLocation) == 0x00004C, "Member 'GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket::CallFunc_Is_Character_Socket_Visible_SocketWorldLocation' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket, Temp_int_Loop_Counter_Variable) == 0x00005C, "Member 'GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket, CallFunc_Add_IntInt_ReturnValue) == 0x000064, "Member 'GA_Player_Aim_Target_Check_C_GetActorsVisibleAimSocket::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.Is Character Socket Visible
// 0x0218 (0x0218 - 0x0000)
struct GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible final
{
public:
	class AActor*                                 Target_Actor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SocketIsVisible;                                   // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SocketWorldLocation;                               // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartTraceLocation;                                // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        Aim_Assist_Socket_Component;                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IAimAssistInterface>   K2Node_DynamicCast_AsAim_Assist_Interface;         // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class USceneComponent*                  CallFunc_GetAimAssistSocketComponent_ReturnValue;  // 0x0050(0x0008)(ConstParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetAllSocketNames_ReturnValue;            // 0x0078(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesSocketExist_ReturnValue;              // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0098(0x0048)(ContainsInstancedReference)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x00E0(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x00FC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0185(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0186(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_187[0x1];                                      // 0x0187(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_205[0x3];                                      // 0x0205(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetParentActor_ReturnValue;               // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible) == 0x000008, "Wrong alignment on GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible) == 0x000218, "Wrong size on GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, Target_Actor) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::Target_Actor' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, SocketName) == 0x000008, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::SocketName' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, SocketIsVisible) == 0x000010, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::SocketIsVisible' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, SocketWorldLocation) == 0x000014, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::SocketWorldLocation' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, StartTraceLocation) == 0x000020, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::StartTraceLocation' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, Aim_Assist_Socket_Component) == 0x000030, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::Aim_Assist_Socket_Component' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, K2Node_DynamicCast_AsAim_Assist_Interface) == 0x000038, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::K2Node_DynamicCast_AsAim_Assist_Interface' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_GetAimAssistSocketComponent_ReturnValue) == 0x000050, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_GetAimAssistSocketComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00005C, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_GetSocketLocation_ReturnValue) == 0x000068, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_GetAllSocketNames_ReturnValue) == 0x000078, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_GetAllSocketNames_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_Array_Length_ReturnValue) == 0x000088, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_DoesSocketExist_ReturnValue) == 0x00008C, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_DoesSocketExist_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_Greater_IntInt_ReturnValue) == 0x00008D, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000090, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_GetActorInfo_ReturnValue) == 0x000098, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, K2Node_MakeArray_Array) == 0x0000E0, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_GetCameraLocation_ReturnValue) == 0x0000F0, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_LineTraceSingle_OutHit) == 0x0000FC, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_LineTraceSingle_ReturnValue) == 0x000184, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_BreakHitResult_bBlockingHit) == 0x000185, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_BreakHitResult_bInitialOverlap) == 0x000186, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_BreakHitResult_Time) == 0x000188, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_BreakHitResult_Distance) == 0x00018C, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_BreakHitResult_Location) == 0x000190, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_BreakHitResult_ImpactPoint) == 0x00019C, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_BreakHitResult_Normal) == 0x0001A8, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_BreakHitResult_ImpactNormal) == 0x0001B4, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_BreakHitResult_PhysMat) == 0x0001C0, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_BreakHitResult_HitActor) == 0x0001C8, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_BreakHitResult_HitComponent) == 0x0001D0, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_BreakHitResult_HitBoneName) == 0x0001D8, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_BreakHitResult_HitItem) == 0x0001E0, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_BreakHitResult_ElementIndex) == 0x0001E4, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_BreakHitResult_FaceIndex) == 0x0001E8, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_BreakHitResult_TraceStart) == 0x0001EC, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_BreakHitResult_TraceEnd) == 0x0001F8, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_Not_PreBool_ReturnValue) == 0x000204, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_GetParentActor_ReturnValue) == 0x000208, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_GetParentActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000210, "Member 'GA_Player_Aim_Target_Check_C_Is_Character_Socket_Visible::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.IsGamepadLastInputUsed
// 0x0058 (0x0058 - 0x0000)
struct GA_Player_Aim_Target_Check_C_IsGamepadLastInputUsed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0008(0x0048)(ContainsInstancedReference)
	bool                                          CallFunc_IsGamepadLastInputTypeUsed_ReturnValue;   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_IsGamepadLastInputUsed) == 0x000008, "Wrong alignment on GA_Player_Aim_Target_Check_C_IsGamepadLastInputUsed");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_IsGamepadLastInputUsed) == 0x000058, "Wrong size on GA_Player_Aim_Target_Check_C_IsGamepadLastInputUsed");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_IsGamepadLastInputUsed, ReturnValue) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_IsGamepadLastInputUsed::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_IsGamepadLastInputUsed, CallFunc_GetActorInfo_ReturnValue) == 0x000008, "Member 'GA_Player_Aim_Target_Check_C_IsGamepadLastInputUsed::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_IsGamepadLastInputUsed, CallFunc_IsGamepadLastInputTypeUsed_ReturnValue) == 0x000050, "Member 'GA_Player_Aim_Target_Check_C_IsGamepadLastInputUsed::CallFunc_IsGamepadLastInputTypeUsed_ReturnValue' has a wrong offset!");

// Function GA_Player_Aim_Target_Check.GA_Player_Aim_Target_Check_C.GetEasedAimRotation
// 0x00F0 (0x00F0 - 0x0000)
struct GA_Player_Aim_Target_Check_C_GetEasedAimRotation final
{
public:
	struct FRotator                               Control_Rot;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	struct FVector                                Look_at_Vector;                                    // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               New_Control_Rotation;                              // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Total_Duration;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Remaining_Time;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Pitch_Alpha;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Yaw___Roll_Alpha;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37[0x1];                                       // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue_1;                       // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue_2;                       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue; // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue_1; // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue_1;     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           K2Node_Select_Default;                             // 0x00B8(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           K2Node_Select_Default_1;                           // 0x00C0(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           K2Node_Select_Default_2;                           // 0x00D0(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue_2; // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue; // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation) == 0x000008, "Wrong alignment on GA_Player_Aim_Target_Check_C_GetEasedAimRotation");
static_assert(sizeof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation) == 0x0000F0, "Wrong size on GA_Player_Aim_Target_Check_C_GetEasedAimRotation");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, Control_Rot) == 0x000000, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::Control_Rot' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, Look_at_Vector) == 0x00000C, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::Look_at_Vector' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, New_Control_Rotation) == 0x000018, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::New_Control_Rotation' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, Total_Duration) == 0x000024, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::Total_Duration' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, Remaining_Time) == 0x000028, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::Remaining_Time' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, Pitch_Alpha) == 0x00002C, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::Pitch_Alpha' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, Yaw___Roll_Alpha) == 0x000030, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::Yaw___Roll_Alpha' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, Temp_bool_Variable) == 0x000034, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, Temp_bool_Variable_1) == 0x000035, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, Temp_bool_Variable_2) == 0x000036, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_Normal_ReturnValue) == 0x000038, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_BreakVector_X) == 0x000044, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_BreakVector_Y) == 0x000048, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_BreakVector_Z) == 0x00004C, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_GetForwardVector_ReturnValue) == 0x000050, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_BreakVector_X_1) == 0x00005C, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_BreakVector_Y_1) == 0x000060, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_BreakVector_Z_1) == 0x000064, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_Ease_ReturnValue) == 0x000068, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_Ease_ReturnValue_1) == 0x00006C, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_Ease_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_Ease_ReturnValue_2) == 0x000070, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_Ease_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_MakeVector_ReturnValue) == 0x000074, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_MapRangeClamped_ReturnValue) == 0x000080, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_Normal_ReturnValue_1) == 0x000084, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_MakeRotFromX_ReturnValue) == 0x000090, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00009C, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_MapRangeClamped_ReturnValue_1) == 0x0000A0, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x0000A4, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue) == 0x0000A8, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue_1) == 0x0000AC, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_K2_IsTimerActiveHandle_ReturnValue_1) == 0x0000B0, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_K2_IsTimerActiveHandle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000B1, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, K2Node_Select_Default) == 0x0000B8, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, K2Node_Select_Default_1) == 0x0000C0, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_BooleanAND_ReturnValue) == 0x0000C8, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_Not_PreBool_ReturnValue) == 0x0000C9, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, K2Node_Select_Default_2) == 0x0000D0, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue_2) == 0x0000D8, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue) == 0x0000DC, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_FMax_ReturnValue) == 0x0000E0, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_FMax_ReturnValue_1) == 0x0000E4, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Aim_Target_Check_C_GetEasedAimRotation, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000E8, "Member 'GA_Player_Aim_Target_Check_C_GetEasedAimRotation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

}

