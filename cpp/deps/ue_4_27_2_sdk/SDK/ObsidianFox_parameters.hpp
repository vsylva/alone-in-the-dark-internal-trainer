#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ObsidianFox

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "ObsidianFox_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GunfireSaveSystem_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "EnhancedInput_structs.hpp"
#include "ObsidianFoxSettings_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "InputCore_structs.hpp"
#include "PiecesFactsDB_structs.hpp"
#include "PiecesThirdPersonCamera_structs.hpp"


namespace SDK::Params
{

// Function ObsidianFox.AbilityTask_ApplyRootMotionJumpTargetForce.ApplyRootMotionJumpTargetForce
// 0x0068 (0x0068 - 0x0000)
struct AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                JumpTargetLocation;                                // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               JumpTargetRotation;                                // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EEasingFunc                                   RotationTargetEasingFunction;                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         JumpHeight;                                        // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpDuration;                                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMinimumLandedTriggerTime;                        // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionFinishVelocityMode                 VelocityOnFinishMode;                              // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SetVelocityOnFinish;                               // 0x003C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampVelocityOnFinish;                             // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           InPathOffsetCurve;                                 // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            InTimeMappingCurve;                                // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_ApplyRootMotionJumpTargetForce* ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce) == 0x000008, "Wrong alignment on AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce");
static_assert(sizeof(AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce) == 0x000068, "Wrong size on AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce, OwningAbility) == 0x000000, "Member 'AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce, TaskInstanceName) == 0x000008, "Member 'AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce, JumpTargetLocation) == 0x000010, "Member 'AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce::JumpTargetLocation' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce, JumpTargetRotation) == 0x00001C, "Member 'AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce::JumpTargetRotation' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce, RotationTargetEasingFunction) == 0x000028, "Member 'AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce::RotationTargetEasingFunction' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce, JumpHeight) == 0x00002C, "Member 'AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce::JumpHeight' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce, JumpDuration) == 0x000030, "Member 'AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce::JumpDuration' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce, InMinimumLandedTriggerTime) == 0x000034, "Member 'AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce::InMinimumLandedTriggerTime' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce, VelocityOnFinishMode) == 0x000038, "Member 'AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce::VelocityOnFinishMode' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce, SetVelocityOnFinish) == 0x00003C, "Member 'AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce::SetVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce, ClampVelocityOnFinish) == 0x000048, "Member 'AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce::ClampVelocityOnFinish' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce, InPathOffsetCurve) == 0x000050, "Member 'AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce::InPathOffsetCurve' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce, InTimeMappingCurve) == 0x000058, "Member 'AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce::InTimeMappingCurve' has a wrong offset!");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce, ReturnValue) == 0x000060, "Member 'AbilityTask_ApplyRootMotionJumpTargetForce_ApplyRootMotionJumpTargetForce::ReturnValue' has a wrong offset!");

// Function ObsidianFox.AbilityTask_ApplyRootMotionJumpTargetForce.OnLanded
// 0x0088 (0x0088 - 0x0000)
struct AbilityTask_ApplyRootMotionJumpTargetForce_OnLanded final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_ApplyRootMotionJumpTargetForce_OnLanded) == 0x000004, "Wrong alignment on AbilityTask_ApplyRootMotionJumpTargetForce_OnLanded");
static_assert(sizeof(AbilityTask_ApplyRootMotionJumpTargetForce_OnLanded) == 0x000088, "Wrong size on AbilityTask_ApplyRootMotionJumpTargetForce_OnLanded");
static_assert(offsetof(AbilityTask_ApplyRootMotionJumpTargetForce_OnLanded, Hit) == 0x000000, "Member 'AbilityTask_ApplyRootMotionJumpTargetForce_OnLanded::Hit' has a wrong offset!");

// Function ObsidianFox.AbilityTask_WaitInputActionAll.WaitInputActionTriggered
// 0x0020 (0x0020 - 0x0000)
struct AbilityTask_WaitInputActionAll_WaitInputActionTriggered final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           InputAction;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinishOnComplete;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitInputActionAll*        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitInputActionAll_WaitInputActionTriggered) == 0x000008, "Wrong alignment on AbilityTask_WaitInputActionAll_WaitInputActionTriggered");
static_assert(sizeof(AbilityTask_WaitInputActionAll_WaitInputActionTriggered) == 0x000020, "Wrong size on AbilityTask_WaitInputActionAll_WaitInputActionTriggered");
static_assert(offsetof(AbilityTask_WaitInputActionAll_WaitInputActionTriggered, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitInputActionAll_WaitInputActionTriggered::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionAll_WaitInputActionTriggered, InputAction) == 0x000008, "Member 'AbilityTask_WaitInputActionAll_WaitInputActionTriggered::InputAction' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionAll_WaitInputActionTriggered, bFinishOnComplete) == 0x000010, "Member 'AbilityTask_WaitInputActionAll_WaitInputActionTriggered::bFinishOnComplete' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionAll_WaitInputActionTriggered, ReturnValue) == 0x000018, "Member 'AbilityTask_WaitInputActionAll_WaitInputActionTriggered::ReturnValue' has a wrong offset!");

// Function ObsidianFox.PlayerStartTransitionInterface.InitTransition
// 0x0008 (0x0008 - 0x0000)
struct PlayerStartTransitionInterface_InitTransition final
{
public:
	class AController*                            SpawnedController;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStartTransitionInterface_InitTransition) == 0x000008, "Wrong alignment on PlayerStartTransitionInterface_InitTransition");
static_assert(sizeof(PlayerStartTransitionInterface_InitTransition) == 0x000008, "Wrong size on PlayerStartTransitionInterface_InitTransition");
static_assert(offsetof(PlayerStartTransitionInterface_InitTransition, SpawnedController) == 0x000000, "Member 'PlayerStartTransitionInterface_InitTransition::SpawnedController' has a wrong offset!");

// Function ObsidianFox.AbilityTask_WaitInputActionOngoing.WaitInputActionOngoing
// 0x0020 (0x0020 - 0x0000)
struct AbilityTask_WaitInputActionOngoing_WaitInputActionOngoing final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           InputAction;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinishOnComplete;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitInputActionOngoing*    ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitInputActionOngoing_WaitInputActionOngoing) == 0x000008, "Wrong alignment on AbilityTask_WaitInputActionOngoing_WaitInputActionOngoing");
static_assert(sizeof(AbilityTask_WaitInputActionOngoing_WaitInputActionOngoing) == 0x000020, "Wrong size on AbilityTask_WaitInputActionOngoing_WaitInputActionOngoing");
static_assert(offsetof(AbilityTask_WaitInputActionOngoing_WaitInputActionOngoing, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitInputActionOngoing_WaitInputActionOngoing::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionOngoing_WaitInputActionOngoing, InputAction) == 0x000008, "Member 'AbilityTask_WaitInputActionOngoing_WaitInputActionOngoing::InputAction' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionOngoing_WaitInputActionOngoing, bFinishOnComplete) == 0x000010, "Member 'AbilityTask_WaitInputActionOngoing_WaitInputActionOngoing::bFinishOnComplete' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionOngoing_WaitInputActionOngoing, ReturnValue) == 0x000018, "Member 'AbilityTask_WaitInputActionOngoing_WaitInputActionOngoing::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.AbilityTask_WaitInputActionOngoing.WaitInputOngoingDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct AbilityTask_WaitInputActionOngoing_WaitInputOngoingDelegate__DelegateSignature final
{
public:
	float                                         ElapsedTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitInputActionOngoing_WaitInputOngoingDelegate__DelegateSignature) == 0x000004, "Wrong alignment on AbilityTask_WaitInputActionOngoing_WaitInputOngoingDelegate__DelegateSignature");
static_assert(sizeof(AbilityTask_WaitInputActionOngoing_WaitInputOngoingDelegate__DelegateSignature) == 0x000004, "Wrong size on AbilityTask_WaitInputActionOngoing_WaitInputOngoingDelegate__DelegateSignature");
static_assert(offsetof(AbilityTask_WaitInputActionOngoing_WaitInputOngoingDelegate__DelegateSignature, ElapsedTime) == 0x000000, "Member 'AbilityTask_WaitInputActionOngoing_WaitInputOngoingDelegate__DelegateSignature::ElapsedTime' has a wrong offset!");

// Function ObsidianFox.PlayerLocationTrackingVolume.ComponentBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct PlayerLocationTrackingVolume_ComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    InOverlappedComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOtherActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    InOtherComp;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InOtherBodyIndex;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             InSweepResult;                                     // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerLocationTrackingVolume_ComponentBeginOverlap) == 0x000008, "Wrong alignment on PlayerLocationTrackingVolume_ComponentBeginOverlap");
static_assert(sizeof(PlayerLocationTrackingVolume_ComponentBeginOverlap) == 0x0000A8, "Wrong size on PlayerLocationTrackingVolume_ComponentBeginOverlap");
static_assert(offsetof(PlayerLocationTrackingVolume_ComponentBeginOverlap, InOverlappedComponent) == 0x000000, "Member 'PlayerLocationTrackingVolume_ComponentBeginOverlap::InOverlappedComponent' has a wrong offset!");
static_assert(offsetof(PlayerLocationTrackingVolume_ComponentBeginOverlap, InOtherActor) == 0x000008, "Member 'PlayerLocationTrackingVolume_ComponentBeginOverlap::InOtherActor' has a wrong offset!");
static_assert(offsetof(PlayerLocationTrackingVolume_ComponentBeginOverlap, InOtherComp) == 0x000010, "Member 'PlayerLocationTrackingVolume_ComponentBeginOverlap::InOtherComp' has a wrong offset!");
static_assert(offsetof(PlayerLocationTrackingVolume_ComponentBeginOverlap, InOtherBodyIndex) == 0x000018, "Member 'PlayerLocationTrackingVolume_ComponentBeginOverlap::InOtherBodyIndex' has a wrong offset!");
static_assert(offsetof(PlayerLocationTrackingVolume_ComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'PlayerLocationTrackingVolume_ComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(PlayerLocationTrackingVolume_ComponentBeginOverlap, InSweepResult) == 0x000020, "Member 'PlayerLocationTrackingVolume_ComponentBeginOverlap::InSweepResult' has a wrong offset!");

// Function ObsidianFox.PlayerLocationTrackingVolume.ComponentEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct PlayerLocationTrackingVolume_ComponentEndOverlap final
{
public:
	class UPrimitiveComponent*                    InOverlappedComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOtherActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    InOtherComp;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InOtherBodyIndex;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerLocationTrackingVolume_ComponentEndOverlap) == 0x000008, "Wrong alignment on PlayerLocationTrackingVolume_ComponentEndOverlap");
static_assert(sizeof(PlayerLocationTrackingVolume_ComponentEndOverlap) == 0x000020, "Wrong size on PlayerLocationTrackingVolume_ComponentEndOverlap");
static_assert(offsetof(PlayerLocationTrackingVolume_ComponentEndOverlap, InOverlappedComponent) == 0x000000, "Member 'PlayerLocationTrackingVolume_ComponentEndOverlap::InOverlappedComponent' has a wrong offset!");
static_assert(offsetof(PlayerLocationTrackingVolume_ComponentEndOverlap, InOtherActor) == 0x000008, "Member 'PlayerLocationTrackingVolume_ComponentEndOverlap::InOtherActor' has a wrong offset!");
static_assert(offsetof(PlayerLocationTrackingVolume_ComponentEndOverlap, InOtherComp) == 0x000010, "Member 'PlayerLocationTrackingVolume_ComponentEndOverlap::InOtherComp' has a wrong offset!");
static_assert(offsetof(PlayerLocationTrackingVolume_ComponentEndOverlap, InOtherBodyIndex) == 0x000018, "Member 'PlayerLocationTrackingVolume_ComponentEndOverlap::InOtherBodyIndex' has a wrong offset!");

// Function ObsidianFox.AbilityTask_WaitInputActionTriggered_Bool.WaitInputActionTriggered
// 0x0020 (0x0020 - 0x0000)
struct AbilityTask_WaitInputActionTriggered_Bool_WaitInputActionTriggered final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           InputAction;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinishOnComplete;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinishOnTriggered;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitInputActionTriggered_Bool* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitInputActionTriggered_Bool_WaitInputActionTriggered) == 0x000008, "Wrong alignment on AbilityTask_WaitInputActionTriggered_Bool_WaitInputActionTriggered");
static_assert(sizeof(AbilityTask_WaitInputActionTriggered_Bool_WaitInputActionTriggered) == 0x000020, "Wrong size on AbilityTask_WaitInputActionTriggered_Bool_WaitInputActionTriggered");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Bool_WaitInputActionTriggered, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitInputActionTriggered_Bool_WaitInputActionTriggered::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Bool_WaitInputActionTriggered, InputAction) == 0x000008, "Member 'AbilityTask_WaitInputActionTriggered_Bool_WaitInputActionTriggered::InputAction' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Bool_WaitInputActionTriggered, bFinishOnComplete) == 0x000010, "Member 'AbilityTask_WaitInputActionTriggered_Bool_WaitInputActionTriggered::bFinishOnComplete' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Bool_WaitInputActionTriggered, bFinishOnTriggered) == 0x000011, "Member 'AbilityTask_WaitInputActionTriggered_Bool_WaitInputActionTriggered::bFinishOnTriggered' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Bool_WaitInputActionTriggered, ReturnValue) == 0x000018, "Member 'AbilityTask_WaitInputActionTriggered_Bool_WaitInputActionTriggered::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.AbilityTask_WaitInputActionTriggered_Bool.WaitInputTriggeredDelegate__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct AbilityTask_WaitInputActionTriggered_Bool_WaitInputTriggeredDelegate__DelegateSignature final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElapsedTime;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TriggeredSeconds;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitInputActionTriggered_Bool_WaitInputTriggeredDelegate__DelegateSignature) == 0x000004, "Wrong alignment on AbilityTask_WaitInputActionTriggered_Bool_WaitInputTriggeredDelegate__DelegateSignature");
static_assert(sizeof(AbilityTask_WaitInputActionTriggered_Bool_WaitInputTriggeredDelegate__DelegateSignature) == 0x00000C, "Wrong size on AbilityTask_WaitInputActionTriggered_Bool_WaitInputTriggeredDelegate__DelegateSignature");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Bool_WaitInputTriggeredDelegate__DelegateSignature, Value) == 0x000000, "Member 'AbilityTask_WaitInputActionTriggered_Bool_WaitInputTriggeredDelegate__DelegateSignature::Value' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Bool_WaitInputTriggeredDelegate__DelegateSignature, ElapsedTime) == 0x000004, "Member 'AbilityTask_WaitInputActionTriggered_Bool_WaitInputTriggeredDelegate__DelegateSignature::ElapsedTime' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Bool_WaitInputTriggeredDelegate__DelegateSignature, TriggeredSeconds) == 0x000008, "Member 'AbilityTask_WaitInputActionTriggered_Bool_WaitInputTriggeredDelegate__DelegateSignature::TriggeredSeconds' has a wrong offset!");

// Function ObsidianFox.AbilityTask_WaitInputActionTriggered_Float.WaitInputActionTriggered
// 0x0020 (0x0020 - 0x0000)
struct AbilityTask_WaitInputActionTriggered_Float_WaitInputActionTriggered final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           InputAction;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinishOnComplete;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinishOnTriggered;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitInputActionTriggered_Float* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitInputActionTriggered_Float_WaitInputActionTriggered) == 0x000008, "Wrong alignment on AbilityTask_WaitInputActionTriggered_Float_WaitInputActionTriggered");
static_assert(sizeof(AbilityTask_WaitInputActionTriggered_Float_WaitInputActionTriggered) == 0x000020, "Wrong size on AbilityTask_WaitInputActionTriggered_Float_WaitInputActionTriggered");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Float_WaitInputActionTriggered, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitInputActionTriggered_Float_WaitInputActionTriggered::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Float_WaitInputActionTriggered, InputAction) == 0x000008, "Member 'AbilityTask_WaitInputActionTriggered_Float_WaitInputActionTriggered::InputAction' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Float_WaitInputActionTriggered, bFinishOnComplete) == 0x000010, "Member 'AbilityTask_WaitInputActionTriggered_Float_WaitInputActionTriggered::bFinishOnComplete' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Float_WaitInputActionTriggered, bFinishOnTriggered) == 0x000011, "Member 'AbilityTask_WaitInputActionTriggered_Float_WaitInputActionTriggered::bFinishOnTriggered' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Float_WaitInputActionTriggered, ReturnValue) == 0x000018, "Member 'AbilityTask_WaitInputActionTriggered_Float_WaitInputActionTriggered::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.AbilityTask_WaitInputActionTriggered_Float.WaitInputTriggeredDelegate__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct AbilityTask_WaitInputActionTriggered_Float_WaitInputTriggeredDelegate__DelegateSignature final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTime;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TriggeredSeconds;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitInputActionTriggered_Float_WaitInputTriggeredDelegate__DelegateSignature) == 0x000004, "Wrong alignment on AbilityTask_WaitInputActionTriggered_Float_WaitInputTriggeredDelegate__DelegateSignature");
static_assert(sizeof(AbilityTask_WaitInputActionTriggered_Float_WaitInputTriggeredDelegate__DelegateSignature) == 0x00000C, "Wrong size on AbilityTask_WaitInputActionTriggered_Float_WaitInputTriggeredDelegate__DelegateSignature");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Float_WaitInputTriggeredDelegate__DelegateSignature, Value) == 0x000000, "Member 'AbilityTask_WaitInputActionTriggered_Float_WaitInputTriggeredDelegate__DelegateSignature::Value' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Float_WaitInputTriggeredDelegate__DelegateSignature, ElapsedTime) == 0x000004, "Member 'AbilityTask_WaitInputActionTriggered_Float_WaitInputTriggeredDelegate__DelegateSignature::ElapsedTime' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Float_WaitInputTriggeredDelegate__DelegateSignature, TriggeredSeconds) == 0x000008, "Member 'AbilityTask_WaitInputActionTriggered_Float_WaitInputTriggeredDelegate__DelegateSignature::TriggeredSeconds' has a wrong offset!");

// Function ObsidianFox.AbilityTask_WaitInputActionTriggered_Vector2D.WaitInputActionTriggered
// 0x0020 (0x0020 - 0x0000)
struct AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputActionTriggered final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           InputAction;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinishOnComplete;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinishOnTriggered;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitInputActionTriggered_Vector2D* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputActionTriggered) == 0x000008, "Wrong alignment on AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputActionTriggered");
static_assert(sizeof(AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputActionTriggered) == 0x000020, "Wrong size on AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputActionTriggered");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputActionTriggered, OwningAbility) == 0x000000, "Member 'AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputActionTriggered::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputActionTriggered, InputAction) == 0x000008, "Member 'AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputActionTriggered::InputAction' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputActionTriggered, bFinishOnComplete) == 0x000010, "Member 'AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputActionTriggered::bFinishOnComplete' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputActionTriggered, bFinishOnTriggered) == 0x000011, "Member 'AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputActionTriggered::bFinishOnTriggered' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputActionTriggered, ReturnValue) == 0x000018, "Member 'AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputActionTriggered::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.AbilityTask_WaitInputActionTriggered_Vector2D.WaitInputTriggeredDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputTriggeredDelegate__DelegateSignature final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TriggeredSeconds;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputTriggeredDelegate__DelegateSignature) == 0x000004, "Wrong alignment on AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputTriggeredDelegate__DelegateSignature");
static_assert(sizeof(AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputTriggeredDelegate__DelegateSignature) == 0x000010, "Wrong size on AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputTriggeredDelegate__DelegateSignature");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputTriggeredDelegate__DelegateSignature, Value) == 0x000000, "Member 'AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputTriggeredDelegate__DelegateSignature::Value' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputTriggeredDelegate__DelegateSignature, ElapsedTime) == 0x000008, "Member 'AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputTriggeredDelegate__DelegateSignature::ElapsedTime' has a wrong offset!");
static_assert(offsetof(AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputTriggeredDelegate__DelegateSignature, TriggeredSeconds) == 0x00000C, "Member 'AbilityTask_WaitInputActionTriggered_Vector2D_WaitInputTriggeredDelegate__DelegateSignature::TriggeredSeconds' has a wrong offset!");

// Function ObsidianFox.AchievementSubSystem.CompleteAchievement
// 0x0008 (0x0008 - 0x0000)
struct AchievementSubSystem_CompleteAchievement final
{
public:
	struct FGameplayTag                           AchievementTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AchievementSubSystem_CompleteAchievement) == 0x000004, "Wrong alignment on AchievementSubSystem_CompleteAchievement");
static_assert(sizeof(AchievementSubSystem_CompleteAchievement) == 0x000008, "Wrong size on AchievementSubSystem_CompleteAchievement");
static_assert(offsetof(AchievementSubSystem_CompleteAchievement, AchievementTag) == 0x000000, "Member 'AchievementSubSystem_CompleteAchievement::AchievementTag' has a wrong offset!");

// Function ObsidianFox.AchievementSubSystem.GetAchievementInfo
// 0x0070 (0x0070 - 0x0000)
struct AchievementSubSystem_GetAchievementInfo final
{
public:
	struct FGameplayTag                           AchievementTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAchievementInfo                       ReturnValue;                                       // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AchievementSubSystem_GetAchievementInfo) == 0x000008, "Wrong alignment on AchievementSubSystem_GetAchievementInfo");
static_assert(sizeof(AchievementSubSystem_GetAchievementInfo) == 0x000070, "Wrong size on AchievementSubSystem_GetAchievementInfo");
static_assert(offsetof(AchievementSubSystem_GetAchievementInfo, AchievementTag) == 0x000000, "Member 'AchievementSubSystem_GetAchievementInfo::AchievementTag' has a wrong offset!");
static_assert(offsetof(AchievementSubSystem_GetAchievementInfo, ReturnValue) == 0x000008, "Member 'AchievementSubSystem_GetAchievementInfo::ReturnValue' has a wrong offset!");

// Function ObsidianFox.AchievementSubSystem.GetAchievementProgress
// 0x000C (0x000C - 0x0000)
struct AchievementSubSystem_GetAchievementProgress final
{
public:
	struct FGameplayTag                           AchievementTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AchievementSubSystem_GetAchievementProgress) == 0x000004, "Wrong alignment on AchievementSubSystem_GetAchievementProgress");
static_assert(sizeof(AchievementSubSystem_GetAchievementProgress) == 0x00000C, "Wrong size on AchievementSubSystem_GetAchievementProgress");
static_assert(offsetof(AchievementSubSystem_GetAchievementProgress, AchievementTag) == 0x000000, "Member 'AchievementSubSystem_GetAchievementProgress::AchievementTag' has a wrong offset!");
static_assert(offsetof(AchievementSubSystem_GetAchievementProgress, ReturnValue) == 0x000008, "Member 'AchievementSubSystem_GetAchievementProgress::ReturnValue' has a wrong offset!");

// Function ObsidianFox.AchievementSubSystem.GetStatValueFloat
// 0x000C (0x000C - 0x0000)
struct AchievementSubSystem_GetStatValueFloat final
{
public:
	struct FGameplayTag                           StatTag;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AchievementSubSystem_GetStatValueFloat) == 0x000004, "Wrong alignment on AchievementSubSystem_GetStatValueFloat");
static_assert(sizeof(AchievementSubSystem_GetStatValueFloat) == 0x00000C, "Wrong size on AchievementSubSystem_GetStatValueFloat");
static_assert(offsetof(AchievementSubSystem_GetStatValueFloat, StatTag) == 0x000000, "Member 'AchievementSubSystem_GetStatValueFloat::StatTag' has a wrong offset!");
static_assert(offsetof(AchievementSubSystem_GetStatValueFloat, ReturnValue) == 0x000008, "Member 'AchievementSubSystem_GetStatValueFloat::ReturnValue' has a wrong offset!");

// Function ObsidianFox.AchievementSubSystem.GetStatValueInt
// 0x000C (0x000C - 0x0000)
struct AchievementSubSystem_GetStatValueInt final
{
public:
	struct FGameplayTag                           StatTag;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AchievementSubSystem_GetStatValueInt) == 0x000004, "Wrong alignment on AchievementSubSystem_GetStatValueInt");
static_assert(sizeof(AchievementSubSystem_GetStatValueInt) == 0x00000C, "Wrong size on AchievementSubSystem_GetStatValueInt");
static_assert(offsetof(AchievementSubSystem_GetStatValueInt, StatTag) == 0x000000, "Member 'AchievementSubSystem_GetStatValueInt::StatTag' has a wrong offset!");
static_assert(offsetof(AchievementSubSystem_GetStatValueInt, ReturnValue) == 0x000008, "Member 'AchievementSubSystem_GetStatValueInt::ReturnValue' has a wrong offset!");

// Function ObsidianFox.AchievementSubSystem.ProgressAchievement
// 0x000C (0x000C - 0x0000)
struct AchievementSubSystem_ProgressAchievement final
{
public:
	struct FGameplayTag                           AchievementTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AchievementSubSystem_ProgressAchievement) == 0x000004, "Wrong alignment on AchievementSubSystem_ProgressAchievement");
static_assert(sizeof(AchievementSubSystem_ProgressAchievement) == 0x00000C, "Wrong size on AchievementSubSystem_ProgressAchievement");
static_assert(offsetof(AchievementSubSystem_ProgressAchievement, AchievementTag) == 0x000000, "Member 'AchievementSubSystem_ProgressAchievement::AchievementTag' has a wrong offset!");
static_assert(offsetof(AchievementSubSystem_ProgressAchievement, Progress) == 0x000008, "Member 'AchievementSubSystem_ProgressAchievement::Progress' has a wrong offset!");

// Function ObsidianFox.AchievementSubSystem.UpdateStatFloat
// 0x000C (0x000C - 0x0000)
struct AchievementSubSystem_UpdateStatFloat final
{
public:
	struct FGameplayTag                           StatTag;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AchievementSubSystem_UpdateStatFloat) == 0x000004, "Wrong alignment on AchievementSubSystem_UpdateStatFloat");
static_assert(sizeof(AchievementSubSystem_UpdateStatFloat) == 0x00000C, "Wrong size on AchievementSubSystem_UpdateStatFloat");
static_assert(offsetof(AchievementSubSystem_UpdateStatFloat, StatTag) == 0x000000, "Member 'AchievementSubSystem_UpdateStatFloat::StatTag' has a wrong offset!");
static_assert(offsetof(AchievementSubSystem_UpdateStatFloat, Value) == 0x000008, "Member 'AchievementSubSystem_UpdateStatFloat::Value' has a wrong offset!");

// Function ObsidianFox.AchievementSubSystem.UpdateStatInt
// 0x000C (0x000C - 0x0000)
struct AchievementSubSystem_UpdateStatInt final
{
public:
	struct FGameplayTag                           StatTag;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AchievementSubSystem_UpdateStatInt) == 0x000004, "Wrong alignment on AchievementSubSystem_UpdateStatInt");
static_assert(sizeof(AchievementSubSystem_UpdateStatInt) == 0x00000C, "Wrong size on AchievementSubSystem_UpdateStatInt");
static_assert(offsetof(AchievementSubSystem_UpdateStatInt, StatTag) == 0x000000, "Member 'AchievementSubSystem_UpdateStatInt::StatTag' has a wrong offset!");
static_assert(offsetof(AchievementSubSystem_UpdateStatInt, Value) == 0x000008, "Member 'AchievementSubSystem_UpdateStatInt::Value' has a wrong offset!");

// Function ObsidianFox.ObsidianFoxCharacter.AddWeapon
// 0x0008 (0x0008 - 0x0000)
struct ObsidianFoxCharacter_AddWeapon final
{
public:
	class AOFWeaponActor*                         NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_AddWeapon) == 0x000008, "Wrong alignment on ObsidianFoxCharacter_AddWeapon");
static_assert(sizeof(ObsidianFoxCharacter_AddWeapon) == 0x000008, "Wrong size on ObsidianFoxCharacter_AddWeapon");
static_assert(offsetof(ObsidianFoxCharacter_AddWeapon, NewWeapon) == 0x000000, "Member 'ObsidianFoxCharacter_AddWeapon::NewWeapon' has a wrong offset!");

// DelegateFunction ObsidianFox.ObsidianFoxCharacter.AimingSignature__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct ObsidianFoxCharacter_AimingSignature__DelegateSignature final
{
public:
	bool                                          bIsAiming;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_AimingSignature__DelegateSignature) == 0x000001, "Wrong alignment on ObsidianFoxCharacter_AimingSignature__DelegateSignature");
static_assert(sizeof(ObsidianFoxCharacter_AimingSignature__DelegateSignature) == 0x000001, "Wrong size on ObsidianFoxCharacter_AimingSignature__DelegateSignature");
static_assert(offsetof(ObsidianFoxCharacter_AimingSignature__DelegateSignature, bIsAiming) == 0x000000, "Member 'ObsidianFoxCharacter_AimingSignature__DelegateSignature::bIsAiming' has a wrong offset!");

// DelegateFunction ObsidianFox.ObsidianFoxCharacter.AttributeChange__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct ObsidianFoxCharacter_AttributeChange__DelegateSignature final
{
public:
	float                                         AttributeValue;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EventTags;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_AttributeChange__DelegateSignature) == 0x000008, "Wrong alignment on ObsidianFoxCharacter_AttributeChange__DelegateSignature");
static_assert(sizeof(ObsidianFoxCharacter_AttributeChange__DelegateSignature) == 0x000028, "Wrong size on ObsidianFoxCharacter_AttributeChange__DelegateSignature");
static_assert(offsetof(ObsidianFoxCharacter_AttributeChange__DelegateSignature, AttributeValue) == 0x000000, "Member 'ObsidianFoxCharacter_AttributeChange__DelegateSignature::AttributeValue' has a wrong offset!");
static_assert(offsetof(ObsidianFoxCharacter_AttributeChange__DelegateSignature, DeltaValue) == 0x000004, "Member 'ObsidianFoxCharacter_AttributeChange__DelegateSignature::DeltaValue' has a wrong offset!");
static_assert(offsetof(ObsidianFoxCharacter_AttributeChange__DelegateSignature, EventTags) == 0x000008, "Member 'ObsidianFoxCharacter_AttributeChange__DelegateSignature::EventTags' has a wrong offset!");

// Function ObsidianFox.ObsidianFoxCharacter.BeginWeaponAttack
// 0x0028 (0x0028 - 0x0000)
struct ObsidianFoxCharacter_BeginWeaponAttack final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AttackingWeaponsTags;                              // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_BeginWeaponAttack) == 0x000008, "Wrong alignment on ObsidianFoxCharacter_BeginWeaponAttack");
static_assert(sizeof(ObsidianFoxCharacter_BeginWeaponAttack) == 0x000028, "Wrong size on ObsidianFoxCharacter_BeginWeaponAttack");
static_assert(offsetof(ObsidianFoxCharacter_BeginWeaponAttack, EventTag) == 0x000000, "Member 'ObsidianFoxCharacter_BeginWeaponAttack::EventTag' has a wrong offset!");
static_assert(offsetof(ObsidianFoxCharacter_BeginWeaponAttack, AttackingWeaponsTags) == 0x000008, "Member 'ObsidianFoxCharacter_BeginWeaponAttack::AttackingWeaponsTags' has a wrong offset!");

// Function ObsidianFox.ObsidianFoxCharacter.BeginWeaponAttacks
// 0x0008 (0x0008 - 0x0000)
struct ObsidianFoxCharacter_BeginWeaponAttacks final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_BeginWeaponAttacks) == 0x000004, "Wrong alignment on ObsidianFoxCharacter_BeginWeaponAttacks");
static_assert(sizeof(ObsidianFoxCharacter_BeginWeaponAttacks) == 0x000008, "Wrong size on ObsidianFoxCharacter_BeginWeaponAttacks");
static_assert(offsetof(ObsidianFoxCharacter_BeginWeaponAttacks, EventTag) == 0x000000, "Member 'ObsidianFoxCharacter_BeginWeaponAttacks::EventTag' has a wrong offset!");

// Function ObsidianFox.ObsidianFoxCharacter.CancelAbilitiesWithTag
// 0x0020 (0x0020 - 0x0000)
struct ObsidianFoxCharacter_CancelAbilitiesWithTag final
{
public:
	struct FGameplayTagContainer                  AbilityTag;                                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_CancelAbilitiesWithTag) == 0x000008, "Wrong alignment on ObsidianFoxCharacter_CancelAbilitiesWithTag");
static_assert(sizeof(ObsidianFoxCharacter_CancelAbilitiesWithTag) == 0x000020, "Wrong size on ObsidianFoxCharacter_CancelAbilitiesWithTag");
static_assert(offsetof(ObsidianFoxCharacter_CancelAbilitiesWithTag, AbilityTag) == 0x000000, "Member 'ObsidianFoxCharacter_CancelAbilitiesWithTag::AbilityTag' has a wrong offset!");

// Function ObsidianFox.ObsidianFoxCharacter.Death
// 0x0038 (0x0038 - 0x0000)
struct ObsidianFoxCharacter_Death final
{
public:
	struct FGameplayTagContainer                  EventTags;                                         // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           Context;                                           // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_Death) == 0x000008, "Wrong alignment on ObsidianFoxCharacter_Death");
static_assert(sizeof(ObsidianFoxCharacter_Death) == 0x000038, "Wrong size on ObsidianFoxCharacter_Death");
static_assert(offsetof(ObsidianFoxCharacter_Death, EventTags) == 0x000000, "Member 'ObsidianFoxCharacter_Death::EventTags' has a wrong offset!");
static_assert(offsetof(ObsidianFoxCharacter_Death, Context) == 0x000020, "Member 'ObsidianFoxCharacter_Death::Context' has a wrong offset!");

// DelegateFunction ObsidianFox.ObsidianFoxCharacter.DodgingSignature__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct ObsidianFoxCharacter_DodgingSignature__DelegateSignature final
{
public:
	bool                                          bIsDodging;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_DodgingSignature__DelegateSignature) == 0x000001, "Wrong alignment on ObsidianFoxCharacter_DodgingSignature__DelegateSignature");
static_assert(sizeof(ObsidianFoxCharacter_DodgingSignature__DelegateSignature) == 0x000001, "Wrong size on ObsidianFoxCharacter_DodgingSignature__DelegateSignature");
static_assert(offsetof(ObsidianFoxCharacter_DodgingSignature__DelegateSignature, bIsDodging) == 0x000000, "Member 'ObsidianFoxCharacter_DodgingSignature__DelegateSignature::bIsDodging' has a wrong offset!");

// Function ObsidianFox.ObsidianFoxCharacter.EndWeaponAttack
// 0x0020 (0x0020 - 0x0000)
struct ObsidianFoxCharacter_EndWeaponAttack final
{
public:
	struct FGameplayTagContainer                  AttackingWeaponsTags;                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_EndWeaponAttack) == 0x000008, "Wrong alignment on ObsidianFoxCharacter_EndWeaponAttack");
static_assert(sizeof(ObsidianFoxCharacter_EndWeaponAttack) == 0x000020, "Wrong size on ObsidianFoxCharacter_EndWeaponAttack");
static_assert(offsetof(ObsidianFoxCharacter_EndWeaponAttack, AttackingWeaponsTags) == 0x000000, "Member 'ObsidianFoxCharacter_EndWeaponAttack::AttackingWeaponsTags' has a wrong offset!");

// Function ObsidianFox.ObsidianFoxCharacter.EquipWeapon
// 0x0018 (0x0018 - 0x0000)
struct ObsidianFoxCharacter_EquipWeapon final
{
public:
	class AOFWeaponActor*                         Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocket;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ObsidianFoxCharacter_EquipWeapon) == 0x000008, "Wrong alignment on ObsidianFoxCharacter_EquipWeapon");
static_assert(sizeof(ObsidianFoxCharacter_EquipWeapon) == 0x000018, "Wrong size on ObsidianFoxCharacter_EquipWeapon");
static_assert(offsetof(ObsidianFoxCharacter_EquipWeapon, Weapon) == 0x000000, "Member 'ObsidianFoxCharacter_EquipWeapon::Weapon' has a wrong offset!");
static_assert(offsetof(ObsidianFoxCharacter_EquipWeapon, AttachSocket) == 0x000008, "Member 'ObsidianFoxCharacter_EquipWeapon::AttachSocket' has a wrong offset!");
static_assert(offsetof(ObsidianFoxCharacter_EquipWeapon, ReturnValue) == 0x000010, "Member 'ObsidianFoxCharacter_EquipWeapon::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ObsidianFoxCharacter.GetInvicibillity
// 0x0001 (0x0001 - 0x0000)
struct ObsidianFoxCharacter_GetInvicibillity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_GetInvicibillity) == 0x000001, "Wrong alignment on ObsidianFoxCharacter_GetInvicibillity");
static_assert(sizeof(ObsidianFoxCharacter_GetInvicibillity) == 0x000001, "Wrong size on ObsidianFoxCharacter_GetInvicibillity");
static_assert(offsetof(ObsidianFoxCharacter_GetInvicibillity, ReturnValue) == 0x000000, "Member 'ObsidianFoxCharacter_GetInvicibillity::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ObsidianFoxCharacter.GrantAbility
// 0x0008 (0x0008 - 0x0000)
struct ObsidianFoxCharacter_GrantAbility final
{
public:
	TSubclassOf<class UGameplayAbility>           NewAbility;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_GrantAbility) == 0x000008, "Wrong alignment on ObsidianFoxCharacter_GrantAbility");
static_assert(sizeof(ObsidianFoxCharacter_GrantAbility) == 0x000008, "Wrong size on ObsidianFoxCharacter_GrantAbility");
static_assert(offsetof(ObsidianFoxCharacter_GrantAbility, NewAbility) == 0x000000, "Member 'ObsidianFoxCharacter_GrantAbility::NewAbility' has a wrong offset!");

// Function ObsidianFox.ObsidianFoxCharacter.GrantAbilityBySpec
// 0x00E0 (0x00E0 - 0x0000)
struct ObsidianFoxCharacter_GrantAbilityBySpec final
{
public:
	struct FGameplayAbilitySpec                   NewAbilitySpec;                                    // 0x0000(0x00E0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_GrantAbilityBySpec) == 0x000008, "Wrong alignment on ObsidianFoxCharacter_GrantAbilityBySpec");
static_assert(sizeof(ObsidianFoxCharacter_GrantAbilityBySpec) == 0x0000E0, "Wrong size on ObsidianFoxCharacter_GrantAbilityBySpec");
static_assert(offsetof(ObsidianFoxCharacter_GrantAbilityBySpec, NewAbilitySpec) == 0x000000, "Member 'ObsidianFoxCharacter_GrantAbilityBySpec::NewAbilitySpec' has a wrong offset!");

// DelegateFunction ObsidianFox.ObsidianFoxCharacter.HealthChangeSignature__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct ObsidianFoxCharacter_HealthChangeSignature__DelegateSignature final
{
public:
	float                                         NewCurrentHealth;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EventTags;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_HealthChangeSignature__DelegateSignature) == 0x000008, "Wrong alignment on ObsidianFoxCharacter_HealthChangeSignature__DelegateSignature");
static_assert(sizeof(ObsidianFoxCharacter_HealthChangeSignature__DelegateSignature) == 0x000028, "Wrong size on ObsidianFoxCharacter_HealthChangeSignature__DelegateSignature");
static_assert(offsetof(ObsidianFoxCharacter_HealthChangeSignature__DelegateSignature, NewCurrentHealth) == 0x000000, "Member 'ObsidianFoxCharacter_HealthChangeSignature__DelegateSignature::NewCurrentHealth' has a wrong offset!");
static_assert(offsetof(ObsidianFoxCharacter_HealthChangeSignature__DelegateSignature, DeltaValue) == 0x000004, "Member 'ObsidianFoxCharacter_HealthChangeSignature__DelegateSignature::DeltaValue' has a wrong offset!");
static_assert(offsetof(ObsidianFoxCharacter_HealthChangeSignature__DelegateSignature, EventTags) == 0x000008, "Member 'ObsidianFoxCharacter_HealthChangeSignature__DelegateSignature::EventTags' has a wrong offset!");

// Function ObsidianFox.ObsidianFoxCharacter.K2_OnCinematicModeChange
// 0x0001 (0x0001 - 0x0000)
struct ObsidianFoxCharacter_K2_OnCinematicModeChange final
{
public:
	bool                                          bInCinematicMode;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_K2_OnCinematicModeChange) == 0x000001, "Wrong alignment on ObsidianFoxCharacter_K2_OnCinematicModeChange");
static_assert(sizeof(ObsidianFoxCharacter_K2_OnCinematicModeChange) == 0x000001, "Wrong size on ObsidianFoxCharacter_K2_OnCinematicModeChange");
static_assert(offsetof(ObsidianFoxCharacter_K2_OnCinematicModeChange, bInCinematicMode) == 0x000000, "Member 'ObsidianFoxCharacter_K2_OnCinematicModeChange::bInCinematicMode' has a wrong offset!");

// Function ObsidianFox.ObsidianFoxCharacter.OnPlayStateChanged
// 0x0002 (0x0002 - 0x0000)
struct ObsidianFoxCharacter_OnPlayStateChanged final
{
public:
	EGameMainState                                OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMainState                                NewGameState;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_OnPlayStateChanged) == 0x000001, "Wrong alignment on ObsidianFoxCharacter_OnPlayStateChanged");
static_assert(sizeof(ObsidianFoxCharacter_OnPlayStateChanged) == 0x000002, "Wrong size on ObsidianFoxCharacter_OnPlayStateChanged");
static_assert(offsetof(ObsidianFoxCharacter_OnPlayStateChanged, OldState) == 0x000000, "Member 'ObsidianFoxCharacter_OnPlayStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(ObsidianFoxCharacter_OnPlayStateChanged, NewGameState) == 0x000001, "Member 'ObsidianFoxCharacter_OnPlayStateChanged::NewGameState' has a wrong offset!");

// Function ObsidianFox.ObsidianFoxCharacter.OnWeaponAttackHit
// 0x00D0 (0x00D0 - 0x0000)
struct ObsidianFoxCharacter_OnWeaponAttackHit final
{
public:
	float                                         HitStrength;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitForce;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitDirection;                                      // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitDirectionNormalAdjusted;                        // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECardinalDirection                            HitQuadrant;                                       // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitInfo;                                           // 0x0028(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DamageTags;                                        // 0x00B0(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_OnWeaponAttackHit) == 0x000008, "Wrong alignment on ObsidianFoxCharacter_OnWeaponAttackHit");
static_assert(sizeof(ObsidianFoxCharacter_OnWeaponAttackHit) == 0x0000D0, "Wrong size on ObsidianFoxCharacter_OnWeaponAttackHit");
static_assert(offsetof(ObsidianFoxCharacter_OnWeaponAttackHit, HitStrength) == 0x000000, "Member 'ObsidianFoxCharacter_OnWeaponAttackHit::HitStrength' has a wrong offset!");
static_assert(offsetof(ObsidianFoxCharacter_OnWeaponAttackHit, HitForce) == 0x000004, "Member 'ObsidianFoxCharacter_OnWeaponAttackHit::HitForce' has a wrong offset!");
static_assert(offsetof(ObsidianFoxCharacter_OnWeaponAttackHit, Duration) == 0x000008, "Member 'ObsidianFoxCharacter_OnWeaponAttackHit::Duration' has a wrong offset!");
static_assert(offsetof(ObsidianFoxCharacter_OnWeaponAttackHit, HitDirection) == 0x00000C, "Member 'ObsidianFoxCharacter_OnWeaponAttackHit::HitDirection' has a wrong offset!");
static_assert(offsetof(ObsidianFoxCharacter_OnWeaponAttackHit, HitDirectionNormalAdjusted) == 0x000018, "Member 'ObsidianFoxCharacter_OnWeaponAttackHit::HitDirectionNormalAdjusted' has a wrong offset!");
static_assert(offsetof(ObsidianFoxCharacter_OnWeaponAttackHit, HitQuadrant) == 0x000024, "Member 'ObsidianFoxCharacter_OnWeaponAttackHit::HitQuadrant' has a wrong offset!");
static_assert(offsetof(ObsidianFoxCharacter_OnWeaponAttackHit, HitInfo) == 0x000028, "Member 'ObsidianFoxCharacter_OnWeaponAttackHit::HitInfo' has a wrong offset!");
static_assert(offsetof(ObsidianFoxCharacter_OnWeaponAttackHit, DamageTags) == 0x0000B0, "Member 'ObsidianFoxCharacter_OnWeaponAttackHit::DamageTags' has a wrong offset!");

// Function ObsidianFox.ObsidianFoxCharacter.RemoveWeapon
// 0x0008 (0x0008 - 0x0000)
struct ObsidianFoxCharacter_RemoveWeapon final
{
public:
	class AOFWeaponActor*                         WeaponToRemove;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_RemoveWeapon) == 0x000008, "Wrong alignment on ObsidianFoxCharacter_RemoveWeapon");
static_assert(sizeof(ObsidianFoxCharacter_RemoveWeapon) == 0x000008, "Wrong size on ObsidianFoxCharacter_RemoveWeapon");
static_assert(offsetof(ObsidianFoxCharacter_RemoveWeapon, WeaponToRemove) == 0x000000, "Member 'ObsidianFoxCharacter_RemoveWeapon::WeaponToRemove' has a wrong offset!");

// Function ObsidianFox.ObsidianFoxCharacter.SetCinematicMode
// 0x0001 (0x0001 - 0x0000)
struct ObsidianFoxCharacter_SetCinematicMode final
{
public:
	bool                                          bShouldBeInCinematicMode;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_SetCinematicMode) == 0x000001, "Wrong alignment on ObsidianFoxCharacter_SetCinematicMode");
static_assert(sizeof(ObsidianFoxCharacter_SetCinematicMode) == 0x000001, "Wrong size on ObsidianFoxCharacter_SetCinematicMode");
static_assert(offsetof(ObsidianFoxCharacter_SetCinematicMode, bShouldBeInCinematicMode) == 0x000000, "Member 'ObsidianFoxCharacter_SetCinematicMode::bShouldBeInCinematicMode' has a wrong offset!");

// Function ObsidianFox.ObsidianFoxCharacter.SetInvicibillity
// 0x0001 (0x0001 - 0x0000)
struct ObsidianFoxCharacter_SetInvicibillity final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_SetInvicibillity) == 0x000001, "Wrong alignment on ObsidianFoxCharacter_SetInvicibillity");
static_assert(sizeof(ObsidianFoxCharacter_SetInvicibillity) == 0x000001, "Wrong size on ObsidianFoxCharacter_SetInvicibillity");
static_assert(offsetof(ObsidianFoxCharacter_SetInvicibillity, bValue) == 0x000000, "Member 'ObsidianFoxCharacter_SetInvicibillity::bValue' has a wrong offset!");

// Function ObsidianFox.ObsidianFoxCharacter.UnequipWeapon
// 0x0018 (0x0018 - 0x0000)
struct ObsidianFoxCharacter_UnequipWeapon final
{
public:
	class AOFWeaponActor*                         Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyWeaponActor;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachSocket;                                      // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ObsidianFoxCharacter_UnequipWeapon) == 0x000008, "Wrong alignment on ObsidianFoxCharacter_UnequipWeapon");
static_assert(sizeof(ObsidianFoxCharacter_UnequipWeapon) == 0x000018, "Wrong size on ObsidianFoxCharacter_UnequipWeapon");
static_assert(offsetof(ObsidianFoxCharacter_UnequipWeapon, Weapon) == 0x000000, "Member 'ObsidianFoxCharacter_UnequipWeapon::Weapon' has a wrong offset!");
static_assert(offsetof(ObsidianFoxCharacter_UnequipWeapon, bDestroyWeaponActor) == 0x000008, "Member 'ObsidianFoxCharacter_UnequipWeapon::bDestroyWeaponActor' has a wrong offset!");
static_assert(offsetof(ObsidianFoxCharacter_UnequipWeapon, AttachSocket) == 0x00000C, "Member 'ObsidianFoxCharacter_UnequipWeapon::AttachSocket' has a wrong offset!");
static_assert(offsetof(ObsidianFoxCharacter_UnequipWeapon, ReturnValue) == 0x000014, "Member 'ObsidianFoxCharacter_UnequipWeapon::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ObsidianFoxCharacter.GetActiveMeleeWeapon
// 0x0008 (0x0008 - 0x0000)
struct ObsidianFoxCharacter_GetActiveMeleeWeapon final
{
public:
	class AOFWeaponActor*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_GetActiveMeleeWeapon) == 0x000008, "Wrong alignment on ObsidianFoxCharacter_GetActiveMeleeWeapon");
static_assert(sizeof(ObsidianFoxCharacter_GetActiveMeleeWeapon) == 0x000008, "Wrong size on ObsidianFoxCharacter_GetActiveMeleeWeapon");
static_assert(offsetof(ObsidianFoxCharacter_GetActiveMeleeWeapon, ReturnValue) == 0x000000, "Member 'ObsidianFoxCharacter_GetActiveMeleeWeapon::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ObsidianFoxCharacter.GetActiveWeapon
// 0x0008 (0x0008 - 0x0000)
struct ObsidianFoxCharacter_GetActiveWeapon final
{
public:
	class AOFWeaponActor*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_GetActiveWeapon) == 0x000008, "Wrong alignment on ObsidianFoxCharacter_GetActiveWeapon");
static_assert(sizeof(ObsidianFoxCharacter_GetActiveWeapon) == 0x000008, "Wrong size on ObsidianFoxCharacter_GetActiveWeapon");
static_assert(offsetof(ObsidianFoxCharacter_GetActiveWeapon, ReturnValue) == 0x000000, "Member 'ObsidianFoxCharacter_GetActiveWeapon::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ObsidianFoxCharacter.GetEquippedWeapons
// 0x0010 (0x0010 - 0x0000)
struct ObsidianFoxCharacter_GetEquippedWeapons final
{
public:
	TArray<class AOFWeaponActor*>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_GetEquippedWeapons) == 0x000008, "Wrong alignment on ObsidianFoxCharacter_GetEquippedWeapons");
static_assert(sizeof(ObsidianFoxCharacter_GetEquippedWeapons) == 0x000010, "Wrong size on ObsidianFoxCharacter_GetEquippedWeapons");
static_assert(offsetof(ObsidianFoxCharacter_GetEquippedWeapons, ReturnValue) == 0x000000, "Member 'ObsidianFoxCharacter_GetEquippedWeapons::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ObsidianFoxCharacter.IsCharacterDead
// 0x0001 (0x0001 - 0x0000)
struct ObsidianFoxCharacter_IsCharacterDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_IsCharacterDead) == 0x000001, "Wrong alignment on ObsidianFoxCharacter_IsCharacterDead");
static_assert(sizeof(ObsidianFoxCharacter_IsCharacterDead) == 0x000001, "Wrong size on ObsidianFoxCharacter_IsCharacterDead");
static_assert(offsetof(ObsidianFoxCharacter_IsCharacterDead, ReturnValue) == 0x000000, "Member 'ObsidianFoxCharacter_IsCharacterDead::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ObsidianFoxCharacter.IsInCinematicMode
// 0x0001 (0x0001 - 0x0000)
struct ObsidianFoxCharacter_IsInCinematicMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObsidianFoxCharacter_IsInCinematicMode) == 0x000001, "Wrong alignment on ObsidianFoxCharacter_IsInCinematicMode");
static_assert(sizeof(ObsidianFoxCharacter_IsInCinematicMode) == 0x000001, "Wrong size on ObsidianFoxCharacter_IsInCinematicMode");
static_assert(offsetof(ObsidianFoxCharacter_IsInCinematicMode, ReturnValue) == 0x000000, "Member 'ObsidianFoxCharacter_IsInCinematicMode::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFFLevelUtils.GetStreamingLevelFromWorld
// 0x0038 (0x0038 - 0x0000)
struct OFFLevelUtils_GetStreamingLevelFromWorld final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  InWorld;                                           // 0x0008(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelStreaming*                        ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFFLevelUtils_GetStreamingLevelFromWorld) == 0x000008, "Wrong alignment on OFFLevelUtils_GetStreamingLevelFromWorld");
static_assert(sizeof(OFFLevelUtils_GetStreamingLevelFromWorld) == 0x000038, "Wrong size on OFFLevelUtils_GetStreamingLevelFromWorld");
static_assert(offsetof(OFFLevelUtils_GetStreamingLevelFromWorld, WorldContextObject) == 0x000000, "Member 'OFFLevelUtils_GetStreamingLevelFromWorld::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OFFLevelUtils_GetStreamingLevelFromWorld, InWorld) == 0x000008, "Member 'OFFLevelUtils_GetStreamingLevelFromWorld::InWorld' has a wrong offset!");
static_assert(offsetof(OFFLevelUtils_GetStreamingLevelFromWorld, ReturnValue) == 0x000030, "Member 'OFFLevelUtils_GetStreamingLevelFromWorld::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFFLevelUtils.GetWorldAssetName
// 0x0030 (0x0030 - 0x0000)
struct OFFLevelUtils_GetWorldAssetName final
{
public:
	TSoftObjectPtr<class UWorld>                  InWorld;                                           // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFFLevelUtils_GetWorldAssetName) == 0x000008, "Wrong alignment on OFFLevelUtils_GetWorldAssetName");
static_assert(sizeof(OFFLevelUtils_GetWorldAssetName) == 0x000030, "Wrong size on OFFLevelUtils_GetWorldAssetName");
static_assert(offsetof(OFFLevelUtils_GetWorldAssetName, InWorld) == 0x000000, "Member 'OFFLevelUtils_GetWorldAssetName::InWorld' has a wrong offset!");
static_assert(offsetof(OFFLevelUtils_GetWorldAssetName, ReturnValue) == 0x000028, "Member 'OFFLevelUtils_GetWorldAssetName::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ActorMoodComponent.OnCombatStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct ActorMoodComponent_OnCombatStatusChanged final
{
public:
	bool                                          InCombat;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorMoodComponent_OnCombatStatusChanged) == 0x000001, "Wrong alignment on ActorMoodComponent_OnCombatStatusChanged");
static_assert(sizeof(ActorMoodComponent_OnCombatStatusChanged) == 0x000001, "Wrong size on ActorMoodComponent_OnCombatStatusChanged");
static_assert(offsetof(ActorMoodComponent_OnCombatStatusChanged, InCombat) == 0x000000, "Member 'ActorMoodComponent_OnCombatStatusChanged::InCombat' has a wrong offset!");

// Function ObsidianFox.ActorMoodComponent.OnEnterGauntlet
// 0x0001 (0x0001 - 0x0000)
struct ActorMoodComponent_OnEnterGauntlet final
{
public:
	bool                                          FirstTime;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorMoodComponent_OnEnterGauntlet) == 0x000001, "Wrong alignment on ActorMoodComponent_OnEnterGauntlet");
static_assert(sizeof(ActorMoodComponent_OnEnterGauntlet) == 0x000001, "Wrong size on ActorMoodComponent_OnEnterGauntlet");
static_assert(offsetof(ActorMoodComponent_OnEnterGauntlet, FirstTime) == 0x000000, "Member 'ActorMoodComponent_OnEnterGauntlet::FirstTime' has a wrong offset!");

// Function ObsidianFox.ActorMoodComponent.OnExitGauntlet
// 0x0001 (0x0001 - 0x0000)
struct ActorMoodComponent_OnExitGauntlet final
{
public:
	bool                                          FirstTime;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorMoodComponent_OnExitGauntlet) == 0x000001, "Wrong alignment on ActorMoodComponent_OnExitGauntlet");
static_assert(sizeof(ActorMoodComponent_OnExitGauntlet) == 0x000001, "Wrong size on ActorMoodComponent_OnExitGauntlet");
static_assert(offsetof(ActorMoodComponent_OnExitGauntlet, FirstTime) == 0x000000, "Member 'ActorMoodComponent_OnExitGauntlet::FirstTime' has a wrong offset!");

// Function ObsidianFox.ActorMoodComponent.OnHealthChanged
// 0x0028 (0x0028 - 0x0000)
struct ActorMoodComponent_OnHealthChanged final
{
public:
	float                                         NewCurrentHealth;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EventTags;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorMoodComponent_OnHealthChanged) == 0x000008, "Wrong alignment on ActorMoodComponent_OnHealthChanged");
static_assert(sizeof(ActorMoodComponent_OnHealthChanged) == 0x000028, "Wrong size on ActorMoodComponent_OnHealthChanged");
static_assert(offsetof(ActorMoodComponent_OnHealthChanged, NewCurrentHealth) == 0x000000, "Member 'ActorMoodComponent_OnHealthChanged::NewCurrentHealth' has a wrong offset!");
static_assert(offsetof(ActorMoodComponent_OnHealthChanged, DeltaValue) == 0x000004, "Member 'ActorMoodComponent_OnHealthChanged::DeltaValue' has a wrong offset!");
static_assert(offsetof(ActorMoodComponent_OnHealthChanged, EventTags) == 0x000008, "Member 'ActorMoodComponent_OnHealthChanged::EventTags' has a wrong offset!");

// Function ObsidianFox.ActorMoodComponent.OnNewRoomExplored
// 0x0008 (0x0008 - 0x0000)
struct ActorMoodComponent_OnNewRoomExplored final
{
public:
	struct FGameplayTag                           NewRoomTag;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorMoodComponent_OnNewRoomExplored) == 0x000004, "Wrong alignment on ActorMoodComponent_OnNewRoomExplored");
static_assert(sizeof(ActorMoodComponent_OnNewRoomExplored) == 0x000008, "Wrong size on ActorMoodComponent_OnNewRoomExplored");
static_assert(offsetof(ActorMoodComponent_OnNewRoomExplored, NewRoomTag) == 0x000000, "Member 'ActorMoodComponent_OnNewRoomExplored::NewRoomTag' has a wrong offset!");

// Function ObsidianFox.ActorMoodComponent.OnSprintStateChange
// 0x0001 (0x0001 - 0x0000)
struct ActorMoodComponent_OnSprintStateChange final
{
public:
	bool                                          IsSprinting;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorMoodComponent_OnSprintStateChange) == 0x000001, "Wrong alignment on ActorMoodComponent_OnSprintStateChange");
static_assert(sizeof(ActorMoodComponent_OnSprintStateChange) == 0x000001, "Wrong size on ActorMoodComponent_OnSprintStateChange");
static_assert(offsetof(ActorMoodComponent_OnSprintStateChange, IsSprinting) == 0x000000, "Member 'ActorMoodComponent_OnSprintStateChange::IsSprinting' has a wrong offset!");

// Function ObsidianFox.ActorMoodComponent.RequestEmotionChange
// 0x0050 (0x0050 - 0x0000)
struct ActorMoodComponent_RequestEmotionChange final
{
public:
	TMap<EEmotion, float>                         EmotionDeltas;                                     // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorMoodComponent_RequestEmotionChange) == 0x000008, "Wrong alignment on ActorMoodComponent_RequestEmotionChange");
static_assert(sizeof(ActorMoodComponent_RequestEmotionChange) == 0x000050, "Wrong size on ActorMoodComponent_RequestEmotionChange");
static_assert(offsetof(ActorMoodComponent_RequestEmotionChange, EmotionDeltas) == 0x000000, "Member 'ActorMoodComponent_RequestEmotionChange::EmotionDeltas' has a wrong offset!");

// Function ObsidianFox.ActorMoodComponent.GetBreathRecoveryTimer
// 0x0010 (0x0010 - 0x0000)
struct ActorMoodComponent_GetBreathRecoveryTimer final
{
public:
	class UCurveFloat*                            TransformationCurve;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActorMoodComponent_GetBreathRecoveryTimer) == 0x000008, "Wrong alignment on ActorMoodComponent_GetBreathRecoveryTimer");
static_assert(sizeof(ActorMoodComponent_GetBreathRecoveryTimer) == 0x000010, "Wrong size on ActorMoodComponent_GetBreathRecoveryTimer");
static_assert(offsetof(ActorMoodComponent_GetBreathRecoveryTimer, TransformationCurve) == 0x000000, "Member 'ActorMoodComponent_GetBreathRecoveryTimer::TransformationCurve' has a wrong offset!");
static_assert(offsetof(ActorMoodComponent_GetBreathRecoveryTimer, ReturnValue) == 0x000008, "Member 'ActorMoodComponent_GetBreathRecoveryTimer::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ActorTransformComponent.ForceStop
// 0x0004 (0x0004 - 0x0000)
struct ActorTransformComponent_ForceStop final
{
public:
	bool                                          StopTranslation;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StopRotation;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SnapCharacterToTargetLocation;                     // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SnapCharacterToTargetRotation;                     // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorTransformComponent_ForceStop) == 0x000001, "Wrong alignment on ActorTransformComponent_ForceStop");
static_assert(sizeof(ActorTransformComponent_ForceStop) == 0x000004, "Wrong size on ActorTransformComponent_ForceStop");
static_assert(offsetof(ActorTransformComponent_ForceStop, StopTranslation) == 0x000000, "Member 'ActorTransformComponent_ForceStop::StopTranslation' has a wrong offset!");
static_assert(offsetof(ActorTransformComponent_ForceStop, StopRotation) == 0x000001, "Member 'ActorTransformComponent_ForceStop::StopRotation' has a wrong offset!");
static_assert(offsetof(ActorTransformComponent_ForceStop, SnapCharacterToTargetLocation) == 0x000002, "Member 'ActorTransformComponent_ForceStop::SnapCharacterToTargetLocation' has a wrong offset!");
static_assert(offsetof(ActorTransformComponent_ForceStop, SnapCharacterToTargetRotation) == 0x000003, "Member 'ActorTransformComponent_ForceStop::SnapCharacterToTargetRotation' has a wrong offset!");

// DelegateFunction ObsidianFox.ActorTransformComponent.TransformCompleted__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct ActorTransformComponent_TransformCompleted__DelegateSignature final
{
public:
	class AActor*                                 TransformedActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorTransformComponent*               TransformingComponent;                             // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorTransformComponent_TransformCompleted__DelegateSignature) == 0x000008, "Wrong alignment on ActorTransformComponent_TransformCompleted__DelegateSignature");
static_assert(sizeof(ActorTransformComponent_TransformCompleted__DelegateSignature) == 0x000010, "Wrong size on ActorTransformComponent_TransformCompleted__DelegateSignature");
static_assert(offsetof(ActorTransformComponent_TransformCompleted__DelegateSignature, TransformedActor) == 0x000000, "Member 'ActorTransformComponent_TransformCompleted__DelegateSignature::TransformedActor' has a wrong offset!");
static_assert(offsetof(ActorTransformComponent_TransformCompleted__DelegateSignature, TransformingComponent) == 0x000008, "Member 'ActorTransformComponent_TransformCompleted__DelegateSignature::TransformingComponent' has a wrong offset!");

// Function ObsidianFox.OFPostProcessAnimInstance.CopyDynamicsAlphaFromOwnerABP
// 0x000C (0x000C - 0x0000)
struct OFPostProcessAnimInstance_CopyDynamicsAlphaFromOwnerABP final
{
public:
	float                                         DestinationVariable;                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DynamicsKey;                                       // 0x0004(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFPostProcessAnimInstance_CopyDynamicsAlphaFromOwnerABP) == 0x000004, "Wrong alignment on OFPostProcessAnimInstance_CopyDynamicsAlphaFromOwnerABP");
static_assert(sizeof(OFPostProcessAnimInstance_CopyDynamicsAlphaFromOwnerABP) == 0x00000C, "Wrong size on OFPostProcessAnimInstance_CopyDynamicsAlphaFromOwnerABP");
static_assert(offsetof(OFPostProcessAnimInstance_CopyDynamicsAlphaFromOwnerABP, DestinationVariable) == 0x000000, "Member 'OFPostProcessAnimInstance_CopyDynamicsAlphaFromOwnerABP::DestinationVariable' has a wrong offset!");
static_assert(offsetof(OFPostProcessAnimInstance_CopyDynamicsAlphaFromOwnerABP, DynamicsKey) == 0x000004, "Member 'OFPostProcessAnimInstance_CopyDynamicsAlphaFromOwnerABP::DynamicsKey' has a wrong offset!");

// Function ObsidianFox.OFPostProcessAnimInstance.GetParentAnimInstance
// 0x0010 (0x0010 - 0x0000)
struct OFPostProcessAnimInstance_GetParentAnimInstance final
{
public:
	TSubclassOf<class UAnimInstance>              Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimInstance*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFPostProcessAnimInstance_GetParentAnimInstance) == 0x000008, "Wrong alignment on OFPostProcessAnimInstance_GetParentAnimInstance");
static_assert(sizeof(OFPostProcessAnimInstance_GetParentAnimInstance) == 0x000010, "Wrong size on OFPostProcessAnimInstance_GetParentAnimInstance");
static_assert(offsetof(OFPostProcessAnimInstance_GetParentAnimInstance, Class_0) == 0x000000, "Member 'OFPostProcessAnimInstance_GetParentAnimInstance::Class_0' has a wrong offset!");
static_assert(offsetof(OFPostProcessAnimInstance_GetParentAnimInstance, ReturnValue) == 0x000008, "Member 'OFPostProcessAnimInstance_GetParentAnimInstance::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ActWorldSubSystem.GetCurrentActWorldIndex
// 0x0004 (0x0004 - 0x0000)
struct ActWorldSubSystem_GetCurrentActWorldIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActWorldSubSystem_GetCurrentActWorldIndex) == 0x000004, "Wrong alignment on ActWorldSubSystem_GetCurrentActWorldIndex");
static_assert(sizeof(ActWorldSubSystem_GetCurrentActWorldIndex) == 0x000004, "Wrong size on ActWorldSubSystem_GetCurrentActWorldIndex");
static_assert(offsetof(ActWorldSubSystem_GetCurrentActWorldIndex, ReturnValue) == 0x000000, "Member 'ActWorldSubSystem_GetCurrentActWorldIndex::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ActWorldSubSystem.GetCurrentActWorldName
// 0x0008 (0x0008 - 0x0000)
struct ActWorldSubSystem_GetCurrentActWorldName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActWorldSubSystem_GetCurrentActWorldName) == 0x000004, "Wrong alignment on ActWorldSubSystem_GetCurrentActWorldName");
static_assert(sizeof(ActWorldSubSystem_GetCurrentActWorldName) == 0x000008, "Wrong size on ActWorldSubSystem_GetCurrentActWorldName");
static_assert(offsetof(ActWorldSubSystem_GetCurrentActWorldName, ReturnValue) == 0x000000, "Member 'ActWorldSubSystem_GetCurrentActWorldName::ReturnValue' has a wrong offset!");

// Function ObsidianFox.AIEmotePointInterface.IsActive
// 0x0001 (0x0001 - 0x0000)
struct AIEmotePointInterface_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIEmotePointInterface_IsActive) == 0x000001, "Wrong alignment on AIEmotePointInterface_IsActive");
static_assert(sizeof(AIEmotePointInterface_IsActive) == 0x000001, "Wrong size on AIEmotePointInterface_IsActive");
static_assert(offsetof(AIEmotePointInterface_IsActive, ReturnValue) == 0x000000, "Member 'AIEmotePointInterface_IsActive::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFPlayerCameraManager.OnSettingsChangedHandler
// 0x0008 (0x0008 - 0x0000)
struct OFPlayerCameraManager_OnSettingsChangedHandler final
{
public:
	class UOFGameUserSettings*                    Settings;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFPlayerCameraManager_OnSettingsChangedHandler) == 0x000008, "Wrong alignment on OFPlayerCameraManager_OnSettingsChangedHandler");
static_assert(sizeof(OFPlayerCameraManager_OnSettingsChangedHandler) == 0x000008, "Wrong size on OFPlayerCameraManager_OnSettingsChangedHandler");
static_assert(offsetof(OFPlayerCameraManager_OnSettingsChangedHandler, Settings) == 0x000000, "Member 'OFPlayerCameraManager_OnSettingsChangedHandler::Settings' has a wrong offset!");

// Function ObsidianFox.AimAssistInterface.GetAimAssistMainSocket
// 0x0008 (0x0008 - 0x0000)
struct AimAssistInterface_GetAimAssistMainSocket final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AimAssistInterface_GetAimAssistMainSocket) == 0x000004, "Wrong alignment on AimAssistInterface_GetAimAssistMainSocket");
static_assert(sizeof(AimAssistInterface_GetAimAssistMainSocket) == 0x000008, "Wrong size on AimAssistInterface_GetAimAssistMainSocket");
static_assert(offsetof(AimAssistInterface_GetAimAssistMainSocket, ReturnValue) == 0x000000, "Member 'AimAssistInterface_GetAimAssistMainSocket::ReturnValue' has a wrong offset!");

// Function ObsidianFox.AimAssistInterface.GetAimAssistSocketComponent
// 0x0008 (0x0008 - 0x0000)
struct AimAssistInterface_GetAimAssistSocketComponent final
{
public:
	const class USceneComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AimAssistInterface_GetAimAssistSocketComponent) == 0x000008, "Wrong alignment on AimAssistInterface_GetAimAssistSocketComponent");
static_assert(sizeof(AimAssistInterface_GetAimAssistSocketComponent) == 0x000008, "Wrong size on AimAssistInterface_GetAimAssistSocketComponent");
static_assert(offsetof(AimAssistInterface_GetAimAssistSocketComponent, ReturnValue) == 0x000000, "Member 'AimAssistInterface_GetAimAssistSocketComponent::ReturnValue' has a wrong offset!");

// Function ObsidianFox.AimAssistInterface.GetAimAssistSockets
// 0x0018 (0x0018 - 0x0000)
struct AimAssistInterface_GetAimAssistSockets final
{
public:
	bool                                          bIncludeMainAimSocket;                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AimAssistInterface_GetAimAssistSockets) == 0x000008, "Wrong alignment on AimAssistInterface_GetAimAssistSockets");
static_assert(sizeof(AimAssistInterface_GetAimAssistSockets) == 0x000018, "Wrong size on AimAssistInterface_GetAimAssistSockets");
static_assert(offsetof(AimAssistInterface_GetAimAssistSockets, bIncludeMainAimSocket) == 0x000000, "Member 'AimAssistInterface_GetAimAssistSockets::bIncludeMainAimSocket' has a wrong offset!");
static_assert(offsetof(AimAssistInterface_GetAimAssistSockets, ReturnValue) == 0x000008, "Member 'AimAssistInterface_GetAimAssistSockets::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.OFPlayerController.InputTypeChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct OFPlayerController_InputTypeChanged__DelegateSignature final
{
public:
	bool                                          IsGamepadType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFPlayerController_InputTypeChanged__DelegateSignature) == 0x000001, "Wrong alignment on OFPlayerController_InputTypeChanged__DelegateSignature");
static_assert(sizeof(OFPlayerController_InputTypeChanged__DelegateSignature) == 0x000001, "Wrong size on OFPlayerController_InputTypeChanged__DelegateSignature");
static_assert(offsetof(OFPlayerController_InputTypeChanged__DelegateSignature, IsGamepadType) == 0x000000, "Member 'OFPlayerController_InputTypeChanged__DelegateSignature::IsGamepadType' has a wrong offset!");

// Function ObsidianFox.OFPlayerController.IsGameplayInputIgnoredBranched
// 0x0001 (0x0001 - 0x0000)
struct OFPlayerController_IsGameplayInputIgnoredBranched final
{
public:
	EInputIgnoreBranch                            Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFPlayerController_IsGameplayInputIgnoredBranched) == 0x000001, "Wrong alignment on OFPlayerController_IsGameplayInputIgnoredBranched");
static_assert(sizeof(OFPlayerController_IsGameplayInputIgnoredBranched) == 0x000001, "Wrong size on OFPlayerController_IsGameplayInputIgnoredBranched");
static_assert(offsetof(OFPlayerController_IsGameplayInputIgnoredBranched, Branches) == 0x000000, "Member 'OFPlayerController_IsGameplayInputIgnoredBranched::Branches' has a wrong offset!");

// Function ObsidianFox.OFPlayerController.OnCharacterPosessed
// 0x0008 (0x0008 - 0x0000)
struct OFPlayerController_OnCharacterPosessed final
{
public:
	const class AOFPlayerCharacter*               PossesedCharacter;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFPlayerController_OnCharacterPosessed) == 0x000008, "Wrong alignment on OFPlayerController_OnCharacterPosessed");
static_assert(sizeof(OFPlayerController_OnCharacterPosessed) == 0x000008, "Wrong size on OFPlayerController_OnCharacterPosessed");
static_assert(offsetof(OFPlayerController_OnCharacterPosessed, PossesedCharacter) == 0x000000, "Member 'OFPlayerController_OnCharacterPosessed::PossesedCharacter' has a wrong offset!");

// Function ObsidianFox.OFPlayerController.OnSettingsChanged
// 0x0008 (0x0008 - 0x0000)
struct OFPlayerController_OnSettingsChanged final
{
public:
	class UOFGameUserSettings*                    Settings;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFPlayerController_OnSettingsChanged) == 0x000008, "Wrong alignment on OFPlayerController_OnSettingsChanged");
static_assert(sizeof(OFPlayerController_OnSettingsChanged) == 0x000008, "Wrong size on OFPlayerController_OnSettingsChanged");
static_assert(offsetof(OFPlayerController_OnSettingsChanged, Settings) == 0x000000, "Member 'OFPlayerController_OnSettingsChanged::Settings' has a wrong offset!");

// Function ObsidianFox.OFPlayerController.SetIgnoreGameplayInput
// 0x0001 (0x0001 - 0x0000)
struct OFPlayerController_SetIgnoreGameplayInput final
{
public:
	bool                                          bNewGameplayInput;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFPlayerController_SetIgnoreGameplayInput) == 0x000001, "Wrong alignment on OFPlayerController_SetIgnoreGameplayInput");
static_assert(sizeof(OFPlayerController_SetIgnoreGameplayInput) == 0x000001, "Wrong size on OFPlayerController_SetIgnoreGameplayInput");
static_assert(offsetof(OFPlayerController_SetIgnoreGameplayInput, bNewGameplayInput) == 0x000000, "Member 'OFPlayerController_SetIgnoreGameplayInput::bNewGameplayInput' has a wrong offset!");

// Function ObsidianFox.OFPlayerController.GetInGameUIWidget
// 0x0008 (0x0008 - 0x0000)
struct OFPlayerController_GetInGameUIWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFPlayerController_GetInGameUIWidget) == 0x000008, "Wrong alignment on OFPlayerController_GetInGameUIWidget");
static_assert(sizeof(OFPlayerController_GetInGameUIWidget) == 0x000008, "Wrong size on OFPlayerController_GetInGameUIWidget");
static_assert(offsetof(OFPlayerController_GetInGameUIWidget, ReturnValue) == 0x000000, "Member 'OFPlayerController_GetInGameUIWidget::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFPlayerController.IsGamepadLastInputTypeUsed
// 0x0001 (0x0001 - 0x0000)
struct OFPlayerController_IsGamepadLastInputTypeUsed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFPlayerController_IsGamepadLastInputTypeUsed) == 0x000001, "Wrong alignment on OFPlayerController_IsGamepadLastInputTypeUsed");
static_assert(sizeof(OFPlayerController_IsGamepadLastInputTypeUsed) == 0x000001, "Wrong size on OFPlayerController_IsGamepadLastInputTypeUsed");
static_assert(offsetof(OFPlayerController_IsGamepadLastInputTypeUsed, ReturnValue) == 0x000000, "Member 'OFPlayerController_IsGamepadLastInputTypeUsed::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFPlayerController.IsGameplayInputIgnored
// 0x0001 (0x0001 - 0x0000)
struct OFPlayerController_IsGameplayInputIgnored final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFPlayerController_IsGameplayInputIgnored) == 0x000001, "Wrong alignment on OFPlayerController_IsGameplayInputIgnored");
static_assert(sizeof(OFPlayerController_IsGameplayInputIgnored) == 0x000001, "Wrong size on OFPlayerController_IsGameplayInputIgnored");
static_assert(offsetof(OFPlayerController_IsGameplayInputIgnored, ReturnValue) == 0x000000, "Member 'OFPlayerController_IsGameplayInputIgnored::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFPlayerController.IsInCinematicMode
// 0x0001 (0x0001 - 0x0000)
struct OFPlayerController_IsInCinematicMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFPlayerController_IsInCinematicMode) == 0x000001, "Wrong alignment on OFPlayerController_IsInCinematicMode");
static_assert(sizeof(OFPlayerController_IsInCinematicMode) == 0x000001, "Wrong size on OFPlayerController_IsInCinematicMode");
static_assert(offsetof(OFPlayerController_IsInCinematicMode, ReturnValue) == 0x000000, "Member 'OFPlayerController_IsInCinematicMode::ReturnValue' has a wrong offset!");

// Function ObsidianFox.AlternativeEndingCharacterAnimInstance.OnTransitionAnimationFinished
// 0x0001 (0x0001 - 0x0000)
struct AlternativeEndingCharacterAnimInstance_OnTransitionAnimationFinished final
{
public:
	bool                                          PlayAlternativeEnding;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AlternativeEndingCharacterAnimInstance_OnTransitionAnimationFinished) == 0x000001, "Wrong alignment on AlternativeEndingCharacterAnimInstance_OnTransitionAnimationFinished");
static_assert(sizeof(AlternativeEndingCharacterAnimInstance_OnTransitionAnimationFinished) == 0x000001, "Wrong size on AlternativeEndingCharacterAnimInstance_OnTransitionAnimationFinished");
static_assert(offsetof(AlternativeEndingCharacterAnimInstance_OnTransitionAnimationFinished, PlayAlternativeEnding) == 0x000000, "Member 'AlternativeEndingCharacterAnimInstance_OnTransitionAnimationFinished::PlayAlternativeEnding' has a wrong offset!");

// Function ObsidianFox.OFBFL_Math.AbsMax_FloatFloat
// 0x000C (0x000C - 0x0000)
struct OFBFL_Math_AbsMax_FloatFloat final
{
public:
	float                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_Math_AbsMax_FloatFloat) == 0x000004, "Wrong alignment on OFBFL_Math_AbsMax_FloatFloat");
static_assert(sizeof(OFBFL_Math_AbsMax_FloatFloat) == 0x00000C, "Wrong size on OFBFL_Math_AbsMax_FloatFloat");
static_assert(offsetof(OFBFL_Math_AbsMax_FloatFloat, A) == 0x000000, "Member 'OFBFL_Math_AbsMax_FloatFloat::A' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_AbsMax_FloatFloat, B) == 0x000004, "Member 'OFBFL_Math_AbsMax_FloatFloat::B' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_AbsMax_FloatFloat, ReturnValue) == 0x000008, "Member 'OFBFL_Math_AbsMax_FloatFloat::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_Math.DebugDrawFrustum
// 0x01A0 (0x01A0 - 0x0000)
struct OFBFL_Math_DebugDrawFrustum final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrustumData                           FrustumData;                                       // 0x0010(0x0180)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0190(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_Math_DebugDrawFrustum) == 0x000010, "Wrong alignment on OFBFL_Math_DebugDrawFrustum");
static_assert(sizeof(OFBFL_Math_DebugDrawFrustum) == 0x0001A0, "Wrong size on OFBFL_Math_DebugDrawFrustum");
static_assert(offsetof(OFBFL_Math_DebugDrawFrustum, WorldContextObject) == 0x000000, "Member 'OFBFL_Math_DebugDrawFrustum::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_DebugDrawFrustum, FrustumData) == 0x000010, "Member 'OFBFL_Math_DebugDrawFrustum::FrustumData' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_DebugDrawFrustum, Color) == 0x000190, "Member 'OFBFL_Math_DebugDrawFrustum::Color' has a wrong offset!");

// Function ObsidianFox.OFBFL_Math.DoesFrustumIntersectPoint
// 0x0190 (0x0190 - 0x0000)
struct OFBFL_Math_DoesFrustumIntersectPoint final
{
public:
	struct FFrustumData                           FrustumData;                                       // 0x0000(0x0180)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0180(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x018C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18D[0x3];                                      // 0x018D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFBFL_Math_DoesFrustumIntersectPoint) == 0x000010, "Wrong alignment on OFBFL_Math_DoesFrustumIntersectPoint");
static_assert(sizeof(OFBFL_Math_DoesFrustumIntersectPoint) == 0x000190, "Wrong size on OFBFL_Math_DoesFrustumIntersectPoint");
static_assert(offsetof(OFBFL_Math_DoesFrustumIntersectPoint, FrustumData) == 0x000000, "Member 'OFBFL_Math_DoesFrustumIntersectPoint::FrustumData' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_DoesFrustumIntersectPoint, Point) == 0x000180, "Member 'OFBFL_Math_DoesFrustumIntersectPoint::Point' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_DoesFrustumIntersectPoint, ReturnValue) == 0x00018C, "Member 'OFBFL_Math_DoesFrustumIntersectPoint::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_Math.DrawDebugCircleSegment
// 0x0058 (0x0058 - 0x0000)
struct OFBFL_Math_DrawDebugCircleSegment final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleDegrees;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Resolution;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngleAxis;                                         // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartDirection;                                    // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0038(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lifetime;                                          // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DepthPriority;                                     // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Thickness;                                         // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRenderClockWise;                                  // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRenderEdges;                                      // 0x0055(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFBFL_Math_DrawDebugCircleSegment) == 0x000008, "Wrong alignment on OFBFL_Math_DrawDebugCircleSegment");
static_assert(sizeof(OFBFL_Math_DrawDebugCircleSegment) == 0x000058, "Wrong size on OFBFL_Math_DrawDebugCircleSegment");
static_assert(offsetof(OFBFL_Math_DrawDebugCircleSegment, WorldContextObject) == 0x000000, "Member 'OFBFL_Math_DrawDebugCircleSegment::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_DrawDebugCircleSegment, Origin) == 0x000008, "Member 'OFBFL_Math_DrawDebugCircleSegment::Origin' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_DrawDebugCircleSegment, AngleDegrees) == 0x000014, "Member 'OFBFL_Math_DrawDebugCircleSegment::AngleDegrees' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_DrawDebugCircleSegment, Resolution) == 0x000018, "Member 'OFBFL_Math_DrawDebugCircleSegment::Resolution' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_DrawDebugCircleSegment, AngleAxis) == 0x00001C, "Member 'OFBFL_Math_DrawDebugCircleSegment::AngleAxis' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_DrawDebugCircleSegment, StartDirection) == 0x000028, "Member 'OFBFL_Math_DrawDebugCircleSegment::StartDirection' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_DrawDebugCircleSegment, Radius) == 0x000034, "Member 'OFBFL_Math_DrawDebugCircleSegment::Radius' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_DrawDebugCircleSegment, Color) == 0x000038, "Member 'OFBFL_Math_DrawDebugCircleSegment::Color' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_DrawDebugCircleSegment, Lifetime) == 0x000048, "Member 'OFBFL_Math_DrawDebugCircleSegment::Lifetime' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_DrawDebugCircleSegment, DepthPriority) == 0x00004C, "Member 'OFBFL_Math_DrawDebugCircleSegment::DepthPriority' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_DrawDebugCircleSegment, Thickness) == 0x000050, "Member 'OFBFL_Math_DrawDebugCircleSegment::Thickness' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_DrawDebugCircleSegment, bRenderClockWise) == 0x000054, "Member 'OFBFL_Math_DrawDebugCircleSegment::bRenderClockWise' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_DrawDebugCircleSegment, bRenderEdges) == 0x000055, "Member 'OFBFL_Math_DrawDebugCircleSegment::bRenderEdges' has a wrong offset!");

// Function ObsidianFox.OFBFL_Math.FindAngleBetweenVectors
// 0x001C (0x001C - 0x0000)
struct OFBFL_Math_FindAngleBetweenVectors final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_Math_FindAngleBetweenVectors) == 0x000004, "Wrong alignment on OFBFL_Math_FindAngleBetweenVectors");
static_assert(sizeof(OFBFL_Math_FindAngleBetweenVectors) == 0x00001C, "Wrong size on OFBFL_Math_FindAngleBetweenVectors");
static_assert(offsetof(OFBFL_Math_FindAngleBetweenVectors, A) == 0x000000, "Member 'OFBFL_Math_FindAngleBetweenVectors::A' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_FindAngleBetweenVectors, B) == 0x00000C, "Member 'OFBFL_Math_FindAngleBetweenVectors::B' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_FindAngleBetweenVectors, ReturnValue) == 0x000018, "Member 'OFBFL_Math_FindAngleBetweenVectors::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_Math.GetAngleToVector2D
// 0x001C (0x001C - 0x0000)
struct OFBFL_Math_GetAngleToVector2D final
{
public:
	struct FVector                                OriginDirection;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DestinationDirection;                              // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_Math_GetAngleToVector2D) == 0x000004, "Wrong alignment on OFBFL_Math_GetAngleToVector2D");
static_assert(sizeof(OFBFL_Math_GetAngleToVector2D) == 0x00001C, "Wrong size on OFBFL_Math_GetAngleToVector2D");
static_assert(offsetof(OFBFL_Math_GetAngleToVector2D, OriginDirection) == 0x000000, "Member 'OFBFL_Math_GetAngleToVector2D::OriginDirection' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_GetAngleToVector2D, DestinationDirection) == 0x00000C, "Member 'OFBFL_Math_GetAngleToVector2D::DestinationDirection' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_GetAngleToVector2D, ReturnValue) == 0x000018, "Member 'OFBFL_Math_GetAngleToVector2D::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_Math.GetFrustumData
// 0x01B0 (0x01B0 - 0x0000)
struct OFBFL_Math_GetFrustumData final
{
public:
	struct FFrustumSettings                       FrustumSettings;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               FrustumRotation;                                   // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                FrustumLocation;                                   // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrustumData                           ReturnValue;                                       // 0x0030(0x0180)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_Math_GetFrustumData) == 0x000010, "Wrong alignment on OFBFL_Math_GetFrustumData");
static_assert(sizeof(OFBFL_Math_GetFrustumData) == 0x0001B0, "Wrong size on OFBFL_Math_GetFrustumData");
static_assert(offsetof(OFBFL_Math_GetFrustumData, FrustumSettings) == 0x000000, "Member 'OFBFL_Math_GetFrustumData::FrustumSettings' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_GetFrustumData, FrustumRotation) == 0x000010, "Member 'OFBFL_Math_GetFrustumData::FrustumRotation' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_GetFrustumData, FrustumLocation) == 0x00001C, "Member 'OFBFL_Math_GetFrustumData::FrustumLocation' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_GetFrustumData, ReturnValue) == 0x000030, "Member 'OFBFL_Math_GetFrustumData::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_Math.GetHitQuadrantFromHitResult
// 0x008C (0x008C - 0x0000)
struct OFBFL_Math_GetHitQuadrantFromHitResult final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ECardinalDirection                            ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFBFL_Math_GetHitQuadrantFromHitResult) == 0x000004, "Wrong alignment on OFBFL_Math_GetHitQuadrantFromHitResult");
static_assert(sizeof(OFBFL_Math_GetHitQuadrantFromHitResult) == 0x00008C, "Wrong size on OFBFL_Math_GetHitQuadrantFromHitResult");
static_assert(offsetof(OFBFL_Math_GetHitQuadrantFromHitResult, HitResult) == 0x000000, "Member 'OFBFL_Math_GetHitQuadrantFromHitResult::HitResult' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_GetHitQuadrantFromHitResult, ReturnValue) == 0x000088, "Member 'OFBFL_Math_GetHitQuadrantFromHitResult::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_Math.GetQuadrantFromDirection
// 0x001C (0x001C - 0x0000)
struct OFBFL_Math_GetQuadrantFromDirection final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Forward;                                           // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECardinalDirection                            ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFBFL_Math_GetQuadrantFromDirection) == 0x000004, "Wrong alignment on OFBFL_Math_GetQuadrantFromDirection");
static_assert(sizeof(OFBFL_Math_GetQuadrantFromDirection) == 0x00001C, "Wrong size on OFBFL_Math_GetQuadrantFromDirection");
static_assert(offsetof(OFBFL_Math_GetQuadrantFromDirection, Direction) == 0x000000, "Member 'OFBFL_Math_GetQuadrantFromDirection::Direction' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_GetQuadrantFromDirection, Forward) == 0x00000C, "Member 'OFBFL_Math_GetQuadrantFromDirection::Forward' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_GetQuadrantFromDirection, ReturnValue) == 0x000018, "Member 'OFBFL_Math_GetQuadrantFromDirection::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_Math.RotateAroundObject
// 0x0018 (0x0018 - 0x0000)
struct OFBFL_Math_RotateAroundObject final
{
public:
	class AActor*                                 ObjectToRotate;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USceneComponent*                  ObjectToRotateAround;                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Degrees;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFBFL_Math_RotateAroundObject) == 0x000008, "Wrong alignment on OFBFL_Math_RotateAroundObject");
static_assert(sizeof(OFBFL_Math_RotateAroundObject) == 0x000018, "Wrong size on OFBFL_Math_RotateAroundObject");
static_assert(offsetof(OFBFL_Math_RotateAroundObject, ObjectToRotate) == 0x000000, "Member 'OFBFL_Math_RotateAroundObject::ObjectToRotate' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_RotateAroundObject, ObjectToRotateAround) == 0x000008, "Member 'OFBFL_Math_RotateAroundObject::ObjectToRotateAround' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_RotateAroundObject, Degrees) == 0x000010, "Member 'OFBFL_Math_RotateAroundObject::Degrees' has a wrong offset!");

// Function ObsidianFox.OFBFL_Math.SmoothStep
// 0x0010 (0x0010 - 0x0000)
struct OFBFL_Math_SmoothStep final
{
public:
	float                                         A;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_Math_SmoothStep) == 0x000004, "Wrong alignment on OFBFL_Math_SmoothStep");
static_assert(sizeof(OFBFL_Math_SmoothStep) == 0x000010, "Wrong size on OFBFL_Math_SmoothStep");
static_assert(offsetof(OFBFL_Math_SmoothStep, A) == 0x000000, "Member 'OFBFL_Math_SmoothStep::A' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_SmoothStep, B) == 0x000004, "Member 'OFBFL_Math_SmoothStep::B' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_SmoothStep, X) == 0x000008, "Member 'OFBFL_Math_SmoothStep::X' has a wrong offset!");
static_assert(offsetof(OFBFL_Math_SmoothStep, ReturnValue) == 0x00000C, "Member 'OFBFL_Math_SmoothStep::ReturnValue' has a wrong offset!");

// Function ObsidianFox.AnimationHitReactionInterface.TriggerAnimationBlueprintHitReaction
// 0x00E0 (0x00E0 - 0x0000)
struct AnimationHitReactionInterface_TriggerAnimationBlueprintHitReaction final
{
public:
	struct FHitReactionData                       HitReactionData;                                   // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationHitReactionInterface_TriggerAnimationBlueprintHitReaction) == 0x000008, "Wrong alignment on AnimationHitReactionInterface_TriggerAnimationBlueprintHitReaction");
static_assert(sizeof(AnimationHitReactionInterface_TriggerAnimationBlueprintHitReaction) == 0x0000E0, "Wrong size on AnimationHitReactionInterface_TriggerAnimationBlueprintHitReaction");
static_assert(offsetof(AnimationHitReactionInterface_TriggerAnimationBlueprintHitReaction, HitReactionData) == 0x000000, "Member 'AnimationHitReactionInterface_TriggerAnimationBlueprintHitReaction::HitReactionData' has a wrong offset!");

// Function ObsidianFox.OFBlueprintUtils.GetBestPointForAttacking
// 0x0038 (0x0038 - 0x0000)
struct OFBlueprintUtils_GetBestPointForAttacking final
{
public:
	struct FVector                                CurrentPos;                                        // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetPos;                                         // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        PointsArray;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintUtils_GetBestPointForAttacking) == 0x000008, "Wrong alignment on OFBlueprintUtils_GetBestPointForAttacking");
static_assert(sizeof(OFBlueprintUtils_GetBestPointForAttacking) == 0x000038, "Wrong size on OFBlueprintUtils_GetBestPointForAttacking");
static_assert(offsetof(OFBlueprintUtils_GetBestPointForAttacking, CurrentPos) == 0x000000, "Member 'OFBlueprintUtils_GetBestPointForAttacking::CurrentPos' has a wrong offset!");
static_assert(offsetof(OFBlueprintUtils_GetBestPointForAttacking, TargetPos) == 0x00000C, "Member 'OFBlueprintUtils_GetBestPointForAttacking::TargetPos' has a wrong offset!");
static_assert(offsetof(OFBlueprintUtils_GetBestPointForAttacking, PointsArray) == 0x000018, "Member 'OFBlueprintUtils_GetBestPointForAttacking::PointsArray' has a wrong offset!");
static_assert(offsetof(OFBlueprintUtils_GetBestPointForAttacking, Tolerance) == 0x000028, "Member 'OFBlueprintUtils_GetBestPointForAttacking::Tolerance' has a wrong offset!");
static_assert(offsetof(OFBlueprintUtils_GetBestPointForAttacking, ReturnValue) == 0x00002C, "Member 'OFBlueprintUtils_GetBestPointForAttacking::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintUtils.GetGameVersion
// 0x0010 (0x0010 - 0x0000)
struct OFBlueprintUtils_GetGameVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintUtils_GetGameVersion) == 0x000008, "Wrong alignment on OFBlueprintUtils_GetGameVersion");
static_assert(sizeof(OFBlueprintUtils_GetGameVersion) == 0x000010, "Wrong size on OFBlueprintUtils_GetGameVersion");
static_assert(offsetof(OFBlueprintUtils_GetGameVersion, ReturnValue) == 0x000000, "Member 'OFBlueprintUtils_GetGameVersion::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintUtils.GetGlobalListOfLevelsToIgnoreForPreStreaming
// 0x0010 (0x0010 - 0x0000)
struct OFBlueprintUtils_GetGlobalListOfLevelsToIgnoreForPreStreaming final
{
public:
	TArray<TSoftObjectPtr<class UWorld>>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintUtils_GetGlobalListOfLevelsToIgnoreForPreStreaming) == 0x000008, "Wrong alignment on OFBlueprintUtils_GetGlobalListOfLevelsToIgnoreForPreStreaming");
static_assert(sizeof(OFBlueprintUtils_GetGlobalListOfLevelsToIgnoreForPreStreaming) == 0x000010, "Wrong size on OFBlueprintUtils_GetGlobalListOfLevelsToIgnoreForPreStreaming");
static_assert(offsetof(OFBlueprintUtils_GetGlobalListOfLevelsToIgnoreForPreStreaming, ReturnValue) == 0x000000, "Member 'OFBlueprintUtils_GetGlobalListOfLevelsToIgnoreForPreStreaming::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintUtils.IsWithEditor
// 0x0001 (0x0001 - 0x0000)
struct OFBlueprintUtils_IsWithEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintUtils_IsWithEditor) == 0x000001, "Wrong alignment on OFBlueprintUtils_IsWithEditor");
static_assert(sizeof(OFBlueprintUtils_IsWithEditor) == 0x000001, "Wrong size on OFBlueprintUtils_IsWithEditor");
static_assert(offsetof(OFBlueprintUtils_IsWithEditor, ReturnValue) == 0x000000, "Member 'OFBlueprintUtils_IsWithEditor::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintUtils.RebuildNavmesh
// 0x0008 (0x0008 - 0x0000)
struct OFBlueprintUtils_RebuildNavmesh final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintUtils_RebuildNavmesh) == 0x000008, "Wrong alignment on OFBlueprintUtils_RebuildNavmesh");
static_assert(sizeof(OFBlueprintUtils_RebuildNavmesh) == 0x000008, "Wrong size on OFBlueprintUtils_RebuildNavmesh");
static_assert(offsetof(OFBlueprintUtils_RebuildNavmesh, WorldContextObject) == 0x000000, "Member 'OFBlueprintUtils_RebuildNavmesh::WorldContextObject' has a wrong offset!");

// Function ObsidianFox.OFBlueprintUtils.WaitForAssetStreamingToComplete
// 0x0008 (0x0008 - 0x0000)
struct OFBlueprintUtils_WaitForAssetStreamingToComplete final
{
public:
	float                                         Timeout;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintUtils_WaitForAssetStreamingToComplete) == 0x000004, "Wrong alignment on OFBlueprintUtils_WaitForAssetStreamingToComplete");
static_assert(sizeof(OFBlueprintUtils_WaitForAssetStreamingToComplete) == 0x000008, "Wrong size on OFBlueprintUtils_WaitForAssetStreamingToComplete");
static_assert(offsetof(OFBlueprintUtils_WaitForAssetStreamingToComplete, Timeout) == 0x000000, "Member 'OFBlueprintUtils_WaitForAssetStreamingToComplete::Timeout' has a wrong offset!");
static_assert(offsetof(OFBlueprintUtils_WaitForAssetStreamingToComplete, ReturnValue) == 0x000004, "Member 'OFBlueprintUtils_WaitForAssetStreamingToComplete::ReturnValue' has a wrong offset!");

// Function ObsidianFox.AnimationRagdollInterface.BeginBasicRagdoll
// 0x0028 (0x0028 - 0x0000)
struct AnimationRagdollInterface_BeginBasicRagdoll final
{
public:
	class UObject*                                SessionOwner;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RootBoneName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRagdollWeightCurves                   WeightCurveNames;                                  // 0x0018(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationRagdollInterface_BeginBasicRagdoll) == 0x000008, "Wrong alignment on AnimationRagdollInterface_BeginBasicRagdoll");
static_assert(sizeof(AnimationRagdollInterface_BeginBasicRagdoll) == 0x000028, "Wrong size on AnimationRagdollInterface_BeginBasicRagdoll");
static_assert(offsetof(AnimationRagdollInterface_BeginBasicRagdoll, SessionOwner) == 0x000000, "Member 'AnimationRagdollInterface_BeginBasicRagdoll::SessionOwner' has a wrong offset!");
static_assert(offsetof(AnimationRagdollInterface_BeginBasicRagdoll, RootBoneName) == 0x000008, "Member 'AnimationRagdollInterface_BeginBasicRagdoll::RootBoneName' has a wrong offset!");
static_assert(offsetof(AnimationRagdollInterface_BeginBasicRagdoll, ProfileName) == 0x000010, "Member 'AnimationRagdollInterface_BeginBasicRagdoll::ProfileName' has a wrong offset!");
static_assert(offsetof(AnimationRagdollInterface_BeginBasicRagdoll, WeightCurveNames) == 0x000018, "Member 'AnimationRagdollInterface_BeginBasicRagdoll::WeightCurveNames' has a wrong offset!");

// Function ObsidianFox.AnimationRagdollInterface.BeginVelocityBlendOutRagdoll
// 0x0048 (0x0048 - 0x0000)
struct AnimationRagdollInterface_BeginVelocityBlendOutRagdoll final
{
public:
	class UObject*                                SessionOwner;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RootBoneName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRagdollWeightCurves                   WeightCurveNames;                                  // 0x0018(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FRagdollAutoBlendOutParameters         ExtraParameters;                                   // 0x0028(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             BlendOutBeginEvent;                                // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationRagdollInterface_BeginVelocityBlendOutRagdoll) == 0x000008, "Wrong alignment on AnimationRagdollInterface_BeginVelocityBlendOutRagdoll");
static_assert(sizeof(AnimationRagdollInterface_BeginVelocityBlendOutRagdoll) == 0x000048, "Wrong size on AnimationRagdollInterface_BeginVelocityBlendOutRagdoll");
static_assert(offsetof(AnimationRagdollInterface_BeginVelocityBlendOutRagdoll, SessionOwner) == 0x000000, "Member 'AnimationRagdollInterface_BeginVelocityBlendOutRagdoll::SessionOwner' has a wrong offset!");
static_assert(offsetof(AnimationRagdollInterface_BeginVelocityBlendOutRagdoll, RootBoneName) == 0x000008, "Member 'AnimationRagdollInterface_BeginVelocityBlendOutRagdoll::RootBoneName' has a wrong offset!");
static_assert(offsetof(AnimationRagdollInterface_BeginVelocityBlendOutRagdoll, ProfileName) == 0x000010, "Member 'AnimationRagdollInterface_BeginVelocityBlendOutRagdoll::ProfileName' has a wrong offset!");
static_assert(offsetof(AnimationRagdollInterface_BeginVelocityBlendOutRagdoll, WeightCurveNames) == 0x000018, "Member 'AnimationRagdollInterface_BeginVelocityBlendOutRagdoll::WeightCurveNames' has a wrong offset!");
static_assert(offsetof(AnimationRagdollInterface_BeginVelocityBlendOutRagdoll, ExtraParameters) == 0x000028, "Member 'AnimationRagdollInterface_BeginVelocityBlendOutRagdoll::ExtraParameters' has a wrong offset!");
static_assert(offsetof(AnimationRagdollInterface_BeginVelocityBlendOutRagdoll, BlendOutBeginEvent) == 0x000038, "Member 'AnimationRagdollInterface_BeginVelocityBlendOutRagdoll::BlendOutBeginEvent' has a wrong offset!");

// Function ObsidianFox.AnimationRagdollInterface.EndRagdoll
// 0x0010 (0x0010 - 0x0000)
struct AnimationRagdollInterface_EndRagdoll final
{
public:
	class UObject*                                SessionOwner;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SnapshotName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationRagdollInterface_EndRagdoll) == 0x000008, "Wrong alignment on AnimationRagdollInterface_EndRagdoll");
static_assert(sizeof(AnimationRagdollInterface_EndRagdoll) == 0x000010, "Wrong size on AnimationRagdollInterface_EndRagdoll");
static_assert(offsetof(AnimationRagdollInterface_EndRagdoll, SessionOwner) == 0x000000, "Member 'AnimationRagdollInterface_EndRagdoll::SessionOwner' has a wrong offset!");
static_assert(offsetof(AnimationRagdollInterface_EndRagdoll, SnapshotName) == 0x000008, "Member 'AnimationRagdollInterface_EndRagdoll::SnapshotName' has a wrong offset!");

// Function ObsidianFox.AnimationRagdollInterface.OnRagdollNotifyBegin
// 0x0028 (0x0028 - 0x0000)
struct AnimationRagdollInterface_OnRagdollNotifyBegin final
{
public:
	class UObject*                                SessionOwner;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RagdollRootBone;                                   // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRagdollWeightCurves                   WeightCurveNames;                                  // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationRagdollInterface_OnRagdollNotifyBegin) == 0x000008, "Wrong alignment on AnimationRagdollInterface_OnRagdollNotifyBegin");
static_assert(sizeof(AnimationRagdollInterface_OnRagdollNotifyBegin) == 0x000028, "Wrong size on AnimationRagdollInterface_OnRagdollNotifyBegin");
static_assert(offsetof(AnimationRagdollInterface_OnRagdollNotifyBegin, SessionOwner) == 0x000000, "Member 'AnimationRagdollInterface_OnRagdollNotifyBegin::SessionOwner' has a wrong offset!");
static_assert(offsetof(AnimationRagdollInterface_OnRagdollNotifyBegin, RagdollRootBone) == 0x000008, "Member 'AnimationRagdollInterface_OnRagdollNotifyBegin::RagdollRootBone' has a wrong offset!");
static_assert(offsetof(AnimationRagdollInterface_OnRagdollNotifyBegin, ProfileName) == 0x000010, "Member 'AnimationRagdollInterface_OnRagdollNotifyBegin::ProfileName' has a wrong offset!");
static_assert(offsetof(AnimationRagdollInterface_OnRagdollNotifyBegin, WeightCurveNames) == 0x000018, "Member 'AnimationRagdollInterface_OnRagdollNotifyBegin::WeightCurveNames' has a wrong offset!");

// Function ObsidianFox.AnimationRagdollInterface.OnRagdollNotifyEnd
// 0x0018 (0x0018 - 0x0000)
struct AnimationRagdollInterface_OnRagdollNotifyEnd final
{
public:
	class UObject*                                SessionOwner;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SnapshotName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepRagdollAfterNotifyEnd;                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimationRagdollInterface_OnRagdollNotifyEnd) == 0x000008, "Wrong alignment on AnimationRagdollInterface_OnRagdollNotifyEnd");
static_assert(sizeof(AnimationRagdollInterface_OnRagdollNotifyEnd) == 0x000018, "Wrong size on AnimationRagdollInterface_OnRagdollNotifyEnd");
static_assert(offsetof(AnimationRagdollInterface_OnRagdollNotifyEnd, SessionOwner) == 0x000000, "Member 'AnimationRagdollInterface_OnRagdollNotifyEnd::SessionOwner' has a wrong offset!");
static_assert(offsetof(AnimationRagdollInterface_OnRagdollNotifyEnd, SnapshotName) == 0x000008, "Member 'AnimationRagdollInterface_OnRagdollNotifyEnd::SnapshotName' has a wrong offset!");
static_assert(offsetof(AnimationRagdollInterface_OnRagdollNotifyEnd, bKeepRagdollAfterNotifyEnd) == 0x000010, "Member 'AnimationRagdollInterface_OnRagdollNotifyEnd::bKeepRagdollAfterNotifyEnd' has a wrong offset!");

// Function ObsidianFox.AnimComponent.Blueprint_Update
// 0x0004 (0x0004 - 0x0000)
struct AnimComponent_Blueprint_Update final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimComponent_Blueprint_Update) == 0x000004, "Wrong alignment on AnimComponent_Blueprint_Update");
static_assert(sizeof(AnimComponent_Blueprint_Update) == 0x000004, "Wrong size on AnimComponent_Blueprint_Update");
static_assert(offsetof(AnimComponent_Blueprint_Update, DeltaTime) == 0x000000, "Member 'AnimComponent_Blueprint_Update::DeltaTime' has a wrong offset!");

// Function ObsidianFox.AnimComponent.OnPreSave
// 0x0004 (0x0004 - 0x0000)
struct AnimComponent_OnPreSave final
{
public:
	ESaveTypePolicy                               SaveTypePolicy;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimComponent_OnPreSave) == 0x000004, "Wrong alignment on AnimComponent_OnPreSave");
static_assert(sizeof(AnimComponent_OnPreSave) == 0x000004, "Wrong size on AnimComponent_OnPreSave");
static_assert(offsetof(AnimComponent_OnPreSave, SaveTypePolicy) == 0x000000, "Member 'AnimComponent_OnPreSave::SaveTypePolicy' has a wrong offset!");

// Function ObsidianFox.AnimComponentArmIK.GetEffectorData
// 0x0050 (0x0050 - 0x0000)
struct AnimComponentArmIK_GetEffectorData final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FKLocationBoneName;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FArmIKEffectorData                     ReturnValue;                                       // 0x0010(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimComponentArmIK_GetEffectorData) == 0x000004, "Wrong alignment on AnimComponentArmIK_GetEffectorData");
static_assert(sizeof(AnimComponentArmIK_GetEffectorData) == 0x000050, "Wrong size on AnimComponentArmIK_GetEffectorData");
static_assert(offsetof(AnimComponentArmIK_GetEffectorData, BoneName) == 0x000000, "Member 'AnimComponentArmIK_GetEffectorData::BoneName' has a wrong offset!");
static_assert(offsetof(AnimComponentArmIK_GetEffectorData, FKLocationBoneName) == 0x000008, "Member 'AnimComponentArmIK_GetEffectorData::FKLocationBoneName' has a wrong offset!");
static_assert(offsetof(AnimComponentArmIK_GetEffectorData, ReturnValue) == 0x000010, "Member 'AnimComponentArmIK_GetEffectorData::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFSpringArmComponent.OnAiming
// 0x0001 (0x0001 - 0x0000)
struct OFSpringArmComponent_OnAiming final
{
public:
	bool                                          bInIsAiming;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFSpringArmComponent_OnAiming) == 0x000001, "Wrong alignment on OFSpringArmComponent_OnAiming");
static_assert(sizeof(OFSpringArmComponent_OnAiming) == 0x000001, "Wrong size on OFSpringArmComponent_OnAiming");
static_assert(offsetof(OFSpringArmComponent_OnAiming, bInIsAiming) == 0x000000, "Member 'OFSpringArmComponent_OnAiming::bInIsAiming' has a wrong offset!");

// Function ObsidianFox.OFSpringArmComponent.StepLag
// 0x0001 (0x0001 - 0x0000)
struct OFSpringArmComponent_StepLag final
{
public:
	bool                                          bIsRunning;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFSpringArmComponent_StepLag) == 0x000001, "Wrong alignment on OFSpringArmComponent_StepLag");
static_assert(sizeof(OFSpringArmComponent_StepLag) == 0x000001, "Wrong size on OFSpringArmComponent_StepLag");
static_assert(offsetof(OFSpringArmComponent_StepLag, bIsRunning) == 0x000000, "Member 'OFSpringArmComponent_StepLag::bIsRunning' has a wrong offset!");

// Function ObsidianFox.AnimComponentDismemberment.TriggerDismemberment
// 0x0090 (0x0090 - 0x0000)
struct AnimComponentDismemberment_TriggerDismemberment final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         HitMagnitude;                                      // 0x0088(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsKillingHit;                                      // 0x008C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimComponentDismemberment_TriggerDismemberment) == 0x000004, "Wrong alignment on AnimComponentDismemberment_TriggerDismemberment");
static_assert(sizeof(AnimComponentDismemberment_TriggerDismemberment) == 0x000090, "Wrong size on AnimComponentDismemberment_TriggerDismemberment");
static_assert(offsetof(AnimComponentDismemberment_TriggerDismemberment, Hit) == 0x000000, "Member 'AnimComponentDismemberment_TriggerDismemberment::Hit' has a wrong offset!");
static_assert(offsetof(AnimComponentDismemberment_TriggerDismemberment, HitMagnitude) == 0x000088, "Member 'AnimComponentDismemberment_TriggerDismemberment::HitMagnitude' has a wrong offset!");
static_assert(offsetof(AnimComponentDismemberment_TriggerDismemberment, IsKillingHit) == 0x00008C, "Member 'AnimComponentDismemberment_TriggerDismemberment::IsKillingHit' has a wrong offset!");

// Function ObsidianFox.AnimComponentDismemberment.GetDismemberPointDataFromIndex
// 0x00B8 (0x00B8 - 0x0000)
struct AnimComponentDismemberment_GetDismemberPointDataFromIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDismemberPointData                    ReturnValue;                                       // 0x0008(0x00B0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimComponentDismemberment_GetDismemberPointDataFromIndex) == 0x000008, "Wrong alignment on AnimComponentDismemberment_GetDismemberPointDataFromIndex");
static_assert(sizeof(AnimComponentDismemberment_GetDismemberPointDataFromIndex) == 0x0000B8, "Wrong size on AnimComponentDismemberment_GetDismemberPointDataFromIndex");
static_assert(offsetof(AnimComponentDismemberment_GetDismemberPointDataFromIndex, Index_0) == 0x000000, "Member 'AnimComponentDismemberment_GetDismemberPointDataFromIndex::Index_0' has a wrong offset!");
static_assert(offsetof(AnimComponentDismemberment_GetDismemberPointDataFromIndex, ReturnValue) == 0x000008, "Member 'AnimComponentDismemberment_GetDismemberPointDataFromIndex::ReturnValue' has a wrong offset!");

// Function ObsidianFox.PauseInterface.OnPauseChanged
// 0x0001 (0x0001 - 0x0000)
struct PauseInterface_OnPauseChanged final
{
public:
	bool                                          bPaused;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PauseInterface_OnPauseChanged) == 0x000001, "Wrong alignment on PauseInterface_OnPauseChanged");
static_assert(sizeof(PauseInterface_OnPauseChanged) == 0x000001, "Wrong size on PauseInterface_OnPauseChanged");
static_assert(offsetof(PauseInterface_OnPauseChanged, bPaused) == 0x000000, "Member 'PauseInterface_OnPauseChanged::bPaused' has a wrong offset!");

// Function ObsidianFox.PauseInterface.GetRunningTimers
// 0x0010 (0x0010 - 0x0000)
struct PauseInterface_GetRunningTimers final
{
public:
	TArray<struct FTimerHandle>                   OutTimers;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PauseInterface_GetRunningTimers) == 0x000008, "Wrong alignment on PauseInterface_GetRunningTimers");
static_assert(sizeof(PauseInterface_GetRunningTimers) == 0x000010, "Wrong size on PauseInterface_GetRunningTimers");
static_assert(offsetof(PauseInterface_GetRunningTimers, OutTimers) == 0x000000, "Member 'PauseInterface_GetRunningTimers::OutTimers' has a wrong offset!");

// Function ObsidianFox.AnimComponentFootIK.AddIKModifier
// 0x0018 (0x0018 - 0x0000)
struct AnimComponentFootIK_AddIKModifier final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFootIKModifier>            ModifierClass;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFootIKModifier*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimComponentFootIK_AddIKModifier) == 0x000008, "Wrong alignment on AnimComponentFootIK_AddIKModifier");
static_assert(sizeof(AnimComponentFootIK_AddIKModifier) == 0x000018, "Wrong size on AnimComponentFootIK_AddIKModifier");
static_assert(offsetof(AnimComponentFootIK_AddIKModifier, BoneName) == 0x000000, "Member 'AnimComponentFootIK_AddIKModifier::BoneName' has a wrong offset!");
static_assert(offsetof(AnimComponentFootIK_AddIKModifier, ModifierClass) == 0x000008, "Member 'AnimComponentFootIK_AddIKModifier::ModifierClass' has a wrong offset!");
static_assert(offsetof(AnimComponentFootIK_AddIKModifier, ReturnValue) == 0x000010, "Member 'AnimComponentFootIK_AddIKModifier::ReturnValue' has a wrong offset!");

// Function ObsidianFox.AnimComponentFootIK.OnFootDown
// 0x0018 (0x0018 - 0x0000)
struct AnimComponentFootIK_OnFootDown final
{
public:
	struct FVector                                StepLocation;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFootType                                     FootStepType;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimComponentFootIK_OnFootDown) == 0x000004, "Wrong alignment on AnimComponentFootIK_OnFootDown");
static_assert(sizeof(AnimComponentFootIK_OnFootDown) == 0x000018, "Wrong size on AnimComponentFootIK_OnFootDown");
static_assert(offsetof(AnimComponentFootIK_OnFootDown, StepLocation) == 0x000000, "Member 'AnimComponentFootIK_OnFootDown::StepLocation' has a wrong offset!");
static_assert(offsetof(AnimComponentFootIK_OnFootDown, FootStepType) == 0x00000C, "Member 'AnimComponentFootIK_OnFootDown::FootStepType' has a wrong offset!");
static_assert(offsetof(AnimComponentFootIK_OnFootDown, BoneName) == 0x000010, "Member 'AnimComponentFootIK_OnFootDown::BoneName' has a wrong offset!");

// Function ObsidianFox.AnimComponentFootIK.OnFootUp
// 0x0018 (0x0018 - 0x0000)
struct AnimComponentFootIK_OnFootUp final
{
public:
	struct FVector                                StepLocation;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFootType                                     FootStepType;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimComponentFootIK_OnFootUp) == 0x000004, "Wrong alignment on AnimComponentFootIK_OnFootUp");
static_assert(sizeof(AnimComponentFootIK_OnFootUp) == 0x000018, "Wrong size on AnimComponentFootIK_OnFootUp");
static_assert(offsetof(AnimComponentFootIK_OnFootUp, StepLocation) == 0x000000, "Member 'AnimComponentFootIK_OnFootUp::StepLocation' has a wrong offset!");
static_assert(offsetof(AnimComponentFootIK_OnFootUp, FootStepType) == 0x00000C, "Member 'AnimComponentFootIK_OnFootUp::FootStepType' has a wrong offset!");
static_assert(offsetof(AnimComponentFootIK_OnFootUp, BoneName) == 0x000010, "Member 'AnimComponentFootIK_OnFootUp::BoneName' has a wrong offset!");

// Function ObsidianFox.AnimComponentFootIK.RemoveIKModifier
// 0x0010 (0x0010 - 0x0000)
struct AnimComponentFootIK_RemoveIKModifier final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFootIKModifier*                        Modifier;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimComponentFootIK_RemoveIKModifier) == 0x000008, "Wrong alignment on AnimComponentFootIK_RemoveIKModifier");
static_assert(sizeof(AnimComponentFootIK_RemoveIKModifier) == 0x000010, "Wrong size on AnimComponentFootIK_RemoveIKModifier");
static_assert(offsetof(AnimComponentFootIK_RemoveIKModifier, BoneName) == 0x000000, "Member 'AnimComponentFootIK_RemoveIKModifier::BoneName' has a wrong offset!");
static_assert(offsetof(AnimComponentFootIK_RemoveIKModifier, Modifier) == 0x000008, "Member 'AnimComponentFootIK_RemoveIKModifier::Modifier' has a wrong offset!");

// Function ObsidianFox.AnimComponentFootIK.GetEffectorLocation
// 0x0014 (0x0014 - 0x0000)
struct AnimComponentFootIK_GetEffectorLocation final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimComponentFootIK_GetEffectorLocation) == 0x000004, "Wrong alignment on AnimComponentFootIK_GetEffectorLocation");
static_assert(sizeof(AnimComponentFootIK_GetEffectorLocation) == 0x000014, "Wrong size on AnimComponentFootIK_GetEffectorLocation");
static_assert(offsetof(AnimComponentFootIK_GetEffectorLocation, BoneName) == 0x000000, "Member 'AnimComponentFootIK_GetEffectorLocation::BoneName' has a wrong offset!");
static_assert(offsetof(AnimComponentFootIK_GetEffectorLocation, ReturnValue) == 0x000008, "Member 'AnimComponentFootIK_GetEffectorLocation::ReturnValue' has a wrong offset!");

// Function ObsidianFox.AnimComponentFootIK.GetEffectorRotation
// 0x0014 (0x0014 - 0x0000)
struct AnimComponentFootIK_GetEffectorRotation final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimComponentFootIK_GetEffectorRotation) == 0x000004, "Wrong alignment on AnimComponentFootIK_GetEffectorRotation");
static_assert(sizeof(AnimComponentFootIK_GetEffectorRotation) == 0x000014, "Wrong size on AnimComponentFootIK_GetEffectorRotation");
static_assert(offsetof(AnimComponentFootIK_GetEffectorRotation, BoneName) == 0x000000, "Member 'AnimComponentFootIK_GetEffectorRotation::BoneName' has a wrong offset!");
static_assert(offsetof(AnimComponentFootIK_GetEffectorRotation, ReturnValue) == 0x000008, "Member 'AnimComponentFootIK_GetEffectorRotation::ReturnValue' has a wrong offset!");

// Function ObsidianFox.AnimComponentFootIK.GetEffectorSurfaceType
// 0x000C (0x000C - 0x0000)
struct AnimComponentFootIK_GetEffectorSurfaceType final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimComponentFootIK_GetEffectorSurfaceType) == 0x000004, "Wrong alignment on AnimComponentFootIK_GetEffectorSurfaceType");
static_assert(sizeof(AnimComponentFootIK_GetEffectorSurfaceType) == 0x00000C, "Wrong size on AnimComponentFootIK_GetEffectorSurfaceType");
static_assert(offsetof(AnimComponentFootIK_GetEffectorSurfaceType, BoneName) == 0x000000, "Member 'AnimComponentFootIK_GetEffectorSurfaceType::BoneName' has a wrong offset!");
static_assert(offsetof(AnimComponentFootIK_GetEffectorSurfaceType, ReturnValue) == 0x000008, "Member 'AnimComponentFootIK_GetEffectorSurfaceType::ReturnValue' has a wrong offset!");

// Function ObsidianFox.AnimComponentFootIK.GetEffectorTargetLocation
// 0x0014 (0x0014 - 0x0000)
struct AnimComponentFootIK_GetEffectorTargetLocation final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimComponentFootIK_GetEffectorTargetLocation) == 0x000004, "Wrong alignment on AnimComponentFootIK_GetEffectorTargetLocation");
static_assert(sizeof(AnimComponentFootIK_GetEffectorTargetLocation) == 0x000014, "Wrong size on AnimComponentFootIK_GetEffectorTargetLocation");
static_assert(offsetof(AnimComponentFootIK_GetEffectorTargetLocation, BoneName) == 0x000000, "Member 'AnimComponentFootIK_GetEffectorTargetLocation::BoneName' has a wrong offset!");
static_assert(offsetof(AnimComponentFootIK_GetEffectorTargetLocation, ReturnValue) == 0x000008, "Member 'AnimComponentFootIK_GetEffectorTargetLocation::ReturnValue' has a wrong offset!");

// Function ObsidianFox.AnimComponentFootIK.GetEffectorTransform
// 0x0040 (0x0040 - 0x0000)
struct AnimComponentFootIK_GetEffectorTransform final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OutTransform;                                      // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimComponentFootIK_GetEffectorTransform) == 0x000010, "Wrong alignment on AnimComponentFootIK_GetEffectorTransform");
static_assert(sizeof(AnimComponentFootIK_GetEffectorTransform) == 0x000040, "Wrong size on AnimComponentFootIK_GetEffectorTransform");
static_assert(offsetof(AnimComponentFootIK_GetEffectorTransform, BoneName) == 0x000000, "Member 'AnimComponentFootIK_GetEffectorTransform::BoneName' has a wrong offset!");
static_assert(offsetof(AnimComponentFootIK_GetEffectorTransform, OutTransform) == 0x000010, "Member 'AnimComponentFootIK_GetEffectorTransform::OutTransform' has a wrong offset!");

// Function ObsidianFox.AnimComponentFootIK.GetFeetPlantData
// 0x0034 (0x0034 - 0x0000)
struct AnimComponentFootIK_GetFeetPlantData final
{
public:
	struct FFeetPlantData                         FeetPlantData;                                     // 0x0000(0x002C)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x002C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimComponentFootIK_GetFeetPlantData) == 0x000004, "Wrong alignment on AnimComponentFootIK_GetFeetPlantData");
static_assert(sizeof(AnimComponentFootIK_GetFeetPlantData) == 0x000034, "Wrong size on AnimComponentFootIK_GetFeetPlantData");
static_assert(offsetof(AnimComponentFootIK_GetFeetPlantData, FeetPlantData) == 0x000000, "Member 'AnimComponentFootIK_GetFeetPlantData::FeetPlantData' has a wrong offset!");
static_assert(offsetof(AnimComponentFootIK_GetFeetPlantData, BoneName) == 0x00002C, "Member 'AnimComponentFootIK_GetFeetPlantData::BoneName' has a wrong offset!");

// Function ObsidianFox.AnimComponentFootIK.GetPoleVectorLocation
// 0x0014 (0x0014 - 0x0000)
struct AnimComponentFootIK_GetPoleVectorLocation final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimComponentFootIK_GetPoleVectorLocation) == 0x000004, "Wrong alignment on AnimComponentFootIK_GetPoleVectorLocation");
static_assert(sizeof(AnimComponentFootIK_GetPoleVectorLocation) == 0x000014, "Wrong size on AnimComponentFootIK_GetPoleVectorLocation");
static_assert(offsetof(AnimComponentFootIK_GetPoleVectorLocation, BoneName) == 0x000000, "Member 'AnimComponentFootIK_GetPoleVectorLocation::BoneName' has a wrong offset!");
static_assert(offsetof(AnimComponentFootIK_GetPoleVectorLocation, ReturnValue) == 0x000008, "Member 'AnimComponentFootIK_GetPoleVectorLocation::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InGameUIWidget.HUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct InGameUIWidget_HUDVisibilityChanged final
{
public:
	bool                                          bNewHUDVisbility;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameUIWidget_HUDVisibilityChanged) == 0x000001, "Wrong alignment on InGameUIWidget_HUDVisibilityChanged");
static_assert(sizeof(InGameUIWidget_HUDVisibilityChanged) == 0x000001, "Wrong size on InGameUIWidget_HUDVisibilityChanged");
static_assert(offsetof(InGameUIWidget_HUDVisibilityChanged, bNewHUDVisbility) == 0x000000, "Member 'InGameUIWidget_HUDVisibilityChanged::bNewHUDVisbility' has a wrong offset!");

// DelegateFunction ObsidianFox.InGameUIWidget.PlayerHUDVisibilitySignature__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct InGameUIWidget_PlayerHUDVisibilitySignature__DelegateSignature final
{
public:
	bool                                          bNewHUDVisibility;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameUIWidget_PlayerHUDVisibilitySignature__DelegateSignature) == 0x000001, "Wrong alignment on InGameUIWidget_PlayerHUDVisibilitySignature__DelegateSignature");
static_assert(sizeof(InGameUIWidget_PlayerHUDVisibilitySignature__DelegateSignature) == 0x000001, "Wrong size on InGameUIWidget_PlayerHUDVisibilitySignature__DelegateSignature");
static_assert(offsetof(InGameUIWidget_PlayerHUDVisibilitySignature__DelegateSignature, bNewHUDVisibility) == 0x000000, "Member 'InGameUIWidget_PlayerHUDVisibilitySignature__DelegateSignature::bNewHUDVisibility' has a wrong offset!");

// Function ObsidianFox.InGameUIWidget.GetIsVisibilityAllowed
// 0x0001 (0x0001 - 0x0000)
struct InGameUIWidget_GetIsVisibilityAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameUIWidget_GetIsVisibilityAllowed) == 0x000001, "Wrong alignment on InGameUIWidget_GetIsVisibilityAllowed");
static_assert(sizeof(InGameUIWidget_GetIsVisibilityAllowed) == 0x000001, "Wrong size on InGameUIWidget_GetIsVisibilityAllowed");
static_assert(offsetof(InGameUIWidget_GetIsVisibilityAllowed, ReturnValue) == 0x000000, "Member 'InGameUIWidget_GetIsVisibilityAllowed::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OF_HUDCrosshair.OnHasTargetChanged
// 0x0001 (0x0001 - 0x0000)
struct OF_HUDCrosshair_OnHasTargetChanged final
{
public:
	bool                                          SetHasTarget;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OF_HUDCrosshair_OnHasTargetChanged) == 0x000001, "Wrong alignment on OF_HUDCrosshair_OnHasTargetChanged");
static_assert(sizeof(OF_HUDCrosshair_OnHasTargetChanged) == 0x000001, "Wrong size on OF_HUDCrosshair_OnHasTargetChanged");
static_assert(offsetof(OF_HUDCrosshair_OnHasTargetChanged, SetHasTarget) == 0x000000, "Member 'OF_HUDCrosshair_OnHasTargetChanged::SetHasTarget' has a wrong offset!");

// Function ObsidianFox.OF_HUDCrosshair.OnTrackedWeaponHitHandler
// 0x00B0 (0x00B0 - 0x0000)
struct OF_HUDCrosshair_OnTrackedWeaponHitHandler final
{
public:
	struct FGameplayEventData                     EventPayload;                                      // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OF_HUDCrosshair_OnTrackedWeaponHitHandler) == 0x000008, "Wrong alignment on OF_HUDCrosshair_OnTrackedWeaponHitHandler");
static_assert(sizeof(OF_HUDCrosshair_OnTrackedWeaponHitHandler) == 0x0000B0, "Wrong size on OF_HUDCrosshair_OnTrackedWeaponHitHandler");
static_assert(offsetof(OF_HUDCrosshair_OnTrackedWeaponHitHandler, EventPayload) == 0x000000, "Member 'OF_HUDCrosshair_OnTrackedWeaponHitHandler::EventPayload' has a wrong offset!");

// Function ObsidianFox.OF_HUDCrosshair.OnTrackedWeaponSet
// 0x0008 (0x0008 - 0x0000)
struct OF_HUDCrosshair_OnTrackedWeaponSet final
{
public:
	class AHitscanWeaponActor*                    InTrackedWeapon;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OF_HUDCrosshair_OnTrackedWeaponSet) == 0x000008, "Wrong alignment on OF_HUDCrosshair_OnTrackedWeaponSet");
static_assert(sizeof(OF_HUDCrosshair_OnTrackedWeaponSet) == 0x000008, "Wrong size on OF_HUDCrosshair_OnTrackedWeaponSet");
static_assert(offsetof(OF_HUDCrosshair_OnTrackedWeaponSet, InTrackedWeapon) == 0x000000, "Member 'OF_HUDCrosshair_OnTrackedWeaponSet::InTrackedWeapon' has a wrong offset!");

// Function ObsidianFox.OF_HUDCrosshair.OnWeaponAimStateChanged
// 0x0001 (0x0001 - 0x0000)
struct OF_HUDCrosshair_OnWeaponAimStateChanged final
{
public:
	bool                                          IsAimingWeapon;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OF_HUDCrosshair_OnWeaponAimStateChanged) == 0x000001, "Wrong alignment on OF_HUDCrosshair_OnWeaponAimStateChanged");
static_assert(sizeof(OF_HUDCrosshair_OnWeaponAimStateChanged) == 0x000001, "Wrong size on OF_HUDCrosshair_OnWeaponAimStateChanged");
static_assert(offsetof(OF_HUDCrosshair_OnWeaponAimStateChanged, IsAimingWeapon) == 0x000000, "Member 'OF_HUDCrosshair_OnWeaponAimStateChanged::IsAimingWeapon' has a wrong offset!");

// Function ObsidianFox.OF_HUDCrosshair.OnWeaponHit
// 0x00B8 (0x00B8 - 0x0000)
struct OF_HUDCrosshair_OnWeaponHit final
{
public:
	struct FGameplayEventData                     EventPayload;                                      // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Hits;                                              // 0x00B0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OF_HUDCrosshair_OnWeaponHit) == 0x000008, "Wrong alignment on OF_HUDCrosshair_OnWeaponHit");
static_assert(sizeof(OF_HUDCrosshair_OnWeaponHit) == 0x0000B8, "Wrong size on OF_HUDCrosshair_OnWeaponHit");
static_assert(offsetof(OF_HUDCrosshair_OnWeaponHit, EventPayload) == 0x000000, "Member 'OF_HUDCrosshair_OnWeaponHit::EventPayload' has a wrong offset!");
static_assert(offsetof(OF_HUDCrosshair_OnWeaponHit, Hits) == 0x0000B0, "Member 'OF_HUDCrosshair_OnWeaponHit::Hits' has a wrong offset!");

// Function ObsidianFox.OF_HUDCrosshair.SetTrackedWeapon
// 0x0008 (0x0008 - 0x0000)
struct OF_HUDCrosshair_SetTrackedWeapon final
{
public:
	class AHitscanWeaponActor*                    WeaponToTrack;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OF_HUDCrosshair_SetTrackedWeapon) == 0x000008, "Wrong alignment on OF_HUDCrosshair_SetTrackedWeapon");
static_assert(sizeof(OF_HUDCrosshair_SetTrackedWeapon) == 0x000008, "Wrong size on OF_HUDCrosshair_SetTrackedWeapon");
static_assert(offsetof(OF_HUDCrosshair_SetTrackedWeapon, WeaponToTrack) == 0x000000, "Member 'OF_HUDCrosshair_SetTrackedWeapon::WeaponToTrack' has a wrong offset!");

// Function ObsidianFox.AnimationLockedTurnInPlaceInterface.RequestManualLockedTurnInPlace
// 0x0004 (0x0004 - 0x0000)
struct AnimationLockedTurnInPlaceInterface_RequestManualLockedTurnInPlace final
{
public:
	float                                         AngleDegrees;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationLockedTurnInPlaceInterface_RequestManualLockedTurnInPlace) == 0x000004, "Wrong alignment on AnimationLockedTurnInPlaceInterface_RequestManualLockedTurnInPlace");
static_assert(sizeof(AnimationLockedTurnInPlaceInterface_RequestManualLockedTurnInPlace) == 0x000004, "Wrong size on AnimationLockedTurnInPlaceInterface_RequestManualLockedTurnInPlace");
static_assert(offsetof(AnimationLockedTurnInPlaceInterface_RequestManualLockedTurnInPlace, AngleDegrees) == 0x000000, "Member 'AnimationLockedTurnInPlaceInterface_RequestManualLockedTurnInPlace::AngleDegrees' has a wrong offset!");

// Function ObsidianFox.ParticleEffectSpawnerVolume.ComponentBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct ParticleEffectSpawnerVolume_ComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    InOverlappedComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOtherActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    InOtherComp;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InOtherBodyIndex;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             InSweepResult;                                     // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParticleEffectSpawnerVolume_ComponentBeginOverlap) == 0x000008, "Wrong alignment on ParticleEffectSpawnerVolume_ComponentBeginOverlap");
static_assert(sizeof(ParticleEffectSpawnerVolume_ComponentBeginOverlap) == 0x0000A8, "Wrong size on ParticleEffectSpawnerVolume_ComponentBeginOverlap");
static_assert(offsetof(ParticleEffectSpawnerVolume_ComponentBeginOverlap, InOverlappedComponent) == 0x000000, "Member 'ParticleEffectSpawnerVolume_ComponentBeginOverlap::InOverlappedComponent' has a wrong offset!");
static_assert(offsetof(ParticleEffectSpawnerVolume_ComponentBeginOverlap, InOtherActor) == 0x000008, "Member 'ParticleEffectSpawnerVolume_ComponentBeginOverlap::InOtherActor' has a wrong offset!");
static_assert(offsetof(ParticleEffectSpawnerVolume_ComponentBeginOverlap, InOtherComp) == 0x000010, "Member 'ParticleEffectSpawnerVolume_ComponentBeginOverlap::InOtherComp' has a wrong offset!");
static_assert(offsetof(ParticleEffectSpawnerVolume_ComponentBeginOverlap, InOtherBodyIndex) == 0x000018, "Member 'ParticleEffectSpawnerVolume_ComponentBeginOverlap::InOtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ParticleEffectSpawnerVolume_ComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'ParticleEffectSpawnerVolume_ComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(ParticleEffectSpawnerVolume_ComponentBeginOverlap, InSweepResult) == 0x000020, "Member 'ParticleEffectSpawnerVolume_ComponentBeginOverlap::InSweepResult' has a wrong offset!");

// Function ObsidianFox.ParticleEffectSpawnerVolume.ComponentEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct ParticleEffectSpawnerVolume_ComponentEndOverlap final
{
public:
	class UPrimitiveComponent*                    InOverlappedComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOtherActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    InOtherComp;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InOtherBodyIndex;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ParticleEffectSpawnerVolume_ComponentEndOverlap) == 0x000008, "Wrong alignment on ParticleEffectSpawnerVolume_ComponentEndOverlap");
static_assert(sizeof(ParticleEffectSpawnerVolume_ComponentEndOverlap) == 0x000020, "Wrong size on ParticleEffectSpawnerVolume_ComponentEndOverlap");
static_assert(offsetof(ParticleEffectSpawnerVolume_ComponentEndOverlap, InOverlappedComponent) == 0x000000, "Member 'ParticleEffectSpawnerVolume_ComponentEndOverlap::InOverlappedComponent' has a wrong offset!");
static_assert(offsetof(ParticleEffectSpawnerVolume_ComponentEndOverlap, InOtherActor) == 0x000008, "Member 'ParticleEffectSpawnerVolume_ComponentEndOverlap::InOtherActor' has a wrong offset!");
static_assert(offsetof(ParticleEffectSpawnerVolume_ComponentEndOverlap, InOtherComp) == 0x000010, "Member 'ParticleEffectSpawnerVolume_ComponentEndOverlap::InOtherComp' has a wrong offset!");
static_assert(offsetof(ParticleEffectSpawnerVolume_ComponentEndOverlap, InOtherBodyIndex) == 0x000018, "Member 'ParticleEffectSpawnerVolume_ComponentEndOverlap::InOtherBodyIndex' has a wrong offset!");

// Function ObsidianFox.ParticleEffectSpawnerVolume.SpawnParticleEffect
// 0x0030 (0x0030 - 0x0000)
struct ParticleEffectSpawnerVolume_SpawnParticleEffect final
{
public:
	const class UWorld*                           WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          ParticleSystem;                                    // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParticleEffectSpawnerVolume_SpawnParticleEffect) == 0x000008, "Wrong alignment on ParticleEffectSpawnerVolume_SpawnParticleEffect");
static_assert(sizeof(ParticleEffectSpawnerVolume_SpawnParticleEffect) == 0x000030, "Wrong size on ParticleEffectSpawnerVolume_SpawnParticleEffect");
static_assert(offsetof(ParticleEffectSpawnerVolume_SpawnParticleEffect, WorldContext) == 0x000000, "Member 'ParticleEffectSpawnerVolume_SpawnParticleEffect::WorldContext' has a wrong offset!");
static_assert(offsetof(ParticleEffectSpawnerVolume_SpawnParticleEffect, ParticleSystem) == 0x000008, "Member 'ParticleEffectSpawnerVolume_SpawnParticleEffect::ParticleSystem' has a wrong offset!");

// Function ObsidianFox.ParticleEffectSpawnerVolume.VolumeActorBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct ParticleEffectSpawnerVolume_VolumeActorBeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOtherActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParticleEffectSpawnerVolume_VolumeActorBeginOverlap) == 0x000008, "Wrong alignment on ParticleEffectSpawnerVolume_VolumeActorBeginOverlap");
static_assert(sizeof(ParticleEffectSpawnerVolume_VolumeActorBeginOverlap) == 0x000010, "Wrong size on ParticleEffectSpawnerVolume_VolumeActorBeginOverlap");
static_assert(offsetof(ParticleEffectSpawnerVolume_VolumeActorBeginOverlap, OverlappedActor) == 0x000000, "Member 'ParticleEffectSpawnerVolume_VolumeActorBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(ParticleEffectSpawnerVolume_VolumeActorBeginOverlap, InOtherActor) == 0x000008, "Member 'ParticleEffectSpawnerVolume_VolumeActorBeginOverlap::InOtherActor' has a wrong offset!");

// Function ObsidianFox.ParticleEffectSpawnerVolume.VolumeActorEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct ParticleEffectSpawnerVolume_VolumeActorEndOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOtherActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParticleEffectSpawnerVolume_VolumeActorEndOverlap) == 0x000008, "Wrong alignment on ParticleEffectSpawnerVolume_VolumeActorEndOverlap");
static_assert(sizeof(ParticleEffectSpawnerVolume_VolumeActorEndOverlap) == 0x000010, "Wrong size on ParticleEffectSpawnerVolume_VolumeActorEndOverlap");
static_assert(offsetof(ParticleEffectSpawnerVolume_VolumeActorEndOverlap, OverlappedActor) == 0x000000, "Member 'ParticleEffectSpawnerVolume_VolumeActorEndOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(ParticleEffectSpawnerVolume_VolumeActorEndOverlap, InOtherActor) == 0x000008, "Member 'ParticleEffectSpawnerVolume_VolumeActorEndOverlap::InOtherActor' has a wrong offset!");

// Function ObsidianFox.AnimComponentRailingFinder.StartIKMontage
// 0x000C (0x000C - 0x0000)
struct AnimComponentRailingFinder_StartIKMontage final
{
public:
	class FName                                   Bone;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstant;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimComponentRailingFinder_StartIKMontage) == 0x000004, "Wrong alignment on AnimComponentRailingFinder_StartIKMontage");
static_assert(sizeof(AnimComponentRailingFinder_StartIKMontage) == 0x00000C, "Wrong size on AnimComponentRailingFinder_StartIKMontage");
static_assert(offsetof(AnimComponentRailingFinder_StartIKMontage, Bone) == 0x000000, "Member 'AnimComponentRailingFinder_StartIKMontage::Bone' has a wrong offset!");
static_assert(offsetof(AnimComponentRailingFinder_StartIKMontage, bInstant) == 0x000008, "Member 'AnimComponentRailingFinder_StartIKMontage::bInstant' has a wrong offset!");

// Function ObsidianFox.PlayerCharactersEngineSubsystem.CacheCurrentPlayerCharacters
// 0x0008 (0x0008 - 0x0000)
struct PlayerCharactersEngineSubsystem_CacheCurrentPlayerCharacters final
{
public:
	class AController*                            InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharactersEngineSubsystem_CacheCurrentPlayerCharacters) == 0x000008, "Wrong alignment on PlayerCharactersEngineSubsystem_CacheCurrentPlayerCharacters");
static_assert(sizeof(PlayerCharactersEngineSubsystem_CacheCurrentPlayerCharacters) == 0x000008, "Wrong size on PlayerCharactersEngineSubsystem_CacheCurrentPlayerCharacters");
static_assert(offsetof(PlayerCharactersEngineSubsystem_CacheCurrentPlayerCharacters, InController) == 0x000000, "Member 'PlayerCharactersEngineSubsystem_CacheCurrentPlayerCharacters::InController' has a wrong offset!");

// Function ObsidianFox.PlayerCharactersEngineSubsystem.GetPlayerCharacterType
// 0x0010 (0x0010 - 0x0000)
struct PlayerCharactersEngineSubsystem_GetPlayerCharacterType final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerCharacterType                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerCharactersEngineSubsystem_GetPlayerCharacterType) == 0x000008, "Wrong alignment on PlayerCharactersEngineSubsystem_GetPlayerCharacterType");
static_assert(sizeof(PlayerCharactersEngineSubsystem_GetPlayerCharacterType) == 0x000010, "Wrong size on PlayerCharactersEngineSubsystem_GetPlayerCharacterType");
static_assert(offsetof(PlayerCharactersEngineSubsystem_GetPlayerCharacterType, WorldContextObject) == 0x000000, "Member 'PlayerCharactersEngineSubsystem_GetPlayerCharacterType::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PlayerCharactersEngineSubsystem_GetPlayerCharacterType, ReturnValue) == 0x000008, "Member 'PlayerCharactersEngineSubsystem_GetPlayerCharacterType::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.PlayerCharactersEngineSubsystem.OnCharacterPosessed__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct PlayerCharactersEngineSubsystem_OnCharacterPosessed__DelegateSignature final
{
public:
	const class AOFPlayerCharacter*               Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharactersEngineSubsystem_OnCharacterPosessed__DelegateSignature) == 0x000008, "Wrong alignment on PlayerCharactersEngineSubsystem_OnCharacterPosessed__DelegateSignature");
static_assert(sizeof(PlayerCharactersEngineSubsystem_OnCharacterPosessed__DelegateSignature) == 0x000008, "Wrong size on PlayerCharactersEngineSubsystem_OnCharacterPosessed__DelegateSignature");
static_assert(offsetof(PlayerCharactersEngineSubsystem_OnCharacterPosessed__DelegateSignature, Character) == 0x000000, "Member 'PlayerCharactersEngineSubsystem_OnCharacterPosessed__DelegateSignature::Character' has a wrong offset!");

// Function ObsidianFox.PlayerCharactersEngineSubsystem.PossessPlayerCharacter
// 0x0018 (0x0018 - 0x0000)
struct PlayerCharactersEngineSubsystem_PossessPlayerCharacter final
{
public:
	class AController*                            InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerCharacterType                          PlayerCharacterType;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableCurrentCharacter;                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AOFPlayerCharacter*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharactersEngineSubsystem_PossessPlayerCharacter) == 0x000008, "Wrong alignment on PlayerCharactersEngineSubsystem_PossessPlayerCharacter");
static_assert(sizeof(PlayerCharactersEngineSubsystem_PossessPlayerCharacter) == 0x000018, "Wrong size on PlayerCharactersEngineSubsystem_PossessPlayerCharacter");
static_assert(offsetof(PlayerCharactersEngineSubsystem_PossessPlayerCharacter, InController) == 0x000000, "Member 'PlayerCharactersEngineSubsystem_PossessPlayerCharacter::InController' has a wrong offset!");
static_assert(offsetof(PlayerCharactersEngineSubsystem_PossessPlayerCharacter, PlayerCharacterType) == 0x000008, "Member 'PlayerCharactersEngineSubsystem_PossessPlayerCharacter::PlayerCharacterType' has a wrong offset!");
static_assert(offsetof(PlayerCharactersEngineSubsystem_PossessPlayerCharacter, bDisableCurrentCharacter) == 0x000009, "Member 'PlayerCharactersEngineSubsystem_PossessPlayerCharacter::bDisableCurrentCharacter' has a wrong offset!");
static_assert(offsetof(PlayerCharactersEngineSubsystem_PossessPlayerCharacter, ReturnValue) == 0x000010, "Member 'PlayerCharactersEngineSubsystem_PossessPlayerCharacter::ReturnValue' has a wrong offset!");

// Function ObsidianFox.PlayerCharactersEngineSubsystem.SetCharacterToUse
// 0x0001 (0x0001 - 0x0000)
struct PlayerCharactersEngineSubsystem_SetCharacterToUse final
{
public:
	EPlayerCharacterType                          PlayerCharacterType;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharactersEngineSubsystem_SetCharacterToUse) == 0x000001, "Wrong alignment on PlayerCharactersEngineSubsystem_SetCharacterToUse");
static_assert(sizeof(PlayerCharactersEngineSubsystem_SetCharacterToUse) == 0x000001, "Wrong size on PlayerCharactersEngineSubsystem_SetCharacterToUse");
static_assert(offsetof(PlayerCharactersEngineSubsystem_SetCharacterToUse, PlayerCharacterType) == 0x000000, "Member 'PlayerCharactersEngineSubsystem_SetCharacterToUse::PlayerCharacterType' has a wrong offset!");

// Function ObsidianFox.AnimInterface.DisableAnimationFeature
// 0x0008 (0x0008 - 0x0000)
struct AnimInterface_DisableAnimationFeature final
{
public:
	struct FGameplayTag                           Feature;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInterface_DisableAnimationFeature) == 0x000004, "Wrong alignment on AnimInterface_DisableAnimationFeature");
static_assert(sizeof(AnimInterface_DisableAnimationFeature) == 0x000008, "Wrong size on AnimInterface_DisableAnimationFeature");
static_assert(offsetof(AnimInterface_DisableAnimationFeature, Feature) == 0x000000, "Member 'AnimInterface_DisableAnimationFeature::Feature' has a wrong offset!");

// Function ObsidianFox.AnimInterface.DisableBodyFocus
// 0x0010 (0x0010 - 0x0000)
struct AnimInterface_DisableBodyFocus final
{
public:
	const class UObject*                          LockReference;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResetSpeed;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimInterface_DisableBodyFocus) == 0x000008, "Wrong alignment on AnimInterface_DisableBodyFocus");
static_assert(sizeof(AnimInterface_DisableBodyFocus) == 0x000010, "Wrong size on AnimInterface_DisableBodyFocus");
static_assert(offsetof(AnimInterface_DisableBodyFocus, LockReference) == 0x000000, "Member 'AnimInterface_DisableBodyFocus::LockReference' has a wrong offset!");
static_assert(offsetof(AnimInterface_DisableBodyFocus, ResetSpeed) == 0x000008, "Member 'AnimInterface_DisableBodyFocus::ResetSpeed' has a wrong offset!");

// Function ObsidianFox.AnimInterface.DisableFootIK
// 0x0010 (0x0010 - 0x0000)
struct AnimInterface_DisableFootIK final
{
public:
	const class UObject*                          CallerReference;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepHipOffsetEnabled;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimInterface_DisableFootIK) == 0x000008, "Wrong alignment on AnimInterface_DisableFootIK");
static_assert(sizeof(AnimInterface_DisableFootIK) == 0x000010, "Wrong size on AnimInterface_DisableFootIK");
static_assert(offsetof(AnimInterface_DisableFootIK, CallerReference) == 0x000000, "Member 'AnimInterface_DisableFootIK::CallerReference' has a wrong offset!");
static_assert(offsetof(AnimInterface_DisableFootIK, KeepHipOffsetEnabled) == 0x000008, "Member 'AnimInterface_DisableFootIK::KeepHipOffsetEnabled' has a wrong offset!");

// Function ObsidianFox.AnimInterface.EnableAnimationFeature
// 0x0008 (0x0008 - 0x0000)
struct AnimInterface_EnableAnimationFeature final
{
public:
	struct FGameplayTag                           Feature;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInterface_EnableAnimationFeature) == 0x000004, "Wrong alignment on AnimInterface_EnableAnimationFeature");
static_assert(sizeof(AnimInterface_EnableAnimationFeature) == 0x000008, "Wrong size on AnimInterface_EnableAnimationFeature");
static_assert(offsetof(AnimInterface_EnableAnimationFeature, Feature) == 0x000000, "Member 'AnimInterface_EnableAnimationFeature::Feature' has a wrong offset!");

// Function ObsidianFox.AnimInterface.EnableBodyFocus
// 0x0008 (0x0008 - 0x0000)
struct AnimInterface_EnableBodyFocus final
{
public:
	const class UObject*                          LockReference;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInterface_EnableBodyFocus) == 0x000008, "Wrong alignment on AnimInterface_EnableBodyFocus");
static_assert(sizeof(AnimInterface_EnableBodyFocus) == 0x000008, "Wrong size on AnimInterface_EnableBodyFocus");
static_assert(offsetof(AnimInterface_EnableBodyFocus, LockReference) == 0x000000, "Member 'AnimInterface_EnableBodyFocus::LockReference' has a wrong offset!");

// Function ObsidianFox.AnimInterface.EnableFootIK
// 0x0008 (0x0008 - 0x0000)
struct AnimInterface_EnableFootIK final
{
public:
	const class UObject*                          CallerReference;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInterface_EnableFootIK) == 0x000008, "Wrong alignment on AnimInterface_EnableFootIK");
static_assert(sizeof(AnimInterface_EnableFootIK) == 0x000008, "Wrong size on AnimInterface_EnableFootIK");
static_assert(offsetof(AnimInterface_EnableFootIK, CallerReference) == 0x000000, "Member 'AnimInterface_EnableFootIK::CallerReference' has a wrong offset!");

// Function ObsidianFox.AnimInterface.GetCurrentLocomotionState
// 0x0001 (0x0001 - 0x0000)
struct AnimInterface_GetCurrentLocomotionState final
{
public:
	EAnimationLocomotionState                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInterface_GetCurrentLocomotionState) == 0x000001, "Wrong alignment on AnimInterface_GetCurrentLocomotionState");
static_assert(sizeof(AnimInterface_GetCurrentLocomotionState) == 0x000001, "Wrong size on AnimInterface_GetCurrentLocomotionState");
static_assert(offsetof(AnimInterface_GetCurrentLocomotionState, ReturnValue) == 0x000000, "Member 'AnimInterface_GetCurrentLocomotionState::ReturnValue' has a wrong offset!");

// Function ObsidianFox.AnimInterface.GetFocusPointOnCharacter
// 0x000C (0x000C - 0x0000)
struct AnimInterface_GetFocusPointOnCharacter final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInterface_GetFocusPointOnCharacter) == 0x000004, "Wrong alignment on AnimInterface_GetFocusPointOnCharacter");
static_assert(sizeof(AnimInterface_GetFocusPointOnCharacter) == 0x00000C, "Wrong size on AnimInterface_GetFocusPointOnCharacter");
static_assert(offsetof(AnimInterface_GetFocusPointOnCharacter, ReturnValue) == 0x000000, "Member 'AnimInterface_GetFocusPointOnCharacter::ReturnValue' has a wrong offset!");

// Function ObsidianFox.AnimInterface.OnFootStepEvent
// 0x000C (0x000C - 0x0000)
struct AnimInterface_OnFootStepEvent final
{
public:
	EFootType                                     FootStepType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInterface_OnFootStepEvent) == 0x000004, "Wrong alignment on AnimInterface_OnFootStepEvent");
static_assert(sizeof(AnimInterface_OnFootStepEvent) == 0x00000C, "Wrong size on AnimInterface_OnFootStepEvent");
static_assert(offsetof(AnimInterface_OnFootStepEvent, FootStepType) == 0x000000, "Member 'AnimInterface_OnFootStepEvent::FootStepType' has a wrong offset!");
static_assert(offsetof(AnimInterface_OnFootStepEvent, BoneName) == 0x000004, "Member 'AnimInterface_OnFootStepEvent::BoneName' has a wrong offset!");

// Function ObsidianFox.AnimInterface.OnFootUpEvent
// 0x000C (0x000C - 0x0000)
struct AnimInterface_OnFootUpEvent final
{
public:
	EFootType                                     FootStepType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInterface_OnFootUpEvent) == 0x000004, "Wrong alignment on AnimInterface_OnFootUpEvent");
static_assert(sizeof(AnimInterface_OnFootUpEvent) == 0x00000C, "Wrong size on AnimInterface_OnFootUpEvent");
static_assert(offsetof(AnimInterface_OnFootUpEvent, FootStepType) == 0x000000, "Member 'AnimInterface_OnFootUpEvent::FootStepType' has a wrong offset!");
static_assert(offsetof(AnimInterface_OnFootUpEvent, BoneName) == 0x000004, "Member 'AnimInterface_OnFootUpEvent::BoneName' has a wrong offset!");

// Function ObsidianFox.AnimInterface.OnWeaponAttackHit
// 0x0238 (0x0238 - 0x0000)
struct AnimInterface_OnWeaponAttackHit final
{
public:
	float                                         HitStrength;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitForce;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CharacterIsDead;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitDirection;                                      // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECardinalDirection                            HitQuadrant;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitInfo;                                           // 0x001C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitReactionData                       HitReactionData;                                   // 0x00A8(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayEventData                     EventData;                                         // 0x0188(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInterface_OnWeaponAttackHit) == 0x000008, "Wrong alignment on AnimInterface_OnWeaponAttackHit");
static_assert(sizeof(AnimInterface_OnWeaponAttackHit) == 0x000238, "Wrong size on AnimInterface_OnWeaponAttackHit");
static_assert(offsetof(AnimInterface_OnWeaponAttackHit, HitStrength) == 0x000000, "Member 'AnimInterface_OnWeaponAttackHit::HitStrength' has a wrong offset!");
static_assert(offsetof(AnimInterface_OnWeaponAttackHit, HitForce) == 0x000004, "Member 'AnimInterface_OnWeaponAttackHit::HitForce' has a wrong offset!");
static_assert(offsetof(AnimInterface_OnWeaponAttackHit, CharacterIsDead) == 0x000008, "Member 'AnimInterface_OnWeaponAttackHit::CharacterIsDead' has a wrong offset!");
static_assert(offsetof(AnimInterface_OnWeaponAttackHit, HitDirection) == 0x00000C, "Member 'AnimInterface_OnWeaponAttackHit::HitDirection' has a wrong offset!");
static_assert(offsetof(AnimInterface_OnWeaponAttackHit, HitQuadrant) == 0x000018, "Member 'AnimInterface_OnWeaponAttackHit::HitQuadrant' has a wrong offset!");
static_assert(offsetof(AnimInterface_OnWeaponAttackHit, HitInfo) == 0x00001C, "Member 'AnimInterface_OnWeaponAttackHit::HitInfo' has a wrong offset!");
static_assert(offsetof(AnimInterface_OnWeaponAttackHit, HitReactionData) == 0x0000A8, "Member 'AnimInterface_OnWeaponAttackHit::HitReactionData' has a wrong offset!");
static_assert(offsetof(AnimInterface_OnWeaponAttackHit, EventData) == 0x000188, "Member 'AnimInterface_OnWeaponAttackHit::EventData' has a wrong offset!");

// Function ObsidianFox.AnimInterface.PlayHitReactionMontage
// 0x0020 (0x0020 - 0x0000)
struct AnimInterface_PlayHitReactionMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitDirection;                                      // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitBoneName;                                       // 0x0014(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimInterface_PlayHitReactionMontage) == 0x000008, "Wrong alignment on AnimInterface_PlayHitReactionMontage");
static_assert(sizeof(AnimInterface_PlayHitReactionMontage) == 0x000020, "Wrong size on AnimInterface_PlayHitReactionMontage");
static_assert(offsetof(AnimInterface_PlayHitReactionMontage, Montage) == 0x000000, "Member 'AnimInterface_PlayHitReactionMontage::Montage' has a wrong offset!");
static_assert(offsetof(AnimInterface_PlayHitReactionMontage, HitDirection) == 0x000008, "Member 'AnimInterface_PlayHitReactionMontage::HitDirection' has a wrong offset!");
static_assert(offsetof(AnimInterface_PlayHitReactionMontage, HitBoneName) == 0x000014, "Member 'AnimInterface_PlayHitReactionMontage::HitBoneName' has a wrong offset!");

// Function ObsidianFox.AnimInterface.QueueArmIKData
// 0x0038 (0x0038 - 0x0000)
struct AnimInterface_QueueArmIKData final
{
public:
	const class UObject*                          SessionOwner;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpToSpeed;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpFromSpeed;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIKHandParameters                      HandParameters;                                    // 0x001C(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOFTransformSpace                             LocationSpace;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimInterface_QueueArmIKData) == 0x000008, "Wrong alignment on AnimInterface_QueueArmIKData");
static_assert(sizeof(AnimInterface_QueueArmIKData) == 0x000038, "Wrong size on AnimInterface_QueueArmIKData");
static_assert(offsetof(AnimInterface_QueueArmIKData, SessionOwner) == 0x000000, "Member 'AnimInterface_QueueArmIKData::SessionOwner' has a wrong offset!");
static_assert(offsetof(AnimInterface_QueueArmIKData, TargetLocation) == 0x000008, "Member 'AnimInterface_QueueArmIKData::TargetLocation' has a wrong offset!");
static_assert(offsetof(AnimInterface_QueueArmIKData, InterpToSpeed) == 0x000014, "Member 'AnimInterface_QueueArmIKData::InterpToSpeed' has a wrong offset!");
static_assert(offsetof(AnimInterface_QueueArmIKData, InterpFromSpeed) == 0x000018, "Member 'AnimInterface_QueueArmIKData::InterpFromSpeed' has a wrong offset!");
static_assert(offsetof(AnimInterface_QueueArmIKData, HandParameters) == 0x00001C, "Member 'AnimInterface_QueueArmIKData::HandParameters' has a wrong offset!");
static_assert(offsetof(AnimInterface_QueueArmIKData, LocationSpace) == 0x000030, "Member 'AnimInterface_QueueArmIKData::LocationSpace' has a wrong offset!");

// Function ObsidianFox.AnimInterface.RagdollMeshAtHit
// 0x0024 (0x0024 - 0x0000)
struct AnimInterface_RagdollMeshAtHit final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitDirection;                                      // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitImpactStrength;                                 // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitForce;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimulationDuration;                                // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialBlendWeight;                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInterface_RagdollMeshAtHit) == 0x000004, "Wrong alignment on AnimInterface_RagdollMeshAtHit");
static_assert(sizeof(AnimInterface_RagdollMeshAtHit) == 0x000024, "Wrong size on AnimInterface_RagdollMeshAtHit");
static_assert(offsetof(AnimInterface_RagdollMeshAtHit, BoneName) == 0x000000, "Member 'AnimInterface_RagdollMeshAtHit::BoneName' has a wrong offset!");
static_assert(offsetof(AnimInterface_RagdollMeshAtHit, HitDirection) == 0x000008, "Member 'AnimInterface_RagdollMeshAtHit::HitDirection' has a wrong offset!");
static_assert(offsetof(AnimInterface_RagdollMeshAtHit, HitImpactStrength) == 0x000014, "Member 'AnimInterface_RagdollMeshAtHit::HitImpactStrength' has a wrong offset!");
static_assert(offsetof(AnimInterface_RagdollMeshAtHit, HitForce) == 0x000018, "Member 'AnimInterface_RagdollMeshAtHit::HitForce' has a wrong offset!");
static_assert(offsetof(AnimInterface_RagdollMeshAtHit, SimulationDuration) == 0x00001C, "Member 'AnimInterface_RagdollMeshAtHit::SimulationDuration' has a wrong offset!");
static_assert(offsetof(AnimInterface_RagdollMeshAtHit, InitialBlendWeight) == 0x000020, "Member 'AnimInterface_RagdollMeshAtHit::InitialBlendWeight' has a wrong offset!");

// Function ObsidianFox.AnimInterface.RootMotionEnd
// 0x0008 (0x0008 - 0x0000)
struct AnimInterface_RootMotionEnd final
{
public:
	const class UObject*                          LockOwner;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInterface_RootMotionEnd) == 0x000008, "Wrong alignment on AnimInterface_RootMotionEnd");
static_assert(sizeof(AnimInterface_RootMotionEnd) == 0x000008, "Wrong size on AnimInterface_RootMotionEnd");
static_assert(offsetof(AnimInterface_RootMotionEnd, LockOwner) == 0x000000, "Member 'AnimInterface_RootMotionEnd::LockOwner' has a wrong offset!");

// Function ObsidianFox.AnimInterface.RootMotionStart
// 0x0010 (0x0010 - 0x0000)
struct AnimInterface_RootMotionStart final
{
public:
	const class UObject*                          LockOwner;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyTranslation;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyRotation;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRotationAbsolute;                                // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimInterface_RootMotionStart) == 0x000008, "Wrong alignment on AnimInterface_RootMotionStart");
static_assert(sizeof(AnimInterface_RootMotionStart) == 0x000010, "Wrong size on AnimInterface_RootMotionStart");
static_assert(offsetof(AnimInterface_RootMotionStart, LockOwner) == 0x000000, "Member 'AnimInterface_RootMotionStart::LockOwner' has a wrong offset!");
static_assert(offsetof(AnimInterface_RootMotionStart, ApplyTranslation) == 0x000008, "Member 'AnimInterface_RootMotionStart::ApplyTranslation' has a wrong offset!");
static_assert(offsetof(AnimInterface_RootMotionStart, ApplyRotation) == 0x000009, "Member 'AnimInterface_RootMotionStart::ApplyRotation' has a wrong offset!");
static_assert(offsetof(AnimInterface_RootMotionStart, IsRotationAbsolute) == 0x00000A, "Member 'AnimInterface_RootMotionStart::IsRotationAbsolute' has a wrong offset!");

// Function ObsidianFox.AnimInterface.SetArmIKData
// 0x0040 (0x0040 - 0x0000)
struct AnimInterface_SetArmIKData final
{
public:
	const class UObject*                          SessionOwner;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpToSpeed;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpFromSpeed;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIKHandParameters                      HandParameters;                                    // 0x0024(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EOFTransformSpace                             LocationSpace;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimInterface_SetArmIKData) == 0x000008, "Wrong alignment on AnimInterface_SetArmIKData");
static_assert(sizeof(AnimInterface_SetArmIKData) == 0x000040, "Wrong size on AnimInterface_SetArmIKData");
static_assert(offsetof(AnimInterface_SetArmIKData, SessionOwner) == 0x000000, "Member 'AnimInterface_SetArmIKData::SessionOwner' has a wrong offset!");
static_assert(offsetof(AnimInterface_SetArmIKData, BoneName) == 0x000008, "Member 'AnimInterface_SetArmIKData::BoneName' has a wrong offset!");
static_assert(offsetof(AnimInterface_SetArmIKData, TargetLocation) == 0x000010, "Member 'AnimInterface_SetArmIKData::TargetLocation' has a wrong offset!");
static_assert(offsetof(AnimInterface_SetArmIKData, InterpToSpeed) == 0x00001C, "Member 'AnimInterface_SetArmIKData::InterpToSpeed' has a wrong offset!");
static_assert(offsetof(AnimInterface_SetArmIKData, InterpFromSpeed) == 0x000020, "Member 'AnimInterface_SetArmIKData::InterpFromSpeed' has a wrong offset!");
static_assert(offsetof(AnimInterface_SetArmIKData, HandParameters) == 0x000024, "Member 'AnimInterface_SetArmIKData::HandParameters' has a wrong offset!");
static_assert(offsetof(AnimInterface_SetArmIKData, LocationSpace) == 0x000038, "Member 'AnimInterface_SetArmIKData::LocationSpace' has a wrong offset!");

// Function ObsidianFox.AnimInterface.SetFootIKInterpolationMultiplier
// 0x000C (0x000C - 0x0000)
struct AnimInterface_SetFootIKInterpolationMultiplier final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInterface_SetFootIKInterpolationMultiplier) == 0x000004, "Wrong alignment on AnimInterface_SetFootIKInterpolationMultiplier");
static_assert(sizeof(AnimInterface_SetFootIKInterpolationMultiplier) == 0x00000C, "Wrong size on AnimInterface_SetFootIKInterpolationMultiplier");
static_assert(offsetof(AnimInterface_SetFootIKInterpolationMultiplier, BoneName) == 0x000000, "Member 'AnimInterface_SetFootIKInterpolationMultiplier::BoneName' has a wrong offset!");
static_assert(offsetof(AnimInterface_SetFootIKInterpolationMultiplier, Multiplier) == 0x000008, "Member 'AnimInterface_SetFootIKInterpolationMultiplier::Multiplier' has a wrong offset!");

// Function ObsidianFox.AnimInterface.StartArmIK
// 0x0040 (0x0040 - 0x0000)
struct AnimInterface_StartArmIK final
{
public:
	const class UObject*                          SessionOwner;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FArmIKReferenceTarget                  TargetReference;                                   // 0x0010(0x0010)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FArmIKCompensationData                 LocationCompensationData;                          // 0x0020(0x0014)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   WeightCurveName;                                   // 0x0034(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimInterface_StartArmIK) == 0x000008, "Wrong alignment on AnimInterface_StartArmIK");
static_assert(sizeof(AnimInterface_StartArmIK) == 0x000040, "Wrong size on AnimInterface_StartArmIK");
static_assert(offsetof(AnimInterface_StartArmIK, SessionOwner) == 0x000000, "Member 'AnimInterface_StartArmIK::SessionOwner' has a wrong offset!");
static_assert(offsetof(AnimInterface_StartArmIK, BoneName) == 0x000008, "Member 'AnimInterface_StartArmIK::BoneName' has a wrong offset!");
static_assert(offsetof(AnimInterface_StartArmIK, TargetReference) == 0x000010, "Member 'AnimInterface_StartArmIK::TargetReference' has a wrong offset!");
static_assert(offsetof(AnimInterface_StartArmIK, LocationCompensationData) == 0x000020, "Member 'AnimInterface_StartArmIK::LocationCompensationData' has a wrong offset!");
static_assert(offsetof(AnimInterface_StartArmIK, WeightCurveName) == 0x000034, "Member 'AnimInterface_StartArmIK::WeightCurveName' has a wrong offset!");

// Function ObsidianFox.AnimInterface.StartContextualTraverse
// 0x0008 (0x0008 - 0x0000)
struct AnimInterface_StartContextualTraverse final
{
public:
	struct FGameplayTag                           TraverseTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInterface_StartContextualTraverse) == 0x000004, "Wrong alignment on AnimInterface_StartContextualTraverse");
static_assert(sizeof(AnimInterface_StartContextualTraverse) == 0x000008, "Wrong size on AnimInterface_StartContextualTraverse");
static_assert(offsetof(AnimInterface_StartContextualTraverse, TraverseTag) == 0x000000, "Member 'AnimInterface_StartContextualTraverse::TraverseTag' has a wrong offset!");

// Function ObsidianFox.AnimInterface.StopArmIK
// 0x0018 (0x0018 - 0x0000)
struct AnimInterface_StopArmIK final
{
public:
	const class UObject*                          SessionOwner;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WeightCurveName;                                   // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInterface_StopArmIK) == 0x000008, "Wrong alignment on AnimInterface_StopArmIK");
static_assert(sizeof(AnimInterface_StopArmIK) == 0x000018, "Wrong size on AnimInterface_StopArmIK");
static_assert(offsetof(AnimInterface_StopArmIK, SessionOwner) == 0x000000, "Member 'AnimInterface_StopArmIK::SessionOwner' has a wrong offset!");
static_assert(offsetof(AnimInterface_StopArmIK, BoneName) == 0x000008, "Member 'AnimInterface_StopArmIK::BoneName' has a wrong offset!");
static_assert(offsetof(AnimInterface_StopArmIK, WeightCurveName) == 0x000010, "Member 'AnimInterface_StopArmIK::WeightCurveName' has a wrong offset!");

// Function ObsidianFox.AnimInterface.TrySetBlockFlagForRailingFinderForBone
// 0x0018 (0x0018 - 0x0000)
struct AnimInterface_TrySetBlockFlagForRailingFinderForBone final
{
public:
	const class UObject*                          CallerReference;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldBeBlocked;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstantBlock;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimInterface_TrySetBlockFlagForRailingFinderForBone) == 0x000008, "Wrong alignment on AnimInterface_TrySetBlockFlagForRailingFinderForBone");
static_assert(sizeof(AnimInterface_TrySetBlockFlagForRailingFinderForBone) == 0x000018, "Wrong size on AnimInterface_TrySetBlockFlagForRailingFinderForBone");
static_assert(offsetof(AnimInterface_TrySetBlockFlagForRailingFinderForBone, CallerReference) == 0x000000, "Member 'AnimInterface_TrySetBlockFlagForRailingFinderForBone::CallerReference' has a wrong offset!");
static_assert(offsetof(AnimInterface_TrySetBlockFlagForRailingFinderForBone, BoneName) == 0x000008, "Member 'AnimInterface_TrySetBlockFlagForRailingFinderForBone::BoneName' has a wrong offset!");
static_assert(offsetof(AnimInterface_TrySetBlockFlagForRailingFinderForBone, bShouldBeBlocked) == 0x000010, "Member 'AnimInterface_TrySetBlockFlagForRailingFinderForBone::bShouldBeBlocked' has a wrong offset!");
static_assert(offsetof(AnimInterface_TrySetBlockFlagForRailingFinderForBone, bInstantBlock) == 0x000011, "Member 'AnimInterface_TrySetBlockFlagForRailingFinderForBone::bInstantBlock' has a wrong offset!");

// Function ObsidianFox.AnimInterface.WholebodyRagdoll
// 0x0008 (0x0008 - 0x0000)
struct AnimInterface_WholebodyRagdoll final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInterface_WholebodyRagdoll) == 0x000004, "Wrong alignment on AnimInterface_WholebodyRagdoll");
static_assert(sizeof(AnimInterface_WholebodyRagdoll) == 0x000008, "Wrong size on AnimInterface_WholebodyRagdoll");
static_assert(offsetof(AnimInterface_WholebodyRagdoll, Activate) == 0x000000, "Member 'AnimInterface_WholebodyRagdoll::Activate' has a wrong offset!");
static_assert(offsetof(AnimInterface_WholebodyRagdoll, Duration) == 0x000004, "Member 'AnimInterface_WholebodyRagdoll::Duration' has a wrong offset!");

// Function ObsidianFox.AnimInterface.GetDynamicsAlpha
// 0x000C (0x000C - 0x0000)
struct AnimInterface_GetDynamicsAlpha final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInterface_GetDynamicsAlpha) == 0x000004, "Wrong alignment on AnimInterface_GetDynamicsAlpha");
static_assert(sizeof(AnimInterface_GetDynamicsAlpha) == 0x00000C, "Wrong size on AnimInterface_GetDynamicsAlpha");
static_assert(offsetof(AnimInterface_GetDynamicsAlpha, Key) == 0x000000, "Member 'AnimInterface_GetDynamicsAlpha::Key' has a wrong offset!");
static_assert(offsetof(AnimInterface_GetDynamicsAlpha, ReturnValue) == 0x000008, "Member 'AnimInterface_GetDynamicsAlpha::ReturnValue' has a wrong offset!");

// Function ObsidianFox.PlatformSpecificKeyWidget.SetInputAction
// 0x0008 (0x0008 - 0x0000)
struct PlatformSpecificKeyWidget_SetInputAction final
{
public:
	class UInputAction*                           InInputAction;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformSpecificKeyWidget_SetInputAction) == 0x000008, "Wrong alignment on PlatformSpecificKeyWidget_SetInputAction");
static_assert(sizeof(PlatformSpecificKeyWidget_SetInputAction) == 0x000008, "Wrong size on PlatformSpecificKeyWidget_SetInputAction");
static_assert(offsetof(PlatformSpecificKeyWidget_SetInputAction, InInputAction) == 0x000000, "Member 'PlatformSpecificKeyWidget_SetInputAction::InInputAction' has a wrong offset!");

// Function ObsidianFox.PlatformSpecificKeyWidget.SetInputMappingContext
// 0x0008 (0x0008 - 0x0000)
struct PlatformSpecificKeyWidget_SetInputMappingContext final
{
public:
	class UPiecesInputMappingContext*             InInputMappingContext;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformSpecificKeyWidget_SetInputMappingContext) == 0x000008, "Wrong alignment on PlatformSpecificKeyWidget_SetInputMappingContext");
static_assert(sizeof(PlatformSpecificKeyWidget_SetInputMappingContext) == 0x000008, "Wrong size on PlatformSpecificKeyWidget_SetInputMappingContext");
static_assert(offsetof(PlatformSpecificKeyWidget_SetInputMappingContext, InInputMappingContext) == 0x000000, "Member 'PlatformSpecificKeyWidget_SetInputMappingContext::InInputMappingContext' has a wrong offset!");

// Function ObsidianFox.PlatformSpecificKeyWidget.SetKeyImageAndText
// 0x0020 (0x0020 - 0x0000)
struct PlatformSpecificKeyWidget_SetKeyImageAndText final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   KeyString;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformSpecificKeyWidget_SetKeyImageAndText) == 0x000008, "Wrong alignment on PlatformSpecificKeyWidget_SetKeyImageAndText");
static_assert(sizeof(PlatformSpecificKeyWidget_SetKeyImageAndText) == 0x000020, "Wrong size on PlatformSpecificKeyWidget_SetKeyImageAndText");
static_assert(offsetof(PlatformSpecificKeyWidget_SetKeyImageAndText, Texture) == 0x000000, "Member 'PlatformSpecificKeyWidget_SetKeyImageAndText::Texture' has a wrong offset!");
static_assert(offsetof(PlatformSpecificKeyWidget_SetKeyImageAndText, KeyString) == 0x000008, "Member 'PlatformSpecificKeyWidget_SetKeyImageAndText::KeyString' has a wrong offset!");

// Function ObsidianFox.OptionsControlsPT.InvertedCheckBoxPressed
// 0x0001 (0x0001 - 0x0000)
struct OptionsControlsPT_InvertedCheckBoxPressed final
{
public:
	bool                                          bInvertedValue;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsControlsPT_InvertedCheckBoxPressed) == 0x000001, "Wrong alignment on OptionsControlsPT_InvertedCheckBoxPressed");
static_assert(sizeof(OptionsControlsPT_InvertedCheckBoxPressed) == 0x000001, "Wrong size on OptionsControlsPT_InvertedCheckBoxPressed");
static_assert(offsetof(OptionsControlsPT_InvertedCheckBoxPressed, bInvertedValue) == 0x000000, "Member 'OptionsControlsPT_InvertedCheckBoxPressed::bInvertedValue' has a wrong offset!");

// Function ObsidianFox.OptionsControlsPT.LeftStickX
// 0x0004 (0x0004 - 0x0000)
struct OptionsControlsPT_LeftStickX final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsControlsPT_LeftStickX) == 0x000004, "Wrong alignment on OptionsControlsPT_LeftStickX");
static_assert(sizeof(OptionsControlsPT_LeftStickX) == 0x000004, "Wrong size on OptionsControlsPT_LeftStickX");
static_assert(offsetof(OptionsControlsPT_LeftStickX, Val) == 0x000000, "Member 'OptionsControlsPT_LeftStickX::Val' has a wrong offset!");

// Function ObsidianFox.OptionsControlsPT.LeftStickY
// 0x0004 (0x0004 - 0x0000)
struct OptionsControlsPT_LeftStickY final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsControlsPT_LeftStickY) == 0x000004, "Wrong alignment on OptionsControlsPT_LeftStickY");
static_assert(sizeof(OptionsControlsPT_LeftStickY) == 0x000004, "Wrong size on OptionsControlsPT_LeftStickY");
static_assert(offsetof(OptionsControlsPT_LeftStickY, Val) == 0x000000, "Member 'OptionsControlsPT_LeftStickY::Val' has a wrong offset!");

// Function ObsidianFox.PlayerCharacterAnimInterface.SetLowAttack
// 0x0001 (0x0001 - 0x0000)
struct PlayerCharacterAnimInterface_SetLowAttack final
{
public:
	bool                                          bIsLowAttack;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCharacterAnimInterface_SetLowAttack) == 0x000001, "Wrong alignment on PlayerCharacterAnimInterface_SetLowAttack");
static_assert(sizeof(PlayerCharacterAnimInterface_SetLowAttack) == 0x000001, "Wrong size on PlayerCharacterAnimInterface_SetLowAttack");
static_assert(offsetof(PlayerCharacterAnimInterface_SetLowAttack, bIsLowAttack) == 0x000000, "Member 'PlayerCharacterAnimInterface_SetLowAttack::bIsLowAttack' has a wrong offset!");

// Function ObsidianFox.PlayerAsyncTaskBlueprintProxy.AbortMovement
// 0x0001 (0x0001 - 0x0000)
struct PlayerAsyncTaskBlueprintProxy_AbortMovement final
{
public:
	bool                                          ResetInputVectors;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerAsyncTaskBlueprintProxy_AbortMovement) == 0x000001, "Wrong alignment on PlayerAsyncTaskBlueprintProxy_AbortMovement");
static_assert(sizeof(PlayerAsyncTaskBlueprintProxy_AbortMovement) == 0x000001, "Wrong size on PlayerAsyncTaskBlueprintProxy_AbortMovement");
static_assert(offsetof(PlayerAsyncTaskBlueprintProxy_AbortMovement, ResetInputVectors) == 0x000000, "Member 'PlayerAsyncTaskBlueprintProxy_AbortMovement::ResetInputVectors' has a wrong offset!");

// Function ObsidianFox.PlayerAsyncTaskBlueprintProxy.OnMoveCompleted
// 0x0008 (0x0008 - 0x0000)
struct PlayerAsyncTaskBlueprintProxy_OnMoveCompleted final
{
public:
	struct FAIRequestID                           RequestID;                                         // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPathFollowingResult                          MovementResult;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerAsyncTaskBlueprintProxy_OnMoveCompleted) == 0x000004, "Wrong alignment on PlayerAsyncTaskBlueprintProxy_OnMoveCompleted");
static_assert(sizeof(PlayerAsyncTaskBlueprintProxy_OnMoveCompleted) == 0x000008, "Wrong size on PlayerAsyncTaskBlueprintProxy_OnMoveCompleted");
static_assert(offsetof(PlayerAsyncTaskBlueprintProxy_OnMoveCompleted, RequestID) == 0x000000, "Member 'PlayerAsyncTaskBlueprintProxy_OnMoveCompleted::RequestID' has a wrong offset!");
static_assert(offsetof(PlayerAsyncTaskBlueprintProxy_OnMoveCompleted, MovementResult) == 0x000004, "Member 'PlayerAsyncTaskBlueprintProxy_OnMoveCompleted::MovementResult' has a wrong offset!");

// Function ObsidianFox.PreStreamTexturesWorldSubsystem.AddPreStreamTexturesJob
// 0x001C (0x001C - 0x0000)
struct PreStreamTexturesWorldSubsystem_AddPreStreamTexturesJob final
{
public:
	TDelegate<void()>                             OnPreStreamTextureDone;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   InTag;                                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInForceTextureLoad;                               // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PreStreamTexturesWorldSubsystem_AddPreStreamTexturesJob) == 0x000004, "Wrong alignment on PreStreamTexturesWorldSubsystem_AddPreStreamTexturesJob");
static_assert(sizeof(PreStreamTexturesWorldSubsystem_AddPreStreamTexturesJob) == 0x00001C, "Wrong size on PreStreamTexturesWorldSubsystem_AddPreStreamTexturesJob");
static_assert(offsetof(PreStreamTexturesWorldSubsystem_AddPreStreamTexturesJob, OnPreStreamTextureDone) == 0x000000, "Member 'PreStreamTexturesWorldSubsystem_AddPreStreamTexturesJob::OnPreStreamTextureDone' has a wrong offset!");
static_assert(offsetof(PreStreamTexturesWorldSubsystem_AddPreStreamTexturesJob, InTag) == 0x000010, "Member 'PreStreamTexturesWorldSubsystem_AddPreStreamTexturesJob::InTag' has a wrong offset!");
static_assert(offsetof(PreStreamTexturesWorldSubsystem_AddPreStreamTexturesJob, bInForceTextureLoad) == 0x000018, "Member 'PreStreamTexturesWorldSubsystem_AddPreStreamTexturesJob::bInForceTextureLoad' has a wrong offset!");

// Function ObsidianFox.ArchiveButton.SetStatus
// 0x0001 (0x0001 - 0x0000)
struct ArchiveButton_SetStatus final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveButton_SetStatus) == 0x000001, "Wrong alignment on ArchiveButton_SetStatus");
static_assert(sizeof(ArchiveButton_SetStatus) == 0x000001, "Wrong size on ArchiveButton_SetStatus");
static_assert(offsetof(ArchiveButton_SetStatus, bEnabled) == 0x000000, "Member 'ArchiveButton_SetStatus::bEnabled' has a wrong offset!");

// Function ObsidianFox.OFButtonUserWidget.OnButtonUnHovered
// 0x0008 (0x0008 - 0x0000)
struct OFButtonUserWidget_OnButtonUnHovered final
{
public:
	class UButton*                                Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFButtonUserWidget_OnButtonUnHovered) == 0x000008, "Wrong alignment on OFButtonUserWidget_OnButtonUnHovered");
static_assert(sizeof(OFButtonUserWidget_OnButtonUnHovered) == 0x000008, "Wrong size on OFButtonUserWidget_OnButtonUnHovered");
static_assert(offsetof(OFButtonUserWidget_OnButtonUnHovered, Button) == 0x000000, "Member 'OFButtonUserWidget_OnButtonUnHovered::Button' has a wrong offset!");

// DelegateFunction ObsidianFox.OFButtonUserWidget.OnWidgetHover__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct OFButtonUserWidget_OnWidgetHover__DelegateSignature final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFButtonUserWidget_OnWidgetHover__DelegateSignature) == 0x000008, "Wrong alignment on OFButtonUserWidget_OnWidgetHover__DelegateSignature");
static_assert(sizeof(OFButtonUserWidget_OnWidgetHover__DelegateSignature) == 0x000008, "Wrong size on OFButtonUserWidget_OnWidgetHover__DelegateSignature");
static_assert(offsetof(OFButtonUserWidget_OnWidgetHover__DelegateSignature, Widget) == 0x000000, "Member 'OFButtonUserWidget_OnWidgetHover__DelegateSignature::Widget' has a wrong offset!");

// Function ObsidianFox.RebindKeyWidget.ChangePrimaryKey
// 0x0018 (0x0018 - 0x0000)
struct RebindKeyWidget_ChangePrimaryKey final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RebindKeyWidget_ChangePrimaryKey) == 0x000008, "Wrong alignment on RebindKeyWidget_ChangePrimaryKey");
static_assert(sizeof(RebindKeyWidget_ChangePrimaryKey) == 0x000018, "Wrong size on RebindKeyWidget_ChangePrimaryKey");
static_assert(offsetof(RebindKeyWidget_ChangePrimaryKey, InKey) == 0x000000, "Member 'RebindKeyWidget_ChangePrimaryKey::InKey' has a wrong offset!");

// Function ObsidianFox.RebindKeyWidget.ChangeSecondaryKey
// 0x0018 (0x0018 - 0x0000)
struct RebindKeyWidget_ChangeSecondaryKey final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RebindKeyWidget_ChangeSecondaryKey) == 0x000008, "Wrong alignment on RebindKeyWidget_ChangeSecondaryKey");
static_assert(sizeof(RebindKeyWidget_ChangeSecondaryKey) == 0x000018, "Wrong size on RebindKeyWidget_ChangeSecondaryKey");
static_assert(offsetof(RebindKeyWidget_ChangeSecondaryKey, InKey) == 0x000000, "Member 'RebindKeyWidget_ChangeSecondaryKey::InKey' has a wrong offset!");

// Function ObsidianFox.RebindKeyWidget.ConfirmationPopupOnSuccessHandler
// 0x0001 (0x0001 - 0x0000)
struct RebindKeyWidget_ConfirmationPopupOnSuccessHandler final
{
public:
	bool                                          bChange;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RebindKeyWidget_ConfirmationPopupOnSuccessHandler) == 0x000001, "Wrong alignment on RebindKeyWidget_ConfirmationPopupOnSuccessHandler");
static_assert(sizeof(RebindKeyWidget_ConfirmationPopupOnSuccessHandler) == 0x000001, "Wrong size on RebindKeyWidget_ConfirmationPopupOnSuccessHandler");
static_assert(offsetof(RebindKeyWidget_ConfirmationPopupOnSuccessHandler, bChange) == 0x000000, "Member 'RebindKeyWidget_ConfirmationPopupOnSuccessHandler::bChange' has a wrong offset!");

// Function ObsidianFox.RebindKeyWidget.HandlePrimaryKeySelected
// 0x0018 (0x0018 - 0x0000)
struct RebindKeyWidget_HandlePrimaryKeySelected final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RebindKeyWidget_HandlePrimaryKeySelected) == 0x000008, "Wrong alignment on RebindKeyWidget_HandlePrimaryKeySelected");
static_assert(sizeof(RebindKeyWidget_HandlePrimaryKeySelected) == 0x000018, "Wrong size on RebindKeyWidget_HandlePrimaryKeySelected");
static_assert(offsetof(RebindKeyWidget_HandlePrimaryKeySelected, InKey) == 0x000000, "Member 'RebindKeyWidget_HandlePrimaryKeySelected::InKey' has a wrong offset!");

// Function ObsidianFox.RebindKeyWidget.HandleSecondaryKeySelected
// 0x0018 (0x0018 - 0x0000)
struct RebindKeyWidget_HandleSecondaryKeySelected final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RebindKeyWidget_HandleSecondaryKeySelected) == 0x000008, "Wrong alignment on RebindKeyWidget_HandleSecondaryKeySelected");
static_assert(sizeof(RebindKeyWidget_HandleSecondaryKeySelected) == 0x000018, "Wrong size on RebindKeyWidget_HandleSecondaryKeySelected");
static_assert(offsetof(RebindKeyWidget_HandleSecondaryKeySelected, InKey) == 0x000000, "Member 'RebindKeyWidget_HandleSecondaryKeySelected::InKey' has a wrong offset!");

// Function ObsidianFox.ASyncActionCommitSave.AsyncCommitSave
// 0x0010 (0x0010 - 0x0000)
struct ASyncActionCommitSave_AsyncCommitSave final
{
public:
	class UObject*                                WorldContextObject_0;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UASyncActionCommitSave*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ASyncActionCommitSave_AsyncCommitSave) == 0x000008, "Wrong alignment on ASyncActionCommitSave_AsyncCommitSave");
static_assert(sizeof(ASyncActionCommitSave_AsyncCommitSave) == 0x000010, "Wrong size on ASyncActionCommitSave_AsyncCommitSave");
static_assert(offsetof(ASyncActionCommitSave_AsyncCommitSave, WorldContextObject_0) == 0x000000, "Member 'ASyncActionCommitSave_AsyncCommitSave::WorldContextObject_0' has a wrong offset!");
static_assert(offsetof(ASyncActionCommitSave_AsyncCommitSave, ReturnValue) == 0x000008, "Member 'ASyncActionCommitSave_AsyncCommitSave::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ASyncActionCommitSave.OnSaveDone
// 0x0001 (0x0001 - 0x0000)
struct ASyncActionCommitSave_OnSaveDone final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ASyncActionCommitSave_OnSaveDone) == 0x000001, "Wrong alignment on ASyncActionCommitSave_OnSaveDone");
static_assert(sizeof(ASyncActionCommitSave_OnSaveDone) == 0x000001, "Wrong size on ASyncActionCommitSave_OnSaveDone");
static_assert(offsetof(ASyncActionCommitSave_OnSaveDone, Success) == 0x000000, "Member 'ASyncActionCommitSave_OnSaveDone::Success' has a wrong offset!");

// Function ObsidianFox.AbilityTask_PlayMontageAndWaitForEvent.PlayMontageAndWaitForEvent
// 0x0058 (0x0058 - 0x0000)
struct AbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MontageToPlay_0;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EventTags_0;                                       // 0x0018(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         Rate_0;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartSection_0;                                    // 0x003C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAbilityEnds_0;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimRootMotionTranslationScale_0;                  // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_PlayMontageAndWaitForEvent* ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent) == 0x000008, "Wrong alignment on AbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent");
static_assert(sizeof(AbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent) == 0x000058, "Wrong size on AbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent");
static_assert(offsetof(AbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent, OwningAbility) == 0x000000, "Member 'AbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent, TaskInstanceName) == 0x000008, "Member 'AbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent, MontageToPlay_0) == 0x000010, "Member 'AbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent::MontageToPlay_0' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent, EventTags_0) == 0x000018, "Member 'AbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent::EventTags_0' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent, Rate_0) == 0x000038, "Member 'AbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent::Rate_0' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent, StartSection_0) == 0x00003C, "Member 'AbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent::StartSection_0' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent, bStopWhenAbilityEnds_0) == 0x000044, "Member 'AbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent::bStopWhenAbilityEnds_0' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent, AnimRootMotionTranslationScale_0) == 0x000048, "Member 'AbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent::AnimRootMotionTranslationScale_0' has a wrong offset!");
static_assert(offsetof(AbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent, ReturnValue) == 0x000050, "Member 'AbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ProjectileLibrary.CalculateBallisticRange
// 0x0010 (0x0010 - 0x0000)
struct ProjectileLibrary_CalculateBallisticRange final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialHeight;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gravity;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileLibrary_CalculateBallisticRange) == 0x000004, "Wrong alignment on ProjectileLibrary_CalculateBallisticRange");
static_assert(sizeof(ProjectileLibrary_CalculateBallisticRange) == 0x000010, "Wrong size on ProjectileLibrary_CalculateBallisticRange");
static_assert(offsetof(ProjectileLibrary_CalculateBallisticRange, Speed) == 0x000000, "Member 'ProjectileLibrary_CalculateBallisticRange::Speed' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_CalculateBallisticRange, InitialHeight) == 0x000004, "Member 'ProjectileLibrary_CalculateBallisticRange::InitialHeight' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_CalculateBallisticRange, Gravity) == 0x000008, "Member 'ProjectileLibrary_CalculateBallisticRange::Gravity' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_CalculateBallisticRange, ReturnValue) == 0x00000C, "Member 'ProjectileLibrary_CalculateBallisticRange::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ProjectileLibrary.SuggestProjectileVelocityByProfile
// 0x0060 (0x0060 - 0x0000)
struct ProjectileLibrary_SuggestProjectileVelocityByProfile final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TossVelocity;                                      // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaunchSpeed;                                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideGravityZ;                                  // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCollisionProfileName                  TraceProfile;                                      // 0x0034(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	ESuggestProjVelocityTraceOption               TraceOption;                                       // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CollisionRadius;                                   // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFavorHighArc;                                     // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebug;                                        // 0x0045(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0048(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectileLibrary_SuggestProjectileVelocityByProfile) == 0x000008, "Wrong alignment on ProjectileLibrary_SuggestProjectileVelocityByProfile");
static_assert(sizeof(ProjectileLibrary_SuggestProjectileVelocityByProfile) == 0x000060, "Wrong size on ProjectileLibrary_SuggestProjectileVelocityByProfile");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityByProfile, WorldContextObject) == 0x000000, "Member 'ProjectileLibrary_SuggestProjectileVelocityByProfile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityByProfile, TossVelocity) == 0x000008, "Member 'ProjectileLibrary_SuggestProjectileVelocityByProfile::TossVelocity' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityByProfile, StartLocation) == 0x000014, "Member 'ProjectileLibrary_SuggestProjectileVelocityByProfile::StartLocation' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityByProfile, EndLocation) == 0x000020, "Member 'ProjectileLibrary_SuggestProjectileVelocityByProfile::EndLocation' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityByProfile, LaunchSpeed) == 0x00002C, "Member 'ProjectileLibrary_SuggestProjectileVelocityByProfile::LaunchSpeed' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityByProfile, OverrideGravityZ) == 0x000030, "Member 'ProjectileLibrary_SuggestProjectileVelocityByProfile::OverrideGravityZ' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityByProfile, TraceProfile) == 0x000034, "Member 'ProjectileLibrary_SuggestProjectileVelocityByProfile::TraceProfile' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityByProfile, TraceOption) == 0x00003C, "Member 'ProjectileLibrary_SuggestProjectileVelocityByProfile::TraceOption' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityByProfile, CollisionRadius) == 0x000040, "Member 'ProjectileLibrary_SuggestProjectileVelocityByProfile::CollisionRadius' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityByProfile, bFavorHighArc) == 0x000044, "Member 'ProjectileLibrary_SuggestProjectileVelocityByProfile::bFavorHighArc' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityByProfile, bDrawDebug) == 0x000045, "Member 'ProjectileLibrary_SuggestProjectileVelocityByProfile::bDrawDebug' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityByProfile, ActorsToIgnore) == 0x000048, "Member 'ProjectileLibrary_SuggestProjectileVelocityByProfile::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityByProfile, ReturnValue) == 0x000058, "Member 'ProjectileLibrary_SuggestProjectileVelocityByProfile::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ProjectileLibrary.SuggestProjectileVelocityFiltered
// 0x0058 (0x0058 - 0x0000)
struct ProjectileLibrary_SuggestProjectileVelocityFiltered final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TossVelocity;                                      // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaunchSpeed;                                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideGravityZ;                                  // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESuggestProjVelocityTraceOption               TraceOption;                                       // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CollisionRadius;                                   // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFavorHighArc;                                     // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebug;                                        // 0x003D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0040(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectileLibrary_SuggestProjectileVelocityFiltered) == 0x000008, "Wrong alignment on ProjectileLibrary_SuggestProjectileVelocityFiltered");
static_assert(sizeof(ProjectileLibrary_SuggestProjectileVelocityFiltered) == 0x000058, "Wrong size on ProjectileLibrary_SuggestProjectileVelocityFiltered");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityFiltered, WorldContextObject) == 0x000000, "Member 'ProjectileLibrary_SuggestProjectileVelocityFiltered::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityFiltered, TossVelocity) == 0x000008, "Member 'ProjectileLibrary_SuggestProjectileVelocityFiltered::TossVelocity' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityFiltered, StartLocation) == 0x000014, "Member 'ProjectileLibrary_SuggestProjectileVelocityFiltered::StartLocation' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityFiltered, EndLocation) == 0x000020, "Member 'ProjectileLibrary_SuggestProjectileVelocityFiltered::EndLocation' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityFiltered, LaunchSpeed) == 0x00002C, "Member 'ProjectileLibrary_SuggestProjectileVelocityFiltered::LaunchSpeed' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityFiltered, OverrideGravityZ) == 0x000030, "Member 'ProjectileLibrary_SuggestProjectileVelocityFiltered::OverrideGravityZ' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityFiltered, TraceOption) == 0x000034, "Member 'ProjectileLibrary_SuggestProjectileVelocityFiltered::TraceOption' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityFiltered, CollisionRadius) == 0x000038, "Member 'ProjectileLibrary_SuggestProjectileVelocityFiltered::CollisionRadius' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityFiltered, bFavorHighArc) == 0x00003C, "Member 'ProjectileLibrary_SuggestProjectileVelocityFiltered::bFavorHighArc' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityFiltered, bDrawDebug) == 0x00003D, "Member 'ProjectileLibrary_SuggestProjectileVelocityFiltered::bDrawDebug' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityFiltered, ActorsToIgnore) == 0x000040, "Member 'ProjectileLibrary_SuggestProjectileVelocityFiltered::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(ProjectileLibrary_SuggestProjectileVelocityFiltered, ReturnValue) == 0x000050, "Member 'ProjectileLibrary_SuggestProjectileVelocityFiltered::ReturnValue' has a wrong offset!");

// Function ObsidianFox.BFL_PlayerMovement.CreateMoveToProxyObject
// 0x0038 (0x0038 - 0x0000)
struct BFL_PlayerMovement_CreateMoveToProxyObject final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Destination;                                       // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AcceptanceRadius;                                  // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopOnOverlap;                                    // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableInput;                                     // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreLookInput;                                  // 0x002E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerAsyncTaskBlueprintProxy*         ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFL_PlayerMovement_CreateMoveToProxyObject) == 0x000008, "Wrong alignment on BFL_PlayerMovement_CreateMoveToProxyObject");
static_assert(sizeof(BFL_PlayerMovement_CreateMoveToProxyObject) == 0x000038, "Wrong size on BFL_PlayerMovement_CreateMoveToProxyObject");
static_assert(offsetof(BFL_PlayerMovement_CreateMoveToProxyObject, WorldContextObject) == 0x000000, "Member 'BFL_PlayerMovement_CreateMoveToProxyObject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BFL_PlayerMovement_CreateMoveToProxyObject, Pawn) == 0x000008, "Member 'BFL_PlayerMovement_CreateMoveToProxyObject::Pawn' has a wrong offset!");
static_assert(offsetof(BFL_PlayerMovement_CreateMoveToProxyObject, Destination) == 0x000010, "Member 'BFL_PlayerMovement_CreateMoveToProxyObject::Destination' has a wrong offset!");
static_assert(offsetof(BFL_PlayerMovement_CreateMoveToProxyObject, TargetActor) == 0x000020, "Member 'BFL_PlayerMovement_CreateMoveToProxyObject::TargetActor' has a wrong offset!");
static_assert(offsetof(BFL_PlayerMovement_CreateMoveToProxyObject, AcceptanceRadius) == 0x000028, "Member 'BFL_PlayerMovement_CreateMoveToProxyObject::AcceptanceRadius' has a wrong offset!");
static_assert(offsetof(BFL_PlayerMovement_CreateMoveToProxyObject, bStopOnOverlap) == 0x00002C, "Member 'BFL_PlayerMovement_CreateMoveToProxyObject::bStopOnOverlap' has a wrong offset!");
static_assert(offsetof(BFL_PlayerMovement_CreateMoveToProxyObject, bDisableInput) == 0x00002D, "Member 'BFL_PlayerMovement_CreateMoveToProxyObject::bDisableInput' has a wrong offset!");
static_assert(offsetof(BFL_PlayerMovement_CreateMoveToProxyObject, bIgnoreLookInput) == 0x00002E, "Member 'BFL_PlayerMovement_CreateMoveToProxyObject::bIgnoreLookInput' has a wrong offset!");
static_assert(offsetof(BFL_PlayerMovement_CreateMoveToProxyObject, ReturnValue) == 0x000030, "Member 'BFL_PlayerMovement_CreateMoveToProxyObject::ReturnValue' has a wrong offset!");

// Function ObsidianFox.BFL_PlayerMovement.SimpleMoveToLocation
// 0x0038 (0x0038 - 0x0000)
struct BFL_PlayerMovement_SimpleMoveToLocation final
{
public:
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EPlayerMoveToLocationAsyncMode                AsyncMode;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AOFPlayerController*                    Controller;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GoalLocation;                                      // 0x0028(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInDisableInput;                                   // 0x0034(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIgnoreLookInput;                                // 0x0035(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFL_PlayerMovement_SimpleMoveToLocation) == 0x000008, "Wrong alignment on BFL_PlayerMovement_SimpleMoveToLocation");
static_assert(sizeof(BFL_PlayerMovement_SimpleMoveToLocation) == 0x000038, "Wrong size on BFL_PlayerMovement_SimpleMoveToLocation");
static_assert(offsetof(BFL_PlayerMovement_SimpleMoveToLocation, LatentInfo) == 0x000000, "Member 'BFL_PlayerMovement_SimpleMoveToLocation::LatentInfo' has a wrong offset!");
static_assert(offsetof(BFL_PlayerMovement_SimpleMoveToLocation, AsyncMode) == 0x000018, "Member 'BFL_PlayerMovement_SimpleMoveToLocation::AsyncMode' has a wrong offset!");
static_assert(offsetof(BFL_PlayerMovement_SimpleMoveToLocation, Controller) == 0x000020, "Member 'BFL_PlayerMovement_SimpleMoveToLocation::Controller' has a wrong offset!");
static_assert(offsetof(BFL_PlayerMovement_SimpleMoveToLocation, GoalLocation) == 0x000028, "Member 'BFL_PlayerMovement_SimpleMoveToLocation::GoalLocation' has a wrong offset!");
static_assert(offsetof(BFL_PlayerMovement_SimpleMoveToLocation, bInDisableInput) == 0x000034, "Member 'BFL_PlayerMovement_SimpleMoveToLocation::bInDisableInput' has a wrong offset!");
static_assert(offsetof(BFL_PlayerMovement_SimpleMoveToLocation, bInIgnoreLookInput) == 0x000035, "Member 'BFL_PlayerMovement_SimpleMoveToLocation::bInIgnoreLookInput' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_ChunkInstallWaitPopup.DisplayChunkInstallWaitPopup
// 0x0050 (0x0050 - 0x0000)
struct BPAsyncAction_ChunkInstallWaitPopup_DisplayChunkInstallWaitPopup final
{
public:
	const class UObject*                          WorldContextObject_0;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0020(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         ChunkIndex_0;                                      // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UOFChunkInstallPopupWidget> ConfirmationPopupClass;                            // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBPAsyncAction_ChunkInstallWaitPopup*   ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_ChunkInstallWaitPopup_DisplayChunkInstallWaitPopup) == 0x000008, "Wrong alignment on BPAsyncAction_ChunkInstallWaitPopup_DisplayChunkInstallWaitPopup");
static_assert(sizeof(BPAsyncAction_ChunkInstallWaitPopup_DisplayChunkInstallWaitPopup) == 0x000050, "Wrong size on BPAsyncAction_ChunkInstallWaitPopup_DisplayChunkInstallWaitPopup");
static_assert(offsetof(BPAsyncAction_ChunkInstallWaitPopup_DisplayChunkInstallWaitPopup, WorldContextObject_0) == 0x000000, "Member 'BPAsyncAction_ChunkInstallWaitPopup_DisplayChunkInstallWaitPopup::WorldContextObject_0' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_ChunkInstallWaitPopup_DisplayChunkInstallWaitPopup, Title) == 0x000008, "Member 'BPAsyncAction_ChunkInstallWaitPopup_DisplayChunkInstallWaitPopup::Title' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_ChunkInstallWaitPopup_DisplayChunkInstallWaitPopup, Description) == 0x000020, "Member 'BPAsyncAction_ChunkInstallWaitPopup_DisplayChunkInstallWaitPopup::Description' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_ChunkInstallWaitPopup_DisplayChunkInstallWaitPopup, ChunkIndex_0) == 0x000038, "Member 'BPAsyncAction_ChunkInstallWaitPopup_DisplayChunkInstallWaitPopup::ChunkIndex_0' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_ChunkInstallWaitPopup_DisplayChunkInstallWaitPopup, ConfirmationPopupClass) == 0x000040, "Member 'BPAsyncAction_ChunkInstallWaitPopup_DisplayChunkInstallWaitPopup::ConfirmationPopupClass' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_ChunkInstallWaitPopup_DisplayChunkInstallWaitPopup, ReturnValue) == 0x000048, "Member 'BPAsyncAction_ChunkInstallWaitPopup_DisplayChunkInstallWaitPopup::ReturnValue' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_ChunkInstallWaitPopup.OnConfirmationResultEnded
// 0x0001 (0x0001 - 0x0000)
struct BPAsyncAction_ChunkInstallWaitPopup_OnConfirmationResultEnded final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_ChunkInstallWaitPopup_OnConfirmationResultEnded) == 0x000001, "Wrong alignment on BPAsyncAction_ChunkInstallWaitPopup_OnConfirmationResultEnded");
static_assert(sizeof(BPAsyncAction_ChunkInstallWaitPopup_OnConfirmationResultEnded) == 0x000001, "Wrong size on BPAsyncAction_ChunkInstallWaitPopup_OnConfirmationResultEnded");
static_assert(offsetof(BPAsyncAction_ChunkInstallWaitPopup_OnConfirmationResultEnded, bResult) == 0x000000, "Member 'BPAsyncAction_ChunkInstallWaitPopup_OnConfirmationResultEnded::bResult' has a wrong offset!");

// Function ObsidianFox.PreloadLevelsActor.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct PreloadLevelsActor_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreloadLevelsActor_OnOverlapBegin) == 0x000008, "Wrong alignment on PreloadLevelsActor_OnOverlapBegin");
static_assert(sizeof(PreloadLevelsActor_OnOverlapBegin) == 0x000010, "Wrong size on PreloadLevelsActor_OnOverlapBegin");
static_assert(offsetof(PreloadLevelsActor_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'PreloadLevelsActor_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(PreloadLevelsActor_OnOverlapBegin, OtherActor) == 0x000008, "Member 'PreloadLevelsActor_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function ObsidianFox.PreloadLevelsActor.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct PreloadLevelsActor_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreloadLevelsActor_OnOverlapEnd) == 0x000008, "Wrong alignment on PreloadLevelsActor_OnOverlapEnd");
static_assert(sizeof(PreloadLevelsActor_OnOverlapEnd) == 0x000010, "Wrong size on PreloadLevelsActor_OnOverlapEnd");
static_assert(offsetof(PreloadLevelsActor_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'PreloadLevelsActor_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(PreloadLevelsActor_OnOverlapEnd, OtherActor) == 0x000008, "Member 'PreloadLevelsActor_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_ConfirmationPopup.DisplayConfirmationPopup
// 0x0048 (0x0048 - 0x0000)
struct BPAsyncAction_ConfirmationPopup_DisplayConfirmationPopup final
{
public:
	const class UObject*                          WorldContextObject_0;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0020(0x0018)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class UOFConfirmationPopupWidget> ConfirmationPopupClass;                            // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBPAsyncAction_ConfirmationPopup*       ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_ConfirmationPopup_DisplayConfirmationPopup) == 0x000008, "Wrong alignment on BPAsyncAction_ConfirmationPopup_DisplayConfirmationPopup");
static_assert(sizeof(BPAsyncAction_ConfirmationPopup_DisplayConfirmationPopup) == 0x000048, "Wrong size on BPAsyncAction_ConfirmationPopup_DisplayConfirmationPopup");
static_assert(offsetof(BPAsyncAction_ConfirmationPopup_DisplayConfirmationPopup, WorldContextObject_0) == 0x000000, "Member 'BPAsyncAction_ConfirmationPopup_DisplayConfirmationPopup::WorldContextObject_0' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_ConfirmationPopup_DisplayConfirmationPopup, Title) == 0x000008, "Member 'BPAsyncAction_ConfirmationPopup_DisplayConfirmationPopup::Title' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_ConfirmationPopup_DisplayConfirmationPopup, Description) == 0x000020, "Member 'BPAsyncAction_ConfirmationPopup_DisplayConfirmationPopup::Description' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_ConfirmationPopup_DisplayConfirmationPopup, ConfirmationPopupClass) == 0x000038, "Member 'BPAsyncAction_ConfirmationPopup_DisplayConfirmationPopup::ConfirmationPopupClass' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_ConfirmationPopup_DisplayConfirmationPopup, ReturnValue) == 0x000040, "Member 'BPAsyncAction_ConfirmationPopup_DisplayConfirmationPopup::ReturnValue' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_ConfirmationPopup.OnConfirmationResultEnded
// 0x0001 (0x0001 - 0x0000)
struct BPAsyncAction_ConfirmationPopup_OnConfirmationResultEnded final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_ConfirmationPopup_OnConfirmationResultEnded) == 0x000001, "Wrong alignment on BPAsyncAction_ConfirmationPopup_OnConfirmationResultEnded");
static_assert(sizeof(BPAsyncAction_ConfirmationPopup_OnConfirmationResultEnded) == 0x000001, "Wrong size on BPAsyncAction_ConfirmationPopup_OnConfirmationResultEnded");
static_assert(offsetof(BPAsyncAction_ConfirmationPopup_OnConfirmationResultEnded, bResult) == 0x000000, "Member 'BPAsyncAction_ConfirmationPopup_OnConfirmationResultEnded::bResult' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_GetMontageByTag.GetMontageByTag
// 0x0018 (0x0018 - 0x0000)
struct BPAsyncAction_GetMontageByTag_GetMontageByTag final
{
public:
	const class USkeletalMeshComponent*           SkeletalMeshComp;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           MontageTag_0;                                      // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBPAsyncAction_GetMontageByTag*         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_GetMontageByTag_GetMontageByTag) == 0x000008, "Wrong alignment on BPAsyncAction_GetMontageByTag_GetMontageByTag");
static_assert(sizeof(BPAsyncAction_GetMontageByTag_GetMontageByTag) == 0x000018, "Wrong size on BPAsyncAction_GetMontageByTag_GetMontageByTag");
static_assert(offsetof(BPAsyncAction_GetMontageByTag_GetMontageByTag, SkeletalMeshComp) == 0x000000, "Member 'BPAsyncAction_GetMontageByTag_GetMontageByTag::SkeletalMeshComp' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_GetMontageByTag_GetMontageByTag, MontageTag_0) == 0x000008, "Member 'BPAsyncAction_GetMontageByTag_GetMontageByTag::MontageTag_0' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_GetMontageByTag_GetMontageByTag, ReturnValue) == 0x000010, "Member 'BPAsyncAction_GetMontageByTag_GetMontageByTag::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.BPAsyncAction_GetMontageByTag.GetAnimationMontageAsyncBaseSignature__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BPAsyncAction_GetMontageByTag_GetAnimationMontageAsyncBaseSignature__DelegateSignature final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_GetMontageByTag_GetAnimationMontageAsyncBaseSignature__DelegateSignature) == 0x000008, "Wrong alignment on BPAsyncAction_GetMontageByTag_GetAnimationMontageAsyncBaseSignature__DelegateSignature");
static_assert(sizeof(BPAsyncAction_GetMontageByTag_GetAnimationMontageAsyncBaseSignature__DelegateSignature) == 0x000008, "Wrong size on BPAsyncAction_GetMontageByTag_GetAnimationMontageAsyncBaseSignature__DelegateSignature");
static_assert(offsetof(BPAsyncAction_GetMontageByTag_GetAnimationMontageAsyncBaseSignature__DelegateSignature, Montage) == 0x000000, "Member 'BPAsyncAction_GetMontageByTag_GetAnimationMontageAsyncBaseSignature__DelegateSignature::Montage' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_GetTextureAssociatedWithInputAction.GetTextureAssociatedWithInputAction
// 0x0020 (0x0020 - 0x0000)
struct BPAsyncAction_GetTextureAssociatedWithInputAction_GetTextureAssociatedWithInputAction final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInputAction*                     InInputAction;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPiecesInputMappingContext*       InInputMappingContext;                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBPAsyncAction_GetTextureAssociatedWithInputAction* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_GetTextureAssociatedWithInputAction_GetTextureAssociatedWithInputAction) == 0x000008, "Wrong alignment on BPAsyncAction_GetTextureAssociatedWithInputAction_GetTextureAssociatedWithInputAction");
static_assert(sizeof(BPAsyncAction_GetTextureAssociatedWithInputAction_GetTextureAssociatedWithInputAction) == 0x000020, "Wrong size on BPAsyncAction_GetTextureAssociatedWithInputAction_GetTextureAssociatedWithInputAction");
static_assert(offsetof(BPAsyncAction_GetTextureAssociatedWithInputAction_GetTextureAssociatedWithInputAction, WorldContextObject) == 0x000000, "Member 'BPAsyncAction_GetTextureAssociatedWithInputAction_GetTextureAssociatedWithInputAction::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_GetTextureAssociatedWithInputAction_GetTextureAssociatedWithInputAction, InInputAction) == 0x000008, "Member 'BPAsyncAction_GetTextureAssociatedWithInputAction_GetTextureAssociatedWithInputAction::InInputAction' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_GetTextureAssociatedWithInputAction_GetTextureAssociatedWithInputAction, InInputMappingContext) == 0x000010, "Member 'BPAsyncAction_GetTextureAssociatedWithInputAction_GetTextureAssociatedWithInputAction::InInputMappingContext' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_GetTextureAssociatedWithInputAction_GetTextureAssociatedWithInputAction, ReturnValue) == 0x000018, "Member 'BPAsyncAction_GetTextureAssociatedWithInputAction_GetTextureAssociatedWithInputAction::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.BPAsyncAction_GetTextureAssociatedWithInputAction.OnAsyncActionCompletePin__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BPAsyncAction_GetTextureAssociatedWithInputAction_OnAsyncActionCompletePin__DelegateSignature final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   KeyString;                                         // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_GetTextureAssociatedWithInputAction_OnAsyncActionCompletePin__DelegateSignature) == 0x000008, "Wrong alignment on BPAsyncAction_GetTextureAssociatedWithInputAction_OnAsyncActionCompletePin__DelegateSignature");
static_assert(sizeof(BPAsyncAction_GetTextureAssociatedWithInputAction_OnAsyncActionCompletePin__DelegateSignature) == 0x000020, "Wrong size on BPAsyncAction_GetTextureAssociatedWithInputAction_OnAsyncActionCompletePin__DelegateSignature");
static_assert(offsetof(BPAsyncAction_GetTextureAssociatedWithInputAction_OnAsyncActionCompletePin__DelegateSignature, Texture) == 0x000000, "Member 'BPAsyncAction_GetTextureAssociatedWithInputAction_OnAsyncActionCompletePin__DelegateSignature::Texture' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_GetTextureAssociatedWithInputAction_OnAsyncActionCompletePin__DelegateSignature, KeyString) == 0x000008, "Member 'BPAsyncAction_GetTextureAssociatedWithInputAction_OnAsyncActionCompletePin__DelegateSignature::KeyString' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_PlayIKMontage.PlayIKMontage
// 0x0038 (0x0038 - 0x0000)
struct BPAsyncAction_PlayIKMontage_PlayIKMontage final
{
public:
	class USkeletalMeshComponent*                 InSkeletalMesh;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MontageToPlay;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FIKParameters>                  IKParameters;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingPosition;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartingSection;                                   // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBPAsyncAction_PlayIKMontage*           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_PlayIKMontage_PlayIKMontage) == 0x000008, "Wrong alignment on BPAsyncAction_PlayIKMontage_PlayIKMontage");
static_assert(sizeof(BPAsyncAction_PlayIKMontage_PlayIKMontage) == 0x000038, "Wrong size on BPAsyncAction_PlayIKMontage_PlayIKMontage");
static_assert(offsetof(BPAsyncAction_PlayIKMontage_PlayIKMontage, InSkeletalMesh) == 0x000000, "Member 'BPAsyncAction_PlayIKMontage_PlayIKMontage::InSkeletalMesh' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PlayIKMontage_PlayIKMontage, MontageToPlay) == 0x000008, "Member 'BPAsyncAction_PlayIKMontage_PlayIKMontage::MontageToPlay' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PlayIKMontage_PlayIKMontage, IKParameters) == 0x000010, "Member 'BPAsyncAction_PlayIKMontage_PlayIKMontage::IKParameters' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PlayIKMontage_PlayIKMontage, PlayRate) == 0x000020, "Member 'BPAsyncAction_PlayIKMontage_PlayIKMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PlayIKMontage_PlayIKMontage, StartingPosition) == 0x000024, "Member 'BPAsyncAction_PlayIKMontage_PlayIKMontage::StartingPosition' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PlayIKMontage_PlayIKMontage, StartingSection) == 0x000028, "Member 'BPAsyncAction_PlayIKMontage_PlayIKMontage::StartingSection' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PlayIKMontage_PlayIKMontage, ReturnValue) == 0x000030, "Member 'BPAsyncAction_PlayIKMontage_PlayIKMontage::ReturnValue' has a wrong offset!");

// Function ObsidianFox.SaveSlotWidget.OnSaveConfirmationDone
// 0x0001 (0x0001 - 0x0000)
struct SaveSlotWidget_OnSaveConfirmationDone final
{
public:
	bool                                          bAccepted;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveSlotWidget_OnSaveConfirmationDone) == 0x000001, "Wrong alignment on SaveSlotWidget_OnSaveConfirmationDone");
static_assert(sizeof(SaveSlotWidget_OnSaveConfirmationDone) == 0x000001, "Wrong size on SaveSlotWidget_OnSaveConfirmationDone");
static_assert(offsetof(SaveSlotWidget_OnSaveConfirmationDone, bAccepted) == 0x000000, "Member 'SaveSlotWidget_OnSaveConfirmationDone::bAccepted' has a wrong offset!");

// Function ObsidianFox.SaveSlotWidget.OnSaveFinished
// 0x0001 (0x0001 - 0x0000)
struct SaveSlotWidget_OnSaveFinished final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveSlotWidget_OnSaveFinished) == 0x000001, "Wrong alignment on SaveSlotWidget_OnSaveFinished");
static_assert(sizeof(SaveSlotWidget_OnSaveFinished) == 0x000001, "Wrong size on SaveSlotWidget_OnSaveFinished");
static_assert(offsetof(SaveSlotWidget_OnSaveFinished, Success) == 0x000000, "Member 'SaveSlotWidget_OnSaveFinished::Success' has a wrong offset!");

// Function ObsidianFox.SaveSlotWidget.SaveGameInSlot
// 0x0004 (0x0004 - 0x0000)
struct SaveSlotWidget_SaveGameInSlot final
{
public:
	int32                                         SaveGameSlot;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveSlotWidget_SaveGameInSlot) == 0x000004, "Wrong alignment on SaveSlotWidget_SaveGameInSlot");
static_assert(sizeof(SaveSlotWidget_SaveGameInSlot) == 0x000004, "Wrong size on SaveSlotWidget_SaveGameInSlot");
static_assert(offsetof(SaveSlotWidget_SaveGameInSlot, SaveGameSlot) == 0x000000, "Member 'SaveSlotWidget_SaveGameInSlot::SaveGameSlot' has a wrong offset!");

// Function ObsidianFox.SaveSlotWidget.GetProgression
// 0x0008 (0x0008 - 0x0000)
struct SaveSlotWidget_GetProgression final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveSlotWidget_GetProgression) == 0x000004, "Wrong alignment on SaveSlotWidget_GetProgression");
static_assert(sizeof(SaveSlotWidget_GetProgression) == 0x000008, "Wrong size on SaveSlotWidget_GetProgression");
static_assert(offsetof(SaveSlotWidget_GetProgression, ReturnValue) == 0x000000, "Member 'SaveSlotWidget_GetProgression::ReturnValue' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_PlayNearestSectionMontage.PlayNearestSectionMontage
// 0x0038 (0x0038 - 0x0000)
struct BPAsyncAction_PlayNearestSectionMontage_PlayNearestSectionMontage final
{
public:
	class USkeletalMeshComponent*                 InSkeletalMesh;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GoalLocation;                                      // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           MontageToPlay;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetGoalLocationAsIKTarget;                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreXY;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBPAsyncAction_PlayNearestSectionMontage* ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_PlayNearestSectionMontage_PlayNearestSectionMontage) == 0x000008, "Wrong alignment on BPAsyncAction_PlayNearestSectionMontage_PlayNearestSectionMontage");
static_assert(sizeof(BPAsyncAction_PlayNearestSectionMontage_PlayNearestSectionMontage) == 0x000038, "Wrong size on BPAsyncAction_PlayNearestSectionMontage_PlayNearestSectionMontage");
static_assert(offsetof(BPAsyncAction_PlayNearestSectionMontage_PlayNearestSectionMontage, InSkeletalMesh) == 0x000000, "Member 'BPAsyncAction_PlayNearestSectionMontage_PlayNearestSectionMontage::InSkeletalMesh' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PlayNearestSectionMontage_PlayNearestSectionMontage, GoalLocation) == 0x000008, "Member 'BPAsyncAction_PlayNearestSectionMontage_PlayNearestSectionMontage::GoalLocation' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PlayNearestSectionMontage_PlayNearestSectionMontage, MontageToPlay) == 0x000018, "Member 'BPAsyncAction_PlayNearestSectionMontage_PlayNearestSectionMontage::MontageToPlay' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PlayNearestSectionMontage_PlayNearestSectionMontage, SetGoalLocationAsIKTarget) == 0x000020, "Member 'BPAsyncAction_PlayNearestSectionMontage_PlayNearestSectionMontage::SetGoalLocationAsIKTarget' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PlayNearestSectionMontage_PlayNearestSectionMontage, PlayRate) == 0x000024, "Member 'BPAsyncAction_PlayNearestSectionMontage_PlayNearestSectionMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PlayNearestSectionMontage_PlayNearestSectionMontage, IgnoreXY) == 0x000028, "Member 'BPAsyncAction_PlayNearestSectionMontage_PlayNearestSectionMontage::IgnoreXY' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PlayNearestSectionMontage_PlayNearestSectionMontage, ReturnValue) == 0x000030, "Member 'BPAsyncAction_PlayNearestSectionMontage_PlayNearestSectionMontage::ReturnValue' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_RepositionAndReorient.RepositionAndReorient
// 0x0040 (0x0040 - 0x0000)
struct BPAsyncAction_RepositionAndReorient_RepositionAndReorient final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERepositionMethod                             RepositionMethod;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReorientMethod                               ReorientMethod;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        SceneComponentTransformGoal;                       // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBPAsyncAction_RepositionAndReorient*   OutActionProxy;                                    // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETransformCalculationMethod                   TransformBehaviour;                                // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LerpAsFallback_0;                                  // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RepositionBeforeReorientation_0;                   // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreZ_0;                                         // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveCloseEnough_0;                                 // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TravelTime_0;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   EasingFunction;                                    // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EasingExponent;                                    // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleCloseEnough_0;                                // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBPAsyncAction_RepositionAndReorient*   ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_RepositionAndReorient_RepositionAndReorient) == 0x000008, "Wrong alignment on BPAsyncAction_RepositionAndReorient_RepositionAndReorient");
static_assert(sizeof(BPAsyncAction_RepositionAndReorient_RepositionAndReorient) == 0x000040, "Wrong size on BPAsyncAction_RepositionAndReorient_RepositionAndReorient");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_RepositionAndReorient, Character) == 0x000000, "Member 'BPAsyncAction_RepositionAndReorient_RepositionAndReorient::Character' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_RepositionAndReorient, RepositionMethod) == 0x000008, "Member 'BPAsyncAction_RepositionAndReorient_RepositionAndReorient::RepositionMethod' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_RepositionAndReorient, ReorientMethod) == 0x000009, "Member 'BPAsyncAction_RepositionAndReorient_RepositionAndReorient::ReorientMethod' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_RepositionAndReorient, SceneComponentTransformGoal) == 0x000010, "Member 'BPAsyncAction_RepositionAndReorient_RepositionAndReorient::SceneComponentTransformGoal' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_RepositionAndReorient, OutActionProxy) == 0x000018, "Member 'BPAsyncAction_RepositionAndReorient_RepositionAndReorient::OutActionProxy' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_RepositionAndReorient, TransformBehaviour) == 0x000020, "Member 'BPAsyncAction_RepositionAndReorient_RepositionAndReorient::TransformBehaviour' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_RepositionAndReorient, LerpAsFallback_0) == 0x000021, "Member 'BPAsyncAction_RepositionAndReorient_RepositionAndReorient::LerpAsFallback_0' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_RepositionAndReorient, RepositionBeforeReorientation_0) == 0x000022, "Member 'BPAsyncAction_RepositionAndReorient_RepositionAndReorient::RepositionBeforeReorientation_0' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_RepositionAndReorient, IgnoreZ_0) == 0x000023, "Member 'BPAsyncAction_RepositionAndReorient_RepositionAndReorient::IgnoreZ_0' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_RepositionAndReorient, MoveCloseEnough_0) == 0x000024, "Member 'BPAsyncAction_RepositionAndReorient_RepositionAndReorient::MoveCloseEnough_0' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_RepositionAndReorient, TravelTime_0) == 0x000028, "Member 'BPAsyncAction_RepositionAndReorient_RepositionAndReorient::TravelTime_0' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_RepositionAndReorient, EasingFunction) == 0x00002C, "Member 'BPAsyncAction_RepositionAndReorient_RepositionAndReorient::EasingFunction' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_RepositionAndReorient, EasingExponent) == 0x000030, "Member 'BPAsyncAction_RepositionAndReorient_RepositionAndReorient::EasingExponent' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_RepositionAndReorient, AngleCloseEnough_0) == 0x000034, "Member 'BPAsyncAction_RepositionAndReorient_RepositionAndReorient::AngleCloseEnough_0' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_RepositionAndReorient, ReturnValue) == 0x000038, "Member 'BPAsyncAction_RepositionAndReorient_RepositionAndReorient::ReturnValue' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_RepositionAndReorient.CharacterMoveToCompleted
// 0x0008 (0x0008 - 0x0000)
struct BPAsyncAction_RepositionAndReorient_CharacterMoveToCompleted final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAIRequestID                           RequestID;                                         // 0x0004(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_RepositionAndReorient_CharacterMoveToCompleted) == 0x000004, "Wrong alignment on BPAsyncAction_RepositionAndReorient_CharacterMoveToCompleted");
static_assert(sizeof(BPAsyncAction_RepositionAndReorient_CharacterMoveToCompleted) == 0x000008, "Wrong size on BPAsyncAction_RepositionAndReorient_CharacterMoveToCompleted");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_CharacterMoveToCompleted, MovementResult) == 0x000000, "Member 'BPAsyncAction_RepositionAndReorient_CharacterMoveToCompleted::MovementResult' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_CharacterMoveToCompleted, RequestID) == 0x000004, "Member 'BPAsyncAction_RepositionAndReorient_CharacterMoveToCompleted::RequestID' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_RepositionAndReorient.CharacterMoveToFailed
// 0x0008 (0x0008 - 0x0000)
struct BPAsyncAction_RepositionAndReorient_CharacterMoveToFailed final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAIRequestID                           RequestID;                                         // 0x0004(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_RepositionAndReorient_CharacterMoveToFailed) == 0x000004, "Wrong alignment on BPAsyncAction_RepositionAndReorient_CharacterMoveToFailed");
static_assert(sizeof(BPAsyncAction_RepositionAndReorient_CharacterMoveToFailed) == 0x000008, "Wrong size on BPAsyncAction_RepositionAndReorient_CharacterMoveToFailed");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_CharacterMoveToFailed, MovementResult) == 0x000000, "Member 'BPAsyncAction_RepositionAndReorient_CharacterMoveToFailed::MovementResult' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_CharacterMoveToFailed, RequestID) == 0x000004, "Member 'BPAsyncAction_RepositionAndReorient_CharacterMoveToFailed::RequestID' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_RepositionAndReorient.CharacterTurnInPlaceCompleted
// 0x0010 (0x0010 - 0x0000)
struct BPAsyncAction_RepositionAndReorient_CharacterTurnInPlaceCompleted final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBlendOutToWalk;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BPAsyncAction_RepositionAndReorient_CharacterTurnInPlaceCompleted) == 0x000008, "Wrong alignment on BPAsyncAction_RepositionAndReorient_CharacterTurnInPlaceCompleted");
static_assert(sizeof(BPAsyncAction_RepositionAndReorient_CharacterTurnInPlaceCompleted) == 0x000010, "Wrong size on BPAsyncAction_RepositionAndReorient_CharacterTurnInPlaceCompleted");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_CharacterTurnInPlaceCompleted, Character) == 0x000000, "Member 'BPAsyncAction_RepositionAndReorient_CharacterTurnInPlaceCompleted::Character' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_CharacterTurnInPlaceCompleted, bIsBlendOutToWalk) == 0x000008, "Member 'BPAsyncAction_RepositionAndReorient_CharacterTurnInPlaceCompleted::bIsBlendOutToWalk' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_RepositionAndReorient.CharacterTurnInPlaceFailedAngleTooSmall
// 0x0008 (0x0008 - 0x0000)
struct BPAsyncAction_RepositionAndReorient_CharacterTurnInPlaceFailedAngleTooSmall final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_RepositionAndReorient_CharacterTurnInPlaceFailedAngleTooSmall) == 0x000008, "Wrong alignment on BPAsyncAction_RepositionAndReorient_CharacterTurnInPlaceFailedAngleTooSmall");
static_assert(sizeof(BPAsyncAction_RepositionAndReorient_CharacterTurnInPlaceFailedAngleTooSmall) == 0x000008, "Wrong size on BPAsyncAction_RepositionAndReorient_CharacterTurnInPlaceFailedAngleTooSmall");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_CharacterTurnInPlaceFailedAngleTooSmall, Character) == 0x000000, "Member 'BPAsyncAction_RepositionAndReorient_CharacterTurnInPlaceFailedAngleTooSmall::Character' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_RepositionAndReorient.LerpDoneFailure
// 0x0010 (0x0010 - 0x0000)
struct BPAsyncAction_RepositionAndReorient_LerpDoneFailure final
{
public:
	class AActor*                                 TransformedActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorTransformComponent*               TransformingComponent;                             // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_RepositionAndReorient_LerpDoneFailure) == 0x000008, "Wrong alignment on BPAsyncAction_RepositionAndReorient_LerpDoneFailure");
static_assert(sizeof(BPAsyncAction_RepositionAndReorient_LerpDoneFailure) == 0x000010, "Wrong size on BPAsyncAction_RepositionAndReorient_LerpDoneFailure");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_LerpDoneFailure, TransformedActor) == 0x000000, "Member 'BPAsyncAction_RepositionAndReorient_LerpDoneFailure::TransformedActor' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_LerpDoneFailure, TransformingComponent) == 0x000008, "Member 'BPAsyncAction_RepositionAndReorient_LerpDoneFailure::TransformingComponent' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_RepositionAndReorient.LerpDoneSuccess
// 0x0010 (0x0010 - 0x0000)
struct BPAsyncAction_RepositionAndReorient_LerpDoneSuccess final
{
public:
	class AActor*                                 TransformedActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorTransformComponent*               TransformingComponent;                             // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_RepositionAndReorient_LerpDoneSuccess) == 0x000008, "Wrong alignment on BPAsyncAction_RepositionAndReorient_LerpDoneSuccess");
static_assert(sizeof(BPAsyncAction_RepositionAndReorient_LerpDoneSuccess) == 0x000010, "Wrong size on BPAsyncAction_RepositionAndReorient_LerpDoneSuccess");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_LerpDoneSuccess, TransformedActor) == 0x000000, "Member 'BPAsyncAction_RepositionAndReorient_LerpDoneSuccess::TransformedActor' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_LerpDoneSuccess, TransformingComponent) == 0x000008, "Member 'BPAsyncAction_RepositionAndReorient_LerpDoneSuccess::TransformingComponent' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_RepositionAndReorient.LerpOnCloseEnough
// 0x0010 (0x0010 - 0x0000)
struct BPAsyncAction_RepositionAndReorient_LerpOnCloseEnough final
{
public:
	class AActor*                                 TransformedActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorTransformComponent*               TransformingComponent;                             // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_RepositionAndReorient_LerpOnCloseEnough) == 0x000008, "Wrong alignment on BPAsyncAction_RepositionAndReorient_LerpOnCloseEnough");
static_assert(sizeof(BPAsyncAction_RepositionAndReorient_LerpOnCloseEnough) == 0x000010, "Wrong size on BPAsyncAction_RepositionAndReorient_LerpOnCloseEnough");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_LerpOnCloseEnough, TransformedActor) == 0x000000, "Member 'BPAsyncAction_RepositionAndReorient_LerpOnCloseEnough::TransformedActor' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_LerpOnCloseEnough, TransformingComponent) == 0x000008, "Member 'BPAsyncAction_RepositionAndReorient_LerpOnCloseEnough::TransformingComponent' has a wrong offset!");

// DelegateFunction ObsidianFox.BPAsyncAction_RepositionAndReorient.OnAsyncActionCompletePin__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BPAsyncAction_RepositionAndReorient_OnAsyncActionCompletePin__DelegateSignature final
{
public:
	class ACharacter*                             TransformedCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_RepositionAndReorient_OnAsyncActionCompletePin__DelegateSignature) == 0x000008, "Wrong alignment on BPAsyncAction_RepositionAndReorient_OnAsyncActionCompletePin__DelegateSignature");
static_assert(sizeof(BPAsyncAction_RepositionAndReorient_OnAsyncActionCompletePin__DelegateSignature) == 0x000008, "Wrong size on BPAsyncAction_RepositionAndReorient_OnAsyncActionCompletePin__DelegateSignature");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_OnAsyncActionCompletePin__DelegateSignature, TransformedCharacter) == 0x000000, "Member 'BPAsyncAction_RepositionAndReorient_OnAsyncActionCompletePin__DelegateSignature::TransformedCharacter' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_RepositionAndReorient.ForceStopTransform
// 0x0001 (0x0001 - 0x0000)
struct BPAsyncAction_RepositionAndReorient_ForceStopTransform final
{
public:
	bool                                          SnapCharacterToTargetLocation;                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_RepositionAndReorient_ForceStopTransform) == 0x000001, "Wrong alignment on BPAsyncAction_RepositionAndReorient_ForceStopTransform");
static_assert(sizeof(BPAsyncAction_RepositionAndReorient_ForceStopTransform) == 0x000001, "Wrong size on BPAsyncAction_RepositionAndReorient_ForceStopTransform");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_ForceStopTransform, SnapCharacterToTargetLocation) == 0x000000, "Member 'BPAsyncAction_RepositionAndReorient_ForceStopTransform::SnapCharacterToTargetLocation' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_RepositionAndReorient.ForceStopTransformLocation
// 0x0001 (0x0001 - 0x0000)
struct BPAsyncAction_RepositionAndReorient_ForceStopTransformLocation final
{
public:
	bool                                          SnapCharacterToTargetLocation;                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_RepositionAndReorient_ForceStopTransformLocation) == 0x000001, "Wrong alignment on BPAsyncAction_RepositionAndReorient_ForceStopTransformLocation");
static_assert(sizeof(BPAsyncAction_RepositionAndReorient_ForceStopTransformLocation) == 0x000001, "Wrong size on BPAsyncAction_RepositionAndReorient_ForceStopTransformLocation");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_ForceStopTransformLocation, SnapCharacterToTargetLocation) == 0x000000, "Member 'BPAsyncAction_RepositionAndReorient_ForceStopTransformLocation::SnapCharacterToTargetLocation' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_RepositionAndReorient.ForceStopTransformRotation
// 0x0001 (0x0001 - 0x0000)
struct BPAsyncAction_RepositionAndReorient_ForceStopTransformRotation final
{
public:
	bool                                          SnapCharacterToTargetRotation;                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_RepositionAndReorient_ForceStopTransformRotation) == 0x000001, "Wrong alignment on BPAsyncAction_RepositionAndReorient_ForceStopTransformRotation");
static_assert(sizeof(BPAsyncAction_RepositionAndReorient_ForceStopTransformRotation) == 0x000001, "Wrong size on BPAsyncAction_RepositionAndReorient_ForceStopTransformRotation");
static_assert(offsetof(BPAsyncAction_RepositionAndReorient_ForceStopTransformRotation, SnapCharacterToTargetRotation) == 0x000000, "Member 'BPAsyncAction_RepositionAndReorient_ForceStopTransformRotation::SnapCharacterToTargetRotation' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_SpawnEnemy.SpawnEnemy
// 0x0010 (0x0010 - 0x0000)
struct BPAsyncAction_SpawnEnemy_SpawnEnemy final
{
public:
	class AEnemySpawner*                          EnemySpawner;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBPAsyncAction_SpawnEnemy*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_SpawnEnemy_SpawnEnemy) == 0x000008, "Wrong alignment on BPAsyncAction_SpawnEnemy_SpawnEnemy");
static_assert(sizeof(BPAsyncAction_SpawnEnemy_SpawnEnemy) == 0x000010, "Wrong size on BPAsyncAction_SpawnEnemy_SpawnEnemy");
static_assert(offsetof(BPAsyncAction_SpawnEnemy_SpawnEnemy, EnemySpawner) == 0x000000, "Member 'BPAsyncAction_SpawnEnemy_SpawnEnemy::EnemySpawner' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_SpawnEnemy_SpawnEnemy, ReturnValue) == 0x000008, "Member 'BPAsyncAction_SpawnEnemy_SpawnEnemy::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.BPAsyncAction_SpawnEnemy.OnAsyncSpawnCompletePin__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct BPAsyncAction_SpawnEnemy_OnAsyncSpawnCompletePin__DelegateSignature final
{
public:
	class AOFEnemyCharacter*                      SpawnedEnemy;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAIController*                          SpawnedAICOntroller;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEnemySpawner*                          Spawner;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_SpawnEnemy_OnAsyncSpawnCompletePin__DelegateSignature) == 0x000008, "Wrong alignment on BPAsyncAction_SpawnEnemy_OnAsyncSpawnCompletePin__DelegateSignature");
static_assert(sizeof(BPAsyncAction_SpawnEnemy_OnAsyncSpawnCompletePin__DelegateSignature) == 0x000018, "Wrong size on BPAsyncAction_SpawnEnemy_OnAsyncSpawnCompletePin__DelegateSignature");
static_assert(offsetof(BPAsyncAction_SpawnEnemy_OnAsyncSpawnCompletePin__DelegateSignature, SpawnedEnemy) == 0x000000, "Member 'BPAsyncAction_SpawnEnemy_OnAsyncSpawnCompletePin__DelegateSignature::SpawnedEnemy' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_SpawnEnemy_OnAsyncSpawnCompletePin__DelegateSignature, SpawnedAICOntroller) == 0x000008, "Member 'BPAsyncAction_SpawnEnemy_OnAsyncSpawnCompletePin__DelegateSignature::SpawnedAICOntroller' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_SpawnEnemy_OnAsyncSpawnCompletePin__DelegateSignature, Spawner) == 0x000010, "Member 'BPAsyncAction_SpawnEnemy_OnAsyncSpawnCompletePin__DelegateSignature::Spawner' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_SpawnEnemy.OnSpawnerComplete
// 0x0018 (0x0018 - 0x0000)
struct BPAsyncAction_SpawnEnemy_OnSpawnerComplete final
{
public:
	class AOFEnemyCharacter*                      SpawnedEnemy;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAIController*                          SpawnedAICOntroller;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEnemySpawner*                          Spawner;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_SpawnEnemy_OnSpawnerComplete) == 0x000008, "Wrong alignment on BPAsyncAction_SpawnEnemy_OnSpawnerComplete");
static_assert(sizeof(BPAsyncAction_SpawnEnemy_OnSpawnerComplete) == 0x000018, "Wrong size on BPAsyncAction_SpawnEnemy_OnSpawnerComplete");
static_assert(offsetof(BPAsyncAction_SpawnEnemy_OnSpawnerComplete, SpawnedEnemy) == 0x000000, "Member 'BPAsyncAction_SpawnEnemy_OnSpawnerComplete::SpawnedEnemy' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_SpawnEnemy_OnSpawnerComplete, SpawnedAICOntroller) == 0x000008, "Member 'BPAsyncAction_SpawnEnemy_OnSpawnerComplete::SpawnedAICOntroller' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_SpawnEnemy_OnSpawnerComplete, Spawner) == 0x000010, "Member 'BPAsyncAction_SpawnEnemy_OnSpawnerComplete::Spawner' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_SpawnEnemies.SpawnEnemies
// 0x0018 (0x0018 - 0x0000)
struct BPAsyncAction_SpawnEnemies_SpawnEnemies final
{
public:
	TArray<class AEnemySpawner*>                  EnemySpawners;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UBPAsyncAction_SpawnEnemies*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_SpawnEnemies_SpawnEnemies) == 0x000008, "Wrong alignment on BPAsyncAction_SpawnEnemies_SpawnEnemies");
static_assert(sizeof(BPAsyncAction_SpawnEnemies_SpawnEnemies) == 0x000018, "Wrong size on BPAsyncAction_SpawnEnemies_SpawnEnemies");
static_assert(offsetof(BPAsyncAction_SpawnEnemies_SpawnEnemies, EnemySpawners) == 0x000000, "Member 'BPAsyncAction_SpawnEnemies_SpawnEnemies::EnemySpawners' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_SpawnEnemies_SpawnEnemies, ReturnValue) == 0x000010, "Member 'BPAsyncAction_SpawnEnemies_SpawnEnemies::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.BPAsyncAction_SpawnEnemies.OnAsyncSpawnCompletePin__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct BPAsyncAction_SpawnEnemies_OnAsyncSpawnCompletePin__DelegateSignature final
{
public:
	class AOFEnemyCharacter*                      SpawnedEnemy;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAIController*                          SpawnedAICOntroller;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEnemySpawner*                          Spawner;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_SpawnEnemies_OnAsyncSpawnCompletePin__DelegateSignature) == 0x000008, "Wrong alignment on BPAsyncAction_SpawnEnemies_OnAsyncSpawnCompletePin__DelegateSignature");
static_assert(sizeof(BPAsyncAction_SpawnEnemies_OnAsyncSpawnCompletePin__DelegateSignature) == 0x000018, "Wrong size on BPAsyncAction_SpawnEnemies_OnAsyncSpawnCompletePin__DelegateSignature");
static_assert(offsetof(BPAsyncAction_SpawnEnemies_OnAsyncSpawnCompletePin__DelegateSignature, SpawnedEnemy) == 0x000000, "Member 'BPAsyncAction_SpawnEnemies_OnAsyncSpawnCompletePin__DelegateSignature::SpawnedEnemy' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_SpawnEnemies_OnAsyncSpawnCompletePin__DelegateSignature, SpawnedAICOntroller) == 0x000008, "Member 'BPAsyncAction_SpawnEnemies_OnAsyncSpawnCompletePin__DelegateSignature::SpawnedAICOntroller' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_SpawnEnemies_OnAsyncSpawnCompletePin__DelegateSignature, Spawner) == 0x000010, "Member 'BPAsyncAction_SpawnEnemies_OnAsyncSpawnCompletePin__DelegateSignature::Spawner' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_SpawnEnemies.OnSpawnerComplete
// 0x0018 (0x0018 - 0x0000)
struct BPAsyncAction_SpawnEnemies_OnSpawnerComplete final
{
public:
	class AOFEnemyCharacter*                      SpawnedEnemy;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAIController*                          SpawnedAICOntroller;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEnemySpawner*                          Spawner;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_SpawnEnemies_OnSpawnerComplete) == 0x000008, "Wrong alignment on BPAsyncAction_SpawnEnemies_OnSpawnerComplete");
static_assert(sizeof(BPAsyncAction_SpawnEnemies_OnSpawnerComplete) == 0x000018, "Wrong size on BPAsyncAction_SpawnEnemies_OnSpawnerComplete");
static_assert(offsetof(BPAsyncAction_SpawnEnemies_OnSpawnerComplete, SpawnedEnemy) == 0x000000, "Member 'BPAsyncAction_SpawnEnemies_OnSpawnerComplete::SpawnedEnemy' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_SpawnEnemies_OnSpawnerComplete, SpawnedAICOntroller) == 0x000008, "Member 'BPAsyncAction_SpawnEnemies_OnSpawnerComplete::SpawnedAICOntroller' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_SpawnEnemies_OnSpawnerComplete, Spawner) == 0x000010, "Member 'BPAsyncAction_SpawnEnemies_OnSpawnerComplete::Spawner' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_SplineMove.MoveDirectionOnSpline
// 0x0018 (0x0018 - 0x0000)
struct BPAsyncAction_SplineMove_MoveDirectionOnSpline final
{
public:
	class USplineMovementComponent*               MovementComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESplineMovementDirection                      MovementDirection;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBPAsyncAction_SplineMove*              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_SplineMove_MoveDirectionOnSpline) == 0x000008, "Wrong alignment on BPAsyncAction_SplineMove_MoveDirectionOnSpline");
static_assert(sizeof(BPAsyncAction_SplineMove_MoveDirectionOnSpline) == 0x000018, "Wrong size on BPAsyncAction_SplineMove_MoveDirectionOnSpline");
static_assert(offsetof(BPAsyncAction_SplineMove_MoveDirectionOnSpline, MovementComponent) == 0x000000, "Member 'BPAsyncAction_SplineMove_MoveDirectionOnSpline::MovementComponent' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_SplineMove_MoveDirectionOnSpline, MovementDirection) == 0x000008, "Member 'BPAsyncAction_SplineMove_MoveDirectionOnSpline::MovementDirection' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_SplineMove_MoveDirectionOnSpline, ReturnValue) == 0x000010, "Member 'BPAsyncAction_SplineMove_MoveDirectionOnSpline::ReturnValue' has a wrong offset!");

// Function ObsidianFox.BPFL_PlayState.GetIsInCombat
// 0x0010 (0x0010 - 0x0000)
struct BPFL_PlayState_GetIsInCombat final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BPFL_PlayState_GetIsInCombat) == 0x000008, "Wrong alignment on BPFL_PlayState_GetIsInCombat");
static_assert(sizeof(BPFL_PlayState_GetIsInCombat) == 0x000010, "Wrong size on BPFL_PlayState_GetIsInCombat");
static_assert(offsetof(BPFL_PlayState_GetIsInCombat, WorldContextObject) == 0x000000, "Member 'BPFL_PlayState_GetIsInCombat::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BPFL_PlayState_GetIsInCombat, ReturnValue) == 0x000008, "Member 'BPFL_PlayState_GetIsInCombat::ReturnValue' has a wrong offset!");

// Function ObsidianFox.BPFL_PlayState.GetMainState
// 0x0010 (0x0010 - 0x0000)
struct BPFL_PlayState_GetMainState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMainState                                ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BPFL_PlayState_GetMainState) == 0x000008, "Wrong alignment on BPFL_PlayState_GetMainState");
static_assert(sizeof(BPFL_PlayState_GetMainState) == 0x000010, "Wrong size on BPFL_PlayState_GetMainState");
static_assert(offsetof(BPFL_PlayState_GetMainState, WorldContextObject) == 0x000000, "Member 'BPFL_PlayState_GetMainState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BPFL_PlayState_GetMainState, ReturnValue) == 0x000008, "Member 'BPFL_PlayState_GetMainState::ReturnValue' has a wrong offset!");

// Function ObsidianFox.BPFL_PlayState.GetPlayerHealthState
// 0x0010 (0x0010 - 0x0000)
struct BPFL_PlayState_GetPlayerHealthState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerHealthState                            ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BPFL_PlayState_GetPlayerHealthState) == 0x000008, "Wrong alignment on BPFL_PlayState_GetPlayerHealthState");
static_assert(sizeof(BPFL_PlayState_GetPlayerHealthState) == 0x000010, "Wrong size on BPFL_PlayState_GetPlayerHealthState");
static_assert(offsetof(BPFL_PlayState_GetPlayerHealthState, WorldContextObject) == 0x000000, "Member 'BPFL_PlayState_GetPlayerHealthState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BPFL_PlayState_GetPlayerHealthState, ReturnValue) == 0x000008, "Member 'BPFL_PlayState_GetPlayerHealthState::ReturnValue' has a wrong offset!");

// Function ObsidianFox.BPFL_PlayState.PopMainState
// 0x0010 (0x0010 - 0x0000)
struct BPFL_PlayState_PopMainState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          StateOwner;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPFL_PlayState_PopMainState) == 0x000008, "Wrong alignment on BPFL_PlayState_PopMainState");
static_assert(sizeof(BPFL_PlayState_PopMainState) == 0x000010, "Wrong size on BPFL_PlayState_PopMainState");
static_assert(offsetof(BPFL_PlayState_PopMainState, WorldContextObject) == 0x000000, "Member 'BPFL_PlayState_PopMainState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BPFL_PlayState_PopMainState, StateOwner) == 0x000008, "Member 'BPFL_PlayState_PopMainState::StateOwner' has a wrong offset!");

// Function ObsidianFox.BPFL_PlayState.PushMainSate
// 0x0018 (0x0018 - 0x0000)
struct BPFL_PlayState_PushMainSate final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          StateOwner;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMainState                                NewState;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BPFL_PlayState_PushMainSate) == 0x000008, "Wrong alignment on BPFL_PlayState_PushMainSate");
static_assert(sizeof(BPFL_PlayState_PushMainSate) == 0x000018, "Wrong size on BPFL_PlayState_PushMainSate");
static_assert(offsetof(BPFL_PlayState_PushMainSate, WorldContextObject) == 0x000000, "Member 'BPFL_PlayState_PushMainSate::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BPFL_PlayState_PushMainSate, StateOwner) == 0x000008, "Member 'BPFL_PlayState_PushMainSate::StateOwner' has a wrong offset!");
static_assert(offsetof(BPFL_PlayState_PushMainSate, NewState) == 0x000010, "Member 'BPFL_PlayState_PushMainSate::NewState' has a wrong offset!");

// Function ObsidianFox.OFPropAnimInstance.OnCharacterPossessed
// 0x0008 (0x0008 - 0x0000)
struct OFPropAnimInstance_OnCharacterPossessed final
{
public:
	const class AOFPlayerCharacter*               NewCharacter;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFPropAnimInstance_OnCharacterPossessed) == 0x000008, "Wrong alignment on OFPropAnimInstance_OnCharacterPossessed");
static_assert(sizeof(OFPropAnimInstance_OnCharacterPossessed) == 0x000008, "Wrong size on OFPropAnimInstance_OnCharacterPossessed");
static_assert(offsetof(OFPropAnimInstance_OnCharacterPossessed, NewCharacter) == 0x000000, "Member 'OFPropAnimInstance_OnCharacterPossessed::NewCharacter' has a wrong offset!");

// Function ObsidianFox.SkeletonPuzzleActor.RotateBonePitch
// 0x0010 (0x0010 - 0x0000)
struct SkeletonPuzzleActor_RotateBonePitch final
{
public:
	class UStaticMeshComponent*                   Bone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkeletonPuzzleActor_RotateBonePitch) == 0x000008, "Wrong alignment on SkeletonPuzzleActor_RotateBonePitch");
static_assert(sizeof(SkeletonPuzzleActor_RotateBonePitch) == 0x000010, "Wrong size on SkeletonPuzzleActor_RotateBonePitch");
static_assert(offsetof(SkeletonPuzzleActor_RotateBonePitch, Bone) == 0x000000, "Member 'SkeletonPuzzleActor_RotateBonePitch::Bone' has a wrong offset!");
static_assert(offsetof(SkeletonPuzzleActor_RotateBonePitch, Value) == 0x000008, "Member 'SkeletonPuzzleActor_RotateBonePitch::Value' has a wrong offset!");

// Function ObsidianFox.SkeletonPuzzleActor.RotateBoneYaw
// 0x0010 (0x0010 - 0x0000)
struct SkeletonPuzzleActor_RotateBoneYaw final
{
public:
	class USceneComponent*                        Bone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkeletonPuzzleActor_RotateBoneYaw) == 0x000008, "Wrong alignment on SkeletonPuzzleActor_RotateBoneYaw");
static_assert(sizeof(SkeletonPuzzleActor_RotateBoneYaw) == 0x000010, "Wrong size on SkeletonPuzzleActor_RotateBoneYaw");
static_assert(offsetof(SkeletonPuzzleActor_RotateBoneYaw, Bone) == 0x000000, "Member 'SkeletonPuzzleActor_RotateBoneYaw::Bone' has a wrong offset!");
static_assert(offsetof(SkeletonPuzzleActor_RotateBoneYaw, Value) == 0x000008, "Member 'SkeletonPuzzleActor_RotateBoneYaw::Value' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_DarkMan.FadeInAreaEffects
// 0x0004 (0x0004 - 0x0000)
struct GameSubsystem_DarkMan_FadeInAreaEffects final
{
public:
	float                                         FadeDuration;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_DarkMan_FadeInAreaEffects) == 0x000004, "Wrong alignment on GameSubsystem_DarkMan_FadeInAreaEffects");
static_assert(sizeof(GameSubsystem_DarkMan_FadeInAreaEffects) == 0x000004, "Wrong size on GameSubsystem_DarkMan_FadeInAreaEffects");
static_assert(offsetof(GameSubsystem_DarkMan_FadeInAreaEffects, FadeDuration) == 0x000000, "Member 'GameSubsystem_DarkMan_FadeInAreaEffects::FadeDuration' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_DarkMan.FadeOutAreaEffects
// 0x0004 (0x0004 - 0x0000)
struct GameSubsystem_DarkMan_FadeOutAreaEffects final
{
public:
	float                                         FadeDuration;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_DarkMan_FadeOutAreaEffects) == 0x000004, "Wrong alignment on GameSubsystem_DarkMan_FadeOutAreaEffects");
static_assert(sizeof(GameSubsystem_DarkMan_FadeOutAreaEffects) == 0x000004, "Wrong size on GameSubsystem_DarkMan_FadeOutAreaEffects");
static_assert(offsetof(GameSubsystem_DarkMan_FadeOutAreaEffects, FadeDuration) == 0x000000, "Member 'GameSubsystem_DarkMan_FadeOutAreaEffects::FadeDuration' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_DarkMan.OverrideCameraEffectsAllowed
// 0x0001 (0x0001 - 0x0000)
struct GameSubsystem_DarkMan_OverrideCameraEffectsAllowed final
{
public:
	bool                                          bCameraEffectsDisabled;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_DarkMan_OverrideCameraEffectsAllowed) == 0x000001, "Wrong alignment on GameSubsystem_DarkMan_OverrideCameraEffectsAllowed");
static_assert(sizeof(GameSubsystem_DarkMan_OverrideCameraEffectsAllowed) == 0x000001, "Wrong size on GameSubsystem_DarkMan_OverrideCameraEffectsAllowed");
static_assert(offsetof(GameSubsystem_DarkMan_OverrideCameraEffectsAllowed, bCameraEffectsDisabled) == 0x000000, "Member 'GameSubsystem_DarkMan_OverrideCameraEffectsAllowed::bCameraEffectsDisabled' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_DarkMan.SetActiveDarkMan
// 0x0010 (0x0010 - 0x0000)
struct GameSubsystem_DarkMan_SetActiveDarkMan final
{
public:
	class ACharacter*                             NewActiveDarkMan;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameSubsystem_DarkMan_SetActiveDarkMan) == 0x000008, "Wrong alignment on GameSubsystem_DarkMan_SetActiveDarkMan");
static_assert(sizeof(GameSubsystem_DarkMan_SetActiveDarkMan) == 0x000010, "Wrong size on GameSubsystem_DarkMan_SetActiveDarkMan");
static_assert(offsetof(GameSubsystem_DarkMan_SetActiveDarkMan, NewActiveDarkMan) == 0x000000, "Member 'GameSubsystem_DarkMan_SetActiveDarkMan::NewActiveDarkMan' has a wrong offset!");
static_assert(offsetof(GameSubsystem_DarkMan_SetActiveDarkMan, ReturnValue) == 0x000008, "Member 'GameSubsystem_DarkMan_SetActiveDarkMan::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_DarkMan.GetActiveDarkMan
// 0x0008 (0x0008 - 0x0000)
struct GameSubsystem_DarkMan_GetActiveDarkMan final
{
public:
	class ACharacter*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_DarkMan_GetActiveDarkMan) == 0x000008, "Wrong alignment on GameSubsystem_DarkMan_GetActiveDarkMan");
static_assert(sizeof(GameSubsystem_DarkMan_GetActiveDarkMan) == 0x000008, "Wrong size on GameSubsystem_DarkMan_GetActiveDarkMan");
static_assert(offsetof(GameSubsystem_DarkMan_GetActiveDarkMan, ReturnValue) == 0x000000, "Member 'GameSubsystem_DarkMan_GetActiveDarkMan::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_DarkMan.GetCurrentObsessionStage
// 0x0001 (0x0001 - 0x0000)
struct GameSubsystem_DarkMan_GetCurrentObsessionStage final
{
public:
	EOFObsessionStage                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_DarkMan_GetCurrentObsessionStage) == 0x000001, "Wrong alignment on GameSubsystem_DarkMan_GetCurrentObsessionStage");
static_assert(sizeof(GameSubsystem_DarkMan_GetCurrentObsessionStage) == 0x000001, "Wrong size on GameSubsystem_DarkMan_GetCurrentObsessionStage");
static_assert(offsetof(GameSubsystem_DarkMan_GetCurrentObsessionStage, ReturnValue) == 0x000000, "Member 'GameSubsystem_DarkMan_GetCurrentObsessionStage::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_DarkMan.GetObsession
// 0x0004 (0x0004 - 0x0000)
struct GameSubsystem_DarkMan_GetObsession final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_DarkMan_GetObsession) == 0x000004, "Wrong alignment on GameSubsystem_DarkMan_GetObsession");
static_assert(sizeof(GameSubsystem_DarkMan_GetObsession) == 0x000004, "Wrong size on GameSubsystem_DarkMan_GetObsession");
static_assert(offsetof(GameSubsystem_DarkMan_GetObsession, ReturnValue) == 0x000000, "Member 'GameSubsystem_DarkMan_GetObsession::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_DarkMan.GetObsessionDecayMin
// 0x0004 (0x0004 - 0x0000)
struct GameSubsystem_DarkMan_GetObsessionDecayMin final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_DarkMan_GetObsessionDecayMin) == 0x000004, "Wrong alignment on GameSubsystem_DarkMan_GetObsessionDecayMin");
static_assert(sizeof(GameSubsystem_DarkMan_GetObsessionDecayMin) == 0x000004, "Wrong size on GameSubsystem_DarkMan_GetObsessionDecayMin");
static_assert(offsetof(GameSubsystem_DarkMan_GetObsessionDecayMin, ReturnValue) == 0x000000, "Member 'GameSubsystem_DarkMan_GetObsessionDecayMin::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_DarkMan.GetObsessionDecayMultiplier
// 0x0004 (0x0004 - 0x0000)
struct GameSubsystem_DarkMan_GetObsessionDecayMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_DarkMan_GetObsessionDecayMultiplier) == 0x000004, "Wrong alignment on GameSubsystem_DarkMan_GetObsessionDecayMultiplier");
static_assert(sizeof(GameSubsystem_DarkMan_GetObsessionDecayMultiplier) == 0x000004, "Wrong size on GameSubsystem_DarkMan_GetObsessionDecayMultiplier");
static_assert(offsetof(GameSubsystem_DarkMan_GetObsessionDecayMultiplier, ReturnValue) == 0x000000, "Member 'GameSubsystem_DarkMan_GetObsessionDecayMultiplier::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_DarkMan.GetObsessionRaw
// 0x0004 (0x0004 - 0x0000)
struct GameSubsystem_DarkMan_GetObsessionRaw final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_DarkMan_GetObsessionRaw) == 0x000004, "Wrong alignment on GameSubsystem_DarkMan_GetObsessionRaw");
static_assert(sizeof(GameSubsystem_DarkMan_GetObsessionRaw) == 0x000004, "Wrong size on GameSubsystem_DarkMan_GetObsessionRaw");
static_assert(offsetof(GameSubsystem_DarkMan_GetObsessionRaw, ReturnValue) == 0x000000, "Member 'GameSubsystem_DarkMan_GetObsessionRaw::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_DarkMan.GetObsessionStage2Threshold
// 0x0004 (0x0004 - 0x0000)
struct GameSubsystem_DarkMan_GetObsessionStage2Threshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_DarkMan_GetObsessionStage2Threshold) == 0x000004, "Wrong alignment on GameSubsystem_DarkMan_GetObsessionStage2Threshold");
static_assert(sizeof(GameSubsystem_DarkMan_GetObsessionStage2Threshold) == 0x000004, "Wrong size on GameSubsystem_DarkMan_GetObsessionStage2Threshold");
static_assert(offsetof(GameSubsystem_DarkMan_GetObsessionStage2Threshold, ReturnValue) == 0x000000, "Member 'GameSubsystem_DarkMan_GetObsessionStage2Threshold::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_DarkMan.GetObsessionStage3Threshold
// 0x0004 (0x0004 - 0x0000)
struct GameSubsystem_DarkMan_GetObsessionStage3Threshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_DarkMan_GetObsessionStage3Threshold) == 0x000004, "Wrong alignment on GameSubsystem_DarkMan_GetObsessionStage3Threshold");
static_assert(sizeof(GameSubsystem_DarkMan_GetObsessionStage3Threshold) == 0x000004, "Wrong size on GameSubsystem_DarkMan_GetObsessionStage3Threshold");
static_assert(offsetof(GameSubsystem_DarkMan_GetObsessionStage3Threshold, ReturnValue) == 0x000000, "Member 'GameSubsystem_DarkMan_GetObsessionStage3Threshold::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.AverageLinetraceByChannel
// 0x00AC (0x00AC - 0x0000)
struct OFAnimInstance_AverageLinetraceByChannel final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExtraTraces;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawDebug;                                         // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             ReturnValue;                                       // 0x0024(0x0088)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimInstance_AverageLinetraceByChannel) == 0x000004, "Wrong alignment on OFAnimInstance_AverageLinetraceByChannel");
static_assert(sizeof(OFAnimInstance_AverageLinetraceByChannel) == 0x0000AC, "Wrong size on OFAnimInstance_AverageLinetraceByChannel");
static_assert(offsetof(OFAnimInstance_AverageLinetraceByChannel, Start) == 0x000000, "Member 'OFAnimInstance_AverageLinetraceByChannel::Start' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_AverageLinetraceByChannel, End) == 0x00000C, "Member 'OFAnimInstance_AverageLinetraceByChannel::End' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_AverageLinetraceByChannel, Radius) == 0x000018, "Member 'OFAnimInstance_AverageLinetraceByChannel::Radius' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_AverageLinetraceByChannel, ExtraTraces) == 0x00001C, "Member 'OFAnimInstance_AverageLinetraceByChannel::ExtraTraces' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_AverageLinetraceByChannel, TraceChannel) == 0x000020, "Member 'OFAnimInstance_AverageLinetraceByChannel::TraceChannel' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_AverageLinetraceByChannel, DrawDebug) == 0x000021, "Member 'OFAnimInstance_AverageLinetraceByChannel::DrawDebug' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_AverageLinetraceByChannel, ReturnValue) == 0x000024, "Member 'OFAnimInstance_AverageLinetraceByChannel::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.ChangeIKState
// 0x0002 (0x0002 - 0x0000)
struct OFAnimInstance_ChangeIKState final
{
public:
	EIKState                                      StateToUpdate;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIKState                                      NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimInstance_ChangeIKState) == 0x000001, "Wrong alignment on OFAnimInstance_ChangeIKState");
static_assert(sizeof(OFAnimInstance_ChangeIKState) == 0x000002, "Wrong size on OFAnimInstance_ChangeIKState");
static_assert(offsetof(OFAnimInstance_ChangeIKState, StateToUpdate) == 0x000000, "Member 'OFAnimInstance_ChangeIKState::StateToUpdate' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_ChangeIKState, NewState) == 0x000001, "Member 'OFAnimInstance_ChangeIKState::NewState' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.CreateAnimationComponent
// 0x0010 (0x0010 - 0x0000)
struct OFAnimInstance_CreateAnimationComponent final
{
public:
	TSubclassOf<class UAnimComponent>             Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimComponent*                         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimInstance_CreateAnimationComponent) == 0x000008, "Wrong alignment on OFAnimInstance_CreateAnimationComponent");
static_assert(sizeof(OFAnimInstance_CreateAnimationComponent) == 0x000010, "Wrong size on OFAnimInstance_CreateAnimationComponent");
static_assert(offsetof(OFAnimInstance_CreateAnimationComponent, Class_0) == 0x000000, "Member 'OFAnimInstance_CreateAnimationComponent::Class_0' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_CreateAnimationComponent, ReturnValue) == 0x000008, "Member 'OFAnimInstance_CreateAnimationComponent::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.DebugLinetrace
// 0x0090 (0x0090 - 0x0000)
struct OFAnimInstance_DebugLinetrace final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         LineThickness;                                     // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lifetime;                                          // 0x008C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimInstance_DebugLinetrace) == 0x000004, "Wrong alignment on OFAnimInstance_DebugLinetrace");
static_assert(sizeof(OFAnimInstance_DebugLinetrace) == 0x000090, "Wrong size on OFAnimInstance_DebugLinetrace");
static_assert(offsetof(OFAnimInstance_DebugLinetrace, HitResult) == 0x000000, "Member 'OFAnimInstance_DebugLinetrace::HitResult' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_DebugLinetrace, LineThickness) == 0x000088, "Member 'OFAnimInstance_DebugLinetrace::LineThickness' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_DebugLinetrace, Lifetime) == 0x00008C, "Member 'OFAnimInstance_DebugLinetrace::Lifetime' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.DebugLocationInterpolation
// 0x001C (0x001C - 0x0000)
struct OFAnimInstance_DebugLocationInterpolation final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ChasingLocation;                                   // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WantedProximity;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimInstance_DebugLocationInterpolation) == 0x000004, "Wrong alignment on OFAnimInstance_DebugLocationInterpolation");
static_assert(sizeof(OFAnimInstance_DebugLocationInterpolation) == 0x00001C, "Wrong size on OFAnimInstance_DebugLocationInterpolation");
static_assert(offsetof(OFAnimInstance_DebugLocationInterpolation, TargetLocation) == 0x000000, "Member 'OFAnimInstance_DebugLocationInterpolation::TargetLocation' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_DebugLocationInterpolation, ChasingLocation) == 0x00000C, "Member 'OFAnimInstance_DebugLocationInterpolation::ChasingLocation' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_DebugLocationInterpolation, WantedProximity) == 0x000018, "Member 'OFAnimInstance_DebugLocationInterpolation::WantedProximity' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.FreezeTurnAngle
// 0x0008 (0x0008 - 0x0000)
struct OFAnimInstance_FreezeTurnAngle final
{
public:
	class UObject*                                LockOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimInstance_FreezeTurnAngle) == 0x000008, "Wrong alignment on OFAnimInstance_FreezeTurnAngle");
static_assert(sizeof(OFAnimInstance_FreezeTurnAngle) == 0x000008, "Wrong size on OFAnimInstance_FreezeTurnAngle");
static_assert(offsetof(OFAnimInstance_FreezeTurnAngle, LockOwner) == 0x000000, "Member 'OFAnimInstance_FreezeTurnAngle::LockOwner' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.GetFocusPointOnCharacter
// 0x000C (0x000C - 0x0000)
struct OFAnimInstance_GetFocusPointOnCharacter final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimInstance_GetFocusPointOnCharacter) == 0x000004, "Wrong alignment on OFAnimInstance_GetFocusPointOnCharacter");
static_assert(sizeof(OFAnimInstance_GetFocusPointOnCharacter) == 0x00000C, "Wrong size on OFAnimInstance_GetFocusPointOnCharacter");
static_assert(offsetof(OFAnimInstance_GetFocusPointOnCharacter, ReturnValue) == 0x000000, "Member 'OFAnimInstance_GetFocusPointOnCharacter::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.GetRagdollState
// 0x0001 (0x0001 - 0x0000)
struct OFAnimInstance_GetRagdollState final
{
public:
	ERagdollState                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimInstance_GetRagdollState) == 0x000001, "Wrong alignment on OFAnimInstance_GetRagdollState");
static_assert(sizeof(OFAnimInstance_GetRagdollState) == 0x000001, "Wrong size on OFAnimInstance_GetRagdollState");
static_assert(offsetof(OFAnimInstance_GetRagdollState, ReturnValue) == 0x000000, "Member 'OFAnimInstance_GetRagdollState::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.GetStateMachineStateWeight
// 0x0014 (0x0014 - 0x0000)
struct OFAnimInstance_GetStateMachineStateWeight final
{
public:
	class FName                                   StateMachineName;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateName;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimInstance_GetStateMachineStateWeight) == 0x000004, "Wrong alignment on OFAnimInstance_GetStateMachineStateWeight");
static_assert(sizeof(OFAnimInstance_GetStateMachineStateWeight) == 0x000014, "Wrong size on OFAnimInstance_GetStateMachineStateWeight");
static_assert(offsetof(OFAnimInstance_GetStateMachineStateWeight, StateMachineName) == 0x000000, "Member 'OFAnimInstance_GetStateMachineStateWeight::StateMachineName' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_GetStateMachineStateWeight, StateName) == 0x000008, "Member 'OFAnimInstance_GetStateMachineStateWeight::StateName' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_GetStateMachineStateWeight, ReturnValue) == 0x000010, "Member 'OFAnimInstance_GetStateMachineStateWeight::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.LinetraceByChannelWDebug
// 0x00AC (0x00AC - 0x0000)
struct OFAnimInstance_LinetraceByChannelWDebug final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawDebug;                                         // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LineThickness;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugLifetime;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             ReturnValue;                                       // 0x0024(0x0088)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimInstance_LinetraceByChannelWDebug) == 0x000004, "Wrong alignment on OFAnimInstance_LinetraceByChannelWDebug");
static_assert(sizeof(OFAnimInstance_LinetraceByChannelWDebug) == 0x0000AC, "Wrong size on OFAnimInstance_LinetraceByChannelWDebug");
static_assert(offsetof(OFAnimInstance_LinetraceByChannelWDebug, Start) == 0x000000, "Member 'OFAnimInstance_LinetraceByChannelWDebug::Start' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_LinetraceByChannelWDebug, End) == 0x00000C, "Member 'OFAnimInstance_LinetraceByChannelWDebug::End' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_LinetraceByChannelWDebug, TraceChannel) == 0x000018, "Member 'OFAnimInstance_LinetraceByChannelWDebug::TraceChannel' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_LinetraceByChannelWDebug, DrawDebug) == 0x000019, "Member 'OFAnimInstance_LinetraceByChannelWDebug::DrawDebug' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_LinetraceByChannelWDebug, LineThickness) == 0x00001C, "Member 'OFAnimInstance_LinetraceByChannelWDebug::LineThickness' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_LinetraceByChannelWDebug, DebugLifetime) == 0x000020, "Member 'OFAnimInstance_LinetraceByChannelWDebug::DebugLifetime' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_LinetraceByChannelWDebug, ReturnValue) == 0x000024, "Member 'OFAnimInstance_LinetraceByChannelWDebug::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.OnDeath
// 0x0020 (0x0020 - 0x0000)
struct OFAnimInstance_OnDeath final
{
public:
	struct FGameplayTagContainer                  EventTags;                                         // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimInstance_OnDeath) == 0x000008, "Wrong alignment on OFAnimInstance_OnDeath");
static_assert(sizeof(OFAnimInstance_OnDeath) == 0x000020, "Wrong size on OFAnimInstance_OnDeath");
static_assert(offsetof(OFAnimInstance_OnDeath, EventTags) == 0x000000, "Member 'OFAnimInstance_OnDeath::EventTags' has a wrong offset!");

// DelegateFunction ObsidianFox.OFAnimInstance.OnFootStep__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct OFAnimInstance_OnFootStep__DelegateSignature final
{
public:
	struct FVector                                StepLocation;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFootType                                     FootStepType;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimInstance_OnFootStep__DelegateSignature) == 0x000004, "Wrong alignment on OFAnimInstance_OnFootStep__DelegateSignature");
static_assert(sizeof(OFAnimInstance_OnFootStep__DelegateSignature) == 0x000018, "Wrong size on OFAnimInstance_OnFootStep__DelegateSignature");
static_assert(offsetof(OFAnimInstance_OnFootStep__DelegateSignature, StepLocation) == 0x000000, "Member 'OFAnimInstance_OnFootStep__DelegateSignature::StepLocation' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_OnFootStep__DelegateSignature, FootStepType) == 0x00000C, "Member 'OFAnimInstance_OnFootStep__DelegateSignature::FootStepType' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_OnFootStep__DelegateSignature, BoneName) == 0x000010, "Member 'OFAnimInstance_OnFootStep__DelegateSignature::BoneName' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.PlayFootStepAudio
// 0x0008 (0x0008 - 0x0000)
struct OFAnimInstance_PlayFootStepAudio final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimInstance_PlayFootStepAudio) == 0x000004, "Wrong alignment on OFAnimInstance_PlayFootStepAudio");
static_assert(sizeof(OFAnimInstance_PlayFootStepAudio) == 0x000008, "Wrong size on OFAnimInstance_PlayFootStepAudio");
static_assert(offsetof(OFAnimInstance_PlayFootStepAudio, BoneName) == 0x000000, "Member 'OFAnimInstance_PlayFootStepAudio::BoneName' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.PredictStopLocation
// 0x001C (0x001C - 0x0000)
struct OFAnimInstance_PredictStopLocation final
{
public:
	struct FMovePrediction                        ReturnValue;                                       // 0x0000(0x001C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimInstance_PredictStopLocation) == 0x000004, "Wrong alignment on OFAnimInstance_PredictStopLocation");
static_assert(sizeof(OFAnimInstance_PredictStopLocation) == 0x00001C, "Wrong size on OFAnimInstance_PredictStopLocation");
static_assert(offsetof(OFAnimInstance_PredictStopLocation, ReturnValue) == 0x000000, "Member 'OFAnimInstance_PredictStopLocation::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.UnfreezeTurnAngle
// 0x0008 (0x0008 - 0x0000)
struct OFAnimInstance_UnfreezeTurnAngle final
{
public:
	class UObject*                                LockOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimInstance_UnfreezeTurnAngle) == 0x000008, "Wrong alignment on OFAnimInstance_UnfreezeTurnAngle");
static_assert(sizeof(OFAnimInstance_UnfreezeTurnAngle) == 0x000008, "Wrong size on OFAnimInstance_UnfreezeTurnAngle");
static_assert(offsetof(OFAnimInstance_UnfreezeTurnAngle, LockOwner) == 0x000000, "Member 'OFAnimInstance_UnfreezeTurnAngle::LockOwner' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.WholebodyRagdoll
// 0x0008 (0x0008 - 0x0000)
struct OFAnimInstance_WholebodyRagdoll final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimInstance_WholebodyRagdoll) == 0x000004, "Wrong alignment on OFAnimInstance_WholebodyRagdoll");
static_assert(sizeof(OFAnimInstance_WholebodyRagdoll) == 0x000008, "Wrong size on OFAnimInstance_WholebodyRagdoll");
static_assert(offsetof(OFAnimInstance_WholebodyRagdoll, Activate) == 0x000000, "Member 'OFAnimInstance_WholebodyRagdoll::Activate' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_WholebodyRagdoll, Duration) == 0x000004, "Member 'OFAnimInstance_WholebodyRagdoll::Duration' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.BoneIsParent
// 0x0018 (0x0018 - 0x0000)
struct OFAnimInstance_BoneIsParent final
{
public:
	class FName                                   ParentBone;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChildBone;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Distance;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFAnimInstance_BoneIsParent) == 0x000004, "Wrong alignment on OFAnimInstance_BoneIsParent");
static_assert(sizeof(OFAnimInstance_BoneIsParent) == 0x000018, "Wrong size on OFAnimInstance_BoneIsParent");
static_assert(offsetof(OFAnimInstance_BoneIsParent, ParentBone) == 0x000000, "Member 'OFAnimInstance_BoneIsParent::ParentBone' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_BoneIsParent, ChildBone) == 0x000008, "Member 'OFAnimInstance_BoneIsParent::ChildBone' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_BoneIsParent, Distance) == 0x000010, "Member 'OFAnimInstance_BoneIsParent::Distance' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_BoneIsParent, ReturnValue) == 0x000014, "Member 'OFAnimInstance_BoneIsParent::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.CheckFocusPointValidity
// 0x0030 (0x0030 - 0x0000)
struct OFAnimInstance_CheckFocusPointValidity final
{
public:
	struct FFocusPointData                        FocusPoint;                                        // 0x0000(0x002C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFAnimInstance_CheckFocusPointValidity) == 0x000004, "Wrong alignment on OFAnimInstance_CheckFocusPointValidity");
static_assert(sizeof(OFAnimInstance_CheckFocusPointValidity) == 0x000030, "Wrong size on OFAnimInstance_CheckFocusPointValidity");
static_assert(offsetof(OFAnimInstance_CheckFocusPointValidity, FocusPoint) == 0x000000, "Member 'OFAnimInstance_CheckFocusPointValidity::FocusPoint' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_CheckFocusPointValidity, ReturnValue) == 0x00002C, "Member 'OFAnimInstance_CheckFocusPointValidity::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.GetAnimationComponent
// 0x0010 (0x0010 - 0x0000)
struct OFAnimInstance_GetAnimationComponent final
{
public:
	TSubclassOf<class UAnimComponent>             ClassType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimComponent*                         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimInstance_GetAnimationComponent) == 0x000008, "Wrong alignment on OFAnimInstance_GetAnimationComponent");
static_assert(sizeof(OFAnimInstance_GetAnimationComponent) == 0x000010, "Wrong size on OFAnimInstance_GetAnimationComponent");
static_assert(offsetof(OFAnimInstance_GetAnimationComponent, ClassType) == 0x000000, "Member 'OFAnimInstance_GetAnimationComponent::ClassType' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_GetAnimationComponent, ReturnValue) == 0x000008, "Member 'OFAnimInstance_GetAnimationComponent::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.GetCurveValueForBlueprint
// 0x0010 (0x0010 - 0x0000)
struct OFAnimInstance_GetCurveValueForBlueprint final
{
public:
	class FName                                   CurveName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCurveExists;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimInstance_GetCurveValueForBlueprint) == 0x000004, "Wrong alignment on OFAnimInstance_GetCurveValueForBlueprint");
static_assert(sizeof(OFAnimInstance_GetCurveValueForBlueprint) == 0x000010, "Wrong size on OFAnimInstance_GetCurveValueForBlueprint");
static_assert(offsetof(OFAnimInstance_GetCurveValueForBlueprint, CurveName) == 0x000000, "Member 'OFAnimInstance_GetCurveValueForBlueprint::CurveName' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_GetCurveValueForBlueprint, bCurveExists) == 0x000008, "Member 'OFAnimInstance_GetCurveValueForBlueprint::bCurveExists' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_GetCurveValueForBlueprint, ReturnValue) == 0x00000C, "Member 'OFAnimInstance_GetCurveValueForBlueprint::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.GetLimbReach
// 0x0010 (0x0010 - 0x0000)
struct OFAnimInstance_GetLimbReach final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeirarchyLength;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimInstance_GetLimbReach) == 0x000004, "Wrong alignment on OFAnimInstance_GetLimbReach");
static_assert(sizeof(OFAnimInstance_GetLimbReach) == 0x000010, "Wrong size on OFAnimInstance_GetLimbReach");
static_assert(offsetof(OFAnimInstance_GetLimbReach, BoneName) == 0x000000, "Member 'OFAnimInstance_GetLimbReach::BoneName' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_GetLimbReach, HeirarchyLength) == 0x000008, "Member 'OFAnimInstance_GetLimbReach::HeirarchyLength' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_GetLimbReach, ReturnValue) == 0x00000C, "Member 'OFAnimInstance_GetLimbReach::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.GetParentBoneName
// 0x0014 (0x0014 - 0x0000)
struct OFAnimInstance_GetParentBoneName final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeirarchyHeight;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimInstance_GetParentBoneName) == 0x000004, "Wrong alignment on OFAnimInstance_GetParentBoneName");
static_assert(sizeof(OFAnimInstance_GetParentBoneName) == 0x000014, "Wrong size on OFAnimInstance_GetParentBoneName");
static_assert(offsetof(OFAnimInstance_GetParentBoneName, BoneName) == 0x000000, "Member 'OFAnimInstance_GetParentBoneName::BoneName' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_GetParentBoneName, HeirarchyHeight) == 0x000008, "Member 'OFAnimInstance_GetParentBoneName::HeirarchyHeight' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_GetParentBoneName, ReturnValue) == 0x00000C, "Member 'OFAnimInstance_GetParentBoneName::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.HasAnyGameplayTags
// 0x0028 (0x0028 - 0x0000)
struct OFAnimInstance_HasAnyGameplayTags final
{
public:
	struct FGameplayTagContainer                  Container;                                         // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFAnimInstance_HasAnyGameplayTags) == 0x000008, "Wrong alignment on OFAnimInstance_HasAnyGameplayTags");
static_assert(sizeof(OFAnimInstance_HasAnyGameplayTags) == 0x000028, "Wrong size on OFAnimInstance_HasAnyGameplayTags");
static_assert(offsetof(OFAnimInstance_HasAnyGameplayTags, Container) == 0x000000, "Member 'OFAnimInstance_HasAnyGameplayTags::Container' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_HasAnyGameplayTags, ReturnValue) == 0x000020, "Member 'OFAnimInstance_HasAnyGameplayTags::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.IsIKTargetWithinReach
// 0x0020 (0x0020 - 0x0000)
struct OFAnimInstance_IsIKTargetWithinReach final
{
public:
	struct FVector                                Target;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachLength;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeirarchyLength;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFAnimInstance_IsIKTargetWithinReach) == 0x000004, "Wrong alignment on OFAnimInstance_IsIKTargetWithinReach");
static_assert(sizeof(OFAnimInstance_IsIKTargetWithinReach) == 0x000020, "Wrong size on OFAnimInstance_IsIKTargetWithinReach");
static_assert(offsetof(OFAnimInstance_IsIKTargetWithinReach, Target) == 0x000000, "Member 'OFAnimInstance_IsIKTargetWithinReach::Target' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_IsIKTargetWithinReach, ReachLength) == 0x00000C, "Member 'OFAnimInstance_IsIKTargetWithinReach::ReachLength' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_IsIKTargetWithinReach, BoneName) == 0x000010, "Member 'OFAnimInstance_IsIKTargetWithinReach::BoneName' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_IsIKTargetWithinReach, HeirarchyLength) == 0x000018, "Member 'OFAnimInstance_IsIKTargetWithinReach::HeirarchyLength' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_IsIKTargetWithinReach, ReturnValue) == 0x00001C, "Member 'OFAnimInstance_IsIKTargetWithinReach::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.IsPreviewWorld
// 0x0001 (0x0001 - 0x0000)
struct OFAnimInstance_IsPreviewWorld final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimInstance_IsPreviewWorld) == 0x000001, "Wrong alignment on OFAnimInstance_IsPreviewWorld");
static_assert(sizeof(OFAnimInstance_IsPreviewWorld) == 0x000001, "Wrong size on OFAnimInstance_IsPreviewWorld");
static_assert(offsetof(OFAnimInstance_IsPreviewWorld, ReturnValue) == 0x000000, "Member 'OFAnimInstance_IsPreviewWorld::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimInstance.IsWithinVisionCone
// 0x0014 (0x0014 - 0x0000)
struct OFAnimInstance_IsWithinVisionCone final
{
public:
	struct FVector                                PointToCheck;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VisionConeDegrees;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFAnimInstance_IsWithinVisionCone) == 0x000004, "Wrong alignment on OFAnimInstance_IsWithinVisionCone");
static_assert(sizeof(OFAnimInstance_IsWithinVisionCone) == 0x000014, "Wrong size on OFAnimInstance_IsWithinVisionCone");
static_assert(offsetof(OFAnimInstance_IsWithinVisionCone, PointToCheck) == 0x000000, "Member 'OFAnimInstance_IsWithinVisionCone::PointToCheck' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_IsWithinVisionCone, VisionConeDegrees) == 0x00000C, "Member 'OFAnimInstance_IsWithinVisionCone::VisionConeDegrees' has a wrong offset!");
static_assert(offsetof(OFAnimInstance_IsWithinVisionCone, ReturnValue) == 0x000010, "Member 'OFAnimInstance_IsWithinVisionCone::ReturnValue' has a wrong offset!");

// Function ObsidianFox.PuzzleActor.CancelExitsPuzzle
// 0x0001 (0x0001 - 0x0000)
struct PuzzleActor_CancelExitsPuzzle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PuzzleActor_CancelExitsPuzzle) == 0x000001, "Wrong alignment on PuzzleActor_CancelExitsPuzzle");
static_assert(sizeof(PuzzleActor_CancelExitsPuzzle) == 0x000001, "Wrong size on PuzzleActor_CancelExitsPuzzle");
static_assert(offsetof(PuzzleActor_CancelExitsPuzzle, ReturnValue) == 0x000000, "Member 'PuzzleActor_CancelExitsPuzzle::ReturnValue' has a wrong offset!");

// Function ObsidianFox.PuzzleActor.EnteringPuzzle
// 0x0008 (0x0008 - 0x0000)
struct PuzzleActor_EnteringPuzzle final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PuzzleActor_EnteringPuzzle) == 0x000008, "Wrong alignment on PuzzleActor_EnteringPuzzle");
static_assert(sizeof(PuzzleActor_EnteringPuzzle) == 0x000008, "Wrong size on PuzzleActor_EnteringPuzzle");
static_assert(offsetof(PuzzleActor_EnteringPuzzle, InteractingCharacter) == 0x000000, "Member 'PuzzleActor_EnteringPuzzle::InteractingCharacter' has a wrong offset!");

// Function ObsidianFox.PuzzleActor.EnterPuzzle
// 0x0008 (0x0008 - 0x0000)
struct PuzzleActor_EnterPuzzle final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PuzzleActor_EnterPuzzle) == 0x000008, "Wrong alignment on PuzzleActor_EnterPuzzle");
static_assert(sizeof(PuzzleActor_EnterPuzzle) == 0x000008, "Wrong size on PuzzleActor_EnterPuzzle");
static_assert(offsetof(PuzzleActor_EnterPuzzle, InteractingCharacter) == 0x000000, "Member 'PuzzleActor_EnterPuzzle::InteractingCharacter' has a wrong offset!");

// Function ObsidianFox.PuzzleActor.ExitingPuzzle
// 0x0008 (0x0008 - 0x0000)
struct PuzzleActor_ExitingPuzzle final
{
public:
	class AOFPlayerController*                    InteractingPlayerController;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PuzzleActor_ExitingPuzzle) == 0x000008, "Wrong alignment on PuzzleActor_ExitingPuzzle");
static_assert(sizeof(PuzzleActor_ExitingPuzzle) == 0x000008, "Wrong size on PuzzleActor_ExitingPuzzle");
static_assert(offsetof(PuzzleActor_ExitingPuzzle, InteractingPlayerController) == 0x000000, "Member 'PuzzleActor_ExitingPuzzle::InteractingPlayerController' has a wrong offset!");

// Function ObsidianFox.PuzzleActor.GetRequiredItems
// 0x0050 (0x0050 - 0x0000)
struct PuzzleActor_GetRequiredItems final
{
public:
	TSet<class UItemData*>                        ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PuzzleActor_GetRequiredItems) == 0x000008, "Wrong alignment on PuzzleActor_GetRequiredItems");
static_assert(sizeof(PuzzleActor_GetRequiredItems) == 0x000050, "Wrong size on PuzzleActor_GetRequiredItems");
static_assert(offsetof(PuzzleActor_GetRequiredItems, ReturnValue) == 0x000000, "Member 'PuzzleActor_GetRequiredItems::ReturnValue' has a wrong offset!");

// Function ObsidianFox.PuzzleActor.ItemAddedHandler
// 0x0008 (0x0008 - 0x0000)
struct PuzzleActor_ItemAddedHandler final
{
public:
	const class UItemData*                        ItemData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PuzzleActor_ItemAddedHandler) == 0x000008, "Wrong alignment on PuzzleActor_ItemAddedHandler");
static_assert(sizeof(PuzzleActor_ItemAddedHandler) == 0x000008, "Wrong size on PuzzleActor_ItemAddedHandler");
static_assert(offsetof(PuzzleActor_ItemAddedHandler, ItemData) == 0x000000, "Member 'PuzzleActor_ItemAddedHandler::ItemData' has a wrong offset!");

// DelegateFunction ObsidianFox.PuzzleActor.PuzzleEnter__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct PuzzleActor_PuzzleEnter__DelegateSignature final
{
public:
	class APuzzleActor*                           PuzzleActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacter*                             InteractingCharacter;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PuzzleActor_PuzzleEnter__DelegateSignature) == 0x000008, "Wrong alignment on PuzzleActor_PuzzleEnter__DelegateSignature");
static_assert(sizeof(PuzzleActor_PuzzleEnter__DelegateSignature) == 0x000010, "Wrong size on PuzzleActor_PuzzleEnter__DelegateSignature");
static_assert(offsetof(PuzzleActor_PuzzleEnter__DelegateSignature, PuzzleActor) == 0x000000, "Member 'PuzzleActor_PuzzleEnter__DelegateSignature::PuzzleActor' has a wrong offset!");
static_assert(offsetof(PuzzleActor_PuzzleEnter__DelegateSignature, InteractingCharacter) == 0x000008, "Member 'PuzzleActor_PuzzleEnter__DelegateSignature::InteractingCharacter' has a wrong offset!");

// DelegateFunction ObsidianFox.PuzzleActor.PuzzleExit__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct PuzzleActor_PuzzleExit__DelegateSignature final
{
public:
	class APuzzleActor*                           PuzzleActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AOFPlayerController*                    InteractingController;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PuzzleActor_PuzzleExit__DelegateSignature) == 0x000008, "Wrong alignment on PuzzleActor_PuzzleExit__DelegateSignature");
static_assert(sizeof(PuzzleActor_PuzzleExit__DelegateSignature) == 0x000010, "Wrong size on PuzzleActor_PuzzleExit__DelegateSignature");
static_assert(offsetof(PuzzleActor_PuzzleExit__DelegateSignature, PuzzleActor) == 0x000000, "Member 'PuzzleActor_PuzzleExit__DelegateSignature::PuzzleActor' has a wrong offset!");
static_assert(offsetof(PuzzleActor_PuzzleExit__DelegateSignature, InteractingController) == 0x000008, "Member 'PuzzleActor_PuzzleExit__DelegateSignature::InteractingController' has a wrong offset!");

// DelegateFunction ObsidianFox.PuzzleActor.PuzzleSolve__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct PuzzleActor_PuzzleSolve__DelegateSignature final
{
public:
	class APuzzleActor*                           PuzzleActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AOFPlayerController*                    InteractingController;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PuzzleActor_PuzzleSolve__DelegateSignature) == 0x000008, "Wrong alignment on PuzzleActor_PuzzleSolve__DelegateSignature");
static_assert(sizeof(PuzzleActor_PuzzleSolve__DelegateSignature) == 0x000010, "Wrong size on PuzzleActor_PuzzleSolve__DelegateSignature");
static_assert(offsetof(PuzzleActor_PuzzleSolve__DelegateSignature, PuzzleActor) == 0x000000, "Member 'PuzzleActor_PuzzleSolve__DelegateSignature::PuzzleActor' has a wrong offset!");
static_assert(offsetof(PuzzleActor_PuzzleSolve__DelegateSignature, InteractingController) == 0x000008, "Member 'PuzzleActor_PuzzleSolve__DelegateSignature::InteractingController' has a wrong offset!");

// DelegateFunction ObsidianFox.PuzzleActor.PuzzleUpdateSolvableState__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct PuzzleActor_PuzzleUpdateSolvableState__DelegateSignature final
{
public:
	bool                                          bSolvable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PuzzleActor_PuzzleUpdateSolvableState__DelegateSignature) == 0x000001, "Wrong alignment on PuzzleActor_PuzzleUpdateSolvableState__DelegateSignature");
static_assert(sizeof(PuzzleActor_PuzzleUpdateSolvableState__DelegateSignature) == 0x000001, "Wrong size on PuzzleActor_PuzzleUpdateSolvableState__DelegateSignature");
static_assert(offsetof(PuzzleActor_PuzzleUpdateSolvableState__DelegateSignature, bSolvable) == 0x000000, "Member 'PuzzleActor_PuzzleUpdateSolvableState__DelegateSignature::bSolvable' has a wrong offset!");

// Function ObsidianFox.PuzzleActor.SetManualSolvableCondition
// 0x0001 (0x0001 - 0x0000)
struct PuzzleActor_SetManualSolvableCondition final
{
public:
	bool                                          bSolvable;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PuzzleActor_SetManualSolvableCondition) == 0x000001, "Wrong alignment on PuzzleActor_SetManualSolvableCondition");
static_assert(sizeof(PuzzleActor_SetManualSolvableCondition) == 0x000001, "Wrong size on PuzzleActor_SetManualSolvableCondition");
static_assert(offsetof(PuzzleActor_SetManualSolvableCondition, bSolvable) == 0x000000, "Member 'PuzzleActor_SetManualSolvableCondition::bSolvable' has a wrong offset!");

// Function ObsidianFox.PuzzleActor.SetPuzzleIsSolvableRaw
// 0x0001 (0x0001 - 0x0000)
struct PuzzleActor_SetPuzzleIsSolvableRaw final
{
public:
	bool                                          bSolvable;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PuzzleActor_SetPuzzleIsSolvableRaw) == 0x000001, "Wrong alignment on PuzzleActor_SetPuzzleIsSolvableRaw");
static_assert(sizeof(PuzzleActor_SetPuzzleIsSolvableRaw) == 0x000001, "Wrong size on PuzzleActor_SetPuzzleIsSolvableRaw");
static_assert(offsetof(PuzzleActor_SetPuzzleIsSolvableRaw, bSolvable) == 0x000000, "Member 'PuzzleActor_SetPuzzleIsSolvableRaw::bSolvable' has a wrong offset!");

// Function ObsidianFox.PuzzleActor.ShowPuzzleUI
// 0x0010 (0x0010 - 0x0000)
struct PuzzleActor_ShowPuzzleUI final
{
public:
	int32                                         ZOrder;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCtrlButtonWidget*                      ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PuzzleActor_ShowPuzzleUI) == 0x000008, "Wrong alignment on PuzzleActor_ShowPuzzleUI");
static_assert(sizeof(PuzzleActor_ShowPuzzleUI) == 0x000010, "Wrong size on PuzzleActor_ShowPuzzleUI");
static_assert(offsetof(PuzzleActor_ShowPuzzleUI, ZOrder) == 0x000000, "Member 'PuzzleActor_ShowPuzzleUI::ZOrder' has a wrong offset!");
static_assert(offsetof(PuzzleActor_ShowPuzzleUI, ReturnValue) == 0x000008, "Member 'PuzzleActor_ShowPuzzleUI::ReturnValue' has a wrong offset!");

// Function ObsidianFox.PuzzleActor.SolvingPuzzle
// 0x0008 (0x0008 - 0x0000)
struct PuzzleActor_SolvingPuzzle final
{
public:
	class AOFPlayerController*                    InteractingPlayerController;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PuzzleActor_SolvingPuzzle) == 0x000008, "Wrong alignment on PuzzleActor_SolvingPuzzle");
static_assert(sizeof(PuzzleActor_SolvingPuzzle) == 0x000008, "Wrong size on PuzzleActor_SolvingPuzzle");
static_assert(offsetof(PuzzleActor_SolvingPuzzle, InteractingPlayerController) == 0x000000, "Member 'PuzzleActor_SolvingPuzzle::InteractingPlayerController' has a wrong offset!");

// Function ObsidianFox.PuzzleActor.GetIsSolvable
// 0x0001 (0x0001 - 0x0000)
struct PuzzleActor_GetIsSolvable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PuzzleActor_GetIsSolvable) == 0x000001, "Wrong alignment on PuzzleActor_GetIsSolvable");
static_assert(sizeof(PuzzleActor_GetIsSolvable) == 0x000001, "Wrong size on PuzzleActor_GetIsSolvable");
static_assert(offsetof(PuzzleActor_GetIsSolvable, ReturnValue) == 0x000000, "Member 'PuzzleActor_GetIsSolvable::ReturnValue' has a wrong offset!");

// Function ObsidianFox.PuzzleActor.GetIsSolved
// 0x0001 (0x0001 - 0x0000)
struct PuzzleActor_GetIsSolved final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PuzzleActor_GetIsSolved) == 0x000001, "Wrong alignment on PuzzleActor_GetIsSolved");
static_assert(sizeof(PuzzleActor_GetIsSolved) == 0x000001, "Wrong size on PuzzleActor_GetIsSolved");
static_assert(offsetof(PuzzleActor_GetIsSolved, ReturnValue) == 0x000000, "Member 'PuzzleActor_GetIsSolved::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InventoryPuzzle.SelectionTrace
// 0x0098 (0x0098 - 0x0000)
struct InventoryPuzzle_SelectionTrace final
{
public:
	struct FHitResult                             OutHit;                                            // 0x0000(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bBlockingHit;                                      // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x008C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        ReturnValue;                                       // 0x0090(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryPuzzle_SelectionTrace) == 0x000008, "Wrong alignment on InventoryPuzzle_SelectionTrace");
static_assert(sizeof(InventoryPuzzle_SelectionTrace) == 0x000098, "Wrong size on InventoryPuzzle_SelectionTrace");
static_assert(offsetof(InventoryPuzzle_SelectionTrace, OutHit) == 0x000000, "Member 'InventoryPuzzle_SelectionTrace::OutHit' has a wrong offset!");
static_assert(offsetof(InventoryPuzzle_SelectionTrace, bBlockingHit) == 0x000088, "Member 'InventoryPuzzle_SelectionTrace::bBlockingHit' has a wrong offset!");
static_assert(offsetof(InventoryPuzzle_SelectionTrace, Distance) == 0x00008C, "Member 'InventoryPuzzle_SelectionTrace::Distance' has a wrong offset!");
static_assert(offsetof(InventoryPuzzle_SelectionTrace, ReturnValue) == 0x000090, "Member 'InventoryPuzzle_SelectionTrace::ReturnValue' has a wrong offset!");

// Function ObsidianFox.BurrowerAnimInstance.OnAirMultiBoolChanged
// 0x0001 (0x0001 - 0x0000)
struct BurrowerAnimInstance_OnAirMultiBoolChanged final
{
public:
	bool                                          bNewState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BurrowerAnimInstance_OnAirMultiBoolChanged) == 0x000001, "Wrong alignment on BurrowerAnimInstance_OnAirMultiBoolChanged");
static_assert(sizeof(BurrowerAnimInstance_OnAirMultiBoolChanged) == 0x000001, "Wrong size on BurrowerAnimInstance_OnAirMultiBoolChanged");
static_assert(offsetof(BurrowerAnimInstance_OnAirMultiBoolChanged, bNewState) == 0x000000, "Member 'BurrowerAnimInstance_OnAirMultiBoolChanged::bNewState' has a wrong offset!");

// Function ObsidianFox.BurrowerAnimInstance.OnAirStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BurrowerAnimInstance_OnAirStateChanged final
{
public:
	bool                                          bNewState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BurrowerAnimInstance_OnAirStateChanged) == 0x000001, "Wrong alignment on BurrowerAnimInstance_OnAirStateChanged");
static_assert(sizeof(BurrowerAnimInstance_OnAirStateChanged) == 0x000001, "Wrong size on BurrowerAnimInstance_OnAirStateChanged");
static_assert(offsetof(BurrowerAnimInstance_OnAirStateChanged, bNewState) == 0x000000, "Member 'BurrowerAnimInstance_OnAirStateChanged::bNewState' has a wrong offset!");

// Function ObsidianFox.BurrowerAnimInstance.SetIsInAir
// 0x0010 (0x0010 - 0x0000)
struct BurrowerAnimInstance_SetIsInAir final
{
public:
	class UObject*                                CallerReference;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequestedState;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BurrowerAnimInstance_SetIsInAir) == 0x000008, "Wrong alignment on BurrowerAnimInstance_SetIsInAir");
static_assert(sizeof(BurrowerAnimInstance_SetIsInAir) == 0x000010, "Wrong size on BurrowerAnimInstance_SetIsInAir");
static_assert(offsetof(BurrowerAnimInstance_SetIsInAir, CallerReference) == 0x000000, "Member 'BurrowerAnimInstance_SetIsInAir::CallerReference' has a wrong offset!");
static_assert(offsetof(BurrowerAnimInstance_SetIsInAir, bRequestedState) == 0x000008, "Member 'BurrowerAnimInstance_SetIsInAir::bRequestedState' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_ChapterSelect.OnLevelLoaded
// 0x0010 (0x0010 - 0x0000)
struct GameSubsystem_ChapterSelect_OnLevelLoaded final
{
public:
	class ULevel*                                 InLevel;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 InWorld;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_ChapterSelect_OnLevelLoaded) == 0x000008, "Wrong alignment on GameSubsystem_ChapterSelect_OnLevelLoaded");
static_assert(sizeof(GameSubsystem_ChapterSelect_OnLevelLoaded) == 0x000010, "Wrong size on GameSubsystem_ChapterSelect_OnLevelLoaded");
static_assert(offsetof(GameSubsystem_ChapterSelect_OnLevelLoaded, InLevel) == 0x000000, "Member 'GameSubsystem_ChapterSelect_OnLevelLoaded::InLevel' has a wrong offset!");
static_assert(offsetof(GameSubsystem_ChapterSelect_OnLevelLoaded, InWorld) == 0x000008, "Member 'GameSubsystem_ChapterSelect_OnLevelLoaded::InWorld' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_ChapterSelect.OpenLevel
// 0x0008 (0x0008 - 0x0000)
struct GameSubsystem_ChapterSelect_OpenLevel final
{
public:
	const class UChapterSelectDataAsset*          InChapterSelectDataAsset;                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_ChapterSelect_OpenLevel) == 0x000008, "Wrong alignment on GameSubsystem_ChapterSelect_OpenLevel");
static_assert(sizeof(GameSubsystem_ChapterSelect_OpenLevel) == 0x000008, "Wrong size on GameSubsystem_ChapterSelect_OpenLevel");
static_assert(offsetof(GameSubsystem_ChapterSelect_OpenLevel, InChapterSelectDataAsset) == 0x000000, "Member 'GameSubsystem_ChapterSelect_OpenLevel::InChapterSelectDataAsset' has a wrong offset!");

// DelegateFunction ObsidianFox.CameraAbductorComponent.CameraAbductionDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct CameraAbductorComponent_CameraAbductionDelegate__DelegateSignature final
{
public:
	class AActor*                                 AbductingActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      InteractingController;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraAbductorComponent_CameraAbductionDelegate__DelegateSignature) == 0x000008, "Wrong alignment on CameraAbductorComponent_CameraAbductionDelegate__DelegateSignature");
static_assert(sizeof(CameraAbductorComponent_CameraAbductionDelegate__DelegateSignature) == 0x000010, "Wrong size on CameraAbductorComponent_CameraAbductionDelegate__DelegateSignature");
static_assert(offsetof(CameraAbductorComponent_CameraAbductionDelegate__DelegateSignature, AbductingActor) == 0x000000, "Member 'CameraAbductorComponent_CameraAbductionDelegate__DelegateSignature::AbductingActor' has a wrong offset!");
static_assert(offsetof(CameraAbductorComponent_CameraAbductionDelegate__DelegateSignature, InteractingController) == 0x000008, "Member 'CameraAbductorComponent_CameraAbductionDelegate__DelegateSignature::InteractingController' has a wrong offset!");

// Function ObsidianFox.CameraAbductorComponent.EnterActor
// 0x0008 (0x0008 - 0x0000)
struct CameraAbductorComponent_EnterActor final
{
public:
	class APlayerController*                      InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraAbductorComponent_EnterActor) == 0x000008, "Wrong alignment on CameraAbductorComponent_EnterActor");
static_assert(sizeof(CameraAbductorComponent_EnterActor) == 0x000008, "Wrong size on CameraAbductorComponent_EnterActor");
static_assert(offsetof(CameraAbductorComponent_EnterActor, InteractingCharacter) == 0x000000, "Member 'CameraAbductorComponent_EnterActor::InteractingCharacter' has a wrong offset!");

// Function ObsidianFox.CameraAbductorComponent.EnteringActor
// 0x0008 (0x0008 - 0x0000)
struct CameraAbductorComponent_EnteringActor final
{
public:
	class APlayerController*                      InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraAbductorComponent_EnteringActor) == 0x000008, "Wrong alignment on CameraAbductorComponent_EnteringActor");
static_assert(sizeof(CameraAbductorComponent_EnteringActor) == 0x000008, "Wrong size on CameraAbductorComponent_EnteringActor");
static_assert(offsetof(CameraAbductorComponent_EnteringActor, InteractingCharacter) == 0x000000, "Member 'CameraAbductorComponent_EnteringActor::InteractingCharacter' has a wrong offset!");

// Function ObsidianFox.CameraAbductorComponent.ExitingActor
// 0x0008 (0x0008 - 0x0000)
struct CameraAbductorComponent_ExitingActor final
{
public:
	class APlayerController*                      InteractingPlayerController;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraAbductorComponent_ExitingActor) == 0x000008, "Wrong alignment on CameraAbductorComponent_ExitingActor");
static_assert(sizeof(CameraAbductorComponent_ExitingActor) == 0x000008, "Wrong size on CameraAbductorComponent_ExitingActor");
static_assert(offsetof(CameraAbductorComponent_ExitingActor, InteractingPlayerController) == 0x000000, "Member 'CameraAbductorComponent_ExitingActor::InteractingPlayerController' has a wrong offset!");

// Function ObsidianFox.CameraAbductorComponent.InteractionEnter
// 0x0008 (0x0008 - 0x0000)
struct CameraAbductorComponent_InteractionEnter final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraAbductorComponent_InteractionEnter) == 0x000008, "Wrong alignment on CameraAbductorComponent_InteractionEnter");
static_assert(sizeof(CameraAbductorComponent_InteractionEnter) == 0x000008, "Wrong size on CameraAbductorComponent_InteractionEnter");
static_assert(offsetof(CameraAbductorComponent_InteractionEnter, InteractingCharacter) == 0x000000, "Member 'CameraAbductorComponent_InteractionEnter::InteractingCharacter' has a wrong offset!");

// Function ObsidianFox.GameSubSystem_MenuHud.IsInGameUIHidden
// 0x0001 (0x0001 - 0x0000)
struct GameSubSystem_MenuHud_IsInGameUIHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubSystem_MenuHud_IsInGameUIHidden) == 0x000001, "Wrong alignment on GameSubSystem_MenuHud_IsInGameUIHidden");
static_assert(sizeof(GameSubSystem_MenuHud_IsInGameUIHidden) == 0x000001, "Wrong size on GameSubSystem_MenuHud_IsInGameUIHidden");
static_assert(offsetof(GameSubSystem_MenuHud_IsInGameUIHidden, ReturnValue) == 0x000000, "Member 'GameSubSystem_MenuHud_IsInGameUIHidden::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubSystem_MenuHud.IsObjectiveDone
// 0x0002 (0x0002 - 0x0000)
struct GameSubSystem_MenuHud_IsObjectiveDone final
{
public:
	EObjectives                                   Objective;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubSystem_MenuHud_IsObjectiveDone) == 0x000001, "Wrong alignment on GameSubSystem_MenuHud_IsObjectiveDone");
static_assert(sizeof(GameSubSystem_MenuHud_IsObjectiveDone) == 0x000002, "Wrong size on GameSubSystem_MenuHud_IsObjectiveDone");
static_assert(offsetof(GameSubSystem_MenuHud_IsObjectiveDone, Objective) == 0x000000, "Member 'GameSubSystem_MenuHud_IsObjectiveDone::Objective' has a wrong offset!");
static_assert(offsetof(GameSubSystem_MenuHud_IsObjectiveDone, ReturnValue) == 0x000001, "Member 'GameSubSystem_MenuHud_IsObjectiveDone::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubSystem_MenuHud.NewHelpText
// 0x0002 (0x0002 - 0x0000)
struct GameSubSystem_MenuHud_NewHelpText final
{
public:
	EHelptText                                    HelpText;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubSystem_MenuHud_NewHelpText) == 0x000001, "Wrong alignment on GameSubSystem_MenuHud_NewHelpText");
static_assert(sizeof(GameSubSystem_MenuHud_NewHelpText) == 0x000002, "Wrong size on GameSubSystem_MenuHud_NewHelpText");
static_assert(offsetof(GameSubSystem_MenuHud_NewHelpText, HelpText) == 0x000000, "Member 'GameSubSystem_MenuHud_NewHelpText::HelpText' has a wrong offset!");
static_assert(offsetof(GameSubSystem_MenuHud_NewHelpText, ReturnValue) == 0x000001, "Member 'GameSubSystem_MenuHud_NewHelpText::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubSystem_MenuHud.SetInGameUIVisibility
// 0x0001 (0x0001 - 0x0000)
struct GameSubSystem_MenuHud_SetInGameUIVisibility final
{
public:
	ESlateVisibility                              NewState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubSystem_MenuHud_SetInGameUIVisibility) == 0x000001, "Wrong alignment on GameSubSystem_MenuHud_SetInGameUIVisibility");
static_assert(sizeof(GameSubSystem_MenuHud_SetInGameUIVisibility) == 0x000001, "Wrong size on GameSubSystem_MenuHud_SetInGameUIVisibility");
static_assert(offsetof(GameSubSystem_MenuHud_SetInGameUIVisibility, NewState) == 0x000000, "Member 'GameSubSystem_MenuHud_SetInGameUIVisibility::NewState' has a wrong offset!");

// Function ObsidianFox.GameSubSystem_MenuHud.UpdateEnemyHealthbar
// 0x0008 (0x0008 - 0x0000)
struct GameSubSystem_MenuHud_UpdateEnemyHealthbar final
{
public:
	class AObsidianFoxCharacter*                  Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubSystem_MenuHud_UpdateEnemyHealthbar) == 0x000008, "Wrong alignment on GameSubSystem_MenuHud_UpdateEnemyHealthbar");
static_assert(sizeof(GameSubSystem_MenuHud_UpdateEnemyHealthbar) == 0x000008, "Wrong size on GameSubSystem_MenuHud_UpdateEnemyHealthbar");
static_assert(offsetof(GameSubSystem_MenuHud_UpdateEnemyHealthbar, Enemy) == 0x000000, "Member 'GameSubSystem_MenuHud_UpdateEnemyHealthbar::Enemy' has a wrong offset!");

// Function ObsidianFox.GameSubSystem_MenuHud.UpdateInteractWidget
// 0x0040 (0x0040 - 0x0000)
struct GameSubSystem_MenuHud_UpdateInteractWidget final
{
public:
	class FText                                   InfoText;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              InfoImage;                                         // 0x0018(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubSystem_MenuHud_UpdateInteractWidget) == 0x000008, "Wrong alignment on GameSubSystem_MenuHud_UpdateInteractWidget");
static_assert(sizeof(GameSubSystem_MenuHud_UpdateInteractWidget) == 0x000040, "Wrong size on GameSubSystem_MenuHud_UpdateInteractWidget");
static_assert(offsetof(GameSubSystem_MenuHud_UpdateInteractWidget, InfoText) == 0x000000, "Member 'GameSubSystem_MenuHud_UpdateInteractWidget::InfoText' has a wrong offset!");
static_assert(offsetof(GameSubSystem_MenuHud_UpdateInteractWidget, InfoImage) == 0x000018, "Member 'GameSubSystem_MenuHud_UpdateInteractWidget::InfoImage' has a wrong offset!");

// Function ObsidianFox.GameSubSystem_MenuHud.UpdateObjective
// 0x0001 (0x0001 - 0x0000)
struct GameSubSystem_MenuHud_UpdateObjective final
{
public:
	EObjectives                                   NewObjective;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubSystem_MenuHud_UpdateObjective) == 0x000001, "Wrong alignment on GameSubSystem_MenuHud_UpdateObjective");
static_assert(sizeof(GameSubSystem_MenuHud_UpdateObjective) == 0x000001, "Wrong size on GameSubSystem_MenuHud_UpdateObjective");
static_assert(offsetof(GameSubSystem_MenuHud_UpdateObjective, NewObjective) == 0x000000, "Member 'GameSubSystem_MenuHud_UpdateObjective::NewObjective' has a wrong offset!");

// Function ObsidianFox.GameSubSystem_MenuHud.UpdateObjectiveFromCurrent
// 0x0003 (0x0003 - 0x0000)
struct GameSubSystem_MenuHud_UpdateObjectiveFromCurrent final
{
public:
	EObjectives                                   OldObjective;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectives                                   NewObjective;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubSystem_MenuHud_UpdateObjectiveFromCurrent) == 0x000001, "Wrong alignment on GameSubSystem_MenuHud_UpdateObjectiveFromCurrent");
static_assert(sizeof(GameSubSystem_MenuHud_UpdateObjectiveFromCurrent) == 0x000003, "Wrong size on GameSubSystem_MenuHud_UpdateObjectiveFromCurrent");
static_assert(offsetof(GameSubSystem_MenuHud_UpdateObjectiveFromCurrent, OldObjective) == 0x000000, "Member 'GameSubSystem_MenuHud_UpdateObjectiveFromCurrent::OldObjective' has a wrong offset!");
static_assert(offsetof(GameSubSystem_MenuHud_UpdateObjectiveFromCurrent, NewObjective) == 0x000001, "Member 'GameSubSystem_MenuHud_UpdateObjectiveFromCurrent::NewObjective' has a wrong offset!");
static_assert(offsetof(GameSubSystem_MenuHud_UpdateObjectiveFromCurrent, ReturnValue) == 0x000002, "Member 'GameSubSystem_MenuHud_UpdateObjectiveFromCurrent::ReturnValue' has a wrong offset!");

// Function ObsidianFox.CemetaryCreatureAnimInstance.SetUpperBodyTiltEnabled
// 0x0001 (0x0001 - 0x0000)
struct CemetaryCreatureAnimInstance_SetUpperBodyTiltEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CemetaryCreatureAnimInstance_SetUpperBodyTiltEnabled) == 0x000001, "Wrong alignment on CemetaryCreatureAnimInstance_SetUpperBodyTiltEnabled");
static_assert(sizeof(CemetaryCreatureAnimInstance_SetUpperBodyTiltEnabled) == 0x000001, "Wrong size on CemetaryCreatureAnimInstance_SetUpperBodyTiltEnabled");
static_assert(offsetof(CemetaryCreatureAnimInstance_SetUpperBodyTiltEnabled, bEnabled) == 0x000000, "Member 'CemetaryCreatureAnimInstance_SetUpperBodyTiltEnabled::bEnabled' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_AnimationAssetManager.GetAllLookupEntriesForTag
// 0x0028 (0x0028 - 0x0000)
struct GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTag final
{
public:
	const class ACharacter*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           MontageTag;                                        // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimationLookupTableEntry>     OutEntries;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EAnimationLookupTableLookupMethod             LookupMethod;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTag) == 0x000008, "Wrong alignment on GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTag");
static_assert(sizeof(GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTag) == 0x000028, "Wrong size on GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTag");
static_assert(offsetof(GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTag, Character) == 0x000000, "Member 'GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTag::Character' has a wrong offset!");
static_assert(offsetof(GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTag, MontageTag) == 0x000008, "Member 'GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTag::MontageTag' has a wrong offset!");
static_assert(offsetof(GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTag, OutEntries) == 0x000010, "Member 'GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTag::OutEntries' has a wrong offset!");
static_assert(offsetof(GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTag, LookupMethod) == 0x000020, "Member 'GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTag::LookupMethod' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_AnimationAssetManager.GetAllLookupEntriesForTagSkeleton
// 0x0028 (0x0028 - 0x0000)
struct GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTagSkeleton final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           MontageTag;                                        // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimationLookupTableEntry>     OutEntries;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EAnimationLookupTableLookupMethod             LookupMethod;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTagSkeleton) == 0x000008, "Wrong alignment on GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTagSkeleton");
static_assert(sizeof(GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTagSkeleton) == 0x000028, "Wrong size on GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTagSkeleton");
static_assert(offsetof(GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTagSkeleton, SkeletalMeshComponent) == 0x000000, "Member 'GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTagSkeleton::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTagSkeleton, MontageTag) == 0x000008, "Member 'GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTagSkeleton::MontageTag' has a wrong offset!");
static_assert(offsetof(GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTagSkeleton, OutEntries) == 0x000010, "Member 'GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTagSkeleton::OutEntries' has a wrong offset!");
static_assert(offsetof(GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTagSkeleton, LookupMethod) == 0x000020, "Member 'GameSubsystem_AnimationAssetManager_GetAllLookupEntriesForTagSkeleton::LookupMethod' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_AnimationAssetManager.GetMontageForCharacter
// 0x0040 (0x0040 - 0x0000)
struct GameSubsystem_AnimationAssetManager_GetMontageForCharacter final
{
public:
	const class ACharacter*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           MontageTag;                                        // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartAsyncLoad;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            ReturnValue;                                       // 0x0018(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_AnimationAssetManager_GetMontageForCharacter) == 0x000008, "Wrong alignment on GameSubsystem_AnimationAssetManager_GetMontageForCharacter");
static_assert(sizeof(GameSubsystem_AnimationAssetManager_GetMontageForCharacter) == 0x000040, "Wrong size on GameSubsystem_AnimationAssetManager_GetMontageForCharacter");
static_assert(offsetof(GameSubsystem_AnimationAssetManager_GetMontageForCharacter, Character) == 0x000000, "Member 'GameSubsystem_AnimationAssetManager_GetMontageForCharacter::Character' has a wrong offset!");
static_assert(offsetof(GameSubsystem_AnimationAssetManager_GetMontageForCharacter, MontageTag) == 0x000008, "Member 'GameSubsystem_AnimationAssetManager_GetMontageForCharacter::MontageTag' has a wrong offset!");
static_assert(offsetof(GameSubsystem_AnimationAssetManager_GetMontageForCharacter, bStartAsyncLoad) == 0x000010, "Member 'GameSubsystem_AnimationAssetManager_GetMontageForCharacter::bStartAsyncLoad' has a wrong offset!");
static_assert(offsetof(GameSubsystem_AnimationAssetManager_GetMontageForCharacter, ReturnValue) == 0x000018, "Member 'GameSubsystem_AnimationAssetManager_GetMontageForCharacter::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_AnimationAssetManager.GetMontageForCharacterBlockingLoad
// 0x0018 (0x0018 - 0x0000)
struct GameSubsystem_AnimationAssetManager_GetMontageForCharacterBlockingLoad final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           MontageTag;                                        // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_AnimationAssetManager_GetMontageForCharacterBlockingLoad) == 0x000008, "Wrong alignment on GameSubsystem_AnimationAssetManager_GetMontageForCharacterBlockingLoad");
static_assert(sizeof(GameSubsystem_AnimationAssetManager_GetMontageForCharacterBlockingLoad) == 0x000018, "Wrong size on GameSubsystem_AnimationAssetManager_GetMontageForCharacterBlockingLoad");
static_assert(offsetof(GameSubsystem_AnimationAssetManager_GetMontageForCharacterBlockingLoad, Character) == 0x000000, "Member 'GameSubsystem_AnimationAssetManager_GetMontageForCharacterBlockingLoad::Character' has a wrong offset!");
static_assert(offsetof(GameSubsystem_AnimationAssetManager_GetMontageForCharacterBlockingLoad, MontageTag) == 0x000008, "Member 'GameSubsystem_AnimationAssetManager_GetMontageForCharacterBlockingLoad::MontageTag' has a wrong offset!");
static_assert(offsetof(GameSubsystem_AnimationAssetManager_GetMontageForCharacterBlockingLoad, ReturnValue) == 0x000010, "Member 'GameSubsystem_AnimationAssetManager_GetMontageForCharacterBlockingLoad::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_AnimationAssetManager.GetMontageForSkeleton
// 0x0040 (0x0040 - 0x0000)
struct GameSubsystem_AnimationAssetManager_GetMontageForSkeleton final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           MontageTag;                                        // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartAsyncLoad;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            ReturnValue;                                       // 0x0018(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_AnimationAssetManager_GetMontageForSkeleton) == 0x000008, "Wrong alignment on GameSubsystem_AnimationAssetManager_GetMontageForSkeleton");
static_assert(sizeof(GameSubsystem_AnimationAssetManager_GetMontageForSkeleton) == 0x000040, "Wrong size on GameSubsystem_AnimationAssetManager_GetMontageForSkeleton");
static_assert(offsetof(GameSubsystem_AnimationAssetManager_GetMontageForSkeleton, SkeletalMeshComponent) == 0x000000, "Member 'GameSubsystem_AnimationAssetManager_GetMontageForSkeleton::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(GameSubsystem_AnimationAssetManager_GetMontageForSkeleton, MontageTag) == 0x000008, "Member 'GameSubsystem_AnimationAssetManager_GetMontageForSkeleton::MontageTag' has a wrong offset!");
static_assert(offsetof(GameSubsystem_AnimationAssetManager_GetMontageForSkeleton, bStartAsyncLoad) == 0x000010, "Member 'GameSubsystem_AnimationAssetManager_GetMontageForSkeleton::bStartAsyncLoad' has a wrong offset!");
static_assert(offsetof(GameSubsystem_AnimationAssetManager_GetMontageForSkeleton, ReturnValue) == 0x000018, "Member 'GameSubsystem_AnimationAssetManager_GetMontageForSkeleton::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_AnimationAssetManager.GetMontageForSkeletonBlockingLoad
// 0x0018 (0x0018 - 0x0000)
struct GameSubsystem_AnimationAssetManager_GetMontageForSkeletonBlockingLoad final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           MontageTag;                                        // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_AnimationAssetManager_GetMontageForSkeletonBlockingLoad) == 0x000008, "Wrong alignment on GameSubsystem_AnimationAssetManager_GetMontageForSkeletonBlockingLoad");
static_assert(sizeof(GameSubsystem_AnimationAssetManager_GetMontageForSkeletonBlockingLoad) == 0x000018, "Wrong size on GameSubsystem_AnimationAssetManager_GetMontageForSkeletonBlockingLoad");
static_assert(offsetof(GameSubsystem_AnimationAssetManager_GetMontageForSkeletonBlockingLoad, SkeletalMeshComponent) == 0x000000, "Member 'GameSubsystem_AnimationAssetManager_GetMontageForSkeletonBlockingLoad::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(GameSubsystem_AnimationAssetManager_GetMontageForSkeletonBlockingLoad, MontageTag) == 0x000008, "Member 'GameSubsystem_AnimationAssetManager_GetMontageForSkeletonBlockingLoad::MontageTag' has a wrong offset!");
static_assert(offsetof(GameSubsystem_AnimationAssetManager_GetMontageForSkeletonBlockingLoad, ReturnValue) == 0x000010, "Member 'GameSubsystem_AnimationAssetManager_GetMontageForSkeletonBlockingLoad::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.ChapterSelectButtonWidget.OnWidgetHover__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ChapterSelectButtonWidget_OnWidgetHover__DelegateSignature final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChapterSelectButtonWidget_OnWidgetHover__DelegateSignature) == 0x000008, "Wrong alignment on ChapterSelectButtonWidget_OnWidgetHover__DelegateSignature");
static_assert(sizeof(ChapterSelectButtonWidget_OnWidgetHover__DelegateSignature) == 0x000008, "Wrong size on ChapterSelectButtonWidget_OnWidgetHover__DelegateSignature");
static_assert(offsetof(ChapterSelectButtonWidget_OnWidgetHover__DelegateSignature, Widget) == 0x000000, "Member 'ChapterSelectButtonWidget_OnWidgetHover__DelegateSignature::Widget' has a wrong offset!");

// Function ObsidianFox.CharacterMeshInterpolationComponent.DisableMeshInterpolation
// 0x0008 (0x0008 - 0x0000)
struct CharacterMeshInterpolationComponent_DisableMeshInterpolation final
{
public:
	const class UObject*                          LockReference;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMeshInterpolationComponent_DisableMeshInterpolation) == 0x000008, "Wrong alignment on CharacterMeshInterpolationComponent_DisableMeshInterpolation");
static_assert(sizeof(CharacterMeshInterpolationComponent_DisableMeshInterpolation) == 0x000008, "Wrong size on CharacterMeshInterpolationComponent_DisableMeshInterpolation");
static_assert(offsetof(CharacterMeshInterpolationComponent_DisableMeshInterpolation, LockReference) == 0x000000, "Member 'CharacterMeshInterpolationComponent_DisableMeshInterpolation::LockReference' has a wrong offset!");

// Function ObsidianFox.CharacterMeshInterpolationComponent.OnOwnerCinematicModeChange
// 0x0001 (0x0001 - 0x0000)
struct CharacterMeshInterpolationComponent_OnOwnerCinematicModeChange final
{
public:
	bool                                          EnteredCinematicMode;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMeshInterpolationComponent_OnOwnerCinematicModeChange) == 0x000001, "Wrong alignment on CharacterMeshInterpolationComponent_OnOwnerCinematicModeChange");
static_assert(sizeof(CharacterMeshInterpolationComponent_OnOwnerCinematicModeChange) == 0x000001, "Wrong size on CharacterMeshInterpolationComponent_OnOwnerCinematicModeChange");
static_assert(offsetof(CharacterMeshInterpolationComponent_OnOwnerCinematicModeChange, EnteredCinematicMode) == 0x000000, "Member 'CharacterMeshInterpolationComponent_OnOwnerCinematicModeChange::EnteredCinematicMode' has a wrong offset!");

// Function ObsidianFox.CharacterMeshInterpolationComponent.RestoreMeshInterpolation
// 0x0008 (0x0008 - 0x0000)
struct CharacterMeshInterpolationComponent_RestoreMeshInterpolation final
{
public:
	const class UObject*                          LockReference;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterMeshInterpolationComponent_RestoreMeshInterpolation) == 0x000008, "Wrong alignment on CharacterMeshInterpolationComponent_RestoreMeshInterpolation");
static_assert(sizeof(CharacterMeshInterpolationComponent_RestoreMeshInterpolation) == 0x000008, "Wrong size on CharacterMeshInterpolationComponent_RestoreMeshInterpolation");
static_assert(offsetof(CharacterMeshInterpolationComponent_RestoreMeshInterpolation, LockReference) == 0x000000, "Member 'CharacterMeshInterpolationComponent_RestoreMeshInterpolation::LockReference' has a wrong offset!");

// Function ObsidianFox.CharacterSelect.OnLevelAddedToWorld
// 0x0010 (0x0010 - 0x0000)
struct CharacterSelect_OnLevelAddedToWorld final
{
public:
	class ULevel*                                 Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorld*                                 World;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelect_OnLevelAddedToWorld) == 0x000008, "Wrong alignment on CharacterSelect_OnLevelAddedToWorld");
static_assert(sizeof(CharacterSelect_OnLevelAddedToWorld) == 0x000010, "Wrong size on CharacterSelect_OnLevelAddedToWorld");
static_assert(offsetof(CharacterSelect_OnLevelAddedToWorld, Level) == 0x000000, "Member 'CharacterSelect_OnLevelAddedToWorld::Level' has a wrong offset!");
static_assert(offsetof(CharacterSelect_OnLevelAddedToWorld, World) == 0x000008, "Member 'CharacterSelect_OnLevelAddedToWorld::World' has a wrong offset!");

// Function ObsidianFox.CharacterSelect.SetAlphaForAllCharacterLights
// 0x0004 (0x0004 - 0x0000)
struct CharacterSelect_SetAlphaForAllCharacterLights final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelect_SetAlphaForAllCharacterLights) == 0x000004, "Wrong alignment on CharacterSelect_SetAlphaForAllCharacterLights");
static_assert(sizeof(CharacterSelect_SetAlphaForAllCharacterLights) == 0x000004, "Wrong size on CharacterSelect_SetAlphaForAllCharacterLights");
static_assert(offsetof(CharacterSelect_SetAlphaForAllCharacterLights, Alpha) == 0x000000, "Member 'CharacterSelect_SetAlphaForAllCharacterLights::Alpha' has a wrong offset!");

// Function ObsidianFox.CharacterSelect.SetAlphaForCharacterLight
// 0x0008 (0x0008 - 0x0000)
struct CharacterSelect_SetAlphaForCharacterLight final
{
public:
	EPlayerCharacterType                          Character;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Alpha;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSelect_SetAlphaForCharacterLight) == 0x000004, "Wrong alignment on CharacterSelect_SetAlphaForCharacterLight");
static_assert(sizeof(CharacterSelect_SetAlphaForCharacterLight) == 0x000008, "Wrong size on CharacterSelect_SetAlphaForCharacterLight");
static_assert(offsetof(CharacterSelect_SetAlphaForCharacterLight, Character) == 0x000000, "Member 'CharacterSelect_SetAlphaForCharacterLight::Character' has a wrong offset!");
static_assert(offsetof(CharacterSelect_SetAlphaForCharacterLight, Alpha) == 0x000004, "Member 'CharacterSelect_SetAlphaForCharacterLight::Alpha' has a wrong offset!");

// Function ObsidianFox.HiddenOptionsPT.LeftStickX
// 0x0004 (0x0004 - 0x0000)
struct HiddenOptionsPT_LeftStickX final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HiddenOptionsPT_LeftStickX) == 0x000004, "Wrong alignment on HiddenOptionsPT_LeftStickX");
static_assert(sizeof(HiddenOptionsPT_LeftStickX) == 0x000004, "Wrong size on HiddenOptionsPT_LeftStickX");
static_assert(offsetof(HiddenOptionsPT_LeftStickX, Val) == 0x000000, "Member 'HiddenOptionsPT_LeftStickX::Val' has a wrong offset!");

// Function ObsidianFox.HiddenOptionsPT.LeftStickY
// 0x0004 (0x0004 - 0x0000)
struct HiddenOptionsPT_LeftStickY final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HiddenOptionsPT_LeftStickY) == 0x000004, "Wrong alignment on HiddenOptionsPT_LeftStickY");
static_assert(sizeof(HiddenOptionsPT_LeftStickY) == 0x000004, "Wrong size on HiddenOptionsPT_LeftStickY");
static_assert(offsetof(HiddenOptionsPT_LeftStickY, Val) == 0x000000, "Member 'HiddenOptionsPT_LeftStickY::Val' has a wrong offset!");

// Function ObsidianFox.CharacterStateAnimInterface.OnEnterGauntlet
// 0x0001 (0x0001 - 0x0000)
struct CharacterStateAnimInterface_OnEnterGauntlet final
{
public:
	bool                                          bIsFirstTime;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterStateAnimInterface_OnEnterGauntlet) == 0x000001, "Wrong alignment on CharacterStateAnimInterface_OnEnterGauntlet");
static_assert(sizeof(CharacterStateAnimInterface_OnEnterGauntlet) == 0x000001, "Wrong size on CharacterStateAnimInterface_OnEnterGauntlet");
static_assert(offsetof(CharacterStateAnimInterface_OnEnterGauntlet, bIsFirstTime) == 0x000000, "Member 'CharacterStateAnimInterface_OnEnterGauntlet::bIsFirstTime' has a wrong offset!");

// Function ObsidianFox.CharacterStateAnimInterface.OnExitGauntlet
// 0x0001 (0x0001 - 0x0000)
struct CharacterStateAnimInterface_OnExitGauntlet final
{
public:
	bool                                          bIsFirstTime;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterStateAnimInterface_OnExitGauntlet) == 0x000001, "Wrong alignment on CharacterStateAnimInterface_OnExitGauntlet");
static_assert(sizeof(CharacterStateAnimInterface_OnExitGauntlet) == 0x000001, "Wrong size on CharacterStateAnimInterface_OnExitGauntlet");
static_assert(offsetof(CharacterStateAnimInterface_OnExitGauntlet, bIsFirstTime) == 0x000000, "Member 'CharacterStateAnimInterface_OnExitGauntlet::bIsFirstTime' has a wrong offset!");

// Function ObsidianFox.GunAnimInterface.OnReloadEvent
// 0x0008 (0x0008 - 0x0000)
struct GunAnimInterface_OnReloadEvent final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunAnimInterface_OnReloadEvent) == 0x000004, "Wrong alignment on GunAnimInterface_OnReloadEvent");
static_assert(sizeof(GunAnimInterface_OnReloadEvent) == 0x000008, "Wrong size on GunAnimInterface_OnReloadEvent");
static_assert(offsetof(GunAnimInterface_OnReloadEvent, EventTag) == 0x000000, "Member 'GunAnimInterface_OnReloadEvent::EventTag' has a wrong offset!");

// Function ObsidianFox.CheckGroundedAtStartupAC.OnAllowFallingMultiBoolValueChanged
// 0x0001 (0x0001 - 0x0000)
struct CheckGroundedAtStartupAC_OnAllowFallingMultiBoolValueChanged final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheckGroundedAtStartupAC_OnAllowFallingMultiBoolValueChanged) == 0x000001, "Wrong alignment on CheckGroundedAtStartupAC_OnAllowFallingMultiBoolValueChanged");
static_assert(sizeof(CheckGroundedAtStartupAC_OnAllowFallingMultiBoolValueChanged) == 0x000001, "Wrong size on CheckGroundedAtStartupAC_OnAllowFallingMultiBoolValueChanged");
static_assert(offsetof(CheckGroundedAtStartupAC_OnAllowFallingMultiBoolValueChanged, bNewValue) == 0x000000, "Member 'CheckGroundedAtStartupAC_OnAllowFallingMultiBoolValueChanged::bNewValue' has a wrong offset!");

// Function ObsidianFox.CheckGroundedAtStartupAC.OnCharacterGameplayTagChanged
// 0x000C (0x000C - 0x0000)
struct CheckGroundedAtStartupAC_OnCharacterGameplayTagChanged final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventType;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheckGroundedAtStartupAC_OnCharacterGameplayTagChanged) == 0x000004, "Wrong alignment on CheckGroundedAtStartupAC_OnCharacterGameplayTagChanged");
static_assert(sizeof(CheckGroundedAtStartupAC_OnCharacterGameplayTagChanged) == 0x00000C, "Wrong size on CheckGroundedAtStartupAC_OnCharacterGameplayTagChanged");
static_assert(offsetof(CheckGroundedAtStartupAC_OnCharacterGameplayTagChanged, Tag) == 0x000000, "Member 'CheckGroundedAtStartupAC_OnCharacterGameplayTagChanged::Tag' has a wrong offset!");
static_assert(offsetof(CheckGroundedAtStartupAC_OnCharacterGameplayTagChanged, EventType) == 0x000008, "Member 'CheckGroundedAtStartupAC_OnCharacterGameplayTagChanged::EventType' has a wrong offset!");

// Function ObsidianFox.CheckGroundedAtStartupAC.OnCharacterMovementModeChanged
// 0x0002 (0x0002 - 0x0000)
struct CheckGroundedAtStartupAC_OnCharacterMovementModeChanged final
{
public:
	EMovementMode                                 PreviousMovementMode;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 NewMovementMode;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheckGroundedAtStartupAC_OnCharacterMovementModeChanged) == 0x000001, "Wrong alignment on CheckGroundedAtStartupAC_OnCharacterMovementModeChanged");
static_assert(sizeof(CheckGroundedAtStartupAC_OnCharacterMovementModeChanged) == 0x000002, "Wrong size on CheckGroundedAtStartupAC_OnCharacterMovementModeChanged");
static_assert(offsetof(CheckGroundedAtStartupAC_OnCharacterMovementModeChanged, PreviousMovementMode) == 0x000000, "Member 'CheckGroundedAtStartupAC_OnCharacterMovementModeChanged::PreviousMovementMode' has a wrong offset!");
static_assert(offsetof(CheckGroundedAtStartupAC_OnCharacterMovementModeChanged, NewMovementMode) == 0x000001, "Member 'CheckGroundedAtStartupAC_OnCharacterMovementModeChanged::NewMovementMode' has a wrong offset!");

// Function ObsidianFox.CheckGroundedAtStartupAC.OnOwnerCinematicModeChanged
// 0x0001 (0x0001 - 0x0000)
struct CheckGroundedAtStartupAC_OnOwnerCinematicModeChanged final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheckGroundedAtStartupAC_OnOwnerCinematicModeChanged) == 0x000001, "Wrong alignment on CheckGroundedAtStartupAC_OnOwnerCinematicModeChanged");
static_assert(sizeof(CheckGroundedAtStartupAC_OnOwnerCinematicModeChanged) == 0x000001, "Wrong size on CheckGroundedAtStartupAC_OnOwnerCinematicModeChanged");
static_assert(offsetof(CheckGroundedAtStartupAC_OnOwnerCinematicModeChanged, NewState) == 0x000000, "Member 'CheckGroundedAtStartupAC_OnOwnerCinematicModeChanged::NewState' has a wrong offset!");

// Function ObsidianFox.CheckGroundedAtStartupAC.SetAllowFalling
// 0x0010 (0x0010 - 0x0000)
struct CheckGroundedAtStartupAC_SetAllowFalling final
{
public:
	const class UObject*                          LockReference;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CheckGroundedAtStartupAC_SetAllowFalling) == 0x000008, "Wrong alignment on CheckGroundedAtStartupAC_SetAllowFalling");
static_assert(sizeof(CheckGroundedAtStartupAC_SetAllowFalling) == 0x000010, "Wrong size on CheckGroundedAtStartupAC_SetAllowFalling");
static_assert(offsetof(CheckGroundedAtStartupAC_SetAllowFalling, LockReference) == 0x000000, "Member 'CheckGroundedAtStartupAC_SetAllowFalling::LockReference' has a wrong offset!");
static_assert(offsetof(CheckGroundedAtStartupAC_SetAllowFalling, bValue) == 0x000008, "Member 'CheckGroundedAtStartupAC_SetAllowFalling::bValue' has a wrong offset!");

// Function ObsidianFox.HelpButtonHud.CreateNewHelpButton
// 0x0048 (0x0048 - 0x0000)
struct HelpButtonHud_CreateNewHelpButton final
{
public:
	TSoftObjectPtr<class UTexture2D>              buttonTexture;                                     // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ButtonText;                                        // 0x0028(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	EFButtonType                                  Type;                                              // 0x0040(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HelpButtonHud_CreateNewHelpButton) == 0x000008, "Wrong alignment on HelpButtonHud_CreateNewHelpButton");
static_assert(sizeof(HelpButtonHud_CreateNewHelpButton) == 0x000048, "Wrong size on HelpButtonHud_CreateNewHelpButton");
static_assert(offsetof(HelpButtonHud_CreateNewHelpButton, buttonTexture) == 0x000000, "Member 'HelpButtonHud_CreateNewHelpButton::buttonTexture' has a wrong offset!");
static_assert(offsetof(HelpButtonHud_CreateNewHelpButton, ButtonText) == 0x000028, "Member 'HelpButtonHud_CreateNewHelpButton::ButtonText' has a wrong offset!");
static_assert(offsetof(HelpButtonHud_CreateNewHelpButton, Type) == 0x000040, "Member 'HelpButtonHud_CreateNewHelpButton::Type' has a wrong offset!");

// Function ObsidianFox.HelpButtonHud.SetInactive
// 0x0002 (0x0002 - 0x0000)
struct HelpButtonHud_SetInactive final
{
public:
	EFButtonType                                  Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HelpButtonHud_SetInactive) == 0x000001, "Wrong alignment on HelpButtonHud_SetInactive");
static_assert(sizeof(HelpButtonHud_SetInactive) == 0x000002, "Wrong size on HelpButtonHud_SetInactive");
static_assert(offsetof(HelpButtonHud_SetInactive, Type) == 0x000000, "Member 'HelpButtonHud_SetInactive::Type' has a wrong offset!");
static_assert(offsetof(HelpButtonHud_SetInactive, Value) == 0x000001, "Member 'HelpButtonHud_SetInactive::Value' has a wrong offset!");

// Function ObsidianFox.HelpButtonHud.SetNewName
// 0x0020 (0x0020 - 0x0000)
struct HelpButtonHud_SetNewName final
{
public:
	EFButtonType                                  Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NewText;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HelpButtonHud_SetNewName) == 0x000008, "Wrong alignment on HelpButtonHud_SetNewName");
static_assert(sizeof(HelpButtonHud_SetNewName) == 0x000020, "Wrong size on HelpButtonHud_SetNewName");
static_assert(offsetof(HelpButtonHud_SetNewName, Type) == 0x000000, "Member 'HelpButtonHud_SetNewName::Type' has a wrong offset!");
static_assert(offsetof(HelpButtonHud_SetNewName, NewText) == 0x000008, "Member 'HelpButtonHud_SetNewName::NewText' has a wrong offset!");

// Function ObsidianFox.HelpButtonHud.SetVisibilityOnAll
// 0x0001 (0x0001 - 0x0000)
struct HelpButtonHud_SetVisibilityOnAll final
{
public:
	ESlateVisibility                              Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HelpButtonHud_SetVisibilityOnAll) == 0x000001, "Wrong alignment on HelpButtonHud_SetVisibilityOnAll");
static_assert(sizeof(HelpButtonHud_SetVisibilityOnAll) == 0x000001, "Wrong size on HelpButtonHud_SetVisibilityOnAll");
static_assert(offsetof(HelpButtonHud_SetVisibilityOnAll, Value) == 0x000000, "Member 'HelpButtonHud_SetVisibilityOnAll::Value' has a wrong offset!");

// Function ObsidianFox.CheckpointSubsystem.SetCheckpointTag
// 0x0008 (0x0008 - 0x0000)
struct CheckpointSubsystem_SetCheckpointTag final
{
public:
	struct FGameplayTag                           CheckpointTag;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheckpointSubsystem_SetCheckpointTag) == 0x000004, "Wrong alignment on CheckpointSubsystem_SetCheckpointTag");
static_assert(sizeof(CheckpointSubsystem_SetCheckpointTag) == 0x000008, "Wrong size on CheckpointSubsystem_SetCheckpointTag");
static_assert(offsetof(CheckpointSubsystem_SetCheckpointTag, CheckpointTag) == 0x000000, "Member 'CheckpointSubsystem_SetCheckpointTag::CheckpointTag' has a wrong offset!");

// Function ObsidianFox.CheckpointSubsystem.GetCurrentCheckpoint
// 0x0008 (0x0008 - 0x0000)
struct CheckpointSubsystem_GetCurrentCheckpoint final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheckpointSubsystem_GetCurrentCheckpoint) == 0x000004, "Wrong alignment on CheckpointSubsystem_GetCurrentCheckpoint");
static_assert(sizeof(CheckpointSubsystem_GetCurrentCheckpoint) == 0x000008, "Wrong size on CheckpointSubsystem_GetCurrentCheckpoint");
static_assert(offsetof(CheckpointSubsystem_GetCurrentCheckpoint, ReturnValue) == 0x000000, "Member 'CheckpointSubsystem_GetCurrentCheckpoint::ReturnValue' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_HitReaction.PlayHitReaction
// 0x00F8 (0x00F8 - 0x0000)
struct BPAsyncAction_HitReaction_PlayHitReaction final
{
public:
	class UHitReactionComponent*                  HitReactionComponent_0;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitReactionData                       HitReactionData;                                   // 0x0008(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EHitReactionType                              HitReactionType;                                   // 0x00E8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideDirection;                                // 0x00E9(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECardinalDirection                            DirectionToPlay;                                   // 0x00EA(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EB[0x5];                                       // 0x00EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBPAsyncAction_HitReaction*             ReturnValue;                                       // 0x00F0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_HitReaction_PlayHitReaction) == 0x000008, "Wrong alignment on BPAsyncAction_HitReaction_PlayHitReaction");
static_assert(sizeof(BPAsyncAction_HitReaction_PlayHitReaction) == 0x0000F8, "Wrong size on BPAsyncAction_HitReaction_PlayHitReaction");
static_assert(offsetof(BPAsyncAction_HitReaction_PlayHitReaction, HitReactionComponent_0) == 0x000000, "Member 'BPAsyncAction_HitReaction_PlayHitReaction::HitReactionComponent_0' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_HitReaction_PlayHitReaction, HitReactionData) == 0x000008, "Member 'BPAsyncAction_HitReaction_PlayHitReaction::HitReactionData' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_HitReaction_PlayHitReaction, HitReactionType) == 0x0000E8, "Member 'BPAsyncAction_HitReaction_PlayHitReaction::HitReactionType' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_HitReaction_PlayHitReaction, bOverrideDirection) == 0x0000E9, "Member 'BPAsyncAction_HitReaction_PlayHitReaction::bOverrideDirection' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_HitReaction_PlayHitReaction, DirectionToPlay) == 0x0000EA, "Member 'BPAsyncAction_HitReaction_PlayHitReaction::DirectionToPlay' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_HitReaction_PlayHitReaction, ReturnValue) == 0x0000F0, "Member 'BPAsyncAction_HitReaction_PlayHitReaction::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.BPAsyncAction_HitReaction.OnHitReactionFinished__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BPAsyncAction_HitReaction_OnHitReactionFinished__DelegateSignature final
{
public:
	EHitReactionType                              HitReactionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_HitReaction_OnHitReactionFinished__DelegateSignature) == 0x000001, "Wrong alignment on BPAsyncAction_HitReaction_OnHitReactionFinished__DelegateSignature");
static_assert(sizeof(BPAsyncAction_HitReaction_OnHitReactionFinished__DelegateSignature) == 0x000001, "Wrong size on BPAsyncAction_HitReaction_OnHitReactionFinished__DelegateSignature");
static_assert(offsetof(BPAsyncAction_HitReaction_OnHitReactionFinished__DelegateSignature, HitReactionType) == 0x000000, "Member 'BPAsyncAction_HitReaction_OnHitReactionFinished__DelegateSignature::HitReactionType' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_HitReaction.OnInteractionBegin
// 0x0001 (0x0001 - 0x0000)
struct BPAsyncAction_HitReaction_OnInteractionBegin final
{
public:
	EHitReactionType                              HitReactionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_HitReaction_OnInteractionBegin) == 0x000001, "Wrong alignment on BPAsyncAction_HitReaction_OnInteractionBegin");
static_assert(sizeof(BPAsyncAction_HitReaction_OnInteractionBegin) == 0x000001, "Wrong size on BPAsyncAction_HitReaction_OnInteractionBegin");
static_assert(offsetof(BPAsyncAction_HitReaction_OnInteractionBegin, HitReactionType) == 0x000000, "Member 'BPAsyncAction_HitReaction_OnInteractionBegin::HitReactionType' has a wrong offset!");

// Function ObsidianFox.BPAsyncAction_HitReaction.OnInteractionDone
// 0x0003 (0x0003 - 0x0000)
struct BPAsyncAction_HitReaction_OnInteractionDone final
{
public:
	EHitReactionType                              HitReactionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFailed;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasInterrupted;                                   // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_HitReaction_OnInteractionDone) == 0x000001, "Wrong alignment on BPAsyncAction_HitReaction_OnInteractionDone");
static_assert(sizeof(BPAsyncAction_HitReaction_OnInteractionDone) == 0x000003, "Wrong size on BPAsyncAction_HitReaction_OnInteractionDone");
static_assert(offsetof(BPAsyncAction_HitReaction_OnInteractionDone, HitReactionType) == 0x000000, "Member 'BPAsyncAction_HitReaction_OnInteractionDone::HitReactionType' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_HitReaction_OnInteractionDone, bFailed) == 0x000001, "Member 'BPAsyncAction_HitReaction_OnInteractionDone::bFailed' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_HitReaction_OnInteractionDone, bWasInterrupted) == 0x000002, "Member 'BPAsyncAction_HitReaction_OnInteractionDone::bWasInterrupted' has a wrong offset!");

// Function ObsidianFox.CircuitBreaker.SetBreakerLeverComponent
// 0x0010 (0x0010 - 0x0000)
struct CircuitBreaker_SetBreakerLeverComponent final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        LeverComponent;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CircuitBreaker_SetBreakerLeverComponent) == 0x000008, "Wrong alignment on CircuitBreaker_SetBreakerLeverComponent");
static_assert(sizeof(CircuitBreaker_SetBreakerLeverComponent) == 0x000010, "Wrong size on CircuitBreaker_SetBreakerLeverComponent");
static_assert(offsetof(CircuitBreaker_SetBreakerLeverComponent, Index_0) == 0x000000, "Member 'CircuitBreaker_SetBreakerLeverComponent::Index_0' has a wrong offset!");
static_assert(offsetof(CircuitBreaker_SetBreakerLeverComponent, LeverComponent) == 0x000008, "Member 'CircuitBreaker_SetBreakerLeverComponent::LeverComponent' has a wrong offset!");

// Function ObsidianFox.CircuitBreaker.ToggleBreakerByLever
// 0x0008 (0x0008 - 0x0000)
struct CircuitBreaker_ToggleBreakerByLever final
{
public:
	const class USceneComponent*                  LeverComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CircuitBreaker_ToggleBreakerByLever) == 0x000008, "Wrong alignment on CircuitBreaker_ToggleBreakerByLever");
static_assert(sizeof(CircuitBreaker_ToggleBreakerByLever) == 0x000008, "Wrong size on CircuitBreaker_ToggleBreakerByLever");
static_assert(offsetof(CircuitBreaker_ToggleBreakerByLever, LeverComponent) == 0x000000, "Member 'CircuitBreaker_ToggleBreakerByLever::LeverComponent' has a wrong offset!");

// Function ObsidianFox.CircuitBreaker.UpdateSolvedState
// 0x0001 (0x0001 - 0x0000)
struct CircuitBreaker_UpdateSolvedState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CircuitBreaker_UpdateSolvedState) == 0x000001, "Wrong alignment on CircuitBreaker_UpdateSolvedState");
static_assert(sizeof(CircuitBreaker_UpdateSolvedState) == 0x000001, "Wrong size on CircuitBreaker_UpdateSolvedState");
static_assert(offsetof(CircuitBreaker_UpdateSolvedState, ReturnValue) == 0x000000, "Member 'CircuitBreaker_UpdateSolvedState::ReturnValue' has a wrong offset!");

// Function ObsidianFox.CircuitBreaker.GetAffectedBreakersByLever
// 0x0018 (0x0018 - 0x0000)
struct CircuitBreaker_GetAffectedBreakersByLever final
{
public:
	const class USceneComponent*                  LeverComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPuzzleBreaker>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CircuitBreaker_GetAffectedBreakersByLever) == 0x000008, "Wrong alignment on CircuitBreaker_GetAffectedBreakersByLever");
static_assert(sizeof(CircuitBreaker_GetAffectedBreakersByLever) == 0x000018, "Wrong size on CircuitBreaker_GetAffectedBreakersByLever");
static_assert(offsetof(CircuitBreaker_GetAffectedBreakersByLever, LeverComponent) == 0x000000, "Member 'CircuitBreaker_GetAffectedBreakersByLever::LeverComponent' has a wrong offset!");
static_assert(offsetof(CircuitBreaker_GetAffectedBreakersByLever, ReturnValue) == 0x000008, "Member 'CircuitBreaker_GetAffectedBreakersByLever::ReturnValue' has a wrong offset!");

// Function ObsidianFox.CollectibleLoreTextExamination.MoveScrollBoxInputHandler
// 0x0010 (0x0010 - 0x0000)
struct CollectibleLoreTextExamination_MoveScrollBoxInputHandler final
{
public:
	struct FInputActionValue                      InputActionValue;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectibleLoreTextExamination_MoveScrollBoxInputHandler) == 0x000004, "Wrong alignment on CollectibleLoreTextExamination_MoveScrollBoxInputHandler");
static_assert(sizeof(CollectibleLoreTextExamination_MoveScrollBoxInputHandler) == 0x000010, "Wrong size on CollectibleLoreTextExamination_MoveScrollBoxInputHandler");
static_assert(offsetof(CollectibleLoreTextExamination_MoveScrollBoxInputHandler, InputActionValue) == 0x000000, "Member 'CollectibleLoreTextExamination_MoveScrollBoxInputHandler::InputActionValue' has a wrong offset!");

// Function ObsidianFox.CollectibleManager.CollectibleSetCompletedHandler
// 0x0008 (0x0008 - 0x0000)
struct CollectibleManager_CollectibleSetCompletedHandler final
{
public:
	const class UCollectibleSet*                  CollectibleSet;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectibleManager_CollectibleSetCompletedHandler) == 0x000008, "Wrong alignment on CollectibleManager_CollectibleSetCompletedHandler");
static_assert(sizeof(CollectibleManager_CollectibleSetCompletedHandler) == 0x000008, "Wrong size on CollectibleManager_CollectibleSetCompletedHandler");
static_assert(offsetof(CollectibleManager_CollectibleSetCompletedHandler, CollectibleSet) == 0x000000, "Member 'CollectibleManager_CollectibleSetCompletedHandler::CollectibleSet' has a wrong offset!");

// Function ObsidianFox.CollectibleManager.GetAllCollectiblesLoaded
// 0x0001 (0x0001 - 0x0000)
struct CollectibleManager_GetAllCollectiblesLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectibleManager_GetAllCollectiblesLoaded) == 0x000001, "Wrong alignment on CollectibleManager_GetAllCollectiblesLoaded");
static_assert(sizeof(CollectibleManager_GetAllCollectiblesLoaded) == 0x000001, "Wrong size on CollectibleManager_GetAllCollectiblesLoaded");
static_assert(offsetof(CollectibleManager_GetAllCollectiblesLoaded, ReturnValue) == 0x000000, "Member 'CollectibleManager_GetAllCollectiblesLoaded::ReturnValue' has a wrong offset!");

// Function ObsidianFox.CollectibleManager.GetCollectibleSet
// 0x0030 (0x0030 - 0x0000)
struct CollectibleManager_GetCollectibleSet final
{
public:
	TSoftObjectPtr<class UCollectiblesDataAsset>  InCollectiblesDataAsset;                           // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UCollectibleSet*                  ReturnValue;                                       // 0x0028(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectibleManager_GetCollectibleSet) == 0x000008, "Wrong alignment on CollectibleManager_GetCollectibleSet");
static_assert(sizeof(CollectibleManager_GetCollectibleSet) == 0x000030, "Wrong size on CollectibleManager_GetCollectibleSet");
static_assert(offsetof(CollectibleManager_GetCollectibleSet, InCollectiblesDataAsset) == 0x000000, "Member 'CollectibleManager_GetCollectibleSet::InCollectiblesDataAsset' has a wrong offset!");
static_assert(offsetof(CollectibleManager_GetCollectibleSet, ReturnValue) == 0x000028, "Member 'CollectibleManager_GetCollectibleSet::ReturnValue' has a wrong offset!");

// Function ObsidianFox.CollectibleManager.GetCollectibleSets
// 0x0010 (0x0010 - 0x0000)
struct CollectibleManager_GetCollectibleSets final
{
public:
	TArray<class UCollectibleSet*>                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectibleManager_GetCollectibleSets) == 0x000008, "Wrong alignment on CollectibleManager_GetCollectibleSets");
static_assert(sizeof(CollectibleManager_GetCollectibleSets) == 0x000010, "Wrong size on CollectibleManager_GetCollectibleSets");
static_assert(offsetof(CollectibleManager_GetCollectibleSets, ReturnValue) == 0x000000, "Member 'CollectibleManager_GetCollectibleSets::ReturnValue' has a wrong offset!");

// Function ObsidianFox.CollectibleManager.HaveGatheredItem
// 0x0058 (0x0058 - 0x0000)
struct CollectibleManager_HaveGatheredItem final
{
public:
	TSoftObjectPtr<class UCollectiblesDataAsset>  InCollectiblesDataAsset;                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UItemData>               InItemData;                                        // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CollectibleManager_HaveGatheredItem) == 0x000008, "Wrong alignment on CollectibleManager_HaveGatheredItem");
static_assert(sizeof(CollectibleManager_HaveGatheredItem) == 0x000058, "Wrong size on CollectibleManager_HaveGatheredItem");
static_assert(offsetof(CollectibleManager_HaveGatheredItem, InCollectiblesDataAsset) == 0x000000, "Member 'CollectibleManager_HaveGatheredItem::InCollectiblesDataAsset' has a wrong offset!");
static_assert(offsetof(CollectibleManager_HaveGatheredItem, InItemData) == 0x000028, "Member 'CollectibleManager_HaveGatheredItem::InItemData' has a wrong offset!");
static_assert(offsetof(CollectibleManager_HaveGatheredItem, ReturnValue) == 0x000050, "Member 'CollectibleManager_HaveGatheredItem::ReturnValue' has a wrong offset!");

// Function ObsidianFox.CollectibleManager.HaveGatheredItemInAnySet
// 0x0030 (0x0030 - 0x0000)
struct CollectibleManager_HaveGatheredItemInAnySet final
{
public:
	TSoftObjectPtr<class UItemData>               InItemData;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CollectibleManager_HaveGatheredItemInAnySet) == 0x000008, "Wrong alignment on CollectibleManager_HaveGatheredItemInAnySet");
static_assert(sizeof(CollectibleManager_HaveGatheredItemInAnySet) == 0x000030, "Wrong size on CollectibleManager_HaveGatheredItemInAnySet");
static_assert(offsetof(CollectibleManager_HaveGatheredItemInAnySet, InItemData) == 0x000000, "Member 'CollectibleManager_HaveGatheredItemInAnySet::InItemData' has a wrong offset!");
static_assert(offsetof(CollectibleManager_HaveGatheredItemInAnySet, ReturnValue) == 0x000028, "Member 'CollectibleManager_HaveGatheredItemInAnySet::ReturnValue' has a wrong offset!");

// Function ObsidianFox.HealthHistoryComponent.GetHealthDifference
// 0x0008 (0x0008 - 0x0000)
struct HealthHistoryComponent_GetHealthDifference final
{
public:
	float                                         SecondsBackInTime;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthHistoryComponent_GetHealthDifference) == 0x000004, "Wrong alignment on HealthHistoryComponent_GetHealthDifference");
static_assert(sizeof(HealthHistoryComponent_GetHealthDifference) == 0x000008, "Wrong size on HealthHistoryComponent_GetHealthDifference");
static_assert(offsetof(HealthHistoryComponent_GetHealthDifference, SecondsBackInTime) == 0x000000, "Member 'HealthHistoryComponent_GetHealthDifference::SecondsBackInTime' has a wrong offset!");
static_assert(offsetof(HealthHistoryComponent_GetHealthDifference, ReturnValue) == 0x000004, "Member 'HealthHistoryComponent_GetHealthDifference::ReturnValue' has a wrong offset!");

// Function ObsidianFox.HealthHistoryComponent.OnHealthChanged
// 0x0028 (0x0028 - 0x0000)
struct HealthHistoryComponent_OnHealthChanged final
{
public:
	float                                         NewCurrentHealth;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EventTags;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthHistoryComponent_OnHealthChanged) == 0x000008, "Wrong alignment on HealthHistoryComponent_OnHealthChanged");
static_assert(sizeof(HealthHistoryComponent_OnHealthChanged) == 0x000028, "Wrong size on HealthHistoryComponent_OnHealthChanged");
static_assert(offsetof(HealthHistoryComponent_OnHealthChanged, NewCurrentHealth) == 0x000000, "Member 'HealthHistoryComponent_OnHealthChanged::NewCurrentHealth' has a wrong offset!");
static_assert(offsetof(HealthHistoryComponent_OnHealthChanged, DeltaValue) == 0x000004, "Member 'HealthHistoryComponent_OnHealthChanged::DeltaValue' has a wrong offset!");
static_assert(offsetof(HealthHistoryComponent_OnHealthChanged, EventTags) == 0x000008, "Member 'HealthHistoryComponent_OnHealthChanged::EventTags' has a wrong offset!");

// Function ObsidianFox.HealthHistoryComponent.GetHealthBackInTime
// 0x0008 (0x0008 - 0x0000)
struct HealthHistoryComponent_GetHealthBackInTime final
{
public:
	float                                         SecondsBackInTime;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthHistoryComponent_GetHealthBackInTime) == 0x000004, "Wrong alignment on HealthHistoryComponent_GetHealthBackInTime");
static_assert(sizeof(HealthHistoryComponent_GetHealthBackInTime) == 0x000008, "Wrong size on HealthHistoryComponent_GetHealthBackInTime");
static_assert(offsetof(HealthHistoryComponent_GetHealthBackInTime, SecondsBackInTime) == 0x000000, "Member 'HealthHistoryComponent_GetHealthBackInTime::SecondsBackInTime' has a wrong offset!");
static_assert(offsetof(HealthHistoryComponent_GetHealthBackInTime, ReturnValue) == 0x000004, "Member 'HealthHistoryComponent_GetHealthBackInTime::ReturnValue' has a wrong offset!");

// Function ObsidianFox.CollectibleSet.IsCompleted
// 0x0001 (0x0001 - 0x0000)
struct CollectibleSet_IsCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectibleSet_IsCompleted) == 0x000001, "Wrong alignment on CollectibleSet_IsCompleted");
static_assert(sizeof(CollectibleSet_IsCompleted) == 0x000001, "Wrong size on CollectibleSet_IsCompleted");
static_assert(offsetof(CollectibleSet_IsCompleted, ReturnValue) == 0x000000, "Member 'CollectibleSet_IsCompleted::ReturnValue' has a wrong offset!");

// Function ObsidianFox.WidgetInputHandlingBase.GetWidgets
// 0x0010 (0x0010 - 0x0000)
struct WidgetInputHandlingBase_GetWidgets final
{
public:
	TArray<class UWidget*>                        Widgets;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetInputHandlingBase_GetWidgets) == 0x000008, "Wrong alignment on WidgetInputHandlingBase_GetWidgets");
static_assert(sizeof(WidgetInputHandlingBase_GetWidgets) == 0x000010, "Wrong size on WidgetInputHandlingBase_GetWidgets");
static_assert(offsetof(WidgetInputHandlingBase_GetWidgets, Widgets) == 0x000000, "Member 'WidgetInputHandlingBase_GetWidgets::Widgets' has a wrong offset!");

// Function ObsidianFox.WidgetInputHandlingBase.HoverNewWidget
// 0x0008 (0x0008 - 0x0000)
struct WidgetInputHandlingBase_HoverNewWidget final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetInputHandlingBase_HoverNewWidget) == 0x000008, "Wrong alignment on WidgetInputHandlingBase_HoverNewWidget");
static_assert(sizeof(WidgetInputHandlingBase_HoverNewWidget) == 0x000008, "Wrong size on WidgetInputHandlingBase_HoverNewWidget");
static_assert(offsetof(WidgetInputHandlingBase_HoverNewWidget, Widget) == 0x000000, "Member 'WidgetInputHandlingBase_HoverNewWidget::Widget' has a wrong offset!");

// Function ObsidianFox.WidgetInputHandlingBase.MoveWidgetInputActionTriggeredHandler
// 0x0010 (0x0010 - 0x0000)
struct WidgetInputHandlingBase_MoveWidgetInputActionTriggeredHandler final
{
public:
	struct FInputActionValue                      InputActionValue;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetInputHandlingBase_MoveWidgetInputActionTriggeredHandler) == 0x000004, "Wrong alignment on WidgetInputHandlingBase_MoveWidgetInputActionTriggeredHandler");
static_assert(sizeof(WidgetInputHandlingBase_MoveWidgetInputActionTriggeredHandler) == 0x000010, "Wrong size on WidgetInputHandlingBase_MoveWidgetInputActionTriggeredHandler");
static_assert(offsetof(WidgetInputHandlingBase_MoveWidgetInputActionTriggeredHandler, InputActionValue) == 0x000000, "Member 'WidgetInputHandlingBase_MoveWidgetInputActionTriggeredHandler::InputActionValue' has a wrong offset!");

// Function ObsidianFox.WidgetInputHandlingBase.OnButtonWidgetHovered
// 0x0008 (0x0008 - 0x0000)
struct WidgetInputHandlingBase_OnButtonWidgetHovered final
{
public:
	class UButton*                                ButtonWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetInputHandlingBase_OnButtonWidgetHovered) == 0x000008, "Wrong alignment on WidgetInputHandlingBase_OnButtonWidgetHovered");
static_assert(sizeof(WidgetInputHandlingBase_OnButtonWidgetHovered) == 0x000008, "Wrong size on WidgetInputHandlingBase_OnButtonWidgetHovered");
static_assert(offsetof(WidgetInputHandlingBase_OnButtonWidgetHovered, ButtonWidget) == 0x000000, "Member 'WidgetInputHandlingBase_OnButtonWidgetHovered::ButtonWidget' has a wrong offset!");

// DelegateFunction ObsidianFox.WidgetInputHandlingBase.OnCancelPressed__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WidgetInputHandlingBase_OnCancelPressed__DelegateSignature final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetInputHandlingBase_OnCancelPressed__DelegateSignature) == 0x000008, "Wrong alignment on WidgetInputHandlingBase_OnCancelPressed__DelegateSignature");
static_assert(sizeof(WidgetInputHandlingBase_OnCancelPressed__DelegateSignature) == 0x000008, "Wrong size on WidgetInputHandlingBase_OnCancelPressed__DelegateSignature");
static_assert(offsetof(WidgetInputHandlingBase_OnCancelPressed__DelegateSignature, Widget) == 0x000000, "Member 'WidgetInputHandlingBase_OnCancelPressed__DelegateSignature::Widget' has a wrong offset!");

// DelegateFunction ObsidianFox.WidgetInputHandlingBase.OnNewWidgetHovered__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WidgetInputHandlingBase_OnNewWidgetHovered__DelegateSignature final
{
public:
	class UWidget*                                NewWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetInputHandlingBase_OnNewWidgetHovered__DelegateSignature) == 0x000008, "Wrong alignment on WidgetInputHandlingBase_OnNewWidgetHovered__DelegateSignature");
static_assert(sizeof(WidgetInputHandlingBase_OnNewWidgetHovered__DelegateSignature) == 0x000008, "Wrong size on WidgetInputHandlingBase_OnNewWidgetHovered__DelegateSignature");
static_assert(offsetof(WidgetInputHandlingBase_OnNewWidgetHovered__DelegateSignature, NewWidget) == 0x000000, "Member 'WidgetInputHandlingBase_OnNewWidgetHovered__DelegateSignature::NewWidget' has a wrong offset!");

// Function ObsidianFox.WidgetInputHandlingBase.OnWidgetHovered
// 0x0008 (0x0008 - 0x0000)
struct WidgetInputHandlingBase_OnWidgetHovered final
{
public:
	class UWidget*                                NewWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetInputHandlingBase_OnWidgetHovered) == 0x000008, "Wrong alignment on WidgetInputHandlingBase_OnWidgetHovered");
static_assert(sizeof(WidgetInputHandlingBase_OnWidgetHovered) == 0x000008, "Wrong size on WidgetInputHandlingBase_OnWidgetHovered");
static_assert(offsetof(WidgetInputHandlingBase_OnWidgetHovered, NewWidget) == 0x000000, "Member 'WidgetInputHandlingBase_OnWidgetHovered::NewWidget' has a wrong offset!");

// Function ObsidianFox.WidgetInputHandlingBase.HasBeenSetup
// 0x0001 (0x0001 - 0x0000)
struct WidgetInputHandlingBase_HasBeenSetup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetInputHandlingBase_HasBeenSetup) == 0x000001, "Wrong alignment on WidgetInputHandlingBase_HasBeenSetup");
static_assert(sizeof(WidgetInputHandlingBase_HasBeenSetup) == 0x000001, "Wrong size on WidgetInputHandlingBase_HasBeenSetup");
static_assert(offsetof(WidgetInputHandlingBase_HasBeenSetup, ReturnValue) == 0x000000, "Member 'WidgetInputHandlingBase_HasBeenSetup::ReturnValue' has a wrong offset!");

// Function ObsidianFox.CollectiblesListWidget.MoveBetweenCollectiblesVertical
// 0x0001 (0x0001 - 0x0000)
struct CollectiblesListWidget_MoveBetweenCollectiblesVertical final
{
public:
	bool                                          bUp;                                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectiblesListWidget_MoveBetweenCollectiblesVertical) == 0x000001, "Wrong alignment on CollectiblesListWidget_MoveBetweenCollectiblesVertical");
static_assert(sizeof(CollectiblesListWidget_MoveBetweenCollectiblesVertical) == 0x000001, "Wrong size on CollectiblesListWidget_MoveBetweenCollectiblesVertical");
static_assert(offsetof(CollectiblesListWidget_MoveBetweenCollectiblesVertical, bUp) == 0x000000, "Member 'CollectiblesListWidget_MoveBetweenCollectiblesVertical::bUp' has a wrong offset!");

// Function ObsidianFox.CollectiblesSlotButtonWidget.SetImageAndItemName
// 0x0028 (0x0028 - 0x0000)
struct CollectiblesSlotButtonWidget_SetImageAndItemName final
{
public:
	TSoftObjectPtr<class UItemData>               ItemData;                                          // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectiblesSlotButtonWidget_SetImageAndItemName) == 0x000008, "Wrong alignment on CollectiblesSlotButtonWidget_SetImageAndItemName");
static_assert(sizeof(CollectiblesSlotButtonWidget_SetImageAndItemName) == 0x000028, "Wrong size on CollectiblesSlotButtonWidget_SetImageAndItemName");
static_assert(offsetof(CollectiblesSlotButtonWidget_SetImageAndItemName, ItemData) == 0x000000, "Member 'CollectiblesSlotButtonWidget_SetImageAndItemName::ItemData' has a wrong offset!");

// Function ObsidianFox.CollectiblesWidget.MoveWidgetInputActionTriggeredHandler
// 0x0010 (0x0010 - 0x0000)
struct CollectiblesWidget_MoveWidgetInputActionTriggeredHandler final
{
public:
	struct FInputActionValue                      InputActionValue;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectiblesWidget_MoveWidgetInputActionTriggeredHandler) == 0x000004, "Wrong alignment on CollectiblesWidget_MoveWidgetInputActionTriggeredHandler");
static_assert(sizeof(CollectiblesWidget_MoveWidgetInputActionTriggeredHandler) == 0x000010, "Wrong size on CollectiblesWidget_MoveWidgetInputActionTriggeredHandler");
static_assert(offsetof(CollectiblesWidget_MoveWidgetInputActionTriggeredHandler, InputActionValue) == 0x000000, "Member 'CollectiblesWidget_MoveWidgetInputActionTriggeredHandler::InputActionValue' has a wrong offset!");

// Function ObsidianFox.PlayerSubGraphAnimInstance.GetLinkedOwner
// 0x0008 (0x0008 - 0x0000)
struct PlayerSubGraphAnimInstance_GetLinkedOwner final
{
public:
	class UPlayerAnimInstance*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerSubGraphAnimInstance_GetLinkedOwner) == 0x000008, "Wrong alignment on PlayerSubGraphAnimInstance_GetLinkedOwner");
static_assert(sizeof(PlayerSubGraphAnimInstance_GetLinkedOwner) == 0x000008, "Wrong size on PlayerSubGraphAnimInstance_GetLinkedOwner");
static_assert(offsetof(PlayerSubGraphAnimInstance_GetLinkedOwner, ReturnValue) == 0x000000, "Member 'PlayerSubGraphAnimInstance_GetLinkedOwner::ReturnValue' has a wrong offset!");

// Function ObsidianFox.PlayerSubGraphAnimInstance.HasAnyGameplayTags
// 0x0028 (0x0028 - 0x0000)
struct PlayerSubGraphAnimInstance_HasAnyGameplayTags final
{
public:
	struct FGameplayTagContainer                  Container;                                         // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerSubGraphAnimInstance_HasAnyGameplayTags) == 0x000008, "Wrong alignment on PlayerSubGraphAnimInstance_HasAnyGameplayTags");
static_assert(sizeof(PlayerSubGraphAnimInstance_HasAnyGameplayTags) == 0x000028, "Wrong size on PlayerSubGraphAnimInstance_HasAnyGameplayTags");
static_assert(offsetof(PlayerSubGraphAnimInstance_HasAnyGameplayTags, Container) == 0x000000, "Member 'PlayerSubGraphAnimInstance_HasAnyGameplayTags::Container' has a wrong offset!");
static_assert(offsetof(PlayerSubGraphAnimInstance_HasAnyGameplayTags, ReturnValue) == 0x000020, "Member 'PlayerSubGraphAnimInstance_HasAnyGameplayTags::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ContextualTraverseAnimInstance.GetInputTriggeredEarlyBlendOut
// 0x000C (0x000C - 0x0000)
struct ContextualTraverseAnimInstance_GetInputTriggeredEarlyBlendOut final
{
public:
	int32                                         MachineIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransitionIndex;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualTraverseAnimInstance_GetInputTriggeredEarlyBlendOut) == 0x000004, "Wrong alignment on ContextualTraverseAnimInstance_GetInputTriggeredEarlyBlendOut");
static_assert(sizeof(ContextualTraverseAnimInstance_GetInputTriggeredEarlyBlendOut) == 0x00000C, "Wrong size on ContextualTraverseAnimInstance_GetInputTriggeredEarlyBlendOut");
static_assert(offsetof(ContextualTraverseAnimInstance_GetInputTriggeredEarlyBlendOut, MachineIndex) == 0x000000, "Member 'ContextualTraverseAnimInstance_GetInputTriggeredEarlyBlendOut::MachineIndex' has a wrong offset!");
static_assert(offsetof(ContextualTraverseAnimInstance_GetInputTriggeredEarlyBlendOut, TransitionIndex) == 0x000004, "Member 'ContextualTraverseAnimInstance_GetInputTriggeredEarlyBlendOut::TransitionIndex' has a wrong offset!");
static_assert(offsetof(ContextualTraverseAnimInstance_GetInputTriggeredEarlyBlendOut, ReturnValue) == 0x000008, "Member 'ContextualTraverseAnimInstance_GetInputTriggeredEarlyBlendOut::ReturnValue' has a wrong offset!");

// Function ObsidianFox.HumanoidAnimInterface.GetHandBoneName
// 0x000C (0x000C - 0x0000)
struct HumanoidAnimInterface_GetHandBoneName final
{
public:
	bool                                          bIsRightHand;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanoidAnimInterface_GetHandBoneName) == 0x000004, "Wrong alignment on HumanoidAnimInterface_GetHandBoneName");
static_assert(sizeof(HumanoidAnimInterface_GetHandBoneName) == 0x00000C, "Wrong size on HumanoidAnimInterface_GetHandBoneName");
static_assert(offsetof(HumanoidAnimInterface_GetHandBoneName, bIsRightHand) == 0x000000, "Member 'HumanoidAnimInterface_GetHandBoneName::bIsRightHand' has a wrong offset!");
static_assert(offsetof(HumanoidAnimInterface_GetHandBoneName, ReturnValue) == 0x000004, "Member 'HumanoidAnimInterface_GetHandBoneName::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InteractionComponentBase.InitiateInteraction
// 0x0008 (0x0008 - 0x0000)
struct InteractionComponentBase_InitiateInteraction final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponentBase_InitiateInteraction) == 0x000008, "Wrong alignment on InteractionComponentBase_InitiateInteraction");
static_assert(sizeof(InteractionComponentBase_InitiateInteraction) == 0x000008, "Wrong size on InteractionComponentBase_InitiateInteraction");
static_assert(offsetof(InteractionComponentBase_InitiateInteraction, InteractingCharacter) == 0x000000, "Member 'InteractionComponentBase_InitiateInteraction::InteractingCharacter' has a wrong offset!");

// DelegateFunction ObsidianFox.InteractionComponentBase.OnShowSelectionExtraIconStatusChangedDone__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct InteractionComponentBase_OnShowSelectionExtraIconStatusChangedDone__DelegateSignature final
{
public:
	bool                                          bShowSelectionExtraIcon_0;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponentBase_OnShowSelectionExtraIconStatusChangedDone__DelegateSignature) == 0x000001, "Wrong alignment on InteractionComponentBase_OnShowSelectionExtraIconStatusChangedDone__DelegateSignature");
static_assert(sizeof(InteractionComponentBase_OnShowSelectionExtraIconStatusChangedDone__DelegateSignature) == 0x000001, "Wrong size on InteractionComponentBase_OnShowSelectionExtraIconStatusChangedDone__DelegateSignature");
static_assert(offsetof(InteractionComponentBase_OnShowSelectionExtraIconStatusChangedDone__DelegateSignature, bShowSelectionExtraIcon_0) == 0x000000, "Member 'InteractionComponentBase_OnShowSelectionExtraIconStatusChangedDone__DelegateSignature::bShowSelectionExtraIcon_0' has a wrong offset!");

// Function ObsidianFox.InteractionComponentBase.SetBeginActivated
// 0x0001 (0x0001 - 0x0000)
struct InteractionComponentBase_SetBeginActivated final
{
public:
	bool                                          Val;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponentBase_SetBeginActivated) == 0x000001, "Wrong alignment on InteractionComponentBase_SetBeginActivated");
static_assert(sizeof(InteractionComponentBase_SetBeginActivated) == 0x000001, "Wrong size on InteractionComponentBase_SetBeginActivated");
static_assert(offsetof(InteractionComponentBase_SetBeginActivated, Val) == 0x000000, "Member 'InteractionComponentBase_SetBeginActivated::Val' has a wrong offset!");

// Function ObsidianFox.InteractionComponentBase.SetShowSelectionExtraIcon
// 0x0001 (0x0001 - 0x0000)
struct InteractionComponentBase_SetShowSelectionExtraIcon final
{
public:
	bool                                          bInShowSelectionExtraIcon;                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponentBase_SetShowSelectionExtraIcon) == 0x000001, "Wrong alignment on InteractionComponentBase_SetShowSelectionExtraIcon");
static_assert(sizeof(InteractionComponentBase_SetShowSelectionExtraIcon) == 0x000001, "Wrong size on InteractionComponentBase_SetShowSelectionExtraIcon");
static_assert(offsetof(InteractionComponentBase_SetShowSelectionExtraIcon, bInShowSelectionExtraIcon) == 0x000000, "Member 'InteractionComponentBase_SetShowSelectionExtraIcon::bInShowSelectionExtraIcon' has a wrong offset!");

// Function ObsidianFox.InteractionComponentBase.CurrentlyInteracting
// 0x0001 (0x0001 - 0x0000)
struct InteractionComponentBase_CurrentlyInteracting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponentBase_CurrentlyInteracting) == 0x000001, "Wrong alignment on InteractionComponentBase_CurrentlyInteracting");
static_assert(sizeof(InteractionComponentBase_CurrentlyInteracting) == 0x000001, "Wrong size on InteractionComponentBase_CurrentlyInteracting");
static_assert(offsetof(InteractionComponentBase_CurrentlyInteracting, ReturnValue) == 0x000000, "Member 'InteractionComponentBase_CurrentlyInteracting::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InteractionComponentBase.GetInteractingChar
// 0x0008 (0x0008 - 0x0000)
struct InteractionComponentBase_GetInteractingChar final
{
public:
	class ACharacter*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponentBase_GetInteractingChar) == 0x000008, "Wrong alignment on InteractionComponentBase_GetInteractingChar");
static_assert(sizeof(InteractionComponentBase_GetInteractingChar) == 0x000008, "Wrong size on InteractionComponentBase_GetInteractingChar");
static_assert(offsetof(InteractionComponentBase_GetInteractingChar, ReturnValue) == 0x000000, "Member 'InteractionComponentBase_GetInteractingChar::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InteractionComponentBase.GetInteractionIconWorldLocation
// 0x000C (0x000C - 0x0000)
struct InteractionComponentBase_GetInteractionIconWorldLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponentBase_GetInteractionIconWorldLocation) == 0x000004, "Wrong alignment on InteractionComponentBase_GetInteractionIconWorldLocation");
static_assert(sizeof(InteractionComponentBase_GetInteractionIconWorldLocation) == 0x00000C, "Wrong size on InteractionComponentBase_GetInteractionIconWorldLocation");
static_assert(offsetof(InteractionComponentBase_GetInteractionIconWorldLocation, ReturnValue) == 0x000000, "Member 'InteractionComponentBase_GetInteractionIconWorldLocation::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InteractionComponentBase.GetShowSelectionExtraIcon
// 0x0001 (0x0001 - 0x0000)
struct InteractionComponentBase_GetShowSelectionExtraIcon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponentBase_GetShowSelectionExtraIcon) == 0x000001, "Wrong alignment on InteractionComponentBase_GetShowSelectionExtraIcon");
static_assert(sizeof(InteractionComponentBase_GetShowSelectionExtraIcon) == 0x000001, "Wrong size on InteractionComponentBase_GetShowSelectionExtraIcon");
static_assert(offsetof(InteractionComponentBase_GetShowSelectionExtraIcon, ReturnValue) == 0x000000, "Member 'InteractionComponentBase_GetShowSelectionExtraIcon::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InteractionComponentBase.GetTagsUserShouldHave
// 0x0020 (0x0020 - 0x0000)
struct InteractionComponentBase_GetTagsUserShouldHave final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponentBase_GetTagsUserShouldHave) == 0x000008, "Wrong alignment on InteractionComponentBase_GetTagsUserShouldHave");
static_assert(sizeof(InteractionComponentBase_GetTagsUserShouldHave) == 0x000020, "Wrong size on InteractionComponentBase_GetTagsUserShouldHave");
static_assert(offsetof(InteractionComponentBase_GetTagsUserShouldHave, ReturnValue) == 0x000000, "Member 'InteractionComponentBase_GetTagsUserShouldHave::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InteractionComponentBase.GetTagsUserShouldNotHave
// 0x0020 (0x0020 - 0x0000)
struct InteractionComponentBase_GetTagsUserShouldNotHave final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponentBase_GetTagsUserShouldNotHave) == 0x000008, "Wrong alignment on InteractionComponentBase_GetTagsUserShouldNotHave");
static_assert(sizeof(InteractionComponentBase_GetTagsUserShouldNotHave) == 0x000020, "Wrong size on InteractionComponentBase_GetTagsUserShouldNotHave");
static_assert(offsetof(InteractionComponentBase_GetTagsUserShouldNotHave, ReturnValue) == 0x000000, "Member 'InteractionComponentBase_GetTagsUserShouldNotHave::ReturnValue' has a wrong offset!");

// Function ObsidianFox.CtrlButtonWidget.AddCtrlButton
// 0x0028 (0x0028 - 0x0000)
struct CtrlButtonWidget_AddCtrlButton final
{
public:
	const class UInputAction*                     InputAction;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Shown;                                             // 0x0021(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CtrlButtonWidget_AddCtrlButton) == 0x000008, "Wrong alignment on CtrlButtonWidget_AddCtrlButton");
static_assert(sizeof(CtrlButtonWidget_AddCtrlButton) == 0x000028, "Wrong size on CtrlButtonWidget_AddCtrlButton");
static_assert(offsetof(CtrlButtonWidget_AddCtrlButton, InputAction) == 0x000000, "Member 'CtrlButtonWidget_AddCtrlButton::InputAction' has a wrong offset!");
static_assert(offsetof(CtrlButtonWidget_AddCtrlButton, Description) == 0x000008, "Member 'CtrlButtonWidget_AddCtrlButton::Description' has a wrong offset!");
static_assert(offsetof(CtrlButtonWidget_AddCtrlButton, Enabled) == 0x000020, "Member 'CtrlButtonWidget_AddCtrlButton::Enabled' has a wrong offset!");
static_assert(offsetof(CtrlButtonWidget_AddCtrlButton, Shown) == 0x000021, "Member 'CtrlButtonWidget_AddCtrlButton::Shown' has a wrong offset!");

// Function ObsidianFox.CtrlButtonWidget.ChangeTextOnCtrlButton
// 0x0020 (0x0020 - 0x0000)
struct CtrlButtonWidget_ChangeTextOnCtrlButton final
{
public:
	const class UInputAction*                     InputAction;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CtrlButtonWidget_ChangeTextOnCtrlButton) == 0x000008, "Wrong alignment on CtrlButtonWidget_ChangeTextOnCtrlButton");
static_assert(sizeof(CtrlButtonWidget_ChangeTextOnCtrlButton) == 0x000020, "Wrong size on CtrlButtonWidget_ChangeTextOnCtrlButton");
static_assert(offsetof(CtrlButtonWidget_ChangeTextOnCtrlButton, InputAction) == 0x000000, "Member 'CtrlButtonWidget_ChangeTextOnCtrlButton::InputAction' has a wrong offset!");
static_assert(offsetof(CtrlButtonWidget_ChangeTextOnCtrlButton, Description) == 0x000008, "Member 'CtrlButtonWidget_ChangeTextOnCtrlButton::Description' has a wrong offset!");

// Function ObsidianFox.CtrlButtonWidget.EnableAction
// 0x0010 (0x0010 - 0x0000)
struct CtrlButtonWidget_EnableAction final
{
public:
	const class UInputAction*                     InputAction;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CtrlButtonWidget_EnableAction) == 0x000008, "Wrong alignment on CtrlButtonWidget_EnableAction");
static_assert(sizeof(CtrlButtonWidget_EnableAction) == 0x000010, "Wrong size on CtrlButtonWidget_EnableAction");
static_assert(offsetof(CtrlButtonWidget_EnableAction, InputAction) == 0x000000, "Member 'CtrlButtonWidget_EnableAction::InputAction' has a wrong offset!");
static_assert(offsetof(CtrlButtonWidget_EnableAction, bEnabled) == 0x000008, "Member 'CtrlButtonWidget_EnableAction::bEnabled' has a wrong offset!");

// Function ObsidianFox.CtrlButtonWidget.HideInputAction
// 0x0008 (0x0008 - 0x0000)
struct CtrlButtonWidget_HideInputAction final
{
public:
	const class UInputAction*                     InputAction;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CtrlButtonWidget_HideInputAction) == 0x000008, "Wrong alignment on CtrlButtonWidget_HideInputAction");
static_assert(sizeof(CtrlButtonWidget_HideInputAction) == 0x000008, "Wrong size on CtrlButtonWidget_HideInputAction");
static_assert(offsetof(CtrlButtonWidget_HideInputAction, InputAction) == 0x000000, "Member 'CtrlButtonWidget_HideInputAction::InputAction' has a wrong offset!");

// Function ObsidianFox.CtrlButtonWidget.InputTypeChangedHandler
// 0x0001 (0x0001 - 0x0000)
struct CtrlButtonWidget_InputTypeChangedHandler final
{
public:
	bool                                          IsGamepad;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CtrlButtonWidget_InputTypeChangedHandler) == 0x000001, "Wrong alignment on CtrlButtonWidget_InputTypeChangedHandler");
static_assert(sizeof(CtrlButtonWidget_InputTypeChangedHandler) == 0x000001, "Wrong size on CtrlButtonWidget_InputTypeChangedHandler");
static_assert(offsetof(CtrlButtonWidget_InputTypeChangedHandler, IsGamepad) == 0x000000, "Member 'CtrlButtonWidget_InputTypeChangedHandler::IsGamepad' has a wrong offset!");

// Function ObsidianFox.CtrlButtonWidget.ShowInputAction
// 0x0008 (0x0008 - 0x0000)
struct CtrlButtonWidget_ShowInputAction final
{
public:
	const class UInputAction*                     InputAction;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CtrlButtonWidget_ShowInputAction) == 0x000008, "Wrong alignment on CtrlButtonWidget_ShowInputAction");
static_assert(sizeof(CtrlButtonWidget_ShowInputAction) == 0x000008, "Wrong size on CtrlButtonWidget_ShowInputAction");
static_assert(offsetof(CtrlButtonWidget_ShowInputAction, InputAction) == 0x000000, "Member 'CtrlButtonWidget_ShowInputAction::InputAction' has a wrong offset!");

// Function ObsidianFox.IncreaseDecreaseOption.CalculateNewValue
// 0x000C (0x000C - 0x0000)
struct IncreaseDecreaseOption_CalculateNewValue final
{
public:
	float                                         CurrentValue;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdding;                                           // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IncreaseDecreaseOption_CalculateNewValue) == 0x000004, "Wrong alignment on IncreaseDecreaseOption_CalculateNewValue");
static_assert(sizeof(IncreaseDecreaseOption_CalculateNewValue) == 0x00000C, "Wrong size on IncreaseDecreaseOption_CalculateNewValue");
static_assert(offsetof(IncreaseDecreaseOption_CalculateNewValue, CurrentValue) == 0x000000, "Member 'IncreaseDecreaseOption_CalculateNewValue::CurrentValue' has a wrong offset!");
static_assert(offsetof(IncreaseDecreaseOption_CalculateNewValue, bAdding) == 0x000004, "Member 'IncreaseDecreaseOption_CalculateNewValue::bAdding' has a wrong offset!");
static_assert(offsetof(IncreaseDecreaseOption_CalculateNewValue, ReturnValue) == 0x000008, "Member 'IncreaseDecreaseOption_CalculateNewValue::ReturnValue' has a wrong offset!");

// Function ObsidianFox.IncreaseDecreaseOption.SetButtonText
// 0x0004 (0x0004 - 0x0000)
struct IncreaseDecreaseOption_SetButtonText final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IncreaseDecreaseOption_SetButtonText) == 0x000004, "Wrong alignment on IncreaseDecreaseOption_SetButtonText");
static_assert(sizeof(IncreaseDecreaseOption_SetButtonText) == 0x000004, "Wrong size on IncreaseDecreaseOption_SetButtonText");
static_assert(offsetof(IncreaseDecreaseOption_SetButtonText, NewValue) == 0x000000, "Member 'IncreaseDecreaseOption_SetButtonText::NewValue' has a wrong offset!");

// Function ObsidianFox.IncreaseDecreaseCustomTextOption.GetTextfromValue
// 0x0020 (0x0020 - 0x0000)
struct IncreaseDecreaseCustomTextOption_GetTextfromValue final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(IncreaseDecreaseCustomTextOption_GetTextfromValue) == 0x000008, "Wrong alignment on IncreaseDecreaseCustomTextOption_GetTextfromValue");
static_assert(sizeof(IncreaseDecreaseCustomTextOption_GetTextfromValue) == 0x000020, "Wrong size on IncreaseDecreaseCustomTextOption_GetTextfromValue");
static_assert(offsetof(IncreaseDecreaseCustomTextOption_GetTextfromValue, NewValue) == 0x000000, "Member 'IncreaseDecreaseCustomTextOption_GetTextfromValue::NewValue' has a wrong offset!");
static_assert(offsetof(IncreaseDecreaseCustomTextOption_GetTextfromValue, ReturnValue) == 0x000008, "Member 'IncreaseDecreaseCustomTextOption_GetTextfromValue::ReturnValue' has a wrong offset!");

// Function ObsidianFox.DamagePoint.CheckIfHit
// 0x001C (0x001C - 0x0000)
struct DamagePoint_CheckIfHit final
{
public:
	struct FVector                                LineOrigin;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineDirection;                                     // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DamagePoint_CheckIfHit) == 0x000004, "Wrong alignment on DamagePoint_CheckIfHit");
static_assert(sizeof(DamagePoint_CheckIfHit) == 0x00001C, "Wrong size on DamagePoint_CheckIfHit");
static_assert(offsetof(DamagePoint_CheckIfHit, LineOrigin) == 0x000000, "Member 'DamagePoint_CheckIfHit::LineOrigin' has a wrong offset!");
static_assert(offsetof(DamagePoint_CheckIfHit, LineDirection) == 0x00000C, "Member 'DamagePoint_CheckIfHit::LineDirection' has a wrong offset!");
static_assert(offsetof(DamagePoint_CheckIfHit, ReturnValue) == 0x000018, "Member 'DamagePoint_CheckIfHit::ReturnValue' has a wrong offset!");

// Function ObsidianFox.DamagePoint.OnHit
// 0x0028 (0x0028 - 0x0000)
struct DamagePoint_OnHit final
{
public:
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         WeakPointsDamage;                                  // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DamagePoint_OnHit) == 0x000008, "Wrong alignment on DamagePoint_OnHit");
static_assert(sizeof(DamagePoint_OnHit) == 0x000028, "Wrong size on DamagePoint_OnHit");
static_assert(offsetof(DamagePoint_OnHit, DamageTags) == 0x000000, "Member 'DamagePoint_OnHit::DamageTags' has a wrong offset!");
static_assert(offsetof(DamagePoint_OnHit, WeakPointsDamage) == 0x000020, "Member 'DamagePoint_OnHit::WeakPointsDamage' has a wrong offset!");
static_assert(offsetof(DamagePoint_OnHit, ReturnValue) == 0x000024, "Member 'DamagePoint_OnHit::ReturnValue' has a wrong offset!");

// Function ObsidianFox.DamagePoint.SetCanBeHit
// 0x0001 (0x0001 - 0x0000)
struct DamagePoint_SetCanBeHit final
{
public:
	bool                                          InCanBeHit;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamagePoint_SetCanBeHit) == 0x000001, "Wrong alignment on DamagePoint_SetCanBeHit");
static_assert(sizeof(DamagePoint_SetCanBeHit) == 0x000001, "Wrong size on DamagePoint_SetCanBeHit");
static_assert(offsetof(DamagePoint_SetCanBeHit, InCanBeHit) == 0x000000, "Member 'DamagePoint_SetCanBeHit::InCanBeHit' has a wrong offset!");

// Function ObsidianFox.DamagePoint.CanBeHit
// 0x0001 (0x0001 - 0x0000)
struct DamagePoint_CanBeHit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamagePoint_CanBeHit) == 0x000001, "Wrong alignment on DamagePoint_CanBeHit");
static_assert(sizeof(DamagePoint_CanBeHit) == 0x000001, "Wrong size on DamagePoint_CanBeHit");
static_assert(offsetof(DamagePoint_CanBeHit, ReturnValue) == 0x000000, "Member 'DamagePoint_CanBeHit::ReturnValue' has a wrong offset!");

// Function ObsidianFox.DamagePoint.GetDamagePointName
// 0x0008 (0x0008 - 0x0000)
struct DamagePoint_GetDamagePointName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamagePoint_GetDamagePointName) == 0x000004, "Wrong alignment on DamagePoint_GetDamagePointName");
static_assert(sizeof(DamagePoint_GetDamagePointName) == 0x000008, "Wrong size on DamagePoint_GetDamagePointName");
static_assert(offsetof(DamagePoint_GetDamagePointName, ReturnValue) == 0x000000, "Member 'DamagePoint_GetDamagePointName::ReturnValue' has a wrong offset!");

// Function ObsidianFox.DamagePoint.GetGamePlayEffectsWhenDestroyed
// 0x0010 (0x0010 - 0x0000)
struct DamagePoint_GetGamePlayEffectsWhenDestroyed final
{
public:
	TArray<TSubclassOf<class UGameplayEffect>>    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamagePoint_GetGamePlayEffectsWhenDestroyed) == 0x000008, "Wrong alignment on DamagePoint_GetGamePlayEffectsWhenDestroyed");
static_assert(sizeof(DamagePoint_GetGamePlayEffectsWhenDestroyed) == 0x000010, "Wrong size on DamagePoint_GetGamePlayEffectsWhenDestroyed");
static_assert(offsetof(DamagePoint_GetGamePlayEffectsWhenDestroyed, ReturnValue) == 0x000000, "Member 'DamagePoint_GetGamePlayEffectsWhenDestroyed::ReturnValue' has a wrong offset!");

// Function ObsidianFox.DamagePoint.GetGameplayTags
// 0x0020 (0x0020 - 0x0000)
struct DamagePoint_GetGameplayTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamagePoint_GetGameplayTags) == 0x000008, "Wrong alignment on DamagePoint_GetGameplayTags");
static_assert(sizeof(DamagePoint_GetGameplayTags) == 0x000020, "Wrong size on DamagePoint_GetGameplayTags");
static_assert(offsetof(DamagePoint_GetGameplayTags, ReturnValue) == 0x000000, "Member 'DamagePoint_GetGameplayTags::ReturnValue' has a wrong offset!");

// Function ObsidianFox.DamagePoint.GetOrderSequenceNumber
// 0x0004 (0x0004 - 0x0000)
struct DamagePoint_GetOrderSequenceNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamagePoint_GetOrderSequenceNumber) == 0x000004, "Wrong alignment on DamagePoint_GetOrderSequenceNumber");
static_assert(sizeof(DamagePoint_GetOrderSequenceNumber) == 0x000004, "Wrong size on DamagePoint_GetOrderSequenceNumber");
static_assert(offsetof(DamagePoint_GetOrderSequenceNumber, ReturnValue) == 0x000000, "Member 'DamagePoint_GetOrderSequenceNumber::ReturnValue' has a wrong offset!");

// Function ObsidianFox.DamagePoint.IsDamagePointDestroyed
// 0x0001 (0x0001 - 0x0000)
struct DamagePoint_IsDamagePointDestroyed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamagePoint_IsDamagePointDestroyed) == 0x000001, "Wrong alignment on DamagePoint_IsDamagePointDestroyed");
static_assert(sizeof(DamagePoint_IsDamagePointDestroyed) == 0x000001, "Wrong size on DamagePoint_IsDamagePointDestroyed");
static_assert(offsetof(DamagePoint_IsDamagePointDestroyed, ReturnValue) == 0x000000, "Member 'DamagePoint_IsDamagePointDestroyed::ReturnValue' has a wrong offset!");

// Function ObsidianFox.DamagePointHighlight.OnParentActivation
// 0x0010 (0x0010 - 0x0000)
struct DamagePointHighlight_OnParentActivation final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReset;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DamagePointHighlight_OnParentActivation) == 0x000008, "Wrong alignment on DamagePointHighlight_OnParentActivation");
static_assert(sizeof(DamagePointHighlight_OnParentActivation) == 0x000010, "Wrong size on DamagePointHighlight_OnParentActivation");
static_assert(offsetof(DamagePointHighlight_OnParentActivation, Component) == 0x000000, "Member 'DamagePointHighlight_OnParentActivation::Component' has a wrong offset!");
static_assert(offsetof(DamagePointHighlight_OnParentActivation, bReset) == 0x000008, "Member 'DamagePointHighlight_OnParentActivation::bReset' has a wrong offset!");

// Function ObsidianFox.DamagePointHighlight.OnParentDeactivation
// 0x0008 (0x0008 - 0x0000)
struct DamagePointHighlight_OnParentDeactivation final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamagePointHighlight_OnParentDeactivation) == 0x000008, "Wrong alignment on DamagePointHighlight_OnParentDeactivation");
static_assert(sizeof(DamagePointHighlight_OnParentDeactivation) == 0x000008, "Wrong size on DamagePointHighlight_OnParentDeactivation");
static_assert(offsetof(DamagePointHighlight_OnParentDeactivation, Component) == 0x000000, "Member 'DamagePointHighlight_OnParentDeactivation::Component' has a wrong offset!");

// DelegateFunction ObsidianFox.DamagePointSequence.DamagePointInSequenceDestroyed__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct DamagePointSequence_DamagePointInSequenceDestroyed__DelegateSignature final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSequenceComplete;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DamagePointSequence_DamagePointInSequenceDestroyed__DelegateSignature) == 0x000004, "Wrong alignment on DamagePointSequence_DamagePointInSequenceDestroyed__DelegateSignature");
static_assert(sizeof(DamagePointSequence_DamagePointInSequenceDestroyed__DelegateSignature) == 0x00000C, "Wrong size on DamagePointSequence_DamagePointInSequenceDestroyed__DelegateSignature");
static_assert(offsetof(DamagePointSequence_DamagePointInSequenceDestroyed__DelegateSignature, Name_0) == 0x000000, "Member 'DamagePointSequence_DamagePointInSequenceDestroyed__DelegateSignature::Name_0' has a wrong offset!");
static_assert(offsetof(DamagePointSequence_DamagePointInSequenceDestroyed__DelegateSignature, bSequenceComplete) == 0x000008, "Member 'DamagePointSequence_DamagePointInSequenceDestroyed__DelegateSignature::bSequenceComplete' has a wrong offset!");

// Function ObsidianFox.DamagePointSequence.GetActiveDamagePointLine
// 0x0020 (0x0020 - 0x0000)
struct DamagePointSequence_GetActiveDamagePointLine final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDamagePoint*                           ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamagePointSequence_GetActiveDamagePointLine) == 0x000008, "Wrong alignment on DamagePointSequence_GetActiveDamagePointLine");
static_assert(sizeof(DamagePointSequence_GetActiveDamagePointLine) == 0x000020, "Wrong size on DamagePointSequence_GetActiveDamagePointLine");
static_assert(offsetof(DamagePointSequence_GetActiveDamagePointLine, Start) == 0x000000, "Member 'DamagePointSequence_GetActiveDamagePointLine::Start' has a wrong offset!");
static_assert(offsetof(DamagePointSequence_GetActiveDamagePointLine, End) == 0x00000C, "Member 'DamagePointSequence_GetActiveDamagePointLine::End' has a wrong offset!");
static_assert(offsetof(DamagePointSequence_GetActiveDamagePointLine, ReturnValue) == 0x000018, "Member 'DamagePointSequence_GetActiveDamagePointLine::ReturnValue' has a wrong offset!");

// Function ObsidianFox.DamagePointSequence.OnDamagePointTakeDamage
// 0x0030 (0x0030 - 0x0000)
struct DamagePointSequence_OnDamagePointTakeDamage final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmountOfDamage;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGotDestroyed;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamagePointSequence_OnDamagePointTakeDamage) == 0x000008, "Wrong alignment on DamagePointSequence_OnDamagePointTakeDamage");
static_assert(sizeof(DamagePointSequence_OnDamagePointTakeDamage) == 0x000030, "Wrong size on DamagePointSequence_OnDamagePointTakeDamage");
static_assert(offsetof(DamagePointSequence_OnDamagePointTakeDamage, Name_0) == 0x000000, "Member 'DamagePointSequence_OnDamagePointTakeDamage::Name_0' has a wrong offset!");
static_assert(offsetof(DamagePointSequence_OnDamagePointTakeDamage, AmountOfDamage) == 0x000008, "Member 'DamagePointSequence_OnDamagePointTakeDamage::AmountOfDamage' has a wrong offset!");
static_assert(offsetof(DamagePointSequence_OnDamagePointTakeDamage, bGotDestroyed) == 0x00000C, "Member 'DamagePointSequence_OnDamagePointTakeDamage::bGotDestroyed' has a wrong offset!");
static_assert(offsetof(DamagePointSequence_OnDamagePointTakeDamage, DamageTags) == 0x000010, "Member 'DamagePointSequence_OnDamagePointTakeDamage::DamageTags' has a wrong offset!");

// Function ObsidianFox.DamagePointSequence.GetActiveDamagePoint
// 0x0008 (0x0008 - 0x0000)
struct DamagePointSequence_GetActiveDamagePoint final
{
public:
	class UDamagePoint*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DamagePointSequence_GetActiveDamagePoint) == 0x000008, "Wrong alignment on DamagePointSequence_GetActiveDamagePoint");
static_assert(sizeof(DamagePointSequence_GetActiveDamagePoint) == 0x000008, "Wrong size on DamagePointSequence_GetActiveDamagePoint");
static_assert(offsetof(DamagePointSequence_GetActiveDamagePoint, ReturnValue) == 0x000000, "Member 'DamagePointSequence_GetActiveDamagePoint::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InGameUIWidget_QuickSlotWidget.OnAmmoChanged
// 0x0008 (0x0008 - 0x0000)
struct InGameUIWidget_QuickSlotWidget_OnAmmoChanged final
{
public:
	int32                                         CurrentAmmo;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAmmo;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameUIWidget_QuickSlotWidget_OnAmmoChanged) == 0x000004, "Wrong alignment on InGameUIWidget_QuickSlotWidget_OnAmmoChanged");
static_assert(sizeof(InGameUIWidget_QuickSlotWidget_OnAmmoChanged) == 0x000008, "Wrong size on InGameUIWidget_QuickSlotWidget_OnAmmoChanged");
static_assert(offsetof(InGameUIWidget_QuickSlotWidget_OnAmmoChanged, CurrentAmmo) == 0x000000, "Member 'InGameUIWidget_QuickSlotWidget_OnAmmoChanged::CurrentAmmo' has a wrong offset!");
static_assert(offsetof(InGameUIWidget_QuickSlotWidget_OnAmmoChanged, MaxAmmo) == 0x000004, "Member 'InGameUIWidget_QuickSlotWidget_OnAmmoChanged::MaxAmmo' has a wrong offset!");

// Function ObsidianFox.InGameUIWidget_QuickSlotWidget.OnAmmoUpdated
// 0x0018 (0x0018 - 0x0000)
struct InGameUIWidget_QuickSlotWidget_OnAmmoUpdated final
{
public:
	class UPanelWidget*                           PanelWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             AmmoText;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmmoCount;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InGameUIWidget_QuickSlotWidget_OnAmmoUpdated) == 0x000008, "Wrong alignment on InGameUIWidget_QuickSlotWidget_OnAmmoUpdated");
static_assert(sizeof(InGameUIWidget_QuickSlotWidget_OnAmmoUpdated) == 0x000018, "Wrong size on InGameUIWidget_QuickSlotWidget_OnAmmoUpdated");
static_assert(offsetof(InGameUIWidget_QuickSlotWidget_OnAmmoUpdated, PanelWidget) == 0x000000, "Member 'InGameUIWidget_QuickSlotWidget_OnAmmoUpdated::PanelWidget' has a wrong offset!");
static_assert(offsetof(InGameUIWidget_QuickSlotWidget_OnAmmoUpdated, AmmoText) == 0x000008, "Member 'InGameUIWidget_QuickSlotWidget_OnAmmoUpdated::AmmoText' has a wrong offset!");
static_assert(offsetof(InGameUIWidget_QuickSlotWidget_OnAmmoUpdated, AmmoCount) == 0x000010, "Member 'InGameUIWidget_QuickSlotWidget_OnAmmoUpdated::AmmoCount' has a wrong offset!");

// Function ObsidianFox.InGameUIWidget_QuickSlotWidget.OnEquipmentChanged
// 0x0020 (0x0020 - 0x0000)
struct InGameUIWidget_QuickSlotWidget_OnEquipmentChanged final
{
public:
	struct FWeaponInfo                            EquippedWeapon;                                    // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponInfo                            UnequippedWeapon;                                  // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameUIWidget_QuickSlotWidget_OnEquipmentChanged) == 0x000008, "Wrong alignment on InGameUIWidget_QuickSlotWidget_OnEquipmentChanged");
static_assert(sizeof(InGameUIWidget_QuickSlotWidget_OnEquipmentChanged) == 0x000020, "Wrong size on InGameUIWidget_QuickSlotWidget_OnEquipmentChanged");
static_assert(offsetof(InGameUIWidget_QuickSlotWidget_OnEquipmentChanged, EquippedWeapon) == 0x000000, "Member 'InGameUIWidget_QuickSlotWidget_OnEquipmentChanged::EquippedWeapon' has a wrong offset!");
static_assert(offsetof(InGameUIWidget_QuickSlotWidget_OnEquipmentChanged, UnequippedWeapon) == 0x000010, "Member 'InGameUIWidget_QuickSlotWidget_OnEquipmentChanged::UnequippedWeapon' has a wrong offset!");

// Function ObsidianFox.InGameUIWidget_QuickSlotWidget.OnPistolSlotChanged
// 0x0010 (0x0010 - 0x0000)
struct InGameUIWidget_QuickSlotWidget_OnPistolSlotChanged final
{
public:
	class UItemData_Equippable*                   NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemData_Equippable*                   OldWeapon;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameUIWidget_QuickSlotWidget_OnPistolSlotChanged) == 0x000008, "Wrong alignment on InGameUIWidget_QuickSlotWidget_OnPistolSlotChanged");
static_assert(sizeof(InGameUIWidget_QuickSlotWidget_OnPistolSlotChanged) == 0x000010, "Wrong size on InGameUIWidget_QuickSlotWidget_OnPistolSlotChanged");
static_assert(offsetof(InGameUIWidget_QuickSlotWidget_OnPistolSlotChanged, NewWeapon) == 0x000000, "Member 'InGameUIWidget_QuickSlotWidget_OnPistolSlotChanged::NewWeapon' has a wrong offset!");
static_assert(offsetof(InGameUIWidget_QuickSlotWidget_OnPistolSlotChanged, OldWeapon) == 0x000008, "Member 'InGameUIWidget_QuickSlotWidget_OnPistolSlotChanged::OldWeapon' has a wrong offset!");

// Function ObsidianFox.InGameUIWidget_QuickSlotWidget.OnPlayerEquipmentUpdated
// 0x0020 (0x0020 - 0x0000)
struct InGameUIWidget_QuickSlotWidget_OnPlayerEquipmentUpdated final
{
public:
	struct FWeaponInfo                            EquippedWeapon;                                    // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponInfo                            UnequippedWeapon;                                  // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameUIWidget_QuickSlotWidget_OnPlayerEquipmentUpdated) == 0x000008, "Wrong alignment on InGameUIWidget_QuickSlotWidget_OnPlayerEquipmentUpdated");
static_assert(sizeof(InGameUIWidget_QuickSlotWidget_OnPlayerEquipmentUpdated) == 0x000020, "Wrong size on InGameUIWidget_QuickSlotWidget_OnPlayerEquipmentUpdated");
static_assert(offsetof(InGameUIWidget_QuickSlotWidget_OnPlayerEquipmentUpdated, EquippedWeapon) == 0x000000, "Member 'InGameUIWidget_QuickSlotWidget_OnPlayerEquipmentUpdated::EquippedWeapon' has a wrong offset!");
static_assert(offsetof(InGameUIWidget_QuickSlotWidget_OnPlayerEquipmentUpdated, UnequippedWeapon) == 0x000010, "Member 'InGameUIWidget_QuickSlotWidget_OnPlayerEquipmentUpdated::UnequippedWeapon' has a wrong offset!");

// Function ObsidianFox.InGameUIWidget_QuickSlotWidget.OnPlayerLootItem
// 0x0008 (0x0008 - 0x0000)
struct InGameUIWidget_QuickSlotWidget_OnPlayerLootItem final
{
public:
	const class UItemData*                        ItemData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameUIWidget_QuickSlotWidget_OnPlayerLootItem) == 0x000008, "Wrong alignment on InGameUIWidget_QuickSlotWidget_OnPlayerLootItem");
static_assert(sizeof(InGameUIWidget_QuickSlotWidget_OnPlayerLootItem) == 0x000008, "Wrong size on InGameUIWidget_QuickSlotWidget_OnPlayerLootItem");
static_assert(offsetof(InGameUIWidget_QuickSlotWidget_OnPlayerLootItem, ItemData) == 0x000000, "Member 'InGameUIWidget_QuickSlotWidget_OnPlayerLootItem::ItemData' has a wrong offset!");

// Function ObsidianFox.InGameUIWidget_QuickSlotWidget.OnPlayerLootItemUpdated
// 0x0008 (0x0008 - 0x0000)
struct InGameUIWidget_QuickSlotWidget_OnPlayerLootItemUpdated final
{
public:
	const class UItemData*                        ItemData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameUIWidget_QuickSlotWidget_OnPlayerLootItemUpdated) == 0x000008, "Wrong alignment on InGameUIWidget_QuickSlotWidget_OnPlayerLootItemUpdated");
static_assert(sizeof(InGameUIWidget_QuickSlotWidget_OnPlayerLootItemUpdated) == 0x000008, "Wrong size on InGameUIWidget_QuickSlotWidget_OnPlayerLootItemUpdated");
static_assert(offsetof(InGameUIWidget_QuickSlotWidget_OnPlayerLootItemUpdated, ItemData) == 0x000000, "Member 'InGameUIWidget_QuickSlotWidget_OnPlayerLootItemUpdated::ItemData' has a wrong offset!");

// Function ObsidianFox.InGameUIWidget_QuickSlotWidget.OnShowItemIncrement
// 0x00E0 (0x00E0 - 0x0000)
struct InGameUIWidget_QuickSlotWidget_OnShowItemIncrement final
{
public:
	const class UItemData*                        ItemData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemDisplayInfo                       ItemInfo;                                          // 0x0008(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x00D8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InGameUIWidget_QuickSlotWidget_OnShowItemIncrement) == 0x000008, "Wrong alignment on InGameUIWidget_QuickSlotWidget_OnShowItemIncrement");
static_assert(sizeof(InGameUIWidget_QuickSlotWidget_OnShowItemIncrement) == 0x0000E0, "Wrong size on InGameUIWidget_QuickSlotWidget_OnShowItemIncrement");
static_assert(offsetof(InGameUIWidget_QuickSlotWidget_OnShowItemIncrement, ItemData) == 0x000000, "Member 'InGameUIWidget_QuickSlotWidget_OnShowItemIncrement::ItemData' has a wrong offset!");
static_assert(offsetof(InGameUIWidget_QuickSlotWidget_OnShowItemIncrement, ItemInfo) == 0x000008, "Member 'InGameUIWidget_QuickSlotWidget_OnShowItemIncrement::ItemInfo' has a wrong offset!");
static_assert(offsetof(InGameUIWidget_QuickSlotWidget_OnShowItemIncrement, Amount) == 0x0000D8, "Member 'InGameUIWidget_QuickSlotWidget_OnShowItemIncrement::Amount' has a wrong offset!");

// Function ObsidianFox.InGameUIWidget_QuickSlotWidget.TryingToPickUpMaxStackItemHandler
// 0x0008 (0x0008 - 0x0000)
struct InGameUIWidget_QuickSlotWidget_TryingToPickUpMaxStackItemHandler final
{
public:
	const class UItemData*                        ItemData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameUIWidget_QuickSlotWidget_TryingToPickUpMaxStackItemHandler) == 0x000008, "Wrong alignment on InGameUIWidget_QuickSlotWidget_TryingToPickUpMaxStackItemHandler");
static_assert(sizeof(InGameUIWidget_QuickSlotWidget_TryingToPickUpMaxStackItemHandler) == 0x000008, "Wrong size on InGameUIWidget_QuickSlotWidget_TryingToPickUpMaxStackItemHandler");
static_assert(offsetof(InGameUIWidget_QuickSlotWidget_TryingToPickUpMaxStackItemHandler, ItemData) == 0x000000, "Member 'InGameUIWidget_QuickSlotWidget_TryingToPickUpMaxStackItemHandler::ItemData' has a wrong offset!");

// Function ObsidianFox.HumanoidAnimInstance.ArmIKEnd
// 0x0001 (0x0001 - 0x0000)
struct HumanoidAnimInstance_ArmIKEnd final
{
public:
	bool                                          IsRightSide;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanoidAnimInstance_ArmIKEnd) == 0x000001, "Wrong alignment on HumanoidAnimInstance_ArmIKEnd");
static_assert(sizeof(HumanoidAnimInstance_ArmIKEnd) == 0x000001, "Wrong size on HumanoidAnimInstance_ArmIKEnd");
static_assert(offsetof(HumanoidAnimInstance_ArmIKEnd, IsRightSide) == 0x000000, "Member 'HumanoidAnimInstance_ArmIKEnd::IsRightSide' has a wrong offset!");

// Function ObsidianFox.HumanoidAnimInstance.ArmIKStart
// 0x0014 (0x0014 - 0x0000)
struct HumanoidAnimInstance_ArmIKStart final
{
public:
	bool                                          IsRightSide;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   IKTargetCompensationBoneName;                      // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WeightCurveName;                                   // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanoidAnimInstance_ArmIKStart) == 0x000004, "Wrong alignment on HumanoidAnimInstance_ArmIKStart");
static_assert(sizeof(HumanoidAnimInstance_ArmIKStart) == 0x000014, "Wrong size on HumanoidAnimInstance_ArmIKStart");
static_assert(offsetof(HumanoidAnimInstance_ArmIKStart, IsRightSide) == 0x000000, "Member 'HumanoidAnimInstance_ArmIKStart::IsRightSide' has a wrong offset!");
static_assert(offsetof(HumanoidAnimInstance_ArmIKStart, IKTargetCompensationBoneName) == 0x000004, "Member 'HumanoidAnimInstance_ArmIKStart::IKTargetCompensationBoneName' has a wrong offset!");
static_assert(offsetof(HumanoidAnimInstance_ArmIKStart, WeightCurveName) == 0x00000C, "Member 'HumanoidAnimInstance_ArmIKStart::WeightCurveName' has a wrong offset!");

// Function ObsidianFox.HumanoidAnimInstance.DebugWantedLookAt
// 0x0028 (0x0028 - 0x0000)
struct HumanoidAnimInstance_DebugWantedLookAt final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LookAtLocation;                                    // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CurrentForward;                                    // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lifetime;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanoidAnimInstance_DebugWantedLookAt) == 0x000004, "Wrong alignment on HumanoidAnimInstance_DebugWantedLookAt");
static_assert(sizeof(HumanoidAnimInstance_DebugWantedLookAt) == 0x000028, "Wrong size on HumanoidAnimInstance_DebugWantedLookAt");
static_assert(offsetof(HumanoidAnimInstance_DebugWantedLookAt, Origin) == 0x000000, "Member 'HumanoidAnimInstance_DebugWantedLookAt::Origin' has a wrong offset!");
static_assert(offsetof(HumanoidAnimInstance_DebugWantedLookAt, LookAtLocation) == 0x00000C, "Member 'HumanoidAnimInstance_DebugWantedLookAt::LookAtLocation' has a wrong offset!");
static_assert(offsetof(HumanoidAnimInstance_DebugWantedLookAt, CurrentForward) == 0x000018, "Member 'HumanoidAnimInstance_DebugWantedLookAt::CurrentForward' has a wrong offset!");
static_assert(offsetof(HumanoidAnimInstance_DebugWantedLookAt, Lifetime) == 0x000024, "Member 'HumanoidAnimInstance_DebugWantedLookAt::Lifetime' has a wrong offset!");

// DelegateFunction ObsidianFox.HumanoidAnimInstance.FootStepDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct HumanoidAnimInstance_FootStepDelegate__DelegateSignature final
{
public:
	bool                                          bRunning;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanoidAnimInstance_FootStepDelegate__DelegateSignature) == 0x000001, "Wrong alignment on HumanoidAnimInstance_FootStepDelegate__DelegateSignature");
static_assert(sizeof(HumanoidAnimInstance_FootStepDelegate__DelegateSignature) == 0x000001, "Wrong size on HumanoidAnimInstance_FootStepDelegate__DelegateSignature");
static_assert(offsetof(HumanoidAnimInstance_FootStepDelegate__DelegateSignature, bRunning) == 0x000000, "Member 'HumanoidAnimInstance_FootStepDelegate__DelegateSignature::bRunning' has a wrong offset!");

// Function ObsidianFox.HumanoidAnimInstance.GetBodyFocusMode
// 0x0001 (0x0001 - 0x0000)
struct HumanoidAnimInstance_GetBodyFocusMode final
{
public:
	EBodyFocusMode                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanoidAnimInstance_GetBodyFocusMode) == 0x000001, "Wrong alignment on HumanoidAnimInstance_GetBodyFocusMode");
static_assert(sizeof(HumanoidAnimInstance_GetBodyFocusMode) == 0x000001, "Wrong size on HumanoidAnimInstance_GetBodyFocusMode");
static_assert(offsetof(HumanoidAnimInstance_GetBodyFocusMode, ReturnValue) == 0x000000, "Member 'HumanoidAnimInstance_GetBodyFocusMode::ReturnValue' has a wrong offset!");

// Function ObsidianFox.HumanoidAnimInstance.OnBodyFocusMultiBoolValueChanged
// 0x0001 (0x0001 - 0x0000)
struct HumanoidAnimInstance_OnBodyFocusMultiBoolValueChanged final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanoidAnimInstance_OnBodyFocusMultiBoolValueChanged) == 0x000001, "Wrong alignment on HumanoidAnimInstance_OnBodyFocusMultiBoolValueChanged");
static_assert(sizeof(HumanoidAnimInstance_OnBodyFocusMultiBoolValueChanged) == 0x000001, "Wrong size on HumanoidAnimInstance_OnBodyFocusMultiBoolValueChanged");
static_assert(offsetof(HumanoidAnimInstance_OnBodyFocusMultiBoolValueChanged, bNewValue) == 0x000000, "Member 'HumanoidAnimInstance_OnBodyFocusMultiBoolValueChanged::bNewValue' has a wrong offset!");

// Function ObsidianFox.HumanoidAnimInstance.RailingIKBlocked
// 0x000C (0x000C - 0x0000)
struct HumanoidAnimInstance_RailingIKBlocked final
{
public:
	class FName                                   IKBoneName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutIsBlocked;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutIsInstantBlock;                                // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanoidAnimInstance_RailingIKBlocked) == 0x000004, "Wrong alignment on HumanoidAnimInstance_RailingIKBlocked");
static_assert(sizeof(HumanoidAnimInstance_RailingIKBlocked) == 0x00000C, "Wrong size on HumanoidAnimInstance_RailingIKBlocked");
static_assert(offsetof(HumanoidAnimInstance_RailingIKBlocked, IKBoneName) == 0x000000, "Member 'HumanoidAnimInstance_RailingIKBlocked::IKBoneName' has a wrong offset!");
static_assert(offsetof(HumanoidAnimInstance_RailingIKBlocked, bOutIsBlocked) == 0x000008, "Member 'HumanoidAnimInstance_RailingIKBlocked::bOutIsBlocked' has a wrong offset!");
static_assert(offsetof(HumanoidAnimInstance_RailingIKBlocked, bOutIsInstantBlock) == 0x000009, "Member 'HumanoidAnimInstance_RailingIKBlocked::bOutIsInstantBlock' has a wrong offset!");

// Function ObsidianFox.HumanoidAnimInstance.ResetArmIKData
// 0x0084 (0x0084 - 0x0000)
struct HumanoidAnimInstance_ResetArmIKData final
{
public:
	struct FArmIKData                             ArmIKData;                                         // 0x0000(0x0084)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanoidAnimInstance_ResetArmIKData) == 0x000004, "Wrong alignment on HumanoidAnimInstance_ResetArmIKData");
static_assert(sizeof(HumanoidAnimInstance_ResetArmIKData) == 0x000084, "Wrong size on HumanoidAnimInstance_ResetArmIKData");
static_assert(offsetof(HumanoidAnimInstance_ResetArmIKData, ArmIKData) == 0x000000, "Member 'HumanoidAnimInstance_ResetArmIKData::ArmIKData' has a wrong offset!");

// Function ObsidianFox.HumanoidAnimInstance.SetManualHipOffsetInterpolationSpeed
// 0x0004 (0x0004 - 0x0000)
struct HumanoidAnimInstance_SetManualHipOffsetInterpolationSpeed final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanoidAnimInstance_SetManualHipOffsetInterpolationSpeed) == 0x000004, "Wrong alignment on HumanoidAnimInstance_SetManualHipOffsetInterpolationSpeed");
static_assert(sizeof(HumanoidAnimInstance_SetManualHipOffsetInterpolationSpeed) == 0x000004, "Wrong size on HumanoidAnimInstance_SetManualHipOffsetInterpolationSpeed");
static_assert(offsetof(HumanoidAnimInstance_SetManualHipOffsetInterpolationSpeed, Value) == 0x000000, "Member 'HumanoidAnimInstance_SetManualHipOffsetInterpolationSpeed::Value' has a wrong offset!");

// Function ObsidianFox.HumanoidAnimInstance.UpdateArmIK
// 0x0004 (0x0004 - 0x0000)
struct HumanoidAnimInstance_UpdateArmIK final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanoidAnimInstance_UpdateArmIK) == 0x000004, "Wrong alignment on HumanoidAnimInstance_UpdateArmIK");
static_assert(sizeof(HumanoidAnimInstance_UpdateArmIK) == 0x000004, "Wrong size on HumanoidAnimInstance_UpdateArmIK");
static_assert(offsetof(HumanoidAnimInstance_UpdateArmIK, DeltaTimeX) == 0x000000, "Member 'HumanoidAnimInstance_UpdateArmIK::DeltaTimeX' has a wrong offset!");

// Function ObsidianFox.HumanoidAnimInstance.UpdateArmIKState
// 0x0084 (0x0084 - 0x0000)
struct HumanoidAnimInstance_UpdateArmIKState final
{
public:
	struct FArmIKData                             ArmIKData;                                         // 0x0000(0x0084)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanoidAnimInstance_UpdateArmIKState) == 0x000004, "Wrong alignment on HumanoidAnimInstance_UpdateArmIKState");
static_assert(sizeof(HumanoidAnimInstance_UpdateArmIKState) == 0x000084, "Wrong size on HumanoidAnimInstance_UpdateArmIKState");
static_assert(offsetof(HumanoidAnimInstance_UpdateArmIKState, ArmIKData) == 0x000000, "Member 'HumanoidAnimInstance_UpdateArmIKState::ArmIKData' has a wrong offset!");

// Function ObsidianFox.HumanoidAnimInstance.UpdateHandIKRotation
// 0x0088 (0x0088 - 0x0000)
struct HumanoidAnimInstance_UpdateHandIKRotation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FArmIKData                             ArmIKData;                                         // 0x0004(0x0084)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanoidAnimInstance_UpdateHandIKRotation) == 0x000004, "Wrong alignment on HumanoidAnimInstance_UpdateHandIKRotation");
static_assert(sizeof(HumanoidAnimInstance_UpdateHandIKRotation) == 0x000088, "Wrong size on HumanoidAnimInstance_UpdateHandIKRotation");
static_assert(offsetof(HumanoidAnimInstance_UpdateHandIKRotation, DeltaTimeX) == 0x000000, "Member 'HumanoidAnimInstance_UpdateHandIKRotation::DeltaTimeX' has a wrong offset!");
static_assert(offsetof(HumanoidAnimInstance_UpdateHandIKRotation, ArmIKData) == 0x000004, "Member 'HumanoidAnimInstance_UpdateHandIKRotation::ArmIKData' has a wrong offset!");

// Function ObsidianFox.HumanoidAnimInstance.UpdateHipsIK
// 0x0004 (0x0004 - 0x0000)
struct HumanoidAnimInstance_UpdateHipsIK final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanoidAnimInstance_UpdateHipsIK) == 0x000004, "Wrong alignment on HumanoidAnimInstance_UpdateHipsIK");
static_assert(sizeof(HumanoidAnimInstance_UpdateHipsIK) == 0x000004, "Wrong size on HumanoidAnimInstance_UpdateHipsIK");
static_assert(offsetof(HumanoidAnimInstance_UpdateHipsIK, DeltaTimeX) == 0x000000, "Member 'HumanoidAnimInstance_UpdateHipsIK::DeltaTimeX' has a wrong offset!");

// Function ObsidianFox.Inventory.AddItem
// 0x0010 (0x0010 - 0x0000)
struct Inventory_AddItem final
{
public:
	const class UItemData*                        InItemData;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFInventoryPopUp                              PopUp;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_AddItem) == 0x000008, "Wrong alignment on Inventory_AddItem");
static_assert(sizeof(Inventory_AddItem) == 0x000010, "Wrong size on Inventory_AddItem");
static_assert(offsetof(Inventory_AddItem, InItemData) == 0x000000, "Member 'Inventory_AddItem::InItemData' has a wrong offset!");
static_assert(offsetof(Inventory_AddItem, Amount) == 0x000008, "Member 'Inventory_AddItem::Amount' has a wrong offset!");
static_assert(offsetof(Inventory_AddItem, PopUp) == 0x00000C, "Member 'Inventory_AddItem::PopUp' has a wrong offset!");
static_assert(offsetof(Inventory_AddItem, ReturnValue) == 0x00000D, "Member 'Inventory_AddItem::ReturnValue' has a wrong offset!");

// Function ObsidianFox.Inventory.GetAllItems
// 0x0050 (0x0050 - 0x0000)
struct Inventory_GetAllItems final
{
public:
	TMap<TSoftObjectPtr<class UItemData>, struct FItemInfo> ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_GetAllItems) == 0x000008, "Wrong alignment on Inventory_GetAllItems");
static_assert(sizeof(Inventory_GetAllItems) == 0x000050, "Wrong size on Inventory_GetAllItems");
static_assert(offsetof(Inventory_GetAllItems, ReturnValue) == 0x000000, "Member 'Inventory_GetAllItems::ReturnValue' has a wrong offset!");

// Function ObsidianFox.Inventory.GetArchivedItems
// 0x0050 (0x0050 - 0x0000)
struct Inventory_GetArchivedItems final
{
public:
	TMap<TSoftObjectPtr<class UItemData>, struct FArchivedItemInfo> ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_GetArchivedItems) == 0x000008, "Wrong alignment on Inventory_GetArchivedItems");
static_assert(sizeof(Inventory_GetArchivedItems) == 0x000050, "Wrong size on Inventory_GetArchivedItems");
static_assert(offsetof(Inventory_GetArchivedItems, ReturnValue) == 0x000000, "Member 'Inventory_GetArchivedItems::ReturnValue' has a wrong offset!");

// Function ObsidianFox.Inventory.GetItemPickedUpHistory
// 0x0050 (0x0050 - 0x0000)
struct Inventory_GetItemPickedUpHistory final
{
public:
	TSet<TSoftObjectPtr<class UItemData>>         ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_GetItemPickedUpHistory) == 0x000008, "Wrong alignment on Inventory_GetItemPickedUpHistory");
static_assert(sizeof(Inventory_GetItemPickedUpHistory) == 0x000050, "Wrong size on Inventory_GetItemPickedUpHistory");
static_assert(offsetof(Inventory_GetItemPickedUpHistory, ReturnValue) == 0x000000, "Member 'Inventory_GetItemPickedUpHistory::ReturnValue' has a wrong offset!");

// Function ObsidianFox.Inventory.HasItemBeenLookedAt
// 0x0030 (0x0030 - 0x0000)
struct Inventory_HasItemBeenLookedAt final
{
public:
	TSoftObjectPtr<class UItemData>               ItemData;                                          // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_HasItemBeenLookedAt) == 0x000008, "Wrong alignment on Inventory_HasItemBeenLookedAt");
static_assert(sizeof(Inventory_HasItemBeenLookedAt) == 0x000030, "Wrong size on Inventory_HasItemBeenLookedAt");
static_assert(offsetof(Inventory_HasItemBeenLookedAt, ItemData) == 0x000000, "Member 'Inventory_HasItemBeenLookedAt::ItemData' has a wrong offset!");
static_assert(offsetof(Inventory_HasItemBeenLookedAt, ReturnValue) == 0x000028, "Member 'Inventory_HasItemBeenLookedAt::ReturnValue' has a wrong offset!");

// Function ObsidianFox.Inventory.OnProgressionUpdated
// 0x0010 (0x0010 - 0x0000)
struct Inventory_OnProgressionUpdated final
{
public:
	struct FGameplayTag                           NewProgressionState;                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OldProgressionState;                               // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_OnProgressionUpdated) == 0x000004, "Wrong alignment on Inventory_OnProgressionUpdated");
static_assert(sizeof(Inventory_OnProgressionUpdated) == 0x000010, "Wrong size on Inventory_OnProgressionUpdated");
static_assert(offsetof(Inventory_OnProgressionUpdated, NewProgressionState) == 0x000000, "Member 'Inventory_OnProgressionUpdated::NewProgressionState' has a wrong offset!");
static_assert(offsetof(Inventory_OnProgressionUpdated, OldProgressionState) == 0x000008, "Member 'Inventory_OnProgressionUpdated::OldProgressionState' has a wrong offset!");

// Function ObsidianFox.Inventory.RemoveItem
// 0x0010 (0x0010 - 0x0000)
struct Inventory_RemoveItem final
{
public:
	const class UItemData*                        ItemData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_RemoveItem) == 0x000008, "Wrong alignment on Inventory_RemoveItem");
static_assert(sizeof(Inventory_RemoveItem) == 0x000010, "Wrong size on Inventory_RemoveItem");
static_assert(offsetof(Inventory_RemoveItem, ItemData) == 0x000000, "Member 'Inventory_RemoveItem::ItemData' has a wrong offset!");
static_assert(offsetof(Inventory_RemoveItem, Amount) == 0x000008, "Member 'Inventory_RemoveItem::Amount' has a wrong offset!");
static_assert(offsetof(Inventory_RemoveItem, ReturnValue) == 0x00000C, "Member 'Inventory_RemoveItem::ReturnValue' has a wrong offset!");

// Function ObsidianFox.Inventory.SetArchiveTutorialShown
// 0x0001 (0x0001 - 0x0000)
struct Inventory_SetArchiveTutorialShown final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_SetArchiveTutorialShown) == 0x000001, "Wrong alignment on Inventory_SetArchiveTutorialShown");
static_assert(sizeof(Inventory_SetArchiveTutorialShown) == 0x000001, "Wrong size on Inventory_SetArchiveTutorialShown");
static_assert(offsetof(Inventory_SetArchiveTutorialShown, NewValue) == 0x000000, "Member 'Inventory_SetArchiveTutorialShown::NewValue' has a wrong offset!");

// Function ObsidianFox.Inventory.SetItemLookedAt
// 0x0030 (0x0030 - 0x0000)
struct Inventory_SetItemLookedAt final
{
public:
	TSoftObjectPtr<class UItemData>               ItemData;                                          // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bItemLookedAt;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_SetItemLookedAt) == 0x000008, "Wrong alignment on Inventory_SetItemLookedAt");
static_assert(sizeof(Inventory_SetItemLookedAt) == 0x000030, "Wrong size on Inventory_SetItemLookedAt");
static_assert(offsetof(Inventory_SetItemLookedAt, ItemData) == 0x000000, "Member 'Inventory_SetItemLookedAt::ItemData' has a wrong offset!");
static_assert(offsetof(Inventory_SetItemLookedAt, bItemLookedAt) == 0x000028, "Member 'Inventory_SetItemLookedAt::bItemLookedAt' has a wrong offset!");

// Function ObsidianFox.Inventory.UseItem
// 0x0010 (0x0010 - 0x0000)
struct Inventory_UseItem final
{
public:
	const class UItemData*                        ItemData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_UseItem) == 0x000008, "Wrong alignment on Inventory_UseItem");
static_assert(sizeof(Inventory_UseItem) == 0x000010, "Wrong size on Inventory_UseItem");
static_assert(offsetof(Inventory_UseItem, ItemData) == 0x000000, "Member 'Inventory_UseItem::ItemData' has a wrong offset!");
static_assert(offsetof(Inventory_UseItem, ReturnValue) == 0x000008, "Member 'Inventory_UseItem::ReturnValue' has a wrong offset!");

// Function ObsidianFox.Inventory.GetCollectibleManager
// 0x0008 (0x0008 - 0x0000)
struct Inventory_GetCollectibleManager final
{
public:
	const class UCollectibleManager*              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_GetCollectibleManager) == 0x000008, "Wrong alignment on Inventory_GetCollectibleManager");
static_assert(sizeof(Inventory_GetCollectibleManager) == 0x000008, "Wrong size on Inventory_GetCollectibleManager");
static_assert(offsetof(Inventory_GetCollectibleManager, ReturnValue) == 0x000000, "Member 'Inventory_GetCollectibleManager::ReturnValue' has a wrong offset!");

// Function ObsidianFox.Inventory.GetItemAmount
// 0x0010 (0x0010 - 0x0000)
struct Inventory_GetItemAmount final
{
public:
	const class UItemData*                        ItemData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_GetItemAmount) == 0x000008, "Wrong alignment on Inventory_GetItemAmount");
static_assert(sizeof(Inventory_GetItemAmount) == 0x000010, "Wrong size on Inventory_GetItemAmount");
static_assert(offsetof(Inventory_GetItemAmount, ItemData) == 0x000000, "Member 'Inventory_GetItemAmount::ItemData' has a wrong offset!");
static_assert(offsetof(Inventory_GetItemAmount, ReturnValue) == 0x000008, "Member 'Inventory_GetItemAmount::ReturnValue' has a wrong offset!");

// Function ObsidianFox.Inventory.HasAnyItemNotBeenLookedAt
// 0x0018 (0x0018 - 0x0000)
struct Inventory_HasAnyItemNotBeenLookedAt final
{
public:
	TArray<TSoftObjectPtr<class UItemData>>       Items;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_HasAnyItemNotBeenLookedAt) == 0x000008, "Wrong alignment on Inventory_HasAnyItemNotBeenLookedAt");
static_assert(sizeof(Inventory_HasAnyItemNotBeenLookedAt) == 0x000018, "Wrong size on Inventory_HasAnyItemNotBeenLookedAt");
static_assert(offsetof(Inventory_HasAnyItemNotBeenLookedAt, Items) == 0x000000, "Member 'Inventory_HasAnyItemNotBeenLookedAt::Items' has a wrong offset!");
static_assert(offsetof(Inventory_HasAnyItemNotBeenLookedAt, ReturnValue) == 0x000010, "Member 'Inventory_HasAnyItemNotBeenLookedAt::ReturnValue' has a wrong offset!");

// Function ObsidianFox.Inventory.HaveArchiveTutorialBeenShown
// 0x0001 (0x0001 - 0x0000)
struct Inventory_HaveArchiveTutorialBeenShown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Inventory_HaveArchiveTutorialBeenShown) == 0x000001, "Wrong alignment on Inventory_HaveArchiveTutorialBeenShown");
static_assert(sizeof(Inventory_HaveArchiveTutorialBeenShown) == 0x000001, "Wrong size on Inventory_HaveArchiveTutorialBeenShown");
static_assert(offsetof(Inventory_HaveArchiveTutorialBeenShown, ReturnValue) == 0x000000, "Member 'Inventory_HaveArchiveTutorialBeenShown::ReturnValue' has a wrong offset!");

// Function ObsidianFox.Inventory.HaveItem
// 0x0030 (0x0030 - 0x0000)
struct Inventory_HaveItem final
{
public:
	TSoftObjectPtr<class UItemData>               ItemData;                                          // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_HaveItem) == 0x000008, "Wrong alignment on Inventory_HaveItem");
static_assert(sizeof(Inventory_HaveItem) == 0x000030, "Wrong size on Inventory_HaveItem");
static_assert(offsetof(Inventory_HaveItem, ItemData) == 0x000000, "Member 'Inventory_HaveItem::ItemData' has a wrong offset!");
static_assert(offsetof(Inventory_HaveItem, ReturnValue) == 0x000028, "Member 'Inventory_HaveItem::ReturnValue' has a wrong offset!");

// Function ObsidianFox.Inventory.IsItemInPickupHistory
// 0x0030 (0x0030 - 0x0000)
struct Inventory_IsItemInPickupHistory final
{
public:
	TSoftObjectPtr<class UItemData>               ItemData;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Inventory_IsItemInPickupHistory) == 0x000008, "Wrong alignment on Inventory_IsItemInPickupHistory");
static_assert(sizeof(Inventory_IsItemInPickupHistory) == 0x000030, "Wrong size on Inventory_IsItemInPickupHistory");
static_assert(offsetof(Inventory_IsItemInPickupHistory, ItemData) == 0x000000, "Member 'Inventory_IsItemInPickupHistory::ItemData' has a wrong offset!");
static_assert(offsetof(Inventory_IsItemInPickupHistory, ReturnValue) == 0x000028, "Member 'Inventory_IsItemInPickupHistory::ReturnValue' has a wrong offset!");

// Function ObsidianFox.DarkManAnimInstance.BPEndEmote
// 0x0008 (0x0008 - 0x0000)
struct DarkManAnimInstance_BPEndEmote final
{
public:
	class AActor*                                 AlertTargetActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarkManAnimInstance_BPEndEmote) == 0x000008, "Wrong alignment on DarkManAnimInstance_BPEndEmote");
static_assert(sizeof(DarkManAnimInstance_BPEndEmote) == 0x000008, "Wrong size on DarkManAnimInstance_BPEndEmote");
static_assert(offsetof(DarkManAnimInstance_BPEndEmote, AlertTargetActor) == 0x000000, "Member 'DarkManAnimInstance_BPEndEmote::AlertTargetActor' has a wrong offset!");

// Function ObsidianFox.DarkManAnimInstance.BPStartEmote
// 0x0008 (0x0008 - 0x0000)
struct DarkManAnimInstance_BPStartEmote final
{
public:
	class UDarkManEmoteDataAsset*                 Emote;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarkManAnimInstance_BPStartEmote) == 0x000008, "Wrong alignment on DarkManAnimInstance_BPStartEmote");
static_assert(sizeof(DarkManAnimInstance_BPStartEmote) == 0x000008, "Wrong size on DarkManAnimInstance_BPStartEmote");
static_assert(offsetof(DarkManAnimInstance_BPStartEmote, Emote) == 0x000000, "Member 'DarkManAnimInstance_BPStartEmote::Emote' has a wrong offset!");

// Function ObsidianFox.DarkManAnimInstance.MontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct DarkManAnimInstance_MontageBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DarkManAnimInstance_MontageBlendingOut) == 0x000008, "Wrong alignment on DarkManAnimInstance_MontageBlendingOut");
static_assert(sizeof(DarkManAnimInstance_MontageBlendingOut) == 0x000010, "Wrong size on DarkManAnimInstance_MontageBlendingOut");
static_assert(offsetof(DarkManAnimInstance_MontageBlendingOut, Montage) == 0x000000, "Member 'DarkManAnimInstance_MontageBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(DarkManAnimInstance_MontageBlendingOut, bInterrupted) == 0x000008, "Member 'DarkManAnimInstance_MontageBlendingOut::bInterrupted' has a wrong offset!");

// Function ObsidianFox.DarkManEmoteInterface.EndEmote
// 0x0008 (0x0008 - 0x0000)
struct DarkManEmoteInterface_EndEmote final
{
public:
	class AActor*                                 AlertTargetActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarkManEmoteInterface_EndEmote) == 0x000008, "Wrong alignment on DarkManEmoteInterface_EndEmote");
static_assert(sizeof(DarkManEmoteInterface_EndEmote) == 0x000008, "Wrong size on DarkManEmoteInterface_EndEmote");
static_assert(offsetof(DarkManEmoteInterface_EndEmote, AlertTargetActor) == 0x000000, "Member 'DarkManEmoteInterface_EndEmote::AlertTargetActor' has a wrong offset!");

// Function ObsidianFox.DarkManEmoteInterface.RegisterEmoteDoneListener
// 0x0010 (0x0010 - 0x0000)
struct DarkManEmoteInterface_RegisterEmoteDoneListener final
{
public:
	TDelegate<void()>                             Event;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarkManEmoteInterface_RegisterEmoteDoneListener) == 0x000004, "Wrong alignment on DarkManEmoteInterface_RegisterEmoteDoneListener");
static_assert(sizeof(DarkManEmoteInterface_RegisterEmoteDoneListener) == 0x000010, "Wrong size on DarkManEmoteInterface_RegisterEmoteDoneListener");
static_assert(offsetof(DarkManEmoteInterface_RegisterEmoteDoneListener, Event) == 0x000000, "Member 'DarkManEmoteInterface_RegisterEmoteDoneListener::Event' has a wrong offset!");

// Function ObsidianFox.DarkManEmoteInterface.StartEmote
// 0x0008 (0x0008 - 0x0000)
struct DarkManEmoteInterface_StartEmote final
{
public:
	class UDarkManEmoteDataAsset*                 Emote;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarkManEmoteInterface_StartEmote) == 0x000008, "Wrong alignment on DarkManEmoteInterface_StartEmote");
static_assert(sizeof(DarkManEmoteInterface_StartEmote) == 0x000008, "Wrong size on DarkManEmoteInterface_StartEmote");
static_assert(offsetof(DarkManEmoteInterface_StartEmote, Emote) == 0x000000, "Member 'DarkManEmoteInterface_StartEmote::Emote' has a wrong offset!");

// Function ObsidianFox.DarkManEmoteInterface.UnregisterEmoteDoneListener
// 0x0010 (0x0010 - 0x0000)
struct DarkManEmoteInterface_UnregisterEmoteDoneListener final
{
public:
	TDelegate<void()>                             Event;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarkManEmoteInterface_UnregisterEmoteDoneListener) == 0x000004, "Wrong alignment on DarkManEmoteInterface_UnregisterEmoteDoneListener");
static_assert(sizeof(DarkManEmoteInterface_UnregisterEmoteDoneListener) == 0x000010, "Wrong size on DarkManEmoteInterface_UnregisterEmoteDoneListener");
static_assert(offsetof(DarkManEmoteInterface_UnregisterEmoteDoneListener, Event) == 0x000000, "Member 'DarkManEmoteInterface_UnregisterEmoteDoneListener::Event' has a wrong offset!");

// Function ObsidianFox.InGameUIWidget_Equipment.OnAmmoChanged
// 0x0008 (0x0008 - 0x0000)
struct InGameUIWidget_Equipment_OnAmmoChanged final
{
public:
	int32                                         CurrentAmmo;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAmmo;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameUIWidget_Equipment_OnAmmoChanged) == 0x000004, "Wrong alignment on InGameUIWidget_Equipment_OnAmmoChanged");
static_assert(sizeof(InGameUIWidget_Equipment_OnAmmoChanged) == 0x000008, "Wrong size on InGameUIWidget_Equipment_OnAmmoChanged");
static_assert(offsetof(InGameUIWidget_Equipment_OnAmmoChanged, CurrentAmmo) == 0x000000, "Member 'InGameUIWidget_Equipment_OnAmmoChanged::CurrentAmmo' has a wrong offset!");
static_assert(offsetof(InGameUIWidget_Equipment_OnAmmoChanged, MaxAmmo) == 0x000004, "Member 'InGameUIWidget_Equipment_OnAmmoChanged::MaxAmmo' has a wrong offset!");

// Function ObsidianFox.InGameUIWidget_Equipment.OnPlayerEquipmentUpdated
// 0x0020 (0x0020 - 0x0000)
struct InGameUIWidget_Equipment_OnPlayerEquipmentUpdated final
{
public:
	struct FWeaponInfo                            EquippedWeapon;                                    // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponInfo                            UnequippedWeapon;                                  // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameUIWidget_Equipment_OnPlayerEquipmentUpdated) == 0x000008, "Wrong alignment on InGameUIWidget_Equipment_OnPlayerEquipmentUpdated");
static_assert(sizeof(InGameUIWidget_Equipment_OnPlayerEquipmentUpdated) == 0x000020, "Wrong size on InGameUIWidget_Equipment_OnPlayerEquipmentUpdated");
static_assert(offsetof(InGameUIWidget_Equipment_OnPlayerEquipmentUpdated, EquippedWeapon) == 0x000000, "Member 'InGameUIWidget_Equipment_OnPlayerEquipmentUpdated::EquippedWeapon' has a wrong offset!");
static_assert(offsetof(InGameUIWidget_Equipment_OnPlayerEquipmentUpdated, UnequippedWeapon) == 0x000010, "Member 'InGameUIWidget_Equipment_OnPlayerEquipmentUpdated::UnequippedWeapon' has a wrong offset!");

// Function ObsidianFox.InGameUIWidget_Equipment.OnPlayerLootItemUpdated
// 0x0008 (0x0008 - 0x0000)
struct InGameUIWidget_Equipment_OnPlayerLootItemUpdated final
{
public:
	const class UItemData*                        ItemData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameUIWidget_Equipment_OnPlayerLootItemUpdated) == 0x000008, "Wrong alignment on InGameUIWidget_Equipment_OnPlayerLootItemUpdated");
static_assert(sizeof(InGameUIWidget_Equipment_OnPlayerLootItemUpdated) == 0x000008, "Wrong size on InGameUIWidget_Equipment_OnPlayerLootItemUpdated");
static_assert(offsetof(InGameUIWidget_Equipment_OnPlayerLootItemUpdated, ItemData) == 0x000000, "Member 'InGameUIWidget_Equipment_OnPlayerLootItemUpdated::ItemData' has a wrong offset!");

// Function ObsidianFox.InGameUIWidget_Equipment.UpdateBreakingImageMeleeWeaponWithNewWeapon
// 0x0008 (0x0008 - 0x0000)
struct InGameUIWidget_Equipment_UpdateBreakingImageMeleeWeaponWithNewWeapon final
{
public:
	const class AMeleeWeaponActor*                NewWeaponActor;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameUIWidget_Equipment_UpdateBreakingImageMeleeWeaponWithNewWeapon) == 0x000008, "Wrong alignment on InGameUIWidget_Equipment_UpdateBreakingImageMeleeWeaponWithNewWeapon");
static_assert(sizeof(InGameUIWidget_Equipment_UpdateBreakingImageMeleeWeaponWithNewWeapon) == 0x000008, "Wrong size on InGameUIWidget_Equipment_UpdateBreakingImageMeleeWeaponWithNewWeapon");
static_assert(offsetof(InGameUIWidget_Equipment_UpdateBreakingImageMeleeWeaponWithNewWeapon, NewWeaponActor) == 0x000000, "Member 'InGameUIWidget_Equipment_UpdateBreakingImageMeleeWeaponWithNewWeapon::NewWeaponActor' has a wrong offset!");

// Function ObsidianFox.DEZInteractionComponent.GetDEZReference
// 0x0008 (0x0008 - 0x0000)
struct DEZInteractionComponent_GetDEZReference final
{
public:
	class UDynamicEnvironmentZoneComponent*       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DEZInteractionComponent_GetDEZReference) == 0x000008, "Wrong alignment on DEZInteractionComponent_GetDEZReference");
static_assert(sizeof(DEZInteractionComponent_GetDEZReference) == 0x000008, "Wrong size on DEZInteractionComponent_GetDEZReference");
static_assert(offsetof(DEZInteractionComponent_GetDEZReference, ReturnValue) == 0x000000, "Member 'DEZInteractionComponent_GetDEZReference::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.InteractionFlowComponent.InteractionSignature__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct InteractionFlowComponent_InteractionSignature__DelegateSignature final
{
public:
	class ACharacter*                             InteractionCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionFlowComponent_InteractionSignature__DelegateSignature) == 0x000008, "Wrong alignment on InteractionFlowComponent_InteractionSignature__DelegateSignature");
static_assert(sizeof(InteractionFlowComponent_InteractionSignature__DelegateSignature) == 0x000008, "Wrong size on InteractionFlowComponent_InteractionSignature__DelegateSignature");
static_assert(offsetof(InteractionFlowComponent_InteractionSignature__DelegateSignature, InteractionCharacter) == 0x000000, "Member 'InteractionFlowComponent_InteractionSignature__DelegateSignature::InteractionCharacter' has a wrong offset!");

// Function ObsidianFox.InteractionFlowComponent.SetLockDuringInteraction
// 0x0004 (0x0004 - 0x0000)
struct InteractionFlowComponent_SetLockDuringInteraction final
{
public:
	bool                                          LockMoveInput;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LockLookInput;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LockGameplayInput;                                 // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LockInteractable;                                  // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionFlowComponent_SetLockDuringInteraction) == 0x000001, "Wrong alignment on InteractionFlowComponent_SetLockDuringInteraction");
static_assert(sizeof(InteractionFlowComponent_SetLockDuringInteraction) == 0x000004, "Wrong size on InteractionFlowComponent_SetLockDuringInteraction");
static_assert(offsetof(InteractionFlowComponent_SetLockDuringInteraction, LockMoveInput) == 0x000000, "Member 'InteractionFlowComponent_SetLockDuringInteraction::LockMoveInput' has a wrong offset!");
static_assert(offsetof(InteractionFlowComponent_SetLockDuringInteraction, LockLookInput) == 0x000001, "Member 'InteractionFlowComponent_SetLockDuringInteraction::LockLookInput' has a wrong offset!");
static_assert(offsetof(InteractionFlowComponent_SetLockDuringInteraction, LockGameplayInput) == 0x000002, "Member 'InteractionFlowComponent_SetLockDuringInteraction::LockGameplayInput' has a wrong offset!");
static_assert(offsetof(InteractionFlowComponent_SetLockDuringInteraction, LockInteractable) == 0x000003, "Member 'InteractionFlowComponent_SetLockDuringInteraction::LockInteractable' has a wrong offset!");

// Function ObsidianFox.InteractionFlowComponent.SetLockGameplayInputDuringInteraction
// 0x0001 (0x0001 - 0x0000)
struct InteractionFlowComponent_SetLockGameplayInputDuringInteraction final
{
public:
	bool                                          ShouldIgnore;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionFlowComponent_SetLockGameplayInputDuringInteraction) == 0x000001, "Wrong alignment on InteractionFlowComponent_SetLockGameplayInputDuringInteraction");
static_assert(sizeof(InteractionFlowComponent_SetLockGameplayInputDuringInteraction) == 0x000001, "Wrong size on InteractionFlowComponent_SetLockGameplayInputDuringInteraction");
static_assert(offsetof(InteractionFlowComponent_SetLockGameplayInputDuringInteraction, ShouldIgnore) == 0x000000, "Member 'InteractionFlowComponent_SetLockGameplayInputDuringInteraction::ShouldIgnore' has a wrong offset!");

// Function ObsidianFox.InteractionFlowComponent.SetLockInteractableDuringInteraction
// 0x0001 (0x0001 - 0x0000)
struct InteractionFlowComponent_SetLockInteractableDuringInteraction final
{
public:
	bool                                          ShouldIgnore;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionFlowComponent_SetLockInteractableDuringInteraction) == 0x000001, "Wrong alignment on InteractionFlowComponent_SetLockInteractableDuringInteraction");
static_assert(sizeof(InteractionFlowComponent_SetLockInteractableDuringInteraction) == 0x000001, "Wrong size on InteractionFlowComponent_SetLockInteractableDuringInteraction");
static_assert(offsetof(InteractionFlowComponent_SetLockInteractableDuringInteraction, ShouldIgnore) == 0x000000, "Member 'InteractionFlowComponent_SetLockInteractableDuringInteraction::ShouldIgnore' has a wrong offset!");

// Function ObsidianFox.InteractionFlowComponent.SetLockLookInputDuringInteraction
// 0x0001 (0x0001 - 0x0000)
struct InteractionFlowComponent_SetLockLookInputDuringInteraction final
{
public:
	bool                                          ShouldIgnore;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionFlowComponent_SetLockLookInputDuringInteraction) == 0x000001, "Wrong alignment on InteractionFlowComponent_SetLockLookInputDuringInteraction");
static_assert(sizeof(InteractionFlowComponent_SetLockLookInputDuringInteraction) == 0x000001, "Wrong size on InteractionFlowComponent_SetLockLookInputDuringInteraction");
static_assert(offsetof(InteractionFlowComponent_SetLockLookInputDuringInteraction, ShouldIgnore) == 0x000000, "Member 'InteractionFlowComponent_SetLockLookInputDuringInteraction::ShouldIgnore' has a wrong offset!");

// Function ObsidianFox.InteractionFlowComponent.SetLockMovementInputDuringInteraction
// 0x0001 (0x0001 - 0x0000)
struct InteractionFlowComponent_SetLockMovementInputDuringInteraction final
{
public:
	bool                                          ShouldIgnore;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionFlowComponent_SetLockMovementInputDuringInteraction) == 0x000001, "Wrong alignment on InteractionFlowComponent_SetLockMovementInputDuringInteraction");
static_assert(sizeof(InteractionFlowComponent_SetLockMovementInputDuringInteraction) == 0x000001, "Wrong size on InteractionFlowComponent_SetLockMovementInputDuringInteraction");
static_assert(offsetof(InteractionFlowComponent_SetLockMovementInputDuringInteraction, ShouldIgnore) == 0x000000, "Member 'InteractionFlowComponent_SetLockMovementInputDuringInteraction::ShouldIgnore' has a wrong offset!");

// Function ObsidianFox.DifficultyDependantSubsystem.OnDifficultyUpdatedHandler
// 0x0001 (0x0001 - 0x0000)
struct DifficultyDependantSubsystem_OnDifficultyUpdatedHandler final
{
public:
	EDifficulty                                   NewDifficulty;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DifficultyDependantSubsystem_OnDifficultyUpdatedHandler) == 0x000001, "Wrong alignment on DifficultyDependantSubsystem_OnDifficultyUpdatedHandler");
static_assert(sizeof(DifficultyDependantSubsystem_OnDifficultyUpdatedHandler) == 0x000001, "Wrong size on DifficultyDependantSubsystem_OnDifficultyUpdatedHandler");
static_assert(offsetof(DifficultyDependantSubsystem_OnDifficultyUpdatedHandler, NewDifficulty) == 0x000000, "Member 'DifficultyDependantSubsystem_OnDifficultyUpdatedHandler::NewDifficulty' has a wrong offset!");

// Function ObsidianFox.OFGridPanel.OnSlotHovered
// 0x0008 (0x0008 - 0x0000)
struct OFGridPanel_OnSlotHovered final
{
public:
	class UOFSlotWidget*                          InArchiveSlot;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGridPanel_OnSlotHovered) == 0x000008, "Wrong alignment on OFGridPanel_OnSlotHovered");
static_assert(sizeof(OFGridPanel_OnSlotHovered) == 0x000008, "Wrong size on OFGridPanel_OnSlotHovered");
static_assert(offsetof(OFGridPanel_OnSlotHovered, InArchiveSlot) == 0x000000, "Member 'OFGridPanel_OnSlotHovered::InArchiveSlot' has a wrong offset!");

// Function ObsidianFox.InvestigationSelectionWidget.GetSelectedInvestigationSlotWidget
// 0x0008 (0x0008 - 0x0000)
struct InvestigationSelectionWidget_GetSelectedInvestigationSlotWidget final
{
public:
	class UInvestigationSlotWidget*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvestigationSelectionWidget_GetSelectedInvestigationSlotWidget) == 0x000008, "Wrong alignment on InvestigationSelectionWidget_GetSelectedInvestigationSlotWidget");
static_assert(sizeof(InvestigationSelectionWidget_GetSelectedInvestigationSlotWidget) == 0x000008, "Wrong size on InvestigationSelectionWidget_GetSelectedInvestigationSlotWidget");
static_assert(offsetof(InvestigationSelectionWidget_GetSelectedInvestigationSlotWidget, ReturnValue) == 0x000000, "Member 'InvestigationSelectionWidget_GetSelectedInvestigationSlotWidget::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InventoryItemPicker.CheckIfRightItem
// 0x0010 (0x0010 - 0x0000)
struct InventoryItemPicker_CheckIfRightItem final
{
public:
	class UItemData*                              ItemData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryItemPicker_CheckIfRightItem) == 0x000008, "Wrong alignment on InventoryItemPicker_CheckIfRightItem");
static_assert(sizeof(InventoryItemPicker_CheckIfRightItem) == 0x000010, "Wrong size on InventoryItemPicker_CheckIfRightItem");
static_assert(offsetof(InventoryItemPicker_CheckIfRightItem, ItemData) == 0x000000, "Member 'InventoryItemPicker_CheckIfRightItem::ItemData' has a wrong offset!");
static_assert(offsetof(InventoryItemPicker_CheckIfRightItem, ReturnValue) == 0x000008, "Member 'InventoryItemPicker_CheckIfRightItem::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InventoryItemPicker.GetTargetName
// 0x0018 (0x0018 - 0x0000)
struct InventoryItemPicker_GetTargetName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItemPicker_GetTargetName) == 0x000008, "Wrong alignment on InventoryItemPicker_GetTargetName");
static_assert(sizeof(InventoryItemPicker_GetTargetName) == 0x000018, "Wrong size on InventoryItemPicker_GetTargetName");
static_assert(offsetof(InventoryItemPicker_GetTargetName, ReturnValue) == 0x000000, "Member 'InventoryItemPicker_GetTargetName::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InventoryItemPicker.GetItemCategoryGameplayTag
// 0x0008 (0x0008 - 0x0000)
struct InventoryItemPicker_GetItemCategoryGameplayTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItemPicker_GetItemCategoryGameplayTag) == 0x000004, "Wrong alignment on InventoryItemPicker_GetItemCategoryGameplayTag");
static_assert(sizeof(InventoryItemPicker_GetItemCategoryGameplayTag) == 0x000008, "Wrong size on InventoryItemPicker_GetItemCategoryGameplayTag");
static_assert(offsetof(InventoryItemPicker_GetItemCategoryGameplayTag, ReturnValue) == 0x000000, "Member 'InventoryItemPicker_GetItemCategoryGameplayTag::ReturnValue' has a wrong offset!");

// Function ObsidianFox.DismembermentInterface.DismemberAtHit
// 0x0090 (0x0090 - 0x0000)
struct DismembermentInterface_DismemberAtHit final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         HitMagnitude;                                      // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsKillingHit;                                      // 0x008C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DismembermentInterface_DismemberAtHit) == 0x000004, "Wrong alignment on DismembermentInterface_DismemberAtHit");
static_assert(sizeof(DismembermentInterface_DismemberAtHit) == 0x000090, "Wrong size on DismembermentInterface_DismemberAtHit");
static_assert(offsetof(DismembermentInterface_DismemberAtHit, HitResult) == 0x000000, "Member 'DismembermentInterface_DismemberAtHit::HitResult' has a wrong offset!");
static_assert(offsetof(DismembermentInterface_DismemberAtHit, HitMagnitude) == 0x000088, "Member 'DismembermentInterface_DismemberAtHit::HitMagnitude' has a wrong offset!");
static_assert(offsetof(DismembermentInterface_DismemberAtHit, IsKillingHit) == 0x00008C, "Member 'DismembermentInterface_DismemberAtHit::IsKillingHit' has a wrong offset!");

// Function ObsidianFox.DismemberMeshParticleActor.AddAngularImpulseInDegrees
// 0x0018 (0x0018 - 0x0000)
struct DismemberMeshParticleActor_AddAngularImpulseInDegrees final
{
public:
	struct FVector                                Impulse;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipQueueIfPhysicsAreDisabled;                    // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DismemberMeshParticleActor_AddAngularImpulseInDegrees) == 0x000004, "Wrong alignment on DismemberMeshParticleActor_AddAngularImpulseInDegrees");
static_assert(sizeof(DismemberMeshParticleActor_AddAngularImpulseInDegrees) == 0x000018, "Wrong size on DismemberMeshParticleActor_AddAngularImpulseInDegrees");
static_assert(offsetof(DismemberMeshParticleActor_AddAngularImpulseInDegrees, Impulse) == 0x000000, "Member 'DismemberMeshParticleActor_AddAngularImpulseInDegrees::Impulse' has a wrong offset!");
static_assert(offsetof(DismemberMeshParticleActor_AddAngularImpulseInDegrees, BoneName) == 0x00000C, "Member 'DismemberMeshParticleActor_AddAngularImpulseInDegrees::BoneName' has a wrong offset!");
static_assert(offsetof(DismemberMeshParticleActor_AddAngularImpulseInDegrees, bSkipQueueIfPhysicsAreDisabled) == 0x000014, "Member 'DismemberMeshParticleActor_AddAngularImpulseInDegrees::bSkipQueueIfPhysicsAreDisabled' has a wrong offset!");

// Function ObsidianFox.DismemberMeshParticleActor.AddRadialImpulse
// 0x0018 (0x0018 - 0x0000)
struct DismemberMeshParticleActor_AddRadialImpulse final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipQueueIfPhysicsAreDisabled;                    // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DismemberMeshParticleActor_AddRadialImpulse) == 0x000004, "Wrong alignment on DismemberMeshParticleActor_AddRadialImpulse");
static_assert(sizeof(DismemberMeshParticleActor_AddRadialImpulse) == 0x000018, "Wrong size on DismemberMeshParticleActor_AddRadialImpulse");
static_assert(offsetof(DismemberMeshParticleActor_AddRadialImpulse, Origin) == 0x000000, "Member 'DismemberMeshParticleActor_AddRadialImpulse::Origin' has a wrong offset!");
static_assert(offsetof(DismemberMeshParticleActor_AddRadialImpulse, Radius) == 0x00000C, "Member 'DismemberMeshParticleActor_AddRadialImpulse::Radius' has a wrong offset!");
static_assert(offsetof(DismemberMeshParticleActor_AddRadialImpulse, Strength) == 0x000010, "Member 'DismemberMeshParticleActor_AddRadialImpulse::Strength' has a wrong offset!");
static_assert(offsetof(DismemberMeshParticleActor_AddRadialImpulse, bSkipQueueIfPhysicsAreDisabled) == 0x000014, "Member 'DismemberMeshParticleActor_AddRadialImpulse::bSkipQueueIfPhysicsAreDisabled' has a wrong offset!");

// Function ObsidianFox.DismemberMeshParticleActor.OnSpawnEvent
// 0x0010 (0x0010 - 0x0000)
struct DismemberMeshParticleActor_OnSpawnEvent final
{
public:
	class UDismemberSkeletalMeshComponent*        SpawningComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDismembermentExtraParameters*    OptionalObject;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DismemberMeshParticleActor_OnSpawnEvent) == 0x000008, "Wrong alignment on DismemberMeshParticleActor_OnSpawnEvent");
static_assert(sizeof(DismemberMeshParticleActor_OnSpawnEvent) == 0x000010, "Wrong size on DismemberMeshParticleActor_OnSpawnEvent");
static_assert(offsetof(DismemberMeshParticleActor_OnSpawnEvent, SpawningComponent) == 0x000000, "Member 'DismemberMeshParticleActor_OnSpawnEvent::SpawningComponent' has a wrong offset!");
static_assert(offsetof(DismemberMeshParticleActor_OnSpawnEvent, OptionalObject) == 0x000008, "Member 'DismemberMeshParticleActor_OnSpawnEvent::OptionalObject' has a wrong offset!");

// Function ObsidianFox.DismemberMeshParticleActor.DisablePhysics
// 0x0008 (0x0008 - 0x0000)
struct DismemberMeshParticleActor_DisablePhysics final
{
public:
	class FName                                   SimulationRootBone;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DismemberMeshParticleActor_DisablePhysics) == 0x000004, "Wrong alignment on DismemberMeshParticleActor_DisablePhysics");
static_assert(sizeof(DismemberMeshParticleActor_DisablePhysics) == 0x000008, "Wrong size on DismemberMeshParticleActor_DisablePhysics");
static_assert(offsetof(DismemberMeshParticleActor_DisablePhysics, SimulationRootBone) == 0x000000, "Member 'DismemberMeshParticleActor_DisablePhysics::SimulationRootBone' has a wrong offset!");

// Function ObsidianFox.DismemberMeshParticleActor.EnablePhysics
// 0x0010 (0x0010 - 0x0000)
struct DismemberMeshParticleActor_EnablePhysics final
{
public:
	class FName                                   SimulationRootBone;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PhysicsProfileName;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DismemberMeshParticleActor_EnablePhysics) == 0x000004, "Wrong alignment on DismemberMeshParticleActor_EnablePhysics");
static_assert(sizeof(DismemberMeshParticleActor_EnablePhysics) == 0x000010, "Wrong size on DismemberMeshParticleActor_EnablePhysics");
static_assert(offsetof(DismemberMeshParticleActor_EnablePhysics, SimulationRootBone) == 0x000000, "Member 'DismemberMeshParticleActor_EnablePhysics::SimulationRootBone' has a wrong offset!");
static_assert(offsetof(DismemberMeshParticleActor_EnablePhysics, PhysicsProfileName) == 0x000008, "Member 'DismemberMeshParticleActor_EnablePhysics::PhysicsProfileName' has a wrong offset!");

// Function ObsidianFox.VectorFieldInteractionComponent.VectorFieldInteraction
// 0x0008 (0x0008 - 0x0000)
struct VectorFieldInteractionComponent_VectorFieldInteraction final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VectorFieldInteractionComponent_VectorFieldInteraction) == 0x000004, "Wrong alignment on VectorFieldInteractionComponent_VectorFieldInteraction");
static_assert(sizeof(VectorFieldInteractionComponent_VectorFieldInteraction) == 0x000008, "Wrong size on VectorFieldInteractionComponent_VectorFieldInteraction");
static_assert(offsetof(VectorFieldInteractionComponent_VectorFieldInteraction, Radius) == 0x000000, "Member 'VectorFieldInteractionComponent_VectorFieldInteraction::Radius' has a wrong offset!");
static_assert(offsetof(VectorFieldInteractionComponent_VectorFieldInteraction, Strength) == 0x000004, "Member 'VectorFieldInteractionComponent_VectorFieldInteraction::Strength' has a wrong offset!");

// Function ObsidianFox.DismemberSkeletalMeshComponent.DetachMesh
// 0x0010 (0x0010 - 0x0000)
struct DismemberSkeletalMeshComponent_DetachMesh final
{
public:
	class UDismembermentExtraParameters*          OptionalObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADismemberMeshParticleActor*            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DismemberSkeletalMeshComponent_DetachMesh) == 0x000008, "Wrong alignment on DismemberSkeletalMeshComponent_DetachMesh");
static_assert(sizeof(DismemberSkeletalMeshComponent_DetachMesh) == 0x000010, "Wrong size on DismemberSkeletalMeshComponent_DetachMesh");
static_assert(offsetof(DismemberSkeletalMeshComponent_DetachMesh, OptionalObject) == 0x000000, "Member 'DismemberSkeletalMeshComponent_DetachMesh::OptionalObject' has a wrong offset!");
static_assert(offsetof(DismemberSkeletalMeshComponent_DetachMesh, ReturnValue) == 0x000008, "Member 'DismemberSkeletalMeshComponent_DetachMesh::ReturnValue' has a wrong offset!");

// Function ObsidianFox.DismemberSkeletalMeshComponent.DetachMeshWithForce
// 0x0038 (0x0038 - 0x0000)
struct DismemberSkeletalMeshComponent_DetachMeshWithForce final
{
public:
	class UDismembermentExtraParameters*          OptionalObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RadialForceOrigin;                                 // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForceRadius;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForceStrength;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularImpulse;                                    // 0x001C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AngularImpulseBone;                                // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADismemberMeshParticleActor*            ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DismemberSkeletalMeshComponent_DetachMeshWithForce) == 0x000008, "Wrong alignment on DismemberSkeletalMeshComponent_DetachMeshWithForce");
static_assert(sizeof(DismemberSkeletalMeshComponent_DetachMeshWithForce) == 0x000038, "Wrong size on DismemberSkeletalMeshComponent_DetachMeshWithForce");
static_assert(offsetof(DismemberSkeletalMeshComponent_DetachMeshWithForce, OptionalObject) == 0x000000, "Member 'DismemberSkeletalMeshComponent_DetachMeshWithForce::OptionalObject' has a wrong offset!");
static_assert(offsetof(DismemberSkeletalMeshComponent_DetachMeshWithForce, RadialForceOrigin) == 0x000008, "Member 'DismemberSkeletalMeshComponent_DetachMeshWithForce::RadialForceOrigin' has a wrong offset!");
static_assert(offsetof(DismemberSkeletalMeshComponent_DetachMeshWithForce, ForceRadius) == 0x000014, "Member 'DismemberSkeletalMeshComponent_DetachMeshWithForce::ForceRadius' has a wrong offset!");
static_assert(offsetof(DismemberSkeletalMeshComponent_DetachMeshWithForce, ForceStrength) == 0x000018, "Member 'DismemberSkeletalMeshComponent_DetachMeshWithForce::ForceStrength' has a wrong offset!");
static_assert(offsetof(DismemberSkeletalMeshComponent_DetachMeshWithForce, AngularImpulse) == 0x00001C, "Member 'DismemberSkeletalMeshComponent_DetachMeshWithForce::AngularImpulse' has a wrong offset!");
static_assert(offsetof(DismemberSkeletalMeshComponent_DetachMeshWithForce, AngularImpulseBone) == 0x000028, "Member 'DismemberSkeletalMeshComponent_DetachMeshWithForce::AngularImpulseBone' has a wrong offset!");
static_assert(offsetof(DismemberSkeletalMeshComponent_DetachMeshWithForce, ReturnValue) == 0x000030, "Member 'DismemberSkeletalMeshComponent_DetachMeshWithForce::ReturnValue' has a wrong offset!");

// Function ObsidianFox.Door.AreLevelsLoaded
// 0x0001 (0x0001 - 0x0000)
struct Door_AreLevelsLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_AreLevelsLoaded) == 0x000001, "Wrong alignment on Door_AreLevelsLoaded");
static_assert(sizeof(Door_AreLevelsLoaded) == 0x000001, "Wrong size on Door_AreLevelsLoaded");
static_assert(offsetof(Door_AreLevelsLoaded, ReturnValue) == 0x000000, "Member 'Door_AreLevelsLoaded::ReturnValue' has a wrong offset!");

// Function ObsidianFox.Door.BoltDraggingCallbackFunction
// 0x0004 (0x0004 - 0x0000)
struct Door_BoltDraggingCallbackFunction final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_BoltDraggingCallbackFunction) == 0x000004, "Wrong alignment on Door_BoltDraggingCallbackFunction");
static_assert(sizeof(Door_BoltDraggingCallbackFunction) == 0x000004, "Wrong size on Door_BoltDraggingCallbackFunction");
static_assert(offsetof(Door_BoltDraggingCallbackFunction, Alpha) == 0x000000, "Member 'Door_BoltDraggingCallbackFunction::Alpha' has a wrong offset!");

// Function ObsidianFox.Door.CloseDoor
// 0x0001 (0x0001 - 0x0000)
struct Door_CloseDoor final
{
public:
	bool                                          bInstantClose;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_CloseDoor) == 0x000001, "Wrong alignment on Door_CloseDoor");
static_assert(sizeof(Door_CloseDoor) == 0x000001, "Wrong size on Door_CloseDoor");
static_assert(offsetof(Door_CloseDoor, bInstantClose) == 0x000000, "Member 'Door_CloseDoor::bInstantClose' has a wrong offset!");

// Function ObsidianFox.Door.CloseDoorTimelineCallback
// 0x0004 (0x0004 - 0x0000)
struct Door_CloseDoorTimelineCallback final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_CloseDoorTimelineCallback) == 0x000004, "Wrong alignment on Door_CloseDoorTimelineCallback");
static_assert(sizeof(Door_CloseDoorTimelineCallback) == 0x000004, "Wrong size on Door_CloseDoorTimelineCallback");
static_assert(offsetof(Door_CloseDoorTimelineCallback, Alpha) == 0x000000, "Member 'Door_CloseDoorTimelineCallback::Alpha' has a wrong offset!");

// Function ObsidianFox.Door.DoorHandleCounterClockwiseRotationTimelineCallback
// 0x0004 (0x0004 - 0x0000)
struct Door_DoorHandleCounterClockwiseRotationTimelineCallback final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_DoorHandleCounterClockwiseRotationTimelineCallback) == 0x000004, "Wrong alignment on Door_DoorHandleCounterClockwiseRotationTimelineCallback");
static_assert(sizeof(Door_DoorHandleCounterClockwiseRotationTimelineCallback) == 0x000004, "Wrong size on Door_DoorHandleCounterClockwiseRotationTimelineCallback");
static_assert(offsetof(Door_DoorHandleCounterClockwiseRotationTimelineCallback, Alpha) == 0x000000, "Member 'Door_DoorHandleCounterClockwiseRotationTimelineCallback::Alpha' has a wrong offset!");

// Function ObsidianFox.Door.DoorHandleRotationTimelineCallback
// 0x0004 (0x0004 - 0x0000)
struct Door_DoorHandleRotationTimelineCallback final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_DoorHandleRotationTimelineCallback) == 0x000004, "Wrong alignment on Door_DoorHandleRotationTimelineCallback");
static_assert(sizeof(Door_DoorHandleRotationTimelineCallback) == 0x000004, "Wrong size on Door_DoorHandleRotationTimelineCallback");
static_assert(offsetof(Door_DoorHandleRotationTimelineCallback, Alpha) == 0x000000, "Member 'Door_DoorHandleRotationTimelineCallback::Alpha' has a wrong offset!");

// Function ObsidianFox.Door.DoorRotationTimeLineCallback
// 0x0004 (0x0004 - 0x0000)
struct Door_DoorRotationTimeLineCallback final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_DoorRotationTimeLineCallback) == 0x000004, "Wrong alignment on Door_DoorRotationTimeLineCallback");
static_assert(sizeof(Door_DoorRotationTimeLineCallback) == 0x000004, "Wrong size on Door_DoorRotationTimeLineCallback");
static_assert(offsetof(Door_DoorRotationTimeLineCallback, Alpha) == 0x000000, "Member 'Door_DoorRotationTimeLineCallback::Alpha' has a wrong offset!");

// Function ObsidianFox.Door.GetDoorOpenState
// 0x0001 (0x0001 - 0x0000)
struct Door_GetDoorOpenState final
{
public:
	EDoorOpenState                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_GetDoorOpenState) == 0x000001, "Wrong alignment on Door_GetDoorOpenState");
static_assert(sizeof(Door_GetDoorOpenState) == 0x000001, "Wrong size on Door_GetDoorOpenState");
static_assert(offsetof(Door_GetDoorOpenState, ReturnValue) == 0x000000, "Member 'Door_GetDoorOpenState::ReturnValue' has a wrong offset!");

// Function ObsidianFox.Door.InteractingWithDoor
// 0x0008 (0x0008 - 0x0000)
struct Door_InteractingWithDoor final
{
public:
	class ACharacter*                             InteractionCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_InteractingWithDoor) == 0x000008, "Wrong alignment on Door_InteractingWithDoor");
static_assert(sizeof(Door_InteractingWithDoor) == 0x000008, "Wrong size on Door_InteractingWithDoor");
static_assert(offsetof(Door_InteractingWithDoor, InteractionCharacter) == 0x000000, "Member 'Door_InteractingWithDoor::InteractionCharacter' has a wrong offset!");

// Function ObsidianFox.Door.IsLocked
// 0x0001 (0x0001 - 0x0000)
struct Door_IsLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_IsLocked) == 0x000001, "Wrong alignment on Door_IsLocked");
static_assert(sizeof(Door_IsLocked) == 0x000001, "Wrong size on Door_IsLocked");
static_assert(offsetof(Door_IsLocked, ReturnValue) == 0x000000, "Member 'Door_IsLocked::ReturnValue' has a wrong offset!");

// Function ObsidianFox.Door.ItemAddedHandler
// 0x0008 (0x0008 - 0x0000)
struct Door_ItemAddedHandler final
{
public:
	const class UItemData*                        ItemData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_ItemAddedHandler) == 0x000008, "Wrong alignment on Door_ItemAddedHandler");
static_assert(sizeof(Door_ItemAddedHandler) == 0x000008, "Wrong size on Door_ItemAddedHandler");
static_assert(offsetof(Door_ItemAddedHandler, ItemData) == 0x000000, "Member 'Door_ItemAddedHandler::ItemData' has a wrong offset!");

// Function ObsidianFox.Door.MoveToInteraction
// 0x0010 (0x0010 - 0x0000)
struct Door_MoveToInteraction final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USceneComponent*                  MoveToLocation;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_MoveToInteraction) == 0x000008, "Wrong alignment on Door_MoveToInteraction");
static_assert(sizeof(Door_MoveToInteraction) == 0x000010, "Wrong size on Door_MoveToInteraction");
static_assert(offsetof(Door_MoveToInteraction, InteractingCharacter) == 0x000000, "Member 'Door_MoveToInteraction::InteractingCharacter' has a wrong offset!");
static_assert(offsetof(Door_MoveToInteraction, MoveToLocation) == 0x000008, "Member 'Door_MoveToInteraction::MoveToLocation' has a wrong offset!");

// Function ObsidianFox.Door.MoveToInteractionDone
// 0x0008 (0x0008 - 0x0000)
struct Door_MoveToInteractionDone final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_MoveToInteractionDone) == 0x000008, "Wrong alignment on Door_MoveToInteractionDone");
static_assert(sizeof(Door_MoveToInteractionDone) == 0x000008, "Wrong size on Door_MoveToInteractionDone");
static_assert(offsetof(Door_MoveToInteractionDone, InteractingCharacter) == 0x000000, "Member 'Door_MoveToInteractionDone::InteractingCharacter' has a wrong offset!");

// Function ObsidianFox.Door.OnCharacterPossessed
// 0x0008 (0x0008 - 0x0000)
struct Door_OnCharacterPossessed final
{
public:
	const class AOFPlayerCharacter*               PlayerCharacter;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_OnCharacterPossessed) == 0x000008, "Wrong alignment on Door_OnCharacterPossessed");
static_assert(sizeof(Door_OnCharacterPossessed) == 0x000008, "Wrong size on Door_OnCharacterPossessed");
static_assert(offsetof(Door_OnCharacterPossessed, PlayerCharacter) == 0x000000, "Member 'Door_OnCharacterPossessed::PlayerCharacter' has a wrong offset!");

// Function ObsidianFox.Door.OnCharacterUnPossessed
// 0x0008 (0x0008 - 0x0000)
struct Door_OnCharacterUnPossessed final
{
public:
	const class AOFPlayerCharacter*               PlayerCharacter;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_OnCharacterUnPossessed) == 0x000008, "Wrong alignment on Door_OnCharacterUnPossessed");
static_assert(sizeof(Door_OnCharacterUnPossessed) == 0x000008, "Wrong size on Door_OnCharacterUnPossessed");
static_assert(offsetof(Door_OnCharacterUnPossessed, PlayerCharacter) == 0x000000, "Member 'Door_OnCharacterUnPossessed::PlayerCharacter' has a wrong offset!");

// Function ObsidianFox.Door.OnPreSaveGame
// 0x0004 (0x0004 - 0x0000)
struct Door_OnPreSaveGame final
{
public:
	ESaveTypePolicy                               SaveType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_OnPreSaveGame) == 0x000004, "Wrong alignment on Door_OnPreSaveGame");
static_assert(sizeof(Door_OnPreSaveGame) == 0x000004, "Wrong size on Door_OnPreSaveGame");
static_assert(offsetof(Door_OnPreSaveGame, SaveType) == 0x000000, "Member 'Door_OnPreSaveGame::SaveType' has a wrong offset!");

// Function ObsidianFox.Door.OpenDoor
// 0x0001 (0x0001 - 0x0000)
struct Door_OpenDoor final
{
public:
	bool                                          bCounterClockwise;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_OpenDoor) == 0x000001, "Wrong alignment on Door_OpenDoor");
static_assert(sizeof(Door_OpenDoor) == 0x000001, "Wrong size on Door_OpenDoor");
static_assert(offsetof(Door_OpenDoor, bCounterClockwise) == 0x000000, "Member 'Door_OpenDoor::bCounterClockwise' has a wrong offset!");

// Function ObsidianFox.Door.OpenItemPicker
// 0x0008 (0x0008 - 0x0000)
struct Door_OpenItemPicker final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_OpenItemPicker) == 0x000008, "Wrong alignment on Door_OpenItemPicker");
static_assert(sizeof(Door_OpenItemPicker) == 0x000008, "Wrong size on Door_OpenItemPicker");
static_assert(offsetof(Door_OpenItemPicker, InteractingCharacter) == 0x000000, "Member 'Door_OpenItemPicker::InteractingCharacter' has a wrong offset!");

// Function ObsidianFox.Door.OverrideTimelineCurve
// 0x0010 (0x0010 - 0x0000)
struct Door_OverrideTimelineCurve final
{
public:
	EDoorTimelineActions                          InAction;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            InCurve;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_OverrideTimelineCurve) == 0x000008, "Wrong alignment on Door_OverrideTimelineCurve");
static_assert(sizeof(Door_OverrideTimelineCurve) == 0x000010, "Wrong size on Door_OverrideTimelineCurve");
static_assert(offsetof(Door_OverrideTimelineCurve, InAction) == 0x000000, "Member 'Door_OverrideTimelineCurve::InAction' has a wrong offset!");
static_assert(offsetof(Door_OverrideTimelineCurve, InCurve) == 0x000008, "Member 'Door_OverrideTimelineCurve::InCurve' has a wrong offset!");

// Function ObsidianFox.Door.PlayerGuidanceSystemUpdatedHandler
// 0x0002 (0x0002 - 0x0000)
struct Door_PlayerGuidanceSystemUpdatedHandler final
{
public:
	EPlayerGuidanceSystem                         System;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bState;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_PlayerGuidanceSystemUpdatedHandler) == 0x000001, "Wrong alignment on Door_PlayerGuidanceSystemUpdatedHandler");
static_assert(sizeof(Door_PlayerGuidanceSystemUpdatedHandler) == 0x000002, "Wrong size on Door_PlayerGuidanceSystemUpdatedHandler");
static_assert(offsetof(Door_PlayerGuidanceSystemUpdatedHandler, System) == 0x000000, "Member 'Door_PlayerGuidanceSystemUpdatedHandler::System' has a wrong offset!");
static_assert(offsetof(Door_PlayerGuidanceSystemUpdatedHandler, bState) == 0x000001, "Member 'Door_PlayerGuidanceSystemUpdatedHandler::bState' has a wrong offset!");

// Function ObsidianFox.Door.PlayerOverlappedTriggerBox
// 0x00A8 (0x00A8 - 0x0000)
struct Door_PlayerOverlappedTriggerBox final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_PlayerOverlappedTriggerBox) == 0x000008, "Wrong alignment on Door_PlayerOverlappedTriggerBox");
static_assert(sizeof(Door_PlayerOverlappedTriggerBox) == 0x0000A8, "Wrong size on Door_PlayerOverlappedTriggerBox");
static_assert(offsetof(Door_PlayerOverlappedTriggerBox, OverlappedComponent) == 0x000000, "Member 'Door_PlayerOverlappedTriggerBox::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Door_PlayerOverlappedTriggerBox, OtherActor) == 0x000008, "Member 'Door_PlayerOverlappedTriggerBox::OtherActor' has a wrong offset!");
static_assert(offsetof(Door_PlayerOverlappedTriggerBox, OtherComp) == 0x000010, "Member 'Door_PlayerOverlappedTriggerBox::OtherComp' has a wrong offset!");
static_assert(offsetof(Door_PlayerOverlappedTriggerBox, OtherBodyIndex) == 0x000018, "Member 'Door_PlayerOverlappedTriggerBox::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Door_PlayerOverlappedTriggerBox, bFromSweep) == 0x00001C, "Member 'Door_PlayerOverlappedTriggerBox::bFromSweep' has a wrong offset!");
static_assert(offsetof(Door_PlayerOverlappedTriggerBox, SweepResult) == 0x000020, "Member 'Door_PlayerOverlappedTriggerBox::SweepResult' has a wrong offset!");

// Function ObsidianFox.Door.PlayMontage
// 0x0018 (0x0018 - 0x0000)
struct Door_PlayMontage final
{
public:
	const class USkeletalMeshComponent*           InSkeletalMesh;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimMontage*                     MontageToPlay;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartingSection;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_PlayMontage) == 0x000008, "Wrong alignment on Door_PlayMontage");
static_assert(sizeof(Door_PlayMontage) == 0x000018, "Wrong size on Door_PlayMontage");
static_assert(offsetof(Door_PlayMontage, InSkeletalMesh) == 0x000000, "Member 'Door_PlayMontage::InSkeletalMesh' has a wrong offset!");
static_assert(offsetof(Door_PlayMontage, MontageToPlay) == 0x000008, "Member 'Door_PlayMontage::MontageToPlay' has a wrong offset!");
static_assert(offsetof(Door_PlayMontage, StartingSection) == 0x000010, "Member 'Door_PlayMontage::StartingSection' has a wrong offset!");

// Function ObsidianFox.Door.PlayOpenAnimation
// 0x0010 (0x0010 - 0x0000)
struct Door_PlayOpenAnimation final
{
public:
	const class ACharacter*                       InteractingCharacter;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AnimationTagOpen_0;                                // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_PlayOpenAnimation) == 0x000008, "Wrong alignment on Door_PlayOpenAnimation");
static_assert(sizeof(Door_PlayOpenAnimation) == 0x000010, "Wrong size on Door_PlayOpenAnimation");
static_assert(offsetof(Door_PlayOpenAnimation, InteractingCharacter) == 0x000000, "Member 'Door_PlayOpenAnimation::InteractingCharacter' has a wrong offset!");
static_assert(offsetof(Door_PlayOpenAnimation, AnimationTagOpen_0) == 0x000008, "Member 'Door_PlayOpenAnimation::AnimationTagOpen_0' has a wrong offset!");

// Function ObsidianFox.Door.PlayTimeline
// 0x0001 (0x0001 - 0x0000)
struct Door_PlayTimeline final
{
public:
	EDoorTimelineActions                          InTimeLineAction;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_PlayTimeline) == 0x000001, "Wrong alignment on Door_PlayTimeline");
static_assert(sizeof(Door_PlayTimeline) == 0x000001, "Wrong size on Door_PlayTimeline");
static_assert(offsetof(Door_PlayTimeline, InTimeLineAction) == 0x000000, "Member 'Door_PlayTimeline::InTimeLineAction' has a wrong offset!");

// Function ObsidianFox.Door.SetAnimationPlayRate
// 0x0004 (0x0004 - 0x0000)
struct Door_SetAnimationPlayRate final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_SetAnimationPlayRate) == 0x000004, "Wrong alignment on Door_SetAnimationPlayRate");
static_assert(sizeof(Door_SetAnimationPlayRate) == 0x000004, "Wrong size on Door_SetAnimationPlayRate");
static_assert(offsetof(Door_SetAnimationPlayRate, PlayRate) == 0x000000, "Member 'Door_SetAnimationPlayRate::PlayRate' has a wrong offset!");

// Function ObsidianFox.Door.SetClockWiseOpening
// 0x0001 (0x0001 - 0x0000)
struct Door_SetClockWiseOpening final
{
public:
	bool                                          bClockwise;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_SetClockWiseOpening) == 0x000001, "Wrong alignment on Door_SetClockWiseOpening");
static_assert(sizeof(Door_SetClockWiseOpening) == 0x000001, "Wrong size on Door_SetClockWiseOpening");
static_assert(offsetof(Door_SetClockWiseOpening, bClockwise) == 0x000000, "Member 'Door_SetClockWiseOpening::bClockwise' has a wrong offset!");

// Function ObsidianFox.Door.SetCosmeticsForLockState
// 0x0001 (0x0001 - 0x0000)
struct Door_SetCosmeticsForLockState final
{
public:
	EDoorLockState                                InLockState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_SetCosmeticsForLockState) == 0x000001, "Wrong alignment on Door_SetCosmeticsForLockState");
static_assert(sizeof(Door_SetCosmeticsForLockState) == 0x000001, "Wrong size on Door_SetCosmeticsForLockState");
static_assert(offsetof(Door_SetCosmeticsForLockState, InLockState) == 0x000000, "Member 'Door_SetCosmeticsForLockState::InLockState' has a wrong offset!");

// Function ObsidianFox.Door.SetDoorBoltSound
// 0x0028 (0x0028 - 0x0000)
struct Door_SetDoorBoltSound final
{
public:
	TSoftObjectPtr<class UFMODEvent>              Value;                                             // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_SetDoorBoltSound) == 0x000008, "Wrong alignment on Door_SetDoorBoltSound");
static_assert(sizeof(Door_SetDoorBoltSound) == 0x000028, "Wrong size on Door_SetDoorBoltSound");
static_assert(offsetof(Door_SetDoorBoltSound, Value) == 0x000000, "Member 'Door_SetDoorBoltSound::Value' has a wrong offset!");

// Function ObsidianFox.Door.SetDoorClosedEndSound
// 0x0028 (0x0028 - 0x0000)
struct Door_SetDoorClosedEndSound final
{
public:
	TSoftObjectPtr<class UFMODEvent>              Value;                                             // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_SetDoorClosedEndSound) == 0x000008, "Wrong alignment on Door_SetDoorClosedEndSound");
static_assert(sizeof(Door_SetDoorClosedEndSound) == 0x000028, "Wrong size on Door_SetDoorClosedEndSound");
static_assert(offsetof(Door_SetDoorClosedEndSound, Value) == 0x000000, "Member 'Door_SetDoorClosedEndSound::Value' has a wrong offset!");

// Function ObsidianFox.Door.SetDoorClosingSound
// 0x0028 (0x0028 - 0x0000)
struct Door_SetDoorClosingSound final
{
public:
	TSoftObjectPtr<class UFMODEvent>              Value;                                             // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_SetDoorClosingSound) == 0x000008, "Wrong alignment on Door_SetDoorClosingSound");
static_assert(sizeof(Door_SetDoorClosingSound) == 0x000028, "Wrong size on Door_SetDoorClosingSound");
static_assert(offsetof(Door_SetDoorClosingSound, Value) == 0x000000, "Member 'Door_SetDoorClosingSound::Value' has a wrong offset!");

// Function ObsidianFox.Door.SetDoorKeySound
// 0x0028 (0x0028 - 0x0000)
struct Door_SetDoorKeySound final
{
public:
	TSoftObjectPtr<class UFMODEvent>              Value;                                             // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_SetDoorKeySound) == 0x000008, "Wrong alignment on Door_SetDoorKeySound");
static_assert(sizeof(Door_SetDoorKeySound) == 0x000028, "Wrong size on Door_SetDoorKeySound");
static_assert(offsetof(Door_SetDoorKeySound, Value) == 0x000000, "Member 'Door_SetDoorKeySound::Value' has a wrong offset!");

// Function ObsidianFox.Door.SetDoorLockedSound
// 0x0028 (0x0028 - 0x0000)
struct Door_SetDoorLockedSound final
{
public:
	TSoftObjectPtr<class UFMODEvent>              Value;                                             // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_SetDoorLockedSound) == 0x000008, "Wrong alignment on Door_SetDoorLockedSound");
static_assert(sizeof(Door_SetDoorLockedSound) == 0x000028, "Wrong size on Door_SetDoorLockedSound");
static_assert(offsetof(Door_SetDoorLockedSound, Value) == 0x000000, "Member 'Door_SetDoorLockedSound::Value' has a wrong offset!");

// Function ObsidianFox.Door.SetDoorOpenSound
// 0x0028 (0x0028 - 0x0000)
struct Door_SetDoorOpenSound final
{
public:
	TSoftObjectPtr<class UFMODEvent>              Value;                                             // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_SetDoorOpenSound) == 0x000008, "Wrong alignment on Door_SetDoorOpenSound");
static_assert(sizeof(Door_SetDoorOpenSound) == 0x000028, "Wrong size on Door_SetDoorOpenSound");
static_assert(offsetof(Door_SetDoorOpenSound, Value) == 0x000000, "Member 'Door_SetDoorOpenSound::Value' has a wrong offset!");

// Function ObsidianFox.Door.SetDoorSprintOpenSound
// 0x0028 (0x0028 - 0x0000)
struct Door_SetDoorSprintOpenSound final
{
public:
	TSoftObjectPtr<class UFMODEvent>              Value;                                             // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_SetDoorSprintOpenSound) == 0x000008, "Wrong alignment on Door_SetDoorSprintOpenSound");
static_assert(sizeof(Door_SetDoorSprintOpenSound) == 0x000028, "Wrong size on Door_SetDoorSprintOpenSound");
static_assert(offsetof(Door_SetDoorSprintOpenSound, Value) == 0x000000, "Member 'Door_SetDoorSprintOpenSound::Value' has a wrong offset!");

// Function ObsidianFox.Door.SetEnableSprintOpen
// 0x0001 (0x0001 - 0x0000)
struct Door_SetEnableSprintOpen final
{
public:
	bool                                          bSprintOpenEnable;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_SetEnableSprintOpen) == 0x000001, "Wrong alignment on Door_SetEnableSprintOpen");
static_assert(sizeof(Door_SetEnableSprintOpen) == 0x000001, "Wrong size on Door_SetEnableSprintOpen");
static_assert(offsetof(Door_SetEnableSprintOpen, bSprintOpenEnable) == 0x000000, "Member 'Door_SetEnableSprintOpen::bSprintOpenEnable' has a wrong offset!");

// Function ObsidianFox.Door.SetLockState
// 0x0001 (0x0001 - 0x0000)
struct Door_SetLockState final
{
public:
	EDoorLockState                                NewLockState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_SetLockState) == 0x000001, "Wrong alignment on Door_SetLockState");
static_assert(sizeof(Door_SetLockState) == 0x000001, "Wrong size on Door_SetLockState");
static_assert(offsetof(Door_SetLockState, NewLockState) == 0x000000, "Member 'Door_SetLockState::NewLockState' has a wrong offset!");

// Function ObsidianFox.Door.SetLockState_Direct_Deprecated
// 0x0001 (0x0001 - 0x0000)
struct Door_SetLockState_Direct_Deprecated final
{
public:
	EDoorLockState                                NewLockState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_SetLockState_Direct_Deprecated) == 0x000001, "Wrong alignment on Door_SetLockState_Direct_Deprecated");
static_assert(sizeof(Door_SetLockState_Direct_Deprecated) == 0x000001, "Wrong size on Door_SetLockState_Direct_Deprecated");
static_assert(offsetof(Door_SetLockState_Direct_Deprecated, NewLockState) == 0x000000, "Member 'Door_SetLockState_Direct_Deprecated::NewLockState' has a wrong offset!");

// Function ObsidianFox.Door.SetOpenCurve
// 0x0010 (0x0010 - 0x0000)
struct Door_SetOpenCurve final
{
public:
	struct FDoorCurveDataPair                     NewOpenCurve;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_SetOpenCurve) == 0x000008, "Wrong alignment on Door_SetOpenCurve");
static_assert(sizeof(Door_SetOpenCurve) == 0x000010, "Wrong size on Door_SetOpenCurve");
static_assert(offsetof(Door_SetOpenCurve, NewOpenCurve) == 0x000000, "Member 'Door_SetOpenCurve::NewOpenCurve' has a wrong offset!");

// Function ObsidianFox.Door.SetSprintOpenCurve
// 0x0008 (0x0008 - 0x0000)
struct Door_SetSprintOpenCurve final
{
public:
	class UCurveFloat*                            NewSprintOpenCurve;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_SetSprintOpenCurve) == 0x000008, "Wrong alignment on Door_SetSprintOpenCurve");
static_assert(sizeof(Door_SetSprintOpenCurve) == 0x000008, "Wrong size on Door_SetSprintOpenCurve");
static_assert(offsetof(Door_SetSprintOpenCurve, NewSprintOpenCurve) == 0x000000, "Member 'Door_SetSprintOpenCurve::NewSprintOpenCurve' has a wrong offset!");

// Function ObsidianFox.Door.SetupTimelineAction
// 0x0018 (0x0018 - 0x0000)
struct Door_SetupTimelineAction final
{
public:
	EDoorTimelineActions                          TimelineAction;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InTimelineName;                                    // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            InCurve;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_SetupTimelineAction) == 0x000008, "Wrong alignment on Door_SetupTimelineAction");
static_assert(sizeof(Door_SetupTimelineAction) == 0x000018, "Wrong size on Door_SetupTimelineAction");
static_assert(offsetof(Door_SetupTimelineAction, TimelineAction) == 0x000000, "Member 'Door_SetupTimelineAction::TimelineAction' has a wrong offset!");
static_assert(offsetof(Door_SetupTimelineAction, InTimelineName) == 0x000004, "Member 'Door_SetupTimelineAction::InTimelineName' has a wrong offset!");
static_assert(offsetof(Door_SetupTimelineAction, InCurve) == 0x000010, "Member 'Door_SetupTimelineAction::InCurve' has a wrong offset!");

// Function ObsidianFox.Door.SetUseAsTrigger
// 0x0001 (0x0001 - 0x0000)
struct Door_SetUseAsTrigger final
{
public:
	bool                                          bInUseAsTrigger;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_SetUseAsTrigger) == 0x000001, "Wrong alignment on Door_SetUseAsTrigger");
static_assert(sizeof(Door_SetUseAsTrigger) == 0x000001, "Wrong size on Door_SetUseAsTrigger");
static_assert(offsetof(Door_SetUseAsTrigger, bInUseAsTrigger) == 0x000000, "Member 'Door_SetUseAsTrigger::bInUseAsTrigger' has a wrong offset!");

// Function ObsidianFox.Door.SetUseClosingTimer
// 0x0001 (0x0001 - 0x0000)
struct Door_SetUseClosingTimer final
{
public:
	bool                                          bInUseClosingTimer;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_SetUseClosingTimer) == 0x000001, "Wrong alignment on Door_SetUseClosingTimer");
static_assert(sizeof(Door_SetUseClosingTimer) == 0x000001, "Wrong size on Door_SetUseClosingTimer");
static_assert(offsetof(Door_SetUseClosingTimer, bInUseClosingTimer) == 0x000000, "Member 'Door_SetUseClosingTimer::bInUseClosingTimer' has a wrong offset!");

// Function ObsidianFox.Door.StartDoorHandleTimeLine
// 0x0018 (0x0018 - 0x0000)
struct Door_StartDoorHandleTimeLine final
{
public:
	EDoorOpenType                                 OpenType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class ACharacter*                       InteractingCharacter;                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoorIsLocked;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Door_StartDoorHandleTimeLine) == 0x000008, "Wrong alignment on Door_StartDoorHandleTimeLine");
static_assert(sizeof(Door_StartDoorHandleTimeLine) == 0x000018, "Wrong size on Door_StartDoorHandleTimeLine");
static_assert(offsetof(Door_StartDoorHandleTimeLine, OpenType) == 0x000000, "Member 'Door_StartDoorHandleTimeLine::OpenType' has a wrong offset!");
static_assert(offsetof(Door_StartDoorHandleTimeLine, InteractingCharacter) == 0x000008, "Member 'Door_StartDoorHandleTimeLine::InteractingCharacter' has a wrong offset!");
static_assert(offsetof(Door_StartDoorHandleTimeLine, bDoorIsLocked) == 0x000010, "Member 'Door_StartDoorHandleTimeLine::bDoorIsLocked' has a wrong offset!");

// Function ObsidianFox.Door.StartLockedDoorTimeline
// 0x0018 (0x0018 - 0x0000)
struct Door_StartLockedDoorTimeline final
{
public:
	EDoorOpenType                                 OpenType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class ACharacter*                       InteractingCharacter;                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayHandleAnimations;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Door_StartLockedDoorTimeline) == 0x000008, "Wrong alignment on Door_StartLockedDoorTimeline");
static_assert(sizeof(Door_StartLockedDoorTimeline) == 0x000018, "Wrong size on Door_StartLockedDoorTimeline");
static_assert(offsetof(Door_StartLockedDoorTimeline, OpenType) == 0x000000, "Member 'Door_StartLockedDoorTimeline::OpenType' has a wrong offset!");
static_assert(offsetof(Door_StartLockedDoorTimeline, InteractingCharacter) == 0x000008, "Member 'Door_StartLockedDoorTimeline::InteractingCharacter' has a wrong offset!");
static_assert(offsetof(Door_StartLockedDoorTimeline, bPlayHandleAnimations) == 0x000010, "Member 'Door_StartLockedDoorTimeline::bPlayHandleAnimations' has a wrong offset!");

// Function ObsidianFox.Door.StartOpenDoorTimeLine
// 0x0018 (0x0018 - 0x0000)
struct Door_StartOpenDoorTimeLine final
{
public:
	EDoorOpenType                                 OpenType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class ACharacter*                       InteractingCharacter;                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayHandleAnimations;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Door_StartOpenDoorTimeLine) == 0x000008, "Wrong alignment on Door_StartOpenDoorTimeLine");
static_assert(sizeof(Door_StartOpenDoorTimeLine) == 0x000018, "Wrong size on Door_StartOpenDoorTimeLine");
static_assert(offsetof(Door_StartOpenDoorTimeLine, OpenType) == 0x000000, "Member 'Door_StartOpenDoorTimeLine::OpenType' has a wrong offset!");
static_assert(offsetof(Door_StartOpenDoorTimeLine, InteractingCharacter) == 0x000008, "Member 'Door_StartOpenDoorTimeLine::InteractingCharacter' has a wrong offset!");
static_assert(offsetof(Door_StartOpenDoorTimeLine, bPlayHandleAnimations) == 0x000010, "Member 'Door_StartOpenDoorTimeLine::bPlayHandleAnimations' has a wrong offset!");

// Function ObsidianFox.Door.StartWaitingForLevelsToLoad
// 0x0010 (0x0010 - 0x0000)
struct Door_StartWaitingForLevelsToLoad final
{
public:
	float                                         SlowDownTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                LoadingThrobberWidgetClass;                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_StartWaitingForLevelsToLoad) == 0x000008, "Wrong alignment on Door_StartWaitingForLevelsToLoad");
static_assert(sizeof(Door_StartWaitingForLevelsToLoad) == 0x000010, "Wrong size on Door_StartWaitingForLevelsToLoad");
static_assert(offsetof(Door_StartWaitingForLevelsToLoad, SlowDownTime) == 0x000000, "Member 'Door_StartWaitingForLevelsToLoad::SlowDownTime' has a wrong offset!");
static_assert(offsetof(Door_StartWaitingForLevelsToLoad, LoadingThrobberWidgetClass) == 0x000008, "Member 'Door_StartWaitingForLevelsToLoad::LoadingThrobberWidgetClass' has a wrong offset!");

// Function ObsidianFox.Door.StopDoorTimeline
// 0x0001 (0x0001 - 0x0000)
struct Door_StopDoorTimeline final
{
public:
	EDoorTimelineActions                          TimelineToStop;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_StopDoorTimeline) == 0x000001, "Wrong alignment on Door_StopDoorTimeline");
static_assert(sizeof(Door_StopDoorTimeline) == 0x000001, "Wrong size on Door_StopDoorTimeline");
static_assert(offsetof(Door_StopDoorTimeline, TimelineToStop) == 0x000000, "Member 'Door_StopDoorTimeline::TimelineToStop' has a wrong offset!");

// Function ObsidianFox.Door.StopTimeline
// 0x0001 (0x0001 - 0x0000)
struct Door_StopTimeline final
{
public:
	EDoorTimelineActions                          InTimeLineAction;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_StopTimeline) == 0x000001, "Wrong alignment on Door_StopTimeline");
static_assert(sizeof(Door_StopTimeline) == 0x000001, "Wrong size on Door_StopTimeline");
static_assert(offsetof(Door_StopTimeline, InTimeLineAction) == 0x000000, "Member 'Door_StopTimeline::InTimeLineAction' has a wrong offset!");

// Function ObsidianFox.Door.UnBoltDoor
// 0x0008 (0x0008 - 0x0000)
struct Door_UnBoltDoor final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_UnBoltDoor) == 0x000008, "Wrong alignment on Door_UnBoltDoor");
static_assert(sizeof(Door_UnBoltDoor) == 0x000008, "Wrong size on Door_UnBoltDoor");
static_assert(offsetof(Door_UnBoltDoor, InteractingCharacter) == 0x000000, "Member 'Door_UnBoltDoor::InteractingCharacter' has a wrong offset!");

// Function ObsidianFox.Door.UpdateClockwiseOpening
// 0x0001 (0x0001 - 0x0000)
struct Door_UpdateClockwiseOpening final
{
public:
	bool                                          bClockwiseOpeningPosition;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_UpdateClockwiseOpening) == 0x000001, "Wrong alignment on Door_UpdateClockwiseOpening");
static_assert(sizeof(Door_UpdateClockwiseOpening) == 0x000001, "Wrong size on Door_UpdateClockwiseOpening");
static_assert(offsetof(Door_UpdateClockwiseOpening, bClockwiseOpeningPosition) == 0x000000, "Member 'Door_UpdateClockwiseOpening::bClockwiseOpeningPosition' has a wrong offset!");

// Function ObsidianFox.Door.IsDoorClosing
// 0x0001 (0x0001 - 0x0000)
struct Door_IsDoorClosing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_IsDoorClosing) == 0x000001, "Wrong alignment on Door_IsDoorClosing");
static_assert(sizeof(Door_IsDoorClosing) == 0x000001, "Wrong size on Door_IsDoorClosing");
static_assert(offsetof(Door_IsDoorClosing, ReturnValue) == 0x000000, "Member 'Door_IsDoorClosing::ReturnValue' has a wrong offset!");

// Function ObsidianFox.Door.IsDoorOpen
// 0x0001 (0x0001 - 0x0000)
struct Door_IsDoorOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_IsDoorOpen) == 0x000001, "Wrong alignment on Door_IsDoorOpen");
static_assert(sizeof(Door_IsDoorOpen) == 0x000001, "Wrong size on Door_IsDoorOpen");
static_assert(offsetof(Door_IsDoorOpen, ReturnValue) == 0x000000, "Member 'Door_IsDoorOpen::ReturnValue' has a wrong offset!");

// Function ObsidianFox.Door.IsPlayingTimeline
// 0x0002 (0x0002 - 0x0000)
struct Door_IsPlayingTimeline final
{
public:
	EDoorTimelineActions                          InTimeLineAction;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_IsPlayingTimeline) == 0x000001, "Wrong alignment on Door_IsPlayingTimeline");
static_assert(sizeof(Door_IsPlayingTimeline) == 0x000002, "Wrong size on Door_IsPlayingTimeline");
static_assert(offsetof(Door_IsPlayingTimeline, InTimeLineAction) == 0x000000, "Member 'Door_IsPlayingTimeline::InTimeLineAction' has a wrong offset!");
static_assert(offsetof(Door_IsPlayingTimeline, ReturnValue) == 0x000001, "Member 'Door_IsPlayingTimeline::ReturnValue' has a wrong offset!");

// Function ObsidianFox.Door.ShouldLevelsBeLoadedBeforeOpeningDoor
// 0x0001 (0x0001 - 0x0000)
struct Door_ShouldLevelsBeLoadedBeforeOpeningDoor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_ShouldLevelsBeLoadedBeforeOpeningDoor) == 0x000001, "Wrong alignment on Door_ShouldLevelsBeLoadedBeforeOpeningDoor");
static_assert(sizeof(Door_ShouldLevelsBeLoadedBeforeOpeningDoor) == 0x000001, "Wrong size on Door_ShouldLevelsBeLoadedBeforeOpeningDoor");
static_assert(offsetof(Door_ShouldLevelsBeLoadedBeforeOpeningDoor, ReturnValue) == 0x000000, "Member 'Door_ShouldLevelsBeLoadedBeforeOpeningDoor::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ItemData.GetTextureSizeFromDisplayInfo
// 0x00D8 (0x00D8 - 0x0000)
struct ItemData_GetTextureSizeFromDisplayInfo final
{
public:
	struct FItemDisplayInfo                       Info;                                              // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x00D0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemData_GetTextureSizeFromDisplayInfo) == 0x000008, "Wrong alignment on ItemData_GetTextureSizeFromDisplayInfo");
static_assert(sizeof(ItemData_GetTextureSizeFromDisplayInfo) == 0x0000D8, "Wrong size on ItemData_GetTextureSizeFromDisplayInfo");
static_assert(offsetof(ItemData_GetTextureSizeFromDisplayInfo, Info) == 0x000000, "Member 'ItemData_GetTextureSizeFromDisplayInfo::Info' has a wrong offset!");
static_assert(offsetof(ItemData_GetTextureSizeFromDisplayInfo, ReturnValue) == 0x0000D0, "Member 'ItemData_GetTextureSizeFromDisplayInfo::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ItemData.GetMesh
// 0x0008 (0x0008 - 0x0000)
struct ItemData_GetMesh final
{
public:
	class UStaticMesh*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemData_GetMesh) == 0x000008, "Wrong alignment on ItemData_GetMesh");
static_assert(sizeof(ItemData_GetMesh) == 0x000008, "Wrong size on ItemData_GetMesh");
static_assert(offsetof(ItemData_GetMesh, ReturnValue) == 0x000000, "Member 'ItemData_GetMesh::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ItemData.GetPickupSoundEvent
// 0x0008 (0x0008 - 0x0000)
struct ItemData_GetPickupSoundEvent final
{
public:
	class UFMODEvent*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemData_GetPickupSoundEvent) == 0x000008, "Wrong alignment on ItemData_GetPickupSoundEvent");
static_assert(sizeof(ItemData_GetPickupSoundEvent) == 0x000008, "Wrong size on ItemData_GetPickupSoundEvent");
static_assert(offsetof(ItemData_GetPickupSoundEvent, ReturnValue) == 0x000000, "Member 'ItemData_GetPickupSoundEvent::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ItemData.GetDisplayInfoAtIndex
// 0x00D8 (0x00D8 - 0x0000)
struct ItemData_GetDisplayInfoAtIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemDisplayInfo                       ReturnValue;                                       // 0x0008(0x00D0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemData_GetDisplayInfoAtIndex) == 0x000008, "Wrong alignment on ItemData_GetDisplayInfoAtIndex");
static_assert(sizeof(ItemData_GetDisplayInfoAtIndex) == 0x0000D8, "Wrong size on ItemData_GetDisplayInfoAtIndex");
static_assert(offsetof(ItemData_GetDisplayInfoAtIndex, Index_0) == 0x000000, "Member 'ItemData_GetDisplayInfoAtIndex::Index_0' has a wrong offset!");
static_assert(offsetof(ItemData_GetDisplayInfoAtIndex, ReturnValue) == 0x000008, "Member 'ItemData_GetDisplayInfoAtIndex::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ItemData.GetFirstItemDisplayInfo
// 0x00D0 (0x00D0 - 0x0000)
struct ItemData_GetFirstItemDisplayInfo final
{
public:
	struct FItemDisplayInfo                       ReturnValue;                                       // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemData_GetFirstItemDisplayInfo) == 0x000008, "Wrong alignment on ItemData_GetFirstItemDisplayInfo");
static_assert(sizeof(ItemData_GetFirstItemDisplayInfo) == 0x0000D0, "Wrong size on ItemData_GetFirstItemDisplayInfo");
static_assert(offsetof(ItemData_GetFirstItemDisplayInfo, ReturnValue) == 0x000000, "Member 'ItemData_GetFirstItemDisplayInfo::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ItemData.GetNextDisplayInfoIndexOfASet
// 0x0008 (0x0008 - 0x0000)
struct ItemData_GetNextDisplayInfoIndexOfASet final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemData_GetNextDisplayInfoIndexOfASet) == 0x000004, "Wrong alignment on ItemData_GetNextDisplayInfoIndexOfASet");
static_assert(sizeof(ItemData_GetNextDisplayInfoIndexOfASet) == 0x000008, "Wrong size on ItemData_GetNextDisplayInfoIndexOfASet");
static_assert(offsetof(ItemData_GetNextDisplayInfoIndexOfASet, Index_0) == 0x000000, "Member 'ItemData_GetNextDisplayInfoIndexOfASet::Index_0' has a wrong offset!");
static_assert(offsetof(ItemData_GetNextDisplayInfoIndexOfASet, ReturnValue) == 0x000004, "Member 'ItemData_GetNextDisplayInfoIndexOfASet::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ItemData.GetNumItemDisplayInfos
// 0x0004 (0x0004 - 0x0000)
struct ItemData_GetNumItemDisplayInfos final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemData_GetNumItemDisplayInfos) == 0x000004, "Wrong alignment on ItemData_GetNumItemDisplayInfos");
static_assert(sizeof(ItemData_GetNumItemDisplayInfos) == 0x000004, "Wrong size on ItemData_GetNumItemDisplayInfos");
static_assert(offsetof(ItemData_GetNumItemDisplayInfos, ReturnValue) == 0x000000, "Member 'ItemData_GetNumItemDisplayInfos::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ItemData.GetPreviousDisplayInfoIndexOfASet
// 0x0008 (0x0008 - 0x0000)
struct ItemData_GetPreviousDisplayInfoIndexOfASet final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemData_GetPreviousDisplayInfoIndexOfASet) == 0x000004, "Wrong alignment on ItemData_GetPreviousDisplayInfoIndexOfASet");
static_assert(sizeof(ItemData_GetPreviousDisplayInfoIndexOfASet) == 0x000008, "Wrong size on ItemData_GetPreviousDisplayInfoIndexOfASet");
static_assert(offsetof(ItemData_GetPreviousDisplayInfoIndexOfASet, Index_0) == 0x000000, "Member 'ItemData_GetPreviousDisplayInfoIndexOfASet::Index_0' has a wrong offset!");
static_assert(offsetof(ItemData_GetPreviousDisplayInfoIndexOfASet, ReturnValue) == 0x000004, "Member 'ItemData_GetPreviousDisplayInfoIndexOfASet::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ItemData.IsPartOfItems
// 0x0001 (0x0001 - 0x0000)
struct ItemData_IsPartOfItems final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemData_IsPartOfItems) == 0x000001, "Wrong alignment on ItemData_IsPartOfItems");
static_assert(sizeof(ItemData_IsPartOfItems) == 0x000001, "Wrong size on ItemData_IsPartOfItems");
static_assert(offsetof(ItemData_IsPartOfItems, ReturnValue) == 0x000000, "Member 'ItemData_IsPartOfItems::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ItemData.IsSetOfItems
// 0x0001 (0x0001 - 0x0000)
struct ItemData_IsSetOfItems final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemData_IsSetOfItems) == 0x000001, "Wrong alignment on ItemData_IsSetOfItems");
static_assert(sizeof(ItemData_IsSetOfItems) == 0x000001, "Wrong size on ItemData_IsSetOfItems");
static_assert(offsetof(ItemData_IsSetOfItems, ReturnValue) == 0x000000, "Member 'ItemData_IsSetOfItems::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ItemData.LifetimeIncludesProgressionTag
// 0x000C (0x000C - 0x0000)
struct ItemData_LifetimeIncludesProgressionTag final
{
public:
	struct FGameplayTag                           ProgressionTag;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemData_LifetimeIncludesProgressionTag) == 0x000004, "Wrong alignment on ItemData_LifetimeIncludesProgressionTag");
static_assert(sizeof(ItemData_LifetimeIncludesProgressionTag) == 0x00000C, "Wrong size on ItemData_LifetimeIncludesProgressionTag");
static_assert(offsetof(ItemData_LifetimeIncludesProgressionTag, ProgressionTag) == 0x000000, "Member 'ItemData_LifetimeIncludesProgressionTag::ProgressionTag' has a wrong offset!");
static_assert(offsetof(ItemData_LifetimeIncludesProgressionTag, ReturnValue) == 0x000008, "Member 'ItemData_LifetimeIncludesProgressionTag::ReturnValue' has a wrong offset!");

// Function ObsidianFox.DynamicConsumableSpawner.GetAmountOfItems
// 0x0004 (0x0004 - 0x0000)
struct DynamicConsumableSpawner_GetAmountOfItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicConsumableSpawner_GetAmountOfItems) == 0x000004, "Wrong alignment on DynamicConsumableSpawner_GetAmountOfItems");
static_assert(sizeof(DynamicConsumableSpawner_GetAmountOfItems) == 0x000004, "Wrong size on DynamicConsumableSpawner_GetAmountOfItems");
static_assert(offsetof(DynamicConsumableSpawner_GetAmountOfItems, ReturnValue) == 0x000000, "Member 'DynamicConsumableSpawner_GetAmountOfItems::ReturnValue' has a wrong offset!");

// Function ObsidianFox.DynamicEnvironmentZoneComponent.ActivateInteractionType
// 0x0001 (0x0001 - 0x0000)
struct DynamicEnvironmentZoneComponent_ActivateInteractionType final
{
public:
	EEnvironmentInteractionType                   Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentZoneComponent_ActivateInteractionType) == 0x000001, "Wrong alignment on DynamicEnvironmentZoneComponent_ActivateInteractionType");
static_assert(sizeof(DynamicEnvironmentZoneComponent_ActivateInteractionType) == 0x000001, "Wrong size on DynamicEnvironmentZoneComponent_ActivateInteractionType");
static_assert(offsetof(DynamicEnvironmentZoneComponent_ActivateInteractionType, Type) == 0x000000, "Member 'DynamicEnvironmentZoneComponent_ActivateInteractionType::Type' has a wrong offset!");

// Function ObsidianFox.DynamicEnvironmentZoneComponent.ClearLayerRenderTargets
// 0x00E0 (0x00E0 - 0x0000)
struct DynamicEnvironmentZoneComponent_ClearLayerRenderTargets final
{
public:
	struct FInteractionLayer                      InteractionLayer;                                  // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentZoneComponent_ClearLayerRenderTargets) == 0x000008, "Wrong alignment on DynamicEnvironmentZoneComponent_ClearLayerRenderTargets");
static_assert(sizeof(DynamicEnvironmentZoneComponent_ClearLayerRenderTargets) == 0x0000E0, "Wrong size on DynamicEnvironmentZoneComponent_ClearLayerRenderTargets");
static_assert(offsetof(DynamicEnvironmentZoneComponent_ClearLayerRenderTargets, InteractionLayer) == 0x000000, "Member 'DynamicEnvironmentZoneComponent_ClearLayerRenderTargets::InteractionLayer' has a wrong offset!");

// Function ObsidianFox.DynamicEnvironmentZoneComponent.DeactivateInteractionType
// 0x0001 (0x0001 - 0x0000)
struct DynamicEnvironmentZoneComponent_DeactivateInteractionType final
{
public:
	EEnvironmentInteractionType                   Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentZoneComponent_DeactivateInteractionType) == 0x000001, "Wrong alignment on DynamicEnvironmentZoneComponent_DeactivateInteractionType");
static_assert(sizeof(DynamicEnvironmentZoneComponent_DeactivateInteractionType) == 0x000001, "Wrong size on DynamicEnvironmentZoneComponent_DeactivateInteractionType");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DeactivateInteractionType, Type) == 0x000000, "Member 'DynamicEnvironmentZoneComponent_DeactivateInteractionType::Type' has a wrong offset!");

// Function ObsidianFox.DynamicEnvironmentZoneComponent.DEZInteraction
// 0x0048 (0x0048 - 0x0000)
struct DynamicEnvironmentZoneComponent_DEZInteraction final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEnvironmentInteractionType                   Type;                                              // 0x000C(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightAboveGround;                                 // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventTag;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawPerPixel;                                      // 0x0040(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicEnvironmentZoneComponent_DEZInteraction) == 0x000008, "Wrong alignment on DynamicEnvironmentZoneComponent_DEZInteraction");
static_assert(sizeof(DynamicEnvironmentZoneComponent_DEZInteraction) == 0x000048, "Wrong size on DynamicEnvironmentZoneComponent_DEZInteraction");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DEZInteraction, WorldLocation) == 0x000000, "Member 'DynamicEnvironmentZoneComponent_DEZInteraction::WorldLocation' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DEZInteraction, Type) == 0x00000C, "Member 'DynamicEnvironmentZoneComponent_DEZInteraction::Type' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DEZInteraction, Velocity) == 0x000010, "Member 'DynamicEnvironmentZoneComponent_DEZInteraction::Velocity' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DEZInteraction, Duration) == 0x00001C, "Member 'DynamicEnvironmentZoneComponent_DEZInteraction::Duration' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DEZInteraction, Size) == 0x000020, "Member 'DynamicEnvironmentZoneComponent_DEZInteraction::Size' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DEZInteraction, Strength) == 0x000024, "Member 'DynamicEnvironmentZoneComponent_DEZInteraction::Strength' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DEZInteraction, HeightAboveGround) == 0x000028, "Member 'DynamicEnvironmentZoneComponent_DEZInteraction::HeightAboveGround' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DEZInteraction, EventTag) == 0x000030, "Member 'DynamicEnvironmentZoneComponent_DEZInteraction::EventTag' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DEZInteraction, DrawPerPixel) == 0x000040, "Member 'DynamicEnvironmentZoneComponent_DEZInteraction::DrawPerPixel' has a wrong offset!");

// Function ObsidianFox.DynamicEnvironmentZoneComponent.DEZInteractionWithCustomMaterial
// 0x0050 (0x0050 - 0x0000)
struct DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     InteractionMat;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEnvironmentInteractionType                   Type;                                              // 0x0018(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x002C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightAboveGround;                                 // 0x0034(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventTag;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawPerPixel;                                      // 0x0048(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial) == 0x000008, "Wrong alignment on DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial");
static_assert(sizeof(DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial) == 0x000050, "Wrong size on DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial, WorldLocation) == 0x000000, "Member 'DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial::WorldLocation' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial, InteractionMat) == 0x000010, "Member 'DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial::InteractionMat' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial, Type) == 0x000018, "Member 'DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial::Type' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial, Velocity) == 0x00001C, "Member 'DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial::Velocity' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial, Duration) == 0x000028, "Member 'DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial::Duration' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial, Size) == 0x00002C, "Member 'DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial::Size' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial, Strength) == 0x000030, "Member 'DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial::Strength' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial, HeightAboveGround) == 0x000034, "Member 'DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial::HeightAboveGround' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial, EventTag) == 0x000038, "Member 'DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial::EventTag' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial, DrawPerPixel) == 0x000048, "Member 'DynamicEnvironmentZoneComponent_DEZInteractionWithCustomMaterial::DrawPerPixel' has a wrong offset!");

// Function ObsidianFox.DynamicEnvironmentZoneComponent.DrawMaterialToCanvas
// 0x0028 (0x0028 - 0x0000)
struct DynamicEnvironmentZoneComponent_DrawMaterialToCanvas final
{
public:
	class UCanvas*                                Canvas;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RelativeLocation;                                  // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CanvasWorldSize;                                   // 0x0020(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicEnvironmentZoneComponent_DrawMaterialToCanvas) == 0x000008, "Wrong alignment on DynamicEnvironmentZoneComponent_DrawMaterialToCanvas");
static_assert(sizeof(DynamicEnvironmentZoneComponent_DrawMaterialToCanvas) == 0x000028, "Wrong size on DynamicEnvironmentZoneComponent_DrawMaterialToCanvas");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DrawMaterialToCanvas, Canvas) == 0x000000, "Member 'DynamicEnvironmentZoneComponent_DrawMaterialToCanvas::Canvas' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DrawMaterialToCanvas, Material) == 0x000008, "Member 'DynamicEnvironmentZoneComponent_DrawMaterialToCanvas::Material' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DrawMaterialToCanvas, RelativeLocation) == 0x000010, "Member 'DynamicEnvironmentZoneComponent_DrawMaterialToCanvas::RelativeLocation' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DrawMaterialToCanvas, Size) == 0x000018, "Member 'DynamicEnvironmentZoneComponent_DrawMaterialToCanvas::Size' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentZoneComponent_DrawMaterialToCanvas, CanvasWorldSize) == 0x000020, "Member 'DynamicEnvironmentZoneComponent_DrawMaterialToCanvas::CanvasWorldSize' has a wrong offset!");

// Function ObsidianFox.DynamicEnvironmentZoneComponent.OnSwitchPlayerCharacter
// 0x0008 (0x0008 - 0x0000)
struct DynamicEnvironmentZoneComponent_OnSwitchPlayerCharacter final
{
public:
	const class AOFPlayerCharacter*               Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentZoneComponent_OnSwitchPlayerCharacter) == 0x000008, "Wrong alignment on DynamicEnvironmentZoneComponent_OnSwitchPlayerCharacter");
static_assert(sizeof(DynamicEnvironmentZoneComponent_OnSwitchPlayerCharacter) == 0x000008, "Wrong size on DynamicEnvironmentZoneComponent_OnSwitchPlayerCharacter");
static_assert(offsetof(DynamicEnvironmentZoneComponent_OnSwitchPlayerCharacter, Character) == 0x000000, "Member 'DynamicEnvironmentZoneComponent_OnSwitchPlayerCharacter::Character' has a wrong offset!");

// Function ObsidianFox.DynamicEnvironmentZoneComponent.SetTerrainType
// 0x0001 (0x0001 - 0x0000)
struct DynamicEnvironmentZoneComponent_SetTerrainType final
{
public:
	ETerrainMaterialType                          NewTerrainType;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentZoneComponent_SetTerrainType) == 0x000001, "Wrong alignment on DynamicEnvironmentZoneComponent_SetTerrainType");
static_assert(sizeof(DynamicEnvironmentZoneComponent_SetTerrainType) == 0x000001, "Wrong size on DynamicEnvironmentZoneComponent_SetTerrainType");
static_assert(offsetof(DynamicEnvironmentZoneComponent_SetTerrainType, NewTerrainType) == 0x000000, "Member 'DynamicEnvironmentZoneComponent_SetTerrainType::NewTerrainType' has a wrong offset!");

// Function ObsidianFox.DynamicEnvironmentZoneComponent.UpdateInteractionLayerRenderTargets
// 0x00E8 (0x00E8 - 0x0000)
struct DynamicEnvironmentZoneComponent_UpdateInteractionLayerRenderTargets final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInteractionLayer                      InteractionLayer;                                  // 0x0008(0x00E0)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentZoneComponent_UpdateInteractionLayerRenderTargets) == 0x000008, "Wrong alignment on DynamicEnvironmentZoneComponent_UpdateInteractionLayerRenderTargets");
static_assert(sizeof(DynamicEnvironmentZoneComponent_UpdateInteractionLayerRenderTargets) == 0x0000E8, "Wrong size on DynamicEnvironmentZoneComponent_UpdateInteractionLayerRenderTargets");
static_assert(offsetof(DynamicEnvironmentZoneComponent_UpdateInteractionLayerRenderTargets, DeltaTime) == 0x000000, "Member 'DynamicEnvironmentZoneComponent_UpdateInteractionLayerRenderTargets::DeltaTime' has a wrong offset!");
static_assert(offsetof(DynamicEnvironmentZoneComponent_UpdateInteractionLayerRenderTargets, InteractionLayer) == 0x000008, "Member 'DynamicEnvironmentZoneComponent_UpdateInteractionLayerRenderTargets::InteractionLayer' has a wrong offset!");

// Function ObsidianFox.DynamicEnvironmentZoneComponent.GetTerrainType
// 0x0001 (0x0001 - 0x0000)
struct DynamicEnvironmentZoneComponent_GetTerrainType final
{
public:
	ETerrainMaterialType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicEnvironmentZoneComponent_GetTerrainType) == 0x000001, "Wrong alignment on DynamicEnvironmentZoneComponent_GetTerrainType");
static_assert(sizeof(DynamicEnvironmentZoneComponent_GetTerrainType) == 0x000001, "Wrong size on DynamicEnvironmentZoneComponent_GetTerrainType");
static_assert(offsetof(DynamicEnvironmentZoneComponent_GetTerrainType, ReturnValue) == 0x000000, "Member 'DynamicEnvironmentZoneComponent_GetTerrainType::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_Abilities.AddLooseGameplayTag
// 0x0010 (0x0010 - 0x0000)
struct OFBFL_Abilities_AddLooseGameplayTag final
{
public:
	class AObsidianFoxCharacter*                  InOFCharacter;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InGameplayTag;                                     // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_Abilities_AddLooseGameplayTag) == 0x000008, "Wrong alignment on OFBFL_Abilities_AddLooseGameplayTag");
static_assert(sizeof(OFBFL_Abilities_AddLooseGameplayTag) == 0x000010, "Wrong size on OFBFL_Abilities_AddLooseGameplayTag");
static_assert(offsetof(OFBFL_Abilities_AddLooseGameplayTag, InOFCharacter) == 0x000000, "Member 'OFBFL_Abilities_AddLooseGameplayTag::InOFCharacter' has a wrong offset!");
static_assert(offsetof(OFBFL_Abilities_AddLooseGameplayTag, InGameplayTag) == 0x000008, "Member 'OFBFL_Abilities_AddLooseGameplayTag::InGameplayTag' has a wrong offset!");

// Function ObsidianFox.OFBFL_Abilities.GetPlayerAbilitySystemComponent
// 0x0058 (0x0058 - 0x0000)
struct OFBFL_Abilities_GetPlayerAbilitySystemComponent final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0048(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                ReturnValue;                                       // 0x0050(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_Abilities_GetPlayerAbilitySystemComponent) == 0x000008, "Wrong alignment on OFBFL_Abilities_GetPlayerAbilitySystemComponent");
static_assert(sizeof(OFBFL_Abilities_GetPlayerAbilitySystemComponent) == 0x000058, "Wrong size on OFBFL_Abilities_GetPlayerAbilitySystemComponent");
static_assert(offsetof(OFBFL_Abilities_GetPlayerAbilitySystemComponent, ActorInfo) == 0x000000, "Member 'OFBFL_Abilities_GetPlayerAbilitySystemComponent::ActorInfo' has a wrong offset!");
static_assert(offsetof(OFBFL_Abilities_GetPlayerAbilitySystemComponent, PlayerIndex) == 0x000048, "Member 'OFBFL_Abilities_GetPlayerAbilitySystemComponent::PlayerIndex' has a wrong offset!");
static_assert(offsetof(OFBFL_Abilities_GetPlayerAbilitySystemComponent, ReturnValue) == 0x000050, "Member 'OFBFL_Abilities_GetPlayerAbilitySystemComponent::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_Abilities.HandleWeakPoints
// 0x0048 (0x0048 - 0x0000)
struct OFBFL_Abilities_HandleWeakPoints final
{
public:
	class AOFEnemyCharacter*                      EnemyCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           ContextHandle;                                     // 0x0008(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	float                                         WeakPointDamage;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  SourceTags;                                        // 0x0028(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_Abilities_HandleWeakPoints) == 0x000008, "Wrong alignment on OFBFL_Abilities_HandleWeakPoints");
static_assert(sizeof(OFBFL_Abilities_HandleWeakPoints) == 0x000048, "Wrong size on OFBFL_Abilities_HandleWeakPoints");
static_assert(offsetof(OFBFL_Abilities_HandleWeakPoints, EnemyCharacter) == 0x000000, "Member 'OFBFL_Abilities_HandleWeakPoints::EnemyCharacter' has a wrong offset!");
static_assert(offsetof(OFBFL_Abilities_HandleWeakPoints, ContextHandle) == 0x000008, "Member 'OFBFL_Abilities_HandleWeakPoints::ContextHandle' has a wrong offset!");
static_assert(offsetof(OFBFL_Abilities_HandleWeakPoints, WeakPointDamage) == 0x000020, "Member 'OFBFL_Abilities_HandleWeakPoints::WeakPointDamage' has a wrong offset!");
static_assert(offsetof(OFBFL_Abilities_HandleWeakPoints, SourceTags) == 0x000028, "Member 'OFBFL_Abilities_HandleWeakPoints::SourceTags' has a wrong offset!");

// Function ObsidianFox.OFBFL_Abilities.RemoveLooseGameplayTag
// 0x0010 (0x0010 - 0x0000)
struct OFBFL_Abilities_RemoveLooseGameplayTag final
{
public:
	class AObsidianFoxCharacter*                  InOFCharacter;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InGameplayTag;                                     // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_Abilities_RemoveLooseGameplayTag) == 0x000008, "Wrong alignment on OFBFL_Abilities_RemoveLooseGameplayTag");
static_assert(sizeof(OFBFL_Abilities_RemoveLooseGameplayTag) == 0x000010, "Wrong size on OFBFL_Abilities_RemoveLooseGameplayTag");
static_assert(offsetof(OFBFL_Abilities_RemoveLooseGameplayTag, InOFCharacter) == 0x000000, "Member 'OFBFL_Abilities_RemoveLooseGameplayTag::InOFCharacter' has a wrong offset!");
static_assert(offsetof(OFBFL_Abilities_RemoveLooseGameplayTag, InGameplayTag) == 0x000008, "Member 'OFBFL_Abilities_RemoveLooseGameplayTag::InGameplayTag' has a wrong offset!");

// Function ObsidianFox.DynamicMaterialEffectsComponent.ChangeMaterialParameterOverTime
// 0x0010 (0x0010 - 0x0000)
struct DynamicMaterialEffectsComponent_ChangeMaterialParameterOverTime final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetValue;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeDuration;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicMaterialEffectsComponent_ChangeMaterialParameterOverTime) == 0x000004, "Wrong alignment on DynamicMaterialEffectsComponent_ChangeMaterialParameterOverTime");
static_assert(sizeof(DynamicMaterialEffectsComponent_ChangeMaterialParameterOverTime) == 0x000010, "Wrong size on DynamicMaterialEffectsComponent_ChangeMaterialParameterOverTime");
static_assert(offsetof(DynamicMaterialEffectsComponent_ChangeMaterialParameterOverTime, Name_0) == 0x000000, "Member 'DynamicMaterialEffectsComponent_ChangeMaterialParameterOverTime::Name_0' has a wrong offset!");
static_assert(offsetof(DynamicMaterialEffectsComponent_ChangeMaterialParameterOverTime, TargetValue) == 0x000008, "Member 'DynamicMaterialEffectsComponent_ChangeMaterialParameterOverTime::TargetValue' has a wrong offset!");
static_assert(offsetof(DynamicMaterialEffectsComponent_ChangeMaterialParameterOverTime, ChangeDuration) == 0x00000C, "Member 'DynamicMaterialEffectsComponent_ChangeMaterialParameterOverTime::ChangeDuration' has a wrong offset!");

// Function ObsidianFox.DynamicMaterialEffectsComponent.InterpScalarParameterOnMaterials
// 0x0018 (0x0018 - 0x0000)
struct DynamicMaterialEffectsComponent_InterpScalarParameterOnMaterials final
{
public:
	struct FMaterialParameterInfo                 ParameterInfo;                                     // 0x0000(0x0010)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetValue;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeDuration;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicMaterialEffectsComponent_InterpScalarParameterOnMaterials) == 0x000004, "Wrong alignment on DynamicMaterialEffectsComponent_InterpScalarParameterOnMaterials");
static_assert(sizeof(DynamicMaterialEffectsComponent_InterpScalarParameterOnMaterials) == 0x000018, "Wrong size on DynamicMaterialEffectsComponent_InterpScalarParameterOnMaterials");
static_assert(offsetof(DynamicMaterialEffectsComponent_InterpScalarParameterOnMaterials, ParameterInfo) == 0x000000, "Member 'DynamicMaterialEffectsComponent_InterpScalarParameterOnMaterials::ParameterInfo' has a wrong offset!");
static_assert(offsetof(DynamicMaterialEffectsComponent_InterpScalarParameterOnMaterials, TargetValue) == 0x000010, "Member 'DynamicMaterialEffectsComponent_InterpScalarParameterOnMaterials::TargetValue' has a wrong offset!");
static_assert(offsetof(DynamicMaterialEffectsComponent_InterpScalarParameterOnMaterials, ChangeDuration) == 0x000014, "Member 'DynamicMaterialEffectsComponent_InterpScalarParameterOnMaterials::ChangeDuration' has a wrong offset!");

// Function ObsidianFox.DynamicMaterialEffectsComponent.SetParameterOnMaterials
// 0x000C (0x000C - 0x0000)
struct DynamicMaterialEffectsComponent_SetParameterOnMaterials final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicMaterialEffectsComponent_SetParameterOnMaterials) == 0x000004, "Wrong alignment on DynamicMaterialEffectsComponent_SetParameterOnMaterials");
static_assert(sizeof(DynamicMaterialEffectsComponent_SetParameterOnMaterials) == 0x00000C, "Wrong size on DynamicMaterialEffectsComponent_SetParameterOnMaterials");
static_assert(offsetof(DynamicMaterialEffectsComponent_SetParameterOnMaterials, Name_0) == 0x000000, "Member 'DynamicMaterialEffectsComponent_SetParameterOnMaterials::Name_0' has a wrong offset!");
static_assert(offsetof(DynamicMaterialEffectsComponent_SetParameterOnMaterials, Value) == 0x000008, "Member 'DynamicMaterialEffectsComponent_SetParameterOnMaterials::Value' has a wrong offset!");

// Function ObsidianFox.DynamicMaterialEffectsComponent.SetScalarParameterOnMaterials
// 0x0014 (0x0014 - 0x0000)
struct DynamicMaterialEffectsComponent_SetScalarParameterOnMaterials final
{
public:
	struct FMaterialParameterInfo                 ParameterInfo;                                     // 0x0000(0x0010)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicMaterialEffectsComponent_SetScalarParameterOnMaterials) == 0x000004, "Wrong alignment on DynamicMaterialEffectsComponent_SetScalarParameterOnMaterials");
static_assert(sizeof(DynamicMaterialEffectsComponent_SetScalarParameterOnMaterials) == 0x000014, "Wrong size on DynamicMaterialEffectsComponent_SetScalarParameterOnMaterials");
static_assert(offsetof(DynamicMaterialEffectsComponent_SetScalarParameterOnMaterials, ParameterInfo) == 0x000000, "Member 'DynamicMaterialEffectsComponent_SetScalarParameterOnMaterials::ParameterInfo' has a wrong offset!");
static_assert(offsetof(DynamicMaterialEffectsComponent_SetScalarParameterOnMaterials, Value) == 0x000010, "Member 'DynamicMaterialEffectsComponent_SetScalarParameterOnMaterials::Value' has a wrong offset!");

// Function ObsidianFox.DynamicMaterialEffectsComponent.SetVectorParameterOnMaterial
// 0x0018 (0x0018 - 0x0000)
struct DynamicMaterialEffectsComponent_SetVectorParameterOnMaterial final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicMaterialEffectsComponent_SetVectorParameterOnMaterial) == 0x000004, "Wrong alignment on DynamicMaterialEffectsComponent_SetVectorParameterOnMaterial");
static_assert(sizeof(DynamicMaterialEffectsComponent_SetVectorParameterOnMaterial) == 0x000018, "Wrong size on DynamicMaterialEffectsComponent_SetVectorParameterOnMaterial");
static_assert(offsetof(DynamicMaterialEffectsComponent_SetVectorParameterOnMaterial, Name_0) == 0x000000, "Member 'DynamicMaterialEffectsComponent_SetVectorParameterOnMaterial::Name_0' has a wrong offset!");
static_assert(offsetof(DynamicMaterialEffectsComponent_SetVectorParameterOnMaterial, Value) == 0x000008, "Member 'DynamicMaterialEffectsComponent_SetVectorParameterOnMaterial::Value' has a wrong offset!");

// Function ObsidianFox.DynamicMaterialEffectsComponent.SetVectorParameterOnMaterials
// 0x0020 (0x0020 - 0x0000)
struct DynamicMaterialEffectsComponent_SetVectorParameterOnMaterials final
{
public:
	struct FMaterialParameterInfo                 ParameterInfo;                                     // 0x0000(0x0010)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicMaterialEffectsComponent_SetVectorParameterOnMaterials) == 0x000004, "Wrong alignment on DynamicMaterialEffectsComponent_SetVectorParameterOnMaterials");
static_assert(sizeof(DynamicMaterialEffectsComponent_SetVectorParameterOnMaterials) == 0x000020, "Wrong size on DynamicMaterialEffectsComponent_SetVectorParameterOnMaterials");
static_assert(offsetof(DynamicMaterialEffectsComponent_SetVectorParameterOnMaterials, ParameterInfo) == 0x000000, "Member 'DynamicMaterialEffectsComponent_SetVectorParameterOnMaterials::ParameterInfo' has a wrong offset!");
static_assert(offsetof(DynamicMaterialEffectsComponent_SetVectorParameterOnMaterials, Value) == 0x000010, "Member 'DynamicMaterialEffectsComponent_SetVectorParameterOnMaterials::Value' has a wrong offset!");

// Function ObsidianFox.DynamicMaterialEffectsComponent.StopChangesToParameter
// 0x0008 (0x0008 - 0x0000)
struct DynamicMaterialEffectsComponent_StopChangesToParameter final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicMaterialEffectsComponent_StopChangesToParameter) == 0x000004, "Wrong alignment on DynamicMaterialEffectsComponent_StopChangesToParameter");
static_assert(sizeof(DynamicMaterialEffectsComponent_StopChangesToParameter) == 0x000008, "Wrong size on DynamicMaterialEffectsComponent_StopChangesToParameter");
static_assert(offsetof(DynamicMaterialEffectsComponent_StopChangesToParameter, Name_0) == 0x000000, "Member 'DynamicMaterialEffectsComponent_StopChangesToParameter::Name_0' has a wrong offset!");

// Function ObsidianFox.DynamicMaterialEffectsComponent.StopParameterInterpolation
// 0x0010 (0x0010 - 0x0000)
struct DynamicMaterialEffectsComponent_StopParameterInterpolation final
{
public:
	struct FMaterialParameterInfo                 ParameterInfo;                                     // 0x0000(0x0010)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicMaterialEffectsComponent_StopParameterInterpolation) == 0x000004, "Wrong alignment on DynamicMaterialEffectsComponent_StopParameterInterpolation");
static_assert(sizeof(DynamicMaterialEffectsComponent_StopParameterInterpolation) == 0x000010, "Wrong size on DynamicMaterialEffectsComponent_StopParameterInterpolation");
static_assert(offsetof(DynamicMaterialEffectsComponent_StopParameterInterpolation, ParameterInfo) == 0x000000, "Member 'DynamicMaterialEffectsComponent_StopParameterInterpolation::ParameterInfo' has a wrong offset!");

// Function ObsidianFox.DynamicVectorFieldManager.AddBurstForceToVectorField
// 0x0014 (0x0014 - 0x0000)
struct DynamicVectorFieldManager_AddBurstForceToVectorField final
{
public:
	struct FVector                                ForceCenter;                                       // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicVectorFieldManager_AddBurstForceToVectorField) == 0x000004, "Wrong alignment on DynamicVectorFieldManager_AddBurstForceToVectorField");
static_assert(sizeof(DynamicVectorFieldManager_AddBurstForceToVectorField) == 0x000014, "Wrong size on DynamicVectorFieldManager_AddBurstForceToVectorField");
static_assert(offsetof(DynamicVectorFieldManager_AddBurstForceToVectorField, ForceCenter) == 0x000000, "Member 'DynamicVectorFieldManager_AddBurstForceToVectorField::ForceCenter' has a wrong offset!");
static_assert(offsetof(DynamicVectorFieldManager_AddBurstForceToVectorField, Strength) == 0x00000C, "Member 'DynamicVectorFieldManager_AddBurstForceToVectorField::Strength' has a wrong offset!");
static_assert(offsetof(DynamicVectorFieldManager_AddBurstForceToVectorField, Radius) == 0x000010, "Member 'DynamicVectorFieldManager_AddBurstForceToVectorField::Radius' has a wrong offset!");

// Function ObsidianFox.DynamicVectorFieldManager.GetIsSystemEnabled
// 0x0001 (0x0001 - 0x0000)
struct DynamicVectorFieldManager_GetIsSystemEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicVectorFieldManager_GetIsSystemEnabled) == 0x000001, "Wrong alignment on DynamicVectorFieldManager_GetIsSystemEnabled");
static_assert(sizeof(DynamicVectorFieldManager_GetIsSystemEnabled) == 0x000001, "Wrong size on DynamicVectorFieldManager_GetIsSystemEnabled");
static_assert(offsetof(DynamicVectorFieldManager_GetIsSystemEnabled, ReturnValue) == 0x000000, "Member 'DynamicVectorFieldManager_GetIsSystemEnabled::ReturnValue' has a wrong offset!");

// Function ObsidianFox.DynamicVectorFieldManager.GetVectorField
// 0x0010 (0x0010 - 0x0000)
struct DynamicVectorFieldManager_GetVectorField final
{
public:
	TArray<struct FVector>                        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicVectorFieldManager_GetVectorField) == 0x000008, "Wrong alignment on DynamicVectorFieldManager_GetVectorField");
static_assert(sizeof(DynamicVectorFieldManager_GetVectorField) == 0x000010, "Wrong size on DynamicVectorFieldManager_GetVectorField");
static_assert(offsetof(DynamicVectorFieldManager_GetVectorField, ReturnValue) == 0x000000, "Member 'DynamicVectorFieldManager_GetVectorField::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EmoteComponent.AddRandomDecoratorToParameter
// 0x0020 (0x0020 - 0x0000)
struct EmoteComponent_AddRandomDecoratorToParameter final
{
public:
	struct FEmoteMontageDataParameter             Parameter;                                         // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FEmoteMontageDataParameter             ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteComponent_AddRandomDecoratorToParameter) == 0x000008, "Wrong alignment on EmoteComponent_AddRandomDecoratorToParameter");
static_assert(sizeof(EmoteComponent_AddRandomDecoratorToParameter) == 0x000020, "Wrong size on EmoteComponent_AddRandomDecoratorToParameter");
static_assert(offsetof(EmoteComponent_AddRandomDecoratorToParameter, Parameter) == 0x000000, "Member 'EmoteComponent_AddRandomDecoratorToParameter::Parameter' has a wrong offset!");
static_assert(offsetof(EmoteComponent_AddRandomDecoratorToParameter, ReturnValue) == 0x000010, "Member 'EmoteComponent_AddRandomDecoratorToParameter::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EmoteComponent.AddSectionDecoratorToParameter
// 0x0028 (0x0028 - 0x0000)
struct EmoteComponent_AddSectionDecoratorToParameter final
{
public:
	struct FEmoteMontageDataParameter             Parameter;                                         // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FName                                   Section;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEmoteMontageDataParameter             ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteComponent_AddSectionDecoratorToParameter) == 0x000008, "Wrong alignment on EmoteComponent_AddSectionDecoratorToParameter");
static_assert(sizeof(EmoteComponent_AddSectionDecoratorToParameter) == 0x000028, "Wrong size on EmoteComponent_AddSectionDecoratorToParameter");
static_assert(offsetof(EmoteComponent_AddSectionDecoratorToParameter, Parameter) == 0x000000, "Member 'EmoteComponent_AddSectionDecoratorToParameter::Parameter' has a wrong offset!");
static_assert(offsetof(EmoteComponent_AddSectionDecoratorToParameter, Section) == 0x000010, "Member 'EmoteComponent_AddSectionDecoratorToParameter::Section' has a wrong offset!");
static_assert(offsetof(EmoteComponent_AddSectionDecoratorToParameter, ReturnValue) == 0x000018, "Member 'EmoteComponent_AddSectionDecoratorToParameter::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EmoteComponent.MakeListEmoteMontageData
// 0x0020 (0x0020 - 0x0000)
struct EmoteComponent_MakeListEmoteMontageData final
{
public:
	TArray<class UAnimMontage*>                   Montages;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FEmoteMontageDataParameter             ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteComponent_MakeListEmoteMontageData) == 0x000008, "Wrong alignment on EmoteComponent_MakeListEmoteMontageData");
static_assert(sizeof(EmoteComponent_MakeListEmoteMontageData) == 0x000020, "Wrong size on EmoteComponent_MakeListEmoteMontageData");
static_assert(offsetof(EmoteComponent_MakeListEmoteMontageData, Montages) == 0x000000, "Member 'EmoteComponent_MakeListEmoteMontageData::Montages' has a wrong offset!");
static_assert(offsetof(EmoteComponent_MakeListEmoteMontageData, ReturnValue) == 0x000010, "Member 'EmoteComponent_MakeListEmoteMontageData::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EmoteComponent.MakeSingleEmoteMontageData
// 0x0018 (0x0018 - 0x0000)
struct EmoteComponent_MakeSingleEmoteMontageData final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEmoteMontageDataParameter             ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteComponent_MakeSingleEmoteMontageData) == 0x000008, "Wrong alignment on EmoteComponent_MakeSingleEmoteMontageData");
static_assert(sizeof(EmoteComponent_MakeSingleEmoteMontageData) == 0x000018, "Wrong size on EmoteComponent_MakeSingleEmoteMontageData");
static_assert(offsetof(EmoteComponent_MakeSingleEmoteMontageData, Montage) == 0x000000, "Member 'EmoteComponent_MakeSingleEmoteMontageData::Montage' has a wrong offset!");
static_assert(offsetof(EmoteComponent_MakeSingleEmoteMontageData, ReturnValue) == 0x000008, "Member 'EmoteComponent_MakeSingleEmoteMontageData::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EmoteComponent.GetEmote
// 0x0018 (0x0018 - 0x0000)
struct EmoteComponent_GetEmote final
{
public:
	struct FEmotePlayData                         ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteComponent_GetEmote) == 0x000008, "Wrong alignment on EmoteComponent_GetEmote");
static_assert(sizeof(EmoteComponent_GetEmote) == 0x000018, "Wrong size on EmoteComponent_GetEmote");
static_assert(offsetof(EmoteComponent_GetEmote, ReturnValue) == 0x000000, "Member 'EmoteComponent_GetEmote::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EmoteComponent.GetEmoteShouldOnlyPlayWhenIdle
// 0x0001 (0x0001 - 0x0000)
struct EmoteComponent_GetEmoteShouldOnlyPlayWhenIdle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteComponent_GetEmoteShouldOnlyPlayWhenIdle) == 0x000001, "Wrong alignment on EmoteComponent_GetEmoteShouldOnlyPlayWhenIdle");
static_assert(sizeof(EmoteComponent_GetEmoteShouldOnlyPlayWhenIdle) == 0x000001, "Wrong size on EmoteComponent_GetEmoteShouldOnlyPlayWhenIdle");
static_assert(offsetof(EmoteComponent_GetEmoteShouldOnlyPlayWhenIdle, ReturnValue) == 0x000000, "Member 'EmoteComponent_GetEmoteShouldOnlyPlayWhenIdle::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EmoteComponent.OnMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct EmoteComponent_OnMontageBlendingOut final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EmoteComponent_OnMontageBlendingOut) == 0x000008, "Wrong alignment on EmoteComponent_OnMontageBlendingOut");
static_assert(sizeof(EmoteComponent_OnMontageBlendingOut) == 0x000010, "Wrong size on EmoteComponent_OnMontageBlendingOut");
static_assert(offsetof(EmoteComponent_OnMontageBlendingOut, AnimMontage) == 0x000000, "Member 'EmoteComponent_OnMontageBlendingOut::AnimMontage' has a wrong offset!");
static_assert(offsetof(EmoteComponent_OnMontageBlendingOut, bInterrupted) == 0x000008, "Member 'EmoteComponent_OnMontageBlendingOut::bInterrupted' has a wrong offset!");

// Function ObsidianFox.EmoteComponent.OnOwnerCinematicModeChanged
// 0x0001 (0x0001 - 0x0000)
struct EmoteComponent_OnOwnerCinematicModeChanged final
{
public:
	bool                                          NewCinematicMode;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteComponent_OnOwnerCinematicModeChanged) == 0x000001, "Wrong alignment on EmoteComponent_OnOwnerCinematicModeChanged");
static_assert(sizeof(EmoteComponent_OnOwnerCinematicModeChanged) == 0x000001, "Wrong size on EmoteComponent_OnOwnerCinematicModeChanged");
static_assert(offsetof(EmoteComponent_OnOwnerCinematicModeChanged, NewCinematicMode) == 0x000000, "Member 'EmoteComponent_OnOwnerCinematicModeChanged::NewCinematicMode' has a wrong offset!");

// Function ObsidianFox.EmoteComponent.PlayRandomEmoteFromMontage
// 0x0008 (0x0008 - 0x0000)
struct EmoteComponent_PlayRandomEmoteFromMontage final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteComponent_PlayRandomEmoteFromMontage) == 0x000008, "Wrong alignment on EmoteComponent_PlayRandomEmoteFromMontage");
static_assert(sizeof(EmoteComponent_PlayRandomEmoteFromMontage) == 0x000008, "Wrong size on EmoteComponent_PlayRandomEmoteFromMontage");
static_assert(offsetof(EmoteComponent_PlayRandomEmoteFromMontage, AnimMontage) == 0x000000, "Member 'EmoteComponent_PlayRandomEmoteFromMontage::AnimMontage' has a wrong offset!");

// Function ObsidianFox.EmoteComponent.PlayRandomEmoteMontageFromList
// 0x0018 (0x0018 - 0x0000)
struct EmoteComponent_PlayRandomEmoteMontageFromList final
{
public:
	TArray<class UAnimMontage*>                   AnimMontages;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bPickRandomSection;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EmoteComponent_PlayRandomEmoteMontageFromList) == 0x000008, "Wrong alignment on EmoteComponent_PlayRandomEmoteMontageFromList");
static_assert(sizeof(EmoteComponent_PlayRandomEmoteMontageFromList) == 0x000018, "Wrong size on EmoteComponent_PlayRandomEmoteMontageFromList");
static_assert(offsetof(EmoteComponent_PlayRandomEmoteMontageFromList, AnimMontages) == 0x000000, "Member 'EmoteComponent_PlayRandomEmoteMontageFromList::AnimMontages' has a wrong offset!");
static_assert(offsetof(EmoteComponent_PlayRandomEmoteMontageFromList, bPickRandomSection) == 0x000010, "Member 'EmoteComponent_PlayRandomEmoteMontageFromList::bPickRandomSection' has a wrong offset!");

// Function ObsidianFox.EmoteComponent.SetDisabled
// 0x0001 (0x0001 - 0x0000)
struct EmoteComponent_SetDisabled final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EmoteComponent_SetDisabled) == 0x000001, "Wrong alignment on EmoteComponent_SetDisabled");
static_assert(sizeof(EmoteComponent_SetDisabled) == 0x000001, "Wrong size on EmoteComponent_SetDisabled");
static_assert(offsetof(EmoteComponent_SetDisabled, Value) == 0x000000, "Member 'EmoteComponent_SetDisabled::Value' has a wrong offset!");

// Function ObsidianFox.SubtitleTextWidget.OnSubtitleSizeChanged
// 0x0001 (0x0001 - 0x0000)
struct SubtitleTextWidget_OnSubtitleSizeChanged final
{
public:
	ESubtitleSizes                                NewSubtitleSize;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitleTextWidget_OnSubtitleSizeChanged) == 0x000001, "Wrong alignment on SubtitleTextWidget_OnSubtitleSizeChanged");
static_assert(sizeof(SubtitleTextWidget_OnSubtitleSizeChanged) == 0x000001, "Wrong size on SubtitleTextWidget_OnSubtitleSizeChanged");
static_assert(offsetof(SubtitleTextWidget_OnSubtitleSizeChanged, NewSubtitleSize) == 0x000000, "Member 'SubtitleTextWidget_OnSubtitleSizeChanged::NewSubtitleSize' has a wrong offset!");

// Function ObsidianFox.LocationTrackingVolume.ComponentBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct LocationTrackingVolume_ComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    InOverlappedComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOtherActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    InOtherComp;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InOtherBodyIndex;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             InSweepResult;                                     // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocationTrackingVolume_ComponentBeginOverlap) == 0x000008, "Wrong alignment on LocationTrackingVolume_ComponentBeginOverlap");
static_assert(sizeof(LocationTrackingVolume_ComponentBeginOverlap) == 0x0000A8, "Wrong size on LocationTrackingVolume_ComponentBeginOverlap");
static_assert(offsetof(LocationTrackingVolume_ComponentBeginOverlap, InOverlappedComponent) == 0x000000, "Member 'LocationTrackingVolume_ComponentBeginOverlap::InOverlappedComponent' has a wrong offset!");
static_assert(offsetof(LocationTrackingVolume_ComponentBeginOverlap, InOtherActor) == 0x000008, "Member 'LocationTrackingVolume_ComponentBeginOverlap::InOtherActor' has a wrong offset!");
static_assert(offsetof(LocationTrackingVolume_ComponentBeginOverlap, InOtherComp) == 0x000010, "Member 'LocationTrackingVolume_ComponentBeginOverlap::InOtherComp' has a wrong offset!");
static_assert(offsetof(LocationTrackingVolume_ComponentBeginOverlap, InOtherBodyIndex) == 0x000018, "Member 'LocationTrackingVolume_ComponentBeginOverlap::InOtherBodyIndex' has a wrong offset!");
static_assert(offsetof(LocationTrackingVolume_ComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'LocationTrackingVolume_ComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(LocationTrackingVolume_ComponentBeginOverlap, InSweepResult) == 0x000020, "Member 'LocationTrackingVolume_ComponentBeginOverlap::InSweepResult' has a wrong offset!");

// Function ObsidianFox.LocationTrackingVolume.ComponentEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct LocationTrackingVolume_ComponentEndOverlap final
{
public:
	class UPrimitiveComponent*                    InOverlappedComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOtherActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    InOtherComp;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InOtherBodyIndex;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LocationTrackingVolume_ComponentEndOverlap) == 0x000008, "Wrong alignment on LocationTrackingVolume_ComponentEndOverlap");
static_assert(sizeof(LocationTrackingVolume_ComponentEndOverlap) == 0x000020, "Wrong size on LocationTrackingVolume_ComponentEndOverlap");
static_assert(offsetof(LocationTrackingVolume_ComponentEndOverlap, InOverlappedComponent) == 0x000000, "Member 'LocationTrackingVolume_ComponentEndOverlap::InOverlappedComponent' has a wrong offset!");
static_assert(offsetof(LocationTrackingVolume_ComponentEndOverlap, InOtherActor) == 0x000008, "Member 'LocationTrackingVolume_ComponentEndOverlap::InOtherActor' has a wrong offset!");
static_assert(offsetof(LocationTrackingVolume_ComponentEndOverlap, InOtherComp) == 0x000010, "Member 'LocationTrackingVolume_ComponentEndOverlap::InOtherComp' has a wrong offset!");
static_assert(offsetof(LocationTrackingVolume_ComponentEndOverlap, InOtherBodyIndex) == 0x000018, "Member 'LocationTrackingVolume_ComponentEndOverlap::InOtherBodyIndex' has a wrong offset!");

// Function ObsidianFox.WorldSubsystem_MusicPlayer.NewMusic
// 0x0028 (0x0028 - 0x0000)
struct WorldSubsystem_MusicPlayer_NewMusic final
{
public:
	TSoftObjectPtr<class UFMODEvent>              Music;                                             // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldSubsystem_MusicPlayer_NewMusic) == 0x000008, "Wrong alignment on WorldSubsystem_MusicPlayer_NewMusic");
static_assert(sizeof(WorldSubsystem_MusicPlayer_NewMusic) == 0x000028, "Wrong size on WorldSubsystem_MusicPlayer_NewMusic");
static_assert(offsetof(WorldSubsystem_MusicPlayer_NewMusic, Music) == 0x000000, "Member 'WorldSubsystem_MusicPlayer_NewMusic::Music' has a wrong offset!");

// Function ObsidianFox.WorldSubsystem_MusicPlayer.PlayerIsInCombat
// 0x0001 (0x0001 - 0x0000)
struct WorldSubsystem_MusicPlayer_PlayerIsInCombat final
{
public:
	bool                                          bInCombat;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldSubsystem_MusicPlayer_PlayerIsInCombat) == 0x000001, "Wrong alignment on WorldSubsystem_MusicPlayer_PlayerIsInCombat");
static_assert(sizeof(WorldSubsystem_MusicPlayer_PlayerIsInCombat) == 0x000001, "Wrong size on WorldSubsystem_MusicPlayer_PlayerIsInCombat");
static_assert(offsetof(WorldSubsystem_MusicPlayer_PlayerIsInCombat, bInCombat) == 0x000000, "Member 'WorldSubsystem_MusicPlayer_PlayerIsInCombat::bInCombat' has a wrong offset!");

// Function ObsidianFox.WorldSubsystem_MusicPlayer.SetParameter
// 0x0018 (0x0018 - 0x0000)
struct WorldSubsystem_MusicPlayer_SetParameter final
{
public:
	class FString                                 ParamterName;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParamterValue;                                     // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WorldSubsystem_MusicPlayer_SetParameter) == 0x000008, "Wrong alignment on WorldSubsystem_MusicPlayer_SetParameter");
static_assert(sizeof(WorldSubsystem_MusicPlayer_SetParameter) == 0x000018, "Wrong size on WorldSubsystem_MusicPlayer_SetParameter");
static_assert(offsetof(WorldSubsystem_MusicPlayer_SetParameter, ParamterName) == 0x000000, "Member 'WorldSubsystem_MusicPlayer_SetParameter::ParamterName' has a wrong offset!");
static_assert(offsetof(WorldSubsystem_MusicPlayer_SetParameter, ParamterValue) == 0x000010, "Member 'WorldSubsystem_MusicPlayer_SetParameter::ParamterValue' has a wrong offset!");

// Function ObsidianFox.EnemiesWithinRangeComponent.GetEnemiesWithinDistance
// 0x0018 (0x0018 - 0x0000)
struct EnemiesWithinRangeComponent_GetEnemiesWithinDistance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AOFEnemyCharacter*>              OutList;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemiesWithinRangeComponent_GetEnemiesWithinDistance) == 0x000008, "Wrong alignment on EnemiesWithinRangeComponent_GetEnemiesWithinDistance");
static_assert(sizeof(EnemiesWithinRangeComponent_GetEnemiesWithinDistance) == 0x000018, "Wrong size on EnemiesWithinRangeComponent_GetEnemiesWithinDistance");
static_assert(offsetof(EnemiesWithinRangeComponent_GetEnemiesWithinDistance, Distance) == 0x000000, "Member 'EnemiesWithinRangeComponent_GetEnemiesWithinDistance::Distance' has a wrong offset!");
static_assert(offsetof(EnemiesWithinRangeComponent_GetEnemiesWithinDistance, OutList) == 0x000008, "Member 'EnemiesWithinRangeComponent_GetEnemiesWithinDistance::OutList' has a wrong offset!");

// DelegateFunction ObsidianFox.EnemiesWithinRangeComponent.OnCombatStatusChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct EnemiesWithinRangeComponent_OnCombatStatusChanged__DelegateSignature final
{
public:
	bool                                          bEnterCombat;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemiesWithinRangeComponent_OnCombatStatusChanged__DelegateSignature) == 0x000001, "Wrong alignment on EnemiesWithinRangeComponent_OnCombatStatusChanged__DelegateSignature");
static_assert(sizeof(EnemiesWithinRangeComponent_OnCombatStatusChanged__DelegateSignature) == 0x000001, "Wrong size on EnemiesWithinRangeComponent_OnCombatStatusChanged__DelegateSignature");
static_assert(offsetof(EnemiesWithinRangeComponent_OnCombatStatusChanged__DelegateSignature, bEnterCombat) == 0x000000, "Member 'EnemiesWithinRangeComponent_OnCombatStatusChanged__DelegateSignature::bEnterCombat' has a wrong offset!");

// Function ObsidianFox.EnemiesWithinRangeComponent.GetClosestEnemyCharacterWithinCombatRange
// 0x0008 (0x0008 - 0x0000)
struct EnemiesWithinRangeComponent_GetClosestEnemyCharacterWithinCombatRange final
{
public:
	class AOFEnemyCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemiesWithinRangeComponent_GetClosestEnemyCharacterWithinCombatRange) == 0x000008, "Wrong alignment on EnemiesWithinRangeComponent_GetClosestEnemyCharacterWithinCombatRange");
static_assert(sizeof(EnemiesWithinRangeComponent_GetClosestEnemyCharacterWithinCombatRange) == 0x000008, "Wrong size on EnemiesWithinRangeComponent_GetClosestEnemyCharacterWithinCombatRange");
static_assert(offsetof(EnemiesWithinRangeComponent_GetClosestEnemyCharacterWithinCombatRange, ReturnValue) == 0x000000, "Member 'EnemiesWithinRangeComponent_GetClosestEnemyCharacterWithinCombatRange::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EnemiesWithinRangeComponent.GetEnemiesWithinCombatRange
// 0x0010 (0x0010 - 0x0000)
struct EnemiesWithinRangeComponent_GetEnemiesWithinCombatRange final
{
public:
	TArray<class AOFEnemyCharacter*>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemiesWithinRangeComponent_GetEnemiesWithinCombatRange) == 0x000008, "Wrong alignment on EnemiesWithinRangeComponent_GetEnemiesWithinCombatRange");
static_assert(sizeof(EnemiesWithinRangeComponent_GetEnemiesWithinCombatRange) == 0x000010, "Wrong size on EnemiesWithinRangeComponent_GetEnemiesWithinCombatRange");
static_assert(offsetof(EnemiesWithinRangeComponent_GetEnemiesWithinCombatRange, ReturnValue) == 0x000000, "Member 'EnemiesWithinRangeComponent_GetEnemiesWithinCombatRange::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.EnemySpawner.OnSpawnCompleted__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct EnemySpawner_OnSpawnCompleted__DelegateSignature final
{
public:
	class AOFEnemyCharacter*                      SpawnedEnemy_0;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAIController*                          SpawnedAICOntroller;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AEnemySpawner*                          Spawner;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawner_OnSpawnCompleted__DelegateSignature) == 0x000008, "Wrong alignment on EnemySpawner_OnSpawnCompleted__DelegateSignature");
static_assert(sizeof(EnemySpawner_OnSpawnCompleted__DelegateSignature) == 0x000018, "Wrong size on EnemySpawner_OnSpawnCompleted__DelegateSignature");
static_assert(offsetof(EnemySpawner_OnSpawnCompleted__DelegateSignature, SpawnedEnemy_0) == 0x000000, "Member 'EnemySpawner_OnSpawnCompleted__DelegateSignature::SpawnedEnemy_0' has a wrong offset!");
static_assert(offsetof(EnemySpawner_OnSpawnCompleted__DelegateSignature, SpawnedAICOntroller) == 0x000008, "Member 'EnemySpawner_OnSpawnCompleted__DelegateSignature::SpawnedAICOntroller' has a wrong offset!");
static_assert(offsetof(EnemySpawner_OnSpawnCompleted__DelegateSignature, Spawner) == 0x000010, "Member 'EnemySpawner_OnSpawnCompleted__DelegateSignature::Spawner' has a wrong offset!");

// Function ObsidianFox.EnemySpawner.SpawnManually
// 0x0008 (0x0008 - 0x0000)
struct EnemySpawner_SpawnManually final
{
public:
	class AOFEnemyCharacter*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawner_SpawnManually) == 0x000008, "Wrong alignment on EnemySpawner_SpawnManually");
static_assert(sizeof(EnemySpawner_SpawnManually) == 0x000008, "Wrong size on EnemySpawner_SpawnManually");
static_assert(offsetof(EnemySpawner_SpawnManually, ReturnValue) == 0x000000, "Member 'EnemySpawner_SpawnManually::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EnemySpawner.GetSpawnTransform
// 0x0030 (0x0030 - 0x0000)
struct EnemySpawner_GetSpawnTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnemySpawner_GetSpawnTransform) == 0x000010, "Wrong alignment on EnemySpawner_GetSpawnTransform");
static_assert(sizeof(EnemySpawner_GetSpawnTransform) == 0x000030, "Wrong size on EnemySpawner_GetSpawnTransform");
static_assert(offsetof(EnemySpawner_GetSpawnTransform, ReturnValue) == 0x000000, "Member 'EnemySpawner_GetSpawnTransform::ReturnValue' has a wrong offset!");

// Function ObsidianFox.WeaponAnimationDataAsset.GetAnimationDataForCharacter
// 0x00D8 (0x00D8 - 0x0000)
struct WeaponAnimationDataAsset_GetAnimationDataForCharacter final
{
public:
	const class AOFPlayerCharacter*               Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnsureAnimationsAreLoaded;                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeaponAnimationData                   ReturnValue;                                       // 0x0010(0x00C8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimationDataAsset_GetAnimationDataForCharacter) == 0x000008, "Wrong alignment on WeaponAnimationDataAsset_GetAnimationDataForCharacter");
static_assert(sizeof(WeaponAnimationDataAsset_GetAnimationDataForCharacter) == 0x0000D8, "Wrong size on WeaponAnimationDataAsset_GetAnimationDataForCharacter");
static_assert(offsetof(WeaponAnimationDataAsset_GetAnimationDataForCharacter, Character) == 0x000000, "Member 'WeaponAnimationDataAsset_GetAnimationDataForCharacter::Character' has a wrong offset!");
static_assert(offsetof(WeaponAnimationDataAsset_GetAnimationDataForCharacter, bEnsureAnimationsAreLoaded) == 0x000008, "Member 'WeaponAnimationDataAsset_GetAnimationDataForCharacter::bEnsureAnimationsAreLoaded' has a wrong offset!");
static_assert(offsetof(WeaponAnimationDataAsset_GetAnimationDataForCharacter, ReturnValue) == 0x000010, "Member 'WeaponAnimationDataAsset_GetAnimationDataForCharacter::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EnvironmentGameSubSystem.CharacterInWater
// 0x0010 (0x0010 - 0x0000)
struct EnvironmentGameSubSystem_CharacterInWater final
{
public:
	const class AObsidianFoxCharacter*            Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percentage;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EnvironmentGameSubSystem_CharacterInWater) == 0x000008, "Wrong alignment on EnvironmentGameSubSystem_CharacterInWater");
static_assert(sizeof(EnvironmentGameSubSystem_CharacterInWater) == 0x000010, "Wrong size on EnvironmentGameSubSystem_CharacterInWater");
static_assert(offsetof(EnvironmentGameSubSystem_CharacterInWater, Character) == 0x000000, "Member 'EnvironmentGameSubSystem_CharacterInWater::Character' has a wrong offset!");
static_assert(offsetof(EnvironmentGameSubSystem_CharacterInWater, Percentage) == 0x000008, "Member 'EnvironmentGameSubSystem_CharacterInWater::Percentage' has a wrong offset!");

// Function ObsidianFox.EnvironmentGameSubSystem.CharacterNotInWater
// 0x0008 (0x0008 - 0x0000)
struct EnvironmentGameSubSystem_CharacterNotInWater final
{
public:
	const class AObsidianFoxCharacter*            Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentGameSubSystem_CharacterNotInWater) == 0x000008, "Wrong alignment on EnvironmentGameSubSystem_CharacterNotInWater");
static_assert(sizeof(EnvironmentGameSubSystem_CharacterNotInWater) == 0x000008, "Wrong size on EnvironmentGameSubSystem_CharacterNotInWater");
static_assert(offsetof(EnvironmentGameSubSystem_CharacterNotInWater, Character) == 0x000000, "Member 'EnvironmentGameSubSystem_CharacterNotInWater::Character' has a wrong offset!");

// Function ObsidianFox.EnvironmentGameSubSystem.SetMaterialParamterCollection
// 0x0008 (0x0008 - 0x0000)
struct EnvironmentGameSubSystem_SetMaterialParamterCollection final
{
public:
	class UMaterialParameterCollection*           NewMaterialCollection;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentGameSubSystem_SetMaterialParamterCollection) == 0x000008, "Wrong alignment on EnvironmentGameSubSystem_SetMaterialParamterCollection");
static_assert(sizeof(EnvironmentGameSubSystem_SetMaterialParamterCollection) == 0x000008, "Wrong size on EnvironmentGameSubSystem_SetMaterialParamterCollection");
static_assert(offsetof(EnvironmentGameSubSystem_SetMaterialParamterCollection, NewMaterialCollection) == 0x000000, "Member 'EnvironmentGameSubSystem_SetMaterialParamterCollection::NewMaterialCollection' has a wrong offset!");

// Function ObsidianFox.EnvironmentGameSubSystem.SetNiagaraParamterCollection
// 0x0008 (0x0008 - 0x0000)
struct EnvironmentGameSubSystem_SetNiagaraParamterCollection final
{
public:
	class UNiagaraParameterCollectionInstance*    NewNiagaraCollection;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentGameSubSystem_SetNiagaraParamterCollection) == 0x000008, "Wrong alignment on EnvironmentGameSubSystem_SetNiagaraParamterCollection");
static_assert(sizeof(EnvironmentGameSubSystem_SetNiagaraParamterCollection) == 0x000008, "Wrong size on EnvironmentGameSubSystem_SetNiagaraParamterCollection");
static_assert(offsetof(EnvironmentGameSubSystem_SetNiagaraParamterCollection, NewNiagaraCollection) == 0x000000, "Member 'EnvironmentGameSubSystem_SetNiagaraParamterCollection::NewNiagaraCollection' has a wrong offset!");

// Function ObsidianFox.EnvironmentGameSubSystem.GetDegreeCelsius
// 0x0004 (0x0004 - 0x0000)
struct EnvironmentGameSubSystem_GetDegreeCelsius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentGameSubSystem_GetDegreeCelsius) == 0x000004, "Wrong alignment on EnvironmentGameSubSystem_GetDegreeCelsius");
static_assert(sizeof(EnvironmentGameSubSystem_GetDegreeCelsius) == 0x000004, "Wrong size on EnvironmentGameSubSystem_GetDegreeCelsius");
static_assert(offsetof(EnvironmentGameSubSystem_GetDegreeCelsius, ReturnValue) == 0x000000, "Member 'EnvironmentGameSubSystem_GetDegreeCelsius::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EnvironmentGameSubSystem.GetWeatherStruct
// 0x0170 (0x0170 - 0x0000)
struct EnvironmentGameSubSystem_GetWeatherStruct final
{
public:
	struct FEnvironmentStruct                     ReturnValue;                                       // 0x0000(0x0170)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentGameSubSystem_GetWeatherStruct) == 0x000008, "Wrong alignment on EnvironmentGameSubSystem_GetWeatherStruct");
static_assert(sizeof(EnvironmentGameSubSystem_GetWeatherStruct) == 0x000170, "Wrong size on EnvironmentGameSubSystem_GetWeatherStruct");
static_assert(offsetof(EnvironmentGameSubSystem_GetWeatherStruct, ReturnValue) == 0x000000, "Member 'EnvironmentGameSubSystem_GetWeatherStruct::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EnvironmentGameSubSystem.GetWeatherTag
// 0x0020 (0x0020 - 0x0000)
struct EnvironmentGameSubSystem_GetWeatherTag final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentGameSubSystem_GetWeatherTag) == 0x000008, "Wrong alignment on EnvironmentGameSubSystem_GetWeatherTag");
static_assert(sizeof(EnvironmentGameSubSystem_GetWeatherTag) == 0x000020, "Wrong size on EnvironmentGameSubSystem_GetWeatherTag");
static_assert(offsetof(EnvironmentGameSubSystem_GetWeatherTag, ReturnValue) == 0x000000, "Member 'EnvironmentGameSubSystem_GetWeatherTag::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EnvironmentGameSubSystem.GetWindSpeed
// 0x0004 (0x0004 - 0x0000)
struct EnvironmentGameSubSystem_GetWindSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentGameSubSystem_GetWindSpeed) == 0x000004, "Wrong alignment on EnvironmentGameSubSystem_GetWindSpeed");
static_assert(sizeof(EnvironmentGameSubSystem_GetWindSpeed) == 0x000004, "Wrong size on EnvironmentGameSubSystem_GetWindSpeed");
static_assert(offsetof(EnvironmentGameSubSystem_GetWindSpeed, ReturnValue) == 0x000000, "Member 'EnvironmentGameSubSystem_GetWindSpeed::ReturnValue' has a wrong offset!");

// Function ObsidianFox.MapMarkerActorComponent.SetUseRoomMarker
// 0x0001 (0x0001 - 0x0000)
struct MapMarkerActorComponent_SetUseRoomMarker final
{
public:
	bool                                          InUseRoomMarker;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapMarkerActorComponent_SetUseRoomMarker) == 0x000001, "Wrong alignment on MapMarkerActorComponent_SetUseRoomMarker");
static_assert(sizeof(MapMarkerActorComponent_SetUseRoomMarker) == 0x000001, "Wrong size on MapMarkerActorComponent_SetUseRoomMarker");
static_assert(offsetof(MapMarkerActorComponent_SetUseRoomMarker, InUseRoomMarker) == 0x000000, "Member 'MapMarkerActorComponent_SetUseRoomMarker::InUseRoomMarker' has a wrong offset!");

// Function ObsidianFox.EnvironmentWorldSubSystem.CharacterInWater
// 0x0010 (0x0010 - 0x0000)
struct EnvironmentWorldSubSystem_CharacterInWater final
{
public:
	const class AObsidianFoxCharacter*            Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percentage;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EnvironmentWorldSubSystem_CharacterInWater) == 0x000008, "Wrong alignment on EnvironmentWorldSubSystem_CharacterInWater");
static_assert(sizeof(EnvironmentWorldSubSystem_CharacterInWater) == 0x000010, "Wrong size on EnvironmentWorldSubSystem_CharacterInWater");
static_assert(offsetof(EnvironmentWorldSubSystem_CharacterInWater, Character) == 0x000000, "Member 'EnvironmentWorldSubSystem_CharacterInWater::Character' has a wrong offset!");
static_assert(offsetof(EnvironmentWorldSubSystem_CharacterInWater, Percentage) == 0x000008, "Member 'EnvironmentWorldSubSystem_CharacterInWater::Percentage' has a wrong offset!");

// Function ObsidianFox.EnvironmentWorldSubSystem.CharacterNotInWater
// 0x0008 (0x0008 - 0x0000)
struct EnvironmentWorldSubSystem_CharacterNotInWater final
{
public:
	const class AObsidianFoxCharacter*            Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentWorldSubSystem_CharacterNotInWater) == 0x000008, "Wrong alignment on EnvironmentWorldSubSystem_CharacterNotInWater");
static_assert(sizeof(EnvironmentWorldSubSystem_CharacterNotInWater) == 0x000008, "Wrong size on EnvironmentWorldSubSystem_CharacterNotInWater");
static_assert(offsetof(EnvironmentWorldSubSystem_CharacterNotInWater, Character) == 0x000000, "Member 'EnvironmentWorldSubSystem_CharacterNotInWater::Character' has a wrong offset!");

// Function ObsidianFox.EnvironmentWorldSubSystem.GustEvaluate
// 0x0004 (0x0004 - 0x0000)
struct EnvironmentWorldSubSystem_GustEvaluate final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentWorldSubSystem_GustEvaluate) == 0x000004, "Wrong alignment on EnvironmentWorldSubSystem_GustEvaluate");
static_assert(sizeof(EnvironmentWorldSubSystem_GustEvaluate) == 0x000004, "Wrong size on EnvironmentWorldSubSystem_GustEvaluate");
static_assert(offsetof(EnvironmentWorldSubSystem_GustEvaluate, Alpha) == 0x000000, "Member 'EnvironmentWorldSubSystem_GustEvaluate::Alpha' has a wrong offset!");

// Function ObsidianFox.EnvironmentWorldSubSystem.OnWorldBeginTearDown
// 0x0008 (0x0008 - 0x0000)
struct EnvironmentWorldSubSystem_OnWorldBeginTearDown final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentWorldSubSystem_OnWorldBeginTearDown) == 0x000008, "Wrong alignment on EnvironmentWorldSubSystem_OnWorldBeginTearDown");
static_assert(sizeof(EnvironmentWorldSubSystem_OnWorldBeginTearDown) == 0x000008, "Wrong size on EnvironmentWorldSubSystem_OnWorldBeginTearDown");
static_assert(offsetof(EnvironmentWorldSubSystem_OnWorldBeginTearDown, World) == 0x000000, "Member 'EnvironmentWorldSubSystem_OnWorldBeginTearDown::World' has a wrong offset!");

// Function ObsidianFox.EnvironmentWorldSubSystem.SetMaterialParameterCollection
// 0x0008 (0x0008 - 0x0000)
struct EnvironmentWorldSubSystem_SetMaterialParameterCollection final
{
public:
	class UMaterialParameterCollection*           NewMaterialCollection;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentWorldSubSystem_SetMaterialParameterCollection) == 0x000008, "Wrong alignment on EnvironmentWorldSubSystem_SetMaterialParameterCollection");
static_assert(sizeof(EnvironmentWorldSubSystem_SetMaterialParameterCollection) == 0x000008, "Wrong size on EnvironmentWorldSubSystem_SetMaterialParameterCollection");
static_assert(offsetof(EnvironmentWorldSubSystem_SetMaterialParameterCollection, NewMaterialCollection) == 0x000000, "Member 'EnvironmentWorldSubSystem_SetMaterialParameterCollection::NewMaterialCollection' has a wrong offset!");

// Function ObsidianFox.EnvironmentWorldSubSystem.SetNiagaraParameterCollection
// 0x0008 (0x0008 - 0x0000)
struct EnvironmentWorldSubSystem_SetNiagaraParameterCollection final
{
public:
	class UNiagaraParameterCollectionInstance*    NewNiagaraCollection;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentWorldSubSystem_SetNiagaraParameterCollection) == 0x000008, "Wrong alignment on EnvironmentWorldSubSystem_SetNiagaraParameterCollection");
static_assert(sizeof(EnvironmentWorldSubSystem_SetNiagaraParameterCollection) == 0x000008, "Wrong size on EnvironmentWorldSubSystem_SetNiagaraParameterCollection");
static_assert(offsetof(EnvironmentWorldSubSystem_SetNiagaraParameterCollection, NewNiagaraCollection) == 0x000000, "Member 'EnvironmentWorldSubSystem_SetNiagaraParameterCollection::NewNiagaraCollection' has a wrong offset!");

// Function ObsidianFox.EnvironmentWorldSubSystem.GetDegreeCelsius
// 0x0004 (0x0004 - 0x0000)
struct EnvironmentWorldSubSystem_GetDegreeCelsius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentWorldSubSystem_GetDegreeCelsius) == 0x000004, "Wrong alignment on EnvironmentWorldSubSystem_GetDegreeCelsius");
static_assert(sizeof(EnvironmentWorldSubSystem_GetDegreeCelsius) == 0x000004, "Wrong size on EnvironmentWorldSubSystem_GetDegreeCelsius");
static_assert(offsetof(EnvironmentWorldSubSystem_GetDegreeCelsius, ReturnValue) == 0x000000, "Member 'EnvironmentWorldSubSystem_GetDegreeCelsius::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EnvironmentWorldSubSystem.GetEnvironmentSettingAtLocation
// 0x0180 (0x0180 - 0x0000)
struct EnvironmentWorldSubSystem_GetEnvironmentSettingAtLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEnvironmentStruct                     ReturnValue;                                       // 0x0010(0x0170)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentWorldSubSystem_GetEnvironmentSettingAtLocation) == 0x000008, "Wrong alignment on EnvironmentWorldSubSystem_GetEnvironmentSettingAtLocation");
static_assert(sizeof(EnvironmentWorldSubSystem_GetEnvironmentSettingAtLocation) == 0x000180, "Wrong size on EnvironmentWorldSubSystem_GetEnvironmentSettingAtLocation");
static_assert(offsetof(EnvironmentWorldSubSystem_GetEnvironmentSettingAtLocation, Location) == 0x000000, "Member 'EnvironmentWorldSubSystem_GetEnvironmentSettingAtLocation::Location' has a wrong offset!");
static_assert(offsetof(EnvironmentWorldSubSystem_GetEnvironmentSettingAtLocation, ReturnValue) == 0x000010, "Member 'EnvironmentWorldSubSystem_GetEnvironmentSettingAtLocation::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EnvironmentWorldSubSystem.GetWeatherStruct
// 0x0170 (0x0170 - 0x0000)
struct EnvironmentWorldSubSystem_GetWeatherStruct final
{
public:
	struct FEnvironmentStruct                     ReturnValue;                                       // 0x0000(0x0170)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentWorldSubSystem_GetWeatherStruct) == 0x000008, "Wrong alignment on EnvironmentWorldSubSystem_GetWeatherStruct");
static_assert(sizeof(EnvironmentWorldSubSystem_GetWeatherStruct) == 0x000170, "Wrong size on EnvironmentWorldSubSystem_GetWeatherStruct");
static_assert(offsetof(EnvironmentWorldSubSystem_GetWeatherStruct, ReturnValue) == 0x000000, "Member 'EnvironmentWorldSubSystem_GetWeatherStruct::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EnvironmentWorldSubSystem.GetWeatherTag
// 0x0020 (0x0020 - 0x0000)
struct EnvironmentWorldSubSystem_GetWeatherTag final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentWorldSubSystem_GetWeatherTag) == 0x000008, "Wrong alignment on EnvironmentWorldSubSystem_GetWeatherTag");
static_assert(sizeof(EnvironmentWorldSubSystem_GetWeatherTag) == 0x000020, "Wrong size on EnvironmentWorldSubSystem_GetWeatherTag");
static_assert(offsetof(EnvironmentWorldSubSystem_GetWeatherTag, ReturnValue) == 0x000000, "Member 'EnvironmentWorldSubSystem_GetWeatherTag::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EnvironmentWorldSubSystem.GetWindSpeed
// 0x0004 (0x0004 - 0x0000)
struct EnvironmentWorldSubSystem_GetWindSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnvironmentWorldSubSystem_GetWindSpeed) == 0x000004, "Wrong alignment on EnvironmentWorldSubSystem_GetWindSpeed");
static_assert(sizeof(EnvironmentWorldSubSystem_GetWindSpeed) == 0x000004, "Wrong size on EnvironmentWorldSubSystem_GetWindSpeed");
static_assert(offsetof(EnvironmentWorldSubSystem_GetWindSpeed, ReturnValue) == 0x000000, "Member 'EnvironmentWorldSubSystem_GetWindSpeed::ReturnValue' has a wrong offset!");

// Function ObsidianFox.LocomotionStateAnimComponent.IsForcedCombatState
// 0x0001 (0x0001 - 0x0000)
struct LocomotionStateAnimComponent_IsForcedCombatState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocomotionStateAnimComponent_IsForcedCombatState) == 0x000001, "Wrong alignment on LocomotionStateAnimComponent_IsForcedCombatState");
static_assert(sizeof(LocomotionStateAnimComponent_IsForcedCombatState) == 0x000001, "Wrong size on LocomotionStateAnimComponent_IsForcedCombatState");
static_assert(offsetof(LocomotionStateAnimComponent_IsForcedCombatState, ReturnValue) == 0x000000, "Member 'LocomotionStateAnimComponent_IsForcedCombatState::ReturnValue' has a wrong offset!");

// Function ObsidianFox.Lever.AttachLeverMesh
// 0x0010 (0x0010 - 0x0000)
struct Lever_AttachLeverMesh final
{
public:
	class USceneComponent*                        InParentComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSocketName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Lever_AttachLeverMesh) == 0x000008, "Wrong alignment on Lever_AttachLeverMesh");
static_assert(sizeof(Lever_AttachLeverMesh) == 0x000010, "Wrong size on Lever_AttachLeverMesh");
static_assert(offsetof(Lever_AttachLeverMesh, InParentComponent) == 0x000000, "Member 'Lever_AttachLeverMesh::InParentComponent' has a wrong offset!");
static_assert(offsetof(Lever_AttachLeverMesh, InSocketName) == 0x000008, "Member 'Lever_AttachLeverMesh::InSocketName' has a wrong offset!");

// DelegateFunction ObsidianFox.Lever.LeverFinishedDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct Lever_LeverFinishedDelegate__DelegateSignature final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Lever_LeverFinishedDelegate__DelegateSignature) == 0x000008, "Wrong alignment on Lever_LeverFinishedDelegate__DelegateSignature");
static_assert(sizeof(Lever_LeverFinishedDelegate__DelegateSignature) == 0x000008, "Wrong size on Lever_LeverFinishedDelegate__DelegateSignature");
static_assert(offsetof(Lever_LeverFinishedDelegate__DelegateSignature, InteractingCharacter) == 0x000000, "Member 'Lever_LeverFinishedDelegate__DelegateSignature::InteractingCharacter' has a wrong offset!");

// Function ObsidianFox.Lever.OnFlowBeginInteract
// 0x0008 (0x0008 - 0x0000)
struct Lever_OnFlowBeginInteract final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Lever_OnFlowBeginInteract) == 0x000008, "Wrong alignment on Lever_OnFlowBeginInteract");
static_assert(sizeof(Lever_OnFlowBeginInteract) == 0x000008, "Wrong size on Lever_OnFlowBeginInteract");
static_assert(offsetof(Lever_OnFlowBeginInteract, InteractingCharacter) == 0x000000, "Member 'Lever_OnFlowBeginInteract::InteractingCharacter' has a wrong offset!");

// Function ObsidianFox.Lever.OnLeverBeginInteraction
// 0x0008 (0x0008 - 0x0000)
struct Lever_OnLeverBeginInteraction final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Lever_OnLeverBeginInteraction) == 0x000008, "Wrong alignment on Lever_OnLeverBeginInteraction");
static_assert(sizeof(Lever_OnLeverBeginInteraction) == 0x000008, "Wrong size on Lever_OnLeverBeginInteraction");
static_assert(offsetof(Lever_OnLeverBeginInteraction, InteractingCharacter) == 0x000000, "Member 'Lever_OnLeverBeginInteraction::InteractingCharacter' has a wrong offset!");

// Function ObsidianFox.Lever.OnMontageDone
// 0x0008 (0x0008 - 0x0000)
struct Lever_OnMontageDone final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Lever_OnMontageDone) == 0x000008, "Wrong alignment on Lever_OnMontageDone");
static_assert(sizeof(Lever_OnMontageDone) == 0x000008, "Wrong size on Lever_OnMontageDone");
static_assert(offsetof(Lever_OnMontageDone, InteractingCharacter) == 0x000000, "Member 'Lever_OnMontageDone::InteractingCharacter' has a wrong offset!");

// Function ObsidianFox.Lever.OnRepositionDone
// 0x0008 (0x0008 - 0x0000)
struct Lever_OnRepositionDone final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Lever_OnRepositionDone) == 0x000008, "Wrong alignment on Lever_OnRepositionDone");
static_assert(sizeof(Lever_OnRepositionDone) == 0x000008, "Wrong size on Lever_OnRepositionDone");
static_assert(offsetof(Lever_OnRepositionDone, InteractingCharacter) == 0x000000, "Member 'Lever_OnRepositionDone::InteractingCharacter' has a wrong offset!");

// Function ObsidianFox.Lever.StartMontage
// 0x0028 (0x0028 - 0x0000)
struct Lever_StartMontage final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           MontageTag;                                        // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Section;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FIKParameters>                  IKParameters;                                      // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Lever_StartMontage) == 0x000008, "Wrong alignment on Lever_StartMontage");
static_assert(sizeof(Lever_StartMontage) == 0x000028, "Wrong size on Lever_StartMontage");
static_assert(offsetof(Lever_StartMontage, InteractingCharacter) == 0x000000, "Member 'Lever_StartMontage::InteractingCharacter' has a wrong offset!");
static_assert(offsetof(Lever_StartMontage, MontageTag) == 0x000008, "Member 'Lever_StartMontage::MontageTag' has a wrong offset!");
static_assert(offsetof(Lever_StartMontage, Section) == 0x000010, "Member 'Lever_StartMontage::Section' has a wrong offset!");
static_assert(offsetof(Lever_StartMontage, IKParameters) == 0x000018, "Member 'Lever_StartMontage::IKParameters' has a wrong offset!");

// Function ObsidianFox.Lever.StartReposition
// 0x0008 (0x0008 - 0x0000)
struct Lever_StartReposition final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Lever_StartReposition) == 0x000008, "Wrong alignment on Lever_StartReposition");
static_assert(sizeof(Lever_StartReposition) == 0x000008, "Wrong size on Lever_StartReposition");
static_assert(offsetof(Lever_StartReposition, InteractingCharacter) == 0x000000, "Member 'Lever_StartReposition::InteractingCharacter' has a wrong offset!");

// Function ObsidianFox.MenuInventorySectionHud.FindNewActiveSlot
// 0x0008 (0x0008 - 0x0000)
struct MenuInventorySectionHud_FindNewActiveSlot final
{
public:
	int32                                         RowNumberToAdd;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColumnNumberToAdd;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuInventorySectionHud_FindNewActiveSlot) == 0x000004, "Wrong alignment on MenuInventorySectionHud_FindNewActiveSlot");
static_assert(sizeof(MenuInventorySectionHud_FindNewActiveSlot) == 0x000008, "Wrong size on MenuInventorySectionHud_FindNewActiveSlot");
static_assert(offsetof(MenuInventorySectionHud_FindNewActiveSlot, RowNumberToAdd) == 0x000000, "Member 'MenuInventorySectionHud_FindNewActiveSlot::RowNumberToAdd' has a wrong offset!");
static_assert(offsetof(MenuInventorySectionHud_FindNewActiveSlot, ColumnNumberToAdd) == 0x000004, "Member 'MenuInventorySectionHud_FindNewActiveSlot::ColumnNumberToAdd' has a wrong offset!");

// Function ObsidianFox.MenuInventorySectionHud.SetActiveSlot
// 0x0004 (0x0004 - 0x0000)
struct MenuInventorySectionHud_SetActiveSlot final
{
public:
	int32                                         IndexNumber;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuInventorySectionHud_SetActiveSlot) == 0x000004, "Wrong alignment on MenuInventorySectionHud_SetActiveSlot");
static_assert(sizeof(MenuInventorySectionHud_SetActiveSlot) == 0x000004, "Wrong size on MenuInventorySectionHud_SetActiveSlot");
static_assert(offsetof(MenuInventorySectionHud_SetActiveSlot, IndexNumber) == 0x000000, "Member 'MenuInventorySectionHud_SetActiveSlot::IndexNumber' has a wrong offset!");

// Function ObsidianFox.MenuInventorySectionHud.GetActiveMenuSlot
// 0x0008 (0x0008 - 0x0000)
struct MenuInventorySectionHud_GetActiveMenuSlot final
{
public:
	class UMenuInventorySelectionSlot*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuInventorySectionHud_GetActiveMenuSlot) == 0x000008, "Wrong alignment on MenuInventorySectionHud_GetActiveMenuSlot");
static_assert(sizeof(MenuInventorySectionHud_GetActiveMenuSlot) == 0x000008, "Wrong size on MenuInventorySectionHud_GetActiveMenuSlot");
static_assert(offsetof(MenuInventorySectionHud_GetActiveMenuSlot, ReturnValue) == 0x000000, "Member 'MenuInventorySectionHud_GetActiveMenuSlot::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EquipmentManager.AttachWeaponToEquipmentSocket
// 0x0010 (0x0010 - 0x0000)
struct EquipmentManager_AttachWeaponToEquipmentSocket final
{
public:
	class AOFWeaponActor*                         Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEquipmentSocket                              SocketLocation;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EquipmentManager_AttachWeaponToEquipmentSocket) == 0x000008, "Wrong alignment on EquipmentManager_AttachWeaponToEquipmentSocket");
static_assert(sizeof(EquipmentManager_AttachWeaponToEquipmentSocket) == 0x000010, "Wrong size on EquipmentManager_AttachWeaponToEquipmentSocket");
static_assert(offsetof(EquipmentManager_AttachWeaponToEquipmentSocket, Weapon) == 0x000000, "Member 'EquipmentManager_AttachWeaponToEquipmentSocket::Weapon' has a wrong offset!");
static_assert(offsetof(EquipmentManager_AttachWeaponToEquipmentSocket, SocketLocation) == 0x000008, "Member 'EquipmentManager_AttachWeaponToEquipmentSocket::SocketLocation' has a wrong offset!");

// Function ObsidianFox.EquipmentManager.DestroyWeapon
// 0x0010 (0x0010 - 0x0000)
struct EquipmentManager_DestroyWeapon final
{
public:
	class AOFWeaponActor*                         WeaponActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EquipmentManager_DestroyWeapon) == 0x000008, "Wrong alignment on EquipmentManager_DestroyWeapon");
static_assert(sizeof(EquipmentManager_DestroyWeapon) == 0x000010, "Wrong size on EquipmentManager_DestroyWeapon");
static_assert(offsetof(EquipmentManager_DestroyWeapon, WeaponActor) == 0x000000, "Member 'EquipmentManager_DestroyWeapon::WeaponActor' has a wrong offset!");
static_assert(offsetof(EquipmentManager_DestroyWeapon, ReturnValue) == 0x000008, "Member 'EquipmentManager_DestroyWeapon::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EquipmentManager.EquipNext
// 0x0018 (0x0018 - 0x0000)
struct EquipmentManager_EquipNext final
{
public:
	EEquipmentType                                WeaponType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrevious;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeaponInfo                            ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManager_EquipNext) == 0x000008, "Wrong alignment on EquipmentManager_EquipNext");
static_assert(sizeof(EquipmentManager_EquipNext) == 0x000018, "Wrong size on EquipmentManager_EquipNext");
static_assert(offsetof(EquipmentManager_EquipNext, WeaponType) == 0x000000, "Member 'EquipmentManager_EquipNext::WeaponType' has a wrong offset!");
static_assert(offsetof(EquipmentManager_EquipNext, bPrevious) == 0x000001, "Member 'EquipmentManager_EquipNext::bPrevious' has a wrong offset!");
static_assert(offsetof(EquipmentManager_EquipNext, ReturnValue) == 0x000008, "Member 'EquipmentManager_EquipNext::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EquipmentManager.EquipWeapon
// 0x0018 (0x0018 - 0x0000)
struct EquipmentManager_EquipWeapon final
{
public:
	class UItemData_Equippable*                   ItemData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeaponInfo                            ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManager_EquipWeapon) == 0x000008, "Wrong alignment on EquipmentManager_EquipWeapon");
static_assert(sizeof(EquipmentManager_EquipWeapon) == 0x000018, "Wrong size on EquipmentManager_EquipWeapon");
static_assert(offsetof(EquipmentManager_EquipWeapon, ItemData) == 0x000000, "Member 'EquipmentManager_EquipWeapon::ItemData' has a wrong offset!");
static_assert(offsetof(EquipmentManager_EquipWeapon, ReturnValue) == 0x000008, "Member 'EquipmentManager_EquipWeapon::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EquipmentManager.GetSpawnedWeapons
// 0x0010 (0x0010 - 0x0000)
struct EquipmentManager_GetSpawnedWeapons final
{
public:
	TArray<struct FWeaponInfo>                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManager_GetSpawnedWeapons) == 0x000008, "Wrong alignment on EquipmentManager_GetSpawnedWeapons");
static_assert(sizeof(EquipmentManager_GetSpawnedWeapons) == 0x000010, "Wrong size on EquipmentManager_GetSpawnedWeapons");
static_assert(offsetof(EquipmentManager_GetSpawnedWeapons, ReturnValue) == 0x000000, "Member 'EquipmentManager_GetSpawnedWeapons::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EquipmentManager.GetTotalAmmoByAmmo
// 0x0050 (0x0050 - 0x0000)
struct EquipmentManager_GetTotalAmmoByAmmo final
{
public:
	TMap<class UItemData*, int32>                 ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManager_GetTotalAmmoByAmmo) == 0x000008, "Wrong alignment on EquipmentManager_GetTotalAmmoByAmmo");
static_assert(sizeof(EquipmentManager_GetTotalAmmoByAmmo) == 0x000050, "Wrong size on EquipmentManager_GetTotalAmmoByAmmo");
static_assert(offsetof(EquipmentManager_GetTotalAmmoByAmmo, ReturnValue) == 0x000000, "Member 'EquipmentManager_GetTotalAmmoByAmmo::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EquipmentManager.GetTotalAmmoByWeapon
// 0x0050 (0x0050 - 0x0000)
struct EquipmentManager_GetTotalAmmoByWeapon final
{
public:
	TMap<class UItemData_Equippable*, int32>      ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManager_GetTotalAmmoByWeapon) == 0x000008, "Wrong alignment on EquipmentManager_GetTotalAmmoByWeapon");
static_assert(sizeof(EquipmentManager_GetTotalAmmoByWeapon) == 0x000050, "Wrong size on EquipmentManager_GetTotalAmmoByWeapon");
static_assert(offsetof(EquipmentManager_GetTotalAmmoByWeapon, ReturnValue) == 0x000000, "Member 'EquipmentManager_GetTotalAmmoByWeapon::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EquipmentManager.SetPistolSlot
// 0x0010 (0x0010 - 0x0000)
struct EquipmentManager_SetPistolSlot final
{
public:
	class UItemData_Equippable*                   ItemData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EquipmentManager_SetPistolSlot) == 0x000008, "Wrong alignment on EquipmentManager_SetPistolSlot");
static_assert(sizeof(EquipmentManager_SetPistolSlot) == 0x000010, "Wrong size on EquipmentManager_SetPistolSlot");
static_assert(offsetof(EquipmentManager_SetPistolSlot, ItemData) == 0x000000, "Member 'EquipmentManager_SetPistolSlot::ItemData' has a wrong offset!");
static_assert(offsetof(EquipmentManager_SetPistolSlot, ReturnValue) == 0x000008, "Member 'EquipmentManager_SetPistolSlot::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.EquipmentManager.WeaponEquipDelegate__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct EquipmentManager_WeaponEquipDelegate__DelegateSignature final
{
public:
	struct FWeaponInfo                            EquippedWeapon;                                    // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponInfo                            UnequippedWeapon;                                  // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManager_WeaponEquipDelegate__DelegateSignature) == 0x000008, "Wrong alignment on EquipmentManager_WeaponEquipDelegate__DelegateSignature");
static_assert(sizeof(EquipmentManager_WeaponEquipDelegate__DelegateSignature) == 0x000020, "Wrong size on EquipmentManager_WeaponEquipDelegate__DelegateSignature");
static_assert(offsetof(EquipmentManager_WeaponEquipDelegate__DelegateSignature, EquippedWeapon) == 0x000000, "Member 'EquipmentManager_WeaponEquipDelegate__DelegateSignature::EquippedWeapon' has a wrong offset!");
static_assert(offsetof(EquipmentManager_WeaponEquipDelegate__DelegateSignature, UnequippedWeapon) == 0x000010, "Member 'EquipmentManager_WeaponEquipDelegate__DelegateSignature::UnequippedWeapon' has a wrong offset!");

// DelegateFunction ObsidianFox.EquipmentManager.WeaponSlotUpdated__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct EquipmentManager_WeaponSlotUpdated__DelegateSignature final
{
public:
	class UItemData_Equippable*                   NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemData_Equippable*                   OldWeapon;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManager_WeaponSlotUpdated__DelegateSignature) == 0x000008, "Wrong alignment on EquipmentManager_WeaponSlotUpdated__DelegateSignature");
static_assert(sizeof(EquipmentManager_WeaponSlotUpdated__DelegateSignature) == 0x000010, "Wrong size on EquipmentManager_WeaponSlotUpdated__DelegateSignature");
static_assert(offsetof(EquipmentManager_WeaponSlotUpdated__DelegateSignature, NewWeapon) == 0x000000, "Member 'EquipmentManager_WeaponSlotUpdated__DelegateSignature::NewWeapon' has a wrong offset!");
static_assert(offsetof(EquipmentManager_WeaponSlotUpdated__DelegateSignature, OldWeapon) == 0x000008, "Member 'EquipmentManager_WeaponSlotUpdated__DelegateSignature::OldWeapon' has a wrong offset!");

// Function ObsidianFox.EquipmentManager.GetAvailableWeapons
// 0x0018 (0x0018 - 0x0000)
struct EquipmentManager_GetAvailableWeapons final
{
public:
	EEquipmentType                                Equipment;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UItemData_Equippable*>           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManager_GetAvailableWeapons) == 0x000008, "Wrong alignment on EquipmentManager_GetAvailableWeapons");
static_assert(sizeof(EquipmentManager_GetAvailableWeapons) == 0x000018, "Wrong size on EquipmentManager_GetAvailableWeapons");
static_assert(offsetof(EquipmentManager_GetAvailableWeapons, Equipment) == 0x000000, "Member 'EquipmentManager_GetAvailableWeapons::Equipment' has a wrong offset!");
static_assert(offsetof(EquipmentManager_GetAvailableWeapons, ReturnValue) == 0x000008, "Member 'EquipmentManager_GetAvailableWeapons::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EquipmentManager.GetCurrentWeaponActor
// 0x0010 (0x0010 - 0x0000)
struct EquipmentManager_GetCurrentWeaponActor final
{
public:
	EEquipmentType                                WeaponType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AOFWeaponActor*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManager_GetCurrentWeaponActor) == 0x000008, "Wrong alignment on EquipmentManager_GetCurrentWeaponActor");
static_assert(sizeof(EquipmentManager_GetCurrentWeaponActor) == 0x000010, "Wrong size on EquipmentManager_GetCurrentWeaponActor");
static_assert(offsetof(EquipmentManager_GetCurrentWeaponActor, WeaponType) == 0x000000, "Member 'EquipmentManager_GetCurrentWeaponActor::WeaponType' has a wrong offset!");
static_assert(offsetof(EquipmentManager_GetCurrentWeaponActor, ReturnValue) == 0x000008, "Member 'EquipmentManager_GetCurrentWeaponActor::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EquipmentManager.GetCurrentWeaponInfo
// 0x0018 (0x0018 - 0x0000)
struct EquipmentManager_GetCurrentWeaponInfo final
{
public:
	EEquipmentType                                WeaponType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeaponInfo                            ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManager_GetCurrentWeaponInfo) == 0x000008, "Wrong alignment on EquipmentManager_GetCurrentWeaponInfo");
static_assert(sizeof(EquipmentManager_GetCurrentWeaponInfo) == 0x000018, "Wrong size on EquipmentManager_GetCurrentWeaponInfo");
static_assert(offsetof(EquipmentManager_GetCurrentWeaponInfo, WeaponType) == 0x000000, "Member 'EquipmentManager_GetCurrentWeaponInfo::WeaponType' has a wrong offset!");
static_assert(offsetof(EquipmentManager_GetCurrentWeaponInfo, ReturnValue) == 0x000008, "Member 'EquipmentManager_GetCurrentWeaponInfo::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EquipmentManager.GetMeleeWeapon
// 0x0008 (0x0008 - 0x0000)
struct EquipmentManager_GetMeleeWeapon final
{
public:
	class AMeleeWeaponActor*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManager_GetMeleeWeapon) == 0x000008, "Wrong alignment on EquipmentManager_GetMeleeWeapon");
static_assert(sizeof(EquipmentManager_GetMeleeWeapon) == 0x000008, "Wrong size on EquipmentManager_GetMeleeWeapon");
static_assert(offsetof(EquipmentManager_GetMeleeWeapon, ReturnValue) == 0x000000, "Member 'EquipmentManager_GetMeleeWeapon::ReturnValue' has a wrong offset!");

// Function ObsidianFox.EquipmentManager.GetRangedWeapon
// 0x0008 (0x0008 - 0x0000)
struct EquipmentManager_GetRangedWeapon final
{
public:
	class AHitscanWeaponActor*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentManager_GetRangedWeapon) == 0x000008, "Wrong alignment on EquipmentManager_GetRangedWeapon");
static_assert(sizeof(EquipmentManager_GetRangedWeapon) == 0x000008, "Wrong size on EquipmentManager_GetRangedWeapon");
static_assert(offsetof(EquipmentManager_GetRangedWeapon, ReturnValue) == 0x000000, "Member 'EquipmentManager_GetRangedWeapon::ReturnValue' has a wrong offset!");

// Function ObsidianFox.MansionMap.OnMarkerDataAddedHandler
// 0x00F8 (0x00F8 - 0x0000)
struct MansionMap_OnMarkerDataAddedHandler final
{
public:
	struct FMapData                               MapDataMaker;                                      // 0x0000(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MansionMap_OnMarkerDataAddedHandler) == 0x000008, "Wrong alignment on MansionMap_OnMarkerDataAddedHandler");
static_assert(sizeof(MansionMap_OnMarkerDataAddedHandler) == 0x0000F8, "Wrong size on MansionMap_OnMarkerDataAddedHandler");
static_assert(offsetof(MansionMap_OnMarkerDataAddedHandler, MapDataMaker) == 0x000000, "Member 'MansionMap_OnMarkerDataAddedHandler::MapDataMaker' has a wrong offset!");

// Function ObsidianFox.MansionMap.OnMarkerDataDeletedHandler
// 0x00F8 (0x00F8 - 0x0000)
struct MansionMap_OnMarkerDataDeletedHandler final
{
public:
	struct FMapData                               MapDataMaker;                                      // 0x0000(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MansionMap_OnMarkerDataDeletedHandler) == 0x000008, "Wrong alignment on MansionMap_OnMarkerDataDeletedHandler");
static_assert(sizeof(MansionMap_OnMarkerDataDeletedHandler) == 0x0000F8, "Wrong size on MansionMap_OnMarkerDataDeletedHandler");
static_assert(offsetof(MansionMap_OnMarkerDataDeletedHandler, MapDataMaker) == 0x000000, "Member 'MansionMap_OnMarkerDataDeletedHandler::MapDataMaker' has a wrong offset!");

// Function ObsidianFox.MansionMap.OnNewRoomExploredHandler
// 0x0008 (0x0008 - 0x0000)
struct MansionMap_OnNewRoomExploredHandler final
{
public:
	struct FGameplayTag                           NewRoomTag;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MansionMap_OnNewRoomExploredHandler) == 0x000004, "Wrong alignment on MansionMap_OnNewRoomExploredHandler");
static_assert(sizeof(MansionMap_OnNewRoomExploredHandler) == 0x000008, "Wrong size on MansionMap_OnNewRoomExploredHandler");
static_assert(offsetof(MansionMap_OnNewRoomExploredHandler, NewRoomTag) == 0x000000, "Member 'MansionMap_OnNewRoomExploredHandler::NewRoomTag' has a wrong offset!");

// Function ObsidianFox.MansionMap.ShowMapIsOfNoUseWidget
// 0x0001 (0x0001 - 0x0000)
struct MansionMap_ShowMapIsOfNoUseWidget final
{
public:
	bool                                          bShowWidget;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MansionMap_ShowMapIsOfNoUseWidget) == 0x000001, "Wrong alignment on MansionMap_ShowMapIsOfNoUseWidget");
static_assert(sizeof(MansionMap_ShowMapIsOfNoUseWidget) == 0x000001, "Wrong size on MansionMap_ShowMapIsOfNoUseWidget");
static_assert(offsetof(MansionMap_ShowMapIsOfNoUseWidget, bShowWidget) == 0x000000, "Member 'MansionMap_ShowMapIsOfNoUseWidget::bShowWidget' has a wrong offset!");

// Function ObsidianFox.MansionMap.SwitchFloorHandler
// 0x0010 (0x0010 - 0x0000)
struct MansionMap_SwitchFloorHandler final
{
public:
	struct FInputActionValue                      InputActionValue;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MansionMap_SwitchFloorHandler) == 0x000004, "Wrong alignment on MansionMap_SwitchFloorHandler");
static_assert(sizeof(MansionMap_SwitchFloorHandler) == 0x000010, "Wrong size on MansionMap_SwitchFloorHandler");
static_assert(offsetof(MansionMap_SwitchFloorHandler, InputActionValue) == 0x000000, "Member 'MansionMap_SwitchFloorHandler::InputActionValue' has a wrong offset!");

// DelegateFunction ObsidianFox.EventTrigger.EventBegin__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct EventTrigger_EventBegin__DelegateSignature final
{
public:
	class AEventTrigger*                          EventTrigger;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  PlayerPawn;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventTrigger_EventBegin__DelegateSignature) == 0x000008, "Wrong alignment on EventTrigger_EventBegin__DelegateSignature");
static_assert(sizeof(EventTrigger_EventBegin__DelegateSignature) == 0x000010, "Wrong size on EventTrigger_EventBegin__DelegateSignature");
static_assert(offsetof(EventTrigger_EventBegin__DelegateSignature, EventTrigger) == 0x000000, "Member 'EventTrigger_EventBegin__DelegateSignature::EventTrigger' has a wrong offset!");
static_assert(offsetof(EventTrigger_EventBegin__DelegateSignature, PlayerPawn) == 0x000008, "Member 'EventTrigger_EventBegin__DelegateSignature::PlayerPawn' has a wrong offset!");

// DelegateFunction ObsidianFox.EventTrigger.EventEnd__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct EventTrigger_EventEnd__DelegateSignature final
{
public:
	class AEventTrigger*                          EventTrigger;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  PlayerPawn;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventTrigger_EventEnd__DelegateSignature) == 0x000008, "Wrong alignment on EventTrigger_EventEnd__DelegateSignature");
static_assert(sizeof(EventTrigger_EventEnd__DelegateSignature) == 0x000010, "Wrong size on EventTrigger_EventEnd__DelegateSignature");
static_assert(offsetof(EventTrigger_EventEnd__DelegateSignature, EventTrigger) == 0x000000, "Member 'EventTrigger_EventEnd__DelegateSignature::EventTrigger' has a wrong offset!");
static_assert(offsetof(EventTrigger_EventEnd__DelegateSignature, PlayerPawn) == 0x000008, "Member 'EventTrigger_EventEnd__DelegateSignature::PlayerPawn' has a wrong offset!");

// Function ObsidianFox.EventTrigger.NotifyInteractBegin
// 0x0008 (0x0008 - 0x0000)
struct EventTrigger_NotifyInteractBegin final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventTrigger_NotifyInteractBegin) == 0x000008, "Wrong alignment on EventTrigger_NotifyInteractBegin");
static_assert(sizeof(EventTrigger_NotifyInteractBegin) == 0x000008, "Wrong size on EventTrigger_NotifyInteractBegin");
static_assert(offsetof(EventTrigger_NotifyInteractBegin, InteractingCharacter) == 0x000000, "Member 'EventTrigger_NotifyInteractBegin::InteractingCharacter' has a wrong offset!");

// Function ObsidianFox.EventTrigger.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct EventTrigger_OnMontageEnded final
{
public:
	class UAnimMontage*                           InMontage;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventTrigger_OnMontageEnded) == 0x000008, "Wrong alignment on EventTrigger_OnMontageEnded");
static_assert(sizeof(EventTrigger_OnMontageEnded) == 0x000010, "Wrong size on EventTrigger_OnMontageEnded");
static_assert(offsetof(EventTrigger_OnMontageEnded, InMontage) == 0x000000, "Member 'EventTrigger_OnMontageEnded::InMontage' has a wrong offset!");
static_assert(offsetof(EventTrigger_OnMontageEnded, bInterrupted) == 0x000008, "Member 'EventTrigger_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function ObsidianFox.EventTrigger.SetDisabled
// 0x0001 (0x0001 - 0x0000)
struct EventTrigger_SetDisabled final
{
public:
	bool                                          bSetDisabled;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventTrigger_SetDisabled) == 0x000001, "Wrong alignment on EventTrigger_SetDisabled");
static_assert(sizeof(EventTrigger_SetDisabled) == 0x000001, "Wrong size on EventTrigger_SetDisabled");
static_assert(offsetof(EventTrigger_SetDisabled, bSetDisabled) == 0x000000, "Member 'EventTrigger_SetDisabled::bSetDisabled' has a wrong offset!");

// Function ObsidianFox.FaceAnimInterface.ApplyFaceAnimation
// 0x0018 (0x0018 - 0x0000)
struct FaceAnimInterface_ApplyFaceAnimation final
{
public:
	const class UObject*                          Instigator;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FaceAnimInterface_ApplyFaceAnimation) == 0x000008, "Wrong alignment on FaceAnimInterface_ApplyFaceAnimation");
static_assert(sizeof(FaceAnimInterface_ApplyFaceAnimation) == 0x000018, "Wrong size on FaceAnimInterface_ApplyFaceAnimation");
static_assert(offsetof(FaceAnimInterface_ApplyFaceAnimation, Instigator) == 0x000000, "Member 'FaceAnimInterface_ApplyFaceAnimation::Instigator' has a wrong offset!");
static_assert(offsetof(FaceAnimInterface_ApplyFaceAnimation, Animation) == 0x000008, "Member 'FaceAnimInterface_ApplyFaceAnimation::Animation' has a wrong offset!");
static_assert(offsetof(FaceAnimInterface_ApplyFaceAnimation, BlendTime) == 0x000010, "Member 'FaceAnimInterface_ApplyFaceAnimation::BlendTime' has a wrong offset!");

// Function ObsidianFox.FaceAnimInterface.ApplyMouthAnimation
// 0x0018 (0x0018 - 0x0000)
struct FaceAnimInterface_ApplyMouthAnimation final
{
public:
	const class UObject*                          Instigator;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FaceAnimInterface_ApplyMouthAnimation) == 0x000008, "Wrong alignment on FaceAnimInterface_ApplyMouthAnimation");
static_assert(sizeof(FaceAnimInterface_ApplyMouthAnimation) == 0x000018, "Wrong size on FaceAnimInterface_ApplyMouthAnimation");
static_assert(offsetof(FaceAnimInterface_ApplyMouthAnimation, Instigator) == 0x000000, "Member 'FaceAnimInterface_ApplyMouthAnimation::Instigator' has a wrong offset!");
static_assert(offsetof(FaceAnimInterface_ApplyMouthAnimation, Animation) == 0x000008, "Member 'FaceAnimInterface_ApplyMouthAnimation::Animation' has a wrong offset!");
static_assert(offsetof(FaceAnimInterface_ApplyMouthAnimation, BlendTime) == 0x000010, "Member 'FaceAnimInterface_ApplyMouthAnimation::BlendTime' has a wrong offset!");

// Function ObsidianFox.FaceAnimInterface.RemoveFaceAnimation
// 0x0010 (0x0010 - 0x0000)
struct FaceAnimInterface_RemoveFaceAnimation final
{
public:
	const class UObject*                          Instigator;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FaceAnimInterface_RemoveFaceAnimation) == 0x000008, "Wrong alignment on FaceAnimInterface_RemoveFaceAnimation");
static_assert(sizeof(FaceAnimInterface_RemoveFaceAnimation) == 0x000010, "Wrong size on FaceAnimInterface_RemoveFaceAnimation");
static_assert(offsetof(FaceAnimInterface_RemoveFaceAnimation, Instigator) == 0x000000, "Member 'FaceAnimInterface_RemoveFaceAnimation::Instigator' has a wrong offset!");
static_assert(offsetof(FaceAnimInterface_RemoveFaceAnimation, BlendTime) == 0x000008, "Member 'FaceAnimInterface_RemoveFaceAnimation::BlendTime' has a wrong offset!");

// Function ObsidianFox.FaceAnimInterface.RemoveMouthAnimation
// 0x0010 (0x0010 - 0x0000)
struct FaceAnimInterface_RemoveMouthAnimation final
{
public:
	const class UObject*                          Instigator;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FaceAnimInterface_RemoveMouthAnimation) == 0x000008, "Wrong alignment on FaceAnimInterface_RemoveMouthAnimation");
static_assert(sizeof(FaceAnimInterface_RemoveMouthAnimation) == 0x000010, "Wrong size on FaceAnimInterface_RemoveMouthAnimation");
static_assert(offsetof(FaceAnimInterface_RemoveMouthAnimation, Instigator) == 0x000000, "Member 'FaceAnimInterface_RemoveMouthAnimation::Instigator' has a wrong offset!");
static_assert(offsetof(FaceAnimInterface_RemoveMouthAnimation, BlendTime) == 0x000008, "Member 'FaceAnimInterface_RemoveMouthAnimation::BlendTime' has a wrong offset!");

// Function ObsidianFox.FireSpreadComponent.StartFireAtLocation
// 0x000C (0x000C - 0x0000)
struct FireSpreadComponent_StartFireAtLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireSpreadComponent_StartFireAtLocation) == 0x000004, "Wrong alignment on FireSpreadComponent_StartFireAtLocation");
static_assert(sizeof(FireSpreadComponent_StartFireAtLocation) == 0x00000C, "Wrong size on FireSpreadComponent_StartFireAtLocation");
static_assert(offsetof(FireSpreadComponent_StartFireAtLocation, Location) == 0x000000, "Member 'FireSpreadComponent_StartFireAtLocation::Location' has a wrong offset!");

// Function ObsidianFox.FlammableInterface.SimpleIgnite
// 0x0008 (0x0008 - 0x0000)
struct FlammableInterface_SimpleIgnite final
{
public:
	class APawn*                                  Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlammableInterface_SimpleIgnite) == 0x000008, "Wrong alignment on FlammableInterface_SimpleIgnite");
static_assert(sizeof(FlammableInterface_SimpleIgnite) == 0x000008, "Wrong size on FlammableInterface_SimpleIgnite");
static_assert(offsetof(FlammableInterface_SimpleIgnite, Instigator) == 0x000000, "Member 'FlammableInterface_SimpleIgnite::Instigator' has a wrong offset!");

// Function ObsidianFox.ObjectiveComponent.AddNotes
// 0x0020 (0x0020 - 0x0000)
struct ObjectiveComponent_AddNotes final
{
public:
	class FText                                   NewNote;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UObjectivesData*                  ObjectivesData;                                    // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveComponent_AddNotes) == 0x000008, "Wrong alignment on ObjectiveComponent_AddNotes");
static_assert(sizeof(ObjectiveComponent_AddNotes) == 0x000020, "Wrong size on ObjectiveComponent_AddNotes");
static_assert(offsetof(ObjectiveComponent_AddNotes, NewNote) == 0x000000, "Member 'ObjectiveComponent_AddNotes::NewNote' has a wrong offset!");
static_assert(offsetof(ObjectiveComponent_AddNotes, ObjectivesData) == 0x000018, "Member 'ObjectiveComponent_AddNotes::ObjectivesData' has a wrong offset!");

// Function ObsidianFox.ObjectiveComponent.CompleteObjective
// 0x0008 (0x0008 - 0x0000)
struct ObjectiveComponent_CompleteObjective final
{
public:
	const class UObjectivesData*                  Data;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveComponent_CompleteObjective) == 0x000008, "Wrong alignment on ObjectiveComponent_CompleteObjective");
static_assert(sizeof(ObjectiveComponent_CompleteObjective) == 0x000008, "Wrong size on ObjectiveComponent_CompleteObjective");
static_assert(offsetof(ObjectiveComponent_CompleteObjective, Data) == 0x000000, "Member 'ObjectiveComponent_CompleteObjective::Data' has a wrong offset!");

// Function ObsidianFox.ObjectiveComponent.CompleteSubObjective
// 0x0018 (0x0018 - 0x0000)
struct ObjectiveComponent_CompleteSubObjective final
{
public:
	const class UObjectivesData*                  Data;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectiveParts                               Part;                                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           InObjectiveTag;                                    // 0x000C(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ObjectiveComponent_CompleteSubObjective) == 0x000008, "Wrong alignment on ObjectiveComponent_CompleteSubObjective");
static_assert(sizeof(ObjectiveComponent_CompleteSubObjective) == 0x000018, "Wrong size on ObjectiveComponent_CompleteSubObjective");
static_assert(offsetof(ObjectiveComponent_CompleteSubObjective, Data) == 0x000000, "Member 'ObjectiveComponent_CompleteSubObjective::Data' has a wrong offset!");
static_assert(offsetof(ObjectiveComponent_CompleteSubObjective, Part) == 0x000008, "Member 'ObjectiveComponent_CompleteSubObjective::Part' has a wrong offset!");
static_assert(offsetof(ObjectiveComponent_CompleteSubObjective, InObjectiveTag) == 0x00000C, "Member 'ObjectiveComponent_CompleteSubObjective::InObjectiveTag' has a wrong offset!");

// Function ObsidianFox.ObjectiveComponent.IsObjectiveActive
// 0x0030 (0x0030 - 0x0000)
struct ObjectiveComponent_IsObjectiveActive final
{
public:
	TSoftObjectPtr<class UObjectivesData>         ObjectiveData;                                     // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ObjectiveComponent_IsObjectiveActive) == 0x000008, "Wrong alignment on ObjectiveComponent_IsObjectiveActive");
static_assert(sizeof(ObjectiveComponent_IsObjectiveActive) == 0x000030, "Wrong size on ObjectiveComponent_IsObjectiveActive");
static_assert(offsetof(ObjectiveComponent_IsObjectiveActive, ObjectiveData) == 0x000000, "Member 'ObjectiveComponent_IsObjectiveActive::ObjectiveData' has a wrong offset!");
static_assert(offsetof(ObjectiveComponent_IsObjectiveActive, ReturnValue) == 0x000028, "Member 'ObjectiveComponent_IsObjectiveActive::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ObjectiveComponent.OnNotePlayed
// 0x0020 (0x0020 - 0x0000)
struct ObjectiveComponent_OnNotePlayed final
{
public:
	class FText                                   Note;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UObjectivesData*                  ObjectivesData;                                    // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveComponent_OnNotePlayed) == 0x000008, "Wrong alignment on ObjectiveComponent_OnNotePlayed");
static_assert(sizeof(ObjectiveComponent_OnNotePlayed) == 0x000020, "Wrong size on ObjectiveComponent_OnNotePlayed");
static_assert(offsetof(ObjectiveComponent_OnNotePlayed, Note) == 0x000000, "Member 'ObjectiveComponent_OnNotePlayed::Note' has a wrong offset!");
static_assert(offsetof(ObjectiveComponent_OnNotePlayed, ObjectivesData) == 0x000018, "Member 'ObjectiveComponent_OnNotePlayed::ObjectivesData' has a wrong offset!");

// Function ObsidianFox.ObjectiveComponent.SetObjectiveUnSeen
// 0x0030 (0x0030 - 0x0000)
struct ObjectiveComponent_SetObjectiveUnSeen final
{
public:
	bool                                          bUnSeen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObjectivesData>         ObjectiveSoftClassPath;                            // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveComponent_SetObjectiveUnSeen) == 0x000008, "Wrong alignment on ObjectiveComponent_SetObjectiveUnSeen");
static_assert(sizeof(ObjectiveComponent_SetObjectiveUnSeen) == 0x000030, "Wrong size on ObjectiveComponent_SetObjectiveUnSeen");
static_assert(offsetof(ObjectiveComponent_SetObjectiveUnSeen, bUnSeen) == 0x000000, "Member 'ObjectiveComponent_SetObjectiveUnSeen::bUnSeen' has a wrong offset!");
static_assert(offsetof(ObjectiveComponent_SetObjectiveUnSeen, ObjectiveSoftClassPath) == 0x000008, "Member 'ObjectiveComponent_SetObjectiveUnSeen::ObjectiveSoftClassPath' has a wrong offset!");

// Function ObsidianFox.ObjectiveComponent.StartNewSubObjective
// 0x0018 (0x0018 - 0x0000)
struct ObjectiveComponent_StartNewSubObjective final
{
public:
	const class UObjectivesData*                  Data;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectiveParts                               NewPart;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           InObjectiveTag;                                    // 0x000C(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ObjectiveComponent_StartNewSubObjective) == 0x000008, "Wrong alignment on ObjectiveComponent_StartNewSubObjective");
static_assert(sizeof(ObjectiveComponent_StartNewSubObjective) == 0x000018, "Wrong size on ObjectiveComponent_StartNewSubObjective");
static_assert(offsetof(ObjectiveComponent_StartNewSubObjective, Data) == 0x000000, "Member 'ObjectiveComponent_StartNewSubObjective::Data' has a wrong offset!");
static_assert(offsetof(ObjectiveComponent_StartNewSubObjective, NewPart) == 0x000008, "Member 'ObjectiveComponent_StartNewSubObjective::NewPart' has a wrong offset!");
static_assert(offsetof(ObjectiveComponent_StartNewSubObjective, InObjectiveTag) == 0x00000C, "Member 'ObjectiveComponent_StartNewSubObjective::InObjectiveTag' has a wrong offset!");

// Function ObsidianFox.ObjectiveComponent.StartObjective
// 0x0018 (0x0018 - 0x0000)
struct ObjectiveComponent_StartObjective final
{
public:
	const class UObjectivesData*                  Data;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InObjectiveTag;                                    // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectiveParts                               NewPart;                                           // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ObjectiveComponent_StartObjective) == 0x000008, "Wrong alignment on ObjectiveComponent_StartObjective");
static_assert(sizeof(ObjectiveComponent_StartObjective) == 0x000018, "Wrong size on ObjectiveComponent_StartObjective");
static_assert(offsetof(ObjectiveComponent_StartObjective, Data) == 0x000000, "Member 'ObjectiveComponent_StartObjective::Data' has a wrong offset!");
static_assert(offsetof(ObjectiveComponent_StartObjective, InObjectiveTag) == 0x000008, "Member 'ObjectiveComponent_StartObjective::InObjectiveTag' has a wrong offset!");
static_assert(offsetof(ObjectiveComponent_StartObjective, NewPart) == 0x000010, "Member 'ObjectiveComponent_StartObjective::NewPart' has a wrong offset!");

// Function ObsidianFox.ObjectiveComponent.UpdateObjective
// 0x0018 (0x0018 - 0x0000)
struct ObjectiveComponent_UpdateObjective final
{
public:
	const class UObjectivesData*                  Data;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectiveParts                               Part;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           InObjectiveTag;                                    // 0x000C(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ObjectiveComponent_UpdateObjective) == 0x000008, "Wrong alignment on ObjectiveComponent_UpdateObjective");
static_assert(sizeof(ObjectiveComponent_UpdateObjective) == 0x000018, "Wrong size on ObjectiveComponent_UpdateObjective");
static_assert(offsetof(ObjectiveComponent_UpdateObjective, Data) == 0x000000, "Member 'ObjectiveComponent_UpdateObjective::Data' has a wrong offset!");
static_assert(offsetof(ObjectiveComponent_UpdateObjective, Part) == 0x000008, "Member 'ObjectiveComponent_UpdateObjective::Part' has a wrong offset!");
static_assert(offsetof(ObjectiveComponent_UpdateObjective, InObjectiveTag) == 0x00000C, "Member 'ObjectiveComponent_UpdateObjective::InObjectiveTag' has a wrong offset!");

// Function ObsidianFox.ObjectiveComponent.CheckIfWeHaveObjective
// 0x0010 (0x0010 - 0x0000)
struct ObjectiveComponent_CheckIfWeHaveObjective final
{
public:
	const class UObjectivesData*                  Data;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ObjectiveComponent_CheckIfWeHaveObjective) == 0x000008, "Wrong alignment on ObjectiveComponent_CheckIfWeHaveObjective");
static_assert(sizeof(ObjectiveComponent_CheckIfWeHaveObjective) == 0x000010, "Wrong size on ObjectiveComponent_CheckIfWeHaveObjective");
static_assert(offsetof(ObjectiveComponent_CheckIfWeHaveObjective, Data) == 0x000000, "Member 'ObjectiveComponent_CheckIfWeHaveObjective::Data' has a wrong offset!");
static_assert(offsetof(ObjectiveComponent_CheckIfWeHaveObjective, ReturnValue) == 0x000008, "Member 'ObjectiveComponent_CheckIfWeHaveObjective::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ObjectiveComponent.GetCurrentObjectives
// 0x0050 (0x0050 - 0x0000)
struct ObjectiveComponent_GetCurrentObjectives final
{
public:
	TMap<int32, struct FObjectiveChapter>         ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveComponent_GetCurrentObjectives) == 0x000008, "Wrong alignment on ObjectiveComponent_GetCurrentObjectives");
static_assert(sizeof(ObjectiveComponent_GetCurrentObjectives) == 0x000050, "Wrong size on ObjectiveComponent_GetCurrentObjectives");
static_assert(offsetof(ObjectiveComponent_GetCurrentObjectives, ReturnValue) == 0x000000, "Member 'ObjectiveComponent_GetCurrentObjectives::ReturnValue' has a wrong offset!");

// Function ObsidianFox.FlowDoorComponent.OnDoorClosedHandler
// 0x0001 (0x0001 - 0x0000)
struct FlowDoorComponent_OnDoorClosedHandler final
{
public:
	bool                                          bWasInstantClose;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlowDoorComponent_OnDoorClosedHandler) == 0x000001, "Wrong alignment on FlowDoorComponent_OnDoorClosedHandler");
static_assert(sizeof(FlowDoorComponent_OnDoorClosedHandler) == 0x000001, "Wrong size on FlowDoorComponent_OnDoorClosedHandler");
static_assert(offsetof(FlowDoorComponent_OnDoorClosedHandler, bWasInstantClose) == 0x000000, "Member 'FlowDoorComponent_OnDoorClosedHandler::bWasInstantClose' has a wrong offset!");

// Function ObsidianFox.OFWeaponActor.BeginAttack
// 0x0008 (0x0008 - 0x0000)
struct OFWeaponActor_BeginAttack final
{
public:
	struct FGameplayTag                           AttackEvent;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFWeaponActor_BeginAttack) == 0x000004, "Wrong alignment on OFWeaponActor_BeginAttack");
static_assert(sizeof(OFWeaponActor_BeginAttack) == 0x000008, "Wrong size on OFWeaponActor_BeginAttack");
static_assert(offsetof(OFWeaponActor_BeginAttack, AttackEvent) == 0x000000, "Member 'OFWeaponActor_BeginAttack::AttackEvent' has a wrong offset!");

// DelegateFunction ObsidianFox.OFWeaponActor.EquipSignature__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct OFWeaponActor_EquipSignature__DelegateSignature final
{
public:
	class AOFWeaponActor*                         Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFWeaponActor_EquipSignature__DelegateSignature) == 0x000008, "Wrong alignment on OFWeaponActor_EquipSignature__DelegateSignature");
static_assert(sizeof(OFWeaponActor_EquipSignature__DelegateSignature) == 0x000008, "Wrong size on OFWeaponActor_EquipSignature__DelegateSignature");
static_assert(offsetof(OFWeaponActor_EquipSignature__DelegateSignature, Weapon) == 0x000000, "Member 'OFWeaponActor_EquipSignature__DelegateSignature::Weapon' has a wrong offset!");

// Function ObsidianFox.OFWeaponActor.GetBlockedSockets
// 0x0010 (0x0010 - 0x0000)
struct OFWeaponActor_GetBlockedSockets final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFWeaponActor_GetBlockedSockets) == 0x000008, "Wrong alignment on OFWeaponActor_GetBlockedSockets");
static_assert(sizeof(OFWeaponActor_GetBlockedSockets) == 0x000010, "Wrong size on OFWeaponActor_GetBlockedSockets");
static_assert(offsetof(OFWeaponActor_GetBlockedSockets, ReturnValue) == 0x000000, "Member 'OFWeaponActor_GetBlockedSockets::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFWeaponActor.GetMesh
// 0x0008 (0x0008 - 0x0000)
struct OFWeaponActor_GetMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFWeaponActor_GetMesh) == 0x000008, "Wrong alignment on OFWeaponActor_GetMesh");
static_assert(sizeof(OFWeaponActor_GetMesh) == 0x000008, "Wrong size on OFWeaponActor_GetMesh");
static_assert(offsetof(OFWeaponActor_GetMesh, ReturnValue) == 0x000000, "Member 'OFWeaponActor_GetMesh::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFWeaponActor.NotifyWeaponHit
// 0x00B0 (0x00B0 - 0x0000)
struct OFWeaponActor_NotifyWeaponHit final
{
public:
	struct FGameplayEventData                     EventData;                                         // 0x0000(0x00B0)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFWeaponActor_NotifyWeaponHit) == 0x000008, "Wrong alignment on OFWeaponActor_NotifyWeaponHit");
static_assert(sizeof(OFWeaponActor_NotifyWeaponHit) == 0x0000B0, "Wrong size on OFWeaponActor_NotifyWeaponHit");
static_assert(offsetof(OFWeaponActor_NotifyWeaponHit, EventData) == 0x000000, "Member 'OFWeaponActor_NotifyWeaponHit::EventData' has a wrong offset!");

// Function ObsidianFox.OFWeaponActor.OnEffectImpact
// 0x0088 (0x0088 - 0x0000)
struct OFWeaponActor_OnEffectImpact final
{
public:
	struct FHitResult                             OutHit;                                            // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFWeaponActor_OnEffectImpact) == 0x000004, "Wrong alignment on OFWeaponActor_OnEffectImpact");
static_assert(sizeof(OFWeaponActor_OnEffectImpact) == 0x000088, "Wrong size on OFWeaponActor_OnEffectImpact");
static_assert(offsetof(OFWeaponActor_OnEffectImpact, OutHit) == 0x000000, "Member 'OFWeaponActor_OnEffectImpact::OutHit' has a wrong offset!");

// Function ObsidianFox.OFWeaponActor.OnInstigatorPossesed
// 0x0008 (0x0008 - 0x0000)
struct OFWeaponActor_OnInstigatorPossesed final
{
public:
	class AController*                            NewController;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFWeaponActor_OnInstigatorPossesed) == 0x000008, "Wrong alignment on OFWeaponActor_OnInstigatorPossesed");
static_assert(sizeof(OFWeaponActor_OnInstigatorPossesed) == 0x000008, "Wrong size on OFWeaponActor_OnInstigatorPossesed");
static_assert(offsetof(OFWeaponActor_OnInstigatorPossesed, NewController) == 0x000000, "Member 'OFWeaponActor_OnInstigatorPossesed::NewController' has a wrong offset!");

// Function ObsidianFox.OFWeaponActor.PlayHitSoundEffect
// 0x0108 (0x0108 - 0x0000)
struct OFWeaponActor_PlayHitSoundEffect final
{
public:
	class UWorld*                                 WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSurfaceHitFX                          HitFX;                                             // 0x0090(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFWeaponActor_PlayHitSoundEffect) == 0x000008, "Wrong alignment on OFWeaponActor_PlayHitSoundEffect");
static_assert(sizeof(OFWeaponActor_PlayHitSoundEffect) == 0x000108, "Wrong size on OFWeaponActor_PlayHitSoundEffect");
static_assert(offsetof(OFWeaponActor_PlayHitSoundEffect, WorldContext) == 0x000000, "Member 'OFWeaponActor_PlayHitSoundEffect::WorldContext' has a wrong offset!");
static_assert(offsetof(OFWeaponActor_PlayHitSoundEffect, Hit) == 0x000008, "Member 'OFWeaponActor_PlayHitSoundEffect::Hit' has a wrong offset!");
static_assert(offsetof(OFWeaponActor_PlayHitSoundEffect, HitFX) == 0x000090, "Member 'OFWeaponActor_PlayHitSoundEffect::HitFX' has a wrong offset!");

// Function ObsidianFox.OFWeaponActor.SetVisibility
// 0x0001 (0x0001 - 0x0000)
struct OFWeaponActor_SetVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFWeaponActor_SetVisibility) == 0x000001, "Wrong alignment on OFWeaponActor_SetVisibility");
static_assert(sizeof(OFWeaponActor_SetVisibility) == 0x000001, "Wrong size on OFWeaponActor_SetVisibility");
static_assert(offsetof(OFWeaponActor_SetVisibility, bNewVisibility) == 0x000000, "Member 'OFWeaponActor_SetVisibility::bNewVisibility' has a wrong offset!");

// Function ObsidianFox.OFWeaponActor.SpawnHitDecal
// 0x0108 (0x0108 - 0x0000)
struct OFWeaponActor_SpawnHitDecal final
{
public:
	class UWorld*                                 WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSurfaceHitFX                          HitFX;                                             // 0x0090(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFWeaponActor_SpawnHitDecal) == 0x000008, "Wrong alignment on OFWeaponActor_SpawnHitDecal");
static_assert(sizeof(OFWeaponActor_SpawnHitDecal) == 0x000108, "Wrong size on OFWeaponActor_SpawnHitDecal");
static_assert(offsetof(OFWeaponActor_SpawnHitDecal, WorldContext) == 0x000000, "Member 'OFWeaponActor_SpawnHitDecal::WorldContext' has a wrong offset!");
static_assert(offsetof(OFWeaponActor_SpawnHitDecal, Hit) == 0x000008, "Member 'OFWeaponActor_SpawnHitDecal::Hit' has a wrong offset!");
static_assert(offsetof(OFWeaponActor_SpawnHitDecal, HitFX) == 0x000090, "Member 'OFWeaponActor_SpawnHitDecal::HitFX' has a wrong offset!");

// Function ObsidianFox.OFWeaponActor.SpawnHitFX
// 0x0088 (0x0088 - 0x0000)
struct OFWeaponActor_SpawnHitFX final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFWeaponActor_SpawnHitFX) == 0x000004, "Wrong alignment on OFWeaponActor_SpawnHitFX");
static_assert(sizeof(OFWeaponActor_SpawnHitFX) == 0x000088, "Wrong size on OFWeaponActor_SpawnHitFX");
static_assert(offsetof(OFWeaponActor_SpawnHitFX, Hit) == 0x000000, "Member 'OFWeaponActor_SpawnHitFX::Hit' has a wrong offset!");

// Function ObsidianFox.OFWeaponActor.SpawnHitParticleSystem
// 0x0108 (0x0108 - 0x0000)
struct OFWeaponActor_SpawnHitParticleSystem final
{
public:
	class UWorld*                                 WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSurfaceHitFX                          HitFX;                                             // 0x0090(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFWeaponActor_SpawnHitParticleSystem) == 0x000008, "Wrong alignment on OFWeaponActor_SpawnHitParticleSystem");
static_assert(sizeof(OFWeaponActor_SpawnHitParticleSystem) == 0x000108, "Wrong size on OFWeaponActor_SpawnHitParticleSystem");
static_assert(offsetof(OFWeaponActor_SpawnHitParticleSystem, WorldContext) == 0x000000, "Member 'OFWeaponActor_SpawnHitParticleSystem::WorldContext' has a wrong offset!");
static_assert(offsetof(OFWeaponActor_SpawnHitParticleSystem, Hit) == 0x000008, "Member 'OFWeaponActor_SpawnHitParticleSystem::Hit' has a wrong offset!");
static_assert(offsetof(OFWeaponActor_SpawnHitParticleSystem, HitFX) == 0x000090, "Member 'OFWeaponActor_SpawnHitParticleSystem::HitFX' has a wrong offset!");

// Function ObsidianFox.OFWeaponActor.GetAnimations
// 0x0008 (0x0008 - 0x0000)
struct OFWeaponActor_GetAnimations final
{
public:
	class UWeaponAnimationDataAsset*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFWeaponActor_GetAnimations) == 0x000008, "Wrong alignment on OFWeaponActor_GetAnimations");
static_assert(sizeof(OFWeaponActor_GetAnimations) == 0x000008, "Wrong size on OFWeaponActor_GetAnimations");
static_assert(offsetof(OFWeaponActor_GetAnimations, ReturnValue) == 0x000000, "Member 'OFWeaponActor_GetAnimations::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFWeaponActor.GetHandAnimations
// 0x0008 (0x0008 - 0x0000)
struct OFWeaponActor_GetHandAnimations final
{
public:
	class UWeaponAnimationHandDataAsset*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFWeaponActor_GetHandAnimations) == 0x000008, "Wrong alignment on OFWeaponActor_GetHandAnimations");
static_assert(sizeof(OFWeaponActor_GetHandAnimations) == 0x000008, "Wrong size on OFWeaponActor_GetHandAnimations");
static_assert(offsetof(OFWeaponActor_GetHandAnimations, ReturnValue) == 0x000000, "Member 'OFWeaponActor_GetHandAnimations::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFWeaponActor.GetWeaponUI
// 0x0028 (0x0028 - 0x0000)
struct OFWeaponActor_GetWeaponUI final
{
public:
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFWeaponActor_GetWeaponUI) == 0x000008, "Wrong alignment on OFWeaponActor_GetWeaponUI");
static_assert(sizeof(OFWeaponActor_GetWeaponUI) == 0x000028, "Wrong size on OFWeaponActor_GetWeaponUI");
static_assert(offsetof(OFWeaponActor_GetWeaponUI, ReturnValue) == 0x000000, "Member 'OFWeaponActor_GetWeaponUI::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFWeaponActor.IsUnholstered
// 0x0001 (0x0001 - 0x0000)
struct OFWeaponActor_IsUnholstered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFWeaponActor_IsUnholstered) == 0x000001, "Wrong alignment on OFWeaponActor_IsUnholstered");
static_assert(sizeof(OFWeaponActor_IsUnholstered) == 0x000001, "Wrong size on OFWeaponActor_IsUnholstered");
static_assert(offsetof(OFWeaponActor_IsUnholstered, ReturnValue) == 0x000000, "Member 'OFWeaponActor_IsUnholstered::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.HitscanWeaponActor.AmmoChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct HitscanWeaponActor_AmmoChanged__DelegateSignature final
{
public:
	int32                                         CurrentAmmo_0;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAmmo_0;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitscanWeaponActor_AmmoChanged__DelegateSignature) == 0x000004, "Wrong alignment on HitscanWeaponActor_AmmoChanged__DelegateSignature");
static_assert(sizeof(HitscanWeaponActor_AmmoChanged__DelegateSignature) == 0x000008, "Wrong size on HitscanWeaponActor_AmmoChanged__DelegateSignature");
static_assert(offsetof(HitscanWeaponActor_AmmoChanged__DelegateSignature, CurrentAmmo_0) == 0x000000, "Member 'HitscanWeaponActor_AmmoChanged__DelegateSignature::CurrentAmmo_0' has a wrong offset!");
static_assert(offsetof(HitscanWeaponActor_AmmoChanged__DelegateSignature, MaxAmmo_0) == 0x000004, "Member 'HitscanWeaponActor_AmmoChanged__DelegateSignature::MaxAmmo_0' has a wrong offset!");

// Function ObsidianFox.HitscanWeaponActor.CanUseAimAssist
// 0x0001 (0x0001 - 0x0000)
struct HitscanWeaponActor_CanUseAimAssist final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitscanWeaponActor_CanUseAimAssist) == 0x000001, "Wrong alignment on HitscanWeaponActor_CanUseAimAssist");
static_assert(sizeof(HitscanWeaponActor_CanUseAimAssist) == 0x000001, "Wrong size on HitscanWeaponActor_CanUseAimAssist");
static_assert(offsetof(HitscanWeaponActor_CanUseAimAssist, ReturnValue) == 0x000000, "Member 'HitscanWeaponActor_CanUseAimAssist::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.HitscanWeaponActor.OnFireFailed__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct HitscanWeaponActor_OnFireFailed__DelegateSignature final
{
public:
	class AActor*                                 ImmuneActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitscanWeaponActor_OnFireFailed__DelegateSignature) == 0x000008, "Wrong alignment on HitscanWeaponActor_OnFireFailed__DelegateSignature");
static_assert(sizeof(HitscanWeaponActor_OnFireFailed__DelegateSignature) == 0x000008, "Wrong size on HitscanWeaponActor_OnFireFailed__DelegateSignature");
static_assert(offsetof(HitscanWeaponActor_OnFireFailed__DelegateSignature, ImmuneActor) == 0x000000, "Member 'HitscanWeaponActor_OnFireFailed__DelegateSignature::ImmuneActor' has a wrong offset!");

// DelegateFunction ObsidianFox.HitscanWeaponActor.OnWeaponHit__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct HitscanWeaponActor_OnWeaponHit__DelegateSignature final
{
public:
	struct FGameplayEventData                     EventPayload;                                      // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitscanWeaponActor_OnWeaponHit__DelegateSignature) == 0x000008, "Wrong alignment on HitscanWeaponActor_OnWeaponHit__DelegateSignature");
static_assert(sizeof(HitscanWeaponActor_OnWeaponHit__DelegateSignature) == 0x0000B0, "Wrong size on HitscanWeaponActor_OnWeaponHit__DelegateSignature");
static_assert(offsetof(HitscanWeaponActor_OnWeaponHit__DelegateSignature, EventPayload) == 0x000000, "Member 'HitscanWeaponActor_OnWeaponHit__DelegateSignature::EventPayload' has a wrong offset!");

// Function ObsidianFox.HitscanWeaponActor.SetCurrentAmmo
// 0x0004 (0x0004 - 0x0000)
struct HitscanWeaponActor_SetCurrentAmmo final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitscanWeaponActor_SetCurrentAmmo) == 0x000004, "Wrong alignment on HitscanWeaponActor_SetCurrentAmmo");
static_assert(sizeof(HitscanWeaponActor_SetCurrentAmmo) == 0x000004, "Wrong size on HitscanWeaponActor_SetCurrentAmmo");
static_assert(offsetof(HitscanWeaponActor_SetCurrentAmmo, Value) == 0x000000, "Member 'HitscanWeaponActor_SetCurrentAmmo::Value' has a wrong offset!");

// Function ObsidianFox.HitscanWeaponActor.SetMaxAmmo
// 0x0004 (0x0004 - 0x0000)
struct HitscanWeaponActor_SetMaxAmmo final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitscanWeaponActor_SetMaxAmmo) == 0x000004, "Wrong alignment on HitscanWeaponActor_SetMaxAmmo");
static_assert(sizeof(HitscanWeaponActor_SetMaxAmmo) == 0x000004, "Wrong size on HitscanWeaponActor_SetMaxAmmo");
static_assert(offsetof(HitscanWeaponActor_SetMaxAmmo, Value) == 0x000000, "Member 'HitscanWeaponActor_SetMaxAmmo::Value' has a wrong offset!");

// Function ObsidianFox.HitscanWeaponActor.SetUseAimAssist
// 0x0001 (0x0001 - 0x0000)
struct HitscanWeaponActor_SetUseAimAssist final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitscanWeaponActor_SetUseAimAssist) == 0x000001, "Wrong alignment on HitscanWeaponActor_SetUseAimAssist");
static_assert(sizeof(HitscanWeaponActor_SetUseAimAssist) == 0x000001, "Wrong size on HitscanWeaponActor_SetUseAimAssist");
static_assert(offsetof(HitscanWeaponActor_SetUseAimAssist, bValue) == 0x000000, "Member 'HitscanWeaponActor_SetUseAimAssist::bValue' has a wrong offset!");

// Function ObsidianFox.HitscanWeaponActor.AnyAmmoLeft
// 0x0001 (0x0001 - 0x0000)
struct HitscanWeaponActor_AnyAmmoLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitscanWeaponActor_AnyAmmoLeft) == 0x000001, "Wrong alignment on HitscanWeaponActor_AnyAmmoLeft");
static_assert(sizeof(HitscanWeaponActor_AnyAmmoLeft) == 0x000001, "Wrong size on HitscanWeaponActor_AnyAmmoLeft");
static_assert(offsetof(HitscanWeaponActor_AnyAmmoLeft, ReturnValue) == 0x000000, "Member 'HitscanWeaponActor_AnyAmmoLeft::ReturnValue' has a wrong offset!");

// Function ObsidianFox.HitscanWeaponActor.CanReload
// 0x0001 (0x0001 - 0x0000)
struct HitscanWeaponActor_CanReload final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitscanWeaponActor_CanReload) == 0x000001, "Wrong alignment on HitscanWeaponActor_CanReload");
static_assert(sizeof(HitscanWeaponActor_CanReload) == 0x000001, "Wrong size on HitscanWeaponActor_CanReload");
static_assert(offsetof(HitscanWeaponActor_CanReload, ReturnValue) == 0x000000, "Member 'HitscanWeaponActor_CanReload::ReturnValue' has a wrong offset!");

// Function ObsidianFox.HitscanWeaponActor.GetAimTriggerEffect
// 0x0008 (0x0008 - 0x0000)
struct HitscanWeaponActor_GetAimTriggerEffect final
{
public:
	class UControllerTriggerEffectData*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitscanWeaponActor_GetAimTriggerEffect) == 0x000008, "Wrong alignment on HitscanWeaponActor_GetAimTriggerEffect");
static_assert(sizeof(HitscanWeaponActor_GetAimTriggerEffect) == 0x000008, "Wrong size on HitscanWeaponActor_GetAimTriggerEffect");
static_assert(offsetof(HitscanWeaponActor_GetAimTriggerEffect, ReturnValue) == 0x000000, "Member 'HitscanWeaponActor_GetAimTriggerEffect::ReturnValue' has a wrong offset!");

// Function ObsidianFox.HitscanWeaponActor.GetCurrentAmmo
// 0x0004 (0x0004 - 0x0000)
struct HitscanWeaponActor_GetCurrentAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitscanWeaponActor_GetCurrentAmmo) == 0x000004, "Wrong alignment on HitscanWeaponActor_GetCurrentAmmo");
static_assert(sizeof(HitscanWeaponActor_GetCurrentAmmo) == 0x000004, "Wrong size on HitscanWeaponActor_GetCurrentAmmo");
static_assert(offsetof(HitscanWeaponActor_GetCurrentAmmo, ReturnValue) == 0x000000, "Member 'HitscanWeaponActor_GetCurrentAmmo::ReturnValue' has a wrong offset!");

// Function ObsidianFox.HitscanWeaponActor.GetMaxAmmo
// 0x0004 (0x0004 - 0x0000)
struct HitscanWeaponActor_GetMaxAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitscanWeaponActor_GetMaxAmmo) == 0x000004, "Wrong alignment on HitscanWeaponActor_GetMaxAmmo");
static_assert(sizeof(HitscanWeaponActor_GetMaxAmmo) == 0x000004, "Wrong size on HitscanWeaponActor_GetMaxAmmo");
static_assert(offsetof(HitscanWeaponActor_GetMaxAmmo, ReturnValue) == 0x000000, "Member 'HitscanWeaponActor_GetMaxAmmo::ReturnValue' has a wrong offset!");

// Function ObsidianFox.HitscanWeaponActor.GetShootTriggerEffect
// 0x0008 (0x0008 - 0x0000)
struct HitscanWeaponActor_GetShootTriggerEffect final
{
public:
	class UControllerTriggerEffectData*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitscanWeaponActor_GetShootTriggerEffect) == 0x000008, "Wrong alignment on HitscanWeaponActor_GetShootTriggerEffect");
static_assert(sizeof(HitscanWeaponActor_GetShootTriggerEffect) == 0x000008, "Wrong size on HitscanWeaponActor_GetShootTriggerEffect");
static_assert(offsetof(HitscanWeaponActor_GetShootTriggerEffect, ReturnValue) == 0x000000, "Member 'HitscanWeaponActor_GetShootTriggerEffect::ReturnValue' has a wrong offset!");

// Function ObsidianFox.HitscanWeaponActor.GetTraceEnd
// 0x000C (0x000C - 0x0000)
struct HitscanWeaponActor_GetTraceEnd final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitscanWeaponActor_GetTraceEnd) == 0x000004, "Wrong alignment on HitscanWeaponActor_GetTraceEnd");
static_assert(sizeof(HitscanWeaponActor_GetTraceEnd) == 0x00000C, "Wrong size on HitscanWeaponActor_GetTraceEnd");
static_assert(offsetof(HitscanWeaponActor_GetTraceEnd, ReturnValue) == 0x000000, "Member 'HitscanWeaponActor_GetTraceEnd::ReturnValue' has a wrong offset!");

// Function ObsidianFox.HitscanWeaponActor.GetTraceStart
// 0x000C (0x000C - 0x0000)
struct HitscanWeaponActor_GetTraceStart final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitscanWeaponActor_GetTraceStart) == 0x000004, "Wrong alignment on HitscanWeaponActor_GetTraceStart");
static_assert(sizeof(HitscanWeaponActor_GetTraceStart) == 0x00000C, "Wrong size on HitscanWeaponActor_GetTraceStart");
static_assert(offsetof(HitscanWeaponActor_GetTraceStart, ReturnValue) == 0x000000, "Member 'HitscanWeaponActor_GetTraceStart::ReturnValue' has a wrong offset!");

// Function ObsidianFox.HitscanWeaponActor.IsFullyLoaded
// 0x0001 (0x0001 - 0x0000)
struct HitscanWeaponActor_IsFullyLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitscanWeaponActor_IsFullyLoaded) == 0x000001, "Wrong alignment on HitscanWeaponActor_IsFullyLoaded");
static_assert(sizeof(HitscanWeaponActor_IsFullyLoaded) == 0x000001, "Wrong size on HitscanWeaponActor_IsFullyLoaded");
static_assert(offsetof(HitscanWeaponActor_IsFullyLoaded, ReturnValue) == 0x000000, "Member 'HitscanWeaponActor_IsFullyLoaded::ReturnValue' has a wrong offset!");

// Function ObsidianFox.HitscanWeaponActor.TraceForTarget
// 0x0018 (0x0018 - 0x0000)
struct HitscanWeaponActor_TraceForTarget final
{
public:
	TArray<struct FHitResult>                     OutHit;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HitscanWeaponActor_TraceForTarget) == 0x000008, "Wrong alignment on HitscanWeaponActor_TraceForTarget");
static_assert(sizeof(HitscanWeaponActor_TraceForTarget) == 0x000018, "Wrong size on HitscanWeaponActor_TraceForTarget");
static_assert(offsetof(HitscanWeaponActor_TraceForTarget, OutHit) == 0x000000, "Member 'HitscanWeaponActor_TraceForTarget::OutHit' has a wrong offset!");
static_assert(offsetof(HitscanWeaponActor_TraceForTarget, ReturnValue) == 0x000010, "Member 'HitscanWeaponActor_TraceForTarget::ReturnValue' has a wrong offset!");

// Function ObsidianFox.HitMeshDecal.SetDecalMaterial
// 0x0008 (0x0008 - 0x0000)
struct HitMeshDecal_SetDecalMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitMeshDecal_SetDecalMaterial) == 0x000008, "Wrong alignment on HitMeshDecal_SetDecalMaterial");
static_assert(sizeof(HitMeshDecal_SetDecalMaterial) == 0x000008, "Wrong size on HitMeshDecal_SetDecalMaterial");
static_assert(offsetof(HitMeshDecal_SetDecalMaterial, Material) == 0x000000, "Member 'HitMeshDecal_SetDecalMaterial::Material' has a wrong offset!");

// Function ObsidianFox.NestActor.PickNewNestLocation
// 0x0008 (0x0008 - 0x0000)
struct NestActor_PickNewNestLocation final
{
public:
	class ANestLocationActor*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NestActor_PickNewNestLocation) == 0x000008, "Wrong alignment on NestActor_PickNewNestLocation");
static_assert(sizeof(NestActor_PickNewNestLocation) == 0x000008, "Wrong size on NestActor_PickNewNestLocation");
static_assert(offsetof(NestActor_PickNewNestLocation, ReturnValue) == 0x000000, "Member 'NestActor_PickNewNestLocation::ReturnValue' has a wrong offset!");

// Function ObsidianFox.NestActor.GetCurrentNestLocation
// 0x0008 (0x0008 - 0x0000)
struct NestActor_GetCurrentNestLocation final
{
public:
	class ANestLocationActor*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NestActor_GetCurrentNestLocation) == 0x000008, "Wrong alignment on NestActor_GetCurrentNestLocation");
static_assert(sizeof(NestActor_GetCurrentNestLocation) == 0x000008, "Wrong size on NestActor_GetCurrentNestLocation");
static_assert(offsetof(NestActor_GetCurrentNestLocation, ReturnValue) == 0x000000, "Member 'NestActor_GetCurrentNestLocation::ReturnValue' has a wrong offset!");

// Function ObsidianFox.FlowNode_EventDoor.OnDoorClosedEventHandler
// 0x0008 (0x0008 - 0x0000)
struct FlowNode_EventDoor_OnDoorClosedEventHandler final
{
public:
	class UFlowDoorComponent*                     FlowDoorComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlowNode_EventDoor_OnDoorClosedEventHandler) == 0x000008, "Wrong alignment on FlowNode_EventDoor_OnDoorClosedEventHandler");
static_assert(sizeof(FlowNode_EventDoor_OnDoorClosedEventHandler) == 0x000008, "Wrong size on FlowNode_EventDoor_OnDoorClosedEventHandler");
static_assert(offsetof(FlowNode_EventDoor_OnDoorClosedEventHandler, FlowDoorComponent) == 0x000000, "Member 'FlowNode_EventDoor_OnDoorClosedEventHandler::FlowDoorComponent' has a wrong offset!");

// Function ObsidianFox.FlowNode_EventDoor.OnDoorClosingEventHandler
// 0x0008 (0x0008 - 0x0000)
struct FlowNode_EventDoor_OnDoorClosingEventHandler final
{
public:
	class UFlowDoorComponent*                     FlowDoorComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlowNode_EventDoor_OnDoorClosingEventHandler) == 0x000008, "Wrong alignment on FlowNode_EventDoor_OnDoorClosingEventHandler");
static_assert(sizeof(FlowNode_EventDoor_OnDoorClosingEventHandler) == 0x000008, "Wrong size on FlowNode_EventDoor_OnDoorClosingEventHandler");
static_assert(offsetof(FlowNode_EventDoor_OnDoorClosingEventHandler, FlowDoorComponent) == 0x000000, "Member 'FlowNode_EventDoor_OnDoorClosingEventHandler::FlowDoorComponent' has a wrong offset!");

// Function ObsidianFox.FlowNode_EventDoor.OnDoorOpenedEventHandler
// 0x0008 (0x0008 - 0x0000)
struct FlowNode_EventDoor_OnDoorOpenedEventHandler final
{
public:
	class UFlowDoorComponent*                     FlowDoorComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlowNode_EventDoor_OnDoorOpenedEventHandler) == 0x000008, "Wrong alignment on FlowNode_EventDoor_OnDoorOpenedEventHandler");
static_assert(sizeof(FlowNode_EventDoor_OnDoorOpenedEventHandler) == 0x000008, "Wrong size on FlowNode_EventDoor_OnDoorOpenedEventHandler");
static_assert(offsetof(FlowNode_EventDoor_OnDoorOpenedEventHandler, FlowDoorComponent) == 0x000000, "Member 'FlowNode_EventDoor_OnDoorOpenedEventHandler::FlowDoorComponent' has a wrong offset!");

// Function ObsidianFox.FlowNode_EventDoor.OnDoorUnlockedEventHandler
// 0x0008 (0x0008 - 0x0000)
struct FlowNode_EventDoor_OnDoorUnlockedEventHandler final
{
public:
	class UFlowDoorComponent*                     FlowDoorComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlowNode_EventDoor_OnDoorUnlockedEventHandler) == 0x000008, "Wrong alignment on FlowNode_EventDoor_OnDoorUnlockedEventHandler");
static_assert(sizeof(FlowNode_EventDoor_OnDoorUnlockedEventHandler) == 0x000008, "Wrong size on FlowNode_EventDoor_OnDoorUnlockedEventHandler");
static_assert(offsetof(FlowNode_EventDoor_OnDoorUnlockedEventHandler, FlowDoorComponent) == 0x000000, "Member 'FlowNode_EventDoor_OnDoorUnlockedEventHandler::FlowDoorComponent' has a wrong offset!");

// Function ObsidianFox.FlowNode_EventDoor.OnInteractingCharacterReachDoorHandleHandler
// 0x0008 (0x0008 - 0x0000)
struct FlowNode_EventDoor_OnInteractingCharacterReachDoorHandleHandler final
{
public:
	class UFlowDoorComponent*                     FlowDoorComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlowNode_EventDoor_OnInteractingCharacterReachDoorHandleHandler) == 0x000008, "Wrong alignment on FlowNode_EventDoor_OnInteractingCharacterReachDoorHandleHandler");
static_assert(sizeof(FlowNode_EventDoor_OnInteractingCharacterReachDoorHandleHandler) == 0x000008, "Wrong size on FlowNode_EventDoor_OnInteractingCharacterReachDoorHandleHandler");
static_assert(offsetof(FlowNode_EventDoor_OnInteractingCharacterReachDoorHandleHandler, FlowDoorComponent) == 0x000000, "Member 'FlowNode_EventDoor_OnInteractingCharacterReachDoorHandleHandler::FlowDoorComponent' has a wrong offset!");

// Function ObsidianFox.FlowNode_EventDoor.OnStartDoorOpeningEventHandler
// 0x0008 (0x0008 - 0x0000)
struct FlowNode_EventDoor_OnStartDoorOpeningEventHandler final
{
public:
	class UFlowDoorComponent*                     FlowDoorComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlowNode_EventDoor_OnStartDoorOpeningEventHandler) == 0x000008, "Wrong alignment on FlowNode_EventDoor_OnStartDoorOpeningEventHandler");
static_assert(sizeof(FlowNode_EventDoor_OnStartDoorOpeningEventHandler) == 0x000008, "Wrong size on FlowNode_EventDoor_OnStartDoorOpeningEventHandler");
static_assert(offsetof(FlowNode_EventDoor_OnStartDoorOpeningEventHandler, FlowDoorComponent) == 0x000000, "Member 'FlowNode_EventDoor_OnStartDoorOpeningEventHandler::FlowDoorComponent' has a wrong offset!");

// Function ObsidianFox.OFAbilitySystemBlueprintLibrary.AddTargetDataToEffectContextHandle
// 0x0040 (0x0040 - 0x0000)
struct OFAbilitySystemBlueprintLibrary_AddTargetDataToEffectContextHandle final
{
public:
	struct FGameplayEffectContextHandle           EffectContextHandle;                               // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0018(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAbilitySystemBlueprintLibrary_AddTargetDataToEffectContextHandle) == 0x000008, "Wrong alignment on OFAbilitySystemBlueprintLibrary_AddTargetDataToEffectContextHandle");
static_assert(sizeof(OFAbilitySystemBlueprintLibrary_AddTargetDataToEffectContextHandle) == 0x000040, "Wrong size on OFAbilitySystemBlueprintLibrary_AddTargetDataToEffectContextHandle");
static_assert(offsetof(OFAbilitySystemBlueprintLibrary_AddTargetDataToEffectContextHandle, EffectContextHandle) == 0x000000, "Member 'OFAbilitySystemBlueprintLibrary_AddTargetDataToEffectContextHandle::EffectContextHandle' has a wrong offset!");
static_assert(offsetof(OFAbilitySystemBlueprintLibrary_AddTargetDataToEffectContextHandle, TargetData) == 0x000018, "Member 'OFAbilitySystemBlueprintLibrary_AddTargetDataToEffectContextHandle::TargetData' has a wrong offset!");

// Function ObsidianFox.OFAbilitySystemBlueprintLibrary.CanActivateAbilityByTag
// 0x0030 (0x0030 - 0x0000)
struct OFAbilitySystemBlueprintLibrary_CanActivateAbilityByTag final
{
public:
	class APawn*                                  Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTagContainer;                              // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAllowRemoteActivation;                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFAbilitySystemBlueprintLibrary_CanActivateAbilityByTag) == 0x000008, "Wrong alignment on OFAbilitySystemBlueprintLibrary_CanActivateAbilityByTag");
static_assert(sizeof(OFAbilitySystemBlueprintLibrary_CanActivateAbilityByTag) == 0x000030, "Wrong size on OFAbilitySystemBlueprintLibrary_CanActivateAbilityByTag");
static_assert(offsetof(OFAbilitySystemBlueprintLibrary_CanActivateAbilityByTag, Target) == 0x000000, "Member 'OFAbilitySystemBlueprintLibrary_CanActivateAbilityByTag::Target' has a wrong offset!");
static_assert(offsetof(OFAbilitySystemBlueprintLibrary_CanActivateAbilityByTag, GameplayTagContainer) == 0x000008, "Member 'OFAbilitySystemBlueprintLibrary_CanActivateAbilityByTag::GameplayTagContainer' has a wrong offset!");
static_assert(offsetof(OFAbilitySystemBlueprintLibrary_CanActivateAbilityByTag, bAllowRemoteActivation) == 0x000028, "Member 'OFAbilitySystemBlueprintLibrary_CanActivateAbilityByTag::bAllowRemoteActivation' has a wrong offset!");
static_assert(offsetof(OFAbilitySystemBlueprintLibrary_CanActivateAbilityByTag, ReturnValue) == 0x000029, "Member 'OFAbilitySystemBlueprintLibrary_CanActivateAbilityByTag::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAbilitySystemBlueprintLibrary.EffectContextHandleAddWeakPoint
// 0x0020 (0x0020 - 0x0000)
struct OFAbilitySystemBlueprintLibrary_EffectContextHandleAddWeakPoint final
{
public:
	struct FGameplayEffectContextHandle           EffectContextHandle;                               // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UDamagePoint*                           WeakPoint;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAbilitySystemBlueprintLibrary_EffectContextHandleAddWeakPoint) == 0x000008, "Wrong alignment on OFAbilitySystemBlueprintLibrary_EffectContextHandleAddWeakPoint");
static_assert(sizeof(OFAbilitySystemBlueprintLibrary_EffectContextHandleAddWeakPoint) == 0x000020, "Wrong size on OFAbilitySystemBlueprintLibrary_EffectContextHandleAddWeakPoint");
static_assert(offsetof(OFAbilitySystemBlueprintLibrary_EffectContextHandleAddWeakPoint, EffectContextHandle) == 0x000000, "Member 'OFAbilitySystemBlueprintLibrary_EffectContextHandleAddWeakPoint::EffectContextHandle' has a wrong offset!");
static_assert(offsetof(OFAbilitySystemBlueprintLibrary_EffectContextHandleAddWeakPoint, WeakPoint) == 0x000018, "Member 'OFAbilitySystemBlueprintLibrary_EffectContextHandleAddWeakPoint::WeakPoint' has a wrong offset!");

// Function ObsidianFox.OFAbilitySystemBlueprintLibrary.GetAllHitResultsFromTargetData
// 0x0038 (0x0038 - 0x0000)
struct OFAbilitySystemBlueprintLibrary_GetAllHitResultsFromTargetData final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAbilitySystemBlueprintLibrary_GetAllHitResultsFromTargetData) == 0x000008, "Wrong alignment on OFAbilitySystemBlueprintLibrary_GetAllHitResultsFromTargetData");
static_assert(sizeof(OFAbilitySystemBlueprintLibrary_GetAllHitResultsFromTargetData) == 0x000038, "Wrong size on OFAbilitySystemBlueprintLibrary_GetAllHitResultsFromTargetData");
static_assert(offsetof(OFAbilitySystemBlueprintLibrary_GetAllHitResultsFromTargetData, TargetData) == 0x000000, "Member 'OFAbilitySystemBlueprintLibrary_GetAllHitResultsFromTargetData::TargetData' has a wrong offset!");
static_assert(offsetof(OFAbilitySystemBlueprintLibrary_GetAllHitResultsFromTargetData, ReturnValue) == 0x000028, "Member 'OFAbilitySystemBlueprintLibrary_GetAllHitResultsFromTargetData::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAbilitySystemBlueprintLibrary.GetEnemyDeathReactionTag
// 0x0008 (0x0008 - 0x0000)
struct OFAbilitySystemBlueprintLibrary_GetEnemyDeathReactionTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAbilitySystemBlueprintLibrary_GetEnemyDeathReactionTag) == 0x000004, "Wrong alignment on OFAbilitySystemBlueprintLibrary_GetEnemyDeathReactionTag");
static_assert(sizeof(OFAbilitySystemBlueprintLibrary_GetEnemyDeathReactionTag) == 0x000008, "Wrong size on OFAbilitySystemBlueprintLibrary_GetEnemyDeathReactionTag");
static_assert(offsetof(OFAbilitySystemBlueprintLibrary_GetEnemyDeathReactionTag, ReturnValue) == 0x000000, "Member 'OFAbilitySystemBlueprintLibrary_GetEnemyDeathReactionTag::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAbilitySystemBlueprintLibrary.GetPlayerDeathReactionTag
// 0x0008 (0x0008 - 0x0000)
struct OFAbilitySystemBlueprintLibrary_GetPlayerDeathReactionTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAbilitySystemBlueprintLibrary_GetPlayerDeathReactionTag) == 0x000004, "Wrong alignment on OFAbilitySystemBlueprintLibrary_GetPlayerDeathReactionTag");
static_assert(sizeof(OFAbilitySystemBlueprintLibrary_GetPlayerDeathReactionTag) == 0x000008, "Wrong size on OFAbilitySystemBlueprintLibrary_GetPlayerDeathReactionTag");
static_assert(offsetof(OFAbilitySystemBlueprintLibrary_GetPlayerDeathReactionTag, ReturnValue) == 0x000000, "Member 'OFAbilitySystemBlueprintLibrary_GetPlayerDeathReactionTag::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAbilitySystemBlueprintLibrary.GetTagMatchingDeathReactionTag
// 0x0030 (0x0030 - 0x0000)
struct OFAbilitySystemBlueprintLibrary_GetTagMatchingDeathReactionTag final
{
public:
	struct FGameplayTagContainer                  TargetTags;                                        // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          bGetPlayerTags;                                    // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ReturnValue;                                       // 0x0024(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFAbilitySystemBlueprintLibrary_GetTagMatchingDeathReactionTag) == 0x000008, "Wrong alignment on OFAbilitySystemBlueprintLibrary_GetTagMatchingDeathReactionTag");
static_assert(sizeof(OFAbilitySystemBlueprintLibrary_GetTagMatchingDeathReactionTag) == 0x000030, "Wrong size on OFAbilitySystemBlueprintLibrary_GetTagMatchingDeathReactionTag");
static_assert(offsetof(OFAbilitySystemBlueprintLibrary_GetTagMatchingDeathReactionTag, TargetTags) == 0x000000, "Member 'OFAbilitySystemBlueprintLibrary_GetTagMatchingDeathReactionTag::TargetTags' has a wrong offset!");
static_assert(offsetof(OFAbilitySystemBlueprintLibrary_GetTagMatchingDeathReactionTag, bGetPlayerTags) == 0x000020, "Member 'OFAbilitySystemBlueprintLibrary_GetTagMatchingDeathReactionTag::bGetPlayerTags' has a wrong offset!");
static_assert(offsetof(OFAbilitySystemBlueprintLibrary_GetTagMatchingDeathReactionTag, ReturnValue) == 0x000024, "Member 'OFAbilitySystemBlueprintLibrary_GetTagMatchingDeathReactionTag::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAbilitySystemBlueprintLibrary.GetTargetDataFromEffectContextHandle
// 0x0040 (0x0040 - 0x0000)
struct OFAbilitySystemBlueprintLibrary_GetTargetDataFromEffectContextHandle final
{
public:
	struct FGameplayEffectContextHandle           EffectContextHandle;                               // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayAbilityTargetDataHandle       ReturnValue;                                       // 0x0018(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAbilitySystemBlueprintLibrary_GetTargetDataFromEffectContextHandle) == 0x000008, "Wrong alignment on OFAbilitySystemBlueprintLibrary_GetTargetDataFromEffectContextHandle");
static_assert(sizeof(OFAbilitySystemBlueprintLibrary_GetTargetDataFromEffectContextHandle) == 0x000040, "Wrong size on OFAbilitySystemBlueprintLibrary_GetTargetDataFromEffectContextHandle");
static_assert(offsetof(OFAbilitySystemBlueprintLibrary_GetTargetDataFromEffectContextHandle, EffectContextHandle) == 0x000000, "Member 'OFAbilitySystemBlueprintLibrary_GetTargetDataFromEffectContextHandle::EffectContextHandle' has a wrong offset!");
static_assert(offsetof(OFAbilitySystemBlueprintLibrary_GetTargetDataFromEffectContextHandle, ReturnValue) == 0x000018, "Member 'OFAbilitySystemBlueprintLibrary_GetTargetDataFromEffectContextHandle::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAbilitySystemBlueprintLibrary.GetWeakPointsFromEffectContextHandle
// 0x0028 (0x0028 - 0x0000)
struct OFAbilitySystemBlueprintLibrary_GetWeakPointsFromEffectContextHandle final
{
public:
	struct FGameplayEffectContextHandle           EffectContextHandle;                               // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	TArray<class UDamagePoint*>                   ReturnValue;                                       // 0x0018(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAbilitySystemBlueprintLibrary_GetWeakPointsFromEffectContextHandle) == 0x000008, "Wrong alignment on OFAbilitySystemBlueprintLibrary_GetWeakPointsFromEffectContextHandle");
static_assert(sizeof(OFAbilitySystemBlueprintLibrary_GetWeakPointsFromEffectContextHandle) == 0x000028, "Wrong size on OFAbilitySystemBlueprintLibrary_GetWeakPointsFromEffectContextHandle");
static_assert(offsetof(OFAbilitySystemBlueprintLibrary_GetWeakPointsFromEffectContextHandle, EffectContextHandle) == 0x000000, "Member 'OFAbilitySystemBlueprintLibrary_GetWeakPointsFromEffectContextHandle::EffectContextHandle' has a wrong offset!");
static_assert(offsetof(OFAbilitySystemBlueprintLibrary_GetWeakPointsFromEffectContextHandle, ReturnValue) == 0x000018, "Member 'OFAbilitySystemBlueprintLibrary_GetWeakPointsFromEffectContextHandle::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAbilitySystemBlueprintLibrary.IsGamepadLastInputTypeUsed
// 0x0050 (0x0050 - 0x0000)
struct OFAbilitySystemBlueprintLibrary_IsGamepadLastInputTypeUsed final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0048)(ConstParm, Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFAbilitySystemBlueprintLibrary_IsGamepadLastInputTypeUsed) == 0x000008, "Wrong alignment on OFAbilitySystemBlueprintLibrary_IsGamepadLastInputTypeUsed");
static_assert(sizeof(OFAbilitySystemBlueprintLibrary_IsGamepadLastInputTypeUsed) == 0x000050, "Wrong size on OFAbilitySystemBlueprintLibrary_IsGamepadLastInputTypeUsed");
static_assert(offsetof(OFAbilitySystemBlueprintLibrary_IsGamepadLastInputTypeUsed, ActorInfo) == 0x000000, "Member 'OFAbilitySystemBlueprintLibrary_IsGamepadLastInputTypeUsed::ActorInfo' has a wrong offset!");
static_assert(offsetof(OFAbilitySystemBlueprintLibrary_IsGamepadLastInputTypeUsed, ReturnValue) == 0x000048, "Member 'OFAbilitySystemBlueprintLibrary_IsGamepadLastInputTypeUsed::ReturnValue' has a wrong offset!");

// Function ObsidianFox.FlowNode_ItemExamined.OnItemLookedExaminedHandler
// 0x0028 (0x0028 - 0x0000)
struct FlowNode_ItemExamined_OnItemLookedExaminedHandler final
{
public:
	TSoftObjectPtr<class UItemData>               InItemData;                                        // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlowNode_ItemExamined_OnItemLookedExaminedHandler) == 0x000008, "Wrong alignment on FlowNode_ItemExamined_OnItemLookedExaminedHandler");
static_assert(sizeof(FlowNode_ItemExamined_OnItemLookedExaminedHandler) == 0x000028, "Wrong size on FlowNode_ItemExamined_OnItemLookedExaminedHandler");
static_assert(offsetof(FlowNode_ItemExamined_OnItemLookedExaminedHandler, InItemData) == 0x000000, "Member 'FlowNode_ItemExamined_OnItemLookedExaminedHandler::InItemData' has a wrong offset!");

// Function ObsidianFox.ObjectiveListWidget.UpdateObjectiveWidget
// 0x0050 (0x0050 - 0x0000)
struct ObjectiveListWidget_UpdateObjectiveWidget final
{
public:
	struct FObjectiveChapter                      ObjectiveChapterInfo;                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveListWidget_UpdateObjectiveWidget) == 0x000008, "Wrong alignment on ObjectiveListWidget_UpdateObjectiveWidget");
static_assert(sizeof(ObjectiveListWidget_UpdateObjectiveWidget) == 0x000050, "Wrong size on ObjectiveListWidget_UpdateObjectiveWidget");
static_assert(offsetof(ObjectiveListWidget_UpdateObjectiveWidget, ObjectiveChapterInfo) == 0x000000, "Member 'ObjectiveListWidget_UpdateObjectiveWidget::ObjectiveChapterInfo' has a wrong offset!");

// Function ObsidianFox.ObjectiveListWidget.GetObjectiveInfo
// 0x0018 (0x0018 - 0x0000)
struct ObjectiveListWidget_GetObjectiveInfo final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveListWidget_GetObjectiveInfo) == 0x000008, "Wrong alignment on ObjectiveListWidget_GetObjectiveInfo");
static_assert(sizeof(ObjectiveListWidget_GetObjectiveInfo) == 0x000018, "Wrong size on ObjectiveListWidget_GetObjectiveInfo");
static_assert(offsetof(ObjectiveListWidget_GetObjectiveInfo, ReturnValue) == 0x000000, "Member 'ObjectiveListWidget_GetObjectiveInfo::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ObjectiveListWidget.IsUnSeen
// 0x0001 (0x0001 - 0x0000)
struct ObjectiveListWidget_IsUnSeen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveListWidget_IsUnSeen) == 0x000001, "Wrong alignment on ObjectiveListWidget_IsUnSeen");
static_assert(sizeof(ObjectiveListWidget_IsUnSeen) == 0x000001, "Wrong size on ObjectiveListWidget_IsUnSeen");
static_assert(offsetof(ObjectiveListWidget_IsUnSeen, ReturnValue) == 0x000000, "Member 'ObjectiveListWidget_IsUnSeen::ReturnValue' has a wrong offset!");

// Function ObsidianFox.MoodSystemBlueprintLibrary.TriggerMoodStateEventOnNearbyComponents
// 0x0068 (0x0068 - 0x0000)
struct MoodSystemBlueprintLibrary_TriggerMoodStateEventOnNearbyComponents final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EEmotion, float>                         AffectedEmotions;                                  // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoodSystemBlueprintLibrary_TriggerMoodStateEventOnNearbyComponents) == 0x000008, "Wrong alignment on MoodSystemBlueprintLibrary_TriggerMoodStateEventOnNearbyComponents");
static_assert(sizeof(MoodSystemBlueprintLibrary_TriggerMoodStateEventOnNearbyComponents) == 0x000068, "Wrong size on MoodSystemBlueprintLibrary_TriggerMoodStateEventOnNearbyComponents");
static_assert(offsetof(MoodSystemBlueprintLibrary_TriggerMoodStateEventOnNearbyComponents, Instigator) == 0x000000, "Member 'MoodSystemBlueprintLibrary_TriggerMoodStateEventOnNearbyComponents::Instigator' has a wrong offset!");
static_assert(offsetof(MoodSystemBlueprintLibrary_TriggerMoodStateEventOnNearbyComponents, Origin) == 0x000008, "Member 'MoodSystemBlueprintLibrary_TriggerMoodStateEventOnNearbyComponents::Origin' has a wrong offset!");
static_assert(offsetof(MoodSystemBlueprintLibrary_TriggerMoodStateEventOnNearbyComponents, Radius) == 0x000014, "Member 'MoodSystemBlueprintLibrary_TriggerMoodStateEventOnNearbyComponents::Radius' has a wrong offset!");
static_assert(offsetof(MoodSystemBlueprintLibrary_TriggerMoodStateEventOnNearbyComponents, AffectedEmotions) == 0x000018, "Member 'MoodSystemBlueprintLibrary_TriggerMoodStateEventOnNearbyComponents::AffectedEmotions' has a wrong offset!");

// Function ObsidianFox.FluidSource.GetFluid
// 0x000C (0x000C - 0x0000)
struct FluidSource_GetFluid final
{
public:
	struct FFluid                                 ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FluidSource_GetFluid) == 0x000004, "Wrong alignment on FluidSource_GetFluid");
static_assert(sizeof(FluidSource_GetFluid) == 0x00000C, "Wrong size on FluidSource_GetFluid");
static_assert(offsetof(FluidSource_GetFluid, ReturnValue) == 0x000000, "Member 'FluidSource_GetFluid::ReturnValue' has a wrong offset!");

// Function ObsidianFox.WorldSubsystem_RailingCompManager.GetNearestSplineData
// 0x0038 (0x0038 - 0x0000)
struct WorldSubsystem_RailingCompManager_GetNearestSplineData final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSearchDistance;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSplinePointResult                     ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldSubsystem_RailingCompManager_GetNearestSplineData) == 0x000008, "Wrong alignment on WorldSubsystem_RailingCompManager_GetNearestSplineData");
static_assert(sizeof(WorldSubsystem_RailingCompManager_GetNearestSplineData) == 0x000038, "Wrong size on WorldSubsystem_RailingCompManager_GetNearestSplineData");
static_assert(offsetof(WorldSubsystem_RailingCompManager_GetNearestSplineData, Origin) == 0x000000, "Member 'WorldSubsystem_RailingCompManager_GetNearestSplineData::Origin' has a wrong offset!");
static_assert(offsetof(WorldSubsystem_RailingCompManager_GetNearestSplineData, MaxSearchDistance) == 0x00000C, "Member 'WorldSubsystem_RailingCompManager_GetNearestSplineData::MaxSearchDistance' has a wrong offset!");
static_assert(offsetof(WorldSubsystem_RailingCompManager_GetNearestSplineData, ReturnValue) == 0x000010, "Member 'WorldSubsystem_RailingCompManager_GetNearestSplineData::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ObjectiveWidget.ChangeNoteHandler
// 0x0010 (0x0010 - 0x0000)
struct ObjectiveWidget_ChangeNoteHandler final
{
public:
	struct FInputActionValue                      InputActionValue;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveWidget_ChangeNoteHandler) == 0x000004, "Wrong alignment on ObjectiveWidget_ChangeNoteHandler");
static_assert(sizeof(ObjectiveWidget_ChangeNoteHandler) == 0x000010, "Wrong size on ObjectiveWidget_ChangeNoteHandler");
static_assert(offsetof(ObjectiveWidget_ChangeNoteHandler, InputActionValue) == 0x000000, "Member 'ObjectiveWidget_ChangeNoteHandler::InputActionValue' has a wrong offset!");

// Function ObsidianFox.ObjectiveWidget.MoveNoteScrollboxHandler
// 0x0010 (0x0010 - 0x0000)
struct ObjectiveWidget_MoveNoteScrollboxHandler final
{
public:
	struct FInputActionValue                      InputActionValue;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveWidget_MoveNoteScrollboxHandler) == 0x000004, "Wrong alignment on ObjectiveWidget_MoveNoteScrollboxHandler");
static_assert(sizeof(ObjectiveWidget_MoveNoteScrollboxHandler) == 0x000010, "Wrong size on ObjectiveWidget_MoveNoteScrollboxHandler");
static_assert(offsetof(ObjectiveWidget_MoveNoteScrollboxHandler, InputActionValue) == 0x000000, "Member 'ObjectiveWidget_MoveNoteScrollboxHandler::InputActionValue' has a wrong offset!");

// Function ObsidianFox.ObjectiveWidget.PlayVO
// 0x0010 (0x0010 - 0x0000)
struct ObjectiveWidget_PlayVO final
{
public:
	struct FInputActionValue                      InputActionValue;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveWidget_PlayVO) == 0x000004, "Wrong alignment on ObjectiveWidget_PlayVO");
static_assert(sizeof(ObjectiveWidget_PlayVO) == 0x000010, "Wrong size on ObjectiveWidget_PlayVO");
static_assert(offsetof(ObjectiveWidget_PlayVO, InputActionValue) == 0x000000, "Member 'ObjectiveWidget_PlayVO::InputActionValue' has a wrong offset!");

// Function ObsidianFox.FoliageInteractionComponent.GetActiveRange
// 0x0004 (0x0004 - 0x0000)
struct FoliageInteractionComponent_GetActiveRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FoliageInteractionComponent_GetActiveRange) == 0x000004, "Wrong alignment on FoliageInteractionComponent_GetActiveRange");
static_assert(sizeof(FoliageInteractionComponent_GetActiveRange) == 0x000004, "Wrong size on FoliageInteractionComponent_GetActiveRange");
static_assert(offsetof(FoliageInteractionComponent_GetActiveRange, ReturnValue) == 0x000000, "Member 'FoliageInteractionComponent_GetActiveRange::ReturnValue' has a wrong offset!");

// Function ObsidianFox.FoliageInteractionComponent.GetFoliageInteractionData
// 0x0018 (0x0018 - 0x0000)
struct FoliageInteractionComponent_GetFoliageInteractionData final
{
public:
	struct FFoliageInteraction                    ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FoliageInteractionComponent_GetFoliageInteractionData) == 0x000004, "Wrong alignment on FoliageInteractionComponent_GetFoliageInteractionData");
static_assert(sizeof(FoliageInteractionComponent_GetFoliageInteractionData) == 0x000018, "Wrong size on FoliageInteractionComponent_GetFoliageInteractionData");
static_assert(offsetof(FoliageInteractionComponent_GetFoliageInteractionData, ReturnValue) == 0x000000, "Member 'FoliageInteractionComponent_GetFoliageInteractionData::ReturnValue' has a wrong offset!");

// Function ObsidianFox.FoliageInteractionComponent.GetInteractionPriority
// 0x0004 (0x0004 - 0x0000)
struct FoliageInteractionComponent_GetInteractionPriority final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FoliageInteractionComponent_GetInteractionPriority) == 0x000004, "Wrong alignment on FoliageInteractionComponent_GetInteractionPriority");
static_assert(sizeof(FoliageInteractionComponent_GetInteractionPriority) == 0x000004, "Wrong size on FoliageInteractionComponent_GetInteractionPriority");
static_assert(offsetof(FoliageInteractionComponent_GetInteractionPriority, ReturnValue) == 0x000000, "Member 'FoliageInteractionComponent_GetInteractionPriority::ReturnValue' has a wrong offset!");

// Function ObsidianFox.FoliageInteractionManager.Interation
// 0x0008 (0x0008 - 0x0000)
struct FoliageInteractionManager_Interation final
{
public:
	const class UFoliageInteractionComponent*     Component;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FoliageInteractionManager_Interation) == 0x000008, "Wrong alignment on FoliageInteractionManager_Interation");
static_assert(sizeof(FoliageInteractionManager_Interation) == 0x000008, "Wrong size on FoliageInteractionManager_Interation");
static_assert(offsetof(FoliageInteractionManager_Interation, Component) == 0x000000, "Member 'FoliageInteractionManager_Interation::Component' has a wrong offset!");

// Function ObsidianFox.IKModifier.OnApply
// 0x0010 (0x0010 - 0x0000)
struct IKModifier_OnApply final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimInstance*                          AnimInstance;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IKModifier_OnApply) == 0x000008, "Wrong alignment on IKModifier_OnApply");
static_assert(sizeof(IKModifier_OnApply) == 0x000010, "Wrong size on IKModifier_OnApply");
static_assert(offsetof(IKModifier_OnApply, BoneName) == 0x000000, "Member 'IKModifier_OnApply::BoneName' has a wrong offset!");
static_assert(offsetof(IKModifier_OnApply, AnimInstance) == 0x000008, "Member 'IKModifier_OnApply::AnimInstance' has a wrong offset!");

// Function ObsidianFox.IKModifier.OnPaused
// 0x0010 (0x0010 - 0x0000)
struct IKModifier_OnPaused final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimInstance*                          AnimInstance;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IKModifier_OnPaused) == 0x000008, "Wrong alignment on IKModifier_OnPaused");
static_assert(sizeof(IKModifier_OnPaused) == 0x000010, "Wrong size on IKModifier_OnPaused");
static_assert(offsetof(IKModifier_OnPaused, BoneName) == 0x000000, "Member 'IKModifier_OnPaused::BoneName' has a wrong offset!");
static_assert(offsetof(IKModifier_OnPaused, AnimInstance) == 0x000008, "Member 'IKModifier_OnPaused::AnimInstance' has a wrong offset!");

// Function ObsidianFox.IKModifier.OnResumed
// 0x0010 (0x0010 - 0x0000)
struct IKModifier_OnResumed final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimInstance*                          AnimInstance;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IKModifier_OnResumed) == 0x000008, "Wrong alignment on IKModifier_OnResumed");
static_assert(sizeof(IKModifier_OnResumed) == 0x000010, "Wrong size on IKModifier_OnResumed");
static_assert(offsetof(IKModifier_OnResumed, BoneName) == 0x000000, "Member 'IKModifier_OnResumed::BoneName' has a wrong offset!");
static_assert(offsetof(IKModifier_OnResumed, AnimInstance) == 0x000008, "Member 'IKModifier_OnResumed::AnimInstance' has a wrong offset!");

// Function ObsidianFox.IKModifier.OnUpdate
// 0x0060 (0x0060 - 0x0000)
struct IKModifier_OnUpdate final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimInstance*                          AnimInstance;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIKModifierUpdateReturnValue           ReturnValue;                                       // 0x0020(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(IKModifier_OnUpdate) == 0x000010, "Wrong alignment on IKModifier_OnUpdate");
static_assert(sizeof(IKModifier_OnUpdate) == 0x000060, "Wrong size on IKModifier_OnUpdate");
static_assert(offsetof(IKModifier_OnUpdate, BoneName) == 0x000000, "Member 'IKModifier_OnUpdate::BoneName' has a wrong offset!");
static_assert(offsetof(IKModifier_OnUpdate, AnimInstance) == 0x000008, "Member 'IKModifier_OnUpdate::AnimInstance' has a wrong offset!");
static_assert(offsetof(IKModifier_OnUpdate, DeltaTime) == 0x000010, "Member 'IKModifier_OnUpdate::DeltaTime' has a wrong offset!");
static_assert(offsetof(IKModifier_OnUpdate, ReturnValue) == 0x000020, "Member 'IKModifier_OnUpdate::ReturnValue' has a wrong offset!");

// Function ObsidianFox.IKModifier.IsDone
// 0x0001 (0x0001 - 0x0000)
struct IKModifier_IsDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IKModifier_IsDone) == 0x000001, "Wrong alignment on IKModifier_IsDone");
static_assert(sizeof(IKModifier_IsDone) == 0x000001, "Wrong size on IKModifier_IsDone");
static_assert(offsetof(IKModifier_IsDone, ReturnValue) == 0x000000, "Member 'IKModifier_IsDone::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAchievementTrackingSubsystem.AchievementCompletedHandler
// 0x0008 (0x0008 - 0x0000)
struct OFAchievementTrackingSubsystem_AchievementCompletedHandler final
{
public:
	class FName                                   AchievementId;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAchievementTrackingSubsystem_AchievementCompletedHandler) == 0x000004, "Wrong alignment on OFAchievementTrackingSubsystem_AchievementCompletedHandler");
static_assert(sizeof(OFAchievementTrackingSubsystem_AchievementCompletedHandler) == 0x000008, "Wrong size on OFAchievementTrackingSubsystem_AchievementCompletedHandler");
static_assert(offsetof(OFAchievementTrackingSubsystem_AchievementCompletedHandler, AchievementId) == 0x000000, "Member 'OFAchievementTrackingSubsystem_AchievementCompletedHandler::AchievementId' has a wrong offset!");

// Function ObsidianFox.OFAchievementTrackingSubsystem.BanterCompleted
// 0x0030 (0x0030 - 0x0000)
struct OFAchievementTrackingSubsystem_BanterCompleted final
{
public:
	struct FCompletedBanter                       CompletedBanter;                                   // 0x0000(0x0030)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAchievementTrackingSubsystem_BanterCompleted) == 0x000008, "Wrong alignment on OFAchievementTrackingSubsystem_BanterCompleted");
static_assert(sizeof(OFAchievementTrackingSubsystem_BanterCompleted) == 0x000030, "Wrong size on OFAchievementTrackingSubsystem_BanterCompleted");
static_assert(offsetof(OFAchievementTrackingSubsystem_BanterCompleted, CompletedBanter) == 0x000000, "Member 'OFAchievementTrackingSubsystem_BanterCompleted::CompletedBanter' has a wrong offset!");

// Function ObsidianFox.OFAchievementTrackingSubsystem.CheckEnemyKilledAchievements
// 0x0020 (0x0020 - 0x0000)
struct OFAchievementTrackingSubsystem_CheckEnemyKilledAchievements final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAchievementTrackingSubsystem_CheckEnemyKilledAchievements) == 0x000008, "Wrong alignment on OFAchievementTrackingSubsystem_CheckEnemyKilledAchievements");
static_assert(sizeof(OFAchievementTrackingSubsystem_CheckEnemyKilledAchievements) == 0x000020, "Wrong size on OFAchievementTrackingSubsystem_CheckEnemyKilledAchievements");
static_assert(offsetof(OFAchievementTrackingSubsystem_CheckEnemyKilledAchievements, Tags) == 0x000000, "Member 'OFAchievementTrackingSubsystem_CheckEnemyKilledAchievements::Tags' has a wrong offset!");

// Function ObsidianFox.OFAchievementTrackingSubsystem.CollectibleSetCompletedHandler
// 0x0008 (0x0008 - 0x0000)
struct OFAchievementTrackingSubsystem_CollectibleSetCompletedHandler final
{
public:
	const class UCollectibleSet*                  CollectibleSet;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAchievementTrackingSubsystem_CollectibleSetCompletedHandler) == 0x000008, "Wrong alignment on OFAchievementTrackingSubsystem_CollectibleSetCompletedHandler");
static_assert(sizeof(OFAchievementTrackingSubsystem_CollectibleSetCompletedHandler) == 0x000008, "Wrong size on OFAchievementTrackingSubsystem_CollectibleSetCompletedHandler");
static_assert(offsetof(OFAchievementTrackingSubsystem_CollectibleSetCompletedHandler, CollectibleSet) == 0x000000, "Member 'OFAchievementTrackingSubsystem_CollectibleSetCompletedHandler::CollectibleSet' has a wrong offset!");

// Function ObsidianFox.OFAchievementTrackingSubsystem.FactUpdatedHandler
// 0x000C (0x000C - 0x0000)
struct OFAchievementTrackingSubsystem_FactUpdatedHandler final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubscriptionTagChangeType                    ChangeType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFAchievementTrackingSubsystem_FactUpdatedHandler) == 0x000004, "Wrong alignment on OFAchievementTrackingSubsystem_FactUpdatedHandler");
static_assert(sizeof(OFAchievementTrackingSubsystem_FactUpdatedHandler) == 0x00000C, "Wrong size on OFAchievementTrackingSubsystem_FactUpdatedHandler");
static_assert(offsetof(OFAchievementTrackingSubsystem_FactUpdatedHandler, Tag) == 0x000000, "Member 'OFAchievementTrackingSubsystem_FactUpdatedHandler::Tag' has a wrong offset!");
static_assert(offsetof(OFAchievementTrackingSubsystem_FactUpdatedHandler, ChangeType) == 0x000008, "Member 'OFAchievementTrackingSubsystem_FactUpdatedHandler::ChangeType' has a wrong offset!");

// Function ObsidianFox.OFAchievementTrackingSubsystem.GameSessionStartedHandler
// 0x0008 (0x0008 - 0x0000)
struct OFAchievementTrackingSubsystem_GameSessionStartedHandler final
{
public:
	class UGameplaySession*                       GameplaySession;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAchievementTrackingSubsystem_GameSessionStartedHandler) == 0x000008, "Wrong alignment on OFAchievementTrackingSubsystem_GameSessionStartedHandler");
static_assert(sizeof(OFAchievementTrackingSubsystem_GameSessionStartedHandler) == 0x000008, "Wrong size on OFAchievementTrackingSubsystem_GameSessionStartedHandler");
static_assert(offsetof(OFAchievementTrackingSubsystem_GameSessionStartedHandler, GameplaySession) == 0x000000, "Member 'OFAchievementTrackingSubsystem_GameSessionStartedHandler::GameplaySession' has a wrong offset!");

// Function ObsidianFox.OFAchievementTrackingSubsystem.ItemExaminedHandler
// 0x0028 (0x0028 - 0x0000)
struct OFAchievementTrackingSubsystem_ItemExaminedHandler final
{
public:
	TSoftObjectPtr<class UItemData>               ItemData;                                          // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAchievementTrackingSubsystem_ItemExaminedHandler) == 0x000008, "Wrong alignment on OFAchievementTrackingSubsystem_ItemExaminedHandler");
static_assert(sizeof(OFAchievementTrackingSubsystem_ItemExaminedHandler) == 0x000028, "Wrong size on OFAchievementTrackingSubsystem_ItemExaminedHandler");
static_assert(offsetof(OFAchievementTrackingSubsystem_ItemExaminedHandler, ItemData) == 0x000000, "Member 'OFAchievementTrackingSubsystem_ItemExaminedHandler::ItemData' has a wrong offset!");

// Function ObsidianFox.OFAchievementTrackingSubsystem.PawnControllerChangedHandler
// 0x0010 (0x0010 - 0x0000)
struct OFAchievementTrackingSubsystem_PawnControllerChangedHandler final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Controller;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAchievementTrackingSubsystem_PawnControllerChangedHandler) == 0x000008, "Wrong alignment on OFAchievementTrackingSubsystem_PawnControllerChangedHandler");
static_assert(sizeof(OFAchievementTrackingSubsystem_PawnControllerChangedHandler) == 0x000010, "Wrong size on OFAchievementTrackingSubsystem_PawnControllerChangedHandler");
static_assert(offsetof(OFAchievementTrackingSubsystem_PawnControllerChangedHandler, Pawn) == 0x000000, "Member 'OFAchievementTrackingSubsystem_PawnControllerChangedHandler::Pawn' has a wrong offset!");
static_assert(offsetof(OFAchievementTrackingSubsystem_PawnControllerChangedHandler, Controller) == 0x000008, "Member 'OFAchievementTrackingSubsystem_PawnControllerChangedHandler::Controller' has a wrong offset!");

// Function ObsidianFox.FootPrintSpawnerComponent.OnFootDown
// 0x0018 (0x0018 - 0x0000)
struct FootPrintSpawnerComponent_OnFootDown final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFootType                                     FootStepType;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FootPrintSpawnerComponent_OnFootDown) == 0x000004, "Wrong alignment on FootPrintSpawnerComponent_OnFootDown");
static_assert(sizeof(FootPrintSpawnerComponent_OnFootDown) == 0x000018, "Wrong size on FootPrintSpawnerComponent_OnFootDown");
static_assert(offsetof(FootPrintSpawnerComponent_OnFootDown, Location) == 0x000000, "Member 'FootPrintSpawnerComponent_OnFootDown::Location' has a wrong offset!");
static_assert(offsetof(FootPrintSpawnerComponent_OnFootDown, FootStepType) == 0x00000C, "Member 'FootPrintSpawnerComponent_OnFootDown::FootStepType' has a wrong offset!");
static_assert(offsetof(FootPrintSpawnerComponent_OnFootDown, BoneName) == 0x000010, "Member 'FootPrintSpawnerComponent_OnFootDown::BoneName' has a wrong offset!");

// Function ObsidianFox.FootPrintSpawnerComponent.OnFootUp
// 0x0018 (0x0018 - 0x0000)
struct FootPrintSpawnerComponent_OnFootUp final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFootType                                     FootStepType;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FootPrintSpawnerComponent_OnFootUp) == 0x000004, "Wrong alignment on FootPrintSpawnerComponent_OnFootUp");
static_assert(sizeof(FootPrintSpawnerComponent_OnFootUp) == 0x000018, "Wrong size on FootPrintSpawnerComponent_OnFootUp");
static_assert(offsetof(FootPrintSpawnerComponent_OnFootUp, Location) == 0x000000, "Member 'FootPrintSpawnerComponent_OnFootUp::Location' has a wrong offset!");
static_assert(offsetof(FootPrintSpawnerComponent_OnFootUp, FootStepType) == 0x00000C, "Member 'FootPrintSpawnerComponent_OnFootUp::FootStepType' has a wrong offset!");
static_assert(offsetof(FootPrintSpawnerComponent_OnFootUp, BoneName) == 0x000010, "Member 'FootPrintSpawnerComponent_OnFootUp::BoneName' has a wrong offset!");

// Function ObsidianFox.GameplayAbility_Burrow.SetEnablePawnCollision
// 0x0001 (0x0001 - 0x0000)
struct GameplayAbility_Burrow_SetEnablePawnCollision final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_Burrow_SetEnablePawnCollision) == 0x000001, "Wrong alignment on GameplayAbility_Burrow_SetEnablePawnCollision");
static_assert(sizeof(GameplayAbility_Burrow_SetEnablePawnCollision) == 0x000001, "Wrong size on GameplayAbility_Burrow_SetEnablePawnCollision");
static_assert(offsetof(GameplayAbility_Burrow_SetEnablePawnCollision, bEnable) == 0x000000, "Member 'GameplayAbility_Burrow_SetEnablePawnCollision::bEnable' has a wrong offset!");

// Function ObsidianFox.GameplayAbility_Burrow.SetFootIKEnable
// 0x0001 (0x0001 - 0x0000)
struct GameplayAbility_Burrow_SetFootIKEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_Burrow_SetFootIKEnable) == 0x000001, "Wrong alignment on GameplayAbility_Burrow_SetFootIKEnable");
static_assert(sizeof(GameplayAbility_Burrow_SetFootIKEnable) == 0x000001, "Wrong size on GameplayAbility_Burrow_SetFootIKEnable");
static_assert(offsetof(GameplayAbility_Burrow_SetFootIKEnable, bEnable) == 0x000000, "Member 'GameplayAbility_Burrow_SetFootIKEnable::bEnable' has a wrong offset!");

// Function ObsidianFox.GameplayAbility_DeathReaction.GetDeathReactionTag
// 0x0008 (0x0008 - 0x0000)
struct GameplayAbility_DeathReaction_GetDeathReactionTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_DeathReaction_GetDeathReactionTag) == 0x000004, "Wrong alignment on GameplayAbility_DeathReaction_GetDeathReactionTag");
static_assert(sizeof(GameplayAbility_DeathReaction_GetDeathReactionTag) == 0x000008, "Wrong size on GameplayAbility_DeathReaction_GetDeathReactionTag");
static_assert(offsetof(GameplayAbility_DeathReaction_GetDeathReactionTag, ReturnValue) == 0x000000, "Member 'GameplayAbility_DeathReaction_GetDeathReactionTag::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameplayAbility_DeathReaction.GetFirstTagMatchingDeathReactionTag
// 0x0028 (0x0028 - 0x0000)
struct GameplayAbility_DeathReaction_GetFirstTagMatchingDeathReactionTag final
{
public:
	struct FGameplayTagContainer                  TargetTags;                                        // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0020(0x0008)(ConstParm, Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayAbility_DeathReaction_GetFirstTagMatchingDeathReactionTag) == 0x000008, "Wrong alignment on GameplayAbility_DeathReaction_GetFirstTagMatchingDeathReactionTag");
static_assert(sizeof(GameplayAbility_DeathReaction_GetFirstTagMatchingDeathReactionTag) == 0x000028, "Wrong size on GameplayAbility_DeathReaction_GetFirstTagMatchingDeathReactionTag");
static_assert(offsetof(GameplayAbility_DeathReaction_GetFirstTagMatchingDeathReactionTag, TargetTags) == 0x000000, "Member 'GameplayAbility_DeathReaction_GetFirstTagMatchingDeathReactionTag::TargetTags' has a wrong offset!");
static_assert(offsetof(GameplayAbility_DeathReaction_GetFirstTagMatchingDeathReactionTag, ReturnValue) == 0x000020, "Member 'GameplayAbility_DeathReaction_GetFirstTagMatchingDeathReactionTag::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameplayAbility_HitReaction.GetHitReactionData
// 0x0198 (0x0198 - 0x0000)
struct GameplayAbility_HitReaction_GetHitReactionData final
{
public:
	struct FGameplayEventData                     GameplayEventData;                                 // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FHitReactionData                       HitReactionData;                                   // 0x00B0(0x00E0)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0190(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayAbility_HitReaction_GetHitReactionData) == 0x000008, "Wrong alignment on GameplayAbility_HitReaction_GetHitReactionData");
static_assert(sizeof(GameplayAbility_HitReaction_GetHitReactionData) == 0x000198, "Wrong size on GameplayAbility_HitReaction_GetHitReactionData");
static_assert(offsetof(GameplayAbility_HitReaction_GetHitReactionData, GameplayEventData) == 0x000000, "Member 'GameplayAbility_HitReaction_GetHitReactionData::GameplayEventData' has a wrong offset!");
static_assert(offsetof(GameplayAbility_HitReaction_GetHitReactionData, HitReactionData) == 0x0000B0, "Member 'GameplayAbility_HitReaction_GetHitReactionData::HitReactionData' has a wrong offset!");
static_assert(offsetof(GameplayAbility_HitReaction_GetHitReactionData, ReturnValue) == 0x000190, "Member 'GameplayAbility_HitReaction_GetHitReactionData::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimationBlueprintLibrary.GetActorForwardInputDirectionAngle
// 0x0018 (0x0018 - 0x0000)
struct OFAnimationBlueprintLibrary_GetActorForwardInputDirectionAngle final
{
public:
	const class UOFCharacterMovementComponent*    MovementComponent;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ACharacter*                       Actor;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFAnimationBlueprintLibrary_GetActorForwardInputDirectionAngle) == 0x000008, "Wrong alignment on OFAnimationBlueprintLibrary_GetActorForwardInputDirectionAngle");
static_assert(sizeof(OFAnimationBlueprintLibrary_GetActorForwardInputDirectionAngle) == 0x000018, "Wrong size on OFAnimationBlueprintLibrary_GetActorForwardInputDirectionAngle");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetActorForwardInputDirectionAngle, MovementComponent) == 0x000000, "Member 'OFAnimationBlueprintLibrary_GetActorForwardInputDirectionAngle::MovementComponent' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetActorForwardInputDirectionAngle, Actor) == 0x000008, "Member 'OFAnimationBlueprintLibrary_GetActorForwardInputDirectionAngle::Actor' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetActorForwardInputDirectionAngle, ReturnValue) == 0x000010, "Member 'OFAnimationBlueprintLibrary_GetActorForwardInputDirectionAngle::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimationBlueprintLibrary.GetAnimationMontageFromAssetManager
// 0x0040 (0x0040 - 0x0000)
struct OFAnimationBlueprintLibrary_GetAnimationMontageFromAssetManager final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AnimationTag;                                      // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ACharacter*                       Player;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            ReturnValue;                                       // 0x0018(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimationBlueprintLibrary_GetAnimationMontageFromAssetManager) == 0x000008, "Wrong alignment on OFAnimationBlueprintLibrary_GetAnimationMontageFromAssetManager");
static_assert(sizeof(OFAnimationBlueprintLibrary_GetAnimationMontageFromAssetManager) == 0x000040, "Wrong size on OFAnimationBlueprintLibrary_GetAnimationMontageFromAssetManager");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetAnimationMontageFromAssetManager, WorldContextObject) == 0x000000, "Member 'OFAnimationBlueprintLibrary_GetAnimationMontageFromAssetManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetAnimationMontageFromAssetManager, AnimationTag) == 0x000008, "Member 'OFAnimationBlueprintLibrary_GetAnimationMontageFromAssetManager::AnimationTag' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetAnimationMontageFromAssetManager, Player) == 0x000010, "Member 'OFAnimationBlueprintLibrary_GetAnimationMontageFromAssetManager::Player' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetAnimationMontageFromAssetManager, ReturnValue) == 0x000018, "Member 'OFAnimationBlueprintLibrary_GetAnimationMontageFromAssetManager::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimationBlueprintLibrary.GetBlendInTime
// 0x0010 (0x0010 - 0x0000)
struct OFAnimationBlueprintLibrary_GetBlendInTime final
{
public:
	const class UAnimMontage*                     Montage;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFAnimationBlueprintLibrary_GetBlendInTime) == 0x000008, "Wrong alignment on OFAnimationBlueprintLibrary_GetBlendInTime");
static_assert(sizeof(OFAnimationBlueprintLibrary_GetBlendInTime) == 0x000010, "Wrong size on OFAnimationBlueprintLibrary_GetBlendInTime");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetBlendInTime, Montage) == 0x000000, "Member 'OFAnimationBlueprintLibrary_GetBlendInTime::Montage' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetBlendInTime, ReturnValue) == 0x000008, "Member 'OFAnimationBlueprintLibrary_GetBlendInTime::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimationBlueprintLibrary.GetBlendspace1DPositionFromAccumulatedCurveValue
// 0x0020 (0x0020 - 0x0000)
struct OFAnimationBlueprintLibrary_GetBlendspace1DPositionFromAccumulatedCurveValue final
{
public:
	const class UBlendSpace1D*                    BlendSpace;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendSpaceInput;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurveName;                                         // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetValue;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFAnimationBlueprintLibrary_GetBlendspace1DPositionFromAccumulatedCurveValue) == 0x000008, "Wrong alignment on OFAnimationBlueprintLibrary_GetBlendspace1DPositionFromAccumulatedCurveValue");
static_assert(sizeof(OFAnimationBlueprintLibrary_GetBlendspace1DPositionFromAccumulatedCurveValue) == 0x000020, "Wrong size on OFAnimationBlueprintLibrary_GetBlendspace1DPositionFromAccumulatedCurveValue");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetBlendspace1DPositionFromAccumulatedCurveValue, BlendSpace) == 0x000000, "Member 'OFAnimationBlueprintLibrary_GetBlendspace1DPositionFromAccumulatedCurveValue::BlendSpace' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetBlendspace1DPositionFromAccumulatedCurveValue, BlendSpaceInput) == 0x000008, "Member 'OFAnimationBlueprintLibrary_GetBlendspace1DPositionFromAccumulatedCurveValue::BlendSpaceInput' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetBlendspace1DPositionFromAccumulatedCurveValue, CurveName) == 0x00000C, "Member 'OFAnimationBlueprintLibrary_GetBlendspace1DPositionFromAccumulatedCurveValue::CurveName' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetBlendspace1DPositionFromAccumulatedCurveValue, TargetValue) == 0x000014, "Member 'OFAnimationBlueprintLibrary_GetBlendspace1DPositionFromAccumulatedCurveValue::TargetValue' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetBlendspace1DPositionFromAccumulatedCurveValue, ReturnValue) == 0x000018, "Member 'OFAnimationBlueprintLibrary_GetBlendspace1DPositionFromAccumulatedCurveValue::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimationBlueprintLibrary.GetBlendspacePositionFromCurveValue
// 0x0028 (0x0028 - 0x0000)
struct OFAnimationBlueprintLibrary_GetBlendspacePositionFromCurveValue final
{
public:
	const class UBlendSpaceBase*                  BlendSpace;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BlendSpaceInput;                                   // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurveName;                                         // 0x0014(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetValue;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFAnimationBlueprintLibrary_GetBlendspacePositionFromCurveValue) == 0x000008, "Wrong alignment on OFAnimationBlueprintLibrary_GetBlendspacePositionFromCurveValue");
static_assert(sizeof(OFAnimationBlueprintLibrary_GetBlendspacePositionFromCurveValue) == 0x000028, "Wrong size on OFAnimationBlueprintLibrary_GetBlendspacePositionFromCurveValue");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetBlendspacePositionFromCurveValue, BlendSpace) == 0x000000, "Member 'OFAnimationBlueprintLibrary_GetBlendspacePositionFromCurveValue::BlendSpace' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetBlendspacePositionFromCurveValue, BlendSpaceInput) == 0x000008, "Member 'OFAnimationBlueprintLibrary_GetBlendspacePositionFromCurveValue::BlendSpaceInput' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetBlendspacePositionFromCurveValue, CurveName) == 0x000014, "Member 'OFAnimationBlueprintLibrary_GetBlendspacePositionFromCurveValue::CurveName' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetBlendspacePositionFromCurveValue, TargetValue) == 0x00001C, "Member 'OFAnimationBlueprintLibrary_GetBlendspacePositionFromCurveValue::TargetValue' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetBlendspacePositionFromCurveValue, ReturnValue) == 0x000020, "Member 'OFAnimationBlueprintLibrary_GetBlendspacePositionFromCurveValue::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimationBlueprintLibrary.GetBoneLocationAt
// 0x0028 (0x0028 - 0x0000)
struct OFAnimationBlueprintLibrary_GetBoneLocationAt final
{
public:
	class USkeletalMeshComponent*                 InSkeletalMesh;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      AnimSequenceBase;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimationBlueprintLibrary_GetBoneLocationAt) == 0x000008, "Wrong alignment on OFAnimationBlueprintLibrary_GetBoneLocationAt");
static_assert(sizeof(OFAnimationBlueprintLibrary_GetBoneLocationAt) == 0x000028, "Wrong size on OFAnimationBlueprintLibrary_GetBoneLocationAt");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetBoneLocationAt, InSkeletalMesh) == 0x000000, "Member 'OFAnimationBlueprintLibrary_GetBoneLocationAt::InSkeletalMesh' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetBoneLocationAt, AnimSequenceBase) == 0x000008, "Member 'OFAnimationBlueprintLibrary_GetBoneLocationAt::AnimSequenceBase' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetBoneLocationAt, BoneName) == 0x000010, "Member 'OFAnimationBlueprintLibrary_GetBoneLocationAt::BoneName' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetBoneLocationAt, Time) == 0x000018, "Member 'OFAnimationBlueprintLibrary_GetBoneLocationAt::Time' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetBoneLocationAt, ReturnValue) == 0x00001C, "Member 'OFAnimationBlueprintLibrary_GetBoneLocationAt::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimationBlueprintLibrary.GetBoneLocationAtNotifyEvent
// 0x00E0 (0x00E0 - 0x0000)
struct OFAnimationBlueprintLibrary_GetBoneLocationAtNotifyEvent final
{
public:
	class USkeletalMeshComponent*                 InSkeletalMesh;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      AnimSequenceBase;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimNotifyEvent                       NotifyEvent;                                       // 0x0018(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x00D0(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFAnimationBlueprintLibrary_GetBoneLocationAtNotifyEvent) == 0x000008, "Wrong alignment on OFAnimationBlueprintLibrary_GetBoneLocationAtNotifyEvent");
static_assert(sizeof(OFAnimationBlueprintLibrary_GetBoneLocationAtNotifyEvent) == 0x0000E0, "Wrong size on OFAnimationBlueprintLibrary_GetBoneLocationAtNotifyEvent");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetBoneLocationAtNotifyEvent, InSkeletalMesh) == 0x000000, "Member 'OFAnimationBlueprintLibrary_GetBoneLocationAtNotifyEvent::InSkeletalMesh' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetBoneLocationAtNotifyEvent, AnimSequenceBase) == 0x000008, "Member 'OFAnimationBlueprintLibrary_GetBoneLocationAtNotifyEvent::AnimSequenceBase' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetBoneLocationAtNotifyEvent, BoneName) == 0x000010, "Member 'OFAnimationBlueprintLibrary_GetBoneLocationAtNotifyEvent::BoneName' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetBoneLocationAtNotifyEvent, NotifyEvent) == 0x000018, "Member 'OFAnimationBlueprintLibrary_GetBoneLocationAtNotifyEvent::NotifyEvent' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetBoneLocationAtNotifyEvent, ReturnValue) == 0x0000D0, "Member 'OFAnimationBlueprintLibrary_GetBoneLocationAtNotifyEvent::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimationBlueprintLibrary.GetInteractionReachNotifyEvents
// 0x0020 (0x0020 - 0x0000)
struct OFAnimationBlueprintLibrary_GetInteractionReachNotifyEvents final
{
public:
	class UAnimSequenceBase*                      SequenceBase;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEvent>               OutNotifyEvents;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   InteractionReachBoneName;                          // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimationBlueprintLibrary_GetInteractionReachNotifyEvents) == 0x000008, "Wrong alignment on OFAnimationBlueprintLibrary_GetInteractionReachNotifyEvents");
static_assert(sizeof(OFAnimationBlueprintLibrary_GetInteractionReachNotifyEvents) == 0x000020, "Wrong size on OFAnimationBlueprintLibrary_GetInteractionReachNotifyEvents");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetInteractionReachNotifyEvents, SequenceBase) == 0x000000, "Member 'OFAnimationBlueprintLibrary_GetInteractionReachNotifyEvents::SequenceBase' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetInteractionReachNotifyEvents, OutNotifyEvents) == 0x000008, "Member 'OFAnimationBlueprintLibrary_GetInteractionReachNotifyEvents::OutNotifyEvents' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetInteractionReachNotifyEvents, InteractionReachBoneName) == 0x000018, "Member 'OFAnimationBlueprintLibrary_GetInteractionReachNotifyEvents::InteractionReachBoneName' has a wrong offset!");

// Function ObsidianFox.OFAnimationBlueprintLibrary.GetInteractionReachNotifyEventsForCurrentSection
// 0x0028 (0x0028 - 0x0000)
struct OFAnimationBlueprintLibrary_GetInteractionReachNotifyEventsForCurrentSection final
{
public:
	class UAnimSequenceBase*                      SequenceBase;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimInstance*                    AnimInstance;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEvent>               OutNotifyEvents;                                   // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   InteractionReachBoneName;                          // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimationBlueprintLibrary_GetInteractionReachNotifyEventsForCurrentSection) == 0x000008, "Wrong alignment on OFAnimationBlueprintLibrary_GetInteractionReachNotifyEventsForCurrentSection");
static_assert(sizeof(OFAnimationBlueprintLibrary_GetInteractionReachNotifyEventsForCurrentSection) == 0x000028, "Wrong size on OFAnimationBlueprintLibrary_GetInteractionReachNotifyEventsForCurrentSection");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetInteractionReachNotifyEventsForCurrentSection, SequenceBase) == 0x000000, "Member 'OFAnimationBlueprintLibrary_GetInteractionReachNotifyEventsForCurrentSection::SequenceBase' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetInteractionReachNotifyEventsForCurrentSection, AnimInstance) == 0x000008, "Member 'OFAnimationBlueprintLibrary_GetInteractionReachNotifyEventsForCurrentSection::AnimInstance' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetInteractionReachNotifyEventsForCurrentSection, OutNotifyEvents) == 0x000010, "Member 'OFAnimationBlueprintLibrary_GetInteractionReachNotifyEventsForCurrentSection::OutNotifyEvents' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetInteractionReachNotifyEventsForCurrentSection, InteractionReachBoneName) == 0x000020, "Member 'OFAnimationBlueprintLibrary_GetInteractionReachNotifyEventsForCurrentSection::InteractionReachBoneName' has a wrong offset!");

// Function ObsidianFox.OFAnimationBlueprintLibrary.GetMontageSections
// 0x0018 (0x0018 - 0x0000)
struct OFAnimationBlueprintLibrary_GetMontageSections final
{
public:
	const class UAnimMontage*                     AnimMontage;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OutNames;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimationBlueprintLibrary_GetMontageSections) == 0x000008, "Wrong alignment on OFAnimationBlueprintLibrary_GetMontageSections");
static_assert(sizeof(OFAnimationBlueprintLibrary_GetMontageSections) == 0x000018, "Wrong size on OFAnimationBlueprintLibrary_GetMontageSections");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetMontageSections, AnimMontage) == 0x000000, "Member 'OFAnimationBlueprintLibrary_GetMontageSections::AnimMontage' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetMontageSections, OutNames) == 0x000008, "Member 'OFAnimationBlueprintLibrary_GetMontageSections::OutNames' has a wrong offset!");

// Function ObsidianFox.OFAnimationBlueprintLibrary.GetMontageSectionStartTime
// 0x0018 (0x0018 - 0x0000)
struct OFAnimationBlueprintLibrary_GetMontageSectionStartTime final
{
public:
	const class UAnimMontage*                     Montage;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFAnimationBlueprintLibrary_GetMontageSectionStartTime) == 0x000008, "Wrong alignment on OFAnimationBlueprintLibrary_GetMontageSectionStartTime");
static_assert(sizeof(OFAnimationBlueprintLibrary_GetMontageSectionStartTime) == 0x000018, "Wrong size on OFAnimationBlueprintLibrary_GetMontageSectionStartTime");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetMontageSectionStartTime, Montage) == 0x000000, "Member 'OFAnimationBlueprintLibrary_GetMontageSectionStartTime::Montage' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetMontageSectionStartTime, SectionName) == 0x000008, "Member 'OFAnimationBlueprintLibrary_GetMontageSectionStartTime::SectionName' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetMontageSectionStartTime, ReturnValue) == 0x000010, "Member 'OFAnimationBlueprintLibrary_GetMontageSectionStartTime::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimationBlueprintLibrary.GetNotifyEvents
// 0x0020 (0x0020 - 0x0000)
struct OFAnimationBlueprintLibrary_GetNotifyEvents final
{
public:
	class UAnimSequenceBase*                      SequenceBase;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimNotify>                NotifyClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEvent>               OutNotifyEvents;                                   // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimationBlueprintLibrary_GetNotifyEvents) == 0x000008, "Wrong alignment on OFAnimationBlueprintLibrary_GetNotifyEvents");
static_assert(sizeof(OFAnimationBlueprintLibrary_GetNotifyEvents) == 0x000020, "Wrong size on OFAnimationBlueprintLibrary_GetNotifyEvents");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetNotifyEvents, SequenceBase) == 0x000000, "Member 'OFAnimationBlueprintLibrary_GetNotifyEvents::SequenceBase' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetNotifyEvents, NotifyClass) == 0x000008, "Member 'OFAnimationBlueprintLibrary_GetNotifyEvents::NotifyClass' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetNotifyEvents, OutNotifyEvents) == 0x000010, "Member 'OFAnimationBlueprintLibrary_GetNotifyEvents::OutNotifyEvents' has a wrong offset!");

// Function ObsidianFox.OFAnimationBlueprintLibrary.GetRandomAnimationStartPosition
// 0x0010 (0x0010 - 0x0000)
struct OFAnimationBlueprintLibrary_GetRandomAnimationStartPosition final
{
public:
	class UAnimSequenceBase*                      AnimSequence;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFAnimationBlueprintLibrary_GetRandomAnimationStartPosition) == 0x000008, "Wrong alignment on OFAnimationBlueprintLibrary_GetRandomAnimationStartPosition");
static_assert(sizeof(OFAnimationBlueprintLibrary_GetRandomAnimationStartPosition) == 0x000010, "Wrong size on OFAnimationBlueprintLibrary_GetRandomAnimationStartPosition");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetRandomAnimationStartPosition, AnimSequence) == 0x000000, "Member 'OFAnimationBlueprintLibrary_GetRandomAnimationStartPosition::AnimSequence' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetRandomAnimationStartPosition, ReturnValue) == 0x000008, "Member 'OFAnimationBlueprintLibrary_GetRandomAnimationStartPosition::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimationBlueprintLibrary.GetRandomMontageSection
// 0x0010 (0x0010 - 0x0000)
struct OFAnimationBlueprintLibrary_GetRandomMontageSection final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFAnimationBlueprintLibrary_GetRandomMontageSection) == 0x000008, "Wrong alignment on OFAnimationBlueprintLibrary_GetRandomMontageSection");
static_assert(sizeof(OFAnimationBlueprintLibrary_GetRandomMontageSection) == 0x000010, "Wrong size on OFAnimationBlueprintLibrary_GetRandomMontageSection");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetRandomMontageSection, AnimMontage) == 0x000000, "Member 'OFAnimationBlueprintLibrary_GetRandomMontageSection::AnimMontage' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetRandomMontageSection, ReturnValue) == 0x000008, "Member 'OFAnimationBlueprintLibrary_GetRandomMontageSection::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFAnimationBlueprintLibrary.GetSequenceLength
// 0x0010 (0x0010 - 0x0000)
struct OFAnimationBlueprintLibrary_GetSequenceLength final
{
public:
	class UAnimSequenceBase*                      AnimSequence;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFAnimationBlueprintLibrary_GetSequenceLength) == 0x000008, "Wrong alignment on OFAnimationBlueprintLibrary_GetSequenceLength");
static_assert(sizeof(OFAnimationBlueprintLibrary_GetSequenceLength) == 0x000010, "Wrong size on OFAnimationBlueprintLibrary_GetSequenceLength");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetSequenceLength, AnimSequence) == 0x000000, "Member 'OFAnimationBlueprintLibrary_GetSequenceLength::AnimSequence' has a wrong offset!");
static_assert(offsetof(OFAnimationBlueprintLibrary_GetSequenceLength, ReturnValue) == 0x000008, "Member 'OFAnimationBlueprintLibrary_GetSequenceLength::ReturnValue' has a wrong offset!");

// Function ObsidianFox.SubtitleWidget.AddSubtitle
// 0x0020 (0x0020 - 0x0000)
struct SubtitleWidget_AddSubtitle final
{
public:
	class FText                                   SubtitleText;                                      // 0x0000(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SubtitleWidget_AddSubtitle) == 0x000008, "Wrong alignment on SubtitleWidget_AddSubtitle");
static_assert(sizeof(SubtitleWidget_AddSubtitle) == 0x000020, "Wrong size on SubtitleWidget_AddSubtitle");
static_assert(offsetof(SubtitleWidget_AddSubtitle, SubtitleText) == 0x000000, "Member 'SubtitleWidget_AddSubtitle::SubtitleText' has a wrong offset!");
static_assert(offsetof(SubtitleWidget_AddSubtitle, Time) == 0x000018, "Member 'SubtitleWidget_AddSubtitle::Time' has a wrong offset!");

// Function ObsidianFox.SubtitleWidget.OnDisplaySubtitlesHandler
// 0x0020 (0x0020 - 0x0000)
struct SubtitleWidget_OnDisplaySubtitlesHandler final
{
public:
	class FText                                   SubtitleText;                                      // 0x0000(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SubtitleWidget_OnDisplaySubtitlesHandler) == 0x000008, "Wrong alignment on SubtitleWidget_OnDisplaySubtitlesHandler");
static_assert(sizeof(SubtitleWidget_OnDisplaySubtitlesHandler) == 0x000020, "Wrong size on SubtitleWidget_OnDisplaySubtitlesHandler");
static_assert(offsetof(SubtitleWidget_OnDisplaySubtitlesHandler, SubtitleText) == 0x000000, "Member 'SubtitleWidget_OnDisplaySubtitlesHandler::SubtitleText' has a wrong offset!");
static_assert(offsetof(SubtitleWidget_OnDisplaySubtitlesHandler, Time) == 0x000018, "Member 'SubtitleWidget_OnDisplaySubtitlesHandler::Time' has a wrong offset!");

// Function ObsidianFox.GameplayBlueprintLibrary.FindLookAtRotationBetweenActors
// 0x0020 (0x0020 - 0x0000)
struct GameplayBlueprintLibrary_FindLookAtRotationBetweenActors final
{
public:
	const class AActor*                           SourceActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           TargetActor;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayBlueprintLibrary_FindLookAtRotationBetweenActors) == 0x000008, "Wrong alignment on GameplayBlueprintLibrary_FindLookAtRotationBetweenActors");
static_assert(sizeof(GameplayBlueprintLibrary_FindLookAtRotationBetweenActors) == 0x000020, "Wrong size on GameplayBlueprintLibrary_FindLookAtRotationBetweenActors");
static_assert(offsetof(GameplayBlueprintLibrary_FindLookAtRotationBetweenActors, SourceActor) == 0x000000, "Member 'GameplayBlueprintLibrary_FindLookAtRotationBetweenActors::SourceActor' has a wrong offset!");
static_assert(offsetof(GameplayBlueprintLibrary_FindLookAtRotationBetweenActors, TargetActor) == 0x000008, "Member 'GameplayBlueprintLibrary_FindLookAtRotationBetweenActors::TargetActor' has a wrong offset!");
static_assert(offsetof(GameplayBlueprintLibrary_FindLookAtRotationBetweenActors, ReturnValue) == 0x000010, "Member 'GameplayBlueprintLibrary_FindLookAtRotationBetweenActors::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_BalanceManager.GetRandomizedResourceTarget
// 0x0014 (0x0014 - 0x0000)
struct GameSubsystem_BalanceManager_GetRandomizedResourceTarget final
{
public:
	struct FResourceBalance                       ResourceBalance;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_BalanceManager_GetRandomizedResourceTarget) == 0x000004, "Wrong alignment on GameSubsystem_BalanceManager_GetRandomizedResourceTarget");
static_assert(sizeof(GameSubsystem_BalanceManager_GetRandomizedResourceTarget) == 0x000014, "Wrong size on GameSubsystem_BalanceManager_GetRandomizedResourceTarget");
static_assert(offsetof(GameSubsystem_BalanceManager_GetRandomizedResourceTarget, ResourceBalance) == 0x000000, "Member 'GameSubsystem_BalanceManager_GetRandomizedResourceTarget::ResourceBalance' has a wrong offset!");
static_assert(offsetof(GameSubsystem_BalanceManager_GetRandomizedResourceTarget, ReturnValue) == 0x000010, "Member 'GameSubsystem_BalanceManager_GetRandomizedResourceTarget::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_BalanceManager.GetAmountOfHealthPerItem
// 0x0004 (0x0004 - 0x0000)
struct GameSubsystem_BalanceManager_GetAmountOfHealthPerItem final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_BalanceManager_GetAmountOfHealthPerItem) == 0x000004, "Wrong alignment on GameSubsystem_BalanceManager_GetAmountOfHealthPerItem");
static_assert(sizeof(GameSubsystem_BalanceManager_GetAmountOfHealthPerItem) == 0x000004, "Wrong size on GameSubsystem_BalanceManager_GetAmountOfHealthPerItem");
static_assert(offsetof(GameSubsystem_BalanceManager_GetAmountOfHealthPerItem, ReturnValue) == 0x000000, "Member 'GameSubsystem_BalanceManager_GetAmountOfHealthPerItem::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_BalanceManager.GetCurrentItemAmountForType
// 0x0008 (0x0008 - 0x0000)
struct GameSubsystem_BalanceManager_GetCurrentItemAmountForType final
{
public:
	EConsumableType                               Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_BalanceManager_GetCurrentItemAmountForType) == 0x000004, "Wrong alignment on GameSubsystem_BalanceManager_GetCurrentItemAmountForType");
static_assert(sizeof(GameSubsystem_BalanceManager_GetCurrentItemAmountForType) == 0x000008, "Wrong size on GameSubsystem_BalanceManager_GetCurrentItemAmountForType");
static_assert(offsetof(GameSubsystem_BalanceManager_GetCurrentItemAmountForType, Type) == 0x000000, "Member 'GameSubsystem_BalanceManager_GetCurrentItemAmountForType::Type' has a wrong offset!");
static_assert(offsetof(GameSubsystem_BalanceManager_GetCurrentItemAmountForType, ReturnValue) == 0x000004, "Member 'GameSubsystem_BalanceManager_GetCurrentItemAmountForType::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_BalanceManager.GetMaxPotentialForConsumable
// 0x0008 (0x0008 - 0x0000)
struct GameSubsystem_BalanceManager_GetMaxPotentialForConsumable final
{
public:
	EConsumableType                               ConsumableType;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_BalanceManager_GetMaxPotentialForConsumable) == 0x000004, "Wrong alignment on GameSubsystem_BalanceManager_GetMaxPotentialForConsumable");
static_assert(sizeof(GameSubsystem_BalanceManager_GetMaxPotentialForConsumable) == 0x000008, "Wrong size on GameSubsystem_BalanceManager_GetMaxPotentialForConsumable");
static_assert(offsetof(GameSubsystem_BalanceManager_GetMaxPotentialForConsumable, ConsumableType) == 0x000000, "Member 'GameSubsystem_BalanceManager_GetMaxPotentialForConsumable::ConsumableType' has a wrong offset!");
static_assert(offsetof(GameSubsystem_BalanceManager_GetMaxPotentialForConsumable, ReturnValue) == 0x000004, "Member 'GameSubsystem_BalanceManager_GetMaxPotentialForConsumable::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_BalanceManager.GetResourceBalanceValues
// 0x0068 (0x0068 - 0x0000)
struct GameSubsystem_BalanceManager_GetResourceBalanceValues final
{
public:
	struct FResourceBalanceCollection             ReturnValue;                                       // 0x0000(0x0068)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_BalanceManager_GetResourceBalanceValues) == 0x000008, "Wrong alignment on GameSubsystem_BalanceManager_GetResourceBalanceValues");
static_assert(sizeof(GameSubsystem_BalanceManager_GetResourceBalanceValues) == 0x000068, "Wrong size on GameSubsystem_BalanceManager_GetResourceBalanceValues");
static_assert(offsetof(GameSubsystem_BalanceManager_GetResourceBalanceValues, ReturnValue) == 0x000000, "Member 'GameSubsystem_BalanceManager_GetResourceBalanceValues::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.GameSubsystem_BalanceManager.ResourceBalanceValuesUpdated__DelegateSignature
// 0x0068 (0x0068 - 0x0000)
struct GameSubsystem_BalanceManager_ResourceBalanceValuesUpdated__DelegateSignature final
{
public:
	struct FResourceBalanceCollection             NewValues;                                         // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_BalanceManager_ResourceBalanceValuesUpdated__DelegateSignature) == 0x000008, "Wrong alignment on GameSubsystem_BalanceManager_ResourceBalanceValuesUpdated__DelegateSignature");
static_assert(sizeof(GameSubsystem_BalanceManager_ResourceBalanceValuesUpdated__DelegateSignature) == 0x000068, "Wrong size on GameSubsystem_BalanceManager_ResourceBalanceValuesUpdated__DelegateSignature");
static_assert(offsetof(GameSubsystem_BalanceManager_ResourceBalanceValuesUpdated__DelegateSignature, NewValues) == 0x000000, "Member 'GameSubsystem_BalanceManager_ResourceBalanceValuesUpdated__DelegateSignature::NewValues' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_BalanceManager.SetDefaultResourceBalanceValues
// 0x0001 (0x0001 - 0x0000)
struct GameSubsystem_BalanceManager_SetDefaultResourceBalanceValues final
{
public:
	bool                                          bForceDefaults;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_BalanceManager_SetDefaultResourceBalanceValues) == 0x000001, "Wrong alignment on GameSubsystem_BalanceManager_SetDefaultResourceBalanceValues");
static_assert(sizeof(GameSubsystem_BalanceManager_SetDefaultResourceBalanceValues) == 0x000001, "Wrong size on GameSubsystem_BalanceManager_SetDefaultResourceBalanceValues");
static_assert(offsetof(GameSubsystem_BalanceManager_SetDefaultResourceBalanceValues, bForceDefaults) == 0x000000, "Member 'GameSubsystem_BalanceManager_SetDefaultResourceBalanceValues::bForceDefaults' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_BalanceManager.UpdateResourceBalanceValues
// 0x0008 (0x0008 - 0x0000)
struct GameSubsystem_BalanceManager_UpdateResourceBalanceValues final
{
public:
	class FName                                   RowName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_BalanceManager_UpdateResourceBalanceValues) == 0x000004, "Wrong alignment on GameSubsystem_BalanceManager_UpdateResourceBalanceValues");
static_assert(sizeof(GameSubsystem_BalanceManager_UpdateResourceBalanceValues) == 0x000008, "Wrong size on GameSubsystem_BalanceManager_UpdateResourceBalanceValues");
static_assert(offsetof(GameSubsystem_BalanceManager_UpdateResourceBalanceValues, RowName) == 0x000000, "Member 'GameSubsystem_BalanceManager_UpdateResourceBalanceValues::RowName' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_BalanceManager.GetEmptyContainersOpened
// 0x0001 (0x0001 - 0x0000)
struct GameSubsystem_BalanceManager_GetEmptyContainersOpened final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_BalanceManager_GetEmptyContainersOpened) == 0x000001, "Wrong alignment on GameSubsystem_BalanceManager_GetEmptyContainersOpened");
static_assert(sizeof(GameSubsystem_BalanceManager_GetEmptyContainersOpened) == 0x000001, "Wrong size on GameSubsystem_BalanceManager_GetEmptyContainersOpened");
static_assert(offsetof(GameSubsystem_BalanceManager_GetEmptyContainersOpened, ReturnValue) == 0x000000, "Member 'GameSubsystem_BalanceManager_GetEmptyContainersOpened::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_BalanceManager.GetLastSetRowName
// 0x0008 (0x0008 - 0x0000)
struct GameSubsystem_BalanceManager_GetLastSetRowName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_BalanceManager_GetLastSetRowName) == 0x000004, "Wrong alignment on GameSubsystem_BalanceManager_GetLastSetRowName");
static_assert(sizeof(GameSubsystem_BalanceManager_GetLastSetRowName) == 0x000008, "Wrong size on GameSubsystem_BalanceManager_GetLastSetRowName");
static_assert(offsetof(GameSubsystem_BalanceManager_GetLastSetRowName, ReturnValue) == 0x000000, "Member 'GameSubsystem_BalanceManager_GetLastSetRowName::ReturnValue' has a wrong offset!");

// Function ObsidianFox.DarkManInterface.GetObsessionRate
// 0x0004 (0x0004 - 0x0000)
struct DarkManInterface_GetObsessionRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarkManInterface_GetObsessionRate) == 0x000004, "Wrong alignment on DarkManInterface_GetObsessionRate");
static_assert(sizeof(DarkManInterface_GetObsessionRate) == 0x000004, "Wrong size on DarkManInterface_GetObsessionRate");
static_assert(offsetof(DarkManInterface_GetObsessionRate, ReturnValue) == 0x000000, "Member 'DarkManInterface_GetObsessionRate::ReturnValue' has a wrong offset!");

// Function ObsidianFox.DarkManInterface.CanPlayerSeeDarkMan
// 0x0001 (0x0001 - 0x0000)
struct DarkManInterface_CanPlayerSeeDarkMan final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarkManInterface_CanPlayerSeeDarkMan) == 0x000001, "Wrong alignment on DarkManInterface_CanPlayerSeeDarkMan");
static_assert(sizeof(DarkManInterface_CanPlayerSeeDarkMan) == 0x000001, "Wrong size on DarkManInterface_CanPlayerSeeDarkMan");
static_assert(offsetof(DarkManInterface_CanPlayerSeeDarkMan, ReturnValue) == 0x000000, "Member 'DarkManInterface_CanPlayerSeeDarkMan::ReturnValue' has a wrong offset!");

// Function ObsidianFox.DarkManInterface.IsActive
// 0x0001 (0x0001 - 0x0000)
struct DarkManInterface_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarkManInterface_IsActive) == 0x000001, "Wrong alignment on DarkManInterface_IsActive");
static_assert(sizeof(DarkManInterface_IsActive) == 0x000001, "Wrong size on DarkManInterface_IsActive");
static_assert(offsetof(DarkManInterface_IsActive, ReturnValue) == 0x000000, "Member 'DarkManInterface_IsActive::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_MapData.CreateMapDataAndAddToMap
// 0x0008 (0x0008 - 0x0000)
struct GameSubsystem_MapData_CreateMapDataAndAddToMap final
{
public:
	const class UMapMarkerActorComponent*         MarkerActorComponent;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_MapData_CreateMapDataAndAddToMap) == 0x000008, "Wrong alignment on GameSubsystem_MapData_CreateMapDataAndAddToMap");
static_assert(sizeof(GameSubsystem_MapData_CreateMapDataAndAddToMap) == 0x000008, "Wrong size on GameSubsystem_MapData_CreateMapDataAndAddToMap");
static_assert(offsetof(GameSubsystem_MapData_CreateMapDataAndAddToMap, MarkerActorComponent) == 0x000000, "Member 'GameSubsystem_MapData_CreateMapDataAndAddToMap::MarkerActorComponent' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_MapData.RemoveMapDataFromMap
// 0x0008 (0x0008 - 0x0000)
struct GameSubsystem_MapData_RemoveMapDataFromMap final
{
public:
	const class UMapMarkerActorComponent*         MarkerActorComponent;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_MapData_RemoveMapDataFromMap) == 0x000008, "Wrong alignment on GameSubsystem_MapData_RemoveMapDataFromMap");
static_assert(sizeof(GameSubsystem_MapData_RemoveMapDataFromMap) == 0x000008, "Wrong size on GameSubsystem_MapData_RemoveMapDataFromMap");
static_assert(offsetof(GameSubsystem_MapData_RemoveMapDataFromMap, MarkerActorComponent) == 0x000000, "Member 'GameSubsystem_MapData_RemoveMapDataFromMap::MarkerActorComponent' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_MapData.UpdateMapCalculateOffsetSettings
// 0x0040 (0x0040 - 0x0000)
struct GameSubsystem_MapData_UpdateMapCalculateOffsetSettings final
{
public:
	bool                                          bInCalculateOffset;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InMapDercetoActorPosition;                         // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             InMapOffsetActorTransform;                         // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_MapData_UpdateMapCalculateOffsetSettings) == 0x000010, "Wrong alignment on GameSubsystem_MapData_UpdateMapCalculateOffsetSettings");
static_assert(sizeof(GameSubsystem_MapData_UpdateMapCalculateOffsetSettings) == 0x000040, "Wrong size on GameSubsystem_MapData_UpdateMapCalculateOffsetSettings");
static_assert(offsetof(GameSubsystem_MapData_UpdateMapCalculateOffsetSettings, bInCalculateOffset) == 0x000000, "Member 'GameSubsystem_MapData_UpdateMapCalculateOffsetSettings::bInCalculateOffset' has a wrong offset!");
static_assert(offsetof(GameSubsystem_MapData_UpdateMapCalculateOffsetSettings, InMapDercetoActorPosition) == 0x000004, "Member 'GameSubsystem_MapData_UpdateMapCalculateOffsetSettings::InMapDercetoActorPosition' has a wrong offset!");
static_assert(offsetof(GameSubsystem_MapData_UpdateMapCalculateOffsetSettings, InMapOffsetActorTransform) == 0x000010, "Member 'GameSubsystem_MapData_UpdateMapCalculateOffsetSettings::InMapOffsetActorTransform' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_MapData.UpdateMapData
// 0x0008 (0x0008 - 0x0000)
struct GameSubsystem_MapData_UpdateMapData final
{
public:
	const class UMapMarkerActorComponent*         MarkerActorComponent;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_MapData_UpdateMapData) == 0x000008, "Wrong alignment on GameSubsystem_MapData_UpdateMapData");
static_assert(sizeof(GameSubsystem_MapData_UpdateMapData) == 0x000008, "Wrong size on GameSubsystem_MapData_UpdateMapData");
static_assert(offsetof(GameSubsystem_MapData_UpdateMapData, MarkerActorComponent) == 0x000000, "Member 'GameSubsystem_MapData_UpdateMapData::MarkerActorComponent' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_MapData.GetCurrentRoomVolume
// 0x0008 (0x0008 - 0x0000)
struct GameSubsystem_MapData_GetCurrentRoomVolume final
{
public:
	const class AMapTrackerVolume*                ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_MapData_GetCurrentRoomVolume) == 0x000008, "Wrong alignment on GameSubsystem_MapData_GetCurrentRoomVolume");
static_assert(sizeof(GameSubsystem_MapData_GetCurrentRoomVolume) == 0x000008, "Wrong size on GameSubsystem_MapData_GetCurrentRoomVolume");
static_assert(offsetof(GameSubsystem_MapData_GetCurrentRoomVolume, ReturnValue) == 0x000000, "Member 'GameSubsystem_MapData_GetCurrentRoomVolume::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_PlayState.GetPlayerCharacterType
// 0x0010 (0x0010 - 0x0000)
struct GameSubsystem_PlayState_GetPlayerCharacterType final
{
public:
	class UWorld*                                 WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerCharacterType                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameSubsystem_PlayState_GetPlayerCharacterType) == 0x000008, "Wrong alignment on GameSubsystem_PlayState_GetPlayerCharacterType");
static_assert(sizeof(GameSubsystem_PlayState_GetPlayerCharacterType) == 0x000010, "Wrong size on GameSubsystem_PlayState_GetPlayerCharacterType");
static_assert(offsetof(GameSubsystem_PlayState_GetPlayerCharacterType, WorldContextObject) == 0x000000, "Member 'GameSubsystem_PlayState_GetPlayerCharacterType::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameSubsystem_PlayState_GetPlayerCharacterType, PlayerIndex) == 0x000008, "Member 'GameSubsystem_PlayState_GetPlayerCharacterType::PlayerIndex' has a wrong offset!");
static_assert(offsetof(GameSubsystem_PlayState_GetPlayerCharacterType, ReturnValue) == 0x00000C, "Member 'GameSubsystem_PlayState_GetPlayerCharacterType::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.GameSubsystem_PlayState.CombatStateChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GameSubsystem_PlayState_CombatStateChanged__DelegateSignature final
{
public:
	bool                                          bNewIsInCombat;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_PlayState_CombatStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on GameSubsystem_PlayState_CombatStateChanged__DelegateSignature");
static_assert(sizeof(GameSubsystem_PlayState_CombatStateChanged__DelegateSignature) == 0x000001, "Wrong size on GameSubsystem_PlayState_CombatStateChanged__DelegateSignature");
static_assert(offsetof(GameSubsystem_PlayState_CombatStateChanged__DelegateSignature, bNewIsInCombat) == 0x000000, "Member 'GameSubsystem_PlayState_CombatStateChanged__DelegateSignature::bNewIsInCombat' has a wrong offset!");

// DelegateFunction ObsidianFox.GameSubsystem_PlayState.EnemyAggroStateChanged__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct GameSubsystem_PlayState_EnemyAggroStateChanged__DelegateSignature final
{
public:
	bool                                          bHasAggro;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCombat;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_PlayState_EnemyAggroStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on GameSubsystem_PlayState_EnemyAggroStateChanged__DelegateSignature");
static_assert(sizeof(GameSubsystem_PlayState_EnemyAggroStateChanged__DelegateSignature) == 0x000002, "Wrong size on GameSubsystem_PlayState_EnemyAggroStateChanged__DelegateSignature");
static_assert(offsetof(GameSubsystem_PlayState_EnemyAggroStateChanged__DelegateSignature, bHasAggro) == 0x000000, "Member 'GameSubsystem_PlayState_EnemyAggroStateChanged__DelegateSignature::bHasAggro' has a wrong offset!");
static_assert(offsetof(GameSubsystem_PlayState_EnemyAggroStateChanged__DelegateSignature, bInCombat) == 0x000001, "Member 'GameSubsystem_PlayState_EnemyAggroStateChanged__DelegateSignature::bInCombat' has a wrong offset!");

// DelegateFunction ObsidianFox.GameSubsystem_PlayState.GameMainStateChanged__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct GameSubsystem_PlayState_GameMainStateChanged__DelegateSignature final
{
public:
	EGameMainState                                OldGameState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMainState                                NewGameState;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_PlayState_GameMainStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on GameSubsystem_PlayState_GameMainStateChanged__DelegateSignature");
static_assert(sizeof(GameSubsystem_PlayState_GameMainStateChanged__DelegateSignature) == 0x000002, "Wrong size on GameSubsystem_PlayState_GameMainStateChanged__DelegateSignature");
static_assert(offsetof(GameSubsystem_PlayState_GameMainStateChanged__DelegateSignature, OldGameState) == 0x000000, "Member 'GameSubsystem_PlayState_GameMainStateChanged__DelegateSignature::OldGameState' has a wrong offset!");
static_assert(offsetof(GameSubsystem_PlayState_GameMainStateChanged__DelegateSignature, NewGameState) == 0x000001, "Member 'GameSubsystem_PlayState_GameMainStateChanged__DelegateSignature::NewGameState' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_PlayState.GetMainState
// 0x0001 (0x0001 - 0x0000)
struct GameSubsystem_PlayState_GetMainState final
{
public:
	EGameMainState                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_PlayState_GetMainState) == 0x000001, "Wrong alignment on GameSubsystem_PlayState_GetMainState");
static_assert(sizeof(GameSubsystem_PlayState_GetMainState) == 0x000001, "Wrong size on GameSubsystem_PlayState_GetMainState");
static_assert(offsetof(GameSubsystem_PlayState_GetMainState, ReturnValue) == 0x000000, "Member 'GameSubsystem_PlayState_GetMainState::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.GameSubsystem_PlayState.PlayerHealthStateChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GameSubsystem_PlayState_PlayerHealthStateChanged__DelegateSignature final
{
public:
	EPlayerHealthState                            NewHealthState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_PlayState_PlayerHealthStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on GameSubsystem_PlayState_PlayerHealthStateChanged__DelegateSignature");
static_assert(sizeof(GameSubsystem_PlayState_PlayerHealthStateChanged__DelegateSignature) == 0x000001, "Wrong size on GameSubsystem_PlayState_PlayerHealthStateChanged__DelegateSignature");
static_assert(offsetof(GameSubsystem_PlayState_PlayerHealthStateChanged__DelegateSignature, NewHealthState) == 0x000000, "Member 'GameSubsystem_PlayState_PlayerHealthStateChanged__DelegateSignature::NewHealthState' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_PlayState.PopMainState
// 0x0008 (0x0008 - 0x0000)
struct GameSubsystem_PlayState_PopMainState final
{
public:
	const class UObject*                          StateOwner;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_PlayState_PopMainState) == 0x000008, "Wrong alignment on GameSubsystem_PlayState_PopMainState");
static_assert(sizeof(GameSubsystem_PlayState_PopMainState) == 0x000008, "Wrong size on GameSubsystem_PlayState_PopMainState");
static_assert(offsetof(GameSubsystem_PlayState_PopMainState, StateOwner) == 0x000000, "Member 'GameSubsystem_PlayState_PopMainState::StateOwner' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_PlayState.PushMainState
// 0x0010 (0x0010 - 0x0000)
struct GameSubsystem_PlayState_PushMainState final
{
public:
	const class UObject*                          StateOwner;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMainState                                NewState;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameSubsystem_PlayState_PushMainState) == 0x000008, "Wrong alignment on GameSubsystem_PlayState_PushMainState");
static_assert(sizeof(GameSubsystem_PlayState_PushMainState) == 0x000010, "Wrong size on GameSubsystem_PlayState_PushMainState");
static_assert(offsetof(GameSubsystem_PlayState_PushMainState, StateOwner) == 0x000000, "Member 'GameSubsystem_PlayState_PushMainState::StateOwner' has a wrong offset!");
static_assert(offsetof(GameSubsystem_PlayState_PushMainState, NewState) == 0x000008, "Member 'GameSubsystem_PlayState_PushMainState::NewState' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_PlayState.UpdatePlayerHealthState
// 0x0008 (0x0008 - 0x0000)
struct GameSubsystem_PlayState_UpdatePlayerHealthState final
{
public:
	float                                         NewHealth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHealth;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_PlayState_UpdatePlayerHealthState) == 0x000004, "Wrong alignment on GameSubsystem_PlayState_UpdatePlayerHealthState");
static_assert(sizeof(GameSubsystem_PlayState_UpdatePlayerHealthState) == 0x000008, "Wrong size on GameSubsystem_PlayState_UpdatePlayerHealthState");
static_assert(offsetof(GameSubsystem_PlayState_UpdatePlayerHealthState, NewHealth) == 0x000000, "Member 'GameSubsystem_PlayState_UpdatePlayerHealthState::NewHealth' has a wrong offset!");
static_assert(offsetof(GameSubsystem_PlayState_UpdatePlayerHealthState, MaxHealth) == 0x000004, "Member 'GameSubsystem_PlayState_UpdatePlayerHealthState::MaxHealth' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_PlayState.GetIsInCombat
// 0x0001 (0x0001 - 0x0000)
struct GameSubsystem_PlayState_GetIsInCombat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_PlayState_GetIsInCombat) == 0x000001, "Wrong alignment on GameSubsystem_PlayState_GetIsInCombat");
static_assert(sizeof(GameSubsystem_PlayState_GetIsInCombat) == 0x000001, "Wrong size on GameSubsystem_PlayState_GetIsInCombat");
static_assert(offsetof(GameSubsystem_PlayState_GetIsInCombat, ReturnValue) == 0x000000, "Member 'GameSubsystem_PlayState_GetIsInCombat::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_PlayState.GetPlayerHealthState
// 0x0001 (0x0001 - 0x0000)
struct GameSubsystem_PlayState_GetPlayerHealthState final
{
public:
	EPlayerHealthState                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_PlayState_GetPlayerHealthState) == 0x000001, "Wrong alignment on GameSubsystem_PlayState_GetPlayerHealthState");
static_assert(sizeof(GameSubsystem_PlayState_GetPlayerHealthState) == 0x000001, "Wrong size on GameSubsystem_PlayState_GetPlayerHealthState");
static_assert(offsetof(GameSubsystem_PlayState_GetPlayerHealthState, ReturnValue) == 0x000000, "Member 'GameSubsystem_PlayState_GetPlayerHealthState::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_Talisman.GetCurrentTalismanCombination
// 0x0004 (0x0004 - 0x0000)
struct GameSubsystem_Talisman_GetCurrentTalismanCombination final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_Talisman_GetCurrentTalismanCombination) == 0x000004, "Wrong alignment on GameSubsystem_Talisman_GetCurrentTalismanCombination");
static_assert(sizeof(GameSubsystem_Talisman_GetCurrentTalismanCombination) == 0x000004, "Wrong size on GameSubsystem_Talisman_GetCurrentTalismanCombination");
static_assert(offsetof(GameSubsystem_Talisman_GetCurrentTalismanCombination, ReturnValue) == 0x000000, "Member 'GameSubsystem_Talisman_GetCurrentTalismanCombination::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_Talisman.SetActiveRing
// 0x0004 (0x0004 - 0x0000)
struct GameSubsystem_Talisman_SetActiveRing final
{
public:
	int32                                         NewActiveRing;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_Talisman_SetActiveRing) == 0x000004, "Wrong alignment on GameSubsystem_Talisman_SetActiveRing");
static_assert(sizeof(GameSubsystem_Talisman_SetActiveRing) == 0x000004, "Wrong size on GameSubsystem_Talisman_SetActiveRing");
static_assert(offsetof(GameSubsystem_Talisman_SetActiveRing, NewActiveRing) == 0x000000, "Member 'GameSubsystem_Talisman_SetActiveRing::NewActiveRing' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_Talisman.SetRing0Value
// 0x0004 (0x0004 - 0x0000)
struct GameSubsystem_Talisman_SetRing0Value final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_Talisman_SetRing0Value) == 0x000004, "Wrong alignment on GameSubsystem_Talisman_SetRing0Value");
static_assert(sizeof(GameSubsystem_Talisman_SetRing0Value) == 0x000004, "Wrong size on GameSubsystem_Talisman_SetRing0Value");
static_assert(offsetof(GameSubsystem_Talisman_SetRing0Value, Value) == 0x000000, "Member 'GameSubsystem_Talisman_SetRing0Value::Value' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_Talisman.SetRing1Value
// 0x0004 (0x0004 - 0x0000)
struct GameSubsystem_Talisman_SetRing1Value final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_Talisman_SetRing1Value) == 0x000004, "Wrong alignment on GameSubsystem_Talisman_SetRing1Value");
static_assert(sizeof(GameSubsystem_Talisman_SetRing1Value) == 0x000004, "Wrong size on GameSubsystem_Talisman_SetRing1Value");
static_assert(offsetof(GameSubsystem_Talisman_SetRing1Value, Value) == 0x000000, "Member 'GameSubsystem_Talisman_SetRing1Value::Value' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_Talisman.SetRing2Value
// 0x0004 (0x0004 - 0x0000)
struct GameSubsystem_Talisman_SetRing2Value final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_Talisman_SetRing2Value) == 0x000004, "Wrong alignment on GameSubsystem_Talisman_SetRing2Value");
static_assert(sizeof(GameSubsystem_Talisman_SetRing2Value) == 0x000004, "Wrong size on GameSubsystem_Talisman_SetRing2Value");
static_assert(offsetof(GameSubsystem_Talisman_SetRing2Value, Value) == 0x000000, "Member 'GameSubsystem_Talisman_SetRing2Value::Value' has a wrong offset!");

// DelegateFunction ObsidianFox.GameSubsystem_Talisman.TalismanCombinationDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct GameSubsystem_Talisman_TalismanCombinationDelegate__DelegateSignature final
{
public:
	int32                                         NewTalismanCombination;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_Talisman_TalismanCombinationDelegate__DelegateSignature) == 0x000004, "Wrong alignment on GameSubsystem_Talisman_TalismanCombinationDelegate__DelegateSignature");
static_assert(sizeof(GameSubsystem_Talisman_TalismanCombinationDelegate__DelegateSignature) == 0x000004, "Wrong size on GameSubsystem_Talisman_TalismanCombinationDelegate__DelegateSignature");
static_assert(offsetof(GameSubsystem_Talisman_TalismanCombinationDelegate__DelegateSignature, NewTalismanCombination) == 0x000000, "Member 'GameSubsystem_Talisman_TalismanCombinationDelegate__DelegateSignature::NewTalismanCombination' has a wrong offset!");

// DelegateFunction ObsidianFox.GameSubsystem_Talisman.TalismanNewActiveRingDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct GameSubsystem_Talisman_TalismanNewActiveRingDelegate__DelegateSignature final
{
public:
	int32                                         NewActiveRing;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_Talisman_TalismanNewActiveRingDelegate__DelegateSignature) == 0x000004, "Wrong alignment on GameSubsystem_Talisman_TalismanNewActiveRingDelegate__DelegateSignature");
static_assert(sizeof(GameSubsystem_Talisman_TalismanNewActiveRingDelegate__DelegateSignature) == 0x000004, "Wrong size on GameSubsystem_Talisman_TalismanNewActiveRingDelegate__DelegateSignature");
static_assert(offsetof(GameSubsystem_Talisman_TalismanNewActiveRingDelegate__DelegateSignature, NewActiveRing) == 0x000000, "Member 'GameSubsystem_Talisman_TalismanNewActiveRingDelegate__DelegateSignature::NewActiveRing' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_Talisman.GetActiveRing
// 0x0004 (0x0004 - 0x0000)
struct GameSubsystem_Talisman_GetActiveRing final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_Talisman_GetActiveRing) == 0x000004, "Wrong alignment on GameSubsystem_Talisman_GetActiveRing");
static_assert(sizeof(GameSubsystem_Talisman_GetActiveRing) == 0x000004, "Wrong size on GameSubsystem_Talisman_GetActiveRing");
static_assert(offsetof(GameSubsystem_Talisman_GetActiveRing, ReturnValue) == 0x000000, "Member 'GameSubsystem_Talisman_GetActiveRing::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_Talisman.GetRing0Value
// 0x0004 (0x0004 - 0x0000)
struct GameSubsystem_Talisman_GetRing0Value final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_Talisman_GetRing0Value) == 0x000004, "Wrong alignment on GameSubsystem_Talisman_GetRing0Value");
static_assert(sizeof(GameSubsystem_Talisman_GetRing0Value) == 0x000004, "Wrong size on GameSubsystem_Talisman_GetRing0Value");
static_assert(offsetof(GameSubsystem_Talisman_GetRing0Value, ReturnValue) == 0x000000, "Member 'GameSubsystem_Talisman_GetRing0Value::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_Talisman.GetRing1Value
// 0x0004 (0x0004 - 0x0000)
struct GameSubsystem_Talisman_GetRing1Value final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_Talisman_GetRing1Value) == 0x000004, "Wrong alignment on GameSubsystem_Talisman_GetRing1Value");
static_assert(sizeof(GameSubsystem_Talisman_GetRing1Value) == 0x000004, "Wrong size on GameSubsystem_Talisman_GetRing1Value");
static_assert(offsetof(GameSubsystem_Talisman_GetRing1Value, ReturnValue) == 0x000000, "Member 'GameSubsystem_Talisman_GetRing1Value::ReturnValue' has a wrong offset!");

// Function ObsidianFox.GameSubsystem_Talisman.GetRing2Value
// 0x0004 (0x0004 - 0x0000)
struct GameSubsystem_Talisman_GetRing2Value final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameSubsystem_Talisman_GetRing2Value) == 0x000004, "Wrong alignment on GameSubsystem_Talisman_GetRing2Value");
static_assert(sizeof(GameSubsystem_Talisman_GetRing2Value) == 0x000004, "Wrong size on GameSubsystem_Talisman_GetRing2Value");
static_assert(offsetof(GameSubsystem_Talisman_GetRing2Value, ReturnValue) == 0x000000, "Member 'GameSubsystem_Talisman_GetRing2Value::ReturnValue' has a wrong offset!");

// Function ObsidianFox.HandPosesAnimInterface.ApplyHandPose
// 0x0038 (0x0038 - 0x0000)
struct HandPosesAnimInterface_ApplyHandPose final
{
public:
	const class UObject*                          Instigator;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequenceBase>       HandPoseSequence;                                  // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HandPosesAnimInterface_ApplyHandPose) == 0x000008, "Wrong alignment on HandPosesAnimInterface_ApplyHandPose");
static_assert(sizeof(HandPosesAnimInterface_ApplyHandPose) == 0x000038, "Wrong size on HandPosesAnimInterface_ApplyHandPose");
static_assert(offsetof(HandPosesAnimInterface_ApplyHandPose, Instigator) == 0x000000, "Member 'HandPosesAnimInterface_ApplyHandPose::Instigator' has a wrong offset!");
static_assert(offsetof(HandPosesAnimInterface_ApplyHandPose, HandPoseSequence) == 0x000008, "Member 'HandPosesAnimInterface_ApplyHandPose::HandPoseSequence' has a wrong offset!");
static_assert(offsetof(HandPosesAnimInterface_ApplyHandPose, BoneName) == 0x000030, "Member 'HandPosesAnimInterface_ApplyHandPose::BoneName' has a wrong offset!");

// Function ObsidianFox.HandPosesAnimInterface.RemoveHandPose
// 0x0010 (0x0010 - 0x0000)
struct HandPosesAnimInterface_RemoveHandPose final
{
public:
	const class UObject*                          Instigator;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HandPosesAnimInterface_RemoveHandPose) == 0x000008, "Wrong alignment on HandPosesAnimInterface_RemoveHandPose");
static_assert(sizeof(HandPosesAnimInterface_RemoveHandPose) == 0x000010, "Wrong size on HandPosesAnimInterface_RemoveHandPose");
static_assert(offsetof(HandPosesAnimInterface_RemoveHandPose, Instigator) == 0x000000, "Member 'HandPosesAnimInterface_RemoveHandPose::Instigator' has a wrong offset!");
static_assert(offsetof(HandPosesAnimInterface_RemoveHandPose, BoneName) == 0x000008, "Member 'HandPosesAnimInterface_RemoveHandPose::BoneName' has a wrong offset!");

// Function ObsidianFox.HeavyHitReactionEvaluator.OnOwnerHealthChanged
// 0x0028 (0x0028 - 0x0000)
struct HeavyHitReactionEvaluator_OnOwnerHealthChanged final
{
public:
	float                                         NewCurrentHealth;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EventTags;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeavyHitReactionEvaluator_OnOwnerHealthChanged) == 0x000008, "Wrong alignment on HeavyHitReactionEvaluator_OnOwnerHealthChanged");
static_assert(sizeof(HeavyHitReactionEvaluator_OnOwnerHealthChanged) == 0x000028, "Wrong size on HeavyHitReactionEvaluator_OnOwnerHealthChanged");
static_assert(offsetof(HeavyHitReactionEvaluator_OnOwnerHealthChanged, NewCurrentHealth) == 0x000000, "Member 'HeavyHitReactionEvaluator_OnOwnerHealthChanged::NewCurrentHealth' has a wrong offset!");
static_assert(offsetof(HeavyHitReactionEvaluator_OnOwnerHealthChanged, DeltaValue) == 0x000004, "Member 'HeavyHitReactionEvaluator_OnOwnerHealthChanged::DeltaValue' has a wrong offset!");
static_assert(offsetof(HeavyHitReactionEvaluator_OnOwnerHealthChanged, EventTags) == 0x000008, "Member 'HeavyHitReactionEvaluator_OnOwnerHealthChanged::EventTags' has a wrong offset!");

// Function ObsidianFox.HeavyHitReactionEvaluator.ShouldPlayHeavyReaction
// 0x00F8 (0x00F8 - 0x0000)
struct HeavyHitReactionEvaluator_ShouldPlayHeavyReaction final
{
public:
	struct FHitReactionData                       HitReactionData;                                   // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	const class UObject*                          OptionalObject;                                    // 0x00E0(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimMontage*                     ReactionMontage;                                   // 0x00E8(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HeavyHitReactionEvaluator_ShouldPlayHeavyReaction) == 0x000008, "Wrong alignment on HeavyHitReactionEvaluator_ShouldPlayHeavyReaction");
static_assert(sizeof(HeavyHitReactionEvaluator_ShouldPlayHeavyReaction) == 0x0000F8, "Wrong size on HeavyHitReactionEvaluator_ShouldPlayHeavyReaction");
static_assert(offsetof(HeavyHitReactionEvaluator_ShouldPlayHeavyReaction, HitReactionData) == 0x000000, "Member 'HeavyHitReactionEvaluator_ShouldPlayHeavyReaction::HitReactionData' has a wrong offset!");
static_assert(offsetof(HeavyHitReactionEvaluator_ShouldPlayHeavyReaction, OptionalObject) == 0x0000E0, "Member 'HeavyHitReactionEvaluator_ShouldPlayHeavyReaction::OptionalObject' has a wrong offset!");
static_assert(offsetof(HeavyHitReactionEvaluator_ShouldPlayHeavyReaction, ReactionMontage) == 0x0000E8, "Member 'HeavyHitReactionEvaluator_ShouldPlayHeavyReaction::ReactionMontage' has a wrong offset!");
static_assert(offsetof(HeavyHitReactionEvaluator_ShouldPlayHeavyReaction, ReturnValue) == 0x0000F0, "Member 'HeavyHitReactionEvaluator_ShouldPlayHeavyReaction::ReturnValue' has a wrong offset!");

// Function ObsidianFox.HighlightItemPickupHud.SetBackKeyPromptVisibility
// 0x0001 (0x0001 - 0x0000)
struct HighlightItemPickupHud_SetBackKeyPromptVisibility final
{
public:
	ESlateVisibility                              NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HighlightItemPickupHud_SetBackKeyPromptVisibility) == 0x000001, "Wrong alignment on HighlightItemPickupHud_SetBackKeyPromptVisibility");
static_assert(sizeof(HighlightItemPickupHud_SetBackKeyPromptVisibility) == 0x000001, "Wrong size on HighlightItemPickupHud_SetBackKeyPromptVisibility");
static_assert(offsetof(HighlightItemPickupHud_SetBackKeyPromptVisibility, NewVisibility) == 0x000000, "Member 'HighlightItemPickupHud_SetBackKeyPromptVisibility::NewVisibility' has a wrong offset!");

// Function ObsidianFox.HighlightItemPickupHud.SetInvestigationKeyWidgetVisibility
// 0x0001 (0x0001 - 0x0000)
struct HighlightItemPickupHud_SetInvestigationKeyWidgetVisibility final
{
public:
	ESlateVisibility                              NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HighlightItemPickupHud_SetInvestigationKeyWidgetVisibility) == 0x000001, "Wrong alignment on HighlightItemPickupHud_SetInvestigationKeyWidgetVisibility");
static_assert(sizeof(HighlightItemPickupHud_SetInvestigationKeyWidgetVisibility) == 0x000001, "Wrong size on HighlightItemPickupHud_SetInvestigationKeyWidgetVisibility");
static_assert(offsetof(HighlightItemPickupHud_SetInvestigationKeyWidgetVisibility, NewVisibility) == 0x000000, "Member 'HighlightItemPickupHud_SetInvestigationKeyWidgetVisibility::NewVisibility' has a wrong offset!");

// Function ObsidianFox.HighlightItemPickupHud.UpdateItemFrameAndText
// 0x0001 (0x0001 - 0x0000)
struct HighlightItemPickupHud_UpdateItemFrameAndText final
{
public:
	EItemType                                     ItemType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HighlightItemPickupHud_UpdateItemFrameAndText) == 0x000001, "Wrong alignment on HighlightItemPickupHud_UpdateItemFrameAndText");
static_assert(sizeof(HighlightItemPickupHud_UpdateItemFrameAndText) == 0x000001, "Wrong size on HighlightItemPickupHud_UpdateItemFrameAndText");
static_assert(offsetof(HighlightItemPickupHud_UpdateItemFrameAndText, ItemType) == 0x000000, "Member 'HighlightItemPickupHud_UpdateItemFrameAndText::ItemType' has a wrong offset!");

// Function ObsidianFox.HitReactionComponent.EndHitReaction
// 0x0003 (0x0003 - 0x0000)
struct HitReactionComponent_EndHitReaction final
{
public:
	bool                                          bFailed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasInterrupted;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHitReactionType                              HitReactionType;                                   // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitReactionComponent_EndHitReaction) == 0x000001, "Wrong alignment on HitReactionComponent_EndHitReaction");
static_assert(sizeof(HitReactionComponent_EndHitReaction) == 0x000003, "Wrong size on HitReactionComponent_EndHitReaction");
static_assert(offsetof(HitReactionComponent_EndHitReaction, bFailed) == 0x000000, "Member 'HitReactionComponent_EndHitReaction::bFailed' has a wrong offset!");
static_assert(offsetof(HitReactionComponent_EndHitReaction, bWasInterrupted) == 0x000001, "Member 'HitReactionComponent_EndHitReaction::bWasInterrupted' has a wrong offset!");
static_assert(offsetof(HitReactionComponent_EndHitReaction, HitReactionType) == 0x000002, "Member 'HitReactionComponent_EndHitReaction::HitReactionType' has a wrong offset!");

// Function ObsidianFox.HitReactionComponent.OnAnimationBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct HitReactionComponent_OnAnimationBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HitReactionComponent_OnAnimationBlendingOut) == 0x000008, "Wrong alignment on HitReactionComponent_OnAnimationBlendingOut");
static_assert(sizeof(HitReactionComponent_OnAnimationBlendingOut) == 0x000010, "Wrong size on HitReactionComponent_OnAnimationBlendingOut");
static_assert(offsetof(HitReactionComponent_OnAnimationBlendingOut, Montage) == 0x000000, "Member 'HitReactionComponent_OnAnimationBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(HitReactionComponent_OnAnimationBlendingOut, bInterrupted) == 0x000008, "Member 'HitReactionComponent_OnAnimationBlendingOut::bInterrupted' has a wrong offset!");

// Function ObsidianFox.HitReactionComponent.OnHeavyReaction
// 0x0100 (0x0100 - 0x0000)
struct HitReactionComponent_OnHeavyReaction final
{
public:
	struct FHitReactionData                       HitReactionData;                                   // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AObsidianFoxCharacter*                  Character;                                         // 0x00E0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FReactionMontageData                   MontageData;                                       // 0x00E8(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitReactionComponent_OnHeavyReaction) == 0x000008, "Wrong alignment on HitReactionComponent_OnHeavyReaction");
static_assert(sizeof(HitReactionComponent_OnHeavyReaction) == 0x000100, "Wrong size on HitReactionComponent_OnHeavyReaction");
static_assert(offsetof(HitReactionComponent_OnHeavyReaction, HitReactionData) == 0x000000, "Member 'HitReactionComponent_OnHeavyReaction::HitReactionData' has a wrong offset!");
static_assert(offsetof(HitReactionComponent_OnHeavyReaction, Character) == 0x0000E0, "Member 'HitReactionComponent_OnHeavyReaction::Character' has a wrong offset!");
static_assert(offsetof(HitReactionComponent_OnHeavyReaction, MontageData) == 0x0000E8, "Member 'HitReactionComponent_OnHeavyReaction::MontageData' has a wrong offset!");

// DelegateFunction ObsidianFox.HitReactionComponent.OnHitreactionBegin__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct HitReactionComponent_OnHitreactionBegin__DelegateSignature final
{
public:
	EHitReactionType                              HitReactionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitReactionComponent_OnHitreactionBegin__DelegateSignature) == 0x000001, "Wrong alignment on HitReactionComponent_OnHitreactionBegin__DelegateSignature");
static_assert(sizeof(HitReactionComponent_OnHitreactionBegin__DelegateSignature) == 0x000001, "Wrong size on HitReactionComponent_OnHitreactionBegin__DelegateSignature");
static_assert(offsetof(HitReactionComponent_OnHitreactionBegin__DelegateSignature, HitReactionType) == 0x000000, "Member 'HitReactionComponent_OnHitreactionBegin__DelegateSignature::HitReactionType' has a wrong offset!");

// DelegateFunction ObsidianFox.HitReactionComponent.OnHitreactionDone__DelegateSignature
// 0x0003 (0x0003 - 0x0000)
struct HitReactionComponent_OnHitreactionDone__DelegateSignature final
{
public:
	EHitReactionType                              HitReactionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFailed;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasInterrupted;                                   // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitReactionComponent_OnHitreactionDone__DelegateSignature) == 0x000001, "Wrong alignment on HitReactionComponent_OnHitreactionDone__DelegateSignature");
static_assert(sizeof(HitReactionComponent_OnHitreactionDone__DelegateSignature) == 0x000003, "Wrong size on HitReactionComponent_OnHitreactionDone__DelegateSignature");
static_assert(offsetof(HitReactionComponent_OnHitreactionDone__DelegateSignature, HitReactionType) == 0x000000, "Member 'HitReactionComponent_OnHitreactionDone__DelegateSignature::HitReactionType' has a wrong offset!");
static_assert(offsetof(HitReactionComponent_OnHitreactionDone__DelegateSignature, bFailed) == 0x000001, "Member 'HitReactionComponent_OnHitreactionDone__DelegateSignature::bFailed' has a wrong offset!");
static_assert(offsetof(HitReactionComponent_OnHitreactionDone__DelegateSignature, bWasInterrupted) == 0x000002, "Member 'HitReactionComponent_OnHitreactionDone__DelegateSignature::bWasInterrupted' has a wrong offset!");

// Function ObsidianFox.HitReactionComponent.OnLightReaction
// 0x0100 (0x0100 - 0x0000)
struct HitReactionComponent_OnLightReaction final
{
public:
	struct FHitReactionData                       HitReactionData;                                   // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AObsidianFoxCharacter*                  Character;                                         // 0x00E0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FReactionMontageData                   MontageData;                                       // 0x00E8(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitReactionComponent_OnLightReaction) == 0x000008, "Wrong alignment on HitReactionComponent_OnLightReaction");
static_assert(sizeof(HitReactionComponent_OnLightReaction) == 0x000100, "Wrong size on HitReactionComponent_OnLightReaction");
static_assert(offsetof(HitReactionComponent_OnLightReaction, HitReactionData) == 0x000000, "Member 'HitReactionComponent_OnLightReaction::HitReactionData' has a wrong offset!");
static_assert(offsetof(HitReactionComponent_OnLightReaction, Character) == 0x0000E0, "Member 'HitReactionComponent_OnLightReaction::Character' has a wrong offset!");
static_assert(offsetof(HitReactionComponent_OnLightReaction, MontageData) == 0x0000E8, "Member 'HitReactionComponent_OnLightReaction::MontageData' has a wrong offset!");

// Function ObsidianFox.HitReactionComponent.OnMediumReaction
// 0x0100 (0x0100 - 0x0000)
struct HitReactionComponent_OnMediumReaction final
{
public:
	struct FHitReactionData                       HitReactionData;                                   // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AObsidianFoxCharacter*                  Character;                                         // 0x00E0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FReactionMontageData                   MontageData;                                       // 0x00E8(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitReactionComponent_OnMediumReaction) == 0x000008, "Wrong alignment on HitReactionComponent_OnMediumReaction");
static_assert(sizeof(HitReactionComponent_OnMediumReaction) == 0x000100, "Wrong size on HitReactionComponent_OnMediumReaction");
static_assert(offsetof(HitReactionComponent_OnMediumReaction, HitReactionData) == 0x000000, "Member 'HitReactionComponent_OnMediumReaction::HitReactionData' has a wrong offset!");
static_assert(offsetof(HitReactionComponent_OnMediumReaction, Character) == 0x0000E0, "Member 'HitReactionComponent_OnMediumReaction::Character' has a wrong offset!");
static_assert(offsetof(HitReactionComponent_OnMediumReaction, MontageData) == 0x0000E8, "Member 'HitReactionComponent_OnMediumReaction::MontageData' has a wrong offset!");

// Function ObsidianFox.HittableInterface.WeaponHit
// 0x00C0 (0x00C0 - 0x0000)
struct HittableInterface_WeaponHit final
{
public:
	class AActor*                                 Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EventTag;                                          // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEventData                     Payload;                                           // 0x0010(0x00B0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HittableInterface_WeaponHit) == 0x000008, "Wrong alignment on HittableInterface_WeaponHit");
static_assert(sizeof(HittableInterface_WeaponHit) == 0x0000C0, "Wrong size on HittableInterface_WeaponHit");
static_assert(offsetof(HittableInterface_WeaponHit, Weapon) == 0x000000, "Member 'HittableInterface_WeaponHit::Weapon' has a wrong offset!");
static_assert(offsetof(HittableInterface_WeaponHit, EventTag) == 0x000008, "Member 'HittableInterface_WeaponHit::EventTag' has a wrong offset!");
static_assert(offsetof(HittableInterface_WeaponHit, Payload) == 0x000010, "Member 'HittableInterface_WeaponHit::Payload' has a wrong offset!");

// Function ObsidianFox.HomeRangeComponent.OnHomeRangeOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct HomeRangeComponent_OnHomeRangeOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeRangeComponent_OnHomeRangeOverlapBegin) == 0x000008, "Wrong alignment on HomeRangeComponent_OnHomeRangeOverlapBegin");
static_assert(sizeof(HomeRangeComponent_OnHomeRangeOverlapBegin) == 0x000010, "Wrong size on HomeRangeComponent_OnHomeRangeOverlapBegin");
static_assert(offsetof(HomeRangeComponent_OnHomeRangeOverlapBegin, OverlappedActor) == 0x000000, "Member 'HomeRangeComponent_OnHomeRangeOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(HomeRangeComponent_OnHomeRangeOverlapBegin, OtherActor) == 0x000008, "Member 'HomeRangeComponent_OnHomeRangeOverlapBegin::OtherActor' has a wrong offset!");

// Function ObsidianFox.HomeRangeComponent.OnHomeRangeOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct HomeRangeComponent_OnHomeRangeOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeRangeComponent_OnHomeRangeOverlapEnd) == 0x000008, "Wrong alignment on HomeRangeComponent_OnHomeRangeOverlapEnd");
static_assert(sizeof(HomeRangeComponent_OnHomeRangeOverlapEnd) == 0x000010, "Wrong size on HomeRangeComponent_OnHomeRangeOverlapEnd");
static_assert(offsetof(HomeRangeComponent_OnHomeRangeOverlapEnd, OverlappedActor) == 0x000000, "Member 'HomeRangeComponent_OnHomeRangeOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(HomeRangeComponent_OnHomeRangeOverlapEnd, OtherActor) == 0x000008, "Member 'HomeRangeComponent_OnHomeRangeOverlapEnd::OtherActor' has a wrong offset!");

// Function ObsidianFox.ImpassableTerrainDetectorComponent.OnCharacterPossessed
// 0x0008 (0x0008 - 0x0000)
struct ImpassableTerrainDetectorComponent_OnCharacterPossessed final
{
public:
	const class AOFPlayerCharacter*               Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImpassableTerrainDetectorComponent_OnCharacterPossessed) == 0x000008, "Wrong alignment on ImpassableTerrainDetectorComponent_OnCharacterPossessed");
static_assert(sizeof(ImpassableTerrainDetectorComponent_OnCharacterPossessed) == 0x000008, "Wrong size on ImpassableTerrainDetectorComponent_OnCharacterPossessed");
static_assert(offsetof(ImpassableTerrainDetectorComponent_OnCharacterPossessed, Character) == 0x000000, "Member 'ImpassableTerrainDetectorComponent_OnCharacterPossessed::Character' has a wrong offset!");

// Function ObsidianFox.ImpassableTerrainDetectorComponent.OnColliderHit
// 0x00B0 (0x00B0 - 0x0000)
struct ImpassableTerrainDetectorComponent_OnColliderHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ImpassableTerrainDetectorComponent_OnColliderHit) == 0x000008, "Wrong alignment on ImpassableTerrainDetectorComponent_OnColliderHit");
static_assert(sizeof(ImpassableTerrainDetectorComponent_OnColliderHit) == 0x0000B0, "Wrong size on ImpassableTerrainDetectorComponent_OnColliderHit");
static_assert(offsetof(ImpassableTerrainDetectorComponent_OnColliderHit, HitComponent) == 0x000000, "Member 'ImpassableTerrainDetectorComponent_OnColliderHit::HitComponent' has a wrong offset!");
static_assert(offsetof(ImpassableTerrainDetectorComponent_OnColliderHit, OtherActor) == 0x000008, "Member 'ImpassableTerrainDetectorComponent_OnColliderHit::OtherActor' has a wrong offset!");
static_assert(offsetof(ImpassableTerrainDetectorComponent_OnColliderHit, OtherComp) == 0x000010, "Member 'ImpassableTerrainDetectorComponent_OnColliderHit::OtherComp' has a wrong offset!");
static_assert(offsetof(ImpassableTerrainDetectorComponent_OnColliderHit, NormalImpulse) == 0x000018, "Member 'ImpassableTerrainDetectorComponent_OnColliderHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(ImpassableTerrainDetectorComponent_OnColliderHit, Hit) == 0x000024, "Member 'ImpassableTerrainDetectorComponent_OnColliderHit::Hit' has a wrong offset!");

// Function ObsidianFox.WaterLevelComponent.BlueprintBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct WaterLevelComponent_BlueprintBeginOverlap final
{
public:
	const class AWaterLevelTriggerVolume*         WaterLevelVolume;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UWaterLevelTriggerBoxComponent*   TriggerComponent;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaterLevelComponent_BlueprintBeginOverlap) == 0x000008, "Wrong alignment on WaterLevelComponent_BlueprintBeginOverlap");
static_assert(sizeof(WaterLevelComponent_BlueprintBeginOverlap) == 0x000010, "Wrong size on WaterLevelComponent_BlueprintBeginOverlap");
static_assert(offsetof(WaterLevelComponent_BlueprintBeginOverlap, WaterLevelVolume) == 0x000000, "Member 'WaterLevelComponent_BlueprintBeginOverlap::WaterLevelVolume' has a wrong offset!");
static_assert(offsetof(WaterLevelComponent_BlueprintBeginOverlap, TriggerComponent) == 0x000008, "Member 'WaterLevelComponent_BlueprintBeginOverlap::TriggerComponent' has a wrong offset!");

// Function ObsidianFox.WaterLevelComponent.BlueprintEndOverlapAny
// 0x0010 (0x0010 - 0x0000)
struct WaterLevelComponent_BlueprintEndOverlapAny final
{
public:
	const class AWaterLevelTriggerVolume*         WaterLevelVolume;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UWaterLevelTriggerBoxComponent*   TriggerComponent;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaterLevelComponent_BlueprintEndOverlapAny) == 0x000008, "Wrong alignment on WaterLevelComponent_BlueprintEndOverlapAny");
static_assert(sizeof(WaterLevelComponent_BlueprintEndOverlapAny) == 0x000010, "Wrong size on WaterLevelComponent_BlueprintEndOverlapAny");
static_assert(offsetof(WaterLevelComponent_BlueprintEndOverlapAny, WaterLevelVolume) == 0x000000, "Member 'WaterLevelComponent_BlueprintEndOverlapAny::WaterLevelVolume' has a wrong offset!");
static_assert(offsetof(WaterLevelComponent_BlueprintEndOverlapAny, TriggerComponent) == 0x000008, "Member 'WaterLevelComponent_BlueprintEndOverlapAny::TriggerComponent' has a wrong offset!");

// Function ObsidianFox.WaterLevelComponent.BlueprintEndOverlapCurrent
// 0x0010 (0x0010 - 0x0000)
struct WaterLevelComponent_BlueprintEndOverlapCurrent final
{
public:
	const class AWaterLevelTriggerVolume*         WaterLevelVolume;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UWaterLevelTriggerBoxComponent*   TriggerComponent;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaterLevelComponent_BlueprintEndOverlapCurrent) == 0x000008, "Wrong alignment on WaterLevelComponent_BlueprintEndOverlapCurrent");
static_assert(sizeof(WaterLevelComponent_BlueprintEndOverlapCurrent) == 0x000010, "Wrong size on WaterLevelComponent_BlueprintEndOverlapCurrent");
static_assert(offsetof(WaterLevelComponent_BlueprintEndOverlapCurrent, WaterLevelVolume) == 0x000000, "Member 'WaterLevelComponent_BlueprintEndOverlapCurrent::WaterLevelVolume' has a wrong offset!");
static_assert(offsetof(WaterLevelComponent_BlueprintEndOverlapCurrent, TriggerComponent) == 0x000008, "Member 'WaterLevelComponent_BlueprintEndOverlapCurrent::TriggerComponent' has a wrong offset!");

// Function ObsidianFox.InGameUIWidget_Combat.OnCharacterAim
// 0x0001 (0x0001 - 0x0000)
struct InGameUIWidget_Combat_OnCharacterAim final
{
public:
	bool                                          bIsAiming;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameUIWidget_Combat_OnCharacterAim) == 0x000001, "Wrong alignment on InGameUIWidget_Combat_OnCharacterAim");
static_assert(sizeof(InGameUIWidget_Combat_OnCharacterAim) == 0x000001, "Wrong size on InGameUIWidget_Combat_OnCharacterAim");
static_assert(offsetof(InGameUIWidget_Combat_OnCharacterAim, bIsAiming) == 0x000000, "Member 'InGameUIWidget_Combat_OnCharacterAim::bIsAiming' has a wrong offset!");

// Function ObsidianFox.InGameUIWidget_Combat.OnCombatStateChanged
// 0x0001 (0x0001 - 0x0000)
struct InGameUIWidget_Combat_OnCombatStateChanged final
{
public:
	bool                                          bNewIsInCombat;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameUIWidget_Combat_OnCombatStateChanged) == 0x000001, "Wrong alignment on InGameUIWidget_Combat_OnCombatStateChanged");
static_assert(sizeof(InGameUIWidget_Combat_OnCombatStateChanged) == 0x000001, "Wrong size on InGameUIWidget_Combat_OnCombatStateChanged");
static_assert(offsetof(InGameUIWidget_Combat_OnCombatStateChanged, bNewIsInCombat) == 0x000000, "Member 'InGameUIWidget_Combat_OnCombatStateChanged::bNewIsInCombat' has a wrong offset!");

// Function ObsidianFox.InGameUIWidget_Combat.OnHealthChanged
// 0x0028 (0x0028 - 0x0000)
struct InGameUIWidget_Combat_OnHealthChanged final
{
public:
	float                                         NewCurrentHealth;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EventTags;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameUIWidget_Combat_OnHealthChanged) == 0x000008, "Wrong alignment on InGameUIWidget_Combat_OnHealthChanged");
static_assert(sizeof(InGameUIWidget_Combat_OnHealthChanged) == 0x000028, "Wrong size on InGameUIWidget_Combat_OnHealthChanged");
static_assert(offsetof(InGameUIWidget_Combat_OnHealthChanged, NewCurrentHealth) == 0x000000, "Member 'InGameUIWidget_Combat_OnHealthChanged::NewCurrentHealth' has a wrong offset!");
static_assert(offsetof(InGameUIWidget_Combat_OnHealthChanged, DeltaValue) == 0x000004, "Member 'InGameUIWidget_Combat_OnHealthChanged::DeltaValue' has a wrong offset!");
static_assert(offsetof(InGameUIWidget_Combat_OnHealthChanged, EventTags) == 0x000008, "Member 'InGameUIWidget_Combat_OnHealthChanged::EventTags' has a wrong offset!");

// Function ObsidianFox.InGameUIWidget_Combat.OnItemIncrement
// 0x00E0 (0x00E0 - 0x0000)
struct InGameUIWidget_Combat_OnItemIncrement final
{
public:
	const class UItemData*                        ItemData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemDisplayInfo                       ItemDisplayInfo;                                   // 0x0008(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x00D8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InGameUIWidget_Combat_OnItemIncrement) == 0x000008, "Wrong alignment on InGameUIWidget_Combat_OnItemIncrement");
static_assert(sizeof(InGameUIWidget_Combat_OnItemIncrement) == 0x0000E0, "Wrong size on InGameUIWidget_Combat_OnItemIncrement");
static_assert(offsetof(InGameUIWidget_Combat_OnItemIncrement, ItemData) == 0x000000, "Member 'InGameUIWidget_Combat_OnItemIncrement::ItemData' has a wrong offset!");
static_assert(offsetof(InGameUIWidget_Combat_OnItemIncrement, ItemDisplayInfo) == 0x000008, "Member 'InGameUIWidget_Combat_OnItemIncrement::ItemDisplayInfo' has a wrong offset!");
static_assert(offsetof(InGameUIWidget_Combat_OnItemIncrement, Amount) == 0x0000D8, "Member 'InGameUIWidget_Combat_OnItemIncrement::Amount' has a wrong offset!");

// Function ObsidianFox.InGameUIWidget_Combat.OnPlayerEquipmentUpdated
// 0x0020 (0x0020 - 0x0000)
struct InGameUIWidget_Combat_OnPlayerEquipmentUpdated final
{
public:
	struct FWeaponInfo                            EquippedWeapon;                                    // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponInfo                            UnequippedWeapon;                                  // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameUIWidget_Combat_OnPlayerEquipmentUpdated) == 0x000008, "Wrong alignment on InGameUIWidget_Combat_OnPlayerEquipmentUpdated");
static_assert(sizeof(InGameUIWidget_Combat_OnPlayerEquipmentUpdated) == 0x000020, "Wrong size on InGameUIWidget_Combat_OnPlayerEquipmentUpdated");
static_assert(offsetof(InGameUIWidget_Combat_OnPlayerEquipmentUpdated, EquippedWeapon) == 0x000000, "Member 'InGameUIWidget_Combat_OnPlayerEquipmentUpdated::EquippedWeapon' has a wrong offset!");
static_assert(offsetof(InGameUIWidget_Combat_OnPlayerEquipmentUpdated, UnequippedWeapon) == 0x000010, "Member 'InGameUIWidget_Combat_OnPlayerEquipmentUpdated::UnequippedWeapon' has a wrong offset!");

// Function ObsidianFox.InGameUIWidget_Combat.TryingToPickUpMaxStackItemHandler
// 0x0008 (0x0008 - 0x0000)
struct InGameUIWidget_Combat_TryingToPickUpMaxStackItemHandler final
{
public:
	const class UItemData*                        ItemData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameUIWidget_Combat_TryingToPickUpMaxStackItemHandler) == 0x000008, "Wrong alignment on InGameUIWidget_Combat_TryingToPickUpMaxStackItemHandler");
static_assert(sizeof(InGameUIWidget_Combat_TryingToPickUpMaxStackItemHandler) == 0x000008, "Wrong size on InGameUIWidget_Combat_TryingToPickUpMaxStackItemHandler");
static_assert(offsetof(InGameUIWidget_Combat_TryingToPickUpMaxStackItemHandler, ItemData) == 0x000000, "Member 'InGameUIWidget_Combat_TryingToPickUpMaxStackItemHandler::ItemData' has a wrong offset!");

// Function ObsidianFox.InGameUIWidget_Combat.WeaponBeginAttack
// 0x0008 (0x0008 - 0x0000)
struct InGameUIWidget_Combat_WeaponBeginAttack final
{
public:
	struct FGameplayTag                           AttackEvent;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameUIWidget_Combat_WeaponBeginAttack) == 0x000004, "Wrong alignment on InGameUIWidget_Combat_WeaponBeginAttack");
static_assert(sizeof(InGameUIWidget_Combat_WeaponBeginAttack) == 0x000008, "Wrong size on InGameUIWidget_Combat_WeaponBeginAttack");
static_assert(offsetof(InGameUIWidget_Combat_WeaponBeginAttack, AttackEvent) == 0x000000, "Member 'InGameUIWidget_Combat_WeaponBeginAttack::AttackEvent' has a wrong offset!");

// Function ObsidianFox.InGameUIWidget_HealthBar.OnHealthChanged
// 0x0028 (0x0028 - 0x0000)
struct InGameUIWidget_HealthBar_OnHealthChanged final
{
public:
	float                                         NewCurrentHealth;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EventTags;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameUIWidget_HealthBar_OnHealthChanged) == 0x000008, "Wrong alignment on InGameUIWidget_HealthBar_OnHealthChanged");
static_assert(sizeof(InGameUIWidget_HealthBar_OnHealthChanged) == 0x000028, "Wrong size on InGameUIWidget_HealthBar_OnHealthChanged");
static_assert(offsetof(InGameUIWidget_HealthBar_OnHealthChanged, NewCurrentHealth) == 0x000000, "Member 'InGameUIWidget_HealthBar_OnHealthChanged::NewCurrentHealth' has a wrong offset!");
static_assert(offsetof(InGameUIWidget_HealthBar_OnHealthChanged, DeltaValue) == 0x000004, "Member 'InGameUIWidget_HealthBar_OnHealthChanged::DeltaValue' has a wrong offset!");
static_assert(offsetof(InGameUIWidget_HealthBar_OnHealthChanged, EventTags) == 0x000008, "Member 'InGameUIWidget_HealthBar_OnHealthChanged::EventTags' has a wrong offset!");

// Function ObsidianFox.InteractInfoTextHud.OnItemAddedOrRemoved
// 0x0008 (0x0008 - 0x0000)
struct InteractInfoTextHud_OnItemAddedOrRemoved final
{
public:
	const class UItemData*                        ItemData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractInfoTextHud_OnItemAddedOrRemoved) == 0x000008, "Wrong alignment on InteractInfoTextHud_OnItemAddedOrRemoved");
static_assert(sizeof(InteractInfoTextHud_OnItemAddedOrRemoved) == 0x000008, "Wrong size on InteractInfoTextHud_OnItemAddedOrRemoved");
static_assert(offsetof(InteractInfoTextHud_OnItemAddedOrRemoved, ItemData) == 0x000000, "Member 'InteractInfoTextHud_OnItemAddedOrRemoved::ItemData' has a wrong offset!");

// Function ObsidianFox.InteractInfoTextHud.OnItemLookedAt
// 0x0028 (0x0028 - 0x0000)
struct InteractInfoTextHud_OnItemLookedAt final
{
public:
	TSoftObjectPtr<class UItemData>               ItemData;                                          // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractInfoTextHud_OnItemLookedAt) == 0x000008, "Wrong alignment on InteractInfoTextHud_OnItemLookedAt");
static_assert(sizeof(InteractInfoTextHud_OnItemLookedAt) == 0x000028, "Wrong size on InteractInfoTextHud_OnItemLookedAt");
static_assert(offsetof(InteractInfoTextHud_OnItemLookedAt, ItemData) == 0x000000, "Member 'InteractInfoTextHud_OnItemLookedAt::ItemData' has a wrong offset!");

// Function ObsidianFox.InteractInfoTextHud.OnObjectiveCompleted
// 0x0020 (0x0020 - 0x0000)
struct InteractInfoTextHud_OnObjectiveCompleted final
{
public:
	EObjectiveParts                               CompletedPart;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ObjectiveText;                                     // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractInfoTextHud_OnObjectiveCompleted) == 0x000008, "Wrong alignment on InteractInfoTextHud_OnObjectiveCompleted");
static_assert(sizeof(InteractInfoTextHud_OnObjectiveCompleted) == 0x000020, "Wrong size on InteractInfoTextHud_OnObjectiveCompleted");
static_assert(offsetof(InteractInfoTextHud_OnObjectiveCompleted, CompletedPart) == 0x000000, "Member 'InteractInfoTextHud_OnObjectiveCompleted::CompletedPart' has a wrong offset!");
static_assert(offsetof(InteractInfoTextHud_OnObjectiveCompleted, ObjectiveText) == 0x000008, "Member 'InteractInfoTextHud_OnObjectiveCompleted::ObjectiveText' has a wrong offset!");

// Function ObsidianFox.InteractInfoTextHud.OnObjectiveUpdate
// 0x0068 (0x0068 - 0x0000)
struct InteractInfoTextHud_OnObjectiveUpdate final
{
public:
	const class UObjectivesData*                  ObjectiveData;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FObjectiveInfo                         ObjectiveInfo;                                     // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EObjectiveParts                               OldPart;                                           // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectiveParts                               NewPart;                                           // 0x0061(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractInfoTextHud_OnObjectiveUpdate) == 0x000008, "Wrong alignment on InteractInfoTextHud_OnObjectiveUpdate");
static_assert(sizeof(InteractInfoTextHud_OnObjectiveUpdate) == 0x000068, "Wrong size on InteractInfoTextHud_OnObjectiveUpdate");
static_assert(offsetof(InteractInfoTextHud_OnObjectiveUpdate, ObjectiveData) == 0x000000, "Member 'InteractInfoTextHud_OnObjectiveUpdate::ObjectiveData' has a wrong offset!");
static_assert(offsetof(InteractInfoTextHud_OnObjectiveUpdate, ObjectiveInfo) == 0x000008, "Member 'InteractInfoTextHud_OnObjectiveUpdate::ObjectiveInfo' has a wrong offset!");
static_assert(offsetof(InteractInfoTextHud_OnObjectiveUpdate, OldPart) == 0x000060, "Member 'InteractInfoTextHud_OnObjectiveUpdate::OldPart' has a wrong offset!");
static_assert(offsetof(InteractInfoTextHud_OnObjectiveUpdate, NewPart) == 0x000061, "Member 'InteractInfoTextHud_OnObjectiveUpdate::NewPart' has a wrong offset!");

// Function ObsidianFox.InteractInfoTextHud.OnSubObjectiveCompletedHandler
// 0x0068 (0x0068 - 0x0000)
struct InteractInfoTextHud_OnSubObjectiveCompletedHandler final
{
public:
	const class UObjectivesData*                  ObjectivesData;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FObjectiveInfo                         ObjectiveInfo;                                     // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EObjectiveParts                               Part;                                              // 0x0060(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractInfoTextHud_OnSubObjectiveCompletedHandler) == 0x000008, "Wrong alignment on InteractInfoTextHud_OnSubObjectiveCompletedHandler");
static_assert(sizeof(InteractInfoTextHud_OnSubObjectiveCompletedHandler) == 0x000068, "Wrong size on InteractInfoTextHud_OnSubObjectiveCompletedHandler");
static_assert(offsetof(InteractInfoTextHud_OnSubObjectiveCompletedHandler, ObjectivesData) == 0x000000, "Member 'InteractInfoTextHud_OnSubObjectiveCompletedHandler::ObjectivesData' has a wrong offset!");
static_assert(offsetof(InteractInfoTextHud_OnSubObjectiveCompletedHandler, ObjectiveInfo) == 0x000008, "Member 'InteractInfoTextHud_OnSubObjectiveCompletedHandler::ObjectiveInfo' has a wrong offset!");
static_assert(offsetof(InteractInfoTextHud_OnSubObjectiveCompletedHandler, Part) == 0x000060, "Member 'InteractInfoTextHud_OnSubObjectiveCompletedHandler::Part' has a wrong offset!");

// Function ObsidianFox.InteractInfoTextHud.OnSubObjectiveStartedHandler
// 0x0068 (0x0068 - 0x0000)
struct InteractInfoTextHud_OnSubObjectiveStartedHandler final
{
public:
	const class UObjectivesData*                  ObjectivesData;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FObjectiveInfo                         ObjectiveInfo;                                     // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EObjectiveParts                               Part;                                              // 0x0060(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractInfoTextHud_OnSubObjectiveStartedHandler) == 0x000008, "Wrong alignment on InteractInfoTextHud_OnSubObjectiveStartedHandler");
static_assert(sizeof(InteractInfoTextHud_OnSubObjectiveStartedHandler) == 0x000068, "Wrong size on InteractInfoTextHud_OnSubObjectiveStartedHandler");
static_assert(offsetof(InteractInfoTextHud_OnSubObjectiveStartedHandler, ObjectivesData) == 0x000000, "Member 'InteractInfoTextHud_OnSubObjectiveStartedHandler::ObjectivesData' has a wrong offset!");
static_assert(offsetof(InteractInfoTextHud_OnSubObjectiveStartedHandler, ObjectiveInfo) == 0x000008, "Member 'InteractInfoTextHud_OnSubObjectiveStartedHandler::ObjectiveInfo' has a wrong offset!");
static_assert(offsetof(InteractInfoTextHud_OnSubObjectiveStartedHandler, Part) == 0x000060, "Member 'InteractInfoTextHud_OnSubObjectiveStartedHandler::Part' has a wrong offset!");

// Function ObsidianFox.InteractInfoTextHud.IsNewHintTimerActive
// 0x0001 (0x0001 - 0x0000)
struct InteractInfoTextHud_IsNewHintTimerActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractInfoTextHud_IsNewHintTimerActive) == 0x000001, "Wrong alignment on InteractInfoTextHud_IsNewHintTimerActive");
static_assert(sizeof(InteractInfoTextHud_IsNewHintTimerActive) == 0x000001, "Wrong size on InteractInfoTextHud_IsNewHintTimerActive");
static_assert(offsetof(InteractInfoTextHud_IsNewHintTimerActive, ReturnValue) == 0x000000, "Member 'InteractInfoTextHud_IsNewHintTimerActive::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InteractionComponent.BeginInteraction
// 0x0008 (0x0008 - 0x0000)
struct InteractionComponent_BeginInteraction final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_BeginInteraction) == 0x000008, "Wrong alignment on InteractionComponent_BeginInteraction");
static_assert(sizeof(InteractionComponent_BeginInteraction) == 0x000008, "Wrong size on InteractionComponent_BeginInteraction");
static_assert(offsetof(InteractionComponent_BeginInteraction, InteractingCharacter) == 0x000000, "Member 'InteractionComponent_BeginInteraction::InteractingCharacter' has a wrong offset!");

// Function ObsidianFox.InteractionComponent.GetCombatOnly
// 0x0001 (0x0001 - 0x0000)
struct InteractionComponent_GetCombatOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_GetCombatOnly) == 0x000001, "Wrong alignment on InteractionComponent_GetCombatOnly");
static_assert(sizeof(InteractionComponent_GetCombatOnly) == 0x000001, "Wrong size on InteractionComponent_GetCombatOnly");
static_assert(offsetof(InteractionComponent_GetCombatOnly, ReturnValue) == 0x000000, "Member 'InteractionComponent_GetCombatOnly::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InteractionComponent.HandleInteractButtonReleased
// 0x0008 (0x0008 - 0x0000)
struct InteractionComponent_HandleInteractButtonReleased final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_HandleInteractButtonReleased) == 0x000008, "Wrong alignment on InteractionComponent_HandleInteractButtonReleased");
static_assert(sizeof(InteractionComponent_HandleInteractButtonReleased) == 0x000008, "Wrong size on InteractionComponent_HandleInteractButtonReleased");
static_assert(offsetof(InteractionComponent_HandleInteractButtonReleased, InteractingCharacter) == 0x000000, "Member 'InteractionComponent_HandleInteractButtonReleased::InteractingCharacter' has a wrong offset!");

// Function ObsidianFox.InteractionComponent.InteractingCharAnimStart
// 0x0008 (0x0008 - 0x0000)
struct InteractionComponent_InteractingCharAnimStart final
{
public:
	class ACharacter*                             InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_InteractingCharAnimStart) == 0x000008, "Wrong alignment on InteractionComponent_InteractingCharAnimStart");
static_assert(sizeof(InteractionComponent_InteractingCharAnimStart) == 0x000008, "Wrong size on InteractionComponent_InteractingCharAnimStart");
static_assert(offsetof(InteractionComponent_InteractingCharAnimStart, InCharacter) == 0x000000, "Member 'InteractionComponent_InteractingCharAnimStart::InCharacter' has a wrong offset!");

// DelegateFunction ObsidianFox.InteractionComponent.InteractionEndSignature__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct InteractionComponent_InteractionEndSignature__DelegateSignature final
{
public:
	class ACharacter*                             InteractionCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_InteractionEndSignature__DelegateSignature) == 0x000008, "Wrong alignment on InteractionComponent_InteractionEndSignature__DelegateSignature");
static_assert(sizeof(InteractionComponent_InteractionEndSignature__DelegateSignature) == 0x000008, "Wrong size on InteractionComponent_InteractionEndSignature__DelegateSignature");
static_assert(offsetof(InteractionComponent_InteractionEndSignature__DelegateSignature, InteractionCharacter) == 0x000000, "Member 'InteractionComponent_InteractionEndSignature__DelegateSignature::InteractionCharacter' has a wrong offset!");

// DelegateFunction ObsidianFox.InteractionComponent.InteractionSignature__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct InteractionComponent_InteractionSignature__DelegateSignature final
{
public:
	class ACharacter*                             InteractionCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_InteractionSignature__DelegateSignature) == 0x000008, "Wrong alignment on InteractionComponent_InteractionSignature__DelegateSignature");
static_assert(sizeof(InteractionComponent_InteractionSignature__DelegateSignature) == 0x000008, "Wrong size on InteractionComponent_InteractionSignature__DelegateSignature");
static_assert(offsetof(InteractionComponent_InteractionSignature__DelegateSignature, InteractionCharacter) == 0x000000, "Member 'InteractionComponent_InteractionSignature__DelegateSignature::InteractionCharacter' has a wrong offset!");

// Function ObsidianFox.InteractionComponent.OnCharacterTurnInPlaceEnd
// 0x0010 (0x0010 - 0x0000)
struct InteractionComponent_OnCharacterTurnInPlaceEnd final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBlendOutToWalk;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionComponent_OnCharacterTurnInPlaceEnd) == 0x000008, "Wrong alignment on InteractionComponent_OnCharacterTurnInPlaceEnd");
static_assert(sizeof(InteractionComponent_OnCharacterTurnInPlaceEnd) == 0x000010, "Wrong size on InteractionComponent_OnCharacterTurnInPlaceEnd");
static_assert(offsetof(InteractionComponent_OnCharacterTurnInPlaceEnd, Character) == 0x000000, "Member 'InteractionComponent_OnCharacterTurnInPlaceEnd::Character' has a wrong offset!");
static_assert(offsetof(InteractionComponent_OnCharacterTurnInPlaceEnd, bIsBlendOutToWalk) == 0x000008, "Member 'InteractionComponent_OnCharacterTurnInPlaceEnd::bIsBlendOutToWalk' has a wrong offset!");

// Function ObsidianFox.InteractionComponent.OnCharacterTurnInPlaceFailed
// 0x0008 (0x0008 - 0x0000)
struct InteractionComponent_OnCharacterTurnInPlaceFailed final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_OnCharacterTurnInPlaceFailed) == 0x000008, "Wrong alignment on InteractionComponent_OnCharacterTurnInPlaceFailed");
static_assert(sizeof(InteractionComponent_OnCharacterTurnInPlaceFailed) == 0x000008, "Wrong size on InteractionComponent_OnCharacterTurnInPlaceFailed");
static_assert(offsetof(InteractionComponent_OnCharacterTurnInPlaceFailed, Character) == 0x000000, "Member 'InteractionComponent_OnCharacterTurnInPlaceFailed::Character' has a wrong offset!");

// DelegateFunction ObsidianFox.InteractionComponent.OnInitiateInteraction__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct InteractionComponent_OnInitiateInteraction__DelegateSignature final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_OnInitiateInteraction__DelegateSignature) == 0x000008, "Wrong alignment on InteractionComponent_OnInitiateInteraction__DelegateSignature");
static_assert(sizeof(InteractionComponent_OnInitiateInteraction__DelegateSignature) == 0x000008, "Wrong size on InteractionComponent_OnInitiateInteraction__DelegateSignature");
static_assert(offsetof(InteractionComponent_OnInitiateInteraction__DelegateSignature, InteractingCharacter) == 0x000000, "Member 'InteractionComponent_OnInitiateInteraction__DelegateSignature::InteractingCharacter' has a wrong offset!");

// DelegateFunction ObsidianFox.InteractionComponent.OnInteractionMontageStarted__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct InteractionComponent_OnInteractionMontageStarted__DelegateSignature final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Montage;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_OnInteractionMontageStarted__DelegateSignature) == 0x000008, "Wrong alignment on InteractionComponent_OnInteractionMontageStarted__DelegateSignature");
static_assert(sizeof(InteractionComponent_OnInteractionMontageStarted__DelegateSignature) == 0x000010, "Wrong size on InteractionComponent_OnInteractionMontageStarted__DelegateSignature");
static_assert(offsetof(InteractionComponent_OnInteractionMontageStarted__DelegateSignature, InteractingCharacter) == 0x000000, "Member 'InteractionComponent_OnInteractionMontageStarted__DelegateSignature::InteractingCharacter' has a wrong offset!");
static_assert(offsetof(InteractionComponent_OnInteractionMontageStarted__DelegateSignature, Montage) == 0x000008, "Member 'InteractionComponent_OnInteractionMontageStarted__DelegateSignature::Montage' has a wrong offset!");

// Function ObsidianFox.InteractionComponent.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct InteractionComponent_OnMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionComponent_OnMontageEnded) == 0x000008, "Wrong alignment on InteractionComponent_OnMontageEnded");
static_assert(sizeof(InteractionComponent_OnMontageEnded) == 0x000010, "Wrong size on InteractionComponent_OnMontageEnded");
static_assert(offsetof(InteractionComponent_OnMontageEnded, Montage) == 0x000000, "Member 'InteractionComponent_OnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(InteractionComponent_OnMontageEnded, bInterrupted) == 0x000008, "Member 'InteractionComponent_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function ObsidianFox.InteractionComponent.OnPlayerMoveToComplete
// 0x0008 (0x0008 - 0x0000)
struct InteractionComponent_OnPlayerMoveToComplete final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAIRequestID                           RequestID;                                         // 0x0004(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_OnPlayerMoveToComplete) == 0x000004, "Wrong alignment on InteractionComponent_OnPlayerMoveToComplete");
static_assert(sizeof(InteractionComponent_OnPlayerMoveToComplete) == 0x000008, "Wrong size on InteractionComponent_OnPlayerMoveToComplete");
static_assert(offsetof(InteractionComponent_OnPlayerMoveToComplete, MovementResult) == 0x000000, "Member 'InteractionComponent_OnPlayerMoveToComplete::MovementResult' has a wrong offset!");
static_assert(offsetof(InteractionComponent_OnPlayerMoveToComplete, RequestID) == 0x000004, "Member 'InteractionComponent_OnPlayerMoveToComplete::RequestID' has a wrong offset!");

// Function ObsidianFox.InteractionComponent.OnPlayerMoveToFail
// 0x0008 (0x0008 - 0x0000)
struct InteractionComponent_OnPlayerMoveToFail final
{
public:
	EPathFollowingResult                          MovementResult;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAIRequestID                           RequestID;                                         // 0x0004(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_OnPlayerMoveToFail) == 0x000004, "Wrong alignment on InteractionComponent_OnPlayerMoveToFail");
static_assert(sizeof(InteractionComponent_OnPlayerMoveToFail) == 0x000008, "Wrong size on InteractionComponent_OnPlayerMoveToFail");
static_assert(offsetof(InteractionComponent_OnPlayerMoveToFail, MovementResult) == 0x000000, "Member 'InteractionComponent_OnPlayerMoveToFail::MovementResult' has a wrong offset!");
static_assert(offsetof(InteractionComponent_OnPlayerMoveToFail, RequestID) == 0x000004, "Member 'InteractionComponent_OnPlayerMoveToFail::RequestID' has a wrong offset!");

// Function ObsidianFox.InteractionComponent.SetIgnorePlayerInput
// 0x0010 (0x0010 - 0x0000)
struct InteractionComponent_SetIgnorePlayerInput final
{
public:
	class ACharacter*                             InteractingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionComponent_SetIgnorePlayerInput) == 0x000008, "Wrong alignment on InteractionComponent_SetIgnorePlayerInput");
static_assert(sizeof(InteractionComponent_SetIgnorePlayerInput) == 0x000010, "Wrong size on InteractionComponent_SetIgnorePlayerInput");
static_assert(offsetof(InteractionComponent_SetIgnorePlayerInput, InteractingCharacter) == 0x000000, "Member 'InteractionComponent_SetIgnorePlayerInput::InteractingCharacter' has a wrong offset!");
static_assert(offsetof(InteractionComponent_SetIgnorePlayerInput, Value) == 0x000008, "Member 'InteractionComponent_SetIgnorePlayerInput::Value' has a wrong offset!");

// Function ObsidianFox.InteractionComponent.SetSceneComponentTransformGoal
// 0x0008 (0x0008 - 0x0000)
struct InteractionComponent_SetSceneComponentTransformGoal final
{
public:
	class USceneComponent*                        InSceneComponentTransformGoal;                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionComponent_SetSceneComponentTransformGoal) == 0x000008, "Wrong alignment on InteractionComponent_SetSceneComponentTransformGoal");
static_assert(sizeof(InteractionComponent_SetSceneComponentTransformGoal) == 0x000008, "Wrong size on InteractionComponent_SetSceneComponentTransformGoal");
static_assert(offsetof(InteractionComponent_SetSceneComponentTransformGoal, InSceneComponentTransformGoal) == 0x000000, "Member 'InteractionComponent_SetSceneComponentTransformGoal::InSceneComponentTransformGoal' has a wrong offset!");

// Function ObsidianFox.InteractionHUD.AddIcon
// 0x0010 (0x0010 - 0x0000)
struct InteractionHUD_AddIcon final
{
public:
	class UInteractionComponentBase*              InteractionComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionHUD_AddIcon) == 0x000008, "Wrong alignment on InteractionHUD_AddIcon");
static_assert(sizeof(InteractionHUD_AddIcon) == 0x000010, "Wrong size on InteractionHUD_AddIcon");
static_assert(offsetof(InteractionHUD_AddIcon, InteractionComponent) == 0x000000, "Member 'InteractionHUD_AddIcon::InteractionComponent' has a wrong offset!");
static_assert(offsetof(InteractionHUD_AddIcon, ReturnValue) == 0x000008, "Member 'InteractionHUD_AddIcon::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InteractionHUD.ClearAllIcons
// 0x0001 (0x0001 - 0x0000)
struct InteractionHUD_ClearAllIcons final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionHUD_ClearAllIcons) == 0x000001, "Wrong alignment on InteractionHUD_ClearAllIcons");
static_assert(sizeof(InteractionHUD_ClearAllIcons) == 0x000001, "Wrong size on InteractionHUD_ClearAllIcons");
static_assert(offsetof(InteractionHUD_ClearAllIcons, ReturnValue) == 0x000000, "Member 'InteractionHUD_ClearAllIcons::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InteractionHUD.NativeTickIcons
// 0x0004 (0x0004 - 0x0000)
struct InteractionHUD_NativeTickIcons final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionHUD_NativeTickIcons) == 0x000004, "Wrong alignment on InteractionHUD_NativeTickIcons");
static_assert(sizeof(InteractionHUD_NativeTickIcons) == 0x000004, "Wrong size on InteractionHUD_NativeTickIcons");
static_assert(offsetof(InteractionHUD_NativeTickIcons, Delta) == 0x000000, "Member 'InteractionHUD_NativeTickIcons::Delta' has a wrong offset!");

// Function ObsidianFox.InteractionHUD.NearbyInteractablesChanged
// 0x00F0 (0x00F0 - 0x0000)
struct InteractionHUD_NearbyInteractablesChanged final
{
public:
	TSet<class UInteractionComponentBase*>        NearbyInteractables;                               // 0x0000(0x0050)(ConstParm, Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSet<class UInteractionComponentBase*>        AddedInteractables;                                // 0x0050(0x0050)(ConstParm, Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSet<class UInteractionComponentBase*>        RemovedInteractables;                              // 0x00A0(0x0050)(ConstParm, Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionHUD_NearbyInteractablesChanged) == 0x000008, "Wrong alignment on InteractionHUD_NearbyInteractablesChanged");
static_assert(sizeof(InteractionHUD_NearbyInteractablesChanged) == 0x0000F0, "Wrong size on InteractionHUD_NearbyInteractablesChanged");
static_assert(offsetof(InteractionHUD_NearbyInteractablesChanged, NearbyInteractables) == 0x000000, "Member 'InteractionHUD_NearbyInteractablesChanged::NearbyInteractables' has a wrong offset!");
static_assert(offsetof(InteractionHUD_NearbyInteractablesChanged, AddedInteractables) == 0x000050, "Member 'InteractionHUD_NearbyInteractablesChanged::AddedInteractables' has a wrong offset!");
static_assert(offsetof(InteractionHUD_NearbyInteractablesChanged, RemovedInteractables) == 0x0000A0, "Member 'InteractionHUD_NearbyInteractablesChanged::RemovedInteractables' has a wrong offset!");

// Function ObsidianFox.InteractionHUD.OnCombatInteractableSelectionChanged
// 0x0008 (0x0008 - 0x0000)
struct InteractionHUD_OnCombatInteractableSelectionChanged final
{
public:
	const class UInteractionComponentBase*        SelectedInteractable;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionHUD_OnCombatInteractableSelectionChanged) == 0x000008, "Wrong alignment on InteractionHUD_OnCombatInteractableSelectionChanged");
static_assert(sizeof(InteractionHUD_OnCombatInteractableSelectionChanged) == 0x000008, "Wrong size on InteractionHUD_OnCombatInteractableSelectionChanged");
static_assert(offsetof(InteractionHUD_OnCombatInteractableSelectionChanged, SelectedInteractable) == 0x000000, "Member 'InteractionHUD_OnCombatInteractableSelectionChanged::SelectedInteractable' has a wrong offset!");

// Function ObsidianFox.InteractionHUD.OnExaminationInteractableSelectionChanged
// 0x0008 (0x0008 - 0x0000)
struct InteractionHUD_OnExaminationInteractableSelectionChanged final
{
public:
	const class UInteractionComponentBase*        SelectedInteractable;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionHUD_OnExaminationInteractableSelectionChanged) == 0x000008, "Wrong alignment on InteractionHUD_OnExaminationInteractableSelectionChanged");
static_assert(sizeof(InteractionHUD_OnExaminationInteractableSelectionChanged) == 0x000008, "Wrong size on InteractionHUD_OnExaminationInteractableSelectionChanged");
static_assert(offsetof(InteractionHUD_OnExaminationInteractableSelectionChanged, SelectedInteractable) == 0x000000, "Member 'InteractionHUD_OnExaminationInteractableSelectionChanged::SelectedInteractable' has a wrong offset!");

// Function ObsidianFox.InteractionHUD.OnStandardInteractableSelectionChanged
// 0x0008 (0x0008 - 0x0000)
struct InteractionHUD_OnStandardInteractableSelectionChanged final
{
public:
	const class UInteractionComponentBase*        SelectedInteractable;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionHUD_OnStandardInteractableSelectionChanged) == 0x000008, "Wrong alignment on InteractionHUD_OnStandardInteractableSelectionChanged");
static_assert(sizeof(InteractionHUD_OnStandardInteractableSelectionChanged) == 0x000008, "Wrong size on InteractionHUD_OnStandardInteractableSelectionChanged");
static_assert(offsetof(InteractionHUD_OnStandardInteractableSelectionChanged, SelectedInteractable) == 0x000000, "Member 'InteractionHUD_OnStandardInteractableSelectionChanged::SelectedInteractable' has a wrong offset!");

// Function ObsidianFox.InteractionHUD.RemoveIcon
// 0x0010 (0x0010 - 0x0000)
struct InteractionHUD_RemoveIcon final
{
public:
	class UInteractionComponentBase*              InteractionComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionHUD_RemoveIcon) == 0x000008, "Wrong alignment on InteractionHUD_RemoveIcon");
static_assert(sizeof(InteractionHUD_RemoveIcon) == 0x000010, "Wrong size on InteractionHUD_RemoveIcon");
static_assert(offsetof(InteractionHUD_RemoveIcon, InteractionComponent) == 0x000000, "Member 'InteractionHUD_RemoveIcon::InteractionComponent' has a wrong offset!");
static_assert(offsetof(InteractionHUD_RemoveIcon, ReturnValue) == 0x000008, "Member 'InteractionHUD_RemoveIcon::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InteractionHUD.TickIcons
// 0x0008 (0x0008 - 0x0000)
struct InteractionHUD_TickIcons final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionHUD_TickIcons) == 0x000004, "Wrong alignment on InteractionHUD_TickIcons");
static_assert(sizeof(InteractionHUD_TickIcons) == 0x000008, "Wrong size on InteractionHUD_TickIcons");
static_assert(offsetof(InteractionHUD_TickIcons, Delta) == 0x000000, "Member 'InteractionHUD_TickIcons::Delta' has a wrong offset!");
static_assert(offsetof(InteractionHUD_TickIcons, ReturnValue) == 0x000004, "Member 'InteractionHUD_TickIcons::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InteractionHUD.TranslateIcons
// 0x0001 (0x0001 - 0x0000)
struct InteractionHUD_TranslateIcons final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionHUD_TranslateIcons) == 0x000001, "Wrong alignment on InteractionHUD_TranslateIcons");
static_assert(sizeof(InteractionHUD_TranslateIcons) == 0x000001, "Wrong size on InteractionHUD_TranslateIcons");
static_assert(offsetof(InteractionHUD_TranslateIcons, ReturnValue) == 0x000000, "Member 'InteractionHUD_TranslateIcons::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InventoryBlueprintLibrary.AddItemToInventory
// 0x0018 (0x0018 - 0x0000)
struct InventoryBlueprintLibrary_AddItemToInventory final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemData*                              ItemData;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFInventoryPopUp                              PopUp;                                             // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryBlueprintLibrary_AddItemToInventory) == 0x000008, "Wrong alignment on InventoryBlueprintLibrary_AddItemToInventory");
static_assert(sizeof(InventoryBlueprintLibrary_AddItemToInventory) == 0x000018, "Wrong size on InventoryBlueprintLibrary_AddItemToInventory");
static_assert(offsetof(InventoryBlueprintLibrary_AddItemToInventory, WorldContextObject) == 0x000000, "Member 'InventoryBlueprintLibrary_AddItemToInventory::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_AddItemToInventory, ItemData) == 0x000008, "Member 'InventoryBlueprintLibrary_AddItemToInventory::ItemData' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_AddItemToInventory, Amount) == 0x000010, "Member 'InventoryBlueprintLibrary_AddItemToInventory::Amount' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_AddItemToInventory, PopUp) == 0x000014, "Member 'InventoryBlueprintLibrary_AddItemToInventory::PopUp' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_AddItemToInventory, ReturnValue) == 0x000015, "Member 'InventoryBlueprintLibrary_AddItemToInventory::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InventoryBlueprintLibrary.GetAllItems
// 0x0018 (0x0018 - 0x0000)
struct InventoryBlueprintLibrary_GetAllItems final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UItemData>>       ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryBlueprintLibrary_GetAllItems) == 0x000008, "Wrong alignment on InventoryBlueprintLibrary_GetAllItems");
static_assert(sizeof(InventoryBlueprintLibrary_GetAllItems) == 0x000018, "Wrong size on InventoryBlueprintLibrary_GetAllItems");
static_assert(offsetof(InventoryBlueprintLibrary_GetAllItems, WorldContextObject) == 0x000000, "Member 'InventoryBlueprintLibrary_GetAllItems::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_GetAllItems, ReturnValue) == 0x000008, "Member 'InventoryBlueprintLibrary_GetAllItems::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InventoryBlueprintLibrary.GetAllItemsInSameCategory
// 0x0020 (0x0020 - 0x0000)
struct InventoryBlueprintLibrary_GetAllItemsInSameCategory final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTagItemCategory;                           // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UItemData>>       ReturnValue;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryBlueprintLibrary_GetAllItemsInSameCategory) == 0x000008, "Wrong alignment on InventoryBlueprintLibrary_GetAllItemsInSameCategory");
static_assert(sizeof(InventoryBlueprintLibrary_GetAllItemsInSameCategory) == 0x000020, "Wrong size on InventoryBlueprintLibrary_GetAllItemsInSameCategory");
static_assert(offsetof(InventoryBlueprintLibrary_GetAllItemsInSameCategory, WorldContextObject) == 0x000000, "Member 'InventoryBlueprintLibrary_GetAllItemsInSameCategory::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_GetAllItemsInSameCategory, GameplayTagItemCategory) == 0x000008, "Member 'InventoryBlueprintLibrary_GetAllItemsInSameCategory::GameplayTagItemCategory' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_GetAllItemsInSameCategory, ReturnValue) == 0x000010, "Member 'InventoryBlueprintLibrary_GetAllItemsInSameCategory::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InventoryBlueprintLibrary.GetItemAmount
// 0x0018 (0x0018 - 0x0000)
struct InventoryBlueprintLibrary_GetItemAmount final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UItemData*                        Item;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryBlueprintLibrary_GetItemAmount) == 0x000008, "Wrong alignment on InventoryBlueprintLibrary_GetItemAmount");
static_assert(sizeof(InventoryBlueprintLibrary_GetItemAmount) == 0x000018, "Wrong size on InventoryBlueprintLibrary_GetItemAmount");
static_assert(offsetof(InventoryBlueprintLibrary_GetItemAmount, WorldContextObject) == 0x000000, "Member 'InventoryBlueprintLibrary_GetItemAmount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_GetItemAmount, Item) == 0x000008, "Member 'InventoryBlueprintLibrary_GetItemAmount::Item' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_GetItemAmount, ReturnValue) == 0x000010, "Member 'InventoryBlueprintLibrary_GetItemAmount::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InventoryBlueprintLibrary.HasAnyItemNotBeenLookedAt
// 0x0020 (0x0020 - 0x0000)
struct InventoryBlueprintLibrary_HasAnyItemNotBeenLookedAt final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UItemData>>       Items;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryBlueprintLibrary_HasAnyItemNotBeenLookedAt) == 0x000008, "Wrong alignment on InventoryBlueprintLibrary_HasAnyItemNotBeenLookedAt");
static_assert(sizeof(InventoryBlueprintLibrary_HasAnyItemNotBeenLookedAt) == 0x000020, "Wrong size on InventoryBlueprintLibrary_HasAnyItemNotBeenLookedAt");
static_assert(offsetof(InventoryBlueprintLibrary_HasAnyItemNotBeenLookedAt, WorldContextObject) == 0x000000, "Member 'InventoryBlueprintLibrary_HasAnyItemNotBeenLookedAt::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_HasAnyItemNotBeenLookedAt, Items) == 0x000008, "Member 'InventoryBlueprintLibrary_HasAnyItemNotBeenLookedAt::Items' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_HasAnyItemNotBeenLookedAt, ReturnValue) == 0x000018, "Member 'InventoryBlueprintLibrary_HasAnyItemNotBeenLookedAt::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InventoryBlueprintLibrary.HasItem
// 0x0018 (0x0018 - 0x0000)
struct InventoryBlueprintLibrary_HasItem final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UItemData*                        Item;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryBlueprintLibrary_HasItem) == 0x000008, "Wrong alignment on InventoryBlueprintLibrary_HasItem");
static_assert(sizeof(InventoryBlueprintLibrary_HasItem) == 0x000018, "Wrong size on InventoryBlueprintLibrary_HasItem");
static_assert(offsetof(InventoryBlueprintLibrary_HasItem, WorldContextObject) == 0x000000, "Member 'InventoryBlueprintLibrary_HasItem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_HasItem, Item) == 0x000008, "Member 'InventoryBlueprintLibrary_HasItem::Item' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_HasItem, ReturnValue) == 0x000010, "Member 'InventoryBlueprintLibrary_HasItem::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InventoryBlueprintLibrary.HasItemBeenLookedAt
// 0x0038 (0x0038 - 0x0000)
struct InventoryBlueprintLibrary_HasItemBeenLookedAt final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UItemData>               Item;                                              // 0x0008(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryBlueprintLibrary_HasItemBeenLookedAt) == 0x000008, "Wrong alignment on InventoryBlueprintLibrary_HasItemBeenLookedAt");
static_assert(sizeof(InventoryBlueprintLibrary_HasItemBeenLookedAt) == 0x000038, "Wrong size on InventoryBlueprintLibrary_HasItemBeenLookedAt");
static_assert(offsetof(InventoryBlueprintLibrary_HasItemBeenLookedAt, WorldContextObject) == 0x000000, "Member 'InventoryBlueprintLibrary_HasItemBeenLookedAt::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_HasItemBeenLookedAt, Item) == 0x000008, "Member 'InventoryBlueprintLibrary_HasItemBeenLookedAt::Item' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_HasItemBeenLookedAt, ReturnValue) == 0x000030, "Member 'InventoryBlueprintLibrary_HasItemBeenLookedAt::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InventoryBlueprintLibrary.IsCollectibleSetComplete
// 0x0038 (0x0038 - 0x0000)
struct InventoryBlueprintLibrary_IsCollectibleSetComplete final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCollectiblesDataAsset>  InCollectiblesDataAsset;                           // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryBlueprintLibrary_IsCollectibleSetComplete) == 0x000008, "Wrong alignment on InventoryBlueprintLibrary_IsCollectibleSetComplete");
static_assert(sizeof(InventoryBlueprintLibrary_IsCollectibleSetComplete) == 0x000038, "Wrong size on InventoryBlueprintLibrary_IsCollectibleSetComplete");
static_assert(offsetof(InventoryBlueprintLibrary_IsCollectibleSetComplete, WorldContextObject) == 0x000000, "Member 'InventoryBlueprintLibrary_IsCollectibleSetComplete::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_IsCollectibleSetComplete, InCollectiblesDataAsset) == 0x000008, "Member 'InventoryBlueprintLibrary_IsCollectibleSetComplete::InCollectiblesDataAsset' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_IsCollectibleSetComplete, ReturnValue) == 0x000030, "Member 'InventoryBlueprintLibrary_IsCollectibleSetComplete::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InventoryBlueprintLibrary.IsCollectibleSetCompleteWithDelegate
// 0x0048 (0x0048 - 0x0000)
struct InventoryBlueprintLibrary_IsCollectibleSetCompleteWithDelegate final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCollectiblesDataAsset>  InCollectiblesDataAsset;                           // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             Callback;                                          // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	ECollectibleCompletionStatus                  ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryBlueprintLibrary_IsCollectibleSetCompleteWithDelegate) == 0x000008, "Wrong alignment on InventoryBlueprintLibrary_IsCollectibleSetCompleteWithDelegate");
static_assert(sizeof(InventoryBlueprintLibrary_IsCollectibleSetCompleteWithDelegate) == 0x000048, "Wrong size on InventoryBlueprintLibrary_IsCollectibleSetCompleteWithDelegate");
static_assert(offsetof(InventoryBlueprintLibrary_IsCollectibleSetCompleteWithDelegate, WorldContextObject) == 0x000000, "Member 'InventoryBlueprintLibrary_IsCollectibleSetCompleteWithDelegate::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_IsCollectibleSetCompleteWithDelegate, InCollectiblesDataAsset) == 0x000008, "Member 'InventoryBlueprintLibrary_IsCollectibleSetCompleteWithDelegate::InCollectiblesDataAsset' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_IsCollectibleSetCompleteWithDelegate, Callback) == 0x000030, "Member 'InventoryBlueprintLibrary_IsCollectibleSetCompleteWithDelegate::Callback' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_IsCollectibleSetCompleteWithDelegate, ReturnValue) == 0x000040, "Member 'InventoryBlueprintLibrary_IsCollectibleSetCompleteWithDelegate::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InventoryBlueprintLibrary.IsItemImportant
// 0x0010 (0x0010 - 0x0000)
struct InventoryBlueprintLibrary_IsItemImportant final
{
public:
	const class UItemData*                        Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryBlueprintLibrary_IsItemImportant) == 0x000008, "Wrong alignment on InventoryBlueprintLibrary_IsItemImportant");
static_assert(sizeof(InventoryBlueprintLibrary_IsItemImportant) == 0x000010, "Wrong size on InventoryBlueprintLibrary_IsItemImportant");
static_assert(offsetof(InventoryBlueprintLibrary_IsItemImportant, Item) == 0x000000, "Member 'InventoryBlueprintLibrary_IsItemImportant::Item' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_IsItemImportant, ReturnValue) == 0x000008, "Member 'InventoryBlueprintLibrary_IsItemImportant::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InventoryBlueprintLibrary.RemoveAllItemsFromInventory
// 0x0008 (0x0008 - 0x0000)
struct InventoryBlueprintLibrary_RemoveAllItemsFromInventory final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryBlueprintLibrary_RemoveAllItemsFromInventory) == 0x000008, "Wrong alignment on InventoryBlueprintLibrary_RemoveAllItemsFromInventory");
static_assert(sizeof(InventoryBlueprintLibrary_RemoveAllItemsFromInventory) == 0x000008, "Wrong size on InventoryBlueprintLibrary_RemoveAllItemsFromInventory");
static_assert(offsetof(InventoryBlueprintLibrary_RemoveAllItemsFromInventory, WorldContextObject) == 0x000000, "Member 'InventoryBlueprintLibrary_RemoveAllItemsFromInventory::WorldContextObject' has a wrong offset!");

// Function ObsidianFox.InventoryBlueprintLibrary.RemoveItemFromInventory
// 0x0018 (0x0018 - 0x0000)
struct InventoryBlueprintLibrary_RemoveItemFromInventory final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemData*                              ItemData;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryBlueprintLibrary_RemoveItemFromInventory) == 0x000008, "Wrong alignment on InventoryBlueprintLibrary_RemoveItemFromInventory");
static_assert(sizeof(InventoryBlueprintLibrary_RemoveItemFromInventory) == 0x000018, "Wrong size on InventoryBlueprintLibrary_RemoveItemFromInventory");
static_assert(offsetof(InventoryBlueprintLibrary_RemoveItemFromInventory, WorldContextObject) == 0x000000, "Member 'InventoryBlueprintLibrary_RemoveItemFromInventory::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_RemoveItemFromInventory, ItemData) == 0x000008, "Member 'InventoryBlueprintLibrary_RemoveItemFromInventory::ItemData' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_RemoveItemFromInventory, Amount) == 0x000010, "Member 'InventoryBlueprintLibrary_RemoveItemFromInventory::Amount' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_RemoveItemFromInventory, ReturnValue) == 0x000014, "Member 'InventoryBlueprintLibrary_RemoveItemFromInventory::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InventoryBlueprintLibrary.SetItemLookedAt
// 0x0038 (0x0038 - 0x0000)
struct InventoryBlueprintLibrary_SetItemLookedAt final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UItemData>               Item;                                              // 0x0008(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLookedAt;                                         // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryBlueprintLibrary_SetItemLookedAt) == 0x000008, "Wrong alignment on InventoryBlueprintLibrary_SetItemLookedAt");
static_assert(sizeof(InventoryBlueprintLibrary_SetItemLookedAt) == 0x000038, "Wrong size on InventoryBlueprintLibrary_SetItemLookedAt");
static_assert(offsetof(InventoryBlueprintLibrary_SetItemLookedAt, WorldContextObject) == 0x000000, "Member 'InventoryBlueprintLibrary_SetItemLookedAt::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_SetItemLookedAt, Item) == 0x000008, "Member 'InventoryBlueprintLibrary_SetItemLookedAt::Item' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_SetItemLookedAt, bLookedAt) == 0x000030, "Member 'InventoryBlueprintLibrary_SetItemLookedAt::bLookedAt' has a wrong offset!");

// Function ObsidianFox.InventoryBlueprintLibrary.ShowHighlightItemWidget
// 0x0018 (0x0018 - 0x0000)
struct InventoryBlueprintLibrary_ShowHighlightItemWidget final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemData*                              Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHighlightItemPickupHud*                ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryBlueprintLibrary_ShowHighlightItemWidget) == 0x000008, "Wrong alignment on InventoryBlueprintLibrary_ShowHighlightItemWidget");
static_assert(sizeof(InventoryBlueprintLibrary_ShowHighlightItemWidget) == 0x000018, "Wrong size on InventoryBlueprintLibrary_ShowHighlightItemWidget");
static_assert(offsetof(InventoryBlueprintLibrary_ShowHighlightItemWidget, WorldContextObject) == 0x000000, "Member 'InventoryBlueprintLibrary_ShowHighlightItemWidget::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_ShowHighlightItemWidget, Item) == 0x000008, "Member 'InventoryBlueprintLibrary_ShowHighlightItemWidget::Item' has a wrong offset!");
static_assert(offsetof(InventoryBlueprintLibrary_ShowHighlightItemWidget, ReturnValue) == 0x000010, "Member 'InventoryBlueprintLibrary_ShowHighlightItemWidget::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InventoryBlueprintLibrary.SortItemDataArray
// 0x0010 (0x0010 - 0x0000)
struct InventoryBlueprintLibrary_SortItemDataArray final
{
public:
	TArray<class UItemData*>                      ItemDataArray;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryBlueprintLibrary_SortItemDataArray) == 0x000008, "Wrong alignment on InventoryBlueprintLibrary_SortItemDataArray");
static_assert(sizeof(InventoryBlueprintLibrary_SortItemDataArray) == 0x000010, "Wrong size on InventoryBlueprintLibrary_SortItemDataArray");
static_assert(offsetof(InventoryBlueprintLibrary_SortItemDataArray, ItemDataArray) == 0x000000, "Member 'InventoryBlueprintLibrary_SortItemDataArray::ItemDataArray' has a wrong offset!");

// Function ObsidianFox.InventoryPickerHud.MouseWheelScroll
// 0x0010 (0x0010 - 0x0000)
struct InventoryPickerHud_MouseWheelScroll final
{
public:
	struct FInputActionValue                      InputActionValue;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryPickerHud_MouseWheelScroll) == 0x000004, "Wrong alignment on InventoryPickerHud_MouseWheelScroll");
static_assert(sizeof(InventoryPickerHud_MouseWheelScroll) == 0x000010, "Wrong size on InventoryPickerHud_MouseWheelScroll");
static_assert(offsetof(InventoryPickerHud_MouseWheelScroll, InputActionValue) == 0x000000, "Member 'InventoryPickerHud_MouseWheelScroll::InputActionValue' has a wrong offset!");

// Function ObsidianFox.InventoryPickerHud.MoveWidgetInputActionTriggeredHandler
// 0x0010 (0x0010 - 0x0000)
struct InventoryPickerHud_MoveWidgetInputActionTriggeredHandler final
{
public:
	struct FInputActionValue                      InputActionValue;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryPickerHud_MoveWidgetInputActionTriggeredHandler) == 0x000004, "Wrong alignment on InventoryPickerHud_MoveWidgetInputActionTriggeredHandler");
static_assert(sizeof(InventoryPickerHud_MoveWidgetInputActionTriggeredHandler) == 0x000010, "Wrong size on InventoryPickerHud_MoveWidgetInputActionTriggeredHandler");
static_assert(offsetof(InventoryPickerHud_MoveWidgetInputActionTriggeredHandler, InputActionValue) == 0x000000, "Member 'InventoryPickerHud_MoveWidgetInputActionTriggeredHandler::InputActionValue' has a wrong offset!");

// Function ObsidianFox.InventoryPickerHud.RotateBetweenItems
// 0x0001 (0x0001 - 0x0000)
struct InventoryPickerHud_RotateBetweenItems final
{
public:
	bool                                          Clockwise;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryPickerHud_RotateBetweenItems) == 0x000001, "Wrong alignment on InventoryPickerHud_RotateBetweenItems");
static_assert(sizeof(InventoryPickerHud_RotateBetweenItems) == 0x000001, "Wrong size on InventoryPickerHud_RotateBetweenItems");
static_assert(offsetof(InventoryPickerHud_RotateBetweenItems, Clockwise) == 0x000000, "Member 'InventoryPickerHud_RotateBetweenItems::Clockwise' has a wrong offset!");

// Function ObsidianFox.InvestigationExaminationView.LeftStickYTilt
// 0x0004 (0x0004 - 0x0000)
struct InvestigationExaminationView_LeftStickYTilt final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvestigationExaminationView_LeftStickYTilt) == 0x000004, "Wrong alignment on InvestigationExaminationView_LeftStickYTilt");
static_assert(sizeof(InvestigationExaminationView_LeftStickYTilt) == 0x000004, "Wrong size on InvestigationExaminationView_LeftStickYTilt");
static_assert(offsetof(InvestigationExaminationView_LeftStickYTilt, Value) == 0x000000, "Member 'InvestigationExaminationView_LeftStickYTilt::Value' has a wrong offset!");

// Function ObsidianFox.InvestigationExaminationView.PlayerGuidanceStateUpdatedHandler
// 0x0002 (0x0002 - 0x0000)
struct InvestigationExaminationView_PlayerGuidanceStateUpdatedHandler final
{
public:
	EPlayerGuidanceSystem                         System;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bState;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvestigationExaminationView_PlayerGuidanceStateUpdatedHandler) == 0x000001, "Wrong alignment on InvestigationExaminationView_PlayerGuidanceStateUpdatedHandler");
static_assert(sizeof(InvestigationExaminationView_PlayerGuidanceStateUpdatedHandler) == 0x000002, "Wrong size on InvestigationExaminationView_PlayerGuidanceStateUpdatedHandler");
static_assert(offsetof(InvestigationExaminationView_PlayerGuidanceStateUpdatedHandler, System) == 0x000000, "Member 'InvestigationExaminationView_PlayerGuidanceStateUpdatedHandler::System' has a wrong offset!");
static_assert(offsetof(InvestigationExaminationView_PlayerGuidanceStateUpdatedHandler, bState) == 0x000001, "Member 'InvestigationExaminationView_PlayerGuidanceStateUpdatedHandler::bState' has a wrong offset!");

// Function ObsidianFox.InvestigationExaminationView.SetExaminationDisplayInfo
// 0x00D8 (0x00D8 - 0x0000)
struct InvestigationExaminationView_SetExaminationDisplayInfo final
{
public:
	struct FItemDisplayInfo                       NewDisplayInfo;                                    // 0x0000(0x00D0)(Parm, NativeAccessSpecifierPublic)
	bool                                          bPlaySound;                                        // 0x00D0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InvestigationExaminationView_SetExaminationDisplayInfo) == 0x000008, "Wrong alignment on InvestigationExaminationView_SetExaminationDisplayInfo");
static_assert(sizeof(InvestigationExaminationView_SetExaminationDisplayInfo) == 0x0000D8, "Wrong size on InvestigationExaminationView_SetExaminationDisplayInfo");
static_assert(offsetof(InvestigationExaminationView_SetExaminationDisplayInfo, NewDisplayInfo) == 0x000000, "Member 'InvestigationExaminationView_SetExaminationDisplayInfo::NewDisplayInfo' has a wrong offset!");
static_assert(offsetof(InvestigationExaminationView_SetExaminationDisplayInfo, bPlaySound) == 0x0000D0, "Member 'InvestigationExaminationView_SetExaminationDisplayInfo::bPlaySound' has a wrong offset!");

// Function ObsidianFox.InvestigationExaminationView.SetUpExaminationView
// 0x00E8 (0x00E8 - 0x0000)
struct InvestigationExaminationView_SetUpExaminationView final
{
public:
	struct FItemDisplayInfo                       NewDisplayInfo;                                    // 0x0000(0x00D0)(Parm, NativeAccessSpecifierPublic)
	class UOFSlotWidget*                          SourceSlot;                                        // 0x00D0(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemData*                              NewItemData;                                       // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayExpansionAnimation;                            // 0x00E0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaySound;                                        // 0x00E1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InvestigationExaminationView_SetUpExaminationView) == 0x000008, "Wrong alignment on InvestigationExaminationView_SetUpExaminationView");
static_assert(sizeof(InvestigationExaminationView_SetUpExaminationView) == 0x0000E8, "Wrong size on InvestigationExaminationView_SetUpExaminationView");
static_assert(offsetof(InvestigationExaminationView_SetUpExaminationView, NewDisplayInfo) == 0x000000, "Member 'InvestigationExaminationView_SetUpExaminationView::NewDisplayInfo' has a wrong offset!");
static_assert(offsetof(InvestigationExaminationView_SetUpExaminationView, SourceSlot) == 0x0000D0, "Member 'InvestigationExaminationView_SetUpExaminationView::SourceSlot' has a wrong offset!");
static_assert(offsetof(InvestigationExaminationView_SetUpExaminationView, NewItemData) == 0x0000D8, "Member 'InvestigationExaminationView_SetUpExaminationView::NewItemData' has a wrong offset!");
static_assert(offsetof(InvestigationExaminationView_SetUpExaminationView, PlayExpansionAnimation) == 0x0000E0, "Member 'InvestigationExaminationView_SetUpExaminationView::PlayExpansionAnimation' has a wrong offset!");
static_assert(offsetof(InvestigationExaminationView_SetUpExaminationView, bPlaySound) == 0x0000E1, "Member 'InvestigationExaminationView_SetUpExaminationView::bPlaySound' has a wrong offset!");

// Function ObsidianFox.InvestigationExaminationView.UpdatePageCounter
// 0x000C (0x000C - 0x0000)
struct InvestigationExaminationView_UpdatePageCounter final
{
public:
	EItemDisplayInfoType                          ItemType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Current;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvestigationExaminationView_UpdatePageCounter) == 0x000004, "Wrong alignment on InvestigationExaminationView_UpdatePageCounter");
static_assert(sizeof(InvestigationExaminationView_UpdatePageCounter) == 0x00000C, "Wrong size on InvestigationExaminationView_UpdatePageCounter");
static_assert(offsetof(InvestigationExaminationView_UpdatePageCounter, ItemType) == 0x000000, "Member 'InvestigationExaminationView_UpdatePageCounter::ItemType' has a wrong offset!");
static_assert(offsetof(InvestigationExaminationView_UpdatePageCounter, Current) == 0x000004, "Member 'InvestigationExaminationView_UpdatePageCounter::Current' has a wrong offset!");
static_assert(offsetof(InvestigationExaminationView_UpdatePageCounter, Total) == 0x000008, "Member 'InvestigationExaminationView_UpdatePageCounter::Total' has a wrong offset!");

// Function ObsidianFox.InvestigationExaminationView.GetCurrentItemData
// 0x0008 (0x0008 - 0x0000)
struct InvestigationExaminationView_GetCurrentItemData final
{
public:
	const class UItemData*                        ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvestigationExaminationView_GetCurrentItemData) == 0x000008, "Wrong alignment on InvestigationExaminationView_GetCurrentItemData");
static_assert(sizeof(InvestigationExaminationView_GetCurrentItemData) == 0x000008, "Wrong size on InvestigationExaminationView_GetCurrentItemData");
static_assert(offsetof(InvestigationExaminationView_GetCurrentItemData, ReturnValue) == 0x000000, "Member 'InvestigationExaminationView_GetCurrentItemData::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.OFSlotWidget.OnSlotHovered__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct OFSlotWidget_OnSlotHovered__DelegateSignature final
{
public:
	class UOFSlotWidget*                          SlotWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFSlotWidget_OnSlotHovered__DelegateSignature) == 0x000008, "Wrong alignment on OFSlotWidget_OnSlotHovered__DelegateSignature");
static_assert(sizeof(OFSlotWidget_OnSlotHovered__DelegateSignature) == 0x000008, "Wrong size on OFSlotWidget_OnSlotHovered__DelegateSignature");
static_assert(offsetof(OFSlotWidget_OnSlotHovered__DelegateSignature, SlotWidget) == 0x000000, "Member 'OFSlotWidget_OnSlotHovered__DelegateSignature::SlotWidget' has a wrong offset!");

// DelegateFunction ObsidianFox.OFSlotWidget.OnSlotPressed__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct OFSlotWidget_OnSlotPressed__DelegateSignature final
{
public:
	class UOFSlotWidget*                          SlotWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemData*                              ItemData;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFSlotWidget_OnSlotPressed__DelegateSignature) == 0x000008, "Wrong alignment on OFSlotWidget_OnSlotPressed__DelegateSignature");
static_assert(sizeof(OFSlotWidget_OnSlotPressed__DelegateSignature) == 0x000010, "Wrong size on OFSlotWidget_OnSlotPressed__DelegateSignature");
static_assert(offsetof(OFSlotWidget_OnSlotPressed__DelegateSignature, SlotWidget) == 0x000000, "Member 'OFSlotWidget_OnSlotPressed__DelegateSignature::SlotWidget' has a wrong offset!");
static_assert(offsetof(OFSlotWidget_OnSlotPressed__DelegateSignature, ItemData) == 0x000008, "Member 'OFSlotWidget_OnSlotPressed__DelegateSignature::ItemData' has a wrong offset!");

// Function ObsidianFox.OFSlotWidget.UpdateSlotUsingItemData
// 0x0028 (0x0028 - 0x0000)
struct OFSlotWidget_UpdateSlotUsingItemData final
{
public:
	TSoftObjectPtr<class UItemData>               ItemData;                                          // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFSlotWidget_UpdateSlotUsingItemData) == 0x000008, "Wrong alignment on OFSlotWidget_UpdateSlotUsingItemData");
static_assert(sizeof(OFSlotWidget_UpdateSlotUsingItemData) == 0x000028, "Wrong size on OFSlotWidget_UpdateSlotUsingItemData");
static_assert(offsetof(OFSlotWidget_UpdateSlotUsingItemData, ItemData) == 0x000000, "Member 'OFSlotWidget_UpdateSlotUsingItemData::ItemData' has a wrong offset!");

// Function ObsidianFox.OFSlotWidget.GetCurrentName
// 0x0018 (0x0018 - 0x0000)
struct OFSlotWidget_GetCurrentName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFSlotWidget_GetCurrentName) == 0x000008, "Wrong alignment on OFSlotWidget_GetCurrentName");
static_assert(sizeof(OFSlotWidget_GetCurrentName) == 0x000018, "Wrong size on OFSlotWidget_GetCurrentName");
static_assert(offsetof(OFSlotWidget_GetCurrentName, ReturnValue) == 0x000000, "Member 'OFSlotWidget_GetCurrentName::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFSlotWidget.GetCurrentShortDescription
// 0x0018 (0x0018 - 0x0000)
struct OFSlotWidget_GetCurrentShortDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFSlotWidget_GetCurrentShortDescription) == 0x000008, "Wrong alignment on OFSlotWidget_GetCurrentShortDescription");
static_assert(sizeof(OFSlotWidget_GetCurrentShortDescription) == 0x000018, "Wrong size on OFSlotWidget_GetCurrentShortDescription");
static_assert(offsetof(OFSlotWidget_GetCurrentShortDescription, ReturnValue) == 0x000000, "Member 'OFSlotWidget_GetCurrentShortDescription::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFSlotWidget.GetImageGeometry
// 0x0038 (0x0038 - 0x0000)
struct OFSlotWidget_GetImageGeometry final
{
public:
	struct FGeometry                              ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFSlotWidget_GetImageGeometry) == 0x000004, "Wrong alignment on OFSlotWidget_GetImageGeometry");
static_assert(sizeof(OFSlotWidget_GetImageGeometry) == 0x000038, "Wrong size on OFSlotWidget_GetImageGeometry");
static_assert(offsetof(OFSlotWidget_GetImageGeometry, ReturnValue) == 0x000000, "Member 'OFSlotWidget_GetImageGeometry::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFSlotWidget.GetSlotItemData
// 0x0028 (0x0028 - 0x0000)
struct OFSlotWidget_GetSlotItemData final
{
public:
	TSoftObjectPtr<class UItemData>               ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFSlotWidget_GetSlotItemData) == 0x000008, "Wrong alignment on OFSlotWidget_GetSlotItemData");
static_assert(sizeof(OFSlotWidget_GetSlotItemData) == 0x000028, "Wrong size on OFSlotWidget_GetSlotItemData");
static_assert(offsetof(OFSlotWidget_GetSlotItemData, ReturnValue) == 0x000000, "Member 'OFSlotWidget_GetSlotItemData::ReturnValue' has a wrong offset!");

// Function ObsidianFox.InvestigationWidget.OnItemLookedAt
// 0x0028 (0x0028 - 0x0000)
struct InvestigationWidget_OnItemLookedAt final
{
public:
	TSoftObjectPtr<class UItemData>               Item;                                              // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvestigationWidget_OnItemLookedAt) == 0x000008, "Wrong alignment on InvestigationWidget_OnItemLookedAt");
static_assert(sizeof(InvestigationWidget_OnItemLookedAt) == 0x000028, "Wrong size on InvestigationWidget_OnItemLookedAt");
static_assert(offsetof(InvestigationWidget_OnItemLookedAt, Item) == 0x000000, "Member 'InvestigationWidget_OnItemLookedAt::Item' has a wrong offset!");

// Function ObsidianFox.InvestigationWidget.OpenExaminationViewWithItem
// 0x0010 (0x0010 - 0x0000)
struct InvestigationWidget_OpenExaminationViewWithItem final
{
public:
	const class UItemData*                        ItemData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutomaticPlaySound;                               // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InvestigationWidget_OpenExaminationViewWithItem) == 0x000008, "Wrong alignment on InvestigationWidget_OpenExaminationViewWithItem");
static_assert(sizeof(InvestigationWidget_OpenExaminationViewWithItem) == 0x000010, "Wrong size on InvestigationWidget_OpenExaminationViewWithItem");
static_assert(offsetof(InvestigationWidget_OpenExaminationViewWithItem, ItemData) == 0x000000, "Member 'InvestigationWidget_OpenExaminationViewWithItem::ItemData' has a wrong offset!");
static_assert(offsetof(InvestigationWidget_OpenExaminationViewWithItem, bAutomaticPlaySound) == 0x000008, "Member 'InvestigationWidget_OpenExaminationViewWithItem::bAutomaticPlaySound' has a wrong offset!");

// Function ObsidianFox.InvestigationWidget.SetOpenObjectives
// 0x0001 (0x0001 - 0x0000)
struct InvestigationWidget_SetOpenObjectives final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvestigationWidget_SetOpenObjectives) == 0x000001, "Wrong alignment on InvestigationWidget_SetOpenObjectives");
static_assert(sizeof(InvestigationWidget_SetOpenObjectives) == 0x000001, "Wrong size on InvestigationWidget_SetOpenObjectives");
static_assert(offsetof(InvestigationWidget_SetOpenObjectives, bValue) == 0x000000, "Member 'InvestigationWidget_SetOpenObjectives::bValue' has a wrong offset!");

// Function ObsidianFox.InvestigationWidget.SwitchBetweenWidgetsHandler
// 0x0010 (0x0010 - 0x0000)
struct InvestigationWidget_SwitchBetweenWidgetsHandler final
{
public:
	struct FInputActionValue                      InputActionValue;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvestigationWidget_SwitchBetweenWidgetsHandler) == 0x000004, "Wrong alignment on InvestigationWidget_SwitchBetweenWidgetsHandler");
static_assert(sizeof(InvestigationWidget_SwitchBetweenWidgetsHandler) == 0x000010, "Wrong size on InvestigationWidget_SwitchBetweenWidgetsHandler");
static_assert(offsetof(InvestigationWidget_SwitchBetweenWidgetsHandler, InputActionValue) == 0x000000, "Member 'InvestigationWidget_SwitchBetweenWidgetsHandler::InputActionValue' has a wrong offset!");

// Function ObsidianFox.InvestigationWidget.SwitchWidget
// 0x0001 (0x0001 - 0x0000)
struct InvestigationWidget_SwitchWidget final
{
public:
	bool                                          bMoveRight;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InvestigationWidget_SwitchWidget) == 0x000001, "Wrong alignment on InvestigationWidget_SwitchWidget");
static_assert(sizeof(InvestigationWidget_SwitchWidget) == 0x000001, "Wrong size on InvestigationWidget_SwitchWidget");
static_assert(offsetof(InvestigationWidget_SwitchWidget, bMoveRight) == 0x000000, "Member 'InvestigationWidget_SwitchWidget::bMoveRight' has a wrong offset!");

// Function ObsidianFox.ItemData_Clues.GetClueMesh
// 0x0008 (0x0008 - 0x0000)
struct ItemData_Clues_GetClueMesh final
{
public:
	class UStaticMesh*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemData_Clues_GetClueMesh) == 0x000008, "Wrong alignment on ItemData_Clues_GetClueMesh");
static_assert(sizeof(ItemData_Clues_GetClueMesh) == 0x000008, "Wrong size on ItemData_Clues_GetClueMesh");
static_assert(offsetof(ItemData_Clues_GetClueMesh, ReturnValue) == 0x000000, "Member 'ItemData_Clues_GetClueMesh::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ItemPickup.TraceForPickupTransform
// 0x00B0 (0x00B0 - 0x0000)
struct ItemPickup_TraceForPickupTransform final
{
public:
	const class ACharacter*                       InteractingCharacter;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceCapsuleHalfRadius;                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceCapsuleHalfHeight;                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TraceComplex;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TraceProfileName;                                  // 0x0014(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockingAngleThreshold;                            // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHit;                                            // 0x0020(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemPickup_TraceForPickupTransform) == 0x000008, "Wrong alignment on ItemPickup_TraceForPickupTransform");
static_assert(sizeof(ItemPickup_TraceForPickupTransform) == 0x0000B0, "Wrong size on ItemPickup_TraceForPickupTransform");
static_assert(offsetof(ItemPickup_TraceForPickupTransform, InteractingCharacter) == 0x000000, "Member 'ItemPickup_TraceForPickupTransform::InteractingCharacter' has a wrong offset!");
static_assert(offsetof(ItemPickup_TraceForPickupTransform, TraceCapsuleHalfRadius) == 0x000008, "Member 'ItemPickup_TraceForPickupTransform::TraceCapsuleHalfRadius' has a wrong offset!");
static_assert(offsetof(ItemPickup_TraceForPickupTransform, TraceCapsuleHalfHeight) == 0x00000C, "Member 'ItemPickup_TraceForPickupTransform::TraceCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(ItemPickup_TraceForPickupTransform, TraceComplex) == 0x000010, "Member 'ItemPickup_TraceForPickupTransform::TraceComplex' has a wrong offset!");
static_assert(offsetof(ItemPickup_TraceForPickupTransform, TraceProfileName) == 0x000014, "Member 'ItemPickup_TraceForPickupTransform::TraceProfileName' has a wrong offset!");
static_assert(offsetof(ItemPickup_TraceForPickupTransform, BlockingAngleThreshold) == 0x00001C, "Member 'ItemPickup_TraceForPickupTransform::BlockingAngleThreshold' has a wrong offset!");
static_assert(offsetof(ItemPickup_TraceForPickupTransform, OutHit) == 0x000020, "Member 'ItemPickup_TraceForPickupTransform::OutHit' has a wrong offset!");
static_assert(offsetof(ItemPickup_TraceForPickupTransform, ReturnValue) == 0x0000A8, "Member 'ItemPickup_TraceForPickupTransform::ReturnValue' has a wrong offset!");

// Function ObsidianFox.KeyBindingTextureDataAsset.GetKeyTextures
// 0x0058 (0x0058 - 0x0000)
struct KeyBindingTextureDataAsset_GetKeyTextures final
{
public:
	const class UWorld*                           World;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FKey, TSoftObjectPtr<class UTexture2D>> ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyBindingTextureDataAsset_GetKeyTextures) == 0x000008, "Wrong alignment on KeyBindingTextureDataAsset_GetKeyTextures");
static_assert(sizeof(KeyBindingTextureDataAsset_GetKeyTextures) == 0x000058, "Wrong size on KeyBindingTextureDataAsset_GetKeyTextures");
static_assert(offsetof(KeyBindingTextureDataAsset_GetKeyTextures, World) == 0x000000, "Member 'KeyBindingTextureDataAsset_GetKeyTextures::World' has a wrong offset!");
static_assert(offsetof(KeyBindingTextureDataAsset_GetKeyTextures, ReturnValue) == 0x000008, "Member 'KeyBindingTextureDataAsset_GetKeyTextures::ReturnValue' has a wrong offset!");

// Function ObsidianFox.KeyBindingTextureDataAsset.GetNameForKey
// 0x0030 (0x0030 - 0x0000)
struct KeyBindingTextureDataAsset_GetNameForKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyBindingTextureDataAsset_GetNameForKey) == 0x000008, "Wrong alignment on KeyBindingTextureDataAsset_GetNameForKey");
static_assert(sizeof(KeyBindingTextureDataAsset_GetNameForKey) == 0x000030, "Wrong size on KeyBindingTextureDataAsset_GetNameForKey");
static_assert(offsetof(KeyBindingTextureDataAsset_GetNameForKey, Key) == 0x000000, "Member 'KeyBindingTextureDataAsset_GetNameForKey::Key' has a wrong offset!");
static_assert(offsetof(KeyBindingTextureDataAsset_GetNameForKey, ReturnValue) == 0x000018, "Member 'KeyBindingTextureDataAsset_GetNameForKey::ReturnValue' has a wrong offset!");

// Function ObsidianFox.KeyBindingTextureDataAsset.GetUniversalTexture
// 0x0040 (0x0040 - 0x0000)
struct KeyBindingTextureDataAsset_GetUniversalTexture final
{
public:
	class FText                                   KeyName;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0018(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeyBindingTextureDataAsset_GetUniversalTexture) == 0x000008, "Wrong alignment on KeyBindingTextureDataAsset_GetUniversalTexture");
static_assert(sizeof(KeyBindingTextureDataAsset_GetUniversalTexture) == 0x000040, "Wrong size on KeyBindingTextureDataAsset_GetUniversalTexture");
static_assert(offsetof(KeyBindingTextureDataAsset_GetUniversalTexture, KeyName) == 0x000000, "Member 'KeyBindingTextureDataAsset_GetUniversalTexture::KeyName' has a wrong offset!");
static_assert(offsetof(KeyBindingTextureDataAsset_GetUniversalTexture, ReturnValue) == 0x000018, "Member 'KeyBindingTextureDataAsset_GetUniversalTexture::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.LocationTrackingSubsystem.OnLocationUpdated__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct LocationTrackingSubsystem_OnLocationUpdated__DelegateSignature final
{
public:
	struct FGameplayTagContainer                  LocationTags;                                      // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocationTrackingSubsystem_OnLocationUpdated__DelegateSignature) == 0x000008, "Wrong alignment on LocationTrackingSubsystem_OnLocationUpdated__DelegateSignature");
static_assert(sizeof(LocationTrackingSubsystem_OnLocationUpdated__DelegateSignature) == 0x000020, "Wrong size on LocationTrackingSubsystem_OnLocationUpdated__DelegateSignature");
static_assert(offsetof(LocationTrackingSubsystem_OnLocationUpdated__DelegateSignature, LocationTags) == 0x000000, "Member 'LocationTrackingSubsystem_OnLocationUpdated__DelegateSignature::LocationTags' has a wrong offset!");

// Function ObsidianFox.LocationTrackingSubsystem.GetCurrentLocationTags
// 0x0020 (0x0020 - 0x0000)
struct LocationTrackingSubsystem_GetCurrentLocationTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocationTrackingSubsystem_GetCurrentLocationTags) == 0x000008, "Wrong alignment on LocationTrackingSubsystem_GetCurrentLocationTags");
static_assert(sizeof(LocationTrackingSubsystem_GetCurrentLocationTags) == 0x000020, "Wrong size on LocationTrackingSubsystem_GetCurrentLocationTags");
static_assert(offsetof(LocationTrackingSubsystem_GetCurrentLocationTags, ReturnValue) == 0x000000, "Member 'LocationTrackingSubsystem_GetCurrentLocationTags::ReturnValue' has a wrong offset!");

// Function ObsidianFox.LocationTrackingSubsystem.GetDercetoLocationTag
// 0x0008 (0x0008 - 0x0000)
struct LocationTrackingSubsystem_GetDercetoLocationTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocationTrackingSubsystem_GetDercetoLocationTag) == 0x000004, "Wrong alignment on LocationTrackingSubsystem_GetDercetoLocationTag");
static_assert(sizeof(LocationTrackingSubsystem_GetDercetoLocationTag) == 0x000008, "Wrong size on LocationTrackingSubsystem_GetDercetoLocationTag");
static_assert(offsetof(LocationTrackingSubsystem_GetDercetoLocationTag, ReturnValue) == 0x000000, "Member 'LocationTrackingSubsystem_GetDercetoLocationTag::ReturnValue' has a wrong offset!");

// Function ObsidianFox.LocationTrackingSubsystem.PlayerIsInDerceto
// 0x0001 (0x0001 - 0x0000)
struct LocationTrackingSubsystem_PlayerIsInDerceto final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocationTrackingSubsystem_PlayerIsInDerceto) == 0x000001, "Wrong alignment on LocationTrackingSubsystem_PlayerIsInDerceto");
static_assert(sizeof(LocationTrackingSubsystem_PlayerIsInDerceto) == 0x000001, "Wrong size on LocationTrackingSubsystem_PlayerIsInDerceto");
static_assert(offsetof(LocationTrackingSubsystem_PlayerIsInDerceto, ReturnValue) == 0x000000, "Member 'LocationTrackingSubsystem_PlayerIsInDerceto::ReturnValue' has a wrong offset!");

// Function ObsidianFox.LocationTrackingSubsystem.PlayerIsInLocation
// 0x000C (0x000C - 0x0000)
struct LocationTrackingSubsystem_PlayerIsInLocation final
{
public:
	struct FGameplayTag                           LocationTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LocationTrackingSubsystem_PlayerIsInLocation) == 0x000004, "Wrong alignment on LocationTrackingSubsystem_PlayerIsInLocation");
static_assert(sizeof(LocationTrackingSubsystem_PlayerIsInLocation) == 0x00000C, "Wrong size on LocationTrackingSubsystem_PlayerIsInLocation");
static_assert(offsetof(LocationTrackingSubsystem_PlayerIsInLocation, LocationTag) == 0x000000, "Member 'LocationTrackingSubsystem_PlayerIsInLocation::LocationTag' has a wrong offset!");
static_assert(offsetof(LocationTrackingSubsystem_PlayerIsInLocation, ReturnValue) == 0x000008, "Member 'LocationTrackingSubsystem_PlayerIsInLocation::ReturnValue' has a wrong offset!");

// Function ObsidianFox.MainMenuPT.LeftStickY
// 0x0004 (0x0004 - 0x0000)
struct MainMenuPT_LeftStickY final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuPT_LeftStickY) == 0x000004, "Wrong alignment on MainMenuPT_LeftStickY");
static_assert(sizeof(MainMenuPT_LeftStickY) == 0x000004, "Wrong size on MainMenuPT_LeftStickY");
static_assert(offsetof(MainMenuPT_LeftStickY, Val) == 0x000000, "Member 'MainMenuPT_LeftStickY::Val' has a wrong offset!");

// Function ObsidianFox.MapMarkerDoorComponent.InteractingWithDoor
// 0x0008 (0x0008 - 0x0000)
struct MapMarkerDoorComponent_InteractingWithDoor final
{
public:
	class ACharacter*                             InteractionCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapMarkerDoorComponent_InteractingWithDoor) == 0x000008, "Wrong alignment on MapMarkerDoorComponent_InteractingWithDoor");
static_assert(sizeof(MapMarkerDoorComponent_InteractingWithDoor) == 0x000008, "Wrong size on MapMarkerDoorComponent_InteractingWithDoor");
static_assert(offsetof(MapMarkerDoorComponent_InteractingWithDoor, InteractionCharacter) == 0x000000, "Member 'MapMarkerDoorComponent_InteractingWithDoor::InteractionCharacter' has a wrong offset!");

// Function ObsidianFox.MapMarkerDoorComponent.OnDoorStateSetHandler
// 0x0002 (0x0002 - 0x0000)
struct MapMarkerDoorComponent_OnDoorStateSetHandler final
{
public:
	EDoorLockState                                NewLockState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDoorLockState                                OldLockState;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapMarkerDoorComponent_OnDoorStateSetHandler) == 0x000001, "Wrong alignment on MapMarkerDoorComponent_OnDoorStateSetHandler");
static_assert(sizeof(MapMarkerDoorComponent_OnDoorStateSetHandler) == 0x000002, "Wrong size on MapMarkerDoorComponent_OnDoorStateSetHandler");
static_assert(offsetof(MapMarkerDoorComponent_OnDoorStateSetHandler, NewLockState) == 0x000000, "Member 'MapMarkerDoorComponent_OnDoorStateSetHandler::NewLockState' has a wrong offset!");
static_assert(offsetof(MapMarkerDoorComponent_OnDoorStateSetHandler, OldLockState) == 0x000001, "Member 'MapMarkerDoorComponent_OnDoorStateSetHandler::OldLockState' has a wrong offset!");

// Function ObsidianFox.MapMarkerPuzzleComponent.SetIsSolvable
// 0x0001 (0x0001 - 0x0000)
struct MapMarkerPuzzleComponent_SetIsSolvable final
{
public:
	bool                                          bSolvable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapMarkerPuzzleComponent_SetIsSolvable) == 0x000001, "Wrong alignment on MapMarkerPuzzleComponent_SetIsSolvable");
static_assert(sizeof(MapMarkerPuzzleComponent_SetIsSolvable) == 0x000001, "Wrong size on MapMarkerPuzzleComponent_SetIsSolvable");
static_assert(offsetof(MapMarkerPuzzleComponent_SetIsSolvable, bSolvable) == 0x000000, "Member 'MapMarkerPuzzleComponent_SetIsSolvable::bSolvable' has a wrong offset!");

// Function ObsidianFox.MapPositionActor.GetDistanceToMapOrthographicCamera
// 0x0004 (0x0004 - 0x0000)
struct MapPositionActor_GetDistanceToMapOrthographicCamera final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapPositionActor_GetDistanceToMapOrthographicCamera) == 0x000004, "Wrong alignment on MapPositionActor_GetDistanceToMapOrthographicCamera");
static_assert(sizeof(MapPositionActor_GetDistanceToMapOrthographicCamera) == 0x000004, "Wrong size on MapPositionActor_GetDistanceToMapOrthographicCamera");
static_assert(offsetof(MapPositionActor_GetDistanceToMapOrthographicCamera, ReturnValue) == 0x000000, "Member 'MapPositionActor_GetDistanceToMapOrthographicCamera::ReturnValue' has a wrong offset!");

// Function ObsidianFox.MapTeleporter.ConvertToLightWeightSoftRef
// 0x0028 (0x0028 - 0x0000)
struct MapTeleporter_ConvertToLightWeightSoftRef final
{
public:
	TSoftObjectPtr<class UWorld>                  OldLevelReference;                                 // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapTeleporter_ConvertToLightWeightSoftRef) == 0x000008, "Wrong alignment on MapTeleporter_ConvertToLightWeightSoftRef");
static_assert(sizeof(MapTeleporter_ConvertToLightWeightSoftRef) == 0x000028, "Wrong size on MapTeleporter_ConvertToLightWeightSoftRef");
static_assert(offsetof(MapTeleporter_ConvertToLightWeightSoftRef, OldLevelReference) == 0x000000, "Member 'MapTeleporter_ConvertToLightWeightSoftRef::OldLevelReference' has a wrong offset!");

// Function ObsidianFox.MapTrackerVolume.ComponentBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct MapTrackerVolume_ComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    InOverlappedComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOtherActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    InOtherComp;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InOtherBodyIndex;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             InSweepResult;                                     // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapTrackerVolume_ComponentBeginOverlap) == 0x000008, "Wrong alignment on MapTrackerVolume_ComponentBeginOverlap");
static_assert(sizeof(MapTrackerVolume_ComponentBeginOverlap) == 0x0000A8, "Wrong size on MapTrackerVolume_ComponentBeginOverlap");
static_assert(offsetof(MapTrackerVolume_ComponentBeginOverlap, InOverlappedComponent) == 0x000000, "Member 'MapTrackerVolume_ComponentBeginOverlap::InOverlappedComponent' has a wrong offset!");
static_assert(offsetof(MapTrackerVolume_ComponentBeginOverlap, InOtherActor) == 0x000008, "Member 'MapTrackerVolume_ComponentBeginOverlap::InOtherActor' has a wrong offset!");
static_assert(offsetof(MapTrackerVolume_ComponentBeginOverlap, InOtherComp) == 0x000010, "Member 'MapTrackerVolume_ComponentBeginOverlap::InOtherComp' has a wrong offset!");
static_assert(offsetof(MapTrackerVolume_ComponentBeginOverlap, InOtherBodyIndex) == 0x000018, "Member 'MapTrackerVolume_ComponentBeginOverlap::InOtherBodyIndex' has a wrong offset!");
static_assert(offsetof(MapTrackerVolume_ComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'MapTrackerVolume_ComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(MapTrackerVolume_ComponentBeginOverlap, InSweepResult) == 0x000020, "Member 'MapTrackerVolume_ComponentBeginOverlap::InSweepResult' has a wrong offset!");

// Function ObsidianFox.MapTrackerVolume.ComponentEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct MapTrackerVolume_ComponentEndOverlap final
{
public:
	class UPrimitiveComponent*                    InOverlappedComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOtherActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    InOtherComp;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InOtherBodyIndex;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MapTrackerVolume_ComponentEndOverlap) == 0x000008, "Wrong alignment on MapTrackerVolume_ComponentEndOverlap");
static_assert(sizeof(MapTrackerVolume_ComponentEndOverlap) == 0x000020, "Wrong size on MapTrackerVolume_ComponentEndOverlap");
static_assert(offsetof(MapTrackerVolume_ComponentEndOverlap, InOverlappedComponent) == 0x000000, "Member 'MapTrackerVolume_ComponentEndOverlap::InOverlappedComponent' has a wrong offset!");
static_assert(offsetof(MapTrackerVolume_ComponentEndOverlap, InOtherActor) == 0x000008, "Member 'MapTrackerVolume_ComponentEndOverlap::InOtherActor' has a wrong offset!");
static_assert(offsetof(MapTrackerVolume_ComponentEndOverlap, InOtherComp) == 0x000010, "Member 'MapTrackerVolume_ComponentEndOverlap::InOtherComp' has a wrong offset!");
static_assert(offsetof(MapTrackerVolume_ComponentEndOverlap, InOtherBodyIndex) == 0x000018, "Member 'MapTrackerVolume_ComponentEndOverlap::InOtherBodyIndex' has a wrong offset!");

// Function ObsidianFox.WeaponAnimationComponent.ChangeHeldWeapon
// 0x0010 (0x0010 - 0x0000)
struct WeaponAnimationComponent_ChangeHeldWeapon final
{
public:
	class AOFWeaponActor*                         NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstantSwitch;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponAnimationComponent_ChangeHeldWeapon) == 0x000008, "Wrong alignment on WeaponAnimationComponent_ChangeHeldWeapon");
static_assert(sizeof(WeaponAnimationComponent_ChangeHeldWeapon) == 0x000010, "Wrong size on WeaponAnimationComponent_ChangeHeldWeapon");
static_assert(offsetof(WeaponAnimationComponent_ChangeHeldWeapon, NewWeapon) == 0x000000, "Member 'WeaponAnimationComponent_ChangeHeldWeapon::NewWeapon' has a wrong offset!");
static_assert(offsetof(WeaponAnimationComponent_ChangeHeldWeapon, bInstantSwitch) == 0x000008, "Member 'WeaponAnimationComponent_ChangeHeldWeapon::bInstantSwitch' has a wrong offset!");

// Function ObsidianFox.WeaponAnimationComponent.HolsterWeapon
// 0x0010 (0x0010 - 0x0000)
struct WeaponAnimationComponent_HolsterWeapon final
{
public:
	class AOFWeaponActor*                         WeaponToHolster;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstant;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponAnimationComponent_HolsterWeapon) == 0x000008, "Wrong alignment on WeaponAnimationComponent_HolsterWeapon");
static_assert(sizeof(WeaponAnimationComponent_HolsterWeapon) == 0x000010, "Wrong size on WeaponAnimationComponent_HolsterWeapon");
static_assert(offsetof(WeaponAnimationComponent_HolsterWeapon, WeaponToHolster) == 0x000000, "Member 'WeaponAnimationComponent_HolsterWeapon::WeaponToHolster' has a wrong offset!");
static_assert(offsetof(WeaponAnimationComponent_HolsterWeapon, bInstant) == 0x000008, "Member 'WeaponAnimationComponent_HolsterWeapon::bInstant' has a wrong offset!");

// Function ObsidianFox.WeaponAnimationComponent.IsHolsterByTimerBlocked
// 0x0001 (0x0001 - 0x0000)
struct WeaponAnimationComponent_IsHolsterByTimerBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimationComponent_IsHolsterByTimerBlocked) == 0x000001, "Wrong alignment on WeaponAnimationComponent_IsHolsterByTimerBlocked");
static_assert(sizeof(WeaponAnimationComponent_IsHolsterByTimerBlocked) == 0x000001, "Wrong size on WeaponAnimationComponent_IsHolsterByTimerBlocked");
static_assert(offsetof(WeaponAnimationComponent_IsHolsterByTimerBlocked, ReturnValue) == 0x000000, "Member 'WeaponAnimationComponent_IsHolsterByTimerBlocked::ReturnValue' has a wrong offset!");

// Function ObsidianFox.WeaponAnimationComponent.MoveHeldWeaponToSocket
// 0x0001 (0x0001 - 0x0000)
struct WeaponAnimationComponent_MoveHeldWeaponToSocket final
{
public:
	EEquipmentSocket                              SocketLocation;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimationComponent_MoveHeldWeaponToSocket) == 0x000001, "Wrong alignment on WeaponAnimationComponent_MoveHeldWeaponToSocket");
static_assert(sizeof(WeaponAnimationComponent_MoveHeldWeaponToSocket) == 0x000001, "Wrong size on WeaponAnimationComponent_MoveHeldWeaponToSocket");
static_assert(offsetof(WeaponAnimationComponent_MoveHeldWeaponToSocket, SocketLocation) == 0x000000, "Member 'WeaponAnimationComponent_MoveHeldWeaponToSocket::SocketLocation' has a wrong offset!");

// Function ObsidianFox.WeaponAnimationComponent.MoveWeaponToEquipmentSocket
// 0x0010 (0x0010 - 0x0000)
struct WeaponAnimationComponent_MoveWeaponToEquipmentSocket final
{
public:
	class AOFWeaponActor*                         Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEquipmentSocket                              SocketLocation;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponAnimationComponent_MoveWeaponToEquipmentSocket) == 0x000008, "Wrong alignment on WeaponAnimationComponent_MoveWeaponToEquipmentSocket");
static_assert(sizeof(WeaponAnimationComponent_MoveWeaponToEquipmentSocket) == 0x000010, "Wrong size on WeaponAnimationComponent_MoveWeaponToEquipmentSocket");
static_assert(offsetof(WeaponAnimationComponent_MoveWeaponToEquipmentSocket, Weapon) == 0x000000, "Member 'WeaponAnimationComponent_MoveWeaponToEquipmentSocket::Weapon' has a wrong offset!");
static_assert(offsetof(WeaponAnimationComponent_MoveWeaponToEquipmentSocket, SocketLocation) == 0x000008, "Member 'WeaponAnimationComponent_MoveWeaponToEquipmentSocket::SocketLocation' has a wrong offset!");

// Function ObsidianFox.WeaponAnimationComponent.OnCombatStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct WeaponAnimationComponent_OnCombatStatusChanged final
{
public:
	bool                                          bInCombat;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimationComponent_OnCombatStatusChanged) == 0x000001, "Wrong alignment on WeaponAnimationComponent_OnCombatStatusChanged");
static_assert(sizeof(WeaponAnimationComponent_OnCombatStatusChanged) == 0x000001, "Wrong size on WeaponAnimationComponent_OnCombatStatusChanged");
static_assert(offsetof(WeaponAnimationComponent_OnCombatStatusChanged, bInCombat) == 0x000000, "Member 'WeaponAnimationComponent_OnCombatStatusChanged::bInCombat' has a wrong offset!");

// Function ObsidianFox.WeaponAnimationComponent.OnMontageEndedHandleForHolster
// 0x0010 (0x0010 - 0x0000)
struct WeaponAnimationComponent_OnMontageEndedHandleForHolster final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponAnimationComponent_OnMontageEndedHandleForHolster) == 0x000008, "Wrong alignment on WeaponAnimationComponent_OnMontageEndedHandleForHolster");
static_assert(sizeof(WeaponAnimationComponent_OnMontageEndedHandleForHolster) == 0x000010, "Wrong size on WeaponAnimationComponent_OnMontageEndedHandleForHolster");
static_assert(offsetof(WeaponAnimationComponent_OnMontageEndedHandleForHolster, Montage) == 0x000000, "Member 'WeaponAnimationComponent_OnMontageEndedHandleForHolster::Montage' has a wrong offset!");
static_assert(offsetof(WeaponAnimationComponent_OnMontageEndedHandleForHolster, bInterrupted) == 0x000008, "Member 'WeaponAnimationComponent_OnMontageEndedHandleForHolster::bInterrupted' has a wrong offset!");

// Function ObsidianFox.WeaponAnimationComponent.OnMontageEndedHandleForUnholster
// 0x0010 (0x0010 - 0x0000)
struct WeaponAnimationComponent_OnMontageEndedHandleForUnholster final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponAnimationComponent_OnMontageEndedHandleForUnholster) == 0x000008, "Wrong alignment on WeaponAnimationComponent_OnMontageEndedHandleForUnholster");
static_assert(sizeof(WeaponAnimationComponent_OnMontageEndedHandleForUnholster) == 0x000010, "Wrong size on WeaponAnimationComponent_OnMontageEndedHandleForUnholster");
static_assert(offsetof(WeaponAnimationComponent_OnMontageEndedHandleForUnholster, Montage) == 0x000000, "Member 'WeaponAnimationComponent_OnMontageEndedHandleForUnholster::Montage' has a wrong offset!");
static_assert(offsetof(WeaponAnimationComponent_OnMontageEndedHandleForUnholster, bInterrupted) == 0x000008, "Member 'WeaponAnimationComponent_OnMontageEndedHandleForUnholster::bInterrupted' has a wrong offset!");

// Function ObsidianFox.WeaponAnimationComponent.OnPauseHolsterTimerMultiBoolValueChanged
// 0x0001 (0x0001 - 0x0000)
struct WeaponAnimationComponent_OnPauseHolsterTimerMultiBoolValueChanged final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimationComponent_OnPauseHolsterTimerMultiBoolValueChanged) == 0x000001, "Wrong alignment on WeaponAnimationComponent_OnPauseHolsterTimerMultiBoolValueChanged");
static_assert(sizeof(WeaponAnimationComponent_OnPauseHolsterTimerMultiBoolValueChanged) == 0x000001, "Wrong size on WeaponAnimationComponent_OnPauseHolsterTimerMultiBoolValueChanged");
static_assert(offsetof(WeaponAnimationComponent_OnPauseHolsterTimerMultiBoolValueChanged, NewValue) == 0x000000, "Member 'WeaponAnimationComponent_OnPauseHolsterTimerMultiBoolValueChanged::NewValue' has a wrong offset!");

// Function ObsidianFox.WeaponAnimationComponent.OnWeaponEquip
// 0x0020 (0x0020 - 0x0000)
struct WeaponAnimationComponent_OnWeaponEquip final
{
public:
	struct FWeaponInfo                            EquippedWeapon;                                    // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponInfo                            UnequippedWeapon;                                  // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimationComponent_OnWeaponEquip) == 0x000008, "Wrong alignment on WeaponAnimationComponent_OnWeaponEquip");
static_assert(sizeof(WeaponAnimationComponent_OnWeaponEquip) == 0x000020, "Wrong size on WeaponAnimationComponent_OnWeaponEquip");
static_assert(offsetof(WeaponAnimationComponent_OnWeaponEquip, EquippedWeapon) == 0x000000, "Member 'WeaponAnimationComponent_OnWeaponEquip::EquippedWeapon' has a wrong offset!");
static_assert(offsetof(WeaponAnimationComponent_OnWeaponEquip, UnequippedWeapon) == 0x000010, "Member 'WeaponAnimationComponent_OnWeaponEquip::UnequippedWeapon' has a wrong offset!");

// Function ObsidianFox.WeaponAnimationComponent.ParentCinematicModeStatusChangedHandler
// 0x0001 (0x0001 - 0x0000)
struct WeaponAnimationComponent_ParentCinematicModeStatusChangedHandler final
{
public:
	bool                                          bIsTransitioningToCinematicMode;                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimationComponent_ParentCinematicModeStatusChangedHandler) == 0x000001, "Wrong alignment on WeaponAnimationComponent_ParentCinematicModeStatusChangedHandler");
static_assert(sizeof(WeaponAnimationComponent_ParentCinematicModeStatusChangedHandler) == 0x000001, "Wrong size on WeaponAnimationComponent_ParentCinematicModeStatusChangedHandler");
static_assert(offsetof(WeaponAnimationComponent_ParentCinematicModeStatusChangedHandler, bIsTransitioningToCinematicMode) == 0x000000, "Member 'WeaponAnimationComponent_ParentCinematicModeStatusChangedHandler::bIsTransitioningToCinematicMode' has a wrong offset!");

// Function ObsidianFox.WeaponAnimationComponent.PauseHolsterTimer
// 0x0008 (0x0008 - 0x0000)
struct WeaponAnimationComponent_PauseHolsterTimer final
{
public:
	class UObject*                                LockOwnerReference;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimationComponent_PauseHolsterTimer) == 0x000008, "Wrong alignment on WeaponAnimationComponent_PauseHolsterTimer");
static_assert(sizeof(WeaponAnimationComponent_PauseHolsterTimer) == 0x000008, "Wrong size on WeaponAnimationComponent_PauseHolsterTimer");
static_assert(offsetof(WeaponAnimationComponent_PauseHolsterTimer, LockOwnerReference) == 0x000000, "Member 'WeaponAnimationComponent_PauseHolsterTimer::LockOwnerReference' has a wrong offset!");

// Function ObsidianFox.WeaponAnimationComponent.ResumeHolsterTimer
// 0x0008 (0x0008 - 0x0000)
struct WeaponAnimationComponent_ResumeHolsterTimer final
{
public:
	class UObject*                                LockOwnerReference;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimationComponent_ResumeHolsterTimer) == 0x000008, "Wrong alignment on WeaponAnimationComponent_ResumeHolsterTimer");
static_assert(sizeof(WeaponAnimationComponent_ResumeHolsterTimer) == 0x000008, "Wrong size on WeaponAnimationComponent_ResumeHolsterTimer");
static_assert(offsetof(WeaponAnimationComponent_ResumeHolsterTimer, LockOwnerReference) == 0x000000, "Member 'WeaponAnimationComponent_ResumeHolsterTimer::LockOwnerReference' has a wrong offset!");

// Function ObsidianFox.WeaponAnimationComponent.StartHolsterTimer
// 0x0008 (0x0008 - 0x0000)
struct WeaponAnimationComponent_StartHolsterTimer final
{
public:
	const class UObject*                          LockOwnerReference;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimationComponent_StartHolsterTimer) == 0x000008, "Wrong alignment on WeaponAnimationComponent_StartHolsterTimer");
static_assert(sizeof(WeaponAnimationComponent_StartHolsterTimer) == 0x000008, "Wrong size on WeaponAnimationComponent_StartHolsterTimer");
static_assert(offsetof(WeaponAnimationComponent_StartHolsterTimer, LockOwnerReference) == 0x000000, "Member 'WeaponAnimationComponent_StartHolsterTimer::LockOwnerReference' has a wrong offset!");

// Function ObsidianFox.WeaponAnimationComponent.StopHolsterTimer
// 0x0008 (0x0008 - 0x0000)
struct WeaponAnimationComponent_StopHolsterTimer final
{
public:
	const class UObject*                          LockOwnerReference;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimationComponent_StopHolsterTimer) == 0x000008, "Wrong alignment on WeaponAnimationComponent_StopHolsterTimer");
static_assert(sizeof(WeaponAnimationComponent_StopHolsterTimer) == 0x000008, "Wrong size on WeaponAnimationComponent_StopHolsterTimer");
static_assert(offsetof(WeaponAnimationComponent_StopHolsterTimer, LockOwnerReference) == 0x000000, "Member 'WeaponAnimationComponent_StopHolsterTimer::LockOwnerReference' has a wrong offset!");

// Function ObsidianFox.WeaponAnimationComponent.UnHolsterWeapon
// 0x0010 (0x0010 - 0x0000)
struct WeaponAnimationComponent_UnHolsterWeapon final
{
public:
	class AOFWeaponActor*                         NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstant;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponAnimationComponent_UnHolsterWeapon) == 0x000008, "Wrong alignment on WeaponAnimationComponent_UnHolsterWeapon");
static_assert(sizeof(WeaponAnimationComponent_UnHolsterWeapon) == 0x000010, "Wrong size on WeaponAnimationComponent_UnHolsterWeapon");
static_assert(offsetof(WeaponAnimationComponent_UnHolsterWeapon, NewWeapon) == 0x000000, "Member 'WeaponAnimationComponent_UnHolsterWeapon::NewWeapon' has a wrong offset!");
static_assert(offsetof(WeaponAnimationComponent_UnHolsterWeapon, bInstant) == 0x000008, "Member 'WeaponAnimationComponent_UnHolsterWeapon::bInstant' has a wrong offset!");

// Function ObsidianFox.WeaponAnimationComponent.IsHolstering
// 0x0001 (0x0001 - 0x0000)
struct WeaponAnimationComponent_IsHolstering final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimationComponent_IsHolstering) == 0x000001, "Wrong alignment on WeaponAnimationComponent_IsHolstering");
static_assert(sizeof(WeaponAnimationComponent_IsHolstering) == 0x000001, "Wrong size on WeaponAnimationComponent_IsHolstering");
static_assert(offsetof(WeaponAnimationComponent_IsHolstering, ReturnValue) == 0x000000, "Member 'WeaponAnimationComponent_IsHolstering::ReturnValue' has a wrong offset!");

// Function ObsidianFox.WeaponAnimationComponent.IsUnHolstering
// 0x0001 (0x0001 - 0x0000)
struct WeaponAnimationComponent_IsUnHolstering final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimationComponent_IsUnHolstering) == 0x000001, "Wrong alignment on WeaponAnimationComponent_IsUnHolstering");
static_assert(sizeof(WeaponAnimationComponent_IsUnHolstering) == 0x000001, "Wrong size on WeaponAnimationComponent_IsUnHolstering");
static_assert(offsetof(WeaponAnimationComponent_IsUnHolstering, ReturnValue) == 0x000000, "Member 'WeaponAnimationComponent_IsUnHolstering::ReturnValue' has a wrong offset!");

// Function ObsidianFox.MeleeAttackHitZonesComponent.CheckIfHit
// 0x0018 (0x0018 - 0x0000)
struct MeleeAttackHitZonesComponent_CheckIfHit final
{
public:
	const class UDamagePoint*                     DamagePoint;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeleeAttackHitZonesComponent_CheckIfHit) == 0x000008, "Wrong alignment on MeleeAttackHitZonesComponent_CheckIfHit");
static_assert(sizeof(MeleeAttackHitZonesComponent_CheckIfHit) == 0x000018, "Wrong size on MeleeAttackHitZonesComponent_CheckIfHit");
static_assert(offsetof(MeleeAttackHitZonesComponent_CheckIfHit, DamagePoint) == 0x000000, "Member 'MeleeAttackHitZonesComponent_CheckIfHit::DamagePoint' has a wrong offset!");
static_assert(offsetof(MeleeAttackHitZonesComponent_CheckIfHit, HitLocation) == 0x000008, "Member 'MeleeAttackHitZonesComponent_CheckIfHit::HitLocation' has a wrong offset!");
static_assert(offsetof(MeleeAttackHitZonesComponent_CheckIfHit, ReturnValue) == 0x000014, "Member 'MeleeAttackHitZonesComponent_CheckIfHit::ReturnValue' has a wrong offset!");

// Function ObsidianFox.MeleeWeaponActor.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct MeleeWeaponActor_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeleeWeaponActor_OnOverlapEnd) == 0x000008, "Wrong alignment on MeleeWeaponActor_OnOverlapEnd");
static_assert(sizeof(MeleeWeaponActor_OnOverlapEnd) == 0x000010, "Wrong size on MeleeWeaponActor_OnOverlapEnd");
static_assert(offsetof(MeleeWeaponActor_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'MeleeWeaponActor_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(MeleeWeaponActor_OnOverlapEnd, OtherActor) == 0x000008, "Member 'MeleeWeaponActor_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function ObsidianFox.MeleeWeaponActor.RemoveImmuneActor
// 0x0008 (0x0008 - 0x0000)
struct MeleeWeaponActor_RemoveImmuneActor final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeleeWeaponActor_RemoveImmuneActor) == 0x000008, "Wrong alignment on MeleeWeaponActor_RemoveImmuneActor");
static_assert(sizeof(MeleeWeaponActor_RemoveImmuneActor) == 0x000008, "Wrong size on MeleeWeaponActor_RemoveImmuneActor");
static_assert(offsetof(MeleeWeaponActor_RemoveImmuneActor, OtherActor) == 0x000000, "Member 'MeleeWeaponActor_RemoveImmuneActor::OtherActor' has a wrong offset!");

// DelegateFunction ObsidianFox.MeleeWeaponActor.WeaponAttack__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct MeleeWeaponActor_WeaponAttack__DelegateSignature final
{
public:
	struct FGameplayTag                           AttackEvent;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeleeWeaponActor_WeaponAttack__DelegateSignature) == 0x000004, "Wrong alignment on MeleeWeaponActor_WeaponAttack__DelegateSignature");
static_assert(sizeof(MeleeWeaponActor_WeaponAttack__DelegateSignature) == 0x000008, "Wrong size on MeleeWeaponActor_WeaponAttack__DelegateSignature");
static_assert(offsetof(MeleeWeaponActor_WeaponAttack__DelegateSignature, AttackEvent) == 0x000000, "Member 'MeleeWeaponActor_WeaponAttack__DelegateSignature::AttackEvent' has a wrong offset!");

// Function ObsidianFox.MenuInventorySelectionSlot.SetItemSlotVisibility
// 0x0001 (0x0001 - 0x0000)
struct MenuInventorySelectionSlot_SetItemSlotVisibility final
{
public:
	ESlateVisibility                              NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuInventorySelectionSlot_SetItemSlotVisibility) == 0x000001, "Wrong alignment on MenuInventorySelectionSlot_SetItemSlotVisibility");
static_assert(sizeof(MenuInventorySelectionSlot_SetItemSlotVisibility) == 0x000001, "Wrong size on MenuInventorySelectionSlot_SetItemSlotVisibility");
static_assert(offsetof(MenuInventorySelectionSlot_SetItemSlotVisibility, NewVisibility) == 0x000000, "Member 'MenuInventorySelectionSlot_SetItemSlotVisibility::NewVisibility' has a wrong offset!");

// Function ObsidianFox.MenuInventorySelectionSlot.UpdateSlot
// 0x0008 (0x0008 - 0x0000)
struct MenuInventorySelectionSlot_UpdateSlot final
{
public:
	const class UItemData*                        NewItemData;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuInventorySelectionSlot_UpdateSlot) == 0x000008, "Wrong alignment on MenuInventorySelectionSlot_UpdateSlot");
static_assert(sizeof(MenuInventorySelectionSlot_UpdateSlot) == 0x000008, "Wrong size on MenuInventorySelectionSlot_UpdateSlot");
static_assert(offsetof(MenuInventorySelectionSlot_UpdateSlot, NewItemData) == 0x000000, "Member 'MenuInventorySelectionSlot_UpdateSlot::NewItemData' has a wrong offset!");

// Function ObsidianFox.MenuInventorySelectionSlot.UpdateSlotFromSoftReferenceData
// 0x0028 (0x0028 - 0x0000)
struct MenuInventorySelectionSlot_UpdateSlotFromSoftReferenceData final
{
public:
	TSoftObjectPtr<class UItemData>               NewItemData;                                       // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuInventorySelectionSlot_UpdateSlotFromSoftReferenceData) == 0x000008, "Wrong alignment on MenuInventorySelectionSlot_UpdateSlotFromSoftReferenceData");
static_assert(sizeof(MenuInventorySelectionSlot_UpdateSlotFromSoftReferenceData) == 0x000028, "Wrong size on MenuInventorySelectionSlot_UpdateSlotFromSoftReferenceData");
static_assert(offsetof(MenuInventorySelectionSlot_UpdateSlotFromSoftReferenceData, NewItemData) == 0x000000, "Member 'MenuInventorySelectionSlot_UpdateSlotFromSoftReferenceData::NewItemData' has a wrong offset!");

// Function ObsidianFox.MetricStatsSystem.OnCharacterDeathHandler
// 0x0008 (0x0008 - 0x0000)
struct MetricStatsSystem_OnCharacterDeathHandler final
{
public:
	class AObsidianFoxCharacter*                  InCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MetricStatsSystem_OnCharacterDeathHandler) == 0x000008, "Wrong alignment on MetricStatsSystem_OnCharacterDeathHandler");
static_assert(sizeof(MetricStatsSystem_OnCharacterDeathHandler) == 0x000008, "Wrong size on MetricStatsSystem_OnCharacterDeathHandler");
static_assert(offsetof(MetricStatsSystem_OnCharacterDeathHandler, InCharacter) == 0x000000, "Member 'MetricStatsSystem_OnCharacterDeathHandler::InCharacter' has a wrong offset!");

// Function ObsidianFox.MetricStatsSystem.OnItemAddedHandler
// 0x0008 (0x0008 - 0x0000)
struct MetricStatsSystem_OnItemAddedHandler final
{
public:
	const class UItemData*                        InItemData;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MetricStatsSystem_OnItemAddedHandler) == 0x000008, "Wrong alignment on MetricStatsSystem_OnItemAddedHandler");
static_assert(sizeof(MetricStatsSystem_OnItemAddedHandler) == 0x000008, "Wrong size on MetricStatsSystem_OnItemAddedHandler");
static_assert(offsetof(MetricStatsSystem_OnItemAddedHandler, InItemData) == 0x000000, "Member 'MetricStatsSystem_OnItemAddedHandler::InItemData' has a wrong offset!");

// Function ObsidianFox.MetricStatsSystem.OnItemRemovedHandler
// 0x0008 (0x0008 - 0x0000)
struct MetricStatsSystem_OnItemRemovedHandler final
{
public:
	const class UItemData*                        InItemData;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MetricStatsSystem_OnItemRemovedHandler) == 0x000008, "Wrong alignment on MetricStatsSystem_OnItemRemovedHandler");
static_assert(sizeof(MetricStatsSystem_OnItemRemovedHandler) == 0x000008, "Wrong size on MetricStatsSystem_OnItemRemovedHandler");
static_assert(offsetof(MetricStatsSystem_OnItemRemovedHandler, InItemData) == 0x000000, "Member 'MetricStatsSystem_OnItemRemovedHandler::InItemData' has a wrong offset!");

// Function ObsidianFox.MetricStatsSystem.OnPuzzleSolvedGenericHandler
// 0x0008 (0x0008 - 0x0000)
struct MetricStatsSystem_OnPuzzleSolvedGenericHandler final
{
public:
	class APuzzleActor*                           InPuzzleActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MetricStatsSystem_OnPuzzleSolvedGenericHandler) == 0x000008, "Wrong alignment on MetricStatsSystem_OnPuzzleSolvedGenericHandler");
static_assert(sizeof(MetricStatsSystem_OnPuzzleSolvedGenericHandler) == 0x000008, "Wrong size on MetricStatsSystem_OnPuzzleSolvedGenericHandler");
static_assert(offsetof(MetricStatsSystem_OnPuzzleSolvedGenericHandler, InPuzzleActor) == 0x000000, "Member 'MetricStatsSystem_OnPuzzleSolvedGenericHandler::InPuzzleActor' has a wrong offset!");

// Function ObsidianFox.MetricStatsSystem.OnSettingsChangedDelegate
// 0x0008 (0x0008 - 0x0000)
struct MetricStatsSystem_OnSettingsChangedDelegate final
{
public:
	class UOFGameUserSettings*                    Settings;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MetricStatsSystem_OnSettingsChangedDelegate) == 0x000008, "Wrong alignment on MetricStatsSystem_OnSettingsChangedDelegate");
static_assert(sizeof(MetricStatsSystem_OnSettingsChangedDelegate) == 0x000008, "Wrong size on MetricStatsSystem_OnSettingsChangedDelegate");
static_assert(offsetof(MetricStatsSystem_OnSettingsChangedDelegate, Settings) == 0x000000, "Member 'MetricStatsSystem_OnSettingsChangedDelegate::Settings' has a wrong offset!");

// Function ObsidianFox.MetricStatsSystem.OnWeaponFireHandler
// 0x0008 (0x0008 - 0x0000)
struct MetricStatsSystem_OnWeaponFireHandler final
{
public:
	class AHitscanWeaponActor*                    InWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MetricStatsSystem_OnWeaponFireHandler) == 0x000008, "Wrong alignment on MetricStatsSystem_OnWeaponFireHandler");
static_assert(sizeof(MetricStatsSystem_OnWeaponFireHandler) == 0x000008, "Wrong size on MetricStatsSystem_OnWeaponFireHandler");
static_assert(offsetof(MetricStatsSystem_OnWeaponFireHandler, InWeapon) == 0x000000, "Member 'MetricStatsSystem_OnWeaponFireHandler::InWeapon' has a wrong offset!");

// Function ObsidianFox.ObjectiveNotesWidget.PlayerGuidanceStateUpdatedHandler
// 0x0002 (0x0002 - 0x0000)
struct ObjectiveNotesWidget_PlayerGuidanceStateUpdatedHandler final
{
public:
	EPlayerGuidanceSystem                         System;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bState;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveNotesWidget_PlayerGuidanceStateUpdatedHandler) == 0x000001, "Wrong alignment on ObjectiveNotesWidget_PlayerGuidanceStateUpdatedHandler");
static_assert(sizeof(ObjectiveNotesWidget_PlayerGuidanceStateUpdatedHandler) == 0x000002, "Wrong size on ObjectiveNotesWidget_PlayerGuidanceStateUpdatedHandler");
static_assert(offsetof(ObjectiveNotesWidget_PlayerGuidanceStateUpdatedHandler, System) == 0x000000, "Member 'ObjectiveNotesWidget_PlayerGuidanceStateUpdatedHandler::System' has a wrong offset!");
static_assert(offsetof(ObjectiveNotesWidget_PlayerGuidanceStateUpdatedHandler, bState) == 0x000001, "Member 'ObjectiveNotesWidget_PlayerGuidanceStateUpdatedHandler::bState' has a wrong offset!");

// Function ObsidianFox.ObjectiveNotesWidget.SetNewNotes
// 0x0050 (0x0050 - 0x0000)
struct ObjectiveNotesWidget_SetNewNotes final
{
public:
	struct FObjectiveChapter                      ObjectiveChapterInfo;                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectiveNotesWidget_SetNewNotes) == 0x000008, "Wrong alignment on ObjectiveNotesWidget_SetNewNotes");
static_assert(sizeof(ObjectiveNotesWidget_SetNewNotes) == 0x000050, "Wrong size on ObjectiveNotesWidget_SetNewNotes");
static_assert(offsetof(ObjectiveNotesWidget_SetNewNotes, ObjectiveChapterInfo) == 0x000000, "Member 'ObjectiveNotesWidget_SetNewNotes::ObjectiveChapterInfo' has a wrong offset!");

// Function ObsidianFox.ObsidianFoxGameMode.Tweak
// 0x0028 (0x0028 - 0x0000)
struct ObsidianFoxGameMode_Tweak final
{
public:
	class FString                                 Table;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ObsidianFoxGameMode_Tweak) == 0x000008, "Wrong alignment on ObsidianFoxGameMode_Tweak");
static_assert(sizeof(ObsidianFoxGameMode_Tweak) == 0x000028, "Wrong size on ObsidianFoxGameMode_Tweak");
static_assert(offsetof(ObsidianFoxGameMode_Tweak, Table) == 0x000000, "Member 'ObsidianFoxGameMode_Tweak::Table' has a wrong offset!");
static_assert(offsetof(ObsidianFoxGameMode_Tweak, Key) == 0x000010, "Member 'ObsidianFoxGameMode_Tweak::Key' has a wrong offset!");
static_assert(offsetof(ObsidianFoxGameMode_Tweak, Value) == 0x000020, "Member 'ObsidianFoxGameMode_Tweak::Value' has a wrong offset!");

// Function ObsidianFox.OFActivitiesSubsystem.OnChapterUpdatedHandler
// 0x0010 (0x0010 - 0x0000)
struct OFActivitiesSubsystem_OnChapterUpdatedHandler final
{
public:
	struct FGameplayTag                           NewTag;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OldTag;                                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFActivitiesSubsystem_OnChapterUpdatedHandler) == 0x000004, "Wrong alignment on OFActivitiesSubsystem_OnChapterUpdatedHandler");
static_assert(sizeof(OFActivitiesSubsystem_OnChapterUpdatedHandler) == 0x000010, "Wrong size on OFActivitiesSubsystem_OnChapterUpdatedHandler");
static_assert(offsetof(OFActivitiesSubsystem_OnChapterUpdatedHandler, NewTag) == 0x000000, "Member 'OFActivitiesSubsystem_OnChapterUpdatedHandler::NewTag' has a wrong offset!");
static_assert(offsetof(OFActivitiesSubsystem_OnChapterUpdatedHandler, OldTag) == 0x000008, "Member 'OFActivitiesSubsystem_OnChapterUpdatedHandler::OldTag' has a wrong offset!");

// Function ObsidianFox.OFActivitiesSubsystem.OnFactUpdatedHandler
// 0x000C (0x000C - 0x0000)
struct OFActivitiesSubsystem_OnFactUpdatedHandler final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubscriptionTagChangeType                    ChangeType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFActivitiesSubsystem_OnFactUpdatedHandler) == 0x000004, "Wrong alignment on OFActivitiesSubsystem_OnFactUpdatedHandler");
static_assert(sizeof(OFActivitiesSubsystem_OnFactUpdatedHandler) == 0x00000C, "Wrong size on OFActivitiesSubsystem_OnFactUpdatedHandler");
static_assert(offsetof(OFActivitiesSubsystem_OnFactUpdatedHandler, Tag) == 0x000000, "Member 'OFActivitiesSubsystem_OnFactUpdatedHandler::Tag' has a wrong offset!");
static_assert(offsetof(OFActivitiesSubsystem_OnFactUpdatedHandler, ChangeType) == 0x000008, "Member 'OFActivitiesSubsystem_OnFactUpdatedHandler::ChangeType' has a wrong offset!");

// Function ObsidianFox.OFArchiveGridWidget.GetHasItems
// 0x0001 (0x0001 - 0x0000)
struct OFArchiveGridWidget_GetHasItems final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFArchiveGridWidget_GetHasItems) == 0x000001, "Wrong alignment on OFArchiveGridWidget_GetHasItems");
static_assert(sizeof(OFArchiveGridWidget_GetHasItems) == 0x000001, "Wrong size on OFArchiveGridWidget_GetHasItems");
static_assert(offsetof(OFArchiveGridWidget_GetHasItems, ReturnValue) == 0x000000, "Member 'OFArchiveGridWidget_GetHasItems::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_ActorUtils.DisableActor
// 0x0010 (0x0010 - 0x0000)
struct OFBFL_ActorUtils_DisableActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDisable;                                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFBFL_ActorUtils_DisableActor) == 0x000008, "Wrong alignment on OFBFL_ActorUtils_DisableActor");
static_assert(sizeof(OFBFL_ActorUtils_DisableActor) == 0x000010, "Wrong size on OFBFL_ActorUtils_DisableActor");
static_assert(offsetof(OFBFL_ActorUtils_DisableActor, InActor) == 0x000000, "Member 'OFBFL_ActorUtils_DisableActor::InActor' has a wrong offset!");
static_assert(offsetof(OFBFL_ActorUtils_DisableActor, InDisable) == 0x000008, "Member 'OFBFL_ActorUtils_DisableActor::InDisable' has a wrong offset!");

// Function ObsidianFox.OFBFL_ActorUtils.MoveEnemiesToSpawnLocation
// 0x0018 (0x0018 - 0x0000)
struct OFBFL_ActorUtils_MoveEnemiesToSpawnLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_ActorUtils_MoveEnemiesToSpawnLocation) == 0x000008, "Wrong alignment on OFBFL_ActorUtils_MoveEnemiesToSpawnLocation");
static_assert(sizeof(OFBFL_ActorUtils_MoveEnemiesToSpawnLocation) == 0x000018, "Wrong size on OFBFL_ActorUtils_MoveEnemiesToSpawnLocation");
static_assert(offsetof(OFBFL_ActorUtils_MoveEnemiesToSpawnLocation, WorldContextObject) == 0x000000, "Member 'OFBFL_ActorUtils_MoveEnemiesToSpawnLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OFBFL_ActorUtils_MoveEnemiesToSpawnLocation, Origin) == 0x000008, "Member 'OFBFL_ActorUtils_MoveEnemiesToSpawnLocation::Origin' has a wrong offset!");
static_assert(offsetof(OFBFL_ActorUtils_MoveEnemiesToSpawnLocation, Radius) == 0x000014, "Member 'OFBFL_ActorUtils_MoveEnemiesToSpawnLocation::Radius' has a wrong offset!");

// Function ObsidianFox.OFBFL_ActorUtils.PreStreamTextures_ActorsWithTag
// 0x0018 (0x0018 - 0x0000)
struct OFBFL_ActorUtils_PreStreamTextures_ActorsWithTag final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceUpdateTextures;                               // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFBFL_ActorUtils_PreStreamTextures_ActorsWithTag) == 0x000008, "Wrong alignment on OFBFL_ActorUtils_PreStreamTextures_ActorsWithTag");
static_assert(sizeof(OFBFL_ActorUtils_PreStreamTextures_ActorsWithTag) == 0x000018, "Wrong size on OFBFL_ActorUtils_PreStreamTextures_ActorsWithTag");
static_assert(offsetof(OFBFL_ActorUtils_PreStreamTextures_ActorsWithTag, WorldContextObject) == 0x000000, "Member 'OFBFL_ActorUtils_PreStreamTextures_ActorsWithTag::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OFBFL_ActorUtils_PreStreamTextures_ActorsWithTag, Tag) == 0x000008, "Member 'OFBFL_ActorUtils_PreStreamTextures_ActorsWithTag::Tag' has a wrong offset!");
static_assert(offsetof(OFBFL_ActorUtils_PreStreamTextures_ActorsWithTag, ForceUpdateTextures) == 0x000010, "Member 'OFBFL_ActorUtils_PreStreamTextures_ActorsWithTag::ForceUpdateTextures' has a wrong offset!");
static_assert(offsetof(OFBFL_ActorUtils_PreStreamTextures_ActorsWithTag, ReturnValue) == 0x000011, "Member 'OFBFL_ActorUtils_PreStreamTextures_ActorsWithTag::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_Input.ApplyInputAxis
// 0x0018 (0x0018 - 0x0000)
struct OFBFL_Input_ApplyInputAxis final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AxisName;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AxisValue;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFBFL_Input_ApplyInputAxis) == 0x000008, "Wrong alignment on OFBFL_Input_ApplyInputAxis");
static_assert(sizeof(OFBFL_Input_ApplyInputAxis) == 0x000018, "Wrong size on OFBFL_Input_ApplyInputAxis");
static_assert(offsetof(OFBFL_Input_ApplyInputAxis, Context) == 0x000000, "Member 'OFBFL_Input_ApplyInputAxis::Context' has a wrong offset!");
static_assert(offsetof(OFBFL_Input_ApplyInputAxis, AxisName) == 0x000008, "Member 'OFBFL_Input_ApplyInputAxis::AxisName' has a wrong offset!");
static_assert(offsetof(OFBFL_Input_ApplyInputAxis, AxisValue) == 0x000010, "Member 'OFBFL_Input_ApplyInputAxis::AxisValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_Input.FakeInputKey
// 0x0030 (0x0030 - 0x0000)
struct OFBFL_Input_FakeInputKey final
{
public:
	class APlayerController*                      InPlayerController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   EventType;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AmountDepressed;                                   // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGamepad;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFBFL_Input_FakeInputKey) == 0x000008, "Wrong alignment on OFBFL_Input_FakeInputKey");
static_assert(sizeof(OFBFL_Input_FakeInputKey) == 0x000030, "Wrong size on OFBFL_Input_FakeInputKey");
static_assert(offsetof(OFBFL_Input_FakeInputKey, InPlayerController) == 0x000000, "Member 'OFBFL_Input_FakeInputKey::InPlayerController' has a wrong offset!");
static_assert(offsetof(OFBFL_Input_FakeInputKey, Key) == 0x000008, "Member 'OFBFL_Input_FakeInputKey::Key' has a wrong offset!");
static_assert(offsetof(OFBFL_Input_FakeInputKey, EventType) == 0x000020, "Member 'OFBFL_Input_FakeInputKey::EventType' has a wrong offset!");
static_assert(offsetof(OFBFL_Input_FakeInputKey, AmountDepressed) == 0x000024, "Member 'OFBFL_Input_FakeInputKey::AmountDepressed' has a wrong offset!");
static_assert(offsetof(OFBFL_Input_FakeInputKey, bGamepad) == 0x000028, "Member 'OFBFL_Input_FakeInputKey::bGamepad' has a wrong offset!");

// Function ObsidianFox.OFBFL_PawnUtils.DisablePawn
// 0x0010 (0x0010 - 0x0000)
struct OFBFL_PawnUtils_DisablePawn final
{
public:
	class APawn*                                  InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InDisable;                                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFBFL_PawnUtils_DisablePawn) == 0x000008, "Wrong alignment on OFBFL_PawnUtils_DisablePawn");
static_assert(sizeof(OFBFL_PawnUtils_DisablePawn) == 0x000010, "Wrong size on OFBFL_PawnUtils_DisablePawn");
static_assert(offsetof(OFBFL_PawnUtils_DisablePawn, InPawn) == 0x000000, "Member 'OFBFL_PawnUtils_DisablePawn::InPawn' has a wrong offset!");
static_assert(offsetof(OFBFL_PawnUtils_DisablePawn, InDisable) == 0x000008, "Member 'OFBFL_PawnUtils_DisablePawn::InDisable' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.ActualValueToDisplayValue
// 0x0018 (0x0018 - 0x0000)
struct OFBFL_UI_ActualValueToDisplayValue final
{
public:
	float                                         ActualValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActualMaxValue;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActualMinValue;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayMaxValue;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayMinValue;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_ActualValueToDisplayValue) == 0x000004, "Wrong alignment on OFBFL_UI_ActualValueToDisplayValue");
static_assert(sizeof(OFBFL_UI_ActualValueToDisplayValue) == 0x000018, "Wrong size on OFBFL_UI_ActualValueToDisplayValue");
static_assert(offsetof(OFBFL_UI_ActualValueToDisplayValue, ActualValue) == 0x000000, "Member 'OFBFL_UI_ActualValueToDisplayValue::ActualValue' has a wrong offset!");
static_assert(offsetof(OFBFL_UI_ActualValueToDisplayValue, ActualMaxValue) == 0x000004, "Member 'OFBFL_UI_ActualValueToDisplayValue::ActualMaxValue' has a wrong offset!");
static_assert(offsetof(OFBFL_UI_ActualValueToDisplayValue, ActualMinValue) == 0x000008, "Member 'OFBFL_UI_ActualValueToDisplayValue::ActualMinValue' has a wrong offset!");
static_assert(offsetof(OFBFL_UI_ActualValueToDisplayValue, DisplayMaxValue) == 0x00000C, "Member 'OFBFL_UI_ActualValueToDisplayValue::DisplayMaxValue' has a wrong offset!");
static_assert(offsetof(OFBFL_UI_ActualValueToDisplayValue, DisplayMinValue) == 0x000010, "Member 'OFBFL_UI_ActualValueToDisplayValue::DisplayMinValue' has a wrong offset!");
static_assert(offsetof(OFBFL_UI_ActualValueToDisplayValue, ReturnValue) == 0x000014, "Member 'OFBFL_UI_ActualValueToDisplayValue::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.ActualValueToDisplayValueSens
// 0x0008 (0x0008 - 0x0000)
struct OFBFL_UI_ActualValueToDisplayValueSens final
{
public:
	float                                         ActualValue;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_ActualValueToDisplayValueSens) == 0x000004, "Wrong alignment on OFBFL_UI_ActualValueToDisplayValueSens");
static_assert(sizeof(OFBFL_UI_ActualValueToDisplayValueSens) == 0x000008, "Wrong size on OFBFL_UI_ActualValueToDisplayValueSens");
static_assert(offsetof(OFBFL_UI_ActualValueToDisplayValueSens, ActualValue) == 0x000000, "Member 'OFBFL_UI_ActualValueToDisplayValueSens::ActualValue' has a wrong offset!");
static_assert(offsetof(OFBFL_UI_ActualValueToDisplayValueSens, ReturnValue) == 0x000004, "Member 'OFBFL_UI_ActualValueToDisplayValueSens::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.DecrementAimSens
// 0x0004 (0x0004 - 0x0000)
struct OFBFL_UI_DecrementAimSens final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_DecrementAimSens) == 0x000004, "Wrong alignment on OFBFL_UI_DecrementAimSens");
static_assert(sizeof(OFBFL_UI_DecrementAimSens) == 0x000004, "Wrong size on OFBFL_UI_DecrementAimSens");
static_assert(offsetof(OFBFL_UI_DecrementAimSens, ReturnValue) == 0x000000, "Member 'OFBFL_UI_DecrementAimSens::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.DecrementBrightness
// 0x0004 (0x0004 - 0x0000)
struct OFBFL_UI_DecrementBrightness final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_DecrementBrightness) == 0x000004, "Wrong alignment on OFBFL_UI_DecrementBrightness");
static_assert(sizeof(OFBFL_UI_DecrementBrightness) == 0x000004, "Wrong size on OFBFL_UI_DecrementBrightness");
static_assert(offsetof(OFBFL_UI_DecrementBrightness, ReturnValue) == 0x000000, "Member 'OFBFL_UI_DecrementBrightness::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.DecrementCameraSens
// 0x0004 (0x0004 - 0x0000)
struct OFBFL_UI_DecrementCameraSens final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_DecrementCameraSens) == 0x000004, "Wrong alignment on OFBFL_UI_DecrementCameraSens");
static_assert(sizeof(OFBFL_UI_DecrementCameraSens) == 0x000004, "Wrong size on OFBFL_UI_DecrementCameraSens");
static_assert(offsetof(OFBFL_UI_DecrementCameraSens, ReturnValue) == 0x000000, "Member 'OFBFL_UI_DecrementCameraSens::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.DecrementContrast
// 0x0004 (0x0004 - 0x0000)
struct OFBFL_UI_DecrementContrast final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_DecrementContrast) == 0x000004, "Wrong alignment on OFBFL_UI_DecrementContrast");
static_assert(sizeof(OFBFL_UI_DecrementContrast) == 0x000004, "Wrong size on OFBFL_UI_DecrementContrast");
static_assert(offsetof(OFBFL_UI_DecrementContrast, ReturnValue) == 0x000000, "Member 'OFBFL_UI_DecrementContrast::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.DeleteInGameAndPauseMenu
// 0x0008 (0x0008 - 0x0000)
struct OFBFL_UI_DeleteInGameAndPauseMenu final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_DeleteInGameAndPauseMenu) == 0x000008, "Wrong alignment on OFBFL_UI_DeleteInGameAndPauseMenu");
static_assert(sizeof(OFBFL_UI_DeleteInGameAndPauseMenu) == 0x000008, "Wrong size on OFBFL_UI_DeleteInGameAndPauseMenu");
static_assert(offsetof(OFBFL_UI_DeleteInGameAndPauseMenu, WorldContextObject) == 0x000000, "Member 'OFBFL_UI_DeleteInGameAndPauseMenu::WorldContextObject' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.DisplayValueToActualValue
// 0x0018 (0x0018 - 0x0000)
struct OFBFL_UI_DisplayValueToActualValue final
{
public:
	float                                         DisplayValue;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActualMaxValue;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActualMinValue;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayMaxValue;                                   // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayMinValue;                                   // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_DisplayValueToActualValue) == 0x000004, "Wrong alignment on OFBFL_UI_DisplayValueToActualValue");
static_assert(sizeof(OFBFL_UI_DisplayValueToActualValue) == 0x000018, "Wrong size on OFBFL_UI_DisplayValueToActualValue");
static_assert(offsetof(OFBFL_UI_DisplayValueToActualValue, DisplayValue) == 0x000000, "Member 'OFBFL_UI_DisplayValueToActualValue::DisplayValue' has a wrong offset!");
static_assert(offsetof(OFBFL_UI_DisplayValueToActualValue, ActualMaxValue) == 0x000004, "Member 'OFBFL_UI_DisplayValueToActualValue::ActualMaxValue' has a wrong offset!");
static_assert(offsetof(OFBFL_UI_DisplayValueToActualValue, ActualMinValue) == 0x000008, "Member 'OFBFL_UI_DisplayValueToActualValue::ActualMinValue' has a wrong offset!");
static_assert(offsetof(OFBFL_UI_DisplayValueToActualValue, DisplayMaxValue) == 0x00000C, "Member 'OFBFL_UI_DisplayValueToActualValue::DisplayMaxValue' has a wrong offset!");
static_assert(offsetof(OFBFL_UI_DisplayValueToActualValue, DisplayMinValue) == 0x000010, "Member 'OFBFL_UI_DisplayValueToActualValue::DisplayMinValue' has a wrong offset!");
static_assert(offsetof(OFBFL_UI_DisplayValueToActualValue, ReturnValue) == 0x000014, "Member 'OFBFL_UI_DisplayValueToActualValue::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.DisplayValueToActualValueSens
// 0x0008 (0x0008 - 0x0000)
struct OFBFL_UI_DisplayValueToActualValueSens final
{
public:
	float                                         ReadableValue;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_DisplayValueToActualValueSens) == 0x000004, "Wrong alignment on OFBFL_UI_DisplayValueToActualValueSens");
static_assert(sizeof(OFBFL_UI_DisplayValueToActualValueSens) == 0x000008, "Wrong size on OFBFL_UI_DisplayValueToActualValueSens");
static_assert(offsetof(OFBFL_UI_DisplayValueToActualValueSens, ReadableValue) == 0x000000, "Member 'OFBFL_UI_DisplayValueToActualValueSens::ReadableValue' has a wrong offset!");
static_assert(offsetof(OFBFL_UI_DisplayValueToActualValueSens, ReturnValue) == 0x000004, "Member 'OFBFL_UI_DisplayValueToActualValueSens::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.GetCurrentAimSensDisplayValue
// 0x0004 (0x0004 - 0x0000)
struct OFBFL_UI_GetCurrentAimSensDisplayValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_GetCurrentAimSensDisplayValue) == 0x000004, "Wrong alignment on OFBFL_UI_GetCurrentAimSensDisplayValue");
static_assert(sizeof(OFBFL_UI_GetCurrentAimSensDisplayValue) == 0x000004, "Wrong size on OFBFL_UI_GetCurrentAimSensDisplayValue");
static_assert(offsetof(OFBFL_UI_GetCurrentAimSensDisplayValue, ReturnValue) == 0x000000, "Member 'OFBFL_UI_GetCurrentAimSensDisplayValue::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.GetCurrentBrightnessDisplayValue
// 0x0004 (0x0004 - 0x0000)
struct OFBFL_UI_GetCurrentBrightnessDisplayValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_GetCurrentBrightnessDisplayValue) == 0x000004, "Wrong alignment on OFBFL_UI_GetCurrentBrightnessDisplayValue");
static_assert(sizeof(OFBFL_UI_GetCurrentBrightnessDisplayValue) == 0x000004, "Wrong size on OFBFL_UI_GetCurrentBrightnessDisplayValue");
static_assert(offsetof(OFBFL_UI_GetCurrentBrightnessDisplayValue, ReturnValue) == 0x000000, "Member 'OFBFL_UI_GetCurrentBrightnessDisplayValue::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.GetCurrentCameraSensDisplayValue
// 0x0004 (0x0004 - 0x0000)
struct OFBFL_UI_GetCurrentCameraSensDisplayValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_GetCurrentCameraSensDisplayValue) == 0x000004, "Wrong alignment on OFBFL_UI_GetCurrentCameraSensDisplayValue");
static_assert(sizeof(OFBFL_UI_GetCurrentCameraSensDisplayValue) == 0x000004, "Wrong size on OFBFL_UI_GetCurrentCameraSensDisplayValue");
static_assert(offsetof(OFBFL_UI_GetCurrentCameraSensDisplayValue, ReturnValue) == 0x000000, "Member 'OFBFL_UI_GetCurrentCameraSensDisplayValue::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.GetCurrentContrastDisplayValue
// 0x0004 (0x0004 - 0x0000)
struct OFBFL_UI_GetCurrentContrastDisplayValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_GetCurrentContrastDisplayValue) == 0x000004, "Wrong alignment on OFBFL_UI_GetCurrentContrastDisplayValue");
static_assert(sizeof(OFBFL_UI_GetCurrentContrastDisplayValue) == 0x000004, "Wrong size on OFBFL_UI_GetCurrentContrastDisplayValue");
static_assert(offsetof(OFBFL_UI_GetCurrentContrastDisplayValue, ReturnValue) == 0x000000, "Member 'OFBFL_UI_GetCurrentContrastDisplayValue::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.GetCurrentFontForCulture
// 0x0008 (0x0008 - 0x0000)
struct OFBFL_UI_GetCurrentFontForCulture final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_GetCurrentFontForCulture) == 0x000008, "Wrong alignment on OFBFL_UI_GetCurrentFontForCulture");
static_assert(sizeof(OFBFL_UI_GetCurrentFontForCulture) == 0x000008, "Wrong size on OFBFL_UI_GetCurrentFontForCulture");
static_assert(offsetof(OFBFL_UI_GetCurrentFontForCulture, ReturnValue) == 0x000000, "Member 'OFBFL_UI_GetCurrentFontForCulture::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.GetMaxAllowedFOVUserSettings
// 0x0004 (0x0004 - 0x0000)
struct OFBFL_UI_GetMaxAllowedFOVUserSettings final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_GetMaxAllowedFOVUserSettings) == 0x000004, "Wrong alignment on OFBFL_UI_GetMaxAllowedFOVUserSettings");
static_assert(sizeof(OFBFL_UI_GetMaxAllowedFOVUserSettings) == 0x000004, "Wrong size on OFBFL_UI_GetMaxAllowedFOVUserSettings");
static_assert(offsetof(OFBFL_UI_GetMaxAllowedFOVUserSettings, ReturnValue) == 0x000000, "Member 'OFBFL_UI_GetMaxAllowedFOVUserSettings::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.GetMinAllowedFOVUserSettings
// 0x0004 (0x0004 - 0x0000)
struct OFBFL_UI_GetMinAllowedFOVUserSettings final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_GetMinAllowedFOVUserSettings) == 0x000004, "Wrong alignment on OFBFL_UI_GetMinAllowedFOVUserSettings");
static_assert(sizeof(OFBFL_UI_GetMinAllowedFOVUserSettings) == 0x000004, "Wrong size on OFBFL_UI_GetMinAllowedFOVUserSettings");
static_assert(offsetof(OFBFL_UI_GetMinAllowedFOVUserSettings, ReturnValue) == 0x000000, "Member 'OFBFL_UI_GetMinAllowedFOVUserSettings::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.GetParentWidgetInputHandlingBase
// 0x0010 (0x0010 - 0x0000)
struct OFBFL_UI_GetParentWidgetInputHandlingBase final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetInputHandlingBase*               ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_GetParentWidgetInputHandlingBase) == 0x000008, "Wrong alignment on OFBFL_UI_GetParentWidgetInputHandlingBase");
static_assert(sizeof(OFBFL_UI_GetParentWidgetInputHandlingBase) == 0x000010, "Wrong size on OFBFL_UI_GetParentWidgetInputHandlingBase");
static_assert(offsetof(OFBFL_UI_GetParentWidgetInputHandlingBase, InWidget) == 0x000000, "Member 'OFBFL_UI_GetParentWidgetInputHandlingBase::InWidget' has a wrong offset!");
static_assert(offsetof(OFBFL_UI_GetParentWidgetInputHandlingBase, ReturnValue) == 0x000008, "Member 'OFBFL_UI_GetParentWidgetInputHandlingBase::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.GetProjectType
// 0x0001 (0x0001 - 0x0000)
struct OFBFL_UI_GetProjectType final
{
public:
	EProjectType                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_GetProjectType) == 0x000001, "Wrong alignment on OFBFL_UI_GetProjectType");
static_assert(sizeof(OFBFL_UI_GetProjectType) == 0x000001, "Wrong size on OFBFL_UI_GetProjectType");
static_assert(offsetof(OFBFL_UI_GetProjectType, ReturnValue) == 0x000000, "Member 'OFBFL_UI_GetProjectType::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.GetQualitySettings
// 0x0050 (0x0050 - 0x0000)
struct OFBFL_UI_GetQualitySettings final
{
public:
	TMap<int32, class FText>                      ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_GetQualitySettings) == 0x000008, "Wrong alignment on OFBFL_UI_GetQualitySettings");
static_assert(sizeof(OFBFL_UI_GetQualitySettings) == 0x000050, "Wrong size on OFBFL_UI_GetQualitySettings");
static_assert(offsetof(OFBFL_UI_GetQualitySettings, ReturnValue) == 0x000000, "Member 'OFBFL_UI_GetQualitySettings::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.GetQualitySettingsValue
// 0x0020 (0x0020 - 0x0000)
struct OFBFL_UI_GetQualitySettingsValue final
{
public:
	int32                                         QualityLevel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_GetQualitySettingsValue) == 0x000008, "Wrong alignment on OFBFL_UI_GetQualitySettingsValue");
static_assert(sizeof(OFBFL_UI_GetQualitySettingsValue) == 0x000020, "Wrong size on OFBFL_UI_GetQualitySettingsValue");
static_assert(offsetof(OFBFL_UI_GetQualitySettingsValue, QualityLevel) == 0x000000, "Member 'OFBFL_UI_GetQualitySettingsValue::QualityLevel' has a wrong offset!");
static_assert(offsetof(OFBFL_UI_GetQualitySettingsValue, ReturnValue) == 0x000008, "Member 'OFBFL_UI_GetQualitySettingsValue::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.IncrementAimSens
// 0x0004 (0x0004 - 0x0000)
struct OFBFL_UI_IncrementAimSens final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_IncrementAimSens) == 0x000004, "Wrong alignment on OFBFL_UI_IncrementAimSens");
static_assert(sizeof(OFBFL_UI_IncrementAimSens) == 0x000004, "Wrong size on OFBFL_UI_IncrementAimSens");
static_assert(offsetof(OFBFL_UI_IncrementAimSens, ReturnValue) == 0x000000, "Member 'OFBFL_UI_IncrementAimSens::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.IncrementBrightness
// 0x0004 (0x0004 - 0x0000)
struct OFBFL_UI_IncrementBrightness final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_IncrementBrightness) == 0x000004, "Wrong alignment on OFBFL_UI_IncrementBrightness");
static_assert(sizeof(OFBFL_UI_IncrementBrightness) == 0x000004, "Wrong size on OFBFL_UI_IncrementBrightness");
static_assert(offsetof(OFBFL_UI_IncrementBrightness, ReturnValue) == 0x000000, "Member 'OFBFL_UI_IncrementBrightness::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.IncrementCameraSens
// 0x0004 (0x0004 - 0x0000)
struct OFBFL_UI_IncrementCameraSens final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_IncrementCameraSens) == 0x000004, "Wrong alignment on OFBFL_UI_IncrementCameraSens");
static_assert(sizeof(OFBFL_UI_IncrementCameraSens) == 0x000004, "Wrong size on OFBFL_UI_IncrementCameraSens");
static_assert(offsetof(OFBFL_UI_IncrementCameraSens, ReturnValue) == 0x000000, "Member 'OFBFL_UI_IncrementCameraSens::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.IncrementContrast
// 0x0004 (0x0004 - 0x0000)
struct OFBFL_UI_IncrementContrast final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBFL_UI_IncrementContrast) == 0x000004, "Wrong alignment on OFBFL_UI_IncrementContrast");
static_assert(sizeof(OFBFL_UI_IncrementContrast) == 0x000004, "Wrong size on OFBFL_UI_IncrementContrast");
static_assert(offsetof(OFBFL_UI_IncrementContrast, ReturnValue) == 0x000000, "Member 'OFBFL_UI_IncrementContrast::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBFL_UI.IsModuleLoaded
// 0x000C (0x000C - 0x0000)
struct OFBFL_UI_IsModuleLoaded final
{
public:
	class FName                                   NameModul;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFBFL_UI_IsModuleLoaded) == 0x000004, "Wrong alignment on OFBFL_UI_IsModuleLoaded");
static_assert(sizeof(OFBFL_UI_IsModuleLoaded) == 0x00000C, "Wrong size on OFBFL_UI_IsModuleLoaded");
static_assert(offsetof(OFBFL_UI_IsModuleLoaded, NameModul) == 0x000000, "Member 'OFBFL_UI_IsModuleLoaded::NameModul' has a wrong offset!");
static_assert(offsetof(OFBFL_UI_IsModuleLoaded, ReturnValue) == 0x000008, "Member 'OFBFL_UI_IsModuleLoaded::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.BlendCameraSettings
// 0x0178 (0x0178 - 0x0000)
struct OFBlueprintFunctionLibrary_BlendCameraSettings final
{
public:
	EEasingFunc                                   Function;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCameraBlendSettingsInput              A;                                                 // 0x0008(0x0078)(Parm, NativeAccessSpecifierPublic)
	struct FCameraBlendSettingsInput              B;                                                 // 0x0080(0x0078)(Parm, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x00F8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraBlendSettingsInput              ReturnValue;                                       // 0x0100(0x0078)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintFunctionLibrary_BlendCameraSettings) == 0x000008, "Wrong alignment on OFBlueprintFunctionLibrary_BlendCameraSettings");
static_assert(sizeof(OFBlueprintFunctionLibrary_BlendCameraSettings) == 0x000178, "Wrong size on OFBlueprintFunctionLibrary_BlendCameraSettings");
static_assert(offsetof(OFBlueprintFunctionLibrary_BlendCameraSettings, Function) == 0x000000, "Member 'OFBlueprintFunctionLibrary_BlendCameraSettings::Function' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_BlendCameraSettings, BlendExp) == 0x000004, "Member 'OFBlueprintFunctionLibrary_BlendCameraSettings::BlendExp' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_BlendCameraSettings, A) == 0x000008, "Member 'OFBlueprintFunctionLibrary_BlendCameraSettings::A' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_BlendCameraSettings, B) == 0x000080, "Member 'OFBlueprintFunctionLibrary_BlendCameraSettings::B' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_BlendCameraSettings, Alpha) == 0x0000F8, "Member 'OFBlueprintFunctionLibrary_BlendCameraSettings::Alpha' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_BlendCameraSettings, ReturnValue) == 0x000100, "Member 'OFBlueprintFunctionLibrary_BlendCameraSettings::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.DisableCameraModifiers
// 0x0018 (0x0018 - 0x0000)
struct OFBlueprintFunctionLibrary_DisableCameraModifiers final
{
public:
	struct FCameraModifierCollection              ModifierCollection;                                // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	bool                                          bImmediate;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFBlueprintFunctionLibrary_DisableCameraModifiers) == 0x000008, "Wrong alignment on OFBlueprintFunctionLibrary_DisableCameraModifiers");
static_assert(sizeof(OFBlueprintFunctionLibrary_DisableCameraModifiers) == 0x000018, "Wrong size on OFBlueprintFunctionLibrary_DisableCameraModifiers");
static_assert(offsetof(OFBlueprintFunctionLibrary_DisableCameraModifiers, ModifierCollection) == 0x000000, "Member 'OFBlueprintFunctionLibrary_DisableCameraModifiers::ModifierCollection' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_DisableCameraModifiers, bImmediate) == 0x000010, "Member 'OFBlueprintFunctionLibrary_DisableCameraModifiers::bImmediate' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.DoesSprintRequireHeldInput
// 0x0010 (0x0010 - 0x0000)
struct OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput) == 0x000008, "Wrong alignment on OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput");
static_assert(sizeof(OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput) == 0x000010, "Wrong size on OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput");
static_assert(offsetof(OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput, WorldContextObject) == 0x000000, "Member 'OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput, PlayerIndex) == 0x000008, "Member 'OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput::PlayerIndex' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput, ReturnValue) == 0x00000C, "Member 'OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.DoesSprintRequireHeldInput_Gamepad
// 0x0001 (0x0001 - 0x0000)
struct OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput_Gamepad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput_Gamepad) == 0x000001, "Wrong alignment on OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput_Gamepad");
static_assert(sizeof(OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput_Gamepad) == 0x000001, "Wrong size on OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput_Gamepad");
static_assert(offsetof(OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput_Gamepad, ReturnValue) == 0x000000, "Member 'OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput_Gamepad::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.DoesSprintRequireHeldInput_KBM
// 0x0001 (0x0001 - 0x0000)
struct OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput_KBM final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput_KBM) == 0x000001, "Wrong alignment on OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput_KBM");
static_assert(sizeof(OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput_KBM) == 0x000001, "Wrong size on OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput_KBM");
static_assert(offsetof(OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput_KBM, ReturnValue) == 0x000000, "Member 'OFBlueprintFunctionLibrary_DoesSprintRequireHeldInput_KBM::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.EnableCameraModifier
// 0x0038 (0x0038 - 0x0000)
struct OFBlueprintFunctionLibrary_EnableCameraModifier final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ModifierClass;                                     // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraModifier*                        ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintFunctionLibrary_EnableCameraModifier) == 0x000008, "Wrong alignment on OFBlueprintFunctionLibrary_EnableCameraModifier");
static_assert(sizeof(OFBlueprintFunctionLibrary_EnableCameraModifier) == 0x000038, "Wrong size on OFBlueprintFunctionLibrary_EnableCameraModifier");
static_assert(offsetof(OFBlueprintFunctionLibrary_EnableCameraModifier, WorldContextObject) == 0x000000, "Member 'OFBlueprintFunctionLibrary_EnableCameraModifier::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_EnableCameraModifier, ModifierClass) == 0x000008, "Member 'OFBlueprintFunctionLibrary_EnableCameraModifier::ModifierClass' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_EnableCameraModifier, ReturnValue) == 0x000030, "Member 'OFBlueprintFunctionLibrary_EnableCameraModifier::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.EnableCameraModifiers
// 0x0028 (0x0028 - 0x0000)
struct OFBlueprintFunctionLibrary_EnableCameraModifiers final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           Modifiers;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FCameraModifierCollection              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintFunctionLibrary_EnableCameraModifiers) == 0x000008, "Wrong alignment on OFBlueprintFunctionLibrary_EnableCameraModifiers");
static_assert(sizeof(OFBlueprintFunctionLibrary_EnableCameraModifiers) == 0x000028, "Wrong size on OFBlueprintFunctionLibrary_EnableCameraModifiers");
static_assert(offsetof(OFBlueprintFunctionLibrary_EnableCameraModifiers, WorldContextObject) == 0x000000, "Member 'OFBlueprintFunctionLibrary_EnableCameraModifiers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_EnableCameraModifiers, Modifiers) == 0x000008, "Member 'OFBlueprintFunctionLibrary_EnableCameraModifiers::Modifiers' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_EnableCameraModifiers, ReturnValue) == 0x000018, "Member 'OFBlueprintFunctionLibrary_EnableCameraModifiers::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.FindSocketLocations
// 0x0028 (0x0028 - 0x0000)
struct OFBlueprintFunctionLibrary_FindSocketLocations final
{
public:
	const class USceneComponent*                  Component;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Substring;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        SocketLocations;                                   // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFBlueprintFunctionLibrary_FindSocketLocations) == 0x000008, "Wrong alignment on OFBlueprintFunctionLibrary_FindSocketLocations");
static_assert(sizeof(OFBlueprintFunctionLibrary_FindSocketLocations) == 0x000028, "Wrong size on OFBlueprintFunctionLibrary_FindSocketLocations");
static_assert(offsetof(OFBlueprintFunctionLibrary_FindSocketLocations, Component) == 0x000000, "Member 'OFBlueprintFunctionLibrary_FindSocketLocations::Component' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_FindSocketLocations, Substring) == 0x000008, "Member 'OFBlueprintFunctionLibrary_FindSocketLocations::Substring' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_FindSocketLocations, SocketLocations) == 0x000010, "Member 'OFBlueprintFunctionLibrary_FindSocketLocations::SocketLocations' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_FindSocketLocations, bExactMatch) == 0x000020, "Member 'OFBlueprintFunctionLibrary_FindSocketLocations::bExactMatch' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.GetAllActorsOfClassWithinRange
// 0x0030 (0x0030 - 0x0000)
struct OFBlueprintFunctionLibrary_GetAllActorsOfClassWithinRange final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintFunctionLibrary_GetAllActorsOfClassWithinRange) == 0x000008, "Wrong alignment on OFBlueprintFunctionLibrary_GetAllActorsOfClassWithinRange");
static_assert(sizeof(OFBlueprintFunctionLibrary_GetAllActorsOfClassWithinRange) == 0x000030, "Wrong size on OFBlueprintFunctionLibrary_GetAllActorsOfClassWithinRange");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetAllActorsOfClassWithinRange, WorldContextObject) == 0x000000, "Member 'OFBlueprintFunctionLibrary_GetAllActorsOfClassWithinRange::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetAllActorsOfClassWithinRange, ActorClass) == 0x000008, "Member 'OFBlueprintFunctionLibrary_GetAllActorsOfClassWithinRange::ActorClass' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetAllActorsOfClassWithinRange, OutActors) == 0x000010, "Member 'OFBlueprintFunctionLibrary_GetAllActorsOfClassWithinRange::OutActors' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetAllActorsOfClassWithinRange, Origin) == 0x000020, "Member 'OFBlueprintFunctionLibrary_GetAllActorsOfClassWithinRange::Origin' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetAllActorsOfClassWithinRange, Range) == 0x00002C, "Member 'OFBlueprintFunctionLibrary_GetAllActorsOfClassWithinRange::Range' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.GetClosestLocation
// 0x0030 (0x0030 - 0x0000)
struct OFBlueprintFunctionLibrary_GetClosestLocation final
{
public:
	struct FVector                                OriginLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Locations;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFBlueprintFunctionLibrary_GetClosestLocation) == 0x000008, "Wrong alignment on OFBlueprintFunctionLibrary_GetClosestLocation");
static_assert(sizeof(OFBlueprintFunctionLibrary_GetClosestLocation) == 0x000030, "Wrong size on OFBlueprintFunctionLibrary_GetClosestLocation");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetClosestLocation, OriginLocation) == 0x000000, "Member 'OFBlueprintFunctionLibrary_GetClosestLocation::OriginLocation' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetClosestLocation, Locations) == 0x000010, "Member 'OFBlueprintFunctionLibrary_GetClosestLocation::Locations' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetClosestLocation, ReturnValue) == 0x000020, "Member 'OFBlueprintFunctionLibrary_GetClosestLocation::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.GetGameplayTagChildren
// 0x0018 (0x0018 - 0x0000)
struct OFBlueprintFunctionLibrary_GetGameplayTagChildren final
{
public:
	struct FGameplayTag                           Root;                                              // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintFunctionLibrary_GetGameplayTagChildren) == 0x000008, "Wrong alignment on OFBlueprintFunctionLibrary_GetGameplayTagChildren");
static_assert(sizeof(OFBlueprintFunctionLibrary_GetGameplayTagChildren) == 0x000018, "Wrong size on OFBlueprintFunctionLibrary_GetGameplayTagChildren");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetGameplayTagChildren, Root) == 0x000000, "Member 'OFBlueprintFunctionLibrary_GetGameplayTagChildren::Root' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetGameplayTagChildren, ReturnValue) == 0x000008, "Member 'OFBlueprintFunctionLibrary_GetGameplayTagChildren::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.GetObsidianFoxPlayerController
// 0x0018 (0x0018 - 0x0000)
struct OFBlueprintFunctionLibrary_GetObsidianFoxPlayerController final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AOFPlayerController*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintFunctionLibrary_GetObsidianFoxPlayerController) == 0x000008, "Wrong alignment on OFBlueprintFunctionLibrary_GetObsidianFoxPlayerController");
static_assert(sizeof(OFBlueprintFunctionLibrary_GetObsidianFoxPlayerController) == 0x000018, "Wrong size on OFBlueprintFunctionLibrary_GetObsidianFoxPlayerController");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetObsidianFoxPlayerController, WorldContextObject) == 0x000000, "Member 'OFBlueprintFunctionLibrary_GetObsidianFoxPlayerController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetObsidianFoxPlayerController, PlayerIndex) == 0x000008, "Member 'OFBlueprintFunctionLibrary_GetObsidianFoxPlayerController::PlayerIndex' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetObsidianFoxPlayerController, ReturnValue) == 0x000010, "Member 'OFBlueprintFunctionLibrary_GetObsidianFoxPlayerController::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.GetOFGameInstance
// 0x0010 (0x0010 - 0x0000)
struct OFBlueprintFunctionLibrary_GetOFGameInstance final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOFGameInstance*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintFunctionLibrary_GetOFGameInstance) == 0x000008, "Wrong alignment on OFBlueprintFunctionLibrary_GetOFGameInstance");
static_assert(sizeof(OFBlueprintFunctionLibrary_GetOFGameInstance) == 0x000010, "Wrong size on OFBlueprintFunctionLibrary_GetOFGameInstance");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetOFGameInstance, WorldContextObject) == 0x000000, "Member 'OFBlueprintFunctionLibrary_GetOFGameInstance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetOFGameInstance, ReturnValue) == 0x000008, "Member 'OFBlueprintFunctionLibrary_GetOFGameInstance::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.GetOFGameUserSettings
// 0x0008 (0x0008 - 0x0000)
struct OFBlueprintFunctionLibrary_GetOFGameUserSettings final
{
public:
	class UOFGameUserSettings*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintFunctionLibrary_GetOFGameUserSettings) == 0x000008, "Wrong alignment on OFBlueprintFunctionLibrary_GetOFGameUserSettings");
static_assert(sizeof(OFBlueprintFunctionLibrary_GetOFGameUserSettings) == 0x000008, "Wrong size on OFBlueprintFunctionLibrary_GetOFGameUserSettings");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetOFGameUserSettings, ReturnValue) == 0x000000, "Member 'OFBlueprintFunctionLibrary_GetOFGameUserSettings::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.GetOFPlayerCameraManager
// 0x0018 (0x0018 - 0x0000)
struct OFBlueprintFunctionLibrary_GetOFPlayerCameraManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AOFPlayerCameraManager*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintFunctionLibrary_GetOFPlayerCameraManager) == 0x000008, "Wrong alignment on OFBlueprintFunctionLibrary_GetOFPlayerCameraManager");
static_assert(sizeof(OFBlueprintFunctionLibrary_GetOFPlayerCameraManager) == 0x000018, "Wrong size on OFBlueprintFunctionLibrary_GetOFPlayerCameraManager");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetOFPlayerCameraManager, WorldContextObject) == 0x000000, "Member 'OFBlueprintFunctionLibrary_GetOFPlayerCameraManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetOFPlayerCameraManager, PlayerIndex) == 0x000008, "Member 'OFBlueprintFunctionLibrary_GetOFPlayerCameraManager::PlayerIndex' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetOFPlayerCameraManager, ReturnValue) == 0x000010, "Member 'OFBlueprintFunctionLibrary_GetOFPlayerCameraManager::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.GetSprintTreatAsHoldTag_Gamepad
// 0x0008 (0x0008 - 0x0000)
struct OFBlueprintFunctionLibrary_GetSprintTreatAsHoldTag_Gamepad final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintFunctionLibrary_GetSprintTreatAsHoldTag_Gamepad) == 0x000004, "Wrong alignment on OFBlueprintFunctionLibrary_GetSprintTreatAsHoldTag_Gamepad");
static_assert(sizeof(OFBlueprintFunctionLibrary_GetSprintTreatAsHoldTag_Gamepad) == 0x000008, "Wrong size on OFBlueprintFunctionLibrary_GetSprintTreatAsHoldTag_Gamepad");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetSprintTreatAsHoldTag_Gamepad, ReturnValue) == 0x000000, "Member 'OFBlueprintFunctionLibrary_GetSprintTreatAsHoldTag_Gamepad::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.GetSprintTreatAsHoldTag_KBM
// 0x0008 (0x0008 - 0x0000)
struct OFBlueprintFunctionLibrary_GetSprintTreatAsHoldTag_KBM final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintFunctionLibrary_GetSprintTreatAsHoldTag_KBM) == 0x000004, "Wrong alignment on OFBlueprintFunctionLibrary_GetSprintTreatAsHoldTag_KBM");
static_assert(sizeof(OFBlueprintFunctionLibrary_GetSprintTreatAsHoldTag_KBM) == 0x000008, "Wrong size on OFBlueprintFunctionLibrary_GetSprintTreatAsHoldTag_KBM");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetSprintTreatAsHoldTag_KBM, ReturnValue) == 0x000000, "Member 'OFBlueprintFunctionLibrary_GetSprintTreatAsHoldTag_KBM::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.GetThirdPersonPlayerCameraManager
// 0x0018 (0x0018 - 0x0000)
struct OFBlueprintFunctionLibrary_GetThirdPersonPlayerCameraManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AThirdPersonPlayerCameraManager*        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintFunctionLibrary_GetThirdPersonPlayerCameraManager) == 0x000008, "Wrong alignment on OFBlueprintFunctionLibrary_GetThirdPersonPlayerCameraManager");
static_assert(sizeof(OFBlueprintFunctionLibrary_GetThirdPersonPlayerCameraManager) == 0x000018, "Wrong size on OFBlueprintFunctionLibrary_GetThirdPersonPlayerCameraManager");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetThirdPersonPlayerCameraManager, WorldContextObject) == 0x000000, "Member 'OFBlueprintFunctionLibrary_GetThirdPersonPlayerCameraManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetThirdPersonPlayerCameraManager, PlayerIndex) == 0x000008, "Member 'OFBlueprintFunctionLibrary_GetThirdPersonPlayerCameraManager::PlayerIndex' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetThirdPersonPlayerCameraManager, ReturnValue) == 0x000010, "Member 'OFBlueprintFunctionLibrary_GetThirdPersonPlayerCameraManager::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.GetTimespanAsText
// 0x0020 (0x0020 - 0x0000)
struct OFBlueprintFunctionLibrary_GetTimespanAsText final
{
public:
	struct FTimespan                              Timespan;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintFunctionLibrary_GetTimespanAsText) == 0x000008, "Wrong alignment on OFBlueprintFunctionLibrary_GetTimespanAsText");
static_assert(sizeof(OFBlueprintFunctionLibrary_GetTimespanAsText) == 0x000020, "Wrong size on OFBlueprintFunctionLibrary_GetTimespanAsText");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetTimespanAsText, Timespan) == 0x000000, "Member 'OFBlueprintFunctionLibrary_GetTimespanAsText::Timespan' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_GetTimespanAsText, ReturnValue) == 0x000008, "Member 'OFBlueprintFunctionLibrary_GetTimespanAsText::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.HasAnyEndingAchievement
// 0x0010 (0x0010 - 0x0000)
struct OFBlueprintFunctionLibrary_HasAnyEndingAchievement final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFBlueprintFunctionLibrary_HasAnyEndingAchievement) == 0x000008, "Wrong alignment on OFBlueprintFunctionLibrary_HasAnyEndingAchievement");
static_assert(sizeof(OFBlueprintFunctionLibrary_HasAnyEndingAchievement) == 0x000010, "Wrong size on OFBlueprintFunctionLibrary_HasAnyEndingAchievement");
static_assert(offsetof(OFBlueprintFunctionLibrary_HasAnyEndingAchievement, WorldContextObject) == 0x000000, "Member 'OFBlueprintFunctionLibrary_HasAnyEndingAchievement::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_HasAnyEndingAchievement, ReturnValue) == 0x000008, "Member 'OFBlueprintFunctionLibrary_HasAnyEndingAchievement::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.IsNewGamePlus
// 0x0010 (0x0010 - 0x0000)
struct OFBlueprintFunctionLibrary_IsNewGamePlus final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFBlueprintFunctionLibrary_IsNewGamePlus) == 0x000008, "Wrong alignment on OFBlueprintFunctionLibrary_IsNewGamePlus");
static_assert(sizeof(OFBlueprintFunctionLibrary_IsNewGamePlus) == 0x000010, "Wrong size on OFBlueprintFunctionLibrary_IsNewGamePlus");
static_assert(offsetof(OFBlueprintFunctionLibrary_IsNewGamePlus, WorldContextObject) == 0x000000, "Member 'OFBlueprintFunctionLibrary_IsNewGamePlus::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_IsNewGamePlus, ReturnValue) == 0x000008, "Member 'OFBlueprintFunctionLibrary_IsNewGamePlus::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.IsNewGamePlusAvailable
// 0x0010 (0x0010 - 0x0000)
struct OFBlueprintFunctionLibrary_IsNewGamePlusAvailable final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFBlueprintFunctionLibrary_IsNewGamePlusAvailable) == 0x000008, "Wrong alignment on OFBlueprintFunctionLibrary_IsNewGamePlusAvailable");
static_assert(sizeof(OFBlueprintFunctionLibrary_IsNewGamePlusAvailable) == 0x000010, "Wrong size on OFBlueprintFunctionLibrary_IsNewGamePlusAvailable");
static_assert(offsetof(OFBlueprintFunctionLibrary_IsNewGamePlusAvailable, WorldContextObject) == 0x000000, "Member 'OFBlueprintFunctionLibrary_IsNewGamePlusAvailable::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_IsNewGamePlusAvailable, ReturnValue) == 0x000008, "Member 'OFBlueprintFunctionLibrary_IsNewGamePlusAvailable::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.SetGameFinished
// 0x0008 (0x0008 - 0x0000)
struct OFBlueprintFunctionLibrary_SetGameFinished final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintFunctionLibrary_SetGameFinished) == 0x000008, "Wrong alignment on OFBlueprintFunctionLibrary_SetGameFinished");
static_assert(sizeof(OFBlueprintFunctionLibrary_SetGameFinished) == 0x000008, "Wrong size on OFBlueprintFunctionLibrary_SetGameFinished");
static_assert(offsetof(OFBlueprintFunctionLibrary_SetGameFinished, WorldContextObject) == 0x000000, "Member 'OFBlueprintFunctionLibrary_SetGameFinished::WorldContextObject' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.SetSprintRequiresHeldInput_Gamepad
// 0x0002 (0x0002 - 0x0000)
struct OFBlueprintFunctionLibrary_SetSprintRequiresHeldInput_Gamepad final
{
public:
	bool                                          bNewRequireHeld;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintFunctionLibrary_SetSprintRequiresHeldInput_Gamepad) == 0x000001, "Wrong alignment on OFBlueprintFunctionLibrary_SetSprintRequiresHeldInput_Gamepad");
static_assert(sizeof(OFBlueprintFunctionLibrary_SetSprintRequiresHeldInput_Gamepad) == 0x000002, "Wrong size on OFBlueprintFunctionLibrary_SetSprintRequiresHeldInput_Gamepad");
static_assert(offsetof(OFBlueprintFunctionLibrary_SetSprintRequiresHeldInput_Gamepad, bNewRequireHeld) == 0x000000, "Member 'OFBlueprintFunctionLibrary_SetSprintRequiresHeldInput_Gamepad::bNewRequireHeld' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_SetSprintRequiresHeldInput_Gamepad, ReturnValue) == 0x000001, "Member 'OFBlueprintFunctionLibrary_SetSprintRequiresHeldInput_Gamepad::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.SetSprintRequiresHeldInput_KBM
// 0x0002 (0x0002 - 0x0000)
struct OFBlueprintFunctionLibrary_SetSprintRequiresHeldInput_KBM final
{
public:
	bool                                          bNewRequireHeld;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintFunctionLibrary_SetSprintRequiresHeldInput_KBM) == 0x000001, "Wrong alignment on OFBlueprintFunctionLibrary_SetSprintRequiresHeldInput_KBM");
static_assert(sizeof(OFBlueprintFunctionLibrary_SetSprintRequiresHeldInput_KBM) == 0x000002, "Wrong size on OFBlueprintFunctionLibrary_SetSprintRequiresHeldInput_KBM");
static_assert(offsetof(OFBlueprintFunctionLibrary_SetSprintRequiresHeldInput_KBM, bNewRequireHeld) == 0x000000, "Member 'OFBlueprintFunctionLibrary_SetSprintRequiresHeldInput_KBM::bNewRequireHeld' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_SetSprintRequiresHeldInput_KBM, ReturnValue) == 0x000001, "Member 'OFBlueprintFunctionLibrary_SetSprintRequiresHeldInput_KBM::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.UnloadLevelsForStreamingVolumes
// 0x0020 (0x0020 - 0x0000)
struct OFBlueprintFunctionLibrary_UnloadLevelsForStreamingVolumes final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class ALevelStreamingVolume>> StreamingVolumes;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          BlockUntilStreamingUpdated;                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableVolumes;                                    // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableMinTimeBetweenUnloadRequests;               // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFBlueprintFunctionLibrary_UnloadLevelsForStreamingVolumes) == 0x000008, "Wrong alignment on OFBlueprintFunctionLibrary_UnloadLevelsForStreamingVolumes");
static_assert(sizeof(OFBlueprintFunctionLibrary_UnloadLevelsForStreamingVolumes) == 0x000020, "Wrong size on OFBlueprintFunctionLibrary_UnloadLevelsForStreamingVolumes");
static_assert(offsetof(OFBlueprintFunctionLibrary_UnloadLevelsForStreamingVolumes, WorldContextObject) == 0x000000, "Member 'OFBlueprintFunctionLibrary_UnloadLevelsForStreamingVolumes::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_UnloadLevelsForStreamingVolumes, StreamingVolumes) == 0x000008, "Member 'OFBlueprintFunctionLibrary_UnloadLevelsForStreamingVolumes::StreamingVolumes' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_UnloadLevelsForStreamingVolumes, BlockUntilStreamingUpdated) == 0x000018, "Member 'OFBlueprintFunctionLibrary_UnloadLevelsForStreamingVolumes::BlockUntilStreamingUpdated' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_UnloadLevelsForStreamingVolumes, DisableVolumes) == 0x000019, "Member 'OFBlueprintFunctionLibrary_UnloadLevelsForStreamingVolumes::DisableVolumes' has a wrong offset!");
static_assert(offsetof(OFBlueprintFunctionLibrary_UnloadLevelsForStreamingVolumes, DisableMinTimeBetweenUnloadRequests) == 0x00001A, "Member 'OFBlueprintFunctionLibrary_UnloadLevelsForStreamingVolumes::DisableMinTimeBetweenUnloadRequests' has a wrong offset!");

// Function ObsidianFox.OFBlueprintFunctionLibrary.WriteErrorToMessageLog
// 0x0010 (0x0010 - 0x0000)
struct OFBlueprintFunctionLibrary_WriteErrorToMessageLog final
{
public:
	class FString                                 ErrorMessage;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFBlueprintFunctionLibrary_WriteErrorToMessageLog) == 0x000008, "Wrong alignment on OFBlueprintFunctionLibrary_WriteErrorToMessageLog");
static_assert(sizeof(OFBlueprintFunctionLibrary_WriteErrorToMessageLog) == 0x000010, "Wrong size on OFBlueprintFunctionLibrary_WriteErrorToMessageLog");
static_assert(offsetof(OFBlueprintFunctionLibrary_WriteErrorToMessageLog, ErrorMessage) == 0x000000, "Member 'OFBlueprintFunctionLibrary_WriteErrorToMessageLog::ErrorMessage' has a wrong offset!");

// Function ObsidianFox.TurnInPlaceAsyncAction.RequestTurnInPlace
// 0x0018 (0x0018 - 0x0000)
struct TurnInPlaceAsyncAction_RequestTurnInPlace final
{
public:
	class AObsidianFoxCharacter*                  Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RequestedAngleDegrees;                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTurnInPlaceAsyncAction*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TurnInPlaceAsyncAction_RequestTurnInPlace) == 0x000008, "Wrong alignment on TurnInPlaceAsyncAction_RequestTurnInPlace");
static_assert(sizeof(TurnInPlaceAsyncAction_RequestTurnInPlace) == 0x000018, "Wrong size on TurnInPlaceAsyncAction_RequestTurnInPlace");
static_assert(offsetof(TurnInPlaceAsyncAction_RequestTurnInPlace, Character) == 0x000000, "Member 'TurnInPlaceAsyncAction_RequestTurnInPlace::Character' has a wrong offset!");
static_assert(offsetof(TurnInPlaceAsyncAction_RequestTurnInPlace, RequestedAngleDegrees) == 0x000008, "Member 'TurnInPlaceAsyncAction_RequestTurnInPlace::RequestedAngleDegrees' has a wrong offset!");
static_assert(offsetof(TurnInPlaceAsyncAction_RequestTurnInPlace, ReturnValue) == 0x000010, "Member 'TurnInPlaceAsyncAction_RequestTurnInPlace::ReturnValue' has a wrong offset!");

// Function ObsidianFox.TurnInPlaceAsyncAction.OnTurnInPlaceEnded
// 0x0010 (0x0010 - 0x0000)
struct TurnInPlaceAsyncAction_OnTurnInPlaceEnded final
{
public:
	class ACharacter*                             TurningCharacter;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBlendingOutToWalk;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TurnInPlaceAsyncAction_OnTurnInPlaceEnded) == 0x000008, "Wrong alignment on TurnInPlaceAsyncAction_OnTurnInPlaceEnded");
static_assert(sizeof(TurnInPlaceAsyncAction_OnTurnInPlaceEnded) == 0x000010, "Wrong size on TurnInPlaceAsyncAction_OnTurnInPlaceEnded");
static_assert(offsetof(TurnInPlaceAsyncAction_OnTurnInPlaceEnded, TurningCharacter) == 0x000000, "Member 'TurnInPlaceAsyncAction_OnTurnInPlaceEnded::TurningCharacter' has a wrong offset!");
static_assert(offsetof(TurnInPlaceAsyncAction_OnTurnInPlaceEnded, bIsBlendingOutToWalk) == 0x000008, "Member 'TurnInPlaceAsyncAction_OnTurnInPlaceEnded::bIsBlendingOutToWalk' has a wrong offset!");

// Function ObsidianFox.TurnInPlaceAsyncAction.OnTurnInPlaceFailedAngleTooSmall
// 0x0008 (0x0008 - 0x0000)
struct TurnInPlaceAsyncAction_OnTurnInPlaceFailedAngleTooSmall final
{
public:
	class ACharacter*                             TurningCharacter;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TurnInPlaceAsyncAction_OnTurnInPlaceFailedAngleTooSmall) == 0x000008, "Wrong alignment on TurnInPlaceAsyncAction_OnTurnInPlaceFailedAngleTooSmall");
static_assert(sizeof(TurnInPlaceAsyncAction_OnTurnInPlaceFailedAngleTooSmall) == 0x000008, "Wrong size on TurnInPlaceAsyncAction_OnTurnInPlaceFailedAngleTooSmall");
static_assert(offsetof(TurnInPlaceAsyncAction_OnTurnInPlaceFailedAngleTooSmall, TurningCharacter) == 0x000000, "Member 'TurnInPlaceAsyncAction_OnTurnInPlaceFailedAngleTooSmall::TurningCharacter' has a wrong offset!");

// Function ObsidianFox.OFCharacterMovementComponent.DisableRootMotion
// 0x0001 (0x0001 - 0x0000)
struct OFCharacterMovementComponent_DisableRootMotion final
{
public:
	bool                                          RootMotionDisabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterMovementComponent_DisableRootMotion) == 0x000001, "Wrong alignment on OFCharacterMovementComponent_DisableRootMotion");
static_assert(sizeof(OFCharacterMovementComponent_DisableRootMotion) == 0x000001, "Wrong size on OFCharacterMovementComponent_DisableRootMotion");
static_assert(offsetof(OFCharacterMovementComponent_DisableRootMotion, RootMotionDisabled) == 0x000000, "Member 'OFCharacterMovementComponent_DisableRootMotion::RootMotionDisabled' has a wrong offset!");

// Function ObsidianFox.OFCharacterMovementComponent.DisableVelocityModifyingAnimationCurves
// 0x0008 (0x0008 - 0x0000)
struct OFCharacterMovementComponent_DisableVelocityModifyingAnimationCurves final
{
public:
	const class UObject*                          LockReference;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterMovementComponent_DisableVelocityModifyingAnimationCurves) == 0x000008, "Wrong alignment on OFCharacterMovementComponent_DisableVelocityModifyingAnimationCurves");
static_assert(sizeof(OFCharacterMovementComponent_DisableVelocityModifyingAnimationCurves) == 0x000008, "Wrong size on OFCharacterMovementComponent_DisableVelocityModifyingAnimationCurves");
static_assert(offsetof(OFCharacterMovementComponent_DisableVelocityModifyingAnimationCurves, LockReference) == 0x000000, "Member 'OFCharacterMovementComponent_DisableVelocityModifyingAnimationCurves::LockReference' has a wrong offset!");

// Function ObsidianFox.OFCharacterMovementComponent.EnableVelocityModifyingAnimationCurves
// 0x0008 (0x0008 - 0x0000)
struct OFCharacterMovementComponent_EnableVelocityModifyingAnimationCurves final
{
public:
	const class UObject*                          LockReference;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterMovementComponent_EnableVelocityModifyingAnimationCurves) == 0x000008, "Wrong alignment on OFCharacterMovementComponent_EnableVelocityModifyingAnimationCurves");
static_assert(sizeof(OFCharacterMovementComponent_EnableVelocityModifyingAnimationCurves) == 0x000008, "Wrong size on OFCharacterMovementComponent_EnableVelocityModifyingAnimationCurves");
static_assert(offsetof(OFCharacterMovementComponent_EnableVelocityModifyingAnimationCurves, LockReference) == 0x000000, "Member 'OFCharacterMovementComponent_EnableVelocityModifyingAnimationCurves::LockReference' has a wrong offset!");

// Function ObsidianFox.OFCharacterMovementComponent.IsFocusWalk
// 0x0001 (0x0001 - 0x0000)
struct OFCharacterMovementComponent_IsFocusWalk final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterMovementComponent_IsFocusWalk) == 0x000001, "Wrong alignment on OFCharacterMovementComponent_IsFocusWalk");
static_assert(sizeof(OFCharacterMovementComponent_IsFocusWalk) == 0x000001, "Wrong size on OFCharacterMovementComponent_IsFocusWalk");
static_assert(offsetof(OFCharacterMovementComponent_IsFocusWalk, ReturnValue) == 0x000000, "Member 'OFCharacterMovementComponent_IsFocusWalk::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.OFCharacterMovementComponent.OnMovementModeChanged__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct OFCharacterMovementComponent_OnMovementModeChanged__DelegateSignature final
{
public:
	EMovementMode                                 PreviousMovementMode;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 NewMovementMode;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterMovementComponent_OnMovementModeChanged__DelegateSignature) == 0x000001, "Wrong alignment on OFCharacterMovementComponent_OnMovementModeChanged__DelegateSignature");
static_assert(sizeof(OFCharacterMovementComponent_OnMovementModeChanged__DelegateSignature) == 0x000002, "Wrong size on OFCharacterMovementComponent_OnMovementModeChanged__DelegateSignature");
static_assert(offsetof(OFCharacterMovementComponent_OnMovementModeChanged__DelegateSignature, PreviousMovementMode) == 0x000000, "Member 'OFCharacterMovementComponent_OnMovementModeChanged__DelegateSignature::PreviousMovementMode' has a wrong offset!");
static_assert(offsetof(OFCharacterMovementComponent_OnMovementModeChanged__DelegateSignature, NewMovementMode) == 0x000001, "Member 'OFCharacterMovementComponent_OnMovementModeChanged__DelegateSignature::NewMovementMode' has a wrong offset!");

// Function ObsidianFox.OFCharacterMovementComponent.OnOwnerAim
// 0x0001 (0x0001 - 0x0000)
struct OFCharacterMovementComponent_OnOwnerAim final
{
public:
	bool                                          IsAiming;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterMovementComponent_OnOwnerAim) == 0x000001, "Wrong alignment on OFCharacterMovementComponent_OnOwnerAim");
static_assert(sizeof(OFCharacterMovementComponent_OnOwnerAim) == 0x000001, "Wrong size on OFCharacterMovementComponent_OnOwnerAim");
static_assert(offsetof(OFCharacterMovementComponent_OnOwnerAim, IsAiming) == 0x000000, "Member 'OFCharacterMovementComponent_OnOwnerAim::IsAiming' has a wrong offset!");

// Function ObsidianFox.OFCharacterMovementComponent.RootMotionEnd
// 0x0010 (0x0010 - 0x0000)
struct OFCharacterMovementComponent_RootMotionEnd final
{
public:
	const class UObject*                          LockOwner;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Force;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFCharacterMovementComponent_RootMotionEnd) == 0x000008, "Wrong alignment on OFCharacterMovementComponent_RootMotionEnd");
static_assert(sizeof(OFCharacterMovementComponent_RootMotionEnd) == 0x000010, "Wrong size on OFCharacterMovementComponent_RootMotionEnd");
static_assert(offsetof(OFCharacterMovementComponent_RootMotionEnd, LockOwner) == 0x000000, "Member 'OFCharacterMovementComponent_RootMotionEnd::LockOwner' has a wrong offset!");
static_assert(offsetof(OFCharacterMovementComponent_RootMotionEnd, Force) == 0x000008, "Member 'OFCharacterMovementComponent_RootMotionEnd::Force' has a wrong offset!");

// Function ObsidianFox.OFCharacterMovementComponent.RootMotionStart
// 0x0010 (0x0010 - 0x0000)
struct OFCharacterMovementComponent_RootMotionStart final
{
public:
	const class UObject*                          LockOwner;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyTranslation;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyRotation;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRotationAbsolute;                                // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000B(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFCharacterMovementComponent_RootMotionStart) == 0x000008, "Wrong alignment on OFCharacterMovementComponent_RootMotionStart");
static_assert(sizeof(OFCharacterMovementComponent_RootMotionStart) == 0x000010, "Wrong size on OFCharacterMovementComponent_RootMotionStart");
static_assert(offsetof(OFCharacterMovementComponent_RootMotionStart, LockOwner) == 0x000000, "Member 'OFCharacterMovementComponent_RootMotionStart::LockOwner' has a wrong offset!");
static_assert(offsetof(OFCharacterMovementComponent_RootMotionStart, ApplyTranslation) == 0x000008, "Member 'OFCharacterMovementComponent_RootMotionStart::ApplyTranslation' has a wrong offset!");
static_assert(offsetof(OFCharacterMovementComponent_RootMotionStart, ApplyRotation) == 0x000009, "Member 'OFCharacterMovementComponent_RootMotionStart::ApplyRotation' has a wrong offset!");
static_assert(offsetof(OFCharacterMovementComponent_RootMotionStart, IsRotationAbsolute) == 0x00000A, "Member 'OFCharacterMovementComponent_RootMotionStart::IsRotationAbsolute' has a wrong offset!");
static_assert(offsetof(OFCharacterMovementComponent_RootMotionStart, ReturnValue) == 0x00000B, "Member 'OFCharacterMovementComponent_RootMotionStart::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFCharacterMovementComponent.RootMotionUpdate
// 0x0004 (0x0004 - 0x0000)
struct OFCharacterMovementComponent_RootMotionUpdate final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterMovementComponent_RootMotionUpdate) == 0x000004, "Wrong alignment on OFCharacterMovementComponent_RootMotionUpdate");
static_assert(sizeof(OFCharacterMovementComponent_RootMotionUpdate) == 0x000004, "Wrong size on OFCharacterMovementComponent_RootMotionUpdate");
static_assert(offsetof(OFCharacterMovementComponent_RootMotionUpdate, DeltaTime) == 0x000000, "Member 'OFCharacterMovementComponent_RootMotionUpdate::DeltaTime' has a wrong offset!");

// Function ObsidianFox.OFCharacterMovementComponent.SetBaseMovementSpeed
// 0x0004 (0x0004 - 0x0000)
struct OFCharacterMovementComponent_SetBaseMovementSpeed final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterMovementComponent_SetBaseMovementSpeed) == 0x000004, "Wrong alignment on OFCharacterMovementComponent_SetBaseMovementSpeed");
static_assert(sizeof(OFCharacterMovementComponent_SetBaseMovementSpeed) == 0x000004, "Wrong size on OFCharacterMovementComponent_SetBaseMovementSpeed");
static_assert(offsetof(OFCharacterMovementComponent_SetBaseMovementSpeed, Value) == 0x000000, "Member 'OFCharacterMovementComponent_SetBaseMovementSpeed::Value' has a wrong offset!");

// Function ObsidianFox.OFCharacterMovementComponent.SetRootMotionData
// 0x001C (0x001C - 0x0000)
struct OFCharacterMovementComponent_SetRootMotionData final
{
public:
	float                                         InRootMotionSpeed;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InRootMotionMoveDir;                               // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRootMotionRotation;                              // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterMovementComponent_SetRootMotionData) == 0x000004, "Wrong alignment on OFCharacterMovementComponent_SetRootMotionData");
static_assert(sizeof(OFCharacterMovementComponent_SetRootMotionData) == 0x00001C, "Wrong size on OFCharacterMovementComponent_SetRootMotionData");
static_assert(offsetof(OFCharacterMovementComponent_SetRootMotionData, InRootMotionSpeed) == 0x000000, "Member 'OFCharacterMovementComponent_SetRootMotionData::InRootMotionSpeed' has a wrong offset!");
static_assert(offsetof(OFCharacterMovementComponent_SetRootMotionData, InRootMotionMoveDir) == 0x000004, "Member 'OFCharacterMovementComponent_SetRootMotionData::InRootMotionMoveDir' has a wrong offset!");
static_assert(offsetof(OFCharacterMovementComponent_SetRootMotionData, InRootMotionRotation) == 0x000010, "Member 'OFCharacterMovementComponent_SetRootMotionData::InRootMotionRotation' has a wrong offset!");

// DelegateFunction ObsidianFox.OFCharacterMovementComponent.SprintStateChangeSignature__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct OFCharacterMovementComponent_SprintStateChangeSignature__DelegateSignature final
{
public:
	bool                                          bIsSprinting_0;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterMovementComponent_SprintStateChangeSignature__DelegateSignature) == 0x000001, "Wrong alignment on OFCharacterMovementComponent_SprintStateChangeSignature__DelegateSignature");
static_assert(sizeof(OFCharacterMovementComponent_SprintStateChangeSignature__DelegateSignature) == 0x000001, "Wrong size on OFCharacterMovementComponent_SprintStateChangeSignature__DelegateSignature");
static_assert(offsetof(OFCharacterMovementComponent_SprintStateChangeSignature__DelegateSignature, bIsSprinting_0) == 0x000000, "Member 'OFCharacterMovementComponent_SprintStateChangeSignature__DelegateSignature::bIsSprinting_0' has a wrong offset!");

// Function ObsidianFox.OFCharacterMovementComponent.TurnInPlaceBranchToWalkIfAppropriate
// 0x0008 (0x0008 - 0x0000)
struct OFCharacterMovementComponent_TurnInPlaceBranchToWalkIfAppropriate final
{
public:
	const class UObject*                          LockOwner;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterMovementComponent_TurnInPlaceBranchToWalkIfAppropriate) == 0x000008, "Wrong alignment on OFCharacterMovementComponent_TurnInPlaceBranchToWalkIfAppropriate");
static_assert(sizeof(OFCharacterMovementComponent_TurnInPlaceBranchToWalkIfAppropriate) == 0x000008, "Wrong size on OFCharacterMovementComponent_TurnInPlaceBranchToWalkIfAppropriate");
static_assert(offsetof(OFCharacterMovementComponent_TurnInPlaceBranchToWalkIfAppropriate, LockOwner) == 0x000000, "Member 'OFCharacterMovementComponent_TurnInPlaceBranchToWalkIfAppropriate::LockOwner' has a wrong offset!");

// DelegateFunction ObsidianFox.OFCharacterMovementComponent.TurnInPlaceEnd__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct OFCharacterMovementComponent_TurnInPlaceEnd__DelegateSignature final
{
public:
	class ACharacter*                             TurningCharacter;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBlendingOutToWalk;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFCharacterMovementComponent_TurnInPlaceEnd__DelegateSignature) == 0x000008, "Wrong alignment on OFCharacterMovementComponent_TurnInPlaceEnd__DelegateSignature");
static_assert(sizeof(OFCharacterMovementComponent_TurnInPlaceEnd__DelegateSignature) == 0x000010, "Wrong size on OFCharacterMovementComponent_TurnInPlaceEnd__DelegateSignature");
static_assert(offsetof(OFCharacterMovementComponent_TurnInPlaceEnd__DelegateSignature, TurningCharacter) == 0x000000, "Member 'OFCharacterMovementComponent_TurnInPlaceEnd__DelegateSignature::TurningCharacter' has a wrong offset!");
static_assert(offsetof(OFCharacterMovementComponent_TurnInPlaceEnd__DelegateSignature, bIsBlendingOutToWalk) == 0x000008, "Member 'OFCharacterMovementComponent_TurnInPlaceEnd__DelegateSignature::bIsBlendingOutToWalk' has a wrong offset!");

// DelegateFunction ObsidianFox.OFCharacterMovementComponent.TurnInPlaceFailed__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct OFCharacterMovementComponent_TurnInPlaceFailed__DelegateSignature final
{
public:
	class ACharacter*                             TurningCharacter;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterMovementComponent_TurnInPlaceFailed__DelegateSignature) == 0x000008, "Wrong alignment on OFCharacterMovementComponent_TurnInPlaceFailed__DelegateSignature");
static_assert(sizeof(OFCharacterMovementComponent_TurnInPlaceFailed__DelegateSignature) == 0x000008, "Wrong size on OFCharacterMovementComponent_TurnInPlaceFailed__DelegateSignature");
static_assert(offsetof(OFCharacterMovementComponent_TurnInPlaceFailed__DelegateSignature, TurningCharacter) == 0x000000, "Member 'OFCharacterMovementComponent_TurnInPlaceFailed__DelegateSignature::TurningCharacter' has a wrong offset!");

// Function ObsidianFox.OFCharacterMovementComponent.GetCurrentMoveSpeed
// 0x0004 (0x0004 - 0x0000)
struct OFCharacterMovementComponent_GetCurrentMoveSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterMovementComponent_GetCurrentMoveSpeed) == 0x000004, "Wrong alignment on OFCharacterMovementComponent_GetCurrentMoveSpeed");
static_assert(sizeof(OFCharacterMovementComponent_GetCurrentMoveSpeed) == 0x000004, "Wrong size on OFCharacterMovementComponent_GetCurrentMoveSpeed");
static_assert(offsetof(OFCharacterMovementComponent_GetCurrentMoveSpeed, ReturnValue) == 0x000000, "Member 'OFCharacterMovementComponent_GetCurrentMoveSpeed::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFCharacterMovementComponent.GetCurrentVelocity
// 0x000C (0x000C - 0x0000)
struct OFCharacterMovementComponent_GetCurrentVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterMovementComponent_GetCurrentVelocity) == 0x000004, "Wrong alignment on OFCharacterMovementComponent_GetCurrentVelocity");
static_assert(sizeof(OFCharacterMovementComponent_GetCurrentVelocity) == 0x00000C, "Wrong size on OFCharacterMovementComponent_GetCurrentVelocity");
static_assert(offsetof(OFCharacterMovementComponent_GetCurrentVelocity, ReturnValue) == 0x000000, "Member 'OFCharacterMovementComponent_GetCurrentVelocity::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFCharacterMovementComponent.GetLockedRotationAngleDegrees
// 0x0004 (0x0004 - 0x0000)
struct OFCharacterMovementComponent_GetLockedRotationAngleDegrees final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterMovementComponent_GetLockedRotationAngleDegrees) == 0x000004, "Wrong alignment on OFCharacterMovementComponent_GetLockedRotationAngleDegrees");
static_assert(sizeof(OFCharacterMovementComponent_GetLockedRotationAngleDegrees) == 0x000004, "Wrong size on OFCharacterMovementComponent_GetLockedRotationAngleDegrees");
static_assert(offsetof(OFCharacterMovementComponent_GetLockedRotationAngleDegrees, ReturnValue) == 0x000000, "Member 'OFCharacterMovementComponent_GetLockedRotationAngleDegrees::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFCharacterMovementComponent.GetRequestedTurnAngle
// 0x0004 (0x0004 - 0x0000)
struct OFCharacterMovementComponent_GetRequestedTurnAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterMovementComponent_GetRequestedTurnAngle) == 0x000004, "Wrong alignment on OFCharacterMovementComponent_GetRequestedTurnAngle");
static_assert(sizeof(OFCharacterMovementComponent_GetRequestedTurnAngle) == 0x000004, "Wrong size on OFCharacterMovementComponent_GetRequestedTurnAngle");
static_assert(offsetof(OFCharacterMovementComponent_GetRequestedTurnAngle, ReturnValue) == 0x000000, "Member 'OFCharacterMovementComponent_GetRequestedTurnAngle::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFCharacterMovementComponent.GetRootMotionState
// 0x0001 (0x0001 - 0x0000)
struct OFCharacterMovementComponent_GetRootMotionState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterMovementComponent_GetRootMotionState) == 0x000001, "Wrong alignment on OFCharacterMovementComponent_GetRootMotionState");
static_assert(sizeof(OFCharacterMovementComponent_GetRootMotionState) == 0x000001, "Wrong size on OFCharacterMovementComponent_GetRootMotionState");
static_assert(offsetof(OFCharacterMovementComponent_GetRootMotionState, ReturnValue) == 0x000000, "Member 'OFCharacterMovementComponent_GetRootMotionState::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFCharacterMovementComponent.IsFastTurn
// 0x0001 (0x0001 - 0x0000)
struct OFCharacterMovementComponent_IsFastTurn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterMovementComponent_IsFastTurn) == 0x000001, "Wrong alignment on OFCharacterMovementComponent_IsFastTurn");
static_assert(sizeof(OFCharacterMovementComponent_IsFastTurn) == 0x000001, "Wrong size on OFCharacterMovementComponent_IsFastTurn");
static_assert(offsetof(OFCharacterMovementComponent_IsFastTurn, ReturnValue) == 0x000000, "Member 'OFCharacterMovementComponent_IsFastTurn::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFCharacterMovementComponent.IsTurningInPlace
// 0x0001 (0x0001 - 0x0000)
struct OFCharacterMovementComponent_IsTurningInPlace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterMovementComponent_IsTurningInPlace) == 0x000001, "Wrong alignment on OFCharacterMovementComponent_IsTurningInPlace");
static_assert(sizeof(OFCharacterMovementComponent_IsTurningInPlace) == 0x000001, "Wrong size on OFCharacterMovementComponent_IsTurningInPlace");
static_assert(offsetof(OFCharacterMovementComponent_IsTurningInPlace, ReturnValue) == 0x000000, "Member 'OFCharacterMovementComponent_IsTurningInPlace::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFCharacterNoiseEmitter.FootstepNoise
// 0x000C (0x000C - 0x0000)
struct OFCharacterNoiseEmitter_FootstepNoise final
{
public:
	struct FVector                                StepLocation;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterNoiseEmitter_FootstepNoise) == 0x000004, "Wrong alignment on OFCharacterNoiseEmitter_FootstepNoise");
static_assert(sizeof(OFCharacterNoiseEmitter_FootstepNoise) == 0x00000C, "Wrong size on OFCharacterNoiseEmitter_FootstepNoise");
static_assert(offsetof(OFCharacterNoiseEmitter_FootstepNoise, StepLocation) == 0x000000, "Member 'OFCharacterNoiseEmitter_FootstepNoise::StepLocation' has a wrong offset!");

// Function ObsidianFox.OFCharacterNoiseEmitter.FootstepNoise_Internal
// 0x0018 (0x0018 - 0x0000)
struct OFCharacterNoiseEmitter_FootstepNoise_Internal final
{
public:
	struct FVector                                StepLocation;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFootType                                     FootStepType;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterNoiseEmitter_FootstepNoise_Internal) == 0x000004, "Wrong alignment on OFCharacterNoiseEmitter_FootstepNoise_Internal");
static_assert(sizeof(OFCharacterNoiseEmitter_FootstepNoise_Internal) == 0x000018, "Wrong size on OFCharacterNoiseEmitter_FootstepNoise_Internal");
static_assert(offsetof(OFCharacterNoiseEmitter_FootstepNoise_Internal, StepLocation) == 0x000000, "Member 'OFCharacterNoiseEmitter_FootstepNoise_Internal::StepLocation' has a wrong offset!");
static_assert(offsetof(OFCharacterNoiseEmitter_FootstepNoise_Internal, FootStepType) == 0x00000C, "Member 'OFCharacterNoiseEmitter_FootstepNoise_Internal::FootStepType' has a wrong offset!");
static_assert(offsetof(OFCharacterNoiseEmitter_FootstepNoise_Internal, BoneName) == 0x000010, "Member 'OFCharacterNoiseEmitter_FootstepNoise_Internal::BoneName' has a wrong offset!");

// Function ObsidianFox.OFCharacterNoiseEmitter.FootstepsCanMakeNoise
// 0x0001 (0x0001 - 0x0000)
struct OFCharacterNoiseEmitter_FootstepsCanMakeNoise final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterNoiseEmitter_FootstepsCanMakeNoise) == 0x000001, "Wrong alignment on OFCharacterNoiseEmitter_FootstepsCanMakeNoise");
static_assert(sizeof(OFCharacterNoiseEmitter_FootstepsCanMakeNoise) == 0x000001, "Wrong size on OFCharacterNoiseEmitter_FootstepsCanMakeNoise");
static_assert(offsetof(OFCharacterNoiseEmitter_FootstepsCanMakeNoise, ReturnValue) == 0x000000, "Member 'OFCharacterNoiseEmitter_FootstepsCanMakeNoise::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFCharacterNoiseEmitter.GetFootstepLoudness
// 0x0004 (0x0004 - 0x0000)
struct OFCharacterNoiseEmitter_GetFootstepLoudness final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterNoiseEmitter_GetFootstepLoudness) == 0x000004, "Wrong alignment on OFCharacterNoiseEmitter_GetFootstepLoudness");
static_assert(sizeof(OFCharacterNoiseEmitter_GetFootstepLoudness) == 0x000004, "Wrong size on OFCharacterNoiseEmitter_GetFootstepLoudness");
static_assert(offsetof(OFCharacterNoiseEmitter_GetFootstepLoudness, ReturnValue) == 0x000000, "Member 'OFCharacterNoiseEmitter_GetFootstepLoudness::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFCharacterNoiseEmitter.GetFootstepNoiseMaxRange
// 0x0004 (0x0004 - 0x0000)
struct OFCharacterNoiseEmitter_GetFootstepNoiseMaxRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterNoiseEmitter_GetFootstepNoiseMaxRange) == 0x000004, "Wrong alignment on OFCharacterNoiseEmitter_GetFootstepNoiseMaxRange");
static_assert(sizeof(OFCharacterNoiseEmitter_GetFootstepNoiseMaxRange) == 0x000004, "Wrong size on OFCharacterNoiseEmitter_GetFootstepNoiseMaxRange");
static_assert(offsetof(OFCharacterNoiseEmitter_GetFootstepNoiseMaxRange, ReturnValue) == 0x000000, "Member 'OFCharacterNoiseEmitter_GetFootstepNoiseMaxRange::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.CheatImmortal
// 0x0004 (0x0004 - 0x0000)
struct OFCheatManager_CheatImmortal final
{
public:
	int32                                         Enable;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_CheatImmortal) == 0x000004, "Wrong alignment on OFCheatManager_CheatImmortal");
static_assert(sizeof(OFCheatManager_CheatImmortal) == 0x000004, "Wrong size on OFCheatManager_CheatImmortal");
static_assert(offsetof(OFCheatManager_CheatImmortal, Enable) == 0x000000, "Member 'OFCheatManager_CheatImmortal::Enable' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.CheatMonsterAIDebugText
// 0x0004 (0x0004 - 0x0000)
struct OFCheatManager_CheatMonsterAIDebugText final
{
public:
	int32                                         Enable;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_CheatMonsterAIDebugText) == 0x000004, "Wrong alignment on OFCheatManager_CheatMonsterAIDebugText");
static_assert(sizeof(OFCheatManager_CheatMonsterAIDebugText) == 0x000004, "Wrong size on OFCheatManager_CheatMonsterAIDebugText");
static_assert(offsetof(OFCheatManager_CheatMonsterAIDebugText, Enable) == 0x000000, "Member 'OFCheatManager_CheatMonsterAIDebugText::Enable' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.CheatMonsterHealthbar
// 0x0004 (0x0004 - 0x0000)
struct OFCheatManager_CheatMonsterHealthbar final
{
public:
	int32                                         Enable;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_CheatMonsterHealthbar) == 0x000004, "Wrong alignment on OFCheatManager_CheatMonsterHealthbar");
static_assert(sizeof(OFCheatManager_CheatMonsterHealthbar) == 0x000004, "Wrong size on OFCheatManager_CheatMonsterHealthbar");
static_assert(offsetof(OFCheatManager_CheatMonsterHealthbar, Enable) == 0x000000, "Member 'OFCheatManager_CheatMonsterHealthbar::Enable' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.CheatSpirit
// 0x0004 (0x0004 - 0x0000)
struct OFCheatManager_CheatSpirit final
{
public:
	int32                                         Enable;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_CheatSpirit) == 0x000004, "Wrong alignment on OFCheatManager_CheatSpirit");
static_assert(sizeof(OFCheatManager_CheatSpirit) == 0x000004, "Wrong size on OFCheatManager_CheatSpirit");
static_assert(offsetof(OFCheatManager_CheatSpirit, Enable) == 0x000000, "Member 'OFCheatManager_CheatSpirit::Enable' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.CompleteAchievement
// 0x0010 (0x0010 - 0x0000)
struct OFCheatManager_CompleteAchievement final
{
public:
	class FString                                 AchievementId;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_CompleteAchievement) == 0x000008, "Wrong alignment on OFCheatManager_CompleteAchievement");
static_assert(sizeof(OFCheatManager_CompleteAchievement) == 0x000010, "Wrong size on OFCheatManager_CompleteAchievement");
static_assert(offsetof(OFCheatManager_CompleteAchievement, AchievementId) == 0x000000, "Member 'OFCheatManager_CompleteAchievement::AchievementId' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.FmodSetControllerOutputBusPortIndex
// 0x0004 (0x0004 - 0x0000)
struct OFCheatManager_FmodSetControllerOutputBusPortIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_FmodSetControllerOutputBusPortIndex) == 0x000004, "Wrong alignment on OFCheatManager_FmodSetControllerOutputBusPortIndex");
static_assert(sizeof(OFCheatManager_FmodSetControllerOutputBusPortIndex) == 0x000004, "Wrong size on OFCheatManager_FmodSetControllerOutputBusPortIndex");
static_assert(offsetof(OFCheatManager_FmodSetControllerOutputBusPortIndex, Index_0) == 0x000000, "Member 'OFCheatManager_FmodSetControllerOutputBusPortIndex::Index_0' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.GetAllItemsFromChapter
// 0x0008 (0x0008 - 0x0000)
struct OFCheatManager_GetAllItemsFromChapter final
{
public:
	int32                                         Chapter;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPopup;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFCheatManager_GetAllItemsFromChapter) == 0x000004, "Wrong alignment on OFCheatManager_GetAllItemsFromChapter");
static_assert(sizeof(OFCheatManager_GetAllItemsFromChapter) == 0x000008, "Wrong size on OFCheatManager_GetAllItemsFromChapter");
static_assert(offsetof(OFCheatManager_GetAllItemsFromChapter, Chapter) == 0x000000, "Member 'OFCheatManager_GetAllItemsFromChapter::Chapter' has a wrong offset!");
static_assert(offsetof(OFCheatManager_GetAllItemsFromChapter, bShowPopup) == 0x000004, "Member 'OFCheatManager_GetAllItemsFromChapter::bShowPopup' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.HackTeleport
// 0x0010 (0x0010 - 0x0000)
struct OFCheatManager_HackTeleport final
{
public:
	class FString                                 InKey;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_HackTeleport) == 0x000008, "Wrong alignment on OFCheatManager_HackTeleport");
static_assert(sizeof(OFCheatManager_HackTeleport) == 0x000010, "Wrong size on OFCheatManager_HackTeleport");
static_assert(offsetof(OFCheatManager_HackTeleport, InKey) == 0x000000, "Member 'OFCheatManager_HackTeleport::InKey' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.LoadFromSlot
// 0x0004 (0x0004 - 0x0000)
struct OFCheatManager_LoadFromSlot final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_LoadFromSlot) == 0x000004, "Wrong alignment on OFCheatManager_LoadFromSlot");
static_assert(sizeof(OFCheatManager_LoadFromSlot) == 0x000004, "Wrong size on OFCheatManager_LoadFromSlot");
static_assert(offsetof(OFCheatManager_LoadFromSlot, SlotIndex) == 0x000000, "Member 'OFCheatManager_LoadFromSlot::SlotIndex' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.OFTeleportTo
// 0x0010 (0x0010 - 0x0000)
struct OFCheatManager_OFTeleportTo final
{
public:
	class FString                                 InDest;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_OFTeleportTo) == 0x000008, "Wrong alignment on OFCheatManager_OFTeleportTo");
static_assert(sizeof(OFCheatManager_OFTeleportTo) == 0x000010, "Wrong size on OFCheatManager_OFTeleportTo");
static_assert(offsetof(OFCheatManager_OFTeleportTo, InDest) == 0x000000, "Member 'OFCheatManager_OFTeleportTo::InDest' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.OverrideVODelayTime
// 0x0004 (0x0004 - 0x0000)
struct OFCheatManager_OverrideVODelayTime final
{
public:
	float                                         InDelay;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_OverrideVODelayTime) == 0x000004, "Wrong alignment on OFCheatManager_OverrideVODelayTime");
static_assert(sizeof(OFCheatManager_OverrideVODelayTime) == 0x000004, "Wrong size on OFCheatManager_OverrideVODelayTime");
static_assert(offsetof(OFCheatManager_OverrideVODelayTime, InDelay) == 0x000000, "Member 'OFCheatManager_OverrideVODelayTime::InDelay' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.OverrideVOIndex
// 0x0004 (0x0004 - 0x0000)
struct OFCheatManager_OverrideVOIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_OverrideVOIndex) == 0x000004, "Wrong alignment on OFCheatManager_OverrideVOIndex");
static_assert(sizeof(OFCheatManager_OverrideVOIndex) == 0x000004, "Wrong size on OFCheatManager_OverrideVOIndex");
static_assert(offsetof(OFCheatManager_OverrideVOIndex, InIndex) == 0x000000, "Member 'OFCheatManager_OverrideVOIndex::InIndex' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SaveToSlot
// 0x0004 (0x0004 - 0x0000)
struct OFCheatManager_SaveToSlot final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_SaveToSlot) == 0x000004, "Wrong alignment on OFCheatManager_SaveToSlot");
static_assert(sizeof(OFCheatManager_SaveToSlot) == 0x000004, "Wrong size on OFCheatManager_SaveToSlot");
static_assert(offsetof(OFCheatManager_SaveToSlot, SlotIndex) == 0x000000, "Member 'OFCheatManager_SaveToSlot::SlotIndex' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SetCamDefaultTargetArmLength
// 0x0004 (0x0004 - 0x0000)
struct OFCheatManager_SetCamDefaultTargetArmLength final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_SetCamDefaultTargetArmLength) == 0x000004, "Wrong alignment on OFCheatManager_SetCamDefaultTargetArmLength");
static_assert(sizeof(OFCheatManager_SetCamDefaultTargetArmLength) == 0x000004, "Wrong size on OFCheatManager_SetCamDefaultTargetArmLength");
static_assert(offsetof(OFCheatManager_SetCamDefaultTargetArmLength, Length) == 0x000000, "Member 'OFCheatManager_SetCamDefaultTargetArmLength::Length' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SetCamRelativeOffset
// 0x000C (0x000C - 0x0000)
struct OFCheatManager_SetCamRelativeOffset final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_SetCamRelativeOffset) == 0x000004, "Wrong alignment on OFCheatManager_SetCamRelativeOffset");
static_assert(sizeof(OFCheatManager_SetCamRelativeOffset) == 0x00000C, "Wrong size on OFCheatManager_SetCamRelativeOffset");
static_assert(offsetof(OFCheatManager_SetCamRelativeOffset, Vector) == 0x000000, "Member 'OFCheatManager_SetCamRelativeOffset::Vector' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SetCamRelativeOffsetX
// 0x0004 (0x0004 - 0x0000)
struct OFCheatManager_SetCamRelativeOffsetX final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_SetCamRelativeOffsetX) == 0x000004, "Wrong alignment on OFCheatManager_SetCamRelativeOffsetX");
static_assert(sizeof(OFCheatManager_SetCamRelativeOffsetX) == 0x000004, "Wrong size on OFCheatManager_SetCamRelativeOffsetX");
static_assert(offsetof(OFCheatManager_SetCamRelativeOffsetX, Value) == 0x000000, "Member 'OFCheatManager_SetCamRelativeOffsetX::Value' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SetCamRelativeOffsetY
// 0x0004 (0x0004 - 0x0000)
struct OFCheatManager_SetCamRelativeOffsetY final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_SetCamRelativeOffsetY) == 0x000004, "Wrong alignment on OFCheatManager_SetCamRelativeOffsetY");
static_assert(sizeof(OFCheatManager_SetCamRelativeOffsetY) == 0x000004, "Wrong size on OFCheatManager_SetCamRelativeOffsetY");
static_assert(offsetof(OFCheatManager_SetCamRelativeOffsetY, Value) == 0x000000, "Member 'OFCheatManager_SetCamRelativeOffsetY::Value' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SetCamRelativeOffsetZ
// 0x0004 (0x0004 - 0x0000)
struct OFCheatManager_SetCamRelativeOffsetZ final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_SetCamRelativeOffsetZ) == 0x000004, "Wrong alignment on OFCheatManager_SetCamRelativeOffsetZ");
static_assert(sizeof(OFCheatManager_SetCamRelativeOffsetZ) == 0x000004, "Wrong size on OFCheatManager_SetCamRelativeOffsetZ");
static_assert(offsetof(OFCheatManager_SetCamRelativeOffsetZ, Value) == 0x000000, "Member 'OFCheatManager_SetCamRelativeOffsetZ::Value' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SetCamSocketOffset
// 0x000C (0x000C - 0x0000)
struct OFCheatManager_SetCamSocketOffset final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_SetCamSocketOffset) == 0x000004, "Wrong alignment on OFCheatManager_SetCamSocketOffset");
static_assert(sizeof(OFCheatManager_SetCamSocketOffset) == 0x00000C, "Wrong size on OFCheatManager_SetCamSocketOffset");
static_assert(offsetof(OFCheatManager_SetCamSocketOffset, Value) == 0x000000, "Member 'OFCheatManager_SetCamSocketOffset::Value' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SetCamSocketOffsetX
// 0x0004 (0x0004 - 0x0000)
struct OFCheatManager_SetCamSocketOffsetX final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_SetCamSocketOffsetX) == 0x000004, "Wrong alignment on OFCheatManager_SetCamSocketOffsetX");
static_assert(sizeof(OFCheatManager_SetCamSocketOffsetX) == 0x000004, "Wrong size on OFCheatManager_SetCamSocketOffsetX");
static_assert(offsetof(OFCheatManager_SetCamSocketOffsetX, Value) == 0x000000, "Member 'OFCheatManager_SetCamSocketOffsetX::Value' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SetCamSocketOffsetY
// 0x0004 (0x0004 - 0x0000)
struct OFCheatManager_SetCamSocketOffsetY final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_SetCamSocketOffsetY) == 0x000004, "Wrong alignment on OFCheatManager_SetCamSocketOffsetY");
static_assert(sizeof(OFCheatManager_SetCamSocketOffsetY) == 0x000004, "Wrong size on OFCheatManager_SetCamSocketOffsetY");
static_assert(offsetof(OFCheatManager_SetCamSocketOffsetY, Value) == 0x000000, "Member 'OFCheatManager_SetCamSocketOffsetY::Value' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SetCamSocketOffsetZ
// 0x0004 (0x0004 - 0x0000)
struct OFCheatManager_SetCamSocketOffsetZ final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_SetCamSocketOffsetZ) == 0x000004, "Wrong alignment on OFCheatManager_SetCamSocketOffsetZ");
static_assert(sizeof(OFCheatManager_SetCamSocketOffsetZ) == 0x000004, "Wrong size on OFCheatManager_SetCamSocketOffsetZ");
static_assert(offsetof(OFCheatManager_SetCamSocketOffsetZ, Value) == 0x000000, "Member 'OFCheatManager_SetCamSocketOffsetZ::Value' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SetCharacter1982Effect
// 0x0002 (0x0002 - 0x0000)
struct OFCheatManager_SetCharacter1982Effect final
{
public:
	bool                                          InEnable1982CharacterEffect;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InHDR;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_SetCharacter1982Effect) == 0x000001, "Wrong alignment on OFCheatManager_SetCharacter1982Effect");
static_assert(sizeof(OFCheatManager_SetCharacter1982Effect) == 0x000002, "Wrong size on OFCheatManager_SetCharacter1982Effect");
static_assert(offsetof(OFCheatManager_SetCharacter1982Effect, InEnable1982CharacterEffect) == 0x000000, "Member 'OFCheatManager_SetCharacter1982Effect::InEnable1982CharacterEffect' has a wrong offset!");
static_assert(offsetof(OFCheatManager_SetCharacter1982Effect, InHDR) == 0x000001, "Member 'OFCheatManager_SetCharacter1982Effect::InHDR' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SetCollisionResponseToAllChannelsForPlayer
// 0x0018 (0x0018 - 0x0000)
struct OFCheatManager_SetCollisionResponseToAllChannelsForPlayer final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCollisionChannel;                                // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCollisionResponse;                               // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_SetCollisionResponseToAllChannelsForPlayer) == 0x000008, "Wrong alignment on OFCheatManager_SetCollisionResponseToAllChannelsForPlayer");
static_assert(sizeof(OFCheatManager_SetCollisionResponseToAllChannelsForPlayer) == 0x000018, "Wrong size on OFCheatManager_SetCollisionResponseToAllChannelsForPlayer");
static_assert(offsetof(OFCheatManager_SetCollisionResponseToAllChannelsForPlayer, InName) == 0x000000, "Member 'OFCheatManager_SetCollisionResponseToAllChannelsForPlayer::InName' has a wrong offset!");
static_assert(offsetof(OFCheatManager_SetCollisionResponseToAllChannelsForPlayer, InCollisionChannel) == 0x000010, "Member 'OFCheatManager_SetCollisionResponseToAllChannelsForPlayer::InCollisionChannel' has a wrong offset!");
static_assert(offsetof(OFCheatManager_SetCollisionResponseToAllChannelsForPlayer, InCollisionResponse) == 0x000014, "Member 'OFCheatManager_SetCollisionResponseToAllChannelsForPlayer::InCollisionResponse' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SetExtraFilter
// 0x0002 (0x0002 - 0x0000)
struct OFCheatManager_SetExtraFilter final
{
public:
	EPostEffectExtra                              InExtraEffect;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InHDR;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_SetExtraFilter) == 0x000001, "Wrong alignment on OFCheatManager_SetExtraFilter");
static_assert(sizeof(OFCheatManager_SetExtraFilter) == 0x000002, "Wrong size on OFCheatManager_SetExtraFilter");
static_assert(offsetof(OFCheatManager_SetExtraFilter, InExtraEffect) == 0x000000, "Member 'OFCheatManager_SetExtraFilter::InExtraEffect' has a wrong offset!");
static_assert(offsetof(OFCheatManager_SetExtraFilter, InHDR) == 0x000001, "Member 'OFCheatManager_SetExtraFilter::InHDR' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SetFactValue
// 0x0018 (0x0018 - 0x0000)
struct OFCheatManager_SetFactValue final
{
public:
	class FString                                 InFactTagStr;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFCheatManager_SetFactValue) == 0x000008, "Wrong alignment on OFCheatManager_SetFactValue");
static_assert(sizeof(OFCheatManager_SetFactValue) == 0x000018, "Wrong size on OFCheatManager_SetFactValue");
static_assert(offsetof(OFCheatManager_SetFactValue, InFactTagStr) == 0x000000, "Member 'OFCheatManager_SetFactValue::InFactTagStr' has a wrong offset!");
static_assert(offsetof(OFCheatManager_SetFactValue, InValue) == 0x000010, "Member 'OFCheatManager_SetFactValue::InValue' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SetLightbarEffect
// 0x0005 (0x0005 - 0x0000)
struct OFCheatManager_SetLightbarEffect final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_SetLightbarEffect) == 0x000001, "Wrong alignment on OFCheatManager_SetLightbarEffect");
static_assert(sizeof(OFCheatManager_SetLightbarEffect) == 0x000005, "Wrong size on OFCheatManager_SetLightbarEffect");
static_assert(offsetof(OFCheatManager_SetLightbarEffect, bEnabled) == 0x000000, "Member 'OFCheatManager_SetLightbarEffect::bEnabled' has a wrong offset!");
static_assert(offsetof(OFCheatManager_SetLightbarEffect, R) == 0x000001, "Member 'OFCheatManager_SetLightbarEffect::R' has a wrong offset!");
static_assert(offsetof(OFCheatManager_SetLightbarEffect, G) == 0x000002, "Member 'OFCheatManager_SetLightbarEffect::G' has a wrong offset!");
static_assert(offsetof(OFCheatManager_SetLightbarEffect, B) == 0x000003, "Member 'OFCheatManager_SetLightbarEffect::B' has a wrong offset!");
static_assert(offsetof(OFCheatManager_SetLightbarEffect, A) == 0x000004, "Member 'OFCheatManager_SetLightbarEffect::A' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SetNewGamePlus
// 0x0001 (0x0001 - 0x0000)
struct OFCheatManager_SetNewGamePlus final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_SetNewGamePlus) == 0x000001, "Wrong alignment on OFCheatManager_SetNewGamePlus");
static_assert(sizeof(OFCheatManager_SetNewGamePlus) == 0x000001, "Wrong size on OFCheatManager_SetNewGamePlus");
static_assert(offsetof(OFCheatManager_SetNewGamePlus, Enabled) == 0x000000, "Member 'OFCheatManager_SetNewGamePlus::Enabled' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SetPlayerDebugLightCastShadows
// 0x0001 (0x0001 - 0x0000)
struct OFCheatManager_SetPlayerDebugLightCastShadows final
{
public:
	bool                                          InCastShadows;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_SetPlayerDebugLightCastShadows) == 0x000001, "Wrong alignment on OFCheatManager_SetPlayerDebugLightCastShadows");
static_assert(sizeof(OFCheatManager_SetPlayerDebugLightCastShadows) == 0x000001, "Wrong size on OFCheatManager_SetPlayerDebugLightCastShadows");
static_assert(offsetof(OFCheatManager_SetPlayerDebugLightCastShadows, InCastShadows) == 0x000000, "Member 'OFCheatManager_SetPlayerDebugLightCastShadows::InCastShadows' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SetPlayerDebugLightIntensity
// 0x0004 (0x0004 - 0x0000)
struct OFCheatManager_SetPlayerDebugLightIntensity final
{
public:
	float                                         InIntensity;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_SetPlayerDebugLightIntensity) == 0x000004, "Wrong alignment on OFCheatManager_SetPlayerDebugLightIntensity");
static_assert(sizeof(OFCheatManager_SetPlayerDebugLightIntensity) == 0x000004, "Wrong size on OFCheatManager_SetPlayerDebugLightIntensity");
static_assert(offsetof(OFCheatManager_SetPlayerDebugLightIntensity, InIntensity) == 0x000000, "Member 'OFCheatManager_SetPlayerDebugLightIntensity::InIntensity' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SetPlayerDebugLightSourceRadius
// 0x0004 (0x0004 - 0x0000)
struct OFCheatManager_SetPlayerDebugLightSourceRadius final
{
public:
	float                                         InSourceRadius;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_SetPlayerDebugLightSourceRadius) == 0x000004, "Wrong alignment on OFCheatManager_SetPlayerDebugLightSourceRadius");
static_assert(sizeof(OFCheatManager_SetPlayerDebugLightSourceRadius) == 0x000004, "Wrong size on OFCheatManager_SetPlayerDebugLightSourceRadius");
static_assert(offsetof(OFCheatManager_SetPlayerDebugLightSourceRadius, InSourceRadius) == 0x000000, "Member 'OFCheatManager_SetPlayerDebugLightSourceRadius::InSourceRadius' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SetTriggerFeedbackEffect
// 0x0003 (0x0003 - 0x0000)
struct OFCheatManager_SetTriggerFeedbackEffect final
{
public:
	bool                                          bRightTrigger;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Position;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Strength;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_SetTriggerFeedbackEffect) == 0x000001, "Wrong alignment on OFCheatManager_SetTriggerFeedbackEffect");
static_assert(sizeof(OFCheatManager_SetTriggerFeedbackEffect) == 0x000003, "Wrong size on OFCheatManager_SetTriggerFeedbackEffect");
static_assert(offsetof(OFCheatManager_SetTriggerFeedbackEffect, bRightTrigger) == 0x000000, "Member 'OFCheatManager_SetTriggerFeedbackEffect::bRightTrigger' has a wrong offset!");
static_assert(offsetof(OFCheatManager_SetTriggerFeedbackEffect, Position) == 0x000001, "Member 'OFCheatManager_SetTriggerFeedbackEffect::Position' has a wrong offset!");
static_assert(offsetof(OFCheatManager_SetTriggerFeedbackEffect, Strength) == 0x000002, "Member 'OFCheatManager_SetTriggerFeedbackEffect::Strength' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SetTriggerVibrationEffect
// 0x0004 (0x0004 - 0x0000)
struct OFCheatManager_SetTriggerVibrationEffect final
{
public:
	bool                                          bRightTrigger;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Position;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Frequency;                                         // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Amplitude;                                         // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_SetTriggerVibrationEffect) == 0x000001, "Wrong alignment on OFCheatManager_SetTriggerVibrationEffect");
static_assert(sizeof(OFCheatManager_SetTriggerVibrationEffect) == 0x000004, "Wrong size on OFCheatManager_SetTriggerVibrationEffect");
static_assert(offsetof(OFCheatManager_SetTriggerVibrationEffect, bRightTrigger) == 0x000000, "Member 'OFCheatManager_SetTriggerVibrationEffect::bRightTrigger' has a wrong offset!");
static_assert(offsetof(OFCheatManager_SetTriggerVibrationEffect, Position) == 0x000001, "Member 'OFCheatManager_SetTriggerVibrationEffect::Position' has a wrong offset!");
static_assert(offsetof(OFCheatManager_SetTriggerVibrationEffect, Frequency) == 0x000002, "Member 'OFCheatManager_SetTriggerVibrationEffect::Frequency' has a wrong offset!");
static_assert(offsetof(OFCheatManager_SetTriggerVibrationEffect, Amplitude) == 0x000003, "Member 'OFCheatManager_SetTriggerVibrationEffect::Amplitude' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SetTriggerWeaponEffect
// 0x0004 (0x0004 - 0x0000)
struct OFCheatManager_SetTriggerWeaponEffect final
{
public:
	bool                                          bRightTrigger;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StartPosition;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndPosition;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Strength;                                          // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_SetTriggerWeaponEffect) == 0x000001, "Wrong alignment on OFCheatManager_SetTriggerWeaponEffect");
static_assert(sizeof(OFCheatManager_SetTriggerWeaponEffect) == 0x000004, "Wrong size on OFCheatManager_SetTriggerWeaponEffect");
static_assert(offsetof(OFCheatManager_SetTriggerWeaponEffect, bRightTrigger) == 0x000000, "Member 'OFCheatManager_SetTriggerWeaponEffect::bRightTrigger' has a wrong offset!");
static_assert(offsetof(OFCheatManager_SetTriggerWeaponEffect, StartPosition) == 0x000001, "Member 'OFCheatManager_SetTriggerWeaponEffect::StartPosition' has a wrong offset!");
static_assert(offsetof(OFCheatManager_SetTriggerWeaponEffect, EndPosition) == 0x000002, "Member 'OFCheatManager_SetTriggerWeaponEffect::EndPosition' has a wrong offset!");
static_assert(offsetof(OFCheatManager_SetTriggerWeaponEffect, Strength) == 0x000003, "Member 'OFCheatManager_SetTriggerWeaponEffect::Strength' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SimulateDLCOwnership
// 0x0001 (0x0001 - 0x0000)
struct OFCheatManager_SimulateDLCOwnership final
{
public:
	bool                                          DLCOwned;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_SimulateDLCOwnership) == 0x000001, "Wrong alignment on OFCheatManager_SimulateDLCOwnership");
static_assert(sizeof(OFCheatManager_SimulateDLCOwnership) == 0x000001, "Wrong size on OFCheatManager_SimulateDLCOwnership");
static_assert(offsetof(OFCheatManager_SimulateDLCOwnership, DLCOwned) == 0x000000, "Member 'OFCheatManager_SimulateDLCOwnership::DLCOwned' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.SwitchPlayerCharacter
// 0x0001 (0x0001 - 0x0000)
struct OFCheatManager_SwitchPlayerCharacter final
{
public:
	EPlayerCharacterType                          InCharacterType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_SwitchPlayerCharacter) == 0x000001, "Wrong alignment on OFCheatManager_SwitchPlayerCharacter");
static_assert(sizeof(OFCheatManager_SwitchPlayerCharacter) == 0x000001, "Wrong size on OFCheatManager_SwitchPlayerCharacter");
static_assert(offsetof(OFCheatManager_SwitchPlayerCharacter, InCharacterType) == 0x000000, "Member 'OFCheatManager_SwitchPlayerCharacter::InCharacterType' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.TeleportToSequence
// 0x0010 (0x0010 - 0x0000)
struct OFCheatManager_TeleportToSequence final
{
public:
	class FString                                 SubStr;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_TeleportToSequence) == 0x000008, "Wrong alignment on OFCheatManager_TeleportToSequence");
static_assert(sizeof(OFCheatManager_TeleportToSequence) == 0x000010, "Wrong size on OFCheatManager_TeleportToSequence");
static_assert(offsetof(OFCheatManager_TeleportToSequence, SubStr) == 0x000000, "Member 'OFCheatManager_TeleportToSequence::SubStr' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.TryToStartSequence
// 0x0010 (0x0010 - 0x0000)
struct OFCheatManager_TryToStartSequence final
{
public:
	class FString                                 SubStr;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_TryToStartSequence) == 0x000008, "Wrong alignment on OFCheatManager_TryToStartSequence");
static_assert(sizeof(OFCheatManager_TryToStartSequence) == 0x000010, "Wrong size on OFCheatManager_TryToStartSequence");
static_assert(offsetof(OFCheatManager_TryToStartSequence, SubStr) == 0x000000, "Member 'OFCheatManager_TryToStartSequence::SubStr' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.DumpFacts
// 0x0018 (0x0018 - 0x0000)
struct OFCheatManager_DumpFacts final
{
public:
	bool                                          bAllowOverwriting;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExportForUnreal;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Filename;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_DumpFacts) == 0x000008, "Wrong alignment on OFCheatManager_DumpFacts");
static_assert(sizeof(OFCheatManager_DumpFacts) == 0x000018, "Wrong size on OFCheatManager_DumpFacts");
static_assert(offsetof(OFCheatManager_DumpFacts, bAllowOverwriting) == 0x000000, "Member 'OFCheatManager_DumpFacts::bAllowOverwriting' has a wrong offset!");
static_assert(offsetof(OFCheatManager_DumpFacts, bExportForUnreal) == 0x000001, "Member 'OFCheatManager_DumpFacts::bExportForUnreal' has a wrong offset!");
static_assert(offsetof(OFCheatManager_DumpFacts, Filename) == 0x000008, "Member 'OFCheatManager_DumpFacts::Filename' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.ObsessionLock
// 0x0001 (0x0001 - 0x0000)
struct OFCheatManager_ObsessionLock final
{
public:
	bool                                          bLock;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_ObsessionLock) == 0x000001, "Wrong alignment on OFCheatManager_ObsessionLock");
static_assert(sizeof(OFCheatManager_ObsessionLock) == 0x000001, "Wrong size on OFCheatManager_ObsessionLock");
static_assert(offsetof(OFCheatManager_ObsessionLock, bLock) == 0x000000, "Member 'OFCheatManager_ObsessionLock::bLock' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.ObsessionOverride
// 0x0004 (0x0004 - 0x0000)
struct OFCheatManager_ObsessionOverride final
{
public:
	float                                         Obsession;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_ObsessionOverride) == 0x000004, "Wrong alignment on OFCheatManager_ObsessionOverride");
static_assert(sizeof(OFCheatManager_ObsessionOverride) == 0x000004, "Wrong size on OFCheatManager_ObsessionOverride");
static_assert(offsetof(OFCheatManager_ObsessionOverride, Obsession) == 0x000000, "Member 'OFCheatManager_ObsessionOverride::Obsession' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.VerboseFacts
// 0x0001 (0x0001 - 0x0000)
struct OFCheatManager_VerboseFacts final
{
public:
	bool                                          bVerboseFactsEnabled;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_VerboseFacts) == 0x000001, "Wrong alignment on OFCheatManager_VerboseFacts");
static_assert(sizeof(OFCheatManager_VerboseFacts) == 0x000001, "Wrong size on OFCheatManager_VerboseFacts");
static_assert(offsetof(OFCheatManager_VerboseFacts, bVerboseFactsEnabled) == 0x000000, "Member 'OFCheatManager_VerboseFacts::bVerboseFactsEnabled' has a wrong offset!");

// Function ObsidianFox.OFCheatManager.VerboseFactsDuration
// 0x0004 (0x0004 - 0x0000)
struct OFCheatManager_VerboseFactsDuration final
{
public:
	int32                                         Duration;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCheatManager_VerboseFactsDuration) == 0x000004, "Wrong alignment on OFCheatManager_VerboseFactsDuration");
static_assert(sizeof(OFCheatManager_VerboseFactsDuration) == 0x000004, "Wrong size on OFCheatManager_VerboseFactsDuration");
static_assert(offsetof(OFCheatManager_VerboseFactsDuration, Duration) == 0x000000, "Member 'OFCheatManager_VerboseFactsDuration::Duration' has a wrong offset!");

// Function ObsidianFox.OFChunkInstallPopupWidget.SetChunkIndex
// 0x0004 (0x0004 - 0x0000)
struct OFChunkInstallPopupWidget_SetChunkIndex final
{
public:
	int32                                         NewChunkIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFChunkInstallPopupWidget_SetChunkIndex) == 0x000004, "Wrong alignment on OFChunkInstallPopupWidget_SetChunkIndex");
static_assert(sizeof(OFChunkInstallPopupWidget_SetChunkIndex) == 0x000004, "Wrong size on OFChunkInstallPopupWidget_SetChunkIndex");
static_assert(offsetof(OFChunkInstallPopupWidget_SetChunkIndex, NewChunkIndex) == 0x000000, "Member 'OFChunkInstallPopupWidget_SetChunkIndex::NewChunkIndex' has a wrong offset!");

// Function ObsidianFox.OFChunkInstallPopupWidget.SetMessage
// 0x0018 (0x0018 - 0x0000)
struct OFChunkInstallPopupWidget_SetMessage final
{
public:
	class FText                                   _strText;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFChunkInstallPopupWidget_SetMessage) == 0x000008, "Wrong alignment on OFChunkInstallPopupWidget_SetMessage");
static_assert(sizeof(OFChunkInstallPopupWidget_SetMessage) == 0x000018, "Wrong size on OFChunkInstallPopupWidget_SetMessage");
static_assert(offsetof(OFChunkInstallPopupWidget_SetMessage, _strText) == 0x000000, "Member 'OFChunkInstallPopupWidget_SetMessage::_strText' has a wrong offset!");

// Function ObsidianFox.OFChunkSubSystem.GetProgressForChunk
// 0x0008 (0x0008 - 0x0000)
struct OFChunkSubSystem_GetProgressForChunk final
{
public:
	uint32                                        CheckChunkIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFChunkSubSystem_GetProgressForChunk) == 0x000004, "Wrong alignment on OFChunkSubSystem_GetProgressForChunk");
static_assert(sizeof(OFChunkSubSystem_GetProgressForChunk) == 0x000008, "Wrong size on OFChunkSubSystem_GetProgressForChunk");
static_assert(offsetof(OFChunkSubSystem_GetProgressForChunk, CheckChunkIndex) == 0x000000, "Member 'OFChunkSubSystem_GetProgressForChunk::CheckChunkIndex' has a wrong offset!");
static_assert(offsetof(OFChunkSubSystem_GetProgressForChunk, ReturnValue) == 0x000004, "Member 'OFChunkSubSystem_GetProgressForChunk::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFChunkSubSystem.IsChunkForIndexLoaded
// 0x0008 (0x0008 - 0x0000)
struct OFChunkSubSystem_IsChunkForIndexLoaded final
{
public:
	uint32                                        CheckChunkIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFChunkSubSystem_IsChunkForIndexLoaded) == 0x000004, "Wrong alignment on OFChunkSubSystem_IsChunkForIndexLoaded");
static_assert(sizeof(OFChunkSubSystem_IsChunkForIndexLoaded) == 0x000008, "Wrong size on OFChunkSubSystem_IsChunkForIndexLoaded");
static_assert(offsetof(OFChunkSubSystem_IsChunkForIndexLoaded, CheckChunkIndex) == 0x000000, "Member 'OFChunkSubSystem_IsChunkForIndexLoaded::CheckChunkIndex' has a wrong offset!");
static_assert(offsetof(OFChunkSubSystem_IsChunkForIndexLoaded, ReturnValue) == 0x000004, "Member 'OFChunkSubSystem_IsChunkForIndexLoaded::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.OFCreditsTextPanelWidget.Action_OnCreditsTextPanelDone__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct OFCreditsTextPanelWidget_Action_OnCreditsTextPanelDone__DelegateSignature final
{
public:
	class UOFCreditsTextPanelWidget*              Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCreditsTextPanelWidget_Action_OnCreditsTextPanelDone__DelegateSignature) == 0x000008, "Wrong alignment on OFCreditsTextPanelWidget_Action_OnCreditsTextPanelDone__DelegateSignature");
static_assert(sizeof(OFCreditsTextPanelWidget_Action_OnCreditsTextPanelDone__DelegateSignature) == 0x000008, "Wrong size on OFCreditsTextPanelWidget_Action_OnCreditsTextPanelDone__DelegateSignature");
static_assert(offsetof(OFCreditsTextPanelWidget_Action_OnCreditsTextPanelDone__DelegateSignature, Panel) == 0x000000, "Member 'OFCreditsTextPanelWidget_Action_OnCreditsTextPanelDone__DelegateSignature::Panel' has a wrong offset!");

// Function ObsidianFox.OFCreditsTextPanelWidget.SetFont
// 0x0058 (0x0058 - 0x0000)
struct OFCreditsTextPanelWidget_SetFont final
{
public:
	struct FSlateFontInfo                         FontInfo;                                          // 0x0000(0x0058)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCreditsTextPanelWidget_SetFont) == 0x000008, "Wrong alignment on OFCreditsTextPanelWidget_SetFont");
static_assert(sizeof(OFCreditsTextPanelWidget_SetFont) == 0x000058, "Wrong size on OFCreditsTextPanelWidget_SetFont");
static_assert(offsetof(OFCreditsTextPanelWidget_SetFont, FontInfo) == 0x000000, "Member 'OFCreditsTextPanelWidget_SetFont::FontInfo' has a wrong offset!");

// Function ObsidianFox.OFCreditsTextPanelWidget.SetText
// 0x0018 (0x0018 - 0x0000)
struct OFCreditsTextPanelWidget_SetText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCreditsTextPanelWidget_SetText) == 0x000008, "Wrong alignment on OFCreditsTextPanelWidget_SetText");
static_assert(sizeof(OFCreditsTextPanelWidget_SetText) == 0x000018, "Wrong size on OFCreditsTextPanelWidget_SetText");
static_assert(offsetof(OFCreditsTextPanelWidget_SetText, Text) == 0x000000, "Member 'OFCreditsTextPanelWidget_SetText::Text' has a wrong offset!");

// Function ObsidianFox.OFCreditsTextPanelWidget.TriggerScrollAnimation
// 0x0004 (0x0004 - 0x0000)
struct OFCreditsTextPanelWidget_TriggerScrollAnimation final
{
public:
	float                                         PlaybackSpeed;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCreditsTextPanelWidget_TriggerScrollAnimation) == 0x000004, "Wrong alignment on OFCreditsTextPanelWidget_TriggerScrollAnimation");
static_assert(sizeof(OFCreditsTextPanelWidget_TriggerScrollAnimation) == 0x000004, "Wrong size on OFCreditsTextPanelWidget_TriggerScrollAnimation");
static_assert(offsetof(OFCreditsTextPanelWidget_TriggerScrollAnimation, PlaybackSpeed) == 0x000000, "Member 'OFCreditsTextPanelWidget_TriggerScrollAnimation::PlaybackSpeed' has a wrong offset!");

// Function ObsidianFox.OFCreditsWidget.CreateTextPanel
// 0x0008 (0x0008 - 0x0000)
struct OFCreditsWidget_CreateTextPanel final
{
public:
	class UOFCreditsTextPanelWidget*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCreditsWidget_CreateTextPanel) == 0x000008, "Wrong alignment on OFCreditsWidget_CreateTextPanel");
static_assert(sizeof(OFCreditsWidget_CreateTextPanel) == 0x000008, "Wrong size on OFCreditsWidget_CreateTextPanel");
static_assert(offsetof(OFCreditsWidget_CreateTextPanel, ReturnValue) == 0x000000, "Member 'OFCreditsWidget_CreateTextPanel::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFCreditsWidget.HandleTextPanelDone
// 0x0008 (0x0008 - 0x0000)
struct OFCreditsWidget_HandleTextPanelDone final
{
public:
	class UOFCreditsTextPanelWidget*              Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCreditsWidget_HandleTextPanelDone) == 0x000008, "Wrong alignment on OFCreditsWidget_HandleTextPanelDone");
static_assert(sizeof(OFCreditsWidget_HandleTextPanelDone) == 0x000008, "Wrong size on OFCreditsWidget_HandleTextPanelDone");
static_assert(offsetof(OFCreditsWidget_HandleTextPanelDone, Panel) == 0x000000, "Member 'OFCreditsWidget_HandleTextPanelDone::Panel' has a wrong offset!");

// Function ObsidianFox.BFL_OFCustomMovementMode.GetOFCustomMovementMode
// 0x0002 (0x0002 - 0x0000)
struct BFL_OFCustomMovementMode_GetOFCustomMovementMode final
{
public:
	EOFCustomMovementMode                         InCustomMovementMode;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFL_OFCustomMovementMode_GetOFCustomMovementMode) == 0x000001, "Wrong alignment on BFL_OFCustomMovementMode_GetOFCustomMovementMode");
static_assert(sizeof(BFL_OFCustomMovementMode_GetOFCustomMovementMode) == 0x000002, "Wrong size on BFL_OFCustomMovementMode_GetOFCustomMovementMode");
static_assert(offsetof(BFL_OFCustomMovementMode_GetOFCustomMovementMode, InCustomMovementMode) == 0x000000, "Member 'BFL_OFCustomMovementMode_GetOFCustomMovementMode::InCustomMovementMode' has a wrong offset!");
static_assert(offsetof(BFL_OFCustomMovementMode_GetOFCustomMovementMode, ReturnValue) == 0x000001, "Member 'BFL_OFCustomMovementMode_GetOFCustomMovementMode::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFEnemyAIController.OnPlayStateChanged
// 0x0002 (0x0002 - 0x0000)
struct OFEnemyAIController_OnPlayStateChanged final
{
public:
	EGameMainState                                OldGameState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMainState                                NewGameState;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFEnemyAIController_OnPlayStateChanged) == 0x000001, "Wrong alignment on OFEnemyAIController_OnPlayStateChanged");
static_assert(sizeof(OFEnemyAIController_OnPlayStateChanged) == 0x000002, "Wrong size on OFEnemyAIController_OnPlayStateChanged");
static_assert(offsetof(OFEnemyAIController_OnPlayStateChanged, OldGameState) == 0x000000, "Member 'OFEnemyAIController_OnPlayStateChanged::OldGameState' has a wrong offset!");
static_assert(offsetof(OFEnemyAIController_OnPlayStateChanged, NewGameState) == 0x000001, "Member 'OFEnemyAIController_OnPlayStateChanged::NewGameState' has a wrong offset!");

// Function ObsidianFox.OFEnemyAIController.OnTargetPerceptionUpdated
// 0x0048 (0x0048 - 0x0000)
struct OFEnemyAIController_OnTargetPerceptionUpdated final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIStimulus                            Stimulus;                                          // 0x0008(0x003C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFEnemyAIController_OnTargetPerceptionUpdated) == 0x000008, "Wrong alignment on OFEnemyAIController_OnTargetPerceptionUpdated");
static_assert(sizeof(OFEnemyAIController_OnTargetPerceptionUpdated) == 0x000048, "Wrong size on OFEnemyAIController_OnTargetPerceptionUpdated");
static_assert(offsetof(OFEnemyAIController_OnTargetPerceptionUpdated, Actor) == 0x000000, "Member 'OFEnemyAIController_OnTargetPerceptionUpdated::Actor' has a wrong offset!");
static_assert(offsetof(OFEnemyAIController_OnTargetPerceptionUpdated, Stimulus) == 0x000008, "Member 'OFEnemyAIController_OnTargetPerceptionUpdated::Stimulus' has a wrong offset!");

// Function ObsidianFox.OFEnemyAIController.SetAggro
// 0x0001 (0x0001 - 0x0000)
struct OFEnemyAIController_SetAggro final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFEnemyAIController_SetAggro) == 0x000001, "Wrong alignment on OFEnemyAIController_SetAggro");
static_assert(sizeof(OFEnemyAIController_SetAggro) == 0x000001, "Wrong size on OFEnemyAIController_SetAggro");
static_assert(offsetof(OFEnemyAIController_SetAggro, bEnable) == 0x000000, "Member 'OFEnemyAIController_SetAggro::bEnable' has a wrong offset!");

// DelegateFunction ObsidianFox.OFEnemyCharacter.AggroChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct OFEnemyCharacter_AggroChanged__DelegateSignature final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFEnemyCharacter_AggroChanged__DelegateSignature) == 0x000001, "Wrong alignment on OFEnemyCharacter_AggroChanged__DelegateSignature");
static_assert(sizeof(OFEnemyCharacter_AggroChanged__DelegateSignature) == 0x000001, "Wrong size on OFEnemyCharacter_AggroChanged__DelegateSignature");
static_assert(offsetof(OFEnemyCharacter_AggroChanged__DelegateSignature, bEnabled) == 0x000000, "Member 'OFEnemyCharacter_AggroChanged__DelegateSignature::bEnabled' has a wrong offset!");

// Function ObsidianFox.OFEnemyCharacter.PlayCharHitSound
// 0x0098 (0x0098 - 0x0000)
struct OFEnemyCharacter_PlayCharHitSound final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             Sound;                                             // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFEnemyCharacter_PlayCharHitSound) == 0x000008, "Wrong alignment on OFEnemyCharacter_PlayCharHitSound");
static_assert(sizeof(OFEnemyCharacter_PlayCharHitSound) == 0x000098, "Wrong size on OFEnemyCharacter_PlayCharHitSound");
static_assert(offsetof(OFEnemyCharacter_PlayCharHitSound, Hit) == 0x000000, "Member 'OFEnemyCharacter_PlayCharHitSound::Hit' has a wrong offset!");
static_assert(offsetof(OFEnemyCharacter_PlayCharHitSound, Damage) == 0x000088, "Member 'OFEnemyCharacter_PlayCharHitSound::Damage' has a wrong offset!");
static_assert(offsetof(OFEnemyCharacter_PlayCharHitSound, Sound) == 0x000090, "Member 'OFEnemyCharacter_PlayCharHitSound::Sound' has a wrong offset!");

// Function ObsidianFox.OFEnemyCharacter.SetSpawnerActor
// 0x0008 (0x0008 - 0x0000)
struct OFEnemyCharacter_SetSpawnerActor final
{
public:
	class AEnemySpawner*                          Spawner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFEnemyCharacter_SetSpawnerActor) == 0x000008, "Wrong alignment on OFEnemyCharacter_SetSpawnerActor");
static_assert(sizeof(OFEnemyCharacter_SetSpawnerActor) == 0x000008, "Wrong size on OFEnemyCharacter_SetSpawnerActor");
static_assert(offsetof(OFEnemyCharacter_SetSpawnerActor, Spawner) == 0x000000, "Member 'OFEnemyCharacter_SetSpawnerActor::Spawner' has a wrong offset!");

// Function ObsidianFox.OFEnemyCharacter.SpawnCharHitDecal
// 0x0098 (0x0098 - 0x0000)
struct OFEnemyCharacter_SpawnCharHitDecal final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      DecalMaterial;                                     // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFEnemyCharacter_SpawnCharHitDecal) == 0x000008, "Wrong alignment on OFEnemyCharacter_SpawnCharHitDecal");
static_assert(sizeof(OFEnemyCharacter_SpawnCharHitDecal) == 0x000098, "Wrong size on OFEnemyCharacter_SpawnCharHitDecal");
static_assert(offsetof(OFEnemyCharacter_SpawnCharHitDecal, Hit) == 0x000000, "Member 'OFEnemyCharacter_SpawnCharHitDecal::Hit' has a wrong offset!");
static_assert(offsetof(OFEnemyCharacter_SpawnCharHitDecal, Damage) == 0x000088, "Member 'OFEnemyCharacter_SpawnCharHitDecal::Damage' has a wrong offset!");
static_assert(offsetof(OFEnemyCharacter_SpawnCharHitDecal, DecalMaterial) == 0x000090, "Member 'OFEnemyCharacter_SpawnCharHitDecal::DecalMaterial' has a wrong offset!");

// Function ObsidianFox.OFEnemyCharacter.SpawnCharHitParticleEffect
// 0x00D0 (0x00D0 - 0x0000)
struct OFEnemyCharacter_SpawnCharHitParticleEffect final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharHitFX                             HitFX;                                             // 0x0090(0x0040)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFEnemyCharacter_SpawnCharHitParticleEffect) == 0x000008, "Wrong alignment on OFEnemyCharacter_SpawnCharHitParticleEffect");
static_assert(sizeof(OFEnemyCharacter_SpawnCharHitParticleEffect) == 0x0000D0, "Wrong size on OFEnemyCharacter_SpawnCharHitParticleEffect");
static_assert(offsetof(OFEnemyCharacter_SpawnCharHitParticleEffect, Hit) == 0x000000, "Member 'OFEnemyCharacter_SpawnCharHitParticleEffect::Hit' has a wrong offset!");
static_assert(offsetof(OFEnemyCharacter_SpawnCharHitParticleEffect, Damage) == 0x000088, "Member 'OFEnemyCharacter_SpawnCharHitParticleEffect::Damage' has a wrong offset!");
static_assert(offsetof(OFEnemyCharacter_SpawnCharHitParticleEffect, HitFX) == 0x000090, "Member 'OFEnemyCharacter_SpawnCharHitParticleEffect::HitFX' has a wrong offset!");

// Function ObsidianFox.OFEnemyCharacter.UpdateBlackboardHealth
// 0x0028 (0x0028 - 0x0000)
struct OFEnemyCharacter_UpdateBlackboardHealth final
{
public:
	float                                         NewCurrentHealth;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EventTags;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFEnemyCharacter_UpdateBlackboardHealth) == 0x000008, "Wrong alignment on OFEnemyCharacter_UpdateBlackboardHealth");
static_assert(sizeof(OFEnemyCharacter_UpdateBlackboardHealth) == 0x000028, "Wrong size on OFEnemyCharacter_UpdateBlackboardHealth");
static_assert(offsetof(OFEnemyCharacter_UpdateBlackboardHealth, NewCurrentHealth) == 0x000000, "Member 'OFEnemyCharacter_UpdateBlackboardHealth::NewCurrentHealth' has a wrong offset!");
static_assert(offsetof(OFEnemyCharacter_UpdateBlackboardHealth, DeltaValue) == 0x000004, "Member 'OFEnemyCharacter_UpdateBlackboardHealth::DeltaValue' has a wrong offset!");
static_assert(offsetof(OFEnemyCharacter_UpdateBlackboardHealth, EventTags) == 0x000008, "Member 'OFEnemyCharacter_UpdateBlackboardHealth::EventTags' has a wrong offset!");

// Function ObsidianFox.OFEnemyCharacter.GetDistToTarget
// 0x0004 (0x0004 - 0x0000)
struct OFEnemyCharacter_GetDistToTarget final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFEnemyCharacter_GetDistToTarget) == 0x000004, "Wrong alignment on OFEnemyCharacter_GetDistToTarget");
static_assert(sizeof(OFEnemyCharacter_GetDistToTarget) == 0x000004, "Wrong size on OFEnemyCharacter_GetDistToTarget");
static_assert(offsetof(OFEnemyCharacter_GetDistToTarget, ReturnValue) == 0x000000, "Member 'OFEnemyCharacter_GetDistToTarget::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFEnemyCharacter.IsInCombat
// 0x0001 (0x0001 - 0x0000)
struct OFEnemyCharacter_IsInCombat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFEnemyCharacter_IsInCombat) == 0x000001, "Wrong alignment on OFEnemyCharacter_IsInCombat");
static_assert(sizeof(OFEnemyCharacter_IsInCombat) == 0x000001, "Wrong size on OFEnemyCharacter_IsInCombat");
static_assert(offsetof(OFEnemyCharacter_IsInCombat, ReturnValue) == 0x000000, "Member 'OFEnemyCharacter_IsInCombat::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFGameInstance.CheatsEnabled
// 0x0001 (0x0001 - 0x0000)
struct OFGameInstance_CheatsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameInstance_CheatsEnabled) == 0x000001, "Wrong alignment on OFGameInstance_CheatsEnabled");
static_assert(sizeof(OFGameInstance_CheatsEnabled) == 0x000001, "Wrong size on OFGameInstance_CheatsEnabled");
static_assert(offsetof(OFGameInstance_CheatsEnabled, ReturnValue) == 0x000000, "Member 'OFGameInstance_CheatsEnabled::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFHUD.GetWidgetOfClass
// 0x0030 (0x0030 - 0x0000)
struct OFHUD_GetWidgetOfClass final
{
public:
	TSoftClassPtr<class UClass>                   WidgetClass;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInGameUIWidget*                        ReturnValue;                                       // 0x0028(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFHUD_GetWidgetOfClass) == 0x000008, "Wrong alignment on OFHUD_GetWidgetOfClass");
static_assert(sizeof(OFHUD_GetWidgetOfClass) == 0x000030, "Wrong size on OFHUD_GetWidgetOfClass");
static_assert(offsetof(OFHUD_GetWidgetOfClass, WidgetClass) == 0x000000, "Member 'OFHUD_GetWidgetOfClass::WidgetClass' has a wrong offset!");
static_assert(offsetof(OFHUD_GetWidgetOfClass, ReturnValue) == 0x000028, "Member 'OFHUD_GetWidgetOfClass::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFLoadGameMenuWidget.OnConfirmationDone
// 0x0001 (0x0001 - 0x0000)
struct OFLoadGameMenuWidget_OnConfirmationDone final
{
public:
	bool                                          bIsAccepted;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFLoadGameMenuWidget_OnConfirmationDone) == 0x000001, "Wrong alignment on OFLoadGameMenuWidget_OnConfirmationDone");
static_assert(sizeof(OFLoadGameMenuWidget_OnConfirmationDone) == 0x000001, "Wrong size on OFLoadGameMenuWidget_OnConfirmationDone");
static_assert(offsetof(OFLoadGameMenuWidget_OnConfirmationDone, bIsAccepted) == 0x000000, "Member 'OFLoadGameMenuWidget_OnConfirmationDone::bIsAccepted' has a wrong offset!");

// Function ObsidianFox.OFLoadGameMenuWidget.OnLoadSaveButtonHover
// 0x0008 (0x0008 - 0x0000)
struct OFLoadGameMenuWidget_OnLoadSaveButtonHover final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFLoadGameMenuWidget_OnLoadSaveButtonHover) == 0x000008, "Wrong alignment on OFLoadGameMenuWidget_OnLoadSaveButtonHover");
static_assert(sizeof(OFLoadGameMenuWidget_OnLoadSaveButtonHover) == 0x000008, "Wrong size on OFLoadGameMenuWidget_OnLoadSaveButtonHover");
static_assert(offsetof(OFLoadGameMenuWidget_OnLoadSaveButtonHover, Widget) == 0x000000, "Member 'OFLoadGameMenuWidget_OnLoadSaveButtonHover::Widget' has a wrong offset!");

// Function ObsidianFox.OFLoadGameMenuWidget.OnSaveFinished
// 0x0001 (0x0001 - 0x0000)
struct OFLoadGameMenuWidget_OnSaveFinished final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFLoadGameMenuWidget_OnSaveFinished) == 0x000001, "Wrong alignment on OFLoadGameMenuWidget_OnSaveFinished");
static_assert(sizeof(OFLoadGameMenuWidget_OnSaveFinished) == 0x000001, "Wrong size on OFLoadGameMenuWidget_OnSaveFinished");
static_assert(offsetof(OFLoadGameMenuWidget_OnSaveFinished, Success) == 0x000000, "Member 'OFLoadGameMenuWidget_OnSaveFinished::Success' has a wrong offset!");

// Function ObsidianFox.OFMenuSpinningItemSelector.MoveSelection
// 0x0004 (0x0004 - 0x0000)
struct OFMenuSpinningItemSelector_MoveSelection final
{
public:
	int32                                         Direction;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFMenuSpinningItemSelector_MoveSelection) == 0x000004, "Wrong alignment on OFMenuSpinningItemSelector_MoveSelection");
static_assert(sizeof(OFMenuSpinningItemSelector_MoveSelection) == 0x000004, "Wrong size on OFMenuSpinningItemSelector_MoveSelection");
static_assert(offsetof(OFMenuSpinningItemSelector_MoveSelection, Direction) == 0x000000, "Member 'OFMenuSpinningItemSelector_MoveSelection::Direction' has a wrong offset!");

// Function ObsidianFox.OFMenuSpinningItemSelector.SetItems
// 0x0010 (0x0010 - 0x0000)
struct OFMenuSpinningItemSelector_SetItems final
{
public:
	TArray<TSoftObjectPtr<class UItemData>>       SoftItems;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFMenuSpinningItemSelector_SetItems) == 0x000008, "Wrong alignment on OFMenuSpinningItemSelector_SetItems");
static_assert(sizeof(OFMenuSpinningItemSelector_SetItems) == 0x000010, "Wrong size on OFMenuSpinningItemSelector_SetItems");
static_assert(offsetof(OFMenuSpinningItemSelector_SetItems, SoftItems) == 0x000000, "Member 'OFMenuSpinningItemSelector_SetItems::SoftItems' has a wrong offset!");

// Function ObsidianFox.OFMenuSpinningItemSelector.UpdateSelectorState
// 0x0004 (0x0004 - 0x0000)
struct OFMenuSpinningItemSelector_UpdateSelectorState final
{
public:
	float                                         State;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFMenuSpinningItemSelector_UpdateSelectorState) == 0x000004, "Wrong alignment on OFMenuSpinningItemSelector_UpdateSelectorState");
static_assert(sizeof(OFMenuSpinningItemSelector_UpdateSelectorState) == 0x000004, "Wrong size on OFMenuSpinningItemSelector_UpdateSelectorState");
static_assert(offsetof(OFMenuSpinningItemSelector_UpdateSelectorState, State) == 0x000000, "Member 'OFMenuSpinningItemSelector_UpdateSelectorState::State' has a wrong offset!");

// Function ObsidianFox.OFMenuSpinningItemSelector.GetActiveMenuSlot
// 0x0008 (0x0008 - 0x0000)
struct OFMenuSpinningItemSelector_GetActiveMenuSlot final
{
public:
	class UMenuInventorySelectionSlot*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFMenuSpinningItemSelector_GetActiveMenuSlot) == 0x000008, "Wrong alignment on OFMenuSpinningItemSelector_GetActiveMenuSlot");
static_assert(sizeof(OFMenuSpinningItemSelector_GetActiveMenuSlot) == 0x000008, "Wrong size on OFMenuSpinningItemSelector_GetActiveMenuSlot");
static_assert(offsetof(OFMenuSpinningItemSelector_GetActiveMenuSlot, ReturnValue) == 0x000000, "Member 'OFMenuSpinningItemSelector_GetActiveMenuSlot::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFMenuSpinningItemSelector.GetNumItems
// 0x0004 (0x0004 - 0x0000)
struct OFMenuSpinningItemSelector_GetNumItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFMenuSpinningItemSelector_GetNumItems) == 0x000004, "Wrong alignment on OFMenuSpinningItemSelector_GetNumItems");
static_assert(sizeof(OFMenuSpinningItemSelector_GetNumItems) == 0x000004, "Wrong size on OFMenuSpinningItemSelector_GetNumItems");
static_assert(offsetof(OFMenuSpinningItemSelector_GetNumItems, ReturnValue) == 0x000000, "Member 'OFMenuSpinningItemSelector_GetNumItems::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFMenuSpinningItemSelector.GetSelectedItemIndex
// 0x0004 (0x0004 - 0x0000)
struct OFMenuSpinningItemSelector_GetSelectedItemIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFMenuSpinningItemSelector_GetSelectedItemIndex) == 0x000004, "Wrong alignment on OFMenuSpinningItemSelector_GetSelectedItemIndex");
static_assert(sizeof(OFMenuSpinningItemSelector_GetSelectedItemIndex) == 0x000004, "Wrong size on OFMenuSpinningItemSelector_GetSelectedItemIndex");
static_assert(offsetof(OFMenuSpinningItemSelector_GetSelectedItemIndex, ReturnValue) == 0x000000, "Member 'OFMenuSpinningItemSelector_GetSelectedItemIndex::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ThreatVisualizerComponent.K2_ConvertWorldToScreenLocation
// 0x0028 (0x0028 - 0x0000)
struct ThreatVisualizerComponent_K2_ConvertWorldToScreenLocation final
{
public:
	const class UWorld*                           WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EdgePercent;                                       // 0x0014(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenPosition;                                    // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EdgePositionAlpha;                                 // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThreatVisualizerComponent_K2_ConvertWorldToScreenLocation) == 0x000008, "Wrong alignment on ThreatVisualizerComponent_K2_ConvertWorldToScreenLocation");
static_assert(sizeof(ThreatVisualizerComponent_K2_ConvertWorldToScreenLocation) == 0x000028, "Wrong size on ThreatVisualizerComponent_K2_ConvertWorldToScreenLocation");
static_assert(offsetof(ThreatVisualizerComponent_K2_ConvertWorldToScreenLocation, WorldContextObject) == 0x000000, "Member 'ThreatVisualizerComponent_K2_ConvertWorldToScreenLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ThreatVisualizerComponent_K2_ConvertWorldToScreenLocation, WorldLocation) == 0x000008, "Member 'ThreatVisualizerComponent_K2_ConvertWorldToScreenLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(ThreatVisualizerComponent_K2_ConvertWorldToScreenLocation, EdgePercent) == 0x000014, "Member 'ThreatVisualizerComponent_K2_ConvertWorldToScreenLocation::EdgePercent' has a wrong offset!");
static_assert(offsetof(ThreatVisualizerComponent_K2_ConvertWorldToScreenLocation, ScreenPosition) == 0x000018, "Member 'ThreatVisualizerComponent_K2_ConvertWorldToScreenLocation::ScreenPosition' has a wrong offset!");
static_assert(offsetof(ThreatVisualizerComponent_K2_ConvertWorldToScreenLocation, EdgePositionAlpha) == 0x000020, "Member 'ThreatVisualizerComponent_K2_ConvertWorldToScreenLocation::EdgePositionAlpha' has a wrong offset!");

// Function ObsidianFox.OFPlayerCharacter.GrantAbilityWithInput
// 0x0010 (0x0010 - 0x0000)
struct OFPlayerCharacter_GrantAbilityWithInput final
{
public:
	TSubclassOf<class UGameplayAbility>           NewAbility;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAbilityInput                                 AbilityInput;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFPlayerCharacter_GrantAbilityWithInput) == 0x000008, "Wrong alignment on OFPlayerCharacter_GrantAbilityWithInput");
static_assert(sizeof(OFPlayerCharacter_GrantAbilityWithInput) == 0x000010, "Wrong size on OFPlayerCharacter_GrantAbilityWithInput");
static_assert(offsetof(OFPlayerCharacter_GrantAbilityWithInput, NewAbility) == 0x000000, "Member 'OFPlayerCharacter_GrantAbilityWithInput::NewAbility' has a wrong offset!");
static_assert(offsetof(OFPlayerCharacter_GrantAbilityWithInput, AbilityInput) == 0x000008, "Member 'OFPlayerCharacter_GrantAbilityWithInput::AbilityInput' has a wrong offset!");

// Function ObsidianFox.OFPlayerCharacter.InputTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct OFPlayerCharacter_InputTypeChanged final
{
public:
	bool                                          bIsGamepadType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFPlayerCharacter_InputTypeChanged) == 0x000001, "Wrong alignment on OFPlayerCharacter_InputTypeChanged");
static_assert(sizeof(OFPlayerCharacter_InputTypeChanged) == 0x000001, "Wrong size on OFPlayerCharacter_InputTypeChanged");
static_assert(offsetof(OFPlayerCharacter_InputTypeChanged, bIsGamepadType) == 0x000000, "Member 'OFPlayerCharacter_InputTypeChanged::bIsGamepadType' has a wrong offset!");

// Function ObsidianFox.OFPlayerCharacter.Interact
// 0x0001 (0x0001 - 0x0000)
struct OFPlayerCharacter_Interact final
{
public:
	EInteractionType                              ComponentType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFPlayerCharacter_Interact) == 0x000001, "Wrong alignment on OFPlayerCharacter_Interact");
static_assert(sizeof(OFPlayerCharacter_Interact) == 0x000001, "Wrong size on OFPlayerCharacter_Interact");
static_assert(offsetof(OFPlayerCharacter_Interact, ComponentType) == 0x000000, "Member 'OFPlayerCharacter_Interact::ComponentType' has a wrong offset!");

// Function ObsidianFox.OFPlayerCharacter.IsAiming
// 0x0001 (0x0001 - 0x0000)
struct OFPlayerCharacter_IsAiming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFPlayerCharacter_IsAiming) == 0x000001, "Wrong alignment on OFPlayerCharacter_IsAiming");
static_assert(sizeof(OFPlayerCharacter_IsAiming) == 0x000001, "Wrong size on OFPlayerCharacter_IsAiming");
static_assert(offsetof(OFPlayerCharacter_IsAiming, ReturnValue) == 0x000000, "Member 'OFPlayerCharacter_IsAiming::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFPlayerCharacter.Look
// 0x0010 (0x0010 - 0x0000)
struct OFPlayerCharacter_Look final
{
public:
	struct FInputActionValue                      InputActionValue;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFPlayerCharacter_Look) == 0x000004, "Wrong alignment on OFPlayerCharacter_Look");
static_assert(sizeof(OFPlayerCharacter_Look) == 0x000010, "Wrong size on OFPlayerCharacter_Look");
static_assert(offsetof(OFPlayerCharacter_Look, InputActionValue) == 0x000000, "Member 'OFPlayerCharacter_Look::InputActionValue' has a wrong offset!");

// DelegateFunction ObsidianFox.OFPlayerCharacter.LossOfControlDelegate__DelegateSignature
// 0x0003 (0x0003 - 0x0000)
struct OFPlayerCharacter_LossOfControlDelegate__DelegateSignature final
{
public:
	bool                                          bGameplayInputIgnored;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLookInputIgnored;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveInputIgnored;                                 // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFPlayerCharacter_LossOfControlDelegate__DelegateSignature) == 0x000001, "Wrong alignment on OFPlayerCharacter_LossOfControlDelegate__DelegateSignature");
static_assert(sizeof(OFPlayerCharacter_LossOfControlDelegate__DelegateSignature) == 0x000003, "Wrong size on OFPlayerCharacter_LossOfControlDelegate__DelegateSignature");
static_assert(offsetof(OFPlayerCharacter_LossOfControlDelegate__DelegateSignature, bGameplayInputIgnored) == 0x000000, "Member 'OFPlayerCharacter_LossOfControlDelegate__DelegateSignature::bGameplayInputIgnored' has a wrong offset!");
static_assert(offsetof(OFPlayerCharacter_LossOfControlDelegate__DelegateSignature, bLookInputIgnored) == 0x000001, "Member 'OFPlayerCharacter_LossOfControlDelegate__DelegateSignature::bLookInputIgnored' has a wrong offset!");
static_assert(offsetof(OFPlayerCharacter_LossOfControlDelegate__DelegateSignature, bMoveInputIgnored) == 0x000002, "Member 'OFPlayerCharacter_LossOfControlDelegate__DelegateSignature::bMoveInputIgnored' has a wrong offset!");

// Function ObsidianFox.OFPlayerCharacter.Move
// 0x0010 (0x0010 - 0x0000)
struct OFPlayerCharacter_Move final
{
public:
	struct FInputActionValue                      InputActionValue;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFPlayerCharacter_Move) == 0x000004, "Wrong alignment on OFPlayerCharacter_Move");
static_assert(sizeof(OFPlayerCharacter_Move) == 0x000010, "Wrong size on OFPlayerCharacter_Move");
static_assert(offsetof(OFPlayerCharacter_Move, InputActionValue) == 0x000000, "Member 'OFPlayerCharacter_Move::InputActionValue' has a wrong offset!");

// Function ObsidianFox.OFPlayerCharacter.OnSettingsChangedHandler
// 0x0008 (0x0008 - 0x0000)
struct OFPlayerCharacter_OnSettingsChangedHandler final
{
public:
	class UOFGameUserSettings*                    Settings;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFPlayerCharacter_OnSettingsChangedHandler) == 0x000008, "Wrong alignment on OFPlayerCharacter_OnSettingsChangedHandler");
static_assert(sizeof(OFPlayerCharacter_OnSettingsChangedHandler) == 0x000008, "Wrong size on OFPlayerCharacter_OnSettingsChangedHandler");
static_assert(offsetof(OFPlayerCharacter_OnSettingsChangedHandler, Settings) == 0x000000, "Member 'OFPlayerCharacter_OnSettingsChangedHandler::Settings' has a wrong offset!");

// Function ObsidianFox.OFPlayerCharacter.SetGhostBustingRange
// 0x0004 (0x0004 - 0x0000)
struct OFPlayerCharacter_SetGhostBustingRange final
{
public:
	float                                         Range;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFPlayerCharacter_SetGhostBustingRange) == 0x000004, "Wrong alignment on OFPlayerCharacter_SetGhostBustingRange");
static_assert(sizeof(OFPlayerCharacter_SetGhostBustingRange) == 0x000004, "Wrong size on OFPlayerCharacter_SetGhostBustingRange");
static_assert(offsetof(OFPlayerCharacter_SetGhostBustingRange, Range) == 0x000000, "Member 'OFPlayerCharacter_SetGhostBustingRange::Range' has a wrong offset!");

// Function ObsidianFox.OFPlayerCharacter.SmoothRotateTo
// 0x0014 (0x0014 - 0x0000)
struct OFPlayerCharacter_SmoothRotateTo final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   EasingFunction;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFPlayerCharacter_SmoothRotateTo) == 0x000004, "Wrong alignment on OFPlayerCharacter_SmoothRotateTo");
static_assert(sizeof(OFPlayerCharacter_SmoothRotateTo) == 0x000014, "Wrong size on OFPlayerCharacter_SmoothRotateTo");
static_assert(offsetof(OFPlayerCharacter_SmoothRotateTo, Rotation) == 0x000000, "Member 'OFPlayerCharacter_SmoothRotateTo::Rotation' has a wrong offset!");
static_assert(offsetof(OFPlayerCharacter_SmoothRotateTo, Time) == 0x00000C, "Member 'OFPlayerCharacter_SmoothRotateTo::Time' has a wrong offset!");
static_assert(offsetof(OFPlayerCharacter_SmoothRotateTo, EasingFunction) == 0x000010, "Member 'OFPlayerCharacter_SmoothRotateTo::EasingFunction' has a wrong offset!");

// Function ObsidianFox.OFPlayerCharacter.GetNearestEnemyInVisionCone
// 0x0010 (0x0010 - 0x0000)
struct OFPlayerCharacter_GetNearestEnemyInVisionCone final
{
public:
	float                                         VisionConeDegrees;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AOFEnemyCharacter*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFPlayerCharacter_GetNearestEnemyInVisionCone) == 0x000008, "Wrong alignment on OFPlayerCharacter_GetNearestEnemyInVisionCone");
static_assert(sizeof(OFPlayerCharacter_GetNearestEnemyInVisionCone) == 0x000010, "Wrong size on OFPlayerCharacter_GetNearestEnemyInVisionCone");
static_assert(offsetof(OFPlayerCharacter_GetNearestEnemyInVisionCone, VisionConeDegrees) == 0x000000, "Member 'OFPlayerCharacter_GetNearestEnemyInVisionCone::VisionConeDegrees' has a wrong offset!");
static_assert(offsetof(OFPlayerCharacter_GetNearestEnemyInVisionCone, ReturnValue) == 0x000008, "Member 'OFPlayerCharacter_GetNearestEnemyInVisionCone::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFCharacterTypeSpecificSettingsUtils.GetPauseMenuClass
// 0x0030 (0x0030 - 0x0000)
struct OFCharacterTypeSpecificSettingsUtils_GetPauseMenuClass final
{
public:
	EPlayerCharacterType                          CharacterType;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterTypeSpecificSettingsUtils_GetPauseMenuClass) == 0x000008, "Wrong alignment on OFCharacterTypeSpecificSettingsUtils_GetPauseMenuClass");
static_assert(sizeof(OFCharacterTypeSpecificSettingsUtils_GetPauseMenuClass) == 0x000030, "Wrong size on OFCharacterTypeSpecificSettingsUtils_GetPauseMenuClass");
static_assert(offsetof(OFCharacterTypeSpecificSettingsUtils_GetPauseMenuClass, CharacterType) == 0x000000, "Member 'OFCharacterTypeSpecificSettingsUtils_GetPauseMenuClass::CharacterType' has a wrong offset!");
static_assert(offsetof(OFCharacterTypeSpecificSettingsUtils_GetPauseMenuClass, ReturnValue) == 0x000008, "Member 'OFCharacterTypeSpecificSettingsUtils_GetPauseMenuClass::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFCharacterTypeSpecificSettingsUtils.IsOpenInGameMenuEnabled
// 0x0002 (0x0002 - 0x0000)
struct OFCharacterTypeSpecificSettingsUtils_IsOpenInGameMenuEnabled final
{
public:
	EPlayerCharacterType                          CharacterType;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFCharacterTypeSpecificSettingsUtils_IsOpenInGameMenuEnabled) == 0x000001, "Wrong alignment on OFCharacterTypeSpecificSettingsUtils_IsOpenInGameMenuEnabled");
static_assert(sizeof(OFCharacterTypeSpecificSettingsUtils_IsOpenInGameMenuEnabled) == 0x000002, "Wrong size on OFCharacterTypeSpecificSettingsUtils_IsOpenInGameMenuEnabled");
static_assert(offsetof(OFCharacterTypeSpecificSettingsUtils_IsOpenInGameMenuEnabled, CharacterType) == 0x000000, "Member 'OFCharacterTypeSpecificSettingsUtils_IsOpenInGameMenuEnabled::CharacterType' has a wrong offset!");
static_assert(offsetof(OFCharacterTypeSpecificSettingsUtils_IsOpenInGameMenuEnabled, ReturnValue) == 0x000001, "Member 'OFCharacterTypeSpecificSettingsUtils_IsOpenInGameMenuEnabled::ReturnValue' has a wrong offset!");

// Function ObsidianFox.BFLPlayerUtils.GetPlayerCharacterType
// 0x0010 (0x0010 - 0x0000)
struct BFLPlayerUtils_GetPlayerCharacterType final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerCharacterType                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFLPlayerUtils_GetPlayerCharacterType) == 0x000008, "Wrong alignment on BFLPlayerUtils_GetPlayerCharacterType");
static_assert(sizeof(BFLPlayerUtils_GetPlayerCharacterType) == 0x000010, "Wrong size on BFLPlayerUtils_GetPlayerCharacterType");
static_assert(offsetof(BFLPlayerUtils_GetPlayerCharacterType, WorldContextObject) == 0x000000, "Member 'BFLPlayerUtils_GetPlayerCharacterType::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BFLPlayerUtils_GetPlayerCharacterType, ReturnValue) == 0x000008, "Member 'BFLPlayerUtils_GetPlayerCharacterType::ReturnValue' has a wrong offset!");

// Function ObsidianFox.BFLPlayerUtils.GetPlayerDebugLight
// 0x0010 (0x0010 - 0x0000)
struct BFLPlayerUtils_GetPlayerDebugLight final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPointLightComponent*                   ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLPlayerUtils_GetPlayerDebugLight) == 0x000008, "Wrong alignment on BFLPlayerUtils_GetPlayerDebugLight");
static_assert(sizeof(BFLPlayerUtils_GetPlayerDebugLight) == 0x000010, "Wrong size on BFLPlayerUtils_GetPlayerDebugLight");
static_assert(offsetof(BFLPlayerUtils_GetPlayerDebugLight, WorldContextObject) == 0x000000, "Member 'BFLPlayerUtils_GetPlayerDebugLight::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BFLPlayerUtils_GetPlayerDebugLight, ReturnValue) == 0x000008, "Member 'BFLPlayerUtils_GetPlayerDebugLight::ReturnValue' has a wrong offset!");

// Function ObsidianFox.BFLPlayerUtils.GetPlayerLight
// 0x0010 (0x0010 - 0x0000)
struct BFLPlayerUtils_GetPlayerLight final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPointLightComponent*                   ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLPlayerUtils_GetPlayerLight) == 0x000008, "Wrong alignment on BFLPlayerUtils_GetPlayerLight");
static_assert(sizeof(BFLPlayerUtils_GetPlayerLight) == 0x000010, "Wrong size on BFLPlayerUtils_GetPlayerLight");
static_assert(offsetof(BFLPlayerUtils_GetPlayerLight, WorldContextObject) == 0x000000, "Member 'BFLPlayerUtils_GetPlayerLight::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BFLPlayerUtils_GetPlayerLight, ReturnValue) == 0x000008, "Member 'BFLPlayerUtils_GetPlayerLight::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFProjectile.BeginAttack
// 0x0008 (0x0008 - 0x0000)
struct OFProjectile_BeginAttack final
{
public:
	struct FGameplayTag                           AttackEvent;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFProjectile_BeginAttack) == 0x000004, "Wrong alignment on OFProjectile_BeginAttack");
static_assert(sizeof(OFProjectile_BeginAttack) == 0x000008, "Wrong size on OFProjectile_BeginAttack");
static_assert(offsetof(OFProjectile_BeginAttack, AttackEvent) == 0x000000, "Member 'OFProjectile_BeginAttack::AttackEvent' has a wrong offset!");

// Function ObsidianFox.OFProjectile.HandleHit
// 0x0028 (0x0028 - 0x0000)
struct OFProjectile_HandleHit final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFProjectile_HandleHit) == 0x000008, "Wrong alignment on OFProjectile_HandleHit");
static_assert(sizeof(OFProjectile_HandleHit) == 0x000028, "Wrong size on OFProjectile_HandleHit");
static_assert(offsetof(OFProjectile_HandleHit, TargetData) == 0x000000, "Member 'OFProjectile_HandleHit::TargetData' has a wrong offset!");

// Function ObsidianFox.WaterLevelTriggerBoxComponent.OnBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct WaterLevelTriggerBoxComponent_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaterLevelTriggerBoxComponent_OnBeginOverlap) == 0x000008, "Wrong alignment on WaterLevelTriggerBoxComponent_OnBeginOverlap");
static_assert(sizeof(WaterLevelTriggerBoxComponent_OnBeginOverlap) == 0x0000A8, "Wrong size on WaterLevelTriggerBoxComponent_OnBeginOverlap");
static_assert(offsetof(WaterLevelTriggerBoxComponent_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'WaterLevelTriggerBoxComponent_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(WaterLevelTriggerBoxComponent_OnBeginOverlap, OtherActor) == 0x000008, "Member 'WaterLevelTriggerBoxComponent_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(WaterLevelTriggerBoxComponent_OnBeginOverlap, OtherComp) == 0x000010, "Member 'WaterLevelTriggerBoxComponent_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(WaterLevelTriggerBoxComponent_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'WaterLevelTriggerBoxComponent_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(WaterLevelTriggerBoxComponent_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'WaterLevelTriggerBoxComponent_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(WaterLevelTriggerBoxComponent_OnBeginOverlap, SweepResult) == 0x000020, "Member 'WaterLevelTriggerBoxComponent_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function ObsidianFox.WaterLevelTriggerBoxComponent.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct WaterLevelTriggerBoxComponent_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WaterLevelTriggerBoxComponent_OnEndOverlap) == 0x000008, "Wrong alignment on WaterLevelTriggerBoxComponent_OnEndOverlap");
static_assert(sizeof(WaterLevelTriggerBoxComponent_OnEndOverlap) == 0x000020, "Wrong size on WaterLevelTriggerBoxComponent_OnEndOverlap");
static_assert(offsetof(WaterLevelTriggerBoxComponent_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'WaterLevelTriggerBoxComponent_OnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(WaterLevelTriggerBoxComponent_OnEndOverlap, OtherActor) == 0x000008, "Member 'WaterLevelTriggerBoxComponent_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(WaterLevelTriggerBoxComponent_OnEndOverlap, OtherComp) == 0x000010, "Member 'WaterLevelTriggerBoxComponent_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(WaterLevelTriggerBoxComponent_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'WaterLevelTriggerBoxComponent_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function ObsidianFox.OFSaveGameMenuWidget.OnDeleteFinished
// 0x0001 (0x0001 - 0x0000)
struct OFSaveGameMenuWidget_OnDeleteFinished final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFSaveGameMenuWidget_OnDeleteFinished) == 0x000001, "Wrong alignment on OFSaveGameMenuWidget_OnDeleteFinished");
static_assert(sizeof(OFSaveGameMenuWidget_OnDeleteFinished) == 0x000001, "Wrong size on OFSaveGameMenuWidget_OnDeleteFinished");
static_assert(offsetof(OFSaveGameMenuWidget_OnDeleteFinished, bResult) == 0x000000, "Member 'OFSaveGameMenuWidget_OnDeleteFinished::bResult' has a wrong offset!");

// Function ObsidianFox.OFSaveGameWidget.OnSaveFinished
// 0x0001 (0x0001 - 0x0000)
struct OFSaveGameWidget_OnSaveFinished final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFSaveGameWidget_OnSaveFinished) == 0x000001, "Wrong alignment on OFSaveGameWidget_OnSaveFinished");
static_assert(sizeof(OFSaveGameWidget_OnSaveFinished) == 0x000001, "Wrong size on OFSaveGameWidget_OnSaveFinished");
static_assert(offsetof(OFSaveGameWidget_OnSaveFinished, Success) == 0x000000, "Member 'OFSaveGameWidget_OnSaveFinished::Success' has a wrong offset!");

// Function ObsidianFox.WallSplineCharacterPath.GetDirectionToLocation
// 0x0024 (0x0024 - 0x0000)
struct WallSplineCharacterPath_GetDirectionToLocation final
{
public:
	struct FVector                                CurrentLocation;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WallSplineCharacterPath_GetDirectionToLocation) == 0x000004, "Wrong alignment on WallSplineCharacterPath_GetDirectionToLocation");
static_assert(sizeof(WallSplineCharacterPath_GetDirectionToLocation) == 0x000024, "Wrong size on WallSplineCharacterPath_GetDirectionToLocation");
static_assert(offsetof(WallSplineCharacterPath_GetDirectionToLocation, CurrentLocation) == 0x000000, "Member 'WallSplineCharacterPath_GetDirectionToLocation::CurrentLocation' has a wrong offset!");
static_assert(offsetof(WallSplineCharacterPath_GetDirectionToLocation, TargetLocation) == 0x00000C, "Member 'WallSplineCharacterPath_GetDirectionToLocation::TargetLocation' has a wrong offset!");
static_assert(offsetof(WallSplineCharacterPath_GetDirectionToLocation, ReturnValue) == 0x000018, "Member 'WallSplineCharacterPath_GetDirectionToLocation::ReturnValue' has a wrong offset!");

// Function ObsidianFox.WallSplineCharacterPath.GetNearestPointOnSpline
// 0x0024 (0x0024 - 0x0000)
struct WallSplineCharacterPath_GetNearestPointOnSpline final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWallSplineCharacterPathPoint          ReturnValue;                                       // 0x000C(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WallSplineCharacterPath_GetNearestPointOnSpline) == 0x000004, "Wrong alignment on WallSplineCharacterPath_GetNearestPointOnSpline");
static_assert(sizeof(WallSplineCharacterPath_GetNearestPointOnSpline) == 0x000024, "Wrong size on WallSplineCharacterPath_GetNearestPointOnSpline");
static_assert(offsetof(WallSplineCharacterPath_GetNearestPointOnSpline, Origin) == 0x000000, "Member 'WallSplineCharacterPath_GetNearestPointOnSpline::Origin' has a wrong offset!");
static_assert(offsetof(WallSplineCharacterPath_GetNearestPointOnSpline, ReturnValue) == 0x00000C, "Member 'WallSplineCharacterPath_GetNearestPointOnSpline::ReturnValue' has a wrong offset!");

// Function ObsidianFox.WallSplineCharacterPath.GetRandomPointOnSpline
// 0x0018 (0x0018 - 0x0000)
struct WallSplineCharacterPath_GetRandomPointOnSpline final
{
public:
	struct FWallSplineCharacterPathPoint          ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WallSplineCharacterPath_GetRandomPointOnSpline) == 0x000004, "Wrong alignment on WallSplineCharacterPath_GetRandomPointOnSpline");
static_assert(sizeof(WallSplineCharacterPath_GetRandomPointOnSpline) == 0x000018, "Wrong size on WallSplineCharacterPath_GetRandomPointOnSpline");
static_assert(offsetof(WallSplineCharacterPath_GetRandomPointOnSpline, ReturnValue) == 0x000000, "Member 'WallSplineCharacterPath_GetRandomPointOnSpline::ReturnValue' has a wrong offset!");

// Function ObsidianFox.OFStruckTextWidget.SetStrokeEnabled
// 0x0001 (0x0001 - 0x0000)
struct OFStruckTextWidget_SetStrokeEnabled final
{
public:
	bool                                          InEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFStruckTextWidget_SetStrokeEnabled) == 0x000001, "Wrong alignment on OFStruckTextWidget_SetStrokeEnabled");
static_assert(sizeof(OFStruckTextWidget_SetStrokeEnabled) == 0x000001, "Wrong size on OFStruckTextWidget_SetStrokeEnabled");
static_assert(offsetof(OFStruckTextWidget_SetStrokeEnabled, InEnabled) == 0x000000, "Member 'OFStruckTextWidget_SetStrokeEnabled::InEnabled' has a wrong offset!");

// Function ObsidianFox.OFStruckTextWidget.SetText
// 0x0018 (0x0018 - 0x0000)
struct OFStruckTextWidget_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFStruckTextWidget_SetText) == 0x000008, "Wrong alignment on OFStruckTextWidget_SetText");
static_assert(sizeof(OFStruckTextWidget_SetText) == 0x000018, "Wrong size on OFStruckTextWidget_SetText");
static_assert(offsetof(OFStruckTextWidget_SetText, InText) == 0x000000, "Member 'OFStruckTextWidget_SetText::InText' has a wrong offset!");

// DelegateFunction ObsidianFox.Opportunity.AdditionalAssetsLoaded__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct Opportunity_AdditionalAssetsLoaded__DelegateSignature final
{
public:
	TArray<TSoftObjectPtr<class UObject>>         Assets;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           Classes;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(Opportunity_AdditionalAssetsLoaded__DelegateSignature) == 0x000008, "Wrong alignment on Opportunity_AdditionalAssetsLoaded__DelegateSignature");
static_assert(sizeof(Opportunity_AdditionalAssetsLoaded__DelegateSignature) == 0x000020, "Wrong size on Opportunity_AdditionalAssetsLoaded__DelegateSignature");
static_assert(offsetof(Opportunity_AdditionalAssetsLoaded__DelegateSignature, Assets) == 0x000000, "Member 'Opportunity_AdditionalAssetsLoaded__DelegateSignature::Assets' has a wrong offset!");
static_assert(offsetof(Opportunity_AdditionalAssetsLoaded__DelegateSignature, Classes) == 0x000010, "Member 'Opportunity_AdditionalAssetsLoaded__DelegateSignature::Classes' has a wrong offset!");

// Function ObsidianFox.Opportunity.GetAdditionalRequiredAssets
// 0x0020 (0x0020 - 0x0000)
struct Opportunity_GetAdditionalRequiredAssets final
{
public:
	TArray<TSoftObjectPtr<class UObject>>         AdditionalAssets;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           AdditionalClasses;                                 // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(Opportunity_GetAdditionalRequiredAssets) == 0x000008, "Wrong alignment on Opportunity_GetAdditionalRequiredAssets");
static_assert(sizeof(Opportunity_GetAdditionalRequiredAssets) == 0x000020, "Wrong size on Opportunity_GetAdditionalRequiredAssets");
static_assert(offsetof(Opportunity_GetAdditionalRequiredAssets, AdditionalAssets) == 0x000000, "Member 'Opportunity_GetAdditionalRequiredAssets::AdditionalAssets' has a wrong offset!");
static_assert(offsetof(Opportunity_GetAdditionalRequiredAssets, AdditionalClasses) == 0x000010, "Member 'Opportunity_GetAdditionalRequiredAssets::AdditionalClasses' has a wrong offset!");

// Function ObsidianFox.Opportunity.SetOpportunityEffectContext
// 0x0038 (0x0038 - 0x0000)
struct Opportunity_SetOpportunityEffectContext final
{
public:
	struct FGameplayEffectContextHandle           EffectContextHandle;                               // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 OpportunityInstigator;                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Opportunity_SetOpportunityEffectContext) == 0x000008, "Wrong alignment on Opportunity_SetOpportunityEffectContext");
static_assert(sizeof(Opportunity_SetOpportunityEffectContext) == 0x000038, "Wrong size on Opportunity_SetOpportunityEffectContext");
static_assert(offsetof(Opportunity_SetOpportunityEffectContext, EffectContextHandle) == 0x000000, "Member 'Opportunity_SetOpportunityEffectContext::EffectContextHandle' has a wrong offset!");
static_assert(offsetof(Opportunity_SetOpportunityEffectContext, OpportunityInstigator) == 0x000018, "Member 'Opportunity_SetOpportunityEffectContext::OpportunityInstigator' has a wrong offset!");
static_assert(offsetof(Opportunity_SetOpportunityEffectContext, ReturnValue) == 0x000020, "Member 'Opportunity_SetOpportunityEffectContext::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ParticleBlockerManager.SetNiagaraParameterCollection
// 0x0008 (0x0008 - 0x0000)
struct ParticleBlockerManager_SetNiagaraParameterCollection final
{
public:
	class UNiagaraParameterCollectionInstance*    NiagaraPC;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ParticleBlockerManager_SetNiagaraParameterCollection) == 0x000008, "Wrong alignment on ParticleBlockerManager_SetNiagaraParameterCollection");
static_assert(sizeof(ParticleBlockerManager_SetNiagaraParameterCollection) == 0x000008, "Wrong size on ParticleBlockerManager_SetNiagaraParameterCollection");
static_assert(offsetof(ParticleBlockerManager_SetNiagaraParameterCollection, NiagaraPC) == 0x000000, "Member 'ParticleBlockerManager_SetNiagaraParameterCollection::NiagaraPC' has a wrong offset!");

// Function ObsidianFox.PauseComponent.OnPlayStateChanged
// 0x0002 (0x0002 - 0x0000)
struct PauseComponent_OnPlayStateChanged final
{
public:
	EGameMainState                                OldGameState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMainState                                NewGameState;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PauseComponent_OnPlayStateChanged) == 0x000001, "Wrong alignment on PauseComponent_OnPlayStateChanged");
static_assert(sizeof(PauseComponent_OnPlayStateChanged) == 0x000002, "Wrong size on PauseComponent_OnPlayStateChanged");
static_assert(offsetof(PauseComponent_OnPlayStateChanged, OldGameState) == 0x000000, "Member 'PauseComponent_OnPlayStateChanged::OldGameState' has a wrong offset!");
static_assert(offsetof(PauseComponent_OnPlayStateChanged, NewGameState) == 0x000001, "Member 'PauseComponent_OnPlayStateChanged::NewGameState' has a wrong offset!");

// Function ObsidianFox.PauseMenuPT.LeftStickX
// 0x0004 (0x0004 - 0x0000)
struct PauseMenuPT_LeftStickX final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PauseMenuPT_LeftStickX) == 0x000004, "Wrong alignment on PauseMenuPT_LeftStickX");
static_assert(sizeof(PauseMenuPT_LeftStickX) == 0x000004, "Wrong size on PauseMenuPT_LeftStickX");
static_assert(offsetof(PauseMenuPT_LeftStickX, Val) == 0x000000, "Member 'PauseMenuPT_LeftStickX::Val' has a wrong offset!");

// Function ObsidianFox.PauseMenuPT.LeftStickY
// 0x0004 (0x0004 - 0x0000)
struct PauseMenuPT_LeftStickY final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PauseMenuPT_LeftStickY) == 0x000004, "Wrong alignment on PauseMenuPT_LeftStickY");
static_assert(sizeof(PauseMenuPT_LeftStickY) == 0x000004, "Wrong size on PauseMenuPT_LeftStickY");
static_assert(offsetof(PauseMenuPT_LeftStickY, Val) == 0x000000, "Member 'PauseMenuPT_LeftStickY::Val' has a wrong offset!");

// Function ObsidianFox.PauseMenuPT.OnExitSaveDone
// 0x0001 (0x0001 - 0x0000)
struct PauseMenuPT_OnExitSaveDone final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PauseMenuPT_OnExitSaveDone) == 0x000001, "Wrong alignment on PauseMenuPT_OnExitSaveDone");
static_assert(sizeof(PauseMenuPT_OnExitSaveDone) == 0x000001, "Wrong size on PauseMenuPT_OnExitSaveDone");
static_assert(offsetof(PauseMenuPT_OnExitSaveDone, Success) == 0x000000, "Member 'PauseMenuPT_OnExitSaveDone::Success' has a wrong offset!");

// Function ObsidianFox.PlayerAnimInstance.GetClosestPickupAnimation
// 0x0028 (0x0028 - 0x0000)
struct PlayerAnimInstance_GetClosestPickupAnimation final
{
public:
	struct FVector                                ItemLocation;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPickupAnimationData                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerAnimInstance_GetClosestPickupAnimation) == 0x000008, "Wrong alignment on PlayerAnimInstance_GetClosestPickupAnimation");
static_assert(sizeof(PlayerAnimInstance_GetClosestPickupAnimation) == 0x000028, "Wrong size on PlayerAnimInstance_GetClosestPickupAnimation");
static_assert(offsetof(PlayerAnimInstance_GetClosestPickupAnimation, ItemLocation) == 0x000000, "Member 'PlayerAnimInstance_GetClosestPickupAnimation::ItemLocation' has a wrong offset!");
static_assert(offsetof(PlayerAnimInstance_GetClosestPickupAnimation, ReturnValue) == 0x000010, "Member 'PlayerAnimInstance_GetClosestPickupAnimation::ReturnValue' has a wrong offset!");

// Function ObsidianFox.PlayerAnimInstance.LoadEditorPreviewAnimations
// 0x0038 (0x0038 - 0x0000)
struct PlayerAnimInstance_LoadEditorPreviewAnimations final
{
public:
	TSubclassOf<class UAnimationDataAssetBase>    AssetType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimationDataAssetBase> AnimationDataAsset;                                // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationDataAssetBase*                ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerAnimInstance_LoadEditorPreviewAnimations) == 0x000008, "Wrong alignment on PlayerAnimInstance_LoadEditorPreviewAnimations");
static_assert(sizeof(PlayerAnimInstance_LoadEditorPreviewAnimations) == 0x000038, "Wrong size on PlayerAnimInstance_LoadEditorPreviewAnimations");
static_assert(offsetof(PlayerAnimInstance_LoadEditorPreviewAnimations, AssetType) == 0x000000, "Member 'PlayerAnimInstance_LoadEditorPreviewAnimations::AssetType' has a wrong offset!");
static_assert(offsetof(PlayerAnimInstance_LoadEditorPreviewAnimations, AnimationDataAsset) == 0x000008, "Member 'PlayerAnimInstance_LoadEditorPreviewAnimations::AnimationDataAsset' has a wrong offset!");
static_assert(offsetof(PlayerAnimInstance_LoadEditorPreviewAnimations, ReturnValue) == 0x000030, "Member 'PlayerAnimInstance_LoadEditorPreviewAnimations::ReturnValue' has a wrong offset!");

// Function ObsidianFox.PlayerAnimInstance.PlayPickupAnimation
// 0x0014 (0x0014 - 0x0000)
struct PlayerAnimInstance_PlayPickupAnimation final
{
public:
	struct FVector                                ItemLocation;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpToSpeed;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpFromSpeed;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerAnimInstance_PlayPickupAnimation) == 0x000004, "Wrong alignment on PlayerAnimInstance_PlayPickupAnimation");
static_assert(sizeof(PlayerAnimInstance_PlayPickupAnimation) == 0x000014, "Wrong size on PlayerAnimInstance_PlayPickupAnimation");
static_assert(offsetof(PlayerAnimInstance_PlayPickupAnimation, ItemLocation) == 0x000000, "Member 'PlayerAnimInstance_PlayPickupAnimation::ItemLocation' has a wrong offset!");
static_assert(offsetof(PlayerAnimInstance_PlayPickupAnimation, InterpToSpeed) == 0x00000C, "Member 'PlayerAnimInstance_PlayPickupAnimation::InterpToSpeed' has a wrong offset!");
static_assert(offsetof(PlayerAnimInstance_PlayPickupAnimation, InterpFromSpeed) == 0x000010, "Member 'PlayerAnimInstance_PlayPickupAnimation::InterpFromSpeed' has a wrong offset!");

// Function ObsidianFox.PlayerAnimInstance.VisualizePickupAnimCoverage
// 0x0004 (0x0004 - 0x0000)
struct PlayerAnimInstance_VisualizePickupAnimCoverage final
{
public:
	float                                         DrawDuration;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerAnimInstance_VisualizePickupAnimCoverage) == 0x000004, "Wrong alignment on PlayerAnimInstance_VisualizePickupAnimCoverage");
static_assert(sizeof(PlayerAnimInstance_VisualizePickupAnimCoverage) == 0x000004, "Wrong size on PlayerAnimInstance_VisualizePickupAnimCoverage");
static_assert(offsetof(PlayerAnimInstance_VisualizePickupAnimCoverage, DrawDuration) == 0x000000, "Member 'PlayerAnimInstance_VisualizePickupAnimCoverage::DrawDuration' has a wrong offset!");

// Function ObsidianFox.PlayerHitReactionComponent.OnOwnerPossessed
// 0x0008 (0x0008 - 0x0000)
struct PlayerHitReactionComponent_OnOwnerPossessed final
{
public:
	class AController*                            NewController;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerHitReactionComponent_OnOwnerPossessed) == 0x000008, "Wrong alignment on PlayerHitReactionComponent_OnOwnerPossessed");
static_assert(sizeof(PlayerHitReactionComponent_OnOwnerPossessed) == 0x000008, "Wrong size on PlayerHitReactionComponent_OnOwnerPossessed");
static_assert(offsetof(PlayerHitReactionComponent_OnOwnerPossessed, NewController) == 0x000000, "Member 'PlayerHitReactionComponent_OnOwnerPossessed::NewController' has a wrong offset!");

// Function ObsidianFox.PlayerInteractionComponent.GetStandardSelectedInteractable
// 0x0008 (0x0008 - 0x0000)
struct PlayerInteractionComponent_GetStandardSelectedInteractable final
{
public:
	class UInteractionComponentBase*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionComponent_GetStandardSelectedInteractable) == 0x000008, "Wrong alignment on PlayerInteractionComponent_GetStandardSelectedInteractable");
static_assert(sizeof(PlayerInteractionComponent_GetStandardSelectedInteractable) == 0x000008, "Wrong size on PlayerInteractionComponent_GetStandardSelectedInteractable");
static_assert(offsetof(PlayerInteractionComponent_GetStandardSelectedInteractable, ReturnValue) == 0x000000, "Member 'PlayerInteractionComponent_GetStandardSelectedInteractable::ReturnValue' has a wrong offset!");

// Function ObsidianFox.PlayerInteractionComponent.InteractWithSelected
// 0x0010 (0x0010 - 0x0000)
struct PlayerInteractionComponent_InteractWithSelected final
{
public:
	class AOFPlayerCharacter*                     InteractingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInteractionComponent_InteractWithSelected) == 0x000008, "Wrong alignment on PlayerInteractionComponent_InteractWithSelected");
static_assert(sizeof(PlayerInteractionComponent_InteractWithSelected) == 0x000010, "Wrong size on PlayerInteractionComponent_InteractWithSelected");
static_assert(offsetof(PlayerInteractionComponent_InteractWithSelected, InteractingPlayer) == 0x000000, "Member 'PlayerInteractionComponent_InteractWithSelected::InteractingPlayer' has a wrong offset!");
static_assert(offsetof(PlayerInteractionComponent_InteractWithSelected, ReturnValue) == 0x000008, "Member 'PlayerInteractionComponent_InteractWithSelected::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.PlayerInteractionComponent.NearbyInteractablesChangedSignature__DelegateSignature
// 0x00F0 (0x00F0 - 0x0000)
struct PlayerInteractionComponent_NearbyInteractablesChangedSignature__DelegateSignature final
{
public:
	TSet<class UInteractionComponentBase*>        NearbyInteractables;                               // 0x0000(0x0050)(ConstParm, Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSet<class UInteractionComponentBase*>        AddedInteractables;                                // 0x0050(0x0050)(ConstParm, Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSet<class UInteractionComponentBase*>        RemovedInteractables;                              // 0x00A0(0x0050)(ConstParm, Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionComponent_NearbyInteractablesChangedSignature__DelegateSignature) == 0x000008, "Wrong alignment on PlayerInteractionComponent_NearbyInteractablesChangedSignature__DelegateSignature");
static_assert(sizeof(PlayerInteractionComponent_NearbyInteractablesChangedSignature__DelegateSignature) == 0x0000F0, "Wrong size on PlayerInteractionComponent_NearbyInteractablesChangedSignature__DelegateSignature");
static_assert(offsetof(PlayerInteractionComponent_NearbyInteractablesChangedSignature__DelegateSignature, NearbyInteractables) == 0x000000, "Member 'PlayerInteractionComponent_NearbyInteractablesChangedSignature__DelegateSignature::NearbyInteractables' has a wrong offset!");
static_assert(offsetof(PlayerInteractionComponent_NearbyInteractablesChangedSignature__DelegateSignature, AddedInteractables) == 0x000050, "Member 'PlayerInteractionComponent_NearbyInteractablesChangedSignature__DelegateSignature::AddedInteractables' has a wrong offset!");
static_assert(offsetof(PlayerInteractionComponent_NearbyInteractablesChangedSignature__DelegateSignature, RemovedInteractables) == 0x0000A0, "Member 'PlayerInteractionComponent_NearbyInteractablesChangedSignature__DelegateSignature::RemovedInteractables' has a wrong offset!");

// DelegateFunction ObsidianFox.PlayerInteractionComponent.SelectionChangedSignature__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct PlayerInteractionComponent_SelectionChangedSignature__DelegateSignature final
{
public:
	const class UInteractionComponentBase*        SelectedInteractable_0;                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionComponent_SelectionChangedSignature__DelegateSignature) == 0x000008, "Wrong alignment on PlayerInteractionComponent_SelectionChangedSignature__DelegateSignature");
static_assert(sizeof(PlayerInteractionComponent_SelectionChangedSignature__DelegateSignature) == 0x000008, "Wrong size on PlayerInteractionComponent_SelectionChangedSignature__DelegateSignature");
static_assert(offsetof(PlayerInteractionComponent_SelectionChangedSignature__DelegateSignature, SelectedInteractable_0) == 0x000000, "Member 'PlayerInteractionComponent_SelectionChangedSignature__DelegateSignature::SelectedInteractable_0' has a wrong offset!");

// Function ObsidianFox.PlayerInteractionComponent.SetUseRoomFilter
// 0x0001 (0x0001 - 0x0000)
struct PlayerInteractionComponent_SetUseRoomFilter final
{
public:
	bool                                          bUseFilter;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionComponent_SetUseRoomFilter) == 0x000001, "Wrong alignment on PlayerInteractionComponent_SetUseRoomFilter");
static_assert(sizeof(PlayerInteractionComponent_SetUseRoomFilter) == 0x000001, "Wrong size on PlayerInteractionComponent_SetUseRoomFilter");
static_assert(offsetof(PlayerInteractionComponent_SetUseRoomFilter, bUseFilter) == 0x000000, "Member 'PlayerInteractionComponent_SetUseRoomFilter::bUseFilter' has a wrong offset!");

// Function ObsidianFox.PlayerInteractionComponent.GetInteractablesNearby
// 0x0050 (0x0050 - 0x0000)
struct PlayerInteractionComponent_GetInteractablesNearby final
{
public:
	TSet<class UInteractionComponentBase*>        ReturnValue;                                       // 0x0000(0x0050)(ExportObject, Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionComponent_GetInteractablesNearby) == 0x000008, "Wrong alignment on PlayerInteractionComponent_GetInteractablesNearby");
static_assert(sizeof(PlayerInteractionComponent_GetInteractablesNearby) == 0x000050, "Wrong size on PlayerInteractionComponent_GetInteractablesNearby");
static_assert(offsetof(PlayerInteractionComponent_GetInteractablesNearby, ReturnValue) == 0x000000, "Member 'PlayerInteractionComponent_GetInteractablesNearby::ReturnValue' has a wrong offset!");

// Function ObsidianFox.PlayerInteractionComponent.GetSelectedInteractable
// 0x0010 (0x0010 - 0x0000)
struct PlayerInteractionComponent_GetSelectedInteractable final
{
public:
	EInteractionType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteractionComponentBase*              ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionComponent_GetSelectedInteractable) == 0x000008, "Wrong alignment on PlayerInteractionComponent_GetSelectedInteractable");
static_assert(sizeof(PlayerInteractionComponent_GetSelectedInteractable) == 0x000010, "Wrong size on PlayerInteractionComponent_GetSelectedInteractable");
static_assert(offsetof(PlayerInteractionComponent_GetSelectedInteractable, Type) == 0x000000, "Member 'PlayerInteractionComponent_GetSelectedInteractable::Type' has a wrong offset!");
static_assert(offsetof(PlayerInteractionComponent_GetSelectedInteractable, ReturnValue) == 0x000008, "Member 'PlayerInteractionComponent_GetSelectedInteractable::ReturnValue' has a wrong offset!");

// Function ObsidianFox.PlayerInteractionComponent.HasSelectedInteractable
// 0x0002 (0x0002 - 0x0000)
struct PlayerInteractionComponent_HasSelectedInteractable final
{
public:
	EInteractionType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionComponent_HasSelectedInteractable) == 0x000001, "Wrong alignment on PlayerInteractionComponent_HasSelectedInteractable");
static_assert(sizeof(PlayerInteractionComponent_HasSelectedInteractable) == 0x000002, "Wrong size on PlayerInteractionComponent_HasSelectedInteractable");
static_assert(offsetof(PlayerInteractionComponent_HasSelectedInteractable, Type) == 0x000000, "Member 'PlayerInteractionComponent_HasSelectedInteractable::Type' has a wrong offset!");
static_assert(offsetof(PlayerInteractionComponent_HasSelectedInteractable, ReturnValue) == 0x000001, "Member 'PlayerInteractionComponent_HasSelectedInteractable::ReturnValue' has a wrong offset!");

// DelegateFunction ObsidianFox.PlayerLocationTrackingSubsystem.OnLocationUpdated__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct PlayerLocationTrackingSubsystem_OnLocationUpdated__DelegateSignature final
{
public:
	struct FGameplayTagContainer                  LocationTags;                                      // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerLocationTrackingSubsystem_OnLocationUpdated__DelegateSignature) == 0x000008, "Wrong alignment on PlayerLocationTrackingSubsystem_OnLocationUpdated__DelegateSignature");
static_assert(sizeof(PlayerLocationTrackingSubsystem_OnLocationUpdated__DelegateSignature) == 0x000020, "Wrong size on PlayerLocationTrackingSubsystem_OnLocationUpdated__DelegateSignature");
static_assert(offsetof(PlayerLocationTrackingSubsystem_OnLocationUpdated__DelegateSignature, LocationTags) == 0x000000, "Member 'PlayerLocationTrackingSubsystem_OnLocationUpdated__DelegateSignature::LocationTags' has a wrong offset!");

// Function ObsidianFox.PlayerLocationTrackingSubsystem.GetCurrentLocationTags
// 0x0020 (0x0020 - 0x0000)
struct PlayerLocationTrackingSubsystem_GetCurrentLocationTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerLocationTrackingSubsystem_GetCurrentLocationTags) == 0x000008, "Wrong alignment on PlayerLocationTrackingSubsystem_GetCurrentLocationTags");
static_assert(sizeof(PlayerLocationTrackingSubsystem_GetCurrentLocationTags) == 0x000020, "Wrong size on PlayerLocationTrackingSubsystem_GetCurrentLocationTags");
static_assert(offsetof(PlayerLocationTrackingSubsystem_GetCurrentLocationTags, ReturnValue) == 0x000000, "Member 'PlayerLocationTrackingSubsystem_GetCurrentLocationTags::ReturnValue' has a wrong offset!");

// Function ObsidianFox.PlayerLocationTrackingSubsystem.GetDercetoLocationTag
// 0x0008 (0x0008 - 0x0000)
struct PlayerLocationTrackingSubsystem_GetDercetoLocationTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerLocationTrackingSubsystem_GetDercetoLocationTag) == 0x000004, "Wrong alignment on PlayerLocationTrackingSubsystem_GetDercetoLocationTag");
static_assert(sizeof(PlayerLocationTrackingSubsystem_GetDercetoLocationTag) == 0x000008, "Wrong size on PlayerLocationTrackingSubsystem_GetDercetoLocationTag");
static_assert(offsetof(PlayerLocationTrackingSubsystem_GetDercetoLocationTag, ReturnValue) == 0x000000, "Member 'PlayerLocationTrackingSubsystem_GetDercetoLocationTag::ReturnValue' has a wrong offset!");

// Function ObsidianFox.PlayerLocationTrackingSubsystem.PlayerIsInDerceto
// 0x0001 (0x0001 - 0x0000)
struct PlayerLocationTrackingSubsystem_PlayerIsInDerceto final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerLocationTrackingSubsystem_PlayerIsInDerceto) == 0x000001, "Wrong alignment on PlayerLocationTrackingSubsystem_PlayerIsInDerceto");
static_assert(sizeof(PlayerLocationTrackingSubsystem_PlayerIsInDerceto) == 0x000001, "Wrong size on PlayerLocationTrackingSubsystem_PlayerIsInDerceto");
static_assert(offsetof(PlayerLocationTrackingSubsystem_PlayerIsInDerceto, ReturnValue) == 0x000000, "Member 'PlayerLocationTrackingSubsystem_PlayerIsInDerceto::ReturnValue' has a wrong offset!");

// Function ObsidianFox.PlayerLocationTrackingSubsystem.PlayerIsInLocation
// 0x000C (0x000C - 0x0000)
struct PlayerLocationTrackingSubsystem_PlayerIsInLocation final
{
public:
	struct FGameplayTag                           LocationTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerLocationTrackingSubsystem_PlayerIsInLocation) == 0x000004, "Wrong alignment on PlayerLocationTrackingSubsystem_PlayerIsInLocation");
static_assert(sizeof(PlayerLocationTrackingSubsystem_PlayerIsInLocation) == 0x00000C, "Wrong size on PlayerLocationTrackingSubsystem_PlayerIsInLocation");
static_assert(offsetof(PlayerLocationTrackingSubsystem_PlayerIsInLocation, LocationTag) == 0x000000, "Member 'PlayerLocationTrackingSubsystem_PlayerIsInLocation::LocationTag' has a wrong offset!");
static_assert(offsetof(PlayerLocationTrackingSubsystem_PlayerIsInLocation, ReturnValue) == 0x000008, "Member 'PlayerLocationTrackingSubsystem_PlayerIsInLocation::ReturnValue' has a wrong offset!");

// Function ObsidianFox.PlayerStartTransitional.InitTransition
// 0x0008 (0x0008 - 0x0000)
struct PlayerStartTransitional_InitTransition final
{
public:
	class AController*                            SpawnedController;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStartTransitional_InitTransition) == 0x000008, "Wrong alignment on PlayerStartTransitional_InitTransition");
static_assert(sizeof(PlayerStartTransitional_InitTransition) == 0x000008, "Wrong size on PlayerStartTransitional_InitTransition");
static_assert(offsetof(PlayerStartTransitional_InitTransition, SpawnedController) == 0x000000, "Member 'PlayerStartTransitional_InitTransition::SpawnedController' has a wrong offset!");

// Function ObsidianFox.PlayerSubsystem_PlayerHUD.MainStateChanged
// 0x0002 (0x0002 - 0x0000)
struct PlayerSubsystem_PlayerHUD_MainStateChanged final
{
public:
	EGameMainState                                OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMainState                                NewGameState;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerSubsystem_PlayerHUD_MainStateChanged) == 0x000001, "Wrong alignment on PlayerSubsystem_PlayerHUD_MainStateChanged");
static_assert(sizeof(PlayerSubsystem_PlayerHUD_MainStateChanged) == 0x000002, "Wrong size on PlayerSubsystem_PlayerHUD_MainStateChanged");
static_assert(offsetof(PlayerSubsystem_PlayerHUD_MainStateChanged, OldState) == 0x000000, "Member 'PlayerSubsystem_PlayerHUD_MainStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(PlayerSubsystem_PlayerHUD_MainStateChanged, NewGameState) == 0x000001, "Member 'PlayerSubsystem_PlayerHUD_MainStateChanged::NewGameState' has a wrong offset!");

// Function ObsidianFox.PlayerSubsystem_PlayerHUD.PlayerHealthStateChanged
// 0x0001 (0x0001 - 0x0000)
struct PlayerSubsystem_PlayerHUD_PlayerHealthStateChanged final
{
public:
	EPlayerHealthState                            NewHealthState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerSubsystem_PlayerHUD_PlayerHealthStateChanged) == 0x000001, "Wrong alignment on PlayerSubsystem_PlayerHUD_PlayerHealthStateChanged");
static_assert(sizeof(PlayerSubsystem_PlayerHUD_PlayerHealthStateChanged) == 0x000001, "Wrong size on PlayerSubsystem_PlayerHUD_PlayerHealthStateChanged");
static_assert(offsetof(PlayerSubsystem_PlayerHUD_PlayerHealthStateChanged, NewHealthState) == 0x000000, "Member 'PlayerSubsystem_PlayerHUD_PlayerHealthStateChanged::NewHealthState' has a wrong offset!");

// DelegateFunction ObsidianFox.PlayerSubsystem_PlayerHUD.PlayerHUDVisibilitySignature__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct PlayerSubsystem_PlayerHUD_PlayerHUDVisibilitySignature__DelegateSignature final
{
public:
	bool                                          bNewHUDVisibility;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerSubsystem_PlayerHUD_PlayerHUDVisibilitySignature__DelegateSignature) == 0x000001, "Wrong alignment on PlayerSubsystem_PlayerHUD_PlayerHUDVisibilitySignature__DelegateSignature");
static_assert(sizeof(PlayerSubsystem_PlayerHUD_PlayerHUDVisibilitySignature__DelegateSignature) == 0x000001, "Wrong size on PlayerSubsystem_PlayerHUD_PlayerHUDVisibilitySignature__DelegateSignature");
static_assert(offsetof(PlayerSubsystem_PlayerHUD_PlayerHUDVisibilitySignature__DelegateSignature, bNewHUDVisibility) == 0x000000, "Member 'PlayerSubsystem_PlayerHUD_PlayerHUDVisibilitySignature__DelegateSignature::bNewHUDVisibility' has a wrong offset!");

// Function ObsidianFox.PlayerSubsystem_PlayerHUD.SetAllowedHUDVisibility
// 0x0001 (0x0001 - 0x0000)
struct PlayerSubsystem_PlayerHUD_SetAllowedHUDVisibility final
{
public:
	bool                                          bInAllowedHUDVisibility;                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerSubsystem_PlayerHUD_SetAllowedHUDVisibility) == 0x000001, "Wrong alignment on PlayerSubsystem_PlayerHUD_SetAllowedHUDVisibility");
static_assert(sizeof(PlayerSubsystem_PlayerHUD_SetAllowedHUDVisibility) == 0x000001, "Wrong size on PlayerSubsystem_PlayerHUD_SetAllowedHUDVisibility");
static_assert(offsetof(PlayerSubsystem_PlayerHUD_SetAllowedHUDVisibility, bInAllowedHUDVisibility) == 0x000000, "Member 'PlayerSubsystem_PlayerHUD_SetAllowedHUDVisibility::bInAllowedHUDVisibility' has a wrong offset!");

// Function ObsidianFox.PlayerSubsystem_PlayerHUD.SetUpdateHUDFromMainStateChanged
// 0x0001 (0x0001 - 0x0000)
struct PlayerSubsystem_PlayerHUD_SetUpdateHUDFromMainStateChanged final
{
public:
	bool                                          bInAllowedHUDVisibility;                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerSubsystem_PlayerHUD_SetUpdateHUDFromMainStateChanged) == 0x000001, "Wrong alignment on PlayerSubsystem_PlayerHUD_SetUpdateHUDFromMainStateChanged");
static_assert(sizeof(PlayerSubsystem_PlayerHUD_SetUpdateHUDFromMainStateChanged) == 0x000001, "Wrong size on PlayerSubsystem_PlayerHUD_SetUpdateHUDFromMainStateChanged");
static_assert(offsetof(PlayerSubsystem_PlayerHUD_SetUpdateHUDFromMainStateChanged, bInAllowedHUDVisibility) == 0x000000, "Member 'PlayerSubsystem_PlayerHUD_SetUpdateHUDFromMainStateChanged::bInAllowedHUDVisibility' has a wrong offset!");

// Function ObsidianFox.PlayerSubsystem_PlayerHUD.GetAllowedHUDVisibility
// 0x0001 (0x0001 - 0x0000)
struct PlayerSubsystem_PlayerHUD_GetAllowedHUDVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerSubsystem_PlayerHUD_GetAllowedHUDVisibility) == 0x000001, "Wrong alignment on PlayerSubsystem_PlayerHUD_GetAllowedHUDVisibility");
static_assert(sizeof(PlayerSubsystem_PlayerHUD_GetAllowedHUDVisibility) == 0x000001, "Wrong size on PlayerSubsystem_PlayerHUD_GetAllowedHUDVisibility");
static_assert(offsetof(PlayerSubsystem_PlayerHUD_GetAllowedHUDVisibility, ReturnValue) == 0x000000, "Member 'PlayerSubsystem_PlayerHUD_GetAllowedHUDVisibility::ReturnValue' has a wrong offset!");

// Function ObsidianFox.PlayerSubsystem_PlayerHUD.GetForceShowHealthBar
// 0x0001 (0x0001 - 0x0000)
struct PlayerSubsystem_PlayerHUD_GetForceShowHealthBar final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerSubsystem_PlayerHUD_GetForceShowHealthBar) == 0x000001, "Wrong alignment on PlayerSubsystem_PlayerHUD_GetForceShowHealthBar");
static_assert(sizeof(PlayerSubsystem_PlayerHUD_GetForceShowHealthBar) == 0x000001, "Wrong size on PlayerSubsystem_PlayerHUD_GetForceShowHealthBar");
static_assert(offsetof(PlayerSubsystem_PlayerHUD_GetForceShowHealthBar, ReturnValue) == 0x000000, "Member 'PlayerSubsystem_PlayerHUD_GetForceShowHealthBar::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ProgressionSubsystem.FactChangedHandler
// 0x000C (0x000C - 0x0000)
struct ProgressionSubsystem_FactChangedHandler final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubscriptionTagChangeType                    ChangeType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProgressionSubsystem_FactChangedHandler) == 0x000004, "Wrong alignment on ProgressionSubsystem_FactChangedHandler");
static_assert(sizeof(ProgressionSubsystem_FactChangedHandler) == 0x00000C, "Wrong size on ProgressionSubsystem_FactChangedHandler");
static_assert(offsetof(ProgressionSubsystem_FactChangedHandler, Tag) == 0x000000, "Member 'ProgressionSubsystem_FactChangedHandler::Tag' has a wrong offset!");
static_assert(offsetof(ProgressionSubsystem_FactChangedHandler, ChangeType) == 0x000008, "Member 'ProgressionSubsystem_FactChangedHandler::ChangeType' has a wrong offset!");

// Function ObsidianFox.ProgressionSubsystem.GameLoadedHandler
// 0x0010 (0x0010 - 0x0000)
struct ProgressionSubsystem_GameLoadedHandler final
{
public:
	EPersistenceLoadResult                        Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USaveGameWorld*                         SaveGame;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionSubsystem_GameLoadedHandler) == 0x000008, "Wrong alignment on ProgressionSubsystem_GameLoadedHandler");
static_assert(sizeof(ProgressionSubsystem_GameLoadedHandler) == 0x000010, "Wrong size on ProgressionSubsystem_GameLoadedHandler");
static_assert(offsetof(ProgressionSubsystem_GameLoadedHandler, Result) == 0x000000, "Member 'ProgressionSubsystem_GameLoadedHandler::Result' has a wrong offset!");
static_assert(offsetof(ProgressionSubsystem_GameLoadedHandler, SaveGame) == 0x000008, "Member 'ProgressionSubsystem_GameLoadedHandler::SaveGame' has a wrong offset!");

// Function ObsidianFox.ProgressionSubsystem.GameSessionEndedHandler
// 0x0008 (0x0008 - 0x0000)
struct ProgressionSubsystem_GameSessionEndedHandler final
{
public:
	class UGameplaySession*                       GameplaySession;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionSubsystem_GameSessionEndedHandler) == 0x000008, "Wrong alignment on ProgressionSubsystem_GameSessionEndedHandler");
static_assert(sizeof(ProgressionSubsystem_GameSessionEndedHandler) == 0x000008, "Wrong size on ProgressionSubsystem_GameSessionEndedHandler");
static_assert(offsetof(ProgressionSubsystem_GameSessionEndedHandler, GameplaySession) == 0x000000, "Member 'ProgressionSubsystem_GameSessionEndedHandler::GameplaySession' has a wrong offset!");

// Function ObsidianFox.ProgressionSubsystem.GameSessionStartedHandler
// 0x0008 (0x0008 - 0x0000)
struct ProgressionSubsystem_GameSessionStartedHandler final
{
public:
	class UGameplaySession*                       GameplaySession;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionSubsystem_GameSessionStartedHandler) == 0x000008, "Wrong alignment on ProgressionSubsystem_GameSessionStartedHandler");
static_assert(sizeof(ProgressionSubsystem_GameSessionStartedHandler) == 0x000008, "Wrong size on ProgressionSubsystem_GameSessionStartedHandler");
static_assert(offsetof(ProgressionSubsystem_GameSessionStartedHandler, GameplaySession) == 0x000000, "Member 'ProgressionSubsystem_GameSessionStartedHandler::GameplaySession' has a wrong offset!");

// Function ObsidianFox.ProgressionSubsystem.SetChapterFactFromTag
// 0x0008 (0x0008 - 0x0000)
struct ProgressionSubsystem_SetChapterFactFromTag final
{
public:
	struct FGameplayTag                           ChapterTag;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionSubsystem_SetChapterFactFromTag) == 0x000004, "Wrong alignment on ProgressionSubsystem_SetChapterFactFromTag");
static_assert(sizeof(ProgressionSubsystem_SetChapterFactFromTag) == 0x000008, "Wrong size on ProgressionSubsystem_SetChapterFactFromTag");
static_assert(offsetof(ProgressionSubsystem_SetChapterFactFromTag, ChapterTag) == 0x000000, "Member 'ProgressionSubsystem_SetChapterFactFromTag::ChapterTag' has a wrong offset!");

// Function ObsidianFox.ProgressionSubsystem.SetFactsFromProgressionTag
// 0x0008 (0x0008 - 0x0000)
struct ProgressionSubsystem_SetFactsFromProgressionTag final
{
public:
	struct FGameplayTag                           ProgressionTag;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionSubsystem_SetFactsFromProgressionTag) == 0x000004, "Wrong alignment on ProgressionSubsystem_SetFactsFromProgressionTag");
static_assert(sizeof(ProgressionSubsystem_SetFactsFromProgressionTag) == 0x000008, "Wrong size on ProgressionSubsystem_SetFactsFromProgressionTag");
static_assert(offsetof(ProgressionSubsystem_SetFactsFromProgressionTag, ProgressionTag) == 0x000000, "Member 'ProgressionSubsystem_SetFactsFromProgressionTag::ProgressionTag' has a wrong offset!");

// Function ObsidianFox.ProgressionSubsystem.SetLevelFactFromTag
// 0x0008 (0x0008 - 0x0000)
struct ProgressionSubsystem_SetLevelFactFromTag final
{
public:
	struct FGameplayTag                           LevelTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionSubsystem_SetLevelFactFromTag) == 0x000004, "Wrong alignment on ProgressionSubsystem_SetLevelFactFromTag");
static_assert(sizeof(ProgressionSubsystem_SetLevelFactFromTag) == 0x000008, "Wrong size on ProgressionSubsystem_SetLevelFactFromTag");
static_assert(offsetof(ProgressionSubsystem_SetLevelFactFromTag, LevelTag) == 0x000000, "Member 'ProgressionSubsystem_SetLevelFactFromTag::LevelTag' has a wrong offset!");

// Function ObsidianFox.ProgressionSubsystem.GetChapterName
// 0x0020 (0x0020 - 0x0000)
struct ProgressionSubsystem_GetChapterName final
{
public:
	struct FGameplayTag                           ChapterTag;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionSubsystem_GetChapterName) == 0x000008, "Wrong alignment on ProgressionSubsystem_GetChapterName");
static_assert(sizeof(ProgressionSubsystem_GetChapterName) == 0x000020, "Wrong size on ProgressionSubsystem_GetChapterName");
static_assert(offsetof(ProgressionSubsystem_GetChapterName, ChapterTag) == 0x000000, "Member 'ProgressionSubsystem_GetChapterName::ChapterTag' has a wrong offset!");
static_assert(offsetof(ProgressionSubsystem_GetChapterName, ReturnValue) == 0x000008, "Member 'ProgressionSubsystem_GetChapterName::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ProgressionSubsystem.GetChapterTagFromProgression
// 0x0010 (0x0010 - 0x0000)
struct ProgressionSubsystem_GetChapterTagFromProgression final
{
public:
	struct FGameplayTag                           ProgressionTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionSubsystem_GetChapterTagFromProgression) == 0x000004, "Wrong alignment on ProgressionSubsystem_GetChapterTagFromProgression");
static_assert(sizeof(ProgressionSubsystem_GetChapterTagFromProgression) == 0x000010, "Wrong size on ProgressionSubsystem_GetChapterTagFromProgression");
static_assert(offsetof(ProgressionSubsystem_GetChapterTagFromProgression, ProgressionTag) == 0x000000, "Member 'ProgressionSubsystem_GetChapterTagFromProgression::ProgressionTag' has a wrong offset!");
static_assert(offsetof(ProgressionSubsystem_GetChapterTagFromProgression, ReturnValue) == 0x000008, "Member 'ProgressionSubsystem_GetChapterTagFromProgression::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ProgressionSubsystem.GetCurrentChapter
// 0x0008 (0x0008 - 0x0000)
struct ProgressionSubsystem_GetCurrentChapter final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionSubsystem_GetCurrentChapter) == 0x000004, "Wrong alignment on ProgressionSubsystem_GetCurrentChapter");
static_assert(sizeof(ProgressionSubsystem_GetCurrentChapter) == 0x000008, "Wrong size on ProgressionSubsystem_GetCurrentChapter");
static_assert(offsetof(ProgressionSubsystem_GetCurrentChapter, ReturnValue) == 0x000000, "Member 'ProgressionSubsystem_GetCurrentChapter::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ProgressionSubsystem.GetCurrentChapterName
// 0x0018 (0x0018 - 0x0000)
struct ProgressionSubsystem_GetCurrentChapterName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionSubsystem_GetCurrentChapterName) == 0x000008, "Wrong alignment on ProgressionSubsystem_GetCurrentChapterName");
static_assert(sizeof(ProgressionSubsystem_GetCurrentChapterName) == 0x000018, "Wrong size on ProgressionSubsystem_GetCurrentChapterName");
static_assert(offsetof(ProgressionSubsystem_GetCurrentChapterName, ReturnValue) == 0x000000, "Member 'ProgressionSubsystem_GetCurrentChapterName::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ProgressionSubsystem.GetCurrentLevel
// 0x0008 (0x0008 - 0x0000)
struct ProgressionSubsystem_GetCurrentLevel final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionSubsystem_GetCurrentLevel) == 0x000004, "Wrong alignment on ProgressionSubsystem_GetCurrentLevel");
static_assert(sizeof(ProgressionSubsystem_GetCurrentLevel) == 0x000008, "Wrong size on ProgressionSubsystem_GetCurrentLevel");
static_assert(offsetof(ProgressionSubsystem_GetCurrentLevel, ReturnValue) == 0x000000, "Member 'ProgressionSubsystem_GetCurrentLevel::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ProgressionSubsystem.GetCurrentLevelName
// 0x0018 (0x0018 - 0x0000)
struct ProgressionSubsystem_GetCurrentLevelName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionSubsystem_GetCurrentLevelName) == 0x000008, "Wrong alignment on ProgressionSubsystem_GetCurrentLevelName");
static_assert(sizeof(ProgressionSubsystem_GetCurrentLevelName) == 0x000018, "Wrong size on ProgressionSubsystem_GetCurrentLevelName");
static_assert(offsetof(ProgressionSubsystem_GetCurrentLevelName, ReturnValue) == 0x000000, "Member 'ProgressionSubsystem_GetCurrentLevelName::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ProgressionSubsystem.GetCurrentMenuImage
// 0x0028 (0x0028 - 0x0000)
struct ProgressionSubsystem_GetCurrentMenuImage final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionSubsystem_GetCurrentMenuImage) == 0x000008, "Wrong alignment on ProgressionSubsystem_GetCurrentMenuImage");
static_assert(sizeof(ProgressionSubsystem_GetCurrentMenuImage) == 0x000028, "Wrong size on ProgressionSubsystem_GetCurrentMenuImage");
static_assert(offsetof(ProgressionSubsystem_GetCurrentMenuImage, ReturnValue) == 0x000000, "Member 'ProgressionSubsystem_GetCurrentMenuImage::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ProgressionSubsystem.GetCurrentProgression
// 0x0008 (0x0008 - 0x0000)
struct ProgressionSubsystem_GetCurrentProgression final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionSubsystem_GetCurrentProgression) == 0x000004, "Wrong alignment on ProgressionSubsystem_GetCurrentProgression");
static_assert(sizeof(ProgressionSubsystem_GetCurrentProgression) == 0x000008, "Wrong size on ProgressionSubsystem_GetCurrentProgression");
static_assert(offsetof(ProgressionSubsystem_GetCurrentProgression, ReturnValue) == 0x000000, "Member 'ProgressionSubsystem_GetCurrentProgression::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ProgressionSubsystem.GetCurrentSaveSlotImage
// 0x0028 (0x0028 - 0x0000)
struct ProgressionSubsystem_GetCurrentSaveSlotImage final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionSubsystem_GetCurrentSaveSlotImage) == 0x000008, "Wrong alignment on ProgressionSubsystem_GetCurrentSaveSlotImage");
static_assert(sizeof(ProgressionSubsystem_GetCurrentSaveSlotImage) == 0x000028, "Wrong size on ProgressionSubsystem_GetCurrentSaveSlotImage");
static_assert(offsetof(ProgressionSubsystem_GetCurrentSaveSlotImage, ReturnValue) == 0x000000, "Member 'ProgressionSubsystem_GetCurrentSaveSlotImage::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ProgressionSubsystem.GetLevelName
// 0x0020 (0x0020 - 0x0000)
struct ProgressionSubsystem_GetLevelName final
{
public:
	struct FGameplayTag                           LevelTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionSubsystem_GetLevelName) == 0x000008, "Wrong alignment on ProgressionSubsystem_GetLevelName");
static_assert(sizeof(ProgressionSubsystem_GetLevelName) == 0x000020, "Wrong size on ProgressionSubsystem_GetLevelName");
static_assert(offsetof(ProgressionSubsystem_GetLevelName, LevelTag) == 0x000000, "Member 'ProgressionSubsystem_GetLevelName::LevelTag' has a wrong offset!");
static_assert(offsetof(ProgressionSubsystem_GetLevelName, ReturnValue) == 0x000008, "Member 'ProgressionSubsystem_GetLevelName::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ProgressionSubsystem.GetLevelTagFromProgression
// 0x0010 (0x0010 - 0x0000)
struct ProgressionSubsystem_GetLevelTagFromProgression final
{
public:
	struct FGameplayTag                           ProgressionTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionSubsystem_GetLevelTagFromProgression) == 0x000004, "Wrong alignment on ProgressionSubsystem_GetLevelTagFromProgression");
static_assert(sizeof(ProgressionSubsystem_GetLevelTagFromProgression) == 0x000010, "Wrong size on ProgressionSubsystem_GetLevelTagFromProgression");
static_assert(offsetof(ProgressionSubsystem_GetLevelTagFromProgression, ProgressionTag) == 0x000000, "Member 'ProgressionSubsystem_GetLevelTagFromProgression::ProgressionTag' has a wrong offset!");
static_assert(offsetof(ProgressionSubsystem_GetLevelTagFromProgression, ReturnValue) == 0x000008, "Member 'ProgressionSubsystem_GetLevelTagFromProgression::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ProgressionSubsystem.GetLoadingScreenImage
// 0x0030 (0x0030 - 0x0000)
struct ProgressionSubsystem_GetLoadingScreenImage final
{
public:
	struct FGameplayTag                           ProgressionTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionSubsystem_GetLoadingScreenImage) == 0x000008, "Wrong alignment on ProgressionSubsystem_GetLoadingScreenImage");
static_assert(sizeof(ProgressionSubsystem_GetLoadingScreenImage) == 0x000030, "Wrong size on ProgressionSubsystem_GetLoadingScreenImage");
static_assert(offsetof(ProgressionSubsystem_GetLoadingScreenImage, ProgressionTag) == 0x000000, "Member 'ProgressionSubsystem_GetLoadingScreenImage::ProgressionTag' has a wrong offset!");
static_assert(offsetof(ProgressionSubsystem_GetLoadingScreenImage, ReturnValue) == 0x000008, "Member 'ProgressionSubsystem_GetLoadingScreenImage::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ProgressionSubsystem.GetMenuImage
// 0x0030 (0x0030 - 0x0000)
struct ProgressionSubsystem_GetMenuImage final
{
public:
	struct FGameplayTag                           ProgressionTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionSubsystem_GetMenuImage) == 0x000008, "Wrong alignment on ProgressionSubsystem_GetMenuImage");
static_assert(sizeof(ProgressionSubsystem_GetMenuImage) == 0x000030, "Wrong size on ProgressionSubsystem_GetMenuImage");
static_assert(offsetof(ProgressionSubsystem_GetMenuImage, ProgressionTag) == 0x000000, "Member 'ProgressionSubsystem_GetMenuImage::ProgressionTag' has a wrong offset!");
static_assert(offsetof(ProgressionSubsystem_GetMenuImage, ReturnValue) == 0x000008, "Member 'ProgressionSubsystem_GetMenuImage::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ProgressionSubsystem.GetProgressionTag
// 0x0018 (0x0018 - 0x0000)
struct ProgressionSubsystem_GetProgressionTag final
{
public:
	struct FGameplayTag                           ChapterTag;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           LevelTag;                                          // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionSubsystem_GetProgressionTag) == 0x000004, "Wrong alignment on ProgressionSubsystem_GetProgressionTag");
static_assert(sizeof(ProgressionSubsystem_GetProgressionTag) == 0x000018, "Wrong size on ProgressionSubsystem_GetProgressionTag");
static_assert(offsetof(ProgressionSubsystem_GetProgressionTag, ChapterTag) == 0x000000, "Member 'ProgressionSubsystem_GetProgressionTag::ChapterTag' has a wrong offset!");
static_assert(offsetof(ProgressionSubsystem_GetProgressionTag, LevelTag) == 0x000008, "Member 'ProgressionSubsystem_GetProgressionTag::LevelTag' has a wrong offset!");
static_assert(offsetof(ProgressionSubsystem_GetProgressionTag, ReturnValue) == 0x000010, "Member 'ProgressionSubsystem_GetProgressionTag::ReturnValue' has a wrong offset!");

// Function ObsidianFox.ProgressionSubsystem.GetSaveSlotImage
// 0x0030 (0x0030 - 0x0000)
struct ProgressionSubsystem_GetSaveSlotImage final
{
public:
	struct FGameplayTag                           ProgressionTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProgressionSubsystem_GetSaveSlotImage) == 0x000008, "Wrong alignment on ProgressionSubsystem_GetSaveSlotImage");
static_assert(sizeof(ProgressionSubsystem_GetSaveSlotImage) == 0x000030, "Wrong size on ProgressionSubsystem_GetSaveSlotImage");
static_assert(offsetof(ProgressionSubsystem_GetSaveSlotImage, ProgressionTag) == 0x000000, "Member 'ProgressionSubsystem_GetSaveSlotImage::ProgressionTag' has a wrong offset!");
static_assert(offsetof(ProgressionSubsystem_GetSaveSlotImage, ReturnValue) == 0x000008, "Member 'ProgressionSubsystem_GetSaveSlotImage::ReturnValue' has a wrong offset!");

// Function ObsidianFox.SaveBFL.SaveVariableDoOnce
// 0x0002 (0x0002 - 0x0000)
struct SaveBFL_SaveVariableDoOnce final
{
public:
	bool                                          SaveVariable;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESaveBFLDoOnceExec                            Branches;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveBFL_SaveVariableDoOnce) == 0x000001, "Wrong alignment on SaveBFL_SaveVariableDoOnce");
static_assert(sizeof(SaveBFL_SaveVariableDoOnce) == 0x000002, "Wrong size on SaveBFL_SaveVariableDoOnce");
static_assert(offsetof(SaveBFL_SaveVariableDoOnce, SaveVariable) == 0x000000, "Member 'SaveBFL_SaveVariableDoOnce::SaveVariable' has a wrong offset!");
static_assert(offsetof(SaveBFL_SaveVariableDoOnce, Branches) == 0x000001, "Member 'SaveBFL_SaveVariableDoOnce::Branches' has a wrong offset!");

// Function ObsidianFox.SolventSubsystem.ActivateGauntlet
// 0x0010 (0x0010 - 0x0000)
struct SolventSubsystem_ActivateGauntlet final
{
public:
	class AActor*                                 SplinePath;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTime;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESolventGauntlet                              Action;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolventSubsystem_ActivateGauntlet) == 0x000008, "Wrong alignment on SolventSubsystem_ActivateGauntlet");
static_assert(sizeof(SolventSubsystem_ActivateGauntlet) == 0x000010, "Wrong size on SolventSubsystem_ActivateGauntlet");
static_assert(offsetof(SolventSubsystem_ActivateGauntlet, SplinePath) == 0x000000, "Member 'SolventSubsystem_ActivateGauntlet::SplinePath' has a wrong offset!");
static_assert(offsetof(SolventSubsystem_ActivateGauntlet, MaxTime) == 0x000008, "Member 'SolventSubsystem_ActivateGauntlet::MaxTime' has a wrong offset!");
static_assert(offsetof(SolventSubsystem_ActivateGauntlet, Action) == 0x00000C, "Member 'SolventSubsystem_ActivateGauntlet::Action' has a wrong offset!");

// Function ObsidianFox.SolventSubsystem.EndGauntlet
// 0x0001 (0x0001 - 0x0000)
struct SolventSubsystem_EndGauntlet final
{
public:
	ESolventGauntlet                              Action;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolventSubsystem_EndGauntlet) == 0x000001, "Wrong alignment on SolventSubsystem_EndGauntlet");
static_assert(sizeof(SolventSubsystem_EndGauntlet) == 0x000001, "Wrong size on SolventSubsystem_EndGauntlet");
static_assert(offsetof(SolventSubsystem_EndGauntlet, Action) == 0x000000, "Member 'SolventSubsystem_EndGauntlet::Action' has a wrong offset!");

// Function ObsidianFox.SolventSubsystem.GetGauntletEndLocation
// 0x000C (0x000C - 0x0000)
struct SolventSubsystem_GetGauntletEndLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolventSubsystem_GetGauntletEndLocation) == 0x000004, "Wrong alignment on SolventSubsystem_GetGauntletEndLocation");
static_assert(sizeof(SolventSubsystem_GetGauntletEndLocation) == 0x00000C, "Wrong size on SolventSubsystem_GetGauntletEndLocation");
static_assert(offsetof(SolventSubsystem_GetGauntletEndLocation, ReturnValue) == 0x000000, "Member 'SolventSubsystem_GetGauntletEndLocation::ReturnValue' has a wrong offset!");

// Function ObsidianFox.SolventSubsystem.GetGauntletEndSplinePoint
// 0x0004 (0x0004 - 0x0000)
struct SolventSubsystem_GetGauntletEndSplinePoint final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolventSubsystem_GetGauntletEndSplinePoint) == 0x000004, "Wrong alignment on SolventSubsystem_GetGauntletEndSplinePoint");
static_assert(sizeof(SolventSubsystem_GetGauntletEndSplinePoint) == 0x000004, "Wrong size on SolventSubsystem_GetGauntletEndSplinePoint");
static_assert(offsetof(SolventSubsystem_GetGauntletEndSplinePoint, ReturnValue) == 0x000000, "Member 'SolventSubsystem_GetGauntletEndSplinePoint::ReturnValue' has a wrong offset!");

// Function ObsidianFox.SolventSubsystem.GetGauntletStartLocation
// 0x000C (0x000C - 0x0000)
struct SolventSubsystem_GetGauntletStartLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolventSubsystem_GetGauntletStartLocation) == 0x000004, "Wrong alignment on SolventSubsystem_GetGauntletStartLocation");
static_assert(sizeof(SolventSubsystem_GetGauntletStartLocation) == 0x00000C, "Wrong size on SolventSubsystem_GetGauntletStartLocation");
static_assert(offsetof(SolventSubsystem_GetGauntletStartLocation, ReturnValue) == 0x000000, "Member 'SolventSubsystem_GetGauntletStartLocation::ReturnValue' has a wrong offset!");

// Function ObsidianFox.SolventSubsystem.GetGauntletTimer
// 0x0004 (0x0004 - 0x0000)
struct SolventSubsystem_GetGauntletTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolventSubsystem_GetGauntletTimer) == 0x000004, "Wrong alignment on SolventSubsystem_GetGauntletTimer");
static_assert(sizeof(SolventSubsystem_GetGauntletTimer) == 0x000004, "Wrong size on SolventSubsystem_GetGauntletTimer");
static_assert(offsetof(SolventSubsystem_GetGauntletTimer, ReturnValue) == 0x000000, "Member 'SolventSubsystem_GetGauntletTimer::ReturnValue' has a wrong offset!");

// Function ObsidianFox.SolventSubsystem.GetMaxTimeInGauntlet
// 0x0004 (0x0004 - 0x0000)
struct SolventSubsystem_GetMaxTimeInGauntlet final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolventSubsystem_GetMaxTimeInGauntlet) == 0x000004, "Wrong alignment on SolventSubsystem_GetMaxTimeInGauntlet");
static_assert(sizeof(SolventSubsystem_GetMaxTimeInGauntlet) == 0x000004, "Wrong size on SolventSubsystem_GetMaxTimeInGauntlet");
static_assert(offsetof(SolventSubsystem_GetMaxTimeInGauntlet, ReturnValue) == 0x000000, "Member 'SolventSubsystem_GetMaxTimeInGauntlet::ReturnValue' has a wrong offset!");

// Function ObsidianFox.SolventSubsystem.GetPathLocation
// 0x0010 (0x0010 - 0x0000)
struct SolventSubsystem_GetPathLocation final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolventSubsystem_GetPathLocation) == 0x000004, "Wrong alignment on SolventSubsystem_GetPathLocation");
static_assert(sizeof(SolventSubsystem_GetPathLocation) == 0x000010, "Wrong size on SolventSubsystem_GetPathLocation");
static_assert(offsetof(SolventSubsystem_GetPathLocation, Distance) == 0x000000, "Member 'SolventSubsystem_GetPathLocation::Distance' has a wrong offset!");
static_assert(offsetof(SolventSubsystem_GetPathLocation, ReturnValue) == 0x000004, "Member 'SolventSubsystem_GetPathLocation::ReturnValue' has a wrong offset!");

// Function ObsidianFox.SolventSubsystem.GetPlayerPosition
// 0x000C (0x000C - 0x0000)
struct SolventSubsystem_GetPlayerPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolventSubsystem_GetPlayerPosition) == 0x000004, "Wrong alignment on SolventSubsystem_GetPlayerPosition");
static_assert(sizeof(SolventSubsystem_GetPlayerPosition) == 0x00000C, "Wrong size on SolventSubsystem_GetPlayerPosition");
static_assert(offsetof(SolventSubsystem_GetPlayerPosition, ReturnValue) == 0x000000, "Member 'SolventSubsystem_GetPlayerPosition::ReturnValue' has a wrong offset!");

// Function ObsidianFox.SolventSubsystem.GetProgressPercent
// 0x0004 (0x0004 - 0x0000)
struct SolventSubsystem_GetProgressPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolventSubsystem_GetProgressPercent) == 0x000004, "Wrong alignment on SolventSubsystem_GetProgressPercent");
static_assert(sizeof(SolventSubsystem_GetProgressPercent) == 0x000004, "Wrong size on SolventSubsystem_GetProgressPercent");
static_assert(offsetof(SolventSubsystem_GetProgressPercent, ReturnValue) == 0x000000, "Member 'SolventSubsystem_GetProgressPercent::ReturnValue' has a wrong offset!");

// Function ObsidianFox.SolventSubsystem.GetSplinePosition
// 0x000C (0x000C - 0x0000)
struct SolventSubsystem_GetSplinePosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolventSubsystem_GetSplinePosition) == 0x000004, "Wrong alignment on SolventSubsystem_GetSplinePosition");
static_assert(sizeof(SolventSubsystem_GetSplinePosition) == 0x00000C, "Wrong size on SolventSubsystem_GetSplinePosition");
static_assert(offsetof(SolventSubsystem_GetSplinePosition, ReturnValue) == 0x000000, "Member 'SolventSubsystem_GetSplinePosition::ReturnValue' has a wrong offset!");

// Function ObsidianFox.SolventSubsystem.GetTimePercent
// 0x0004 (0x0004 - 0x0000)
struct SolventSubsystem_GetTimePercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolventSubsystem_GetTimePercent) == 0x000004, "Wrong alignment on SolventSubsystem_GetTimePercent");
static_assert(sizeof(SolventSubsystem_GetTimePercent) == 0x000004, "Wrong size on SolventSubsystem_GetTimePercent");
static_assert(offsetof(SolventSubsystem_GetTimePercent, ReturnValue) == 0x000000, "Member 'SolventSubsystem_GetTimePercent::ReturnValue' has a wrong offset!");

// Function ObsidianFox.SolventSubsystem.IsGauntletActive
// 0x0001 (0x0001 - 0x0000)
struct SolventSubsystem_IsGauntletActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolventSubsystem_IsGauntletActive) == 0x000001, "Wrong alignment on SolventSubsystem_IsGauntletActive");
static_assert(sizeof(SolventSubsystem_IsGauntletActive) == 0x000001, "Wrong size on SolventSubsystem_IsGauntletActive");
static_assert(offsetof(SolventSubsystem_IsGauntletActive, ReturnValue) == 0x000000, "Member 'SolventSubsystem_IsGauntletActive::ReturnValue' has a wrong offset!");

// Function ObsidianFox.SolventSubsystem.IsGauntletReversed
// 0x0001 (0x0001 - 0x0000)
struct SolventSubsystem_IsGauntletReversed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolventSubsystem_IsGauntletReversed) == 0x000001, "Wrong alignment on SolventSubsystem_IsGauntletReversed");
static_assert(sizeof(SolventSubsystem_IsGauntletReversed) == 0x000001, "Wrong size on SolventSubsystem_IsGauntletReversed");
static_assert(offsetof(SolventSubsystem_IsGauntletReversed, ReturnValue) == 0x000000, "Member 'SolventSubsystem_IsGauntletReversed::ReturnValue' has a wrong offset!");

// Function ObsidianFox.SolventSubsystem.StartGauntlet
// 0x0010 (0x0010 - 0x0000)
struct SolventSubsystem_StartGauntlet final
{
public:
	class AActor*                                 SplinePath;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTime;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolventSubsystem_StartGauntlet) == 0x000008, "Wrong alignment on SolventSubsystem_StartGauntlet");
static_assert(sizeof(SolventSubsystem_StartGauntlet) == 0x000010, "Wrong size on SolventSubsystem_StartGauntlet");
static_assert(offsetof(SolventSubsystem_StartGauntlet, SplinePath) == 0x000000, "Member 'SolventSubsystem_StartGauntlet::SplinePath' has a wrong offset!");
static_assert(offsetof(SolventSubsystem_StartGauntlet, MaxTime) == 0x000008, "Member 'SolventSubsystem_StartGauntlet::MaxTime' has a wrong offset!");

// Function ObsidianFox.SplineMovementComponent.StartSplineMovement
// 0x0008 (0x0008 - 0x0000)
struct SplineMovementComponent_StartSplineMovement final
{
public:
	class USplineComponent*                       Spline;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineMovementComponent_StartSplineMovement) == 0x000008, "Wrong alignment on SplineMovementComponent_StartSplineMovement");
static_assert(sizeof(SplineMovementComponent_StartSplineMovement) == 0x000008, "Wrong size on SplineMovementComponent_StartSplineMovement");
static_assert(offsetof(SplineMovementComponent_StartSplineMovement, Spline) == 0x000000, "Member 'SplineMovementComponent_StartSplineMovement::Spline' has a wrong offset!");

// Function ObsidianFox.SplineMovementComponent.StopSplineMovement
// 0x0001 (0x0001 - 0x0000)
struct SplineMovementComponent_StopSplineMovement final
{
public:
	EMovementMode                                 NewMovementMode;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineMovementComponent_StopSplineMovement) == 0x000001, "Wrong alignment on SplineMovementComponent_StopSplineMovement");
static_assert(sizeof(SplineMovementComponent_StopSplineMovement) == 0x000001, "Wrong size on SplineMovementComponent_StopSplineMovement");
static_assert(offsetof(SplineMovementComponent_StopSplineMovement, NewMovementMode) == 0x000000, "Member 'SplineMovementComponent_StopSplineMovement::NewMovementMode' has a wrong offset!");

// Function ObsidianFox.SplineMovementComponent.IsOnSpline
// 0x0001 (0x0001 - 0x0000)
struct SplineMovementComponent_IsOnSpline final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplineMovementComponent_IsOnSpline) == 0x000001, "Wrong alignment on SplineMovementComponent_IsOnSpline");
static_assert(sizeof(SplineMovementComponent_IsOnSpline) == 0x000001, "Wrong size on SplineMovementComponent_IsOnSpline");
static_assert(offsetof(SplineMovementComponent_IsOnSpline, ReturnValue) == 0x000000, "Member 'SplineMovementComponent_IsOnSpline::ReturnValue' has a wrong offset!");

// Function ObsidianFox.StartleInterface.OnStartle
// 0x002C (0x002C - 0x0000)
struct StartleInterface_OnStartle final
{
public:
	struct FFocusPointData                        StartleComponentData;                              // 0x0000(0x002C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StartleInterface_OnStartle) == 0x000004, "Wrong alignment on StartleInterface_OnStartle");
static_assert(sizeof(StartleInterface_OnStartle) == 0x00002C, "Wrong size on StartleInterface_OnStartle");
static_assert(offsetof(StartleInterface_OnStartle, StartleComponentData) == 0x000000, "Member 'StartleInterface_OnStartle::StartleComponentData' has a wrong offset!");

// Function ObsidianFox.Talisman.CheckCombination
// 0x0010 (0x0010 - 0x0000)
struct Talisman_CheckCombination final
{
public:
	int32                                         Combination;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           FlowTag;                                           // 0x0004(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Talisman_CheckCombination) == 0x000004, "Wrong alignment on Talisman_CheckCombination");
static_assert(sizeof(Talisman_CheckCombination) == 0x000010, "Wrong size on Talisman_CheckCombination");
static_assert(offsetof(Talisman_CheckCombination, Combination) == 0x000000, "Member 'Talisman_CheckCombination::Combination' has a wrong offset!");
static_assert(offsetof(Talisman_CheckCombination, FlowTag) == 0x000004, "Member 'Talisman_CheckCombination::FlowTag' has a wrong offset!");
static_assert(offsetof(Talisman_CheckCombination, ReturnValue) == 0x00000C, "Member 'Talisman_CheckCombination::ReturnValue' has a wrong offset!");

// Function ObsidianFox.Talisman.CheckCurrentCombination
// 0x000C (0x000C - 0x0000)
struct Talisman_CheckCurrentCombination final
{
public:
	struct FGameplayTag                           FlowTag;                                           // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Talisman_CheckCurrentCombination) == 0x000004, "Wrong alignment on Talisman_CheckCurrentCombination");
static_assert(sizeof(Talisman_CheckCurrentCombination) == 0x00000C, "Wrong size on Talisman_CheckCurrentCombination");
static_assert(offsetof(Talisman_CheckCurrentCombination, FlowTag) == 0x000000, "Member 'Talisman_CheckCurrentCombination::FlowTag' has a wrong offset!");
static_assert(offsetof(Talisman_CheckCurrentCombination, ReturnValue) == 0x000008, "Member 'Talisman_CheckCurrentCombination::ReturnValue' has a wrong offset!");

// Function ObsidianFox.TimedObjectiveSubsystem.CancelTimer
// 0x0008 (0x0008 - 0x0000)
struct TimedObjectiveSubsystem_CancelTimer final
{
public:
	struct FGameplayTag                           IdentityTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimedObjectiveSubsystem_CancelTimer) == 0x000004, "Wrong alignment on TimedObjectiveSubsystem_CancelTimer");
static_assert(sizeof(TimedObjectiveSubsystem_CancelTimer) == 0x000008, "Wrong size on TimedObjectiveSubsystem_CancelTimer");
static_assert(offsetof(TimedObjectiveSubsystem_CancelTimer, IdentityTag) == 0x000000, "Member 'TimedObjectiveSubsystem_CancelTimer::IdentityTag' has a wrong offset!");

// Function ObsidianFox.TimedObjectiveSubsystem.GetRemainingObjectiveTime
// 0x000C (0x000C - 0x0000)
struct TimedObjectiveSubsystem_GetRemainingObjectiveTime final
{
public:
	struct FGameplayTag                           IdentityTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimedObjectiveSubsystem_GetRemainingObjectiveTime) == 0x000004, "Wrong alignment on TimedObjectiveSubsystem_GetRemainingObjectiveTime");
static_assert(sizeof(TimedObjectiveSubsystem_GetRemainingObjectiveTime) == 0x00000C, "Wrong size on TimedObjectiveSubsystem_GetRemainingObjectiveTime");
static_assert(offsetof(TimedObjectiveSubsystem_GetRemainingObjectiveTime, IdentityTag) == 0x000000, "Member 'TimedObjectiveSubsystem_GetRemainingObjectiveTime::IdentityTag' has a wrong offset!");
static_assert(offsetof(TimedObjectiveSubsystem_GetRemainingObjectiveTime, ReturnValue) == 0x000008, "Member 'TimedObjectiveSubsystem_GetRemainingObjectiveTime::ReturnValue' has a wrong offset!");

// Function ObsidianFox.TimedObjectiveSubsystem.IsObjectPauseSource
// 0x0010 (0x0010 - 0x0000)
struct TimedObjectiveSubsystem_IsObjectPauseSource final
{
public:
	class UObject*                                SourceObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TimedObjectiveSubsystem_IsObjectPauseSource) == 0x000008, "Wrong alignment on TimedObjectiveSubsystem_IsObjectPauseSource");
static_assert(sizeof(TimedObjectiveSubsystem_IsObjectPauseSource) == 0x000010, "Wrong size on TimedObjectiveSubsystem_IsObjectPauseSource");
static_assert(offsetof(TimedObjectiveSubsystem_IsObjectPauseSource, SourceObject) == 0x000000, "Member 'TimedObjectiveSubsystem_IsObjectPauseSource::SourceObject' has a wrong offset!");
static_assert(offsetof(TimedObjectiveSubsystem_IsObjectPauseSource, ReturnValue) == 0x000008, "Member 'TimedObjectiveSubsystem_IsObjectPauseSource::ReturnValue' has a wrong offset!");

// Function ObsidianFox.TimedObjectiveSubsystem.OnCustomPauseSourcesValueUpdatedHandler
// 0x0001 (0x0001 - 0x0000)
struct TimedObjectiveSubsystem_OnCustomPauseSourcesValueUpdatedHandler final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimedObjectiveSubsystem_OnCustomPauseSourcesValueUpdatedHandler) == 0x000001, "Wrong alignment on TimedObjectiveSubsystem_OnCustomPauseSourcesValueUpdatedHandler");
static_assert(sizeof(TimedObjectiveSubsystem_OnCustomPauseSourcesValueUpdatedHandler) == 0x000001, "Wrong size on TimedObjectiveSubsystem_OnCustomPauseSourcesValueUpdatedHandler");
static_assert(offsetof(TimedObjectiveSubsystem_OnCustomPauseSourcesValueUpdatedHandler, bNewValue) == 0x000000, "Member 'TimedObjectiveSubsystem_OnCustomPauseSourcesValueUpdatedHandler::bNewValue' has a wrong offset!");

// Function ObsidianFox.TimedObjectiveSubsystem.OnLocationEnterHandler
// 0x0020 (0x0020 - 0x0000)
struct TimedObjectiveSubsystem_OnLocationEnterHandler final
{
public:
	struct FGameplayTagContainer                  LocationTags;                                      // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimedObjectiveSubsystem_OnLocationEnterHandler) == 0x000008, "Wrong alignment on TimedObjectiveSubsystem_OnLocationEnterHandler");
static_assert(sizeof(TimedObjectiveSubsystem_OnLocationEnterHandler) == 0x000020, "Wrong size on TimedObjectiveSubsystem_OnLocationEnterHandler");
static_assert(offsetof(TimedObjectiveSubsystem_OnLocationEnterHandler, LocationTags) == 0x000000, "Member 'TimedObjectiveSubsystem_OnLocationEnterHandler::LocationTags' has a wrong offset!");

// Function ObsidianFox.TimedObjectiveSubsystem.OnLocationExitHandler
// 0x0020 (0x0020 - 0x0000)
struct TimedObjectiveSubsystem_OnLocationExitHandler final
{
public:
	struct FGameplayTagContainer                  LocationTags;                                      // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimedObjectiveSubsystem_OnLocationExitHandler) == 0x000008, "Wrong alignment on TimedObjectiveSubsystem_OnLocationExitHandler");
static_assert(sizeof(TimedObjectiveSubsystem_OnLocationExitHandler) == 0x000020, "Wrong size on TimedObjectiveSubsystem_OnLocationExitHandler");
static_assert(offsetof(TimedObjectiveSubsystem_OnLocationExitHandler, LocationTags) == 0x000000, "Member 'TimedObjectiveSubsystem_OnLocationExitHandler::LocationTags' has a wrong offset!");

// Function ObsidianFox.TimedObjectiveSubsystem.OnMainGameStateUpdatedHandler
// 0x0002 (0x0002 - 0x0000)
struct TimedObjectiveSubsystem_OnMainGameStateUpdatedHandler final
{
public:
	EGameMainState                                OldGameState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMainState                                NewGameState;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimedObjectiveSubsystem_OnMainGameStateUpdatedHandler) == 0x000001, "Wrong alignment on TimedObjectiveSubsystem_OnMainGameStateUpdatedHandler");
static_assert(sizeof(TimedObjectiveSubsystem_OnMainGameStateUpdatedHandler) == 0x000002, "Wrong size on TimedObjectiveSubsystem_OnMainGameStateUpdatedHandler");
static_assert(offsetof(TimedObjectiveSubsystem_OnMainGameStateUpdatedHandler, OldGameState) == 0x000000, "Member 'TimedObjectiveSubsystem_OnMainGameStateUpdatedHandler::OldGameState' has a wrong offset!");
static_assert(offsetof(TimedObjectiveSubsystem_OnMainGameStateUpdatedHandler, NewGameState) == 0x000001, "Member 'TimedObjectiveSubsystem_OnMainGameStateUpdatedHandler::NewGameState' has a wrong offset!");

// Function ObsidianFox.TimedObjectiveSubsystem.PauseAllTimers
// 0x0008 (0x0008 - 0x0000)
struct TimedObjectiveSubsystem_PauseAllTimers final
{
public:
	class UObject*                                SourceObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimedObjectiveSubsystem_PauseAllTimers) == 0x000008, "Wrong alignment on TimedObjectiveSubsystem_PauseAllTimers");
static_assert(sizeof(TimedObjectiveSubsystem_PauseAllTimers) == 0x000008, "Wrong size on TimedObjectiveSubsystem_PauseAllTimers");
static_assert(offsetof(TimedObjectiveSubsystem_PauseAllTimers, SourceObject) == 0x000000, "Member 'TimedObjectiveSubsystem_PauseAllTimers::SourceObject' has a wrong offset!");

// Function ObsidianFox.TimedObjectiveSubsystem.PauseTimer
// 0x0008 (0x0008 - 0x0000)
struct TimedObjectiveSubsystem_PauseTimer final
{
public:
	struct FGameplayTag                           IdentityTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimedObjectiveSubsystem_PauseTimer) == 0x000004, "Wrong alignment on TimedObjectiveSubsystem_PauseTimer");
static_assert(sizeof(TimedObjectiveSubsystem_PauseTimer) == 0x000008, "Wrong size on TimedObjectiveSubsystem_PauseTimer");
static_assert(offsetof(TimedObjectiveSubsystem_PauseTimer, IdentityTag) == 0x000000, "Member 'TimedObjectiveSubsystem_PauseTimer::IdentityTag' has a wrong offset!");

// Function ObsidianFox.TimedObjectiveSubsystem.ResumeAllTimers
// 0x0008 (0x0008 - 0x0000)
struct TimedObjectiveSubsystem_ResumeAllTimers final
{
public:
	class UObject*                                SourceObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimedObjectiveSubsystem_ResumeAllTimers) == 0x000008, "Wrong alignment on TimedObjectiveSubsystem_ResumeAllTimers");
static_assert(sizeof(TimedObjectiveSubsystem_ResumeAllTimers) == 0x000008, "Wrong size on TimedObjectiveSubsystem_ResumeAllTimers");
static_assert(offsetof(TimedObjectiveSubsystem_ResumeAllTimers, SourceObject) == 0x000000, "Member 'TimedObjectiveSubsystem_ResumeAllTimers::SourceObject' has a wrong offset!");

// Function ObsidianFox.TimedObjectiveSubsystem.ResumeTimer
// 0x0008 (0x0008 - 0x0000)
struct TimedObjectiveSubsystem_ResumeTimer final
{
public:
	struct FGameplayTag                           IdentityTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimedObjectiveSubsystem_ResumeTimer) == 0x000004, "Wrong alignment on TimedObjectiveSubsystem_ResumeTimer");
static_assert(sizeof(TimedObjectiveSubsystem_ResumeTimer) == 0x000008, "Wrong size on TimedObjectiveSubsystem_ResumeTimer");
static_assert(offsetof(TimedObjectiveSubsystem_ResumeTimer, IdentityTag) == 0x000000, "Member 'TimedObjectiveSubsystem_ResumeTimer::IdentityTag' has a wrong offset!");

// Function ObsidianFox.TimedObjectiveSubsystem.StartTimedObjective
// 0x0020 (0x0020 - 0x0000)
struct TimedObjectiveSubsystem_StartTimedObjective final
{
public:
	class UObjectivesData*                        ObjectiveData;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectiveParts                               Part;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           IdentityTag;                                       // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InObjectiveTag;                                    // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimedObjectiveSubsystem_StartTimedObjective) == 0x000008, "Wrong alignment on TimedObjectiveSubsystem_StartTimedObjective");
static_assert(sizeof(TimedObjectiveSubsystem_StartTimedObjective) == 0x000020, "Wrong size on TimedObjectiveSubsystem_StartTimedObjective");
static_assert(offsetof(TimedObjectiveSubsystem_StartTimedObjective, ObjectiveData) == 0x000000, "Member 'TimedObjectiveSubsystem_StartTimedObjective::ObjectiveData' has a wrong offset!");
static_assert(offsetof(TimedObjectiveSubsystem_StartTimedObjective, Part) == 0x000008, "Member 'TimedObjectiveSubsystem_StartTimedObjective::Part' has a wrong offset!");
static_assert(offsetof(TimedObjectiveSubsystem_StartTimedObjective, Time) == 0x00000C, "Member 'TimedObjectiveSubsystem_StartTimedObjective::Time' has a wrong offset!");
static_assert(offsetof(TimedObjectiveSubsystem_StartTimedObjective, IdentityTag) == 0x000010, "Member 'TimedObjectiveSubsystem_StartTimedObjective::IdentityTag' has a wrong offset!");
static_assert(offsetof(TimedObjectiveSubsystem_StartTimedObjective, InObjectiveTag) == 0x000018, "Member 'TimedObjectiveSubsystem_StartTimedObjective::InObjectiveTag' has a wrong offset!");

// Function ObsidianFox.WeaponAnimationHandDataAsset.GetAnimationDataForCharacter
// 0x0058 (0x0058 - 0x0000)
struct WeaponAnimationHandDataAsset_GetAnimationDataForCharacter final
{
public:
	const class AOFPlayerCharacter*               Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeaponAnimationHandData               ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponAnimationHandDataAsset_GetAnimationDataForCharacter) == 0x000008, "Wrong alignment on WeaponAnimationHandDataAsset_GetAnimationDataForCharacter");
static_assert(sizeof(WeaponAnimationHandDataAsset_GetAnimationDataForCharacter) == 0x000058, "Wrong size on WeaponAnimationHandDataAsset_GetAnimationDataForCharacter");
static_assert(offsetof(WeaponAnimationHandDataAsset_GetAnimationDataForCharacter, Character) == 0x000000, "Member 'WeaponAnimationHandDataAsset_GetAnimationDataForCharacter::Character' has a wrong offset!");
static_assert(offsetof(WeaponAnimationHandDataAsset_GetAnimationDataForCharacter, ReturnValue) == 0x000008, "Member 'WeaponAnimationHandDataAsset_GetAnimationDataForCharacter::ReturnValue' has a wrong offset!");

// Function ObsidianFox.WeaponAnimInstance.StateTimeoutReached
// 0x000C (0x000C - 0x0000)
struct WeaponAnimInstance_StateTimeoutReached final
{
public:
	int32                                         MachineIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponAnimInstance_StateTimeoutReached) == 0x000004, "Wrong alignment on WeaponAnimInstance_StateTimeoutReached");
static_assert(sizeof(WeaponAnimInstance_StateTimeoutReached) == 0x00000C, "Wrong size on WeaponAnimInstance_StateTimeoutReached");
static_assert(offsetof(WeaponAnimInstance_StateTimeoutReached, MachineIndex) == 0x000000, "Member 'WeaponAnimInstance_StateTimeoutReached::MachineIndex' has a wrong offset!");
static_assert(offsetof(WeaponAnimInstance_StateTimeoutReached, Timeout) == 0x000004, "Member 'WeaponAnimInstance_StateTimeoutReached::Timeout' has a wrong offset!");
static_assert(offsetof(WeaponAnimInstance_StateTimeoutReached, ReturnValue) == 0x000008, "Member 'WeaponAnimInstance_StateTimeoutReached::ReturnValue' has a wrong offset!");

// Function ObsidianFox.WeaponAnimInstance.IsAttachedToSocket
// 0x000C (0x000C - 0x0000)
struct WeaponAnimInstance_IsAttachedToSocket final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponAnimInstance_IsAttachedToSocket) == 0x000004, "Wrong alignment on WeaponAnimInstance_IsAttachedToSocket");
static_assert(sizeof(WeaponAnimInstance_IsAttachedToSocket) == 0x00000C, "Wrong size on WeaponAnimInstance_IsAttachedToSocket");
static_assert(offsetof(WeaponAnimInstance_IsAttachedToSocket, SocketName) == 0x000000, "Member 'WeaponAnimInstance_IsAttachedToSocket::SocketName' has a wrong offset!");
static_assert(offsetof(WeaponAnimInstance_IsAttachedToSocket, ReturnValue) == 0x000008, "Member 'WeaponAnimInstance_IsAttachedToSocket::ReturnValue' has a wrong offset!");

// Function ObsidianFox.WeaponWidget.OnMonitoredWeaponDestroyed
// 0x0008 (0x0008 - 0x0000)
struct WeaponWidget_OnMonitoredWeaponDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponWidget_OnMonitoredWeaponDestroyed) == 0x000008, "Wrong alignment on WeaponWidget_OnMonitoredWeaponDestroyed");
static_assert(sizeof(WeaponWidget_OnMonitoredWeaponDestroyed) == 0x000008, "Wrong size on WeaponWidget_OnMonitoredWeaponDestroyed");
static_assert(offsetof(WeaponWidget_OnMonitoredWeaponDestroyed, DestroyedActor) == 0x000000, "Member 'WeaponWidget_OnMonitoredWeaponDestroyed::DestroyedActor' has a wrong offset!");

// Function ObsidianFox.WeaponWidget.OnMonitoredWeaponEquipped
// 0x0008 (0x0008 - 0x0000)
struct WeaponWidget_OnMonitoredWeaponEquipped final
{
public:
	class AOFWeaponActor*                         DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponWidget_OnMonitoredWeaponEquipped) == 0x000008, "Wrong alignment on WeaponWidget_OnMonitoredWeaponEquipped");
static_assert(sizeof(WeaponWidget_OnMonitoredWeaponEquipped) == 0x000008, "Wrong size on WeaponWidget_OnMonitoredWeaponEquipped");
static_assert(offsetof(WeaponWidget_OnMonitoredWeaponEquipped, DestroyedActor) == 0x000000, "Member 'WeaponWidget_OnMonitoredWeaponEquipped::DestroyedActor' has a wrong offset!");

// Function ObsidianFox.WeaponWidget.OnMonitoredWeaponUnequipped
// 0x0008 (0x0008 - 0x0000)
struct WeaponWidget_OnMonitoredWeaponUnequipped final
{
public:
	class AOFWeaponActor*                         DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponWidget_OnMonitoredWeaponUnequipped) == 0x000008, "Wrong alignment on WeaponWidget_OnMonitoredWeaponUnequipped");
static_assert(sizeof(WeaponWidget_OnMonitoredWeaponUnequipped) == 0x000008, "Wrong size on WeaponWidget_OnMonitoredWeaponUnequipped");
static_assert(offsetof(WeaponWidget_OnMonitoredWeaponUnequipped, DestroyedActor) == 0x000000, "Member 'WeaponWidget_OnMonitoredWeaponUnequipped::DestroyedActor' has a wrong offset!");

// Function ObsidianFox.WorldSubsystem_EQSPlayerValidPoints.SetNearbyPoints
// 0x0010 (0x0010 - 0x0000)
struct WorldSubsystem_EQSPlayerValidPoints_SetNearbyPoints final
{
public:
	TArray<struct FVector>                        Points;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldSubsystem_EQSPlayerValidPoints_SetNearbyPoints) == 0x000008, "Wrong alignment on WorldSubsystem_EQSPlayerValidPoints_SetNearbyPoints");
static_assert(sizeof(WorldSubsystem_EQSPlayerValidPoints_SetNearbyPoints) == 0x000010, "Wrong size on WorldSubsystem_EQSPlayerValidPoints_SetNearbyPoints");
static_assert(offsetof(WorldSubsystem_EQSPlayerValidPoints_SetNearbyPoints, Points) == 0x000000, "Member 'WorldSubsystem_EQSPlayerValidPoints_SetNearbyPoints::Points' has a wrong offset!");

// Function ObsidianFox.WorldSubsystem_EQSPlayerValidPoints.GetNearbyPoints
// 0x0010 (0x0010 - 0x0000)
struct WorldSubsystem_EQSPlayerValidPoints_GetNearbyPoints final
{
public:
	TArray<struct FVector>                        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldSubsystem_EQSPlayerValidPoints_GetNearbyPoints) == 0x000008, "Wrong alignment on WorldSubsystem_EQSPlayerValidPoints_GetNearbyPoints");
static_assert(sizeof(WorldSubsystem_EQSPlayerValidPoints_GetNearbyPoints) == 0x000010, "Wrong size on WorldSubsystem_EQSPlayerValidPoints_GetNearbyPoints");
static_assert(offsetof(WorldSubsystem_EQSPlayerValidPoints_GetNearbyPoints, ReturnValue) == 0x000000, "Member 'WorldSubsystem_EQSPlayerValidPoints_GetNearbyPoints::ReturnValue' has a wrong offset!");

// Function ObsidianFox.WorldSubsystem_MonsterManager.MonsterDisengaged
// 0x0008 (0x0008 - 0x0000)
struct WorldSubsystem_MonsterManager_MonsterDisengaged final
{
public:
	class AObsidianFoxCharacter*                  OFCharacter;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldSubsystem_MonsterManager_MonsterDisengaged) == 0x000008, "Wrong alignment on WorldSubsystem_MonsterManager_MonsterDisengaged");
static_assert(sizeof(WorldSubsystem_MonsterManager_MonsterDisengaged) == 0x000008, "Wrong size on WorldSubsystem_MonsterManager_MonsterDisengaged");
static_assert(offsetof(WorldSubsystem_MonsterManager_MonsterDisengaged, OFCharacter) == 0x000000, "Member 'WorldSubsystem_MonsterManager_MonsterDisengaged::OFCharacter' has a wrong offset!");

}

