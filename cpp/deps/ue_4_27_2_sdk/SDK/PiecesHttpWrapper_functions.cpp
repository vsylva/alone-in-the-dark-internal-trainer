#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PiecesHttpWrapper

#include "Basic.hpp"

#include "PiecesHttpWrapper_classes.hpp"
#include "PiecesHttpWrapper_parameters.hpp"


namespace SDK
{

// Function PiecesHttpWrapper.PiecesHttpWrapperFunctionLibrary.Request
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Verb                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      Headers                                                (Parm, NativeAccessSpecifierPublic)
// class FString                           Body                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Timeout                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 Status, const class FString& Body)>OnDone                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UPiecesHttpWrapperFunctionLibrary::Request(const class FString& URL, const class FString& Verb, const TMap<class FString, class FString>& Headers, const class FString& Body, float Timeout, const TDelegate<void(int32 Status, const class FString& Body)>& OnDone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PiecesHttpWrapperFunctionLibrary", "Request");

	Params::PiecesHttpWrapperFunctionLibrary_Request Parms{};

	Parms.URL = std::move(URL);
	Parms.Verb = std::move(Verb);
	Parms.Headers = std::move(Headers);
	Parms.Body = std::move(Body);
	Parms.Timeout = Timeout;
	Parms.OnDone = OnDone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction PiecesHttpWrapper.PiecesHttpWrapperFunctionLibrary.HttpRequestCompleteDelegate__DelegateSignature
// (Public, Delegate)
// Parameters:
// int32                                   Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Body                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPiecesHttpWrapperFunctionLibrary::HttpRequestCompleteDelegate__DelegateSignature(int32 Status, const class FString& Body)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesHttpWrapperFunctionLibrary", "HttpRequestCompleteDelegate__DelegateSignature");

	Params::PiecesHttpWrapperFunctionLibrary_HttpRequestCompleteDelegate__DelegateSignature Parms{};

	Parms.Status = Status;
	Parms.Body = std::move(Body);

	UObject::ProcessEvent(Func, &Parms);
}

}

