#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PiecesThirdPersonCamera

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "TemplateSequence_classes.hpp"
#include "PiecesUtils_structs.hpp"


namespace SDK
{

// Class PiecesThirdPersonCamera.ThirdPersonCameraModifier
// 0x0500 (0x0548 - 0x0048)
class UThirdPersonCameraModifier : public UCameraModifier
{
public:
	float                                         CooldownAfterPlayerInput;                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PawnFOV;                                           // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     PawnFOVCurve;                                      // 0x0050(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         SpringArmLength;                                   // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     SpringArmLengthCurve;                              // 0x00E0(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                RelativeTargetOffset;                              // 0x0168(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeVectorCurve                    RelativeTargetOffsetCurve;                         // 0x0178(0x0198)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                SocketOffset;                                      // 0x0310(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeVectorCurve                    SocketOffsetCurve;                                 // 0x0320(0x0198)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         CameraLagSpeed;                                    // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraRotationLagSpeed;                            // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraLagMaxDistance;                              // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_FOV_UseCurve : 1;                        // 0x04C4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_FOV : 1;                                 // 0x04C4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SpringArmLength_UseCurve : 1;            // 0x04C4(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SpringArmLength : 1;                     // 0x04C4(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RelativeTargetOffset_UseCurves : 1;      // 0x04C4(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_RelativeTargetOffset : 1;                // 0x04C4(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SocketOffset_UseCurves : 1;              // 0x04C4(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SocketOffset : 1;                        // 0x04C4(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CameraLagSpeed : 1;                      // 0x04C5(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CameraRotationLagSpeed : 1;              // 0x04C5(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_CameraLagMaxDistance : 1;                // 0x04C5(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAdditive_FOV : 1;                                 // 0x04C5(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAdditive_RelativeTargetOffset : 1;                // 0x04C5(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAdditive_SpringArmLength : 1;                     // 0x04C5(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAdditive_SocketOffset : 1;                        // 0x04C5(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAdditive_CameraLagSpeed : 1;                      // 0x04C5(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAdditive_CameraRotationLagSpeed : 1;              // 0x04C6(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAdditive_CameraLagMaxDistance : 1;                // 0x04C6(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4C7[0x1];                                      // 0x04C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            AlphaCurve;                                        // 0x04C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D0[0x78];                                     // 0x04D0(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SuppressModifier(const class UObject* SuppressLockOwner, bool ImmediateDisable);
	void UnSuppressModifier(const class UObject* SuppressLockOwner);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ThirdPersonCameraModifier">();
	}
	static class UThirdPersonCameraModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UThirdPersonCameraModifier>();
	}
};
static_assert(alignof(UThirdPersonCameraModifier) == 0x000008, "Wrong alignment on UThirdPersonCameraModifier");
static_assert(sizeof(UThirdPersonCameraModifier) == 0x000548, "Wrong size on UThirdPersonCameraModifier");
static_assert(offsetof(UThirdPersonCameraModifier, CooldownAfterPlayerInput) == 0x000048, "Member 'UThirdPersonCameraModifier::CooldownAfterPlayerInput' has a wrong offset!");
static_assert(offsetof(UThirdPersonCameraModifier, PawnFOV) == 0x00004C, "Member 'UThirdPersonCameraModifier::PawnFOV' has a wrong offset!");
static_assert(offsetof(UThirdPersonCameraModifier, PawnFOVCurve) == 0x000050, "Member 'UThirdPersonCameraModifier::PawnFOVCurve' has a wrong offset!");
static_assert(offsetof(UThirdPersonCameraModifier, SpringArmLength) == 0x0000D8, "Member 'UThirdPersonCameraModifier::SpringArmLength' has a wrong offset!");
static_assert(offsetof(UThirdPersonCameraModifier, SpringArmLengthCurve) == 0x0000E0, "Member 'UThirdPersonCameraModifier::SpringArmLengthCurve' has a wrong offset!");
static_assert(offsetof(UThirdPersonCameraModifier, RelativeTargetOffset) == 0x000168, "Member 'UThirdPersonCameraModifier::RelativeTargetOffset' has a wrong offset!");
static_assert(offsetof(UThirdPersonCameraModifier, RelativeTargetOffsetCurve) == 0x000178, "Member 'UThirdPersonCameraModifier::RelativeTargetOffsetCurve' has a wrong offset!");
static_assert(offsetof(UThirdPersonCameraModifier, SocketOffset) == 0x000310, "Member 'UThirdPersonCameraModifier::SocketOffset' has a wrong offset!");
static_assert(offsetof(UThirdPersonCameraModifier, SocketOffsetCurve) == 0x000320, "Member 'UThirdPersonCameraModifier::SocketOffsetCurve' has a wrong offset!");
static_assert(offsetof(UThirdPersonCameraModifier, CameraLagSpeed) == 0x0004B8, "Member 'UThirdPersonCameraModifier::CameraLagSpeed' has a wrong offset!");
static_assert(offsetof(UThirdPersonCameraModifier, CameraRotationLagSpeed) == 0x0004BC, "Member 'UThirdPersonCameraModifier::CameraRotationLagSpeed' has a wrong offset!");
static_assert(offsetof(UThirdPersonCameraModifier, CameraLagMaxDistance) == 0x0004C0, "Member 'UThirdPersonCameraModifier::CameraLagMaxDistance' has a wrong offset!");
static_assert(offsetof(UThirdPersonCameraModifier, AlphaCurve) == 0x0004C8, "Member 'UThirdPersonCameraModifier::AlphaCurve' has a wrong offset!");

// Class PiecesThirdPersonCamera.PTPCameraModifier_BoneTracker
// 0x0020 (0x0568 - 0x0548)
class UPTPCameraModifier_BoneTracker : public UThirdPersonCameraModifier
{
public:
	uint8                                         bShouldTrackBone : 1;                              // 0x0548(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCalculateOffsetBasedOnRefPose : 1;                // 0x0548(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_549[0x3];                                      // 0x0549(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x054C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AxisAlpha;                                         // 0x0554(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewMatrixSpringArmComponentBlend;                 // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_564[0x4];                                      // 0x0564(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PTPCameraModifier_BoneTracker">();
	}
	static class UPTPCameraModifier_BoneTracker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPTPCameraModifier_BoneTracker>();
	}
};
static_assert(alignof(UPTPCameraModifier_BoneTracker) == 0x000008, "Wrong alignment on UPTPCameraModifier_BoneTracker");
static_assert(sizeof(UPTPCameraModifier_BoneTracker) == 0x000568, "Wrong size on UPTPCameraModifier_BoneTracker");
static_assert(offsetof(UPTPCameraModifier_BoneTracker, BoneName) == 0x00054C, "Member 'UPTPCameraModifier_BoneTracker::BoneName' has a wrong offset!");
static_assert(offsetof(UPTPCameraModifier_BoneTracker, AxisAlpha) == 0x000554, "Member 'UPTPCameraModifier_BoneTracker::AxisAlpha' has a wrong offset!");
static_assert(offsetof(UPTPCameraModifier_BoneTracker, ViewMatrixSpringArmComponentBlend) == 0x000560, "Member 'UPTPCameraModifier_BoneTracker::ViewMatrixSpringArmComponentBlend' has a wrong offset!");

// Class PiecesThirdPersonCamera.PTPCameraModifier_PlayerVelocity
// 0x0008 (0x0550 - 0x0548)
class UPTPCameraModifier_PlayerVelocity final : public UThirdPersonCameraModifier
{
public:
	float                                         TopVelocity;                                       // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinVelocity;                                       // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PTPCameraModifier_PlayerVelocity">();
	}
	static class UPTPCameraModifier_PlayerVelocity* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPTPCameraModifier_PlayerVelocity>();
	}
};
static_assert(alignof(UPTPCameraModifier_PlayerVelocity) == 0x000008, "Wrong alignment on UPTPCameraModifier_PlayerVelocity");
static_assert(sizeof(UPTPCameraModifier_PlayerVelocity) == 0x000550, "Wrong size on UPTPCameraModifier_PlayerVelocity");
static_assert(offsetof(UPTPCameraModifier_PlayerVelocity, TopVelocity) == 0x000548, "Member 'UPTPCameraModifier_PlayerVelocity::TopVelocity' has a wrong offset!");
static_assert(offsetof(UPTPCameraModifier_PlayerVelocity, MinVelocity) == 0x00054C, "Member 'UPTPCameraModifier_PlayerVelocity::MinVelocity' has a wrong offset!");

// Class PiecesThirdPersonCamera.ThirdPersonPlayerCameraManager
// 0x0030 (0x2860 - 0x2830)
#pragma pack(push, 0x1)
class alignas(0x10) AThirdPersonPlayerCameraManager : public APlayerCameraManager
{
public:
	float                                         ZoomAlpha;                                         // 0x2830(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocusDistance;                                     // 0x2834(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FocusEndLocation;                                  // 0x2838(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFocusDistance;                                  // 0x2844(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             FocusDistanceTraceChannel;                         // 0x2848(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2849[0x7];                                     // 0x2849(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bShouldUpdateCameraWhenPaused : 1;                 // 0x2850(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_2851[0x7];                                     // 0x2851(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetZoomAlpha(float NewAlpha);
	void SuppressAllCameraModifiers(const class UObject* RequestingObject);
	void UnSuppressAllCameraModifiers(const class UObject* RequestingObject);

	TArray<class UCameraModifier*> GetModifierList() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ThirdPersonPlayerCameraManager">();
	}
	static class AThirdPersonPlayerCameraManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AThirdPersonPlayerCameraManager>();
	}
};
#pragma pack(pop)
static_assert(alignof(AThirdPersonPlayerCameraManager) == 0x000010, "Wrong alignment on AThirdPersonPlayerCameraManager");
static_assert(sizeof(AThirdPersonPlayerCameraManager) == 0x002860, "Wrong size on AThirdPersonPlayerCameraManager");
static_assert(offsetof(AThirdPersonPlayerCameraManager, ZoomAlpha) == 0x002830, "Member 'AThirdPersonPlayerCameraManager::ZoomAlpha' has a wrong offset!");
static_assert(offsetof(AThirdPersonPlayerCameraManager, FocusDistance) == 0x002834, "Member 'AThirdPersonPlayerCameraManager::FocusDistance' has a wrong offset!");
static_assert(offsetof(AThirdPersonPlayerCameraManager, FocusEndLocation) == 0x002838, "Member 'AThirdPersonPlayerCameraManager::FocusEndLocation' has a wrong offset!");
static_assert(offsetof(AThirdPersonPlayerCameraManager, MaxFocusDistance) == 0x002844, "Member 'AThirdPersonPlayerCameraManager::MaxFocusDistance' has a wrong offset!");
static_assert(offsetof(AThirdPersonPlayerCameraManager, FocusDistanceTraceChannel) == 0x002848, "Member 'AThirdPersonPlayerCameraManager::FocusDistanceTraceChannel' has a wrong offset!");

// Class PiecesThirdPersonCamera.CameraModifierTriggerBox
// 0x0060 (0x02A0 - 0x0240)
class ACameraModifierTriggerBox final : public ATriggerBox
{
public:
	TSet<TSubclassOf<class UCameraModifier>>      ModifiersToSuppress;                               // 0x0240(0x0050)(Edit, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_290[0x10];                                     // 0x0290(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraModifierTriggerBox">();
	}
	static class ACameraModifierTriggerBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACameraModifierTriggerBox>();
	}
};
static_assert(alignof(ACameraModifierTriggerBox) == 0x000008, "Wrong alignment on ACameraModifierTriggerBox");
static_assert(sizeof(ACameraModifierTriggerBox) == 0x0002A0, "Wrong size on ACameraModifierTriggerBox");
static_assert(offsetof(ACameraModifierTriggerBox, ModifiersToSuppress) == 0x000240, "Member 'ACameraModifierTriggerBox::ModifiersToSuppress' has a wrong offset!");

// Class PiecesThirdPersonCamera.CameraModifier_WalkDirection
// 0x0020 (0x0568 - 0x0548)
class UCameraModifier_WalkDirection : public UThirdPersonCameraModifier
{
public:
	class UCurveFloat*                            RotationSpeedCurve;                                // 0x0548(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RotationSpeed;                                     // 0x0550(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         DirectionChangeCooldown;                           // 0x0554(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bRotateOnlyWhilePawnIsMoving : 1;                  // 0x0558(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_559[0x3];                                      // 0x0559(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinPawnVelocity;                                   // 0x055C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_560[0x8];                                      // 0x0560(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraModifier_WalkDirection">();
	}
	static class UCameraModifier_WalkDirection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraModifier_WalkDirection>();
	}
};
static_assert(alignof(UCameraModifier_WalkDirection) == 0x000008, "Wrong alignment on UCameraModifier_WalkDirection");
static_assert(sizeof(UCameraModifier_WalkDirection) == 0x000568, "Wrong size on UCameraModifier_WalkDirection");
static_assert(offsetof(UCameraModifier_WalkDirection, RotationSpeedCurve) == 0x000548, "Member 'UCameraModifier_WalkDirection::RotationSpeedCurve' has a wrong offset!");
static_assert(offsetof(UCameraModifier_WalkDirection, RotationSpeed) == 0x000550, "Member 'UCameraModifier_WalkDirection::RotationSpeed' has a wrong offset!");
static_assert(offsetof(UCameraModifier_WalkDirection, DirectionChangeCooldown) == 0x000554, "Member 'UCameraModifier_WalkDirection::DirectionChangeCooldown' has a wrong offset!");
static_assert(offsetof(UCameraModifier_WalkDirection, MinPawnVelocity) == 0x00055C, "Member 'UCameraModifier_WalkDirection::MinPawnVelocity' has a wrong offset!");

// Class PiecesThirdPersonCamera.PiecesSequenceCameraShake
// 0x0018 (0x0070 - 0x0058)
class UPiecesSequenceCameraShake : public USequenceCameraShakePattern
{
public:
	struct FVector                                LocationScale;                                     // 0x0058(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               RotationScale;                                     // 0x0064(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesSequenceCameraShake">();
	}
	static class UPiecesSequenceCameraShake* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesSequenceCameraShake>();
	}
};
static_assert(alignof(UPiecesSequenceCameraShake) == 0x000008, "Wrong alignment on UPiecesSequenceCameraShake");
static_assert(sizeof(UPiecesSequenceCameraShake) == 0x000070, "Wrong size on UPiecesSequenceCameraShake");
static_assert(offsetof(UPiecesSequenceCameraShake, LocationScale) == 0x000058, "Member 'UPiecesSequenceCameraShake::LocationScale' has a wrong offset!");
static_assert(offsetof(UPiecesSequenceCameraShake, RotationScale) == 0x000064, "Member 'UPiecesSequenceCameraShake::RotationScale' has a wrong offset!");

// Class PiecesThirdPersonCamera.ThirdPersonSpringArmComponent
// 0x0050 (0x02E0 - 0x0290)
class UThirdPersonSpringArmComponent final : public USpringArmComponent
{
public:
	struct FVector                                RelativeTargetOffset;                              // 0x0290(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C[0x28];                                     // 0x029C(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         BitPad_2C4_0 : 1;                                  // 0x02C4(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bInvertYAxis : 1;                                  // 0x02C4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, SaveGame, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_2C5[0xB];                                      // 0x02C5(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         YAxisFlipInterpSpeed;                              // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         YAxisFlipInterpExponent;                           // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D8[0x8];                                      // 0x02D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InvertYAxis();
	void SetInvertYAxis(bool bFlipped);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ThirdPersonSpringArmComponent">();
	}
	static class UThirdPersonSpringArmComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UThirdPersonSpringArmComponent>();
	}
};
static_assert(alignof(UThirdPersonSpringArmComponent) == 0x000010, "Wrong alignment on UThirdPersonSpringArmComponent");
static_assert(sizeof(UThirdPersonSpringArmComponent) == 0x0002E0, "Wrong size on UThirdPersonSpringArmComponent");
static_assert(offsetof(UThirdPersonSpringArmComponent, RelativeTargetOffset) == 0x000290, "Member 'UThirdPersonSpringArmComponent::RelativeTargetOffset' has a wrong offset!");
static_assert(offsetof(UThirdPersonSpringArmComponent, YAxisFlipInterpSpeed) == 0x0002D0, "Member 'UThirdPersonSpringArmComponent::YAxisFlipInterpSpeed' has a wrong offset!");
static_assert(offsetof(UThirdPersonSpringArmComponent, YAxisFlipInterpExponent) == 0x0002D4, "Member 'UThirdPersonSpringArmComponent::YAxisFlipInterpExponent' has a wrong offset!");

}

