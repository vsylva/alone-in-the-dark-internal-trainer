#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_HitReaction

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "ObsidianFox_structs.hpp"
#include "SpecialHitReactions_structs.hpp"


namespace SDK::Params
{

// Function GA_HitReaction.GA_HitReaction_C.SpecialHitReactionMontageSelection
// 0x0038 (0x0038 - 0x0000)
struct GA_HitReaction_C_SpecialHitReactionMontageSelection final
{
public:
	class UHitReactionDataObject_C*               HitReactionData;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MontageSection;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESpecialHitReactions                          Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default;                             // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_HitReaction_C_SpecialHitReactionMontageSelection) == 0x000008, "Wrong alignment on GA_HitReaction_C_SpecialHitReactionMontageSelection");
static_assert(sizeof(GA_HitReaction_C_SpecialHitReactionMontageSelection) == 0x000038, "Wrong size on GA_HitReaction_C_SpecialHitReactionMontageSelection");
static_assert(offsetof(GA_HitReaction_C_SpecialHitReactionMontageSelection, HitReactionData) == 0x000000, "Member 'GA_HitReaction_C_SpecialHitReactionMontageSelection::HitReactionData' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_SpecialHitReactionMontageSelection, MontageSection) == 0x000008, "Member 'GA_HitReaction_C_SpecialHitReactionMontageSelection::MontageSection' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_SpecialHitReactionMontageSelection, Temp_byte_Variable) == 0x000010, "Member 'GA_HitReaction_C_SpecialHitReactionMontageSelection::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_SpecialHitReactionMontageSelection, Temp_name_Variable) == 0x000014, "Member 'GA_HitReaction_C_SpecialHitReactionMontageSelection::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_SpecialHitReactionMontageSelection, Temp_name_Variable_1) == 0x00001C, "Member 'GA_HitReaction_C_SpecialHitReactionMontageSelection::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_SpecialHitReactionMontageSelection, Temp_name_Variable_2) == 0x000024, "Member 'GA_HitReaction_C_SpecialHitReactionMontageSelection::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_SpecialHitReactionMontageSelection, K2Node_Select_Default) == 0x00002C, "Member 'GA_HitReaction_C_SpecialHitReactionMontageSelection::K2Node_Select_Default' has a wrong offset!");

// Function GA_HitReaction.GA_HitReaction_C.PlayLegacySpecialHitReaction
// 0x0040 (0x0040 - 0x0000)
struct GA_HitReaction_C_PlayLegacySpecialHitReaction final
{
public:
	class UHitReactionDataObject_C*               HitReactionDataObject;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_SpecialHitReactionGetMontage_Montage;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_SpecialHitReactionMontageSelection_MontageSection; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue; // 0x001C(0x0008)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponentFromActorInfo_ReturnValue; // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_Play_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_HitReaction_C_PlayLegacySpecialHitReaction) == 0x000008, "Wrong alignment on GA_HitReaction_C_PlayLegacySpecialHitReaction");
static_assert(sizeof(GA_HitReaction_C_PlayLegacySpecialHitReaction) == 0x000040, "Wrong size on GA_HitReaction_C_PlayLegacySpecialHitReaction");
static_assert(offsetof(GA_HitReaction_C_PlayLegacySpecialHitReaction, HitReactionDataObject) == 0x000000, "Member 'GA_HitReaction_C_PlayLegacySpecialHitReaction::HitReactionDataObject' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_PlayLegacySpecialHitReaction, CallFunc_SpecialHitReactionGetMontage_Montage) == 0x000008, "Member 'GA_HitReaction_C_PlayLegacySpecialHitReaction::CallFunc_SpecialHitReactionGetMontage_Montage' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_PlayLegacySpecialHitReaction, CallFunc_SpecialHitReactionMontageSelection_MontageSection) == 0x000010, "Member 'GA_HitReaction_C_PlayLegacySpecialHitReaction::CallFunc_SpecialHitReactionMontageSelection_MontageSection' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_PlayLegacySpecialHitReaction, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'GA_HitReaction_C_PlayLegacySpecialHitReaction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_PlayLegacySpecialHitReaction, CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue) == 0x00001C, "Member 'GA_HitReaction_C_PlayLegacySpecialHitReaction::CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_PlayLegacySpecialHitReaction, CallFunc_GetOwningComponentFromActorInfo_ReturnValue) == 0x000028, "Member 'GA_HitReaction_C_PlayLegacySpecialHitReaction::CallFunc_GetOwningComponentFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_PlayLegacySpecialHitReaction, CallFunc_GetAnimInstance_ReturnValue) == 0x000030, "Member 'GA_HitReaction_C_PlayLegacySpecialHitReaction::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_PlayLegacySpecialHitReaction, CallFunc_Montage_Play_ReturnValue) == 0x000038, "Member 'GA_HitReaction_C_PlayLegacySpecialHitReaction::CallFunc_Montage_Play_ReturnValue' has a wrong offset!");

// Function GA_HitReaction.GA_HitReaction_C.SpecialHitReactionGetMontage
// 0x0020 (0x0020 - 0x0000)
struct GA_HitReaction_C_SpecialHitReactionGetMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponentFromActorInfo_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameSubsystem_AnimationAssetManager*   CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_GetMontageForSkeletonBlockingLoad_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_HitReaction_C_SpecialHitReactionGetMontage) == 0x000008, "Wrong alignment on GA_HitReaction_C_SpecialHitReactionGetMontage");
static_assert(sizeof(GA_HitReaction_C_SpecialHitReactionGetMontage) == 0x000020, "Wrong size on GA_HitReaction_C_SpecialHitReactionGetMontage");
static_assert(offsetof(GA_HitReaction_C_SpecialHitReactionGetMontage, Montage) == 0x000000, "Member 'GA_HitReaction_C_SpecialHitReactionGetMontage::Montage' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_SpecialHitReactionGetMontage, CallFunc_GetOwningComponentFromActorInfo_ReturnValue) == 0x000008, "Member 'GA_HitReaction_C_SpecialHitReactionGetMontage::CallFunc_GetOwningComponentFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_SpecialHitReactionGetMontage, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000010, "Member 'GA_HitReaction_C_SpecialHitReactionGetMontage::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_SpecialHitReactionGetMontage, CallFunc_GetMontageForSkeletonBlockingLoad_ReturnValue) == 0x000018, "Member 'GA_HitReaction_C_SpecialHitReactionGetMontage::CallFunc_GetMontageForSkeletonBlockingLoad_ReturnValue' has a wrong offset!");

// Function GA_HitReaction.GA_HitReaction_C.TriggerOnHitForAnimInstance
// 0x01B8 (0x01B8 - 0x0000)
struct GA_HitReaction_C_TriggerOnHitForAnimInstance final
{
public:
	struct FHitReactionData                       HitReactionData;                                   // 0x0000(0x00E0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	struct FGameplayEventData                     EventData;                                         // 0x00E0(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          CallFunc_IsAvatarDead_ReturnValue;                 // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IAnimInterface>        K2Node_DynamicCast_AsAnim_Interface;               // 0x01A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_HitReaction_C_TriggerOnHitForAnimInstance) == 0x000008, "Wrong alignment on GA_HitReaction_C_TriggerOnHitForAnimInstance");
static_assert(sizeof(GA_HitReaction_C_TriggerOnHitForAnimInstance) == 0x0001B8, "Wrong size on GA_HitReaction_C_TriggerOnHitForAnimInstance");
static_assert(offsetof(GA_HitReaction_C_TriggerOnHitForAnimInstance, HitReactionData) == 0x000000, "Member 'GA_HitReaction_C_TriggerOnHitForAnimInstance::HitReactionData' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_TriggerOnHitForAnimInstance, EventData) == 0x0000E0, "Member 'GA_HitReaction_C_TriggerOnHitForAnimInstance::EventData' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_TriggerOnHitForAnimInstance, CallFunc_IsAvatarDead_ReturnValue) == 0x000190, "Member 'GA_HitReaction_C_TriggerOnHitForAnimInstance::CallFunc_IsAvatarDead_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_TriggerOnHitForAnimInstance, CallFunc_GetAnimInstance_ReturnValue) == 0x000198, "Member 'GA_HitReaction_C_TriggerOnHitForAnimInstance::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_TriggerOnHitForAnimInstance, K2Node_DynamicCast_AsAnim_Interface) == 0x0001A0, "Member 'GA_HitReaction_C_TriggerOnHitForAnimInstance::K2Node_DynamicCast_AsAnim_Interface' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_TriggerOnHitForAnimInstance, K2Node_DynamicCast_bSuccess) == 0x0001B0, "Member 'GA_HitReaction_C_TriggerOnHitForAnimInstance::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function GA_HitReaction.GA_HitReaction_C.OnActorHit
// 0x0100 (0x0100 - 0x0000)
struct GA_HitReaction_C_OnActorHit final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HitBone;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitDirection;                                      // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECardinalDirection                            HitQuadrant;                                       // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitStrength;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitForce;                                          // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                SpecialHitReactionData;                            // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  InstigatorTags;                                    // 0x0030(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FGameplayEventData                     HitReactionGameplayData;                           // 0x0050(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GA_HitReaction_C_OnActorHit) == 0x000008, "Wrong alignment on GA_HitReaction_C_OnActorHit");
static_assert(sizeof(GA_HitReaction_C_OnActorHit) == 0x000100, "Wrong size on GA_HitReaction_C_OnActorHit");
static_assert(offsetof(GA_HitReaction_C_OnActorHit, Mesh) == 0x000000, "Member 'GA_HitReaction_C_OnActorHit::Mesh' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_OnActorHit, HitBone) == 0x000008, "Member 'GA_HitReaction_C_OnActorHit::HitBone' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_OnActorHit, HitDirection) == 0x000010, "Member 'GA_HitReaction_C_OnActorHit::HitDirection' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_OnActorHit, HitQuadrant) == 0x00001C, "Member 'GA_HitReaction_C_OnActorHit::HitQuadrant' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_OnActorHit, HitStrength) == 0x000020, "Member 'GA_HitReaction_C_OnActorHit::HitStrength' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_OnActorHit, HitForce) == 0x000024, "Member 'GA_HitReaction_C_OnActorHit::HitForce' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_OnActorHit, SpecialHitReactionData) == 0x000028, "Member 'GA_HitReaction_C_OnActorHit::SpecialHitReactionData' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_OnActorHit, InstigatorTags) == 0x000030, "Member 'GA_HitReaction_C_OnActorHit::InstigatorTags' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_OnActorHit, HitReactionGameplayData) == 0x000050, "Member 'GA_HitReaction_C_OnActorHit::HitReactionGameplayData' has a wrong offset!");

// Function GA_HitReaction.GA_HitReaction_C.OnInterrupted_79DFE6CD4CA7564CDB53F39D3AC71CD9
// 0x0001 (0x0001 - 0x0000)
struct GA_HitReaction_C_OnInterrupted_79DFE6CD4CA7564CDB53F39D3AC71CD9 final
{
public:
	EHitReactionType                              HitReactionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_HitReaction_C_OnInterrupted_79DFE6CD4CA7564CDB53F39D3AC71CD9) == 0x000001, "Wrong alignment on GA_HitReaction_C_OnInterrupted_79DFE6CD4CA7564CDB53F39D3AC71CD9");
static_assert(sizeof(GA_HitReaction_C_OnInterrupted_79DFE6CD4CA7564CDB53F39D3AC71CD9) == 0x000001, "Wrong size on GA_HitReaction_C_OnInterrupted_79DFE6CD4CA7564CDB53F39D3AC71CD9");
static_assert(offsetof(GA_HitReaction_C_OnInterrupted_79DFE6CD4CA7564CDB53F39D3AC71CD9, HitReactionType) == 0x000000, "Member 'GA_HitReaction_C_OnInterrupted_79DFE6CD4CA7564CDB53F39D3AC71CD9::HitReactionType' has a wrong offset!");

// Function GA_HitReaction.GA_HitReaction_C.OnCompleted_79DFE6CD4CA7564CDB53F39D3AC71CD9
// 0x0001 (0x0001 - 0x0000)
struct GA_HitReaction_C_OnCompleted_79DFE6CD4CA7564CDB53F39D3AC71CD9 final
{
public:
	EHitReactionType                              HitReactionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_HitReaction_C_OnCompleted_79DFE6CD4CA7564CDB53F39D3AC71CD9) == 0x000001, "Wrong alignment on GA_HitReaction_C_OnCompleted_79DFE6CD4CA7564CDB53F39D3AC71CD9");
static_assert(sizeof(GA_HitReaction_C_OnCompleted_79DFE6CD4CA7564CDB53F39D3AC71CD9) == 0x000001, "Wrong size on GA_HitReaction_C_OnCompleted_79DFE6CD4CA7564CDB53F39D3AC71CD9");
static_assert(offsetof(GA_HitReaction_C_OnCompleted_79DFE6CD4CA7564CDB53F39D3AC71CD9, HitReactionType) == 0x000000, "Member 'GA_HitReaction_C_OnCompleted_79DFE6CD4CA7564CDB53F39D3AC71CD9::HitReactionType' has a wrong offset!");

// Function GA_HitReaction.GA_HitReaction_C.OnReactionBegin_79DFE6CD4CA7564CDB53F39D3AC71CD9
// 0x0001 (0x0001 - 0x0000)
struct GA_HitReaction_C_OnReactionBegin_79DFE6CD4CA7564CDB53F39D3AC71CD9 final
{
public:
	EHitReactionType                              HitReactionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_HitReaction_C_OnReactionBegin_79DFE6CD4CA7564CDB53F39D3AC71CD9) == 0x000001, "Wrong alignment on GA_HitReaction_C_OnReactionBegin_79DFE6CD4CA7564CDB53F39D3AC71CD9");
static_assert(sizeof(GA_HitReaction_C_OnReactionBegin_79DFE6CD4CA7564CDB53F39D3AC71CD9) == 0x000001, "Wrong size on GA_HitReaction_C_OnReactionBegin_79DFE6CD4CA7564CDB53F39D3AC71CD9");
static_assert(offsetof(GA_HitReaction_C_OnReactionBegin_79DFE6CD4CA7564CDB53F39D3AC71CD9, HitReactionType) == 0x000000, "Member 'GA_HitReaction_C_OnReactionBegin_79DFE6CD4CA7564CDB53F39D3AC71CD9::HitReactionType' has a wrong offset!");

// Function GA_HitReaction.GA_HitReaction_C.OnFailed_79DFE6CD4CA7564CDB53F39D3AC71CD9
// 0x0001 (0x0001 - 0x0000)
struct GA_HitReaction_C_OnFailed_79DFE6CD4CA7564CDB53F39D3AC71CD9 final
{
public:
	EHitReactionType                              HitReactionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_HitReaction_C_OnFailed_79DFE6CD4CA7564CDB53F39D3AC71CD9) == 0x000001, "Wrong alignment on GA_HitReaction_C_OnFailed_79DFE6CD4CA7564CDB53F39D3AC71CD9");
static_assert(sizeof(GA_HitReaction_C_OnFailed_79DFE6CD4CA7564CDB53F39D3AC71CD9) == 0x000001, "Wrong size on GA_HitReaction_C_OnFailed_79DFE6CD4CA7564CDB53F39D3AC71CD9");
static_assert(offsetof(GA_HitReaction_C_OnFailed_79DFE6CD4CA7564CDB53F39D3AC71CD9, HitReactionType) == 0x000000, "Member 'GA_HitReaction_C_OnFailed_79DFE6CD4CA7564CDB53F39D3AC71CD9::HitReactionType' has a wrong offset!");

// Function GA_HitReaction.GA_HitReaction_C.K2_ActivateAbilityFromEvent
// 0x00B0 (0x00B0 - 0x0000)
struct GA_HitReaction_C_K2_ActivateAbilityFromEvent final
{
public:
	struct FGameplayEventData                     EventData;                                         // 0x0000(0x00B0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GA_HitReaction_C_K2_ActivateAbilityFromEvent) == 0x000008, "Wrong alignment on GA_HitReaction_C_K2_ActivateAbilityFromEvent");
static_assert(sizeof(GA_HitReaction_C_K2_ActivateAbilityFromEvent) == 0x0000B0, "Wrong size on GA_HitReaction_C_K2_ActivateAbilityFromEvent");
static_assert(offsetof(GA_HitReaction_C_K2_ActivateAbilityFromEvent, EventData) == 0x000000, "Member 'GA_HitReaction_C_K2_ActivateAbilityFromEvent::EventData' has a wrong offset!");

// Function GA_HitReaction.GA_HitReaction_C.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct GA_HitReaction_C_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_HitReaction_C_K2_OnEndAbility) == 0x000001, "Wrong alignment on GA_HitReaction_C_K2_OnEndAbility");
static_assert(sizeof(GA_HitReaction_C_K2_OnEndAbility) == 0x000001, "Wrong size on GA_HitReaction_C_K2_OnEndAbility");
static_assert(offsetof(GA_HitReaction_C_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'GA_HitReaction_C_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// Function GA_HitReaction.GA_HitReaction_C.Handle Hit Reaction
// 0x0190 (0x0190 - 0x0000)
struct GA_HitReaction_C_Handle_Hit_Reaction final
{
public:
	struct FHitReactionData                       HitReactionData;                                   // 0x0000(0x00E0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	struct FGameplayEventData                     GameplayEventData;                                 // 0x00E0(0x00B0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GA_HitReaction_C_Handle_Hit_Reaction) == 0x000008, "Wrong alignment on GA_HitReaction_C_Handle_Hit_Reaction");
static_assert(sizeof(GA_HitReaction_C_Handle_Hit_Reaction) == 0x000190, "Wrong size on GA_HitReaction_C_Handle_Hit_Reaction");
static_assert(offsetof(GA_HitReaction_C_Handle_Hit_Reaction, HitReactionData) == 0x000000, "Member 'GA_HitReaction_C_Handle_Hit_Reaction::HitReactionData' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Handle_Hit_Reaction, GameplayEventData) == 0x0000E0, "Member 'GA_HitReaction_C_Handle_Hit_Reaction::GameplayEventData' has a wrong offset!");

// Function GA_HitReaction.GA_HitReaction_C.ExecuteUbergraph_GA_HitReaction
// 0x03F8 (0x03F8 - 0x0000)
struct GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              K2Node_CustomEvent_HitReactionType;                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            Temp_class_Variable;                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            Temp_class_Variable_1;                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            Temp_class_Variable_2;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            Temp_class_Variable_3;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            Temp_class_Variable_4;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FGameplayEventData                     K2Node_Event_EventData;                            // 0x0030(0x00B0)(ConstParm)
	struct FHitReactionData                       CallFunc_GetHitReactionData_HitReactionData;       // 0x00E0(0x00E0)(ContainsInstancedReference)
	bool                                          CallFunc_GetHitReactionData_ReturnValue;           // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_CommitAbility_ReturnValue;             // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bWasCancelled;                        // 0x01C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHitReactionComponent*                  CallFunc_GetHitReactionComponent_Comp;             // 0x01C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EHitReactionType HitReactionType)> K2Node_CreateDelegate_OutputDelegate;              // 0x01D0(0x0010)(ZeroConstructor, NoDestructor)
	EHitReactionType                              K2Node_CustomEvent_HitReactionType_1;              // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E1[0x7];                                      // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitReactionData                       K2Node_CustomEvent_HitReactionData;                // 0x01E8(0x00E0)(ContainsInstancedReference)
	struct FGameplayEventData                     K2Node_CustomEvent_GameplayEventData;              // 0x02C8(0x00B0)(ConstParm)
	EHitReactionType                              CallFunc_Evaluate_Hit_Reaction_And_Apply_Hardiness_EvaluatedHitReaction; // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBPAsyncAction_HitReaction*             CallFunc_PlayHitReaction_ReturnValue;              // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            K2Node_Select_Default;                             // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue; // 0x0390(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_399[0x7];                                      // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHitReactionDataObject_C*               K2Node_DynamicCast_AsHit_Reaction_Data_Object;     // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A9[0x3];                                      // 0x03A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EHitReactionType HitReactionType)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x03AC(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x03BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x03BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAvatarDead_ReturnValue;                 // 0x03BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x03BF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHitReactionType                              K2Node_CustomEvent_HitReactionType_2;              // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C1[0x3];                                      // 0x03C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EHitReactionType HitReactionType)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x03C4(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHitReactionComponent*                  CallFunc_GetHitReactionComponent_Comp_1;           // 0x03D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x03E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHitReactionType                              K2Node_CustomEvent_HitReactionType_3;              // 0x03E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E2[0x2];                                      // 0x03E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EHitReactionType HitReactionType)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x03E4(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction) == 0x000008, "Wrong alignment on GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction");
static_assert(sizeof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction) == 0x0003F8, "Wrong size on GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, EntryPoint) == 0x000000, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, K2Node_CustomEvent_HitReactionType) == 0x000004, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::K2Node_CustomEvent_HitReactionType' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, Temp_byte_Variable) == 0x000005, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, Temp_byte_Variable_1) == 0x000006, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, Temp_class_Variable) == 0x000008, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, Temp_class_Variable_1) == 0x000010, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::Temp_class_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, Temp_class_Variable_2) == 0x000018, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::Temp_class_Variable_2' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, Temp_class_Variable_3) == 0x000020, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::Temp_class_Variable_3' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, Temp_class_Variable_4) == 0x000028, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::Temp_class_Variable_4' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, K2Node_Event_EventData) == 0x000030, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::K2Node_Event_EventData' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, CallFunc_GetHitReactionData_HitReactionData) == 0x0000E0, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::CallFunc_GetHitReactionData_HitReactionData' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, CallFunc_GetHitReactionData_ReturnValue) == 0x0001C0, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::CallFunc_GetHitReactionData_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, CallFunc_K2_CommitAbility_ReturnValue) == 0x0001C1, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::CallFunc_K2_CommitAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, CallFunc_BooleanAND_ReturnValue) == 0x0001C2, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, K2Node_Event_bWasCancelled) == 0x0001C3, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::K2Node_Event_bWasCancelled' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, CallFunc_GetHitReactionComponent_Comp) == 0x0001C8, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::CallFunc_GetHitReactionComponent_Comp' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, K2Node_CreateDelegate_OutputDelegate) == 0x0001D0, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, K2Node_CustomEvent_HitReactionType_1) == 0x0001E0, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::K2Node_CustomEvent_HitReactionType_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, K2Node_CustomEvent_HitReactionData) == 0x0001E8, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::K2Node_CustomEvent_HitReactionData' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, K2Node_CustomEvent_GameplayEventData) == 0x0002C8, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::K2Node_CustomEvent_GameplayEventData' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, CallFunc_Evaluate_Hit_Reaction_And_Apply_Hardiness_EvaluatedHitReaction) == 0x000378, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::CallFunc_Evaluate_Hit_Reaction_And_Apply_Hardiness_EvaluatedHitReaction' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, CallFunc_PlayHitReaction_ReturnValue) == 0x000380, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::CallFunc_PlayHitReaction_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, K2Node_Select_Default) == 0x000388, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue) == 0x000390, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, CallFunc_IsValid_ReturnValue) == 0x000398, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, K2Node_DynamicCast_AsHit_Reaction_Data_Object) == 0x0003A0, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::K2Node_DynamicCast_AsHit_Reaction_Data_Object' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, K2Node_DynamicCast_bSuccess) == 0x0003A8, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, K2Node_CreateDelegate_OutputDelegate_1) == 0x0003AC, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0003BC, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, CallFunc_BooleanAND_ReturnValue_1) == 0x0003BD, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, CallFunc_IsAvatarDead_ReturnValue) == 0x0003BE, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::CallFunc_IsAvatarDead_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, CallFunc_Not_PreBool_ReturnValue) == 0x0003BF, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, K2Node_CustomEvent_HitReactionType_2) == 0x0003C0, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::K2Node_CustomEvent_HitReactionType_2' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, K2Node_CreateDelegate_OutputDelegate_2) == 0x0003C4, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, CallFunc_GetHitReactionComponent_Comp_1) == 0x0003D8, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::CallFunc_GetHitReactionComponent_Comp_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, CallFunc_IsValid_ReturnValue_1) == 0x0003E0, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, K2Node_CustomEvent_HitReactionType_3) == 0x0003E1, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::K2Node_CustomEvent_HitReactionType_3' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction, K2Node_CreateDelegate_OutputDelegate_3) == 0x0003E4, "Member 'GA_HitReaction_C_ExecuteUbergraph_GA_HitReaction::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");

// Function GA_HitReaction.GA_HitReaction_C.Evaluate Hit Reaction And Apply Hardiness
// 0x0288 (0x0288 - 0x0000)
struct GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness final
{
public:
	struct FGameplayEventData                     GameplayEventData;                                 // 0x0000(0x00B0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	EHitReactionType                              EvaluatedHitReaction;                              // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              DesiredHitReaction;                                // 0x00B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            HardinessGameplayEffectBySource;                   // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_EffectContextGetSourceObject_ReturnValue; // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHitReactionDataObject_C*               K2Node_DynamicCast_AsHit_Reaction_Data_Object;     // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMeleeWeaponActor*                      K2Node_DynamicCast_AsMelee_Weapon_Actor;           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AHitscanWeaponActor*                    K2Node_DynamicCast_AsHitscan_Weapon_Actor;         // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHitReactionType                              CallFunc_DowngradeHitReactionType_ReturnValue;     // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FA[0x2];                                       // 0x00FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue; // 0x00FC(0x0008)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue; // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectQuery                   K2Node_MakeStruct_GameplayEffectQuery;             // 0x0110(0x0150)(ContainsInstancedReference)
	TArray<struct FActiveGameplayEffectHandle>    CallFunc_GetActiveEffects_ReturnValue;             // 0x0260(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_Array_Get_Item;                           // 0x0274(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActiveGameplayEffectStackCount_ReturnValue; // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0284(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHitReactionType                              K2Node_Select_Default;                             // 0x0285(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness) == 0x000008, "Wrong alignment on GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness");
static_assert(sizeof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness) == 0x000288, "Wrong size on GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, GameplayEventData) == 0x000000, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::GameplayEventData' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, EvaluatedHitReaction) == 0x0000B0, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::EvaluatedHitReaction' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, DesiredHitReaction) == 0x0000B1, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::DesiredHitReaction' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, HardinessGameplayEffectBySource) == 0x0000B8, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::HardinessGameplayEffectBySource' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, Temp_bool_Variable) == 0x0000C0, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, CallFunc_EffectContextGetSourceObject_ReturnValue) == 0x0000C8, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::CallFunc_EffectContextGetSourceObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, K2Node_DynamicCast_AsHit_Reaction_Data_Object) == 0x0000D0, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::K2Node_DynamicCast_AsHit_Reaction_Data_Object' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, K2Node_DynamicCast_bSuccess) == 0x0000D8, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, K2Node_DynamicCast_AsMelee_Weapon_Actor) == 0x0000E0, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::K2Node_DynamicCast_AsMelee_Weapon_Actor' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, K2Node_DynamicCast_bSuccess_1) == 0x0000E8, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, CallFunc_Not_PreBool_ReturnValue) == 0x0000E9, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, K2Node_DynamicCast_AsHitscan_Weapon_Actor) == 0x0000F0, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::K2Node_DynamicCast_AsHitscan_Weapon_Actor' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, K2Node_DynamicCast_bSuccess_2) == 0x0000F8, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, CallFunc_DowngradeHitReactionType_ReturnValue) == 0x0000F9, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::CallFunc_DowngradeHitReactionType_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue) == 0x0000FC, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue) == 0x000108, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, K2Node_MakeStruct_GameplayEffectQuery) == 0x000110, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::K2Node_MakeStruct_GameplayEffectQuery' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, CallFunc_GetActiveEffects_ReturnValue) == 0x000260, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::CallFunc_GetActiveEffects_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, CallFunc_Array_Length_ReturnValue) == 0x000270, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, CallFunc_Array_Get_Item) == 0x000274, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, CallFunc_Greater_IntInt_ReturnValue) == 0x00027C, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, CallFunc_GetActiveGameplayEffectStackCount_ReturnValue) == 0x000280, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::CallFunc_GetActiveGameplayEffectStackCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000284, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, K2Node_Select_Default) == 0x000285, "Member 'GA_HitReaction_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::K2Node_Select_Default' has a wrong offset!");

// Function GA_HitReaction.GA_HitReaction_C.Fallback Old Reaction
// 0x01A8 (0x01A8 - 0x0000)
struct GA_HitReaction_C_Fallback_Old_Reaction final
{
public:
	struct FHitReactionData                       HitReactionData;                                   // 0x0000(0x00E0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	struct FGameplayEventData                     HitReactionGameplayData;                           // 0x00E0(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_BuildString_Object_ReturnValue;           // 0x0198(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_HitReaction_C_Fallback_Old_Reaction) == 0x000008, "Wrong alignment on GA_HitReaction_C_Fallback_Old_Reaction");
static_assert(sizeof(GA_HitReaction_C_Fallback_Old_Reaction) == 0x0001A8, "Wrong size on GA_HitReaction_C_Fallback_Old_Reaction");
static_assert(offsetof(GA_HitReaction_C_Fallback_Old_Reaction, HitReactionData) == 0x000000, "Member 'GA_HitReaction_C_Fallback_Old_Reaction::HitReactionData' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Fallback_Old_Reaction, HitReactionGameplayData) == 0x0000E0, "Member 'GA_HitReaction_C_Fallback_Old_Reaction::HitReactionGameplayData' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Fallback_Old_Reaction, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000190, "Member 'GA_HitReaction_C_Fallback_Old_Reaction::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Fallback_Old_Reaction, CallFunc_BuildString_Object_ReturnValue) == 0x000198, "Member 'GA_HitReaction_C_Fallback_Old_Reaction::CallFunc_BuildString_Object_ReturnValue' has a wrong offset!");

// Function GA_HitReaction.GA_HitReaction_C.Dismemberment
// 0x0100 (0x0100 - 0x0000)
struct GA_HitReaction_C_Dismemberment final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         HitMagnitude;                                      // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAvatarDead_ReturnValue;                 // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyCommon_C>    K2Node_DynamicCast_AsBPI_Enemy_Common;             // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_EnemyCommon_C>    K2Node_DynamicCast_AsBPI_Enemy_Common_1;           // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetHasDeathReactionHappened_HasDied;      // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponentFromActorInfo_ReturnValue; // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IDismembermentInterface> K2Node_DynamicCast_AsDismemberment_Interface;      // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_HitReaction_C_Dismemberment) == 0x000008, "Wrong alignment on GA_HitReaction_C_Dismemberment");
static_assert(sizeof(GA_HitReaction_C_Dismemberment) == 0x000100, "Wrong size on GA_HitReaction_C_Dismemberment");
static_assert(offsetof(GA_HitReaction_C_Dismemberment, Hit) == 0x000000, "Member 'GA_HitReaction_C_Dismemberment::Hit' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Dismemberment, HitMagnitude) == 0x000088, "Member 'GA_HitReaction_C_Dismemberment::HitMagnitude' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Dismemberment, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000090, "Member 'GA_HitReaction_C_Dismemberment::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Dismemberment, CallFunc_IsAvatarDead_ReturnValue) == 0x000098, "Member 'GA_HitReaction_C_Dismemberment::CallFunc_IsAvatarDead_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Dismemberment, K2Node_DynamicCast_AsBPI_Enemy_Common) == 0x0000A0, "Member 'GA_HitReaction_C_Dismemberment::K2Node_DynamicCast_AsBPI_Enemy_Common' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Dismemberment, K2Node_DynamicCast_bSuccess) == 0x0000B0, "Member 'GA_HitReaction_C_Dismemberment::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Dismemberment, K2Node_DynamicCast_AsBPI_Enemy_Common_1) == 0x0000B8, "Member 'GA_HitReaction_C_Dismemberment::K2Node_DynamicCast_AsBPI_Enemy_Common_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Dismemberment, K2Node_DynamicCast_bSuccess_1) == 0x0000C8, "Member 'GA_HitReaction_C_Dismemberment::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Dismemberment, CallFunc_IsValid_ReturnValue) == 0x0000C9, "Member 'GA_HitReaction_C_Dismemberment::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Dismemberment, CallFunc_GetHasDeathReactionHappened_HasDied) == 0x0000CA, "Member 'GA_HitReaction_C_Dismemberment::CallFunc_GetHasDeathReactionHappened_HasDied' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Dismemberment, CallFunc_Not_PreBool_ReturnValue) == 0x0000CB, "Member 'GA_HitReaction_C_Dismemberment::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Dismemberment, CallFunc_GetOwningComponentFromActorInfo_ReturnValue) == 0x0000D0, "Member 'GA_HitReaction_C_Dismemberment::CallFunc_GetOwningComponentFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Dismemberment, CallFunc_BooleanAND_ReturnValue) == 0x0000D8, "Member 'GA_HitReaction_C_Dismemberment::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Dismemberment, CallFunc_GetAnimInstance_ReturnValue) == 0x0000E0, "Member 'GA_HitReaction_C_Dismemberment::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Dismemberment, K2Node_DynamicCast_AsDismemberment_Interface) == 0x0000E8, "Member 'GA_HitReaction_C_Dismemberment::K2Node_DynamicCast_AsDismemberment_Interface' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Dismemberment, K2Node_DynamicCast_bSuccess_2) == 0x0000F8, "Member 'GA_HitReaction_C_Dismemberment::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function GA_HitReaction.GA_HitReaction_C.Print Hit Data Debug
// 0x02C8 (0x02C8 - 0x0000)
struct GA_HitReaction_C_Print_Hit_Data_Debug final
{
public:
	struct FGameplayEventData                     GameplayEventData;                                 // 0x0000(0x00B0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UHitReactionDataObject_C*               K2Node_DynamicCast_AsHit_Reaction_Data_Object;     // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDebugStringFromGameplayTagContainer_ReturnValue; // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_EffectContextGetHitResult_ReturnValue;    // 0x0110(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x019A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19B[0x1];                                      // 0x019B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0204(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0210(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21C[0x4];                                      // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_SelectString_ReturnValue;                 // 0x0220(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1; // 0x0230(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_EffectContextGetOriginalInstigatorActor_ReturnValue; // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_EffectContextGetEffectCauser_ReturnValue; // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_EffectContextGetSourceObject_ReturnValue; // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_BuildString_Object_ReturnValue;           // 0x0258(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_BuildString_Object_ReturnValue_1;         // 0x0268(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_BuildString_Object_ReturnValue_2;         // 0x0278(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_BuildString_Name_ReturnValue;             // 0x0288(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0298(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x02A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x02B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_HitReaction_C_Print_Hit_Data_Debug) == 0x000008, "Wrong alignment on GA_HitReaction_C_Print_Hit_Data_Debug");
static_assert(sizeof(GA_HitReaction_C_Print_Hit_Data_Debug) == 0x0002C8, "Wrong size on GA_HitReaction_C_Print_Hit_Data_Debug");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, GameplayEventData) == 0x000000, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::GameplayEventData' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, K2Node_DynamicCast_AsHit_Reaction_Data_Object) == 0x0000B0, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::K2Node_DynamicCast_AsHit_Reaction_Data_Object' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_GetDebugStringFromGameplayTagContainer_ReturnValue) == 0x0000C0, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_GetDebugStringFromGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_Concat_StrStr_ReturnValue) == 0x0000D0, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x0000E0, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000F0, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000100, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_EffectContextGetHitResult_ReturnValue) == 0x000110, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_EffectContextGetHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000198, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_BreakHitResult_bBlockingHit) == 0x000199, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_BreakHitResult_bInitialOverlap) == 0x00019A, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_BreakHitResult_Time) == 0x00019C, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_BreakHitResult_Distance) == 0x0001A0, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_BreakHitResult_Location) == 0x0001A4, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_BreakHitResult_ImpactPoint) == 0x0001B0, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_BreakHitResult_Normal) == 0x0001BC, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_BreakHitResult_ImpactNormal) == 0x0001C8, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_BreakHitResult_PhysMat) == 0x0001D8, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_BreakHitResult_HitActor) == 0x0001E0, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_BreakHitResult_HitComponent) == 0x0001E8, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_BreakHitResult_HitBoneName) == 0x0001F0, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_BreakHitResult_HitItem) == 0x0001F8, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_BreakHitResult_ElementIndex) == 0x0001FC, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_BreakHitResult_FaceIndex) == 0x000200, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_BreakHitResult_TraceStart) == 0x000204, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_BreakHitResult_TraceEnd) == 0x000210, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_SelectString_ReturnValue) == 0x000220, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_SelectString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1) == 0x000230, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_EffectContextGetOriginalInstigatorActor_ReturnValue) == 0x000240, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_EffectContextGetOriginalInstigatorActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_EffectContextGetEffectCauser_ReturnValue) == 0x000248, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_EffectContextGetEffectCauser_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_EffectContextGetSourceObject_ReturnValue) == 0x000250, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_EffectContextGetSourceObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_BuildString_Object_ReturnValue) == 0x000258, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_BuildString_Object_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_BuildString_Object_ReturnValue_1) == 0x000268, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_BuildString_Object_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_BuildString_Object_ReturnValue_2) == 0x000278, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_BuildString_Object_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_BuildString_Name_ReturnValue) == 0x000288, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_BuildString_Name_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000298, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0002A8, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_Print_Hit_Data_Debug, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0002B8, "Member 'GA_HitReaction_C_Print_Hit_Data_Debug::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");

// Function GA_HitReaction.GA_HitReaction_C.IsAvatarDead
// 0x0028 (0x0028 - 0x0000)
struct GA_HitReaction_C_IsAvatarDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_HitReaction_C_IsAvatarDead) == 0x000008, "Wrong alignment on GA_HitReaction_C_IsAvatarDead");
static_assert(sizeof(GA_HitReaction_C_IsAvatarDead) == 0x000028, "Wrong size on GA_HitReaction_C_IsAvatarDead");
static_assert(offsetof(GA_HitReaction_C_IsAvatarDead, ReturnValue) == 0x000000, "Member 'GA_HitReaction_C_IsAvatarDead::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_IsAvatarDead, CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue) == 0x000008, "Member 'GA_HitReaction_C_IsAvatarDead::CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_IsAvatarDead, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000010, "Member 'GA_HitReaction_C_IsAvatarDead::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_IsAvatarDead, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000020, "Member 'GA_HitReaction_C_IsAvatarDead::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");

// Function GA_HitReaction.GA_HitReaction_C.GetHitReactionComponent
// 0x0018 (0x0018 - 0x0000)
struct GA_HitReaction_C_GetHitReactionComponent final
{
public:
	class UHitReactionComponent*                  Comp;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwningActorFromActorInfo_ReturnValue;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHitReactionComponent*                  CallFunc_GetComponentByClass_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_HitReaction_C_GetHitReactionComponent) == 0x000008, "Wrong alignment on GA_HitReaction_C_GetHitReactionComponent");
static_assert(sizeof(GA_HitReaction_C_GetHitReactionComponent) == 0x000018, "Wrong size on GA_HitReaction_C_GetHitReactionComponent");
static_assert(offsetof(GA_HitReaction_C_GetHitReactionComponent, Comp) == 0x000000, "Member 'GA_HitReaction_C_GetHitReactionComponent::Comp' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_GetHitReactionComponent, CallFunc_GetOwningActorFromActorInfo_ReturnValue) == 0x000008, "Member 'GA_HitReaction_C_GetHitReactionComponent::CallFunc_GetOwningActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_GetHitReactionComponent, CallFunc_GetComponentByClass_ReturnValue) == 0x000010, "Member 'GA_HitReaction_C_GetHitReactionComponent::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");

// Function GA_HitReaction.GA_HitReaction_C.DowngradeHitReactionType
// 0x0009 (0x0009 - 0x0000)
struct GA_HitReaction_C_DowngradeHitReactionType final
{
public:
	EHitReactionType                              Hitreaction;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              Temp_byte_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              Temp_byte_Variable_4;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              Temp_byte_Variable_5;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_HitReaction_C_DowngradeHitReactionType) == 0x000001, "Wrong alignment on GA_HitReaction_C_DowngradeHitReactionType");
static_assert(sizeof(GA_HitReaction_C_DowngradeHitReactionType) == 0x000009, "Wrong size on GA_HitReaction_C_DowngradeHitReactionType");
static_assert(offsetof(GA_HitReaction_C_DowngradeHitReactionType, Hitreaction) == 0x000000, "Member 'GA_HitReaction_C_DowngradeHitReactionType::Hitreaction' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_DowngradeHitReactionType, ReturnValue) == 0x000001, "Member 'GA_HitReaction_C_DowngradeHitReactionType::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_DowngradeHitReactionType, Temp_byte_Variable) == 0x000002, "Member 'GA_HitReaction_C_DowngradeHitReactionType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_DowngradeHitReactionType, Temp_byte_Variable_1) == 0x000003, "Member 'GA_HitReaction_C_DowngradeHitReactionType::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_DowngradeHitReactionType, Temp_byte_Variable_2) == 0x000004, "Member 'GA_HitReaction_C_DowngradeHitReactionType::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_DowngradeHitReactionType, Temp_byte_Variable_3) == 0x000005, "Member 'GA_HitReaction_C_DowngradeHitReactionType::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_DowngradeHitReactionType, Temp_byte_Variable_4) == 0x000006, "Member 'GA_HitReaction_C_DowngradeHitReactionType::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_DowngradeHitReactionType, Temp_byte_Variable_5) == 0x000007, "Member 'GA_HitReaction_C_DowngradeHitReactionType::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_C_DowngradeHitReactionType, K2Node_Select_Default) == 0x000008, "Member 'GA_HitReaction_C_DowngradeHitReactionType::K2Node_Select_Default' has a wrong offset!");

}

