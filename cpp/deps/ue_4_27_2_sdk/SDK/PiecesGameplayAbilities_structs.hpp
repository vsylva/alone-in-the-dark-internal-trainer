#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PiecesGameplayAbilities

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// Enum PiecesGameplayAbilities.EAbilityActivationPolicy
// NumValues: 0x0004
enum class EAbilityActivationPolicy : uint8
{
	OnInputTriggered                         = 0,
	WhileInputActive                         = 1,
	OnSpawn                                  = 2,
	EAbilityActivationPolicy_MAX             = 3,
};

// ScriptStruct PiecesGameplayAbilities.TaggedInputAction
// 0x0010 (0x0010 - 0x0000)
struct FTaggedInputAction final
{
public:
	class UInputAction*                           InputAction;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InputTag;                                          // 0x0008(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTaggedInputAction) == 0x000008, "Wrong alignment on FTaggedInputAction");
static_assert(sizeof(FTaggedInputAction) == 0x000010, "Wrong size on FTaggedInputAction");
static_assert(offsetof(FTaggedInputAction, InputAction) == 0x000000, "Member 'FTaggedInputAction::InputAction' has a wrong offset!");
static_assert(offsetof(FTaggedInputAction, InputTag) == 0x000008, "Member 'FTaggedInputAction::InputTag' has a wrong offset!");

// ScriptStruct PiecesGameplayAbilities.PiecesGameplayTargetDataFilter
// 0x0050 (0x0070 - 0x0020)
struct FPiecesGameplayTargetDataFilter final : public FGameplayTargetDataFilter
{
public:
	TArray<TSubclassOf<class AActor>>             ValidRequiredActorClasses;                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, ExposeOnSpawn, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  RequiredGameplayTags;                              // 0x0030(0x0020)(Edit, BlueprintVisible, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  BlockedGameplayTags;                               // 0x0050(0x0020)(Edit, BlueprintVisible, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
};
static_assert(alignof(FPiecesGameplayTargetDataFilter) == 0x000008, "Wrong alignment on FPiecesGameplayTargetDataFilter");
static_assert(sizeof(FPiecesGameplayTargetDataFilter) == 0x000070, "Wrong size on FPiecesGameplayTargetDataFilter");
static_assert(offsetof(FPiecesGameplayTargetDataFilter, ValidRequiredActorClasses) == 0x000020, "Member 'FPiecesGameplayTargetDataFilter::ValidRequiredActorClasses' has a wrong offset!");
static_assert(offsetof(FPiecesGameplayTargetDataFilter, RequiredGameplayTags) == 0x000030, "Member 'FPiecesGameplayTargetDataFilter::RequiredGameplayTags' has a wrong offset!");
static_assert(offsetof(FPiecesGameplayTargetDataFilter, BlockedGameplayTags) == 0x000050, "Member 'FPiecesGameplayTargetDataFilter::BlockedGameplayTags' has a wrong offset!");

}

