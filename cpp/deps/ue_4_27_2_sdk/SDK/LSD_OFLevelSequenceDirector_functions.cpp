#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LSD_OFLevelSequenceDirector

#include "Basic.hpp"

#include "LSD_OFLevelSequenceDirector_classes.hpp"
#include "LSD_OFLevelSequenceDirector_parameters.hpp"


namespace SDK
{

// Function LSD_OFLevelSequenceDirector.LSD_OFLevelSequenceDirector_C.SwitchCinematic
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   NewCinematic                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ULevelSequencePlayer*             NewSequencePlayer                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULSD_OFLevelSequenceDirector_C::SwitchCinematic(class ULevelSequence* NewCinematic, class ULevelSequencePlayer** NewSequencePlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LSD_OFLevelSequenceDirector_C", "SwitchCinematic");

	Params::LSD_OFLevelSequenceDirector_C_SwitchCinematic Parms{};

	Parms.NewCinematic = NewCinematic;

	UObject::ProcessEvent(Func, &Parms);

	if (NewSequencePlayer != nullptr)
		*NewSequencePlayer = Parms.NewSequencePlayer;
}


// Function LSD_OFLevelSequenceDirector.LSD_OFLevelSequenceDirector_C.EndInteractiveCameraSegment
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DecidedValue                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULSD_OFLevelSequenceDirector_C::EndInteractiveCameraSegment(float* DecidedValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LSD_OFLevelSequenceDirector_C", "EndInteractiveCameraSegment");

	Params::LSD_OFLevelSequenceDirector_C_EndInteractiveCameraSegment Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DecidedValue != nullptr)
		*DecidedValue = Parms.DecidedValue;
}


// Function LSD_OFLevelSequenceDirector.LSD_OFLevelSequenceDirector_C.StartInteractiveCameraSegment
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACineCameraActor*                 CameraReference                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       TransformTargetStickLeft                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FTransform                       TransformTargetStickRight                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   BlendSpeed                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     InteractionUnlockedTag                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class FString                           MarkForSkippingSegment                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   TimeDilation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULSD_OFLevelSequenceDirector_C::StartInteractiveCameraSegment(class ACineCameraActor* CameraReference, const struct FTransform& TransformTargetStickLeft, const struct FTransform& TransformTargetStickRight, float BlendSpeed, const struct FGameplayTag& InteractionUnlockedTag, const class FString& MarkForSkippingSegment, float TimeDilation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LSD_OFLevelSequenceDirector_C", "StartInteractiveCameraSegment");

	Params::LSD_OFLevelSequenceDirector_C_StartInteractiveCameraSegment Parms{};

	Parms.CameraReference = CameraReference;
	Parms.TransformTargetStickLeft = std::move(TransformTargetStickLeft);
	Parms.TransformTargetStickRight = std::move(TransformTargetStickRight);
	Parms.BlendSpeed = BlendSpeed;
	Parms.InteractionUnlockedTag = std::move(InteractionUnlockedTag);
	Parms.MarkForSkippingSegment = std::move(MarkForSkippingSegment);
	Parms.TimeDilation = TimeDilation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LSD_OFLevelSequenceDirector.LSD_OFLevelSequenceDirector_C.RemovePlaceHolderTextWidget
// (Public, BlueprintCallable, BlueprintEvent)

void ULSD_OFLevelSequenceDirector_C::RemovePlaceHolderTextWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LSD_OFLevelSequenceDirector_C", "RemovePlaceHolderTextWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LSD_OFLevelSequenceDirector.LSD_OFLevelSequenceDirector_C.CreatePlaceHolderTextWidget
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ULSD_OFLevelSequenceDirector_C::CreatePlaceHolderTextWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LSD_OFLevelSequenceDirector_C", "CreatePlaceHolderTextWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LSD_OFLevelSequenceDirector.LSD_OFLevelSequenceDirector_C.GetTemplateText
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText ULSD_OFLevelSequenceDirector_C::GetTemplateText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LSD_OFLevelSequenceDirector_C", "GetTemplateText");

	Params::LSD_OFLevelSequenceDirector_C_GetTemplateText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LSD_OFLevelSequenceDirector.LSD_OFLevelSequenceDirector_C.TeleportToGoalLocation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharacter*                       Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULSD_OFLevelSequenceDirector_C::TeleportToGoalLocation(class ACharacter* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LSD_OFLevelSequenceDirector_C", "TeleportToGoalLocation");

	Params::LSD_OFLevelSequenceDirector_C_TeleportToGoalLocation Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LSD_OFLevelSequenceDirector.LSD_OFLevelSequenceDirector_C.BlendCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           NewViewTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendExp                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULSD_OFLevelSequenceDirector_C::BlendCamera(class AActor* NewViewTarget, float BlendTime, float BlendExp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LSD_OFLevelSequenceDirector_C", "BlendCamera");

	Params::LSD_OFLevelSequenceDirector_C_BlendCamera Parms{};

	Parms.NewViewTarget = NewViewTarget;
	Parms.BlendTime = BlendTime;
	Parms.BlendExp = BlendExp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LSD_OFLevelSequenceDirector.LSD_OFLevelSequenceDirector_C.ResetToPlayerCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   BlendTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendExp                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULSD_OFLevelSequenceDirector_C::ResetToPlayerCamera(float BlendTime, float BlendExp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LSD_OFLevelSequenceDirector_C", "ResetToPlayerCamera");

	Params::LSD_OFLevelSequenceDirector_C_ResetToPlayerCamera Parms{};

	Parms.BlendTime = BlendTime;
	Parms.BlendExp = BlendExp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LSD_OFLevelSequenceDirector.LSD_OFLevelSequenceDirector_C.SetCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           NewViewTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendExp                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULSD_OFLevelSequenceDirector_C::SetCamera(class AActor* NewViewTarget, float BlendTime, float BlendExp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LSD_OFLevelSequenceDirector_C", "SetCamera");

	Params::LSD_OFLevelSequenceDirector_C_SetCamera Parms{};

	Parms.NewViewTarget = NewViewTarget;
	Parms.BlendTime = BlendTime;
	Parms.BlendExp = BlendExp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LSD_OFLevelSequenceDirector.LSD_OFLevelSequenceDirector_C.OnCreated
// (Event, Public, BlueprintEvent)

void ULSD_OFLevelSequenceDirector_C::OnCreated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LSD_OFLevelSequenceDirector_C", "OnCreated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LSD_OFLevelSequenceDirector.LSD_OFLevelSequenceDirector_C.ExecuteUbergraph_LSD_OFLevelSequenceDirector
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULSD_OFLevelSequenceDirector_C::ExecuteUbergraph_LSD_OFLevelSequenceDirector(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LSD_OFLevelSequenceDirector_C", "ExecuteUbergraph_LSD_OFLevelSequenceDirector");

	Params::LSD_OFLevelSequenceDirector_C_ExecuteUbergraph_LSD_OFLevelSequenceDirector Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

