#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_HealthBar

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ObsidianFox_structs.hpp"
#include "ObsidianFox_classes.hpp"
#include "ObsidianFoxSettings_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_HealthBar.WBP_HealthBar_C
// 0x0060 (0x02D8 - 0x0278)
class UWBP_HealthBar_C final : public UInGameUIWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Fade;                                              // 0x0280(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 HealthBarBorder;                                   // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgHealthBar;                                     // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgHealthBarObsession;                            // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgHealthBg;                                      // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class AObsidianFoxCharacter*                  CharacterRef;                                      // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FTimerHandle                           LoadHeathBarTimer;                                 // 0x02B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsVisible;                                        // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsAiming;                                          // 0x02B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BA[0x6];                                      // 0x02BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Recent_Health_Change_Timer;                        // 0x02C0(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         HealthChangeMinVisibilityTime_Fine;                // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealthChangeMinVisibilityTime;                     // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealthChangeMinVisibilityTime_Critical;            // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealthChangeMinVisibilityTime_Dead;                // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void StartFade();
	void Poll_Visibility_Changes();
	void HealthDropped();
	void HealthGained();
	void UpdateHealth(float Health, float MaxHealth);
	void Construct();
	void OnCharacterHealthChanged(float NewCurrentHealth, float DeltaValue, const struct FGameplayTagContainer& EventTags);
	void OnCombatStateChanged(bool bNewIsInCombat);
	void OnAiming(bool bIsAiming);
	void PlayerHUDVisibilityChanged(bool bNewHUDVisibility);
	void Start_Health_Bar_Visibility_Timer();
	void Set_Obsession_Progression();
	void ExecuteUbergraph_WBP_HealthBar(int32 EntryPoint);

	bool GetIsVisibilityAllowed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_HealthBar_C">();
	}
	static class UWBP_HealthBar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_HealthBar_C>();
	}
};
static_assert(alignof(UWBP_HealthBar_C) == 0x000008, "Wrong alignment on UWBP_HealthBar_C");
static_assert(sizeof(UWBP_HealthBar_C) == 0x0002D8, "Wrong size on UWBP_HealthBar_C");
static_assert(offsetof(UWBP_HealthBar_C, UberGraphFrame) == 0x000278, "Member 'UWBP_HealthBar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_HealthBar_C, Fade) == 0x000280, "Member 'UWBP_HealthBar_C::Fade' has a wrong offset!");
static_assert(offsetof(UWBP_HealthBar_C, HealthBarBorder) == 0x000288, "Member 'UWBP_HealthBar_C::HealthBarBorder' has a wrong offset!");
static_assert(offsetof(UWBP_HealthBar_C, ProgHealthBar) == 0x000290, "Member 'UWBP_HealthBar_C::ProgHealthBar' has a wrong offset!");
static_assert(offsetof(UWBP_HealthBar_C, ProgHealthBarObsession) == 0x000298, "Member 'UWBP_HealthBar_C::ProgHealthBarObsession' has a wrong offset!");
static_assert(offsetof(UWBP_HealthBar_C, ProgHealthBg) == 0x0002A0, "Member 'UWBP_HealthBar_C::ProgHealthBg' has a wrong offset!");
static_assert(offsetof(UWBP_HealthBar_C, CharacterRef) == 0x0002A8, "Member 'UWBP_HealthBar_C::CharacterRef' has a wrong offset!");
static_assert(offsetof(UWBP_HealthBar_C, LoadHeathBarTimer) == 0x0002B0, "Member 'UWBP_HealthBar_C::LoadHeathBarTimer' has a wrong offset!");
static_assert(offsetof(UWBP_HealthBar_C, bIsVisible) == 0x0002B8, "Member 'UWBP_HealthBar_C::bIsVisible' has a wrong offset!");
static_assert(offsetof(UWBP_HealthBar_C, IsAiming) == 0x0002B9, "Member 'UWBP_HealthBar_C::IsAiming' has a wrong offset!");
static_assert(offsetof(UWBP_HealthBar_C, Recent_Health_Change_Timer) == 0x0002C0, "Member 'UWBP_HealthBar_C::Recent_Health_Change_Timer' has a wrong offset!");
static_assert(offsetof(UWBP_HealthBar_C, HealthChangeMinVisibilityTime_Fine) == 0x0002C8, "Member 'UWBP_HealthBar_C::HealthChangeMinVisibilityTime_Fine' has a wrong offset!");
static_assert(offsetof(UWBP_HealthBar_C, HealthChangeMinVisibilityTime) == 0x0002CC, "Member 'UWBP_HealthBar_C::HealthChangeMinVisibilityTime' has a wrong offset!");
static_assert(offsetof(UWBP_HealthBar_C, HealthChangeMinVisibilityTime_Critical) == 0x0002D0, "Member 'UWBP_HealthBar_C::HealthChangeMinVisibilityTime_Critical' has a wrong offset!");
static_assert(offsetof(UWBP_HealthBar_C, HealthChangeMinVisibilityTime_Dead) == 0x0002D4, "Member 'UWBP_HealthBar_C::HealthChangeMinVisibilityTime_Dead' has a wrong offset!");

}

