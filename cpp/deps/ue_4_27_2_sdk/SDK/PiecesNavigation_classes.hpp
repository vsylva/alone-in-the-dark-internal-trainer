#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PiecesNavigation

#include "Basic.hpp"

#include "PiecesNavigation_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "NavigationSystem_classes.hpp"


namespace SDK
{

// Class PiecesNavigation.PiecesAsyncNavigationSystem
// 0x0050 (0x0080 - 0x0030)
class UPiecesAsyncNavigationSystem final : public UWorldSubsystem
{
public:
	TMap<struct FNavAsyncQueryId, struct FNavigationQueryData> QueryDataMap;                                      // 0x0030(0x0050)(NativeAccessSpecifierPrivate)

public:
	bool FindPathToActorAsynchronously(const struct FVector& PathStart, class AActor* GoalActor, float TetherDistance, class AActor* PathfindingContext, TSubclassOf<class UNavigationQueryFilter> FilterClass, struct FNavAsyncQueryId* OutQueryId);
	bool FindPathToLocationAsynchronously(const struct FVector& PathStart, const struct FVector& PathEnd, class AActor* PathfindingContext, TSubclassOf<class UNavigationQueryFilter> FilterClass, struct FNavAsyncQueryId* OutQueryId);
	EQueryStatus GetQueryStatusWithResult(struct FNavAsyncQueryId& RefQueryId, class UNavigationPath** OutPath);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesAsyncNavigationSystem">();
	}
	static class UPiecesAsyncNavigationSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesAsyncNavigationSystem>();
	}
};
static_assert(alignof(UPiecesAsyncNavigationSystem) == 0x000008, "Wrong alignment on UPiecesAsyncNavigationSystem");
static_assert(sizeof(UPiecesAsyncNavigationSystem) == 0x000080, "Wrong size on UPiecesAsyncNavigationSystem");
static_assert(offsetof(UPiecesAsyncNavigationSystem, QueryDataMap) == 0x000030, "Member 'UPiecesAsyncNavigationSystem::QueryDataMap' has a wrong offset!");

// Class PiecesNavigation.PiecesNavLinkComponent
// 0x0040 (0x04C0 - 0x0480)
class UPiecesNavLinkComponent final : public UNavLinkComponent
{
public:
	uint32                                        LinkID;                                            // 0x0480(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_484[0x4];                                      // 0x0484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnLinkReached;                                     // 0x0488(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnLinkMoveDone;                                    // 0x0498(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	struct FNavAgentSelector                      SupportedAgents;                                   // 0x04A8(0x0004)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         bLinkEnabled : 1;                                  // 0x04AC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_4AD[0x3];                                      // 0x04AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavArea>                   EnabledAreaClass;                                  // 0x04B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UNavArea>                   DisabledAreaClass;                                 // 0x04B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesNavLinkComponent">();
	}
	static class UPiecesNavLinkComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesNavLinkComponent>();
	}
};
static_assert(alignof(UPiecesNavLinkComponent) == 0x000010, "Wrong alignment on UPiecesNavLinkComponent");
static_assert(sizeof(UPiecesNavLinkComponent) == 0x0004C0, "Wrong size on UPiecesNavLinkComponent");
static_assert(offsetof(UPiecesNavLinkComponent, LinkID) == 0x000480, "Member 'UPiecesNavLinkComponent::LinkID' has a wrong offset!");
static_assert(offsetof(UPiecesNavLinkComponent, OnLinkReached) == 0x000488, "Member 'UPiecesNavLinkComponent::OnLinkReached' has a wrong offset!");
static_assert(offsetof(UPiecesNavLinkComponent, OnLinkMoveDone) == 0x000498, "Member 'UPiecesNavLinkComponent::OnLinkMoveDone' has a wrong offset!");
static_assert(offsetof(UPiecesNavLinkComponent, SupportedAgents) == 0x0004A8, "Member 'UPiecesNavLinkComponent::SupportedAgents' has a wrong offset!");
static_assert(offsetof(UPiecesNavLinkComponent, EnabledAreaClass) == 0x0004B0, "Member 'UPiecesNavLinkComponent::EnabledAreaClass' has a wrong offset!");
static_assert(offsetof(UPiecesNavLinkComponent, DisabledAreaClass) == 0x0004B8, "Member 'UPiecesNavLinkComponent::DisabledAreaClass' has a wrong offset!");

}

