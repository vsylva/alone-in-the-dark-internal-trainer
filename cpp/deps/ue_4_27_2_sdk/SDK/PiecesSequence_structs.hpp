#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PiecesSequence

#include "Basic.hpp"

#include "MovieScene_structs.hpp"


namespace SDK
{

// Enum PiecesSequence.EInteractiveLevelSequenceState
// NumValues: 0x0005
enum class EInteractiveLevelSequenceState : uint8
{
	Pending                                  = 0,
	PlayingSequence                          = 1,
	InteractiveSegment                       = 2,
	Finished                                 = 3,
	EInteractiveLevelSequenceState_MAX       = 4,
};

// ScriptStruct PiecesSequence.SequenceActorSpawnInfo
// 0x00B0 (0x00B0 - 0x0000)
struct FSequenceActorSpawnInfo final
{
public:
	class UClass*                                 ActorClass;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x98];                                       // 0x0008(0x0098)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMovieSceneObjectBindingID>     ActorBindings;                                     // 0x00A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSequenceActorSpawnInfo) == 0x000008, "Wrong alignment on FSequenceActorSpawnInfo");
static_assert(sizeof(FSequenceActorSpawnInfo) == 0x0000B0, "Wrong size on FSequenceActorSpawnInfo");
static_assert(offsetof(FSequenceActorSpawnInfo, ActorClass) == 0x000000, "Member 'FSequenceActorSpawnInfo::ActorClass' has a wrong offset!");
static_assert(offsetof(FSequenceActorSpawnInfo, ActorBindings) == 0x0000A0, "Member 'FSequenceActorSpawnInfo::ActorBindings' has a wrong offset!");

// ScriptStruct PiecesSequence.PiecesLevelSequencePlayerPlaybackSettings
// 0x0020 (0x0020 - 0x0000)
struct FPiecesLevelSequencePlayerPlaybackSettings final
{
public:
	uint8                                         bCanBeSkipped : 1;                                 // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFadeToBlack : 1;                                  // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFadeOutAtStart : 1;                               // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFadeToBlackOnSkip : 1;                            // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPlayImmediately : 1;                              // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPreloadBasedOnCameraTrack : 1;                    // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ForceLod0ForAllCharacters : 1;                     // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         SetCameraCutAtSequenceStart : 1;                   // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ResetDynamicsAtSequenceStart : 1;                  // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ResetDynamicsAtCameraCuts : 1;                     // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreloadOffset;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkipMarkerName;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UWorld>>          LevelsNotToPreStream;                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPiecesLevelSequencePlayerPlaybackSettings) == 0x000008, "Wrong alignment on FPiecesLevelSequencePlayerPlaybackSettings");
static_assert(sizeof(FPiecesLevelSequencePlayerPlaybackSettings) == 0x000020, "Wrong size on FPiecesLevelSequencePlayerPlaybackSettings");
static_assert(offsetof(FPiecesLevelSequencePlayerPlaybackSettings, PreloadOffset) == 0x000004, "Member 'FPiecesLevelSequencePlayerPlaybackSettings::PreloadOffset' has a wrong offset!");
static_assert(offsetof(FPiecesLevelSequencePlayerPlaybackSettings, SkipMarkerName) == 0x000008, "Member 'FPiecesLevelSequencePlayerPlaybackSettings::SkipMarkerName' has a wrong offset!");
static_assert(offsetof(FPiecesLevelSequencePlayerPlaybackSettings, LevelsNotToPreStream) == 0x000010, "Member 'FPiecesLevelSequencePlayerPlaybackSettings::LevelsNotToPreStream' has a wrong offset!");

// ScriptStruct PiecesSequence.InteractiveSequenceSegment
// 0x0030 (0x0030 - 0x0000)
struct FInteractiveSequenceSegment final
{
public:
	class FName                                   StartingMarkerName;                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          Sequence;                                          // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractiveSequenceSegment) == 0x000008, "Wrong alignment on FInteractiveSequenceSegment");
static_assert(sizeof(FInteractiveSequenceSegment) == 0x000030, "Wrong size on FInteractiveSequenceSegment");
static_assert(offsetof(FInteractiveSequenceSegment, StartingMarkerName) == 0x000000, "Member 'FInteractiveSequenceSegment::StartingMarkerName' has a wrong offset!");
static_assert(offsetof(FInteractiveSequenceSegment, Sequence) == 0x000008, "Member 'FInteractiveSequenceSegment::Sequence' has a wrong offset!");

// ScriptStruct PiecesSequence.PiecesCameraTrackTransformEvaluator
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FPiecesCameraTrackTransformEvaluator final
{
public:
	uint8                                         Pad_0[0x68];                                       // 0x0000(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPiecesCameraTrackTransformEvaluator) == 0x000008, "Wrong alignment on FPiecesCameraTrackTransformEvaluator");
static_assert(sizeof(FPiecesCameraTrackTransformEvaluator) == 0x000068, "Wrong size on FPiecesCameraTrackTransformEvaluator");

// ScriptStruct PiecesSequence.TransitionCutEntry
// 0x0018 (0x0018 - 0x0000)
struct FTransitionCutEntry final
{
public:
	bool                                          SetCameraCutThisFrame;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceRemoveStreamingLevel;                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class ALevelStreamingVolume>> LevelStreamingVolumes;                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTransitionCutEntry) == 0x000008, "Wrong alignment on FTransitionCutEntry");
static_assert(sizeof(FTransitionCutEntry) == 0x000018, "Wrong size on FTransitionCutEntry");
static_assert(offsetof(FTransitionCutEntry, SetCameraCutThisFrame) == 0x000000, "Member 'FTransitionCutEntry::SetCameraCutThisFrame' has a wrong offset!");
static_assert(offsetof(FTransitionCutEntry, ForceRemoveStreamingLevel) == 0x000001, "Member 'FTransitionCutEntry::ForceRemoveStreamingLevel' has a wrong offset!");
static_assert(offsetof(FTransitionCutEntry, LevelStreamingVolumes) == 0x000008, "Member 'FTransitionCutEntry::LevelStreamingVolumes' has a wrong offset!");

// ScriptStruct PiecesSequence.CharacterBinding
// 0x0028 (0x0028 - 0x0000)
struct FCharacterBinding final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagBinding;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneObjectBindingID>     Bindings;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bDespawnAtBeginPlay : 1;                           // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterBinding) == 0x000008, "Wrong alignment on FCharacterBinding");
static_assert(sizeof(FCharacterBinding) == 0x000028, "Wrong size on FCharacterBinding");
static_assert(offsetof(FCharacterBinding, Actor) == 0x000000, "Member 'FCharacterBinding::Actor' has a wrong offset!");
static_assert(offsetof(FCharacterBinding, TagBinding) == 0x000008, "Member 'FCharacterBinding::TagBinding' has a wrong offset!");
static_assert(offsetof(FCharacterBinding, Bindings) == 0x000010, "Member 'FCharacterBinding::Bindings' has a wrong offset!");

// ScriptStruct PiecesSequence.PiecesMovieSceneLetterboxTemplate
// 0x00A0 (0x00C0 - 0x0020)
struct FPiecesMovieSceneLetterboxTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneFloatChannel                AlphaCurve;                                        // 0x0020(0x00A0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPiecesMovieSceneLetterboxTemplate) == 0x000008, "Wrong alignment on FPiecesMovieSceneLetterboxTemplate");
static_assert(sizeof(FPiecesMovieSceneLetterboxTemplate) == 0x0000C0, "Wrong size on FPiecesMovieSceneLetterboxTemplate");
static_assert(offsetof(FPiecesMovieSceneLetterboxTemplate, AlphaCurve) == 0x000020, "Member 'FPiecesMovieSceneLetterboxTemplate::AlphaCurve' has a wrong offset!");

// ScriptStruct PiecesSequence.SequenceInfo
// 0x0020 (0x0020 - 0x0000)
struct FSequenceInfo final
{
public:
	class FName                                   ActWorldName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PersistentWorldName;                               // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParentLevelAssetName;                              // 0x0010(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SequenceAssetName;                                 // 0x0018(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSequenceInfo) == 0x000004, "Wrong alignment on FSequenceInfo");
static_assert(sizeof(FSequenceInfo) == 0x000020, "Wrong size on FSequenceInfo");
static_assert(offsetof(FSequenceInfo, ActWorldName) == 0x000000, "Member 'FSequenceInfo::ActWorldName' has a wrong offset!");
static_assert(offsetof(FSequenceInfo, PersistentWorldName) == 0x000008, "Member 'FSequenceInfo::PersistentWorldName' has a wrong offset!");
static_assert(offsetof(FSequenceInfo, ParentLevelAssetName) == 0x000010, "Member 'FSequenceInfo::ParentLevelAssetName' has a wrong offset!");
static_assert(offsetof(FSequenceInfo, SequenceAssetName) == 0x000018, "Member 'FSequenceInfo::SequenceAssetName' has a wrong offset!");

}

