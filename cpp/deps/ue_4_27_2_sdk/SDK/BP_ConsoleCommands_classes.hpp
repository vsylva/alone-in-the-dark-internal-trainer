#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ConsoleCommands

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ObsidianFox_structs.hpp"
#include "PiecesBlueprintConsoleCommands_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ConsoleCommands.BP_ConsoleCommands_C
// 0x0048 (0x0100 - 0x00B8)
class UBP_ConsoleCommands_C final : public UConsoleCommands
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         CurrentDebugLightValue;                            // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   Critical_Path_Tool_Class;                          // 0x00C8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash)
	class UItemData*                              FlashlightItem;                                    // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HideHUD;                                           // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_ConsoleCommands(int32 EntryPoint);
	void DLCFilterBrightnessOverrideNoir(float Float);
	void DLCFilterBrightnessOverride8bit(float Float);
	void DebugAi();
	void OFPerfTest30();
	void OFPerfTest60();
	void NoGrapple();
	void Guide();
	void SetChapter(int32 ChapterNumber);
	void GetHealthFlask();
	void RestoreCameraFade();
	void ActivateSteamboatEngine();
	void ActivateDSSTempleEndTrigger();
	void EnterTalismanMode();
	void EndGameplaySession();
	void StartGameplaySession();
	void TriggerNearbySpawners(int32 Amount);
	void GetAllItems();
	void ForceStartFunnels();
	void UnlockAlternativeEndings();
	void AggroDebugTick();
	void GetFlashlight();
	void GetAllDesertMirrors();
	void GetAllMedallions();
	void GetSkeletonKey();
	void ActivateWeapons();
	void HideCharacterMesh();
	void DebugThreat();
	void OpenOtherworlds();
	void GetCombatState();
	void GetTalisman();
	void GetAllWeapons();
	void DebugSpeed();
	void TeleportTo(float X, float Y, float Z);
	void ToggleImmortalEnemies();
	void SniperMode();
	void ToggleCriticalPath();
	void ToggleUIVisibility();
	void Kill();
	void Debuglightmode(float Weight);
	void Toggleplayervisibility();
	void Spiritmode();
	void Reloadall();
	void Noclip();
	void Unlockall();
	void Switchcharacter();
	void Spawnitem();
	void Addammo();
	void GodMode();
	void SolvePuzzle();
	void Killall();
	void AddItem(const class FString& ID, int32 Amount);
	void Sethealth(int32 Value);
	void ReceiveBeginPlay();
	void OnEnemySpawned_5A85F905414917A11BF572BE58597B30(class AOFEnemyCharacter* SpawnedEnemy, class AAIController* SpawnedAICOntroller, class AEnemySpawner* Spawner);
	void OnLoaded_628467534962765FFFF637B73FB36E18(class UObject* Loaded);
	void SolveClosestPuzzle();
	void Print(const class FString& String);
	void OpenTalismanModeForClosestPuzzle();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ConsoleCommands_C">();
	}
	static class UBP_ConsoleCommands_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_ConsoleCommands_C>();
	}
};
static_assert(alignof(UBP_ConsoleCommands_C) == 0x000008, "Wrong alignment on UBP_ConsoleCommands_C");
static_assert(sizeof(UBP_ConsoleCommands_C) == 0x000100, "Wrong size on UBP_ConsoleCommands_C");
static_assert(offsetof(UBP_ConsoleCommands_C, UberGraphFrame) == 0x0000B8, "Member 'UBP_ConsoleCommands_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_ConsoleCommands_C, CurrentDebugLightValue) == 0x0000C0, "Member 'UBP_ConsoleCommands_C::CurrentDebugLightValue' has a wrong offset!");
static_assert(offsetof(UBP_ConsoleCommands_C, Critical_Path_Tool_Class) == 0x0000C8, "Member 'UBP_ConsoleCommands_C::Critical_Path_Tool_Class' has a wrong offset!");
static_assert(offsetof(UBP_ConsoleCommands_C, FlashlightItem) == 0x0000F0, "Member 'UBP_ConsoleCommands_C::FlashlightItem' has a wrong offset!");
static_assert(offsetof(UBP_ConsoleCommands_C, HideHUD) == 0x0000F8, "Member 'UBP_ConsoleCommands_C::HideHUD' has a wrong offset!");

}

