#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BumpIntoAsset

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BumpIntoAsset.BP_BumpIntoAsset_C
// 0x0080 (0x02B8 - 0x0238)
class ABP_BumpIntoAsset_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          DestructibleCollision;                             // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    BumpSoundSource;                                   // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          VelocityChecker;                                   // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    ImpulseOrigin;                                     // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Mesh;                                              // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ForceMultiplier;                                   // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpulseRadius;                                     // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class AStaticMeshActor>> ImpulseMeshes;                                     // 0x0280(0x0010)(Edit, BlueprintVisible)
	float                                         VelocityCheckSize;                                 // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PlayerWorldVelocity;                               // 0x0294(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugImpactVelocity;                               // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DebugMinusSimulateCharacterMaxSpeed;               // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ConstantForceStrength;                             // 0x02A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A3[0x1];                                      // 0x02A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConstantForce;                                     // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             BumpSound;                                         // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayBetweenBumps;                                 // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void BndEvt__StaticMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ResetCooldown();
	void BndEvt__VelocityChecker_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void AddForceToObjects(const struct FVector& HitNormal, const struct FVector& Force);
	void BumpObjects(const struct FVector& HitNormal);
	void ExecuteUbergraph_BP_BumpIntoAsset(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BumpIntoAsset_C">();
	}
	static class ABP_BumpIntoAsset_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BumpIntoAsset_C>();
	}
};
static_assert(alignof(ABP_BumpIntoAsset_C) == 0x000008, "Wrong alignment on ABP_BumpIntoAsset_C");
static_assert(sizeof(ABP_BumpIntoAsset_C) == 0x0002B8, "Wrong size on ABP_BumpIntoAsset_C");
static_assert(offsetof(ABP_BumpIntoAsset_C, UberGraphFrame) == 0x000238, "Member 'ABP_BumpIntoAsset_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoAsset_C, DestructibleCollision) == 0x000240, "Member 'ABP_BumpIntoAsset_C::DestructibleCollision' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoAsset_C, BumpSoundSource) == 0x000248, "Member 'ABP_BumpIntoAsset_C::BumpSoundSource' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoAsset_C, VelocityChecker) == 0x000250, "Member 'ABP_BumpIntoAsset_C::VelocityChecker' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoAsset_C, ImpulseOrigin) == 0x000258, "Member 'ABP_BumpIntoAsset_C::ImpulseOrigin' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoAsset_C, StaticMesh) == 0x000260, "Member 'ABP_BumpIntoAsset_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoAsset_C, DefaultSceneRoot) == 0x000268, "Member 'ABP_BumpIntoAsset_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoAsset_C, Mesh) == 0x000270, "Member 'ABP_BumpIntoAsset_C::Mesh' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoAsset_C, ForceMultiplier) == 0x000278, "Member 'ABP_BumpIntoAsset_C::ForceMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoAsset_C, ImpulseRadius) == 0x00027C, "Member 'ABP_BumpIntoAsset_C::ImpulseRadius' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoAsset_C, ImpulseMeshes) == 0x000280, "Member 'ABP_BumpIntoAsset_C::ImpulseMeshes' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoAsset_C, VelocityCheckSize) == 0x000290, "Member 'ABP_BumpIntoAsset_C::VelocityCheckSize' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoAsset_C, PlayerWorldVelocity) == 0x000294, "Member 'ABP_BumpIntoAsset_C::PlayerWorldVelocity' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoAsset_C, DebugImpactVelocity) == 0x0002A0, "Member 'ABP_BumpIntoAsset_C::DebugImpactVelocity' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoAsset_C, DebugMinusSimulateCharacterMaxSpeed) == 0x0002A1, "Member 'ABP_BumpIntoAsset_C::DebugMinusSimulateCharacterMaxSpeed' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoAsset_C, ConstantForceStrength) == 0x0002A2, "Member 'ABP_BumpIntoAsset_C::ConstantForceStrength' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoAsset_C, ConstantForce) == 0x0002A4, "Member 'ABP_BumpIntoAsset_C::ConstantForce' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoAsset_C, BumpSound) == 0x0002A8, "Member 'ABP_BumpIntoAsset_C::BumpSound' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoAsset_C, DelayBetweenBumps) == 0x0002B0, "Member 'ABP_BumpIntoAsset_C::DelayBetweenBumps' has a wrong offset!");

}

