#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PiecesInput

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "EnhancedInput_structs.hpp"
#include "EnhancedInput_classes.hpp"


namespace SDK
{

// Class PiecesInput.PiecesInputBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UPiecesInputBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool GetInputTriggerTreatedAsHold(const struct FGameplayTag& InputTriggerTreatAsHoldTag);
	static bool SetInputTriggerTreatedAsHold(const struct FGameplayTag& InputTriggerTreatAsHoldTag, bool bTreatAsHold);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesInputBlueprintLibrary">();
	}
	static class UPiecesInputBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesInputBlueprintLibrary>();
	}
};
static_assert(alignof(UPiecesInputBlueprintLibrary) == 0x000008, "Wrong alignment on UPiecesInputBlueprintLibrary");
static_assert(sizeof(UPiecesInputBlueprintLibrary) == 0x000028, "Wrong size on UPiecesInputBlueprintLibrary");

// Class PiecesInput.PiecesInputDeveloperSettings
// 0x0028 (0x0060 - 0x0038)
class UPiecesInputDeveloperSettings final : public UDeveloperSettings
{
public:
	TSoftObjectPtr<class UPiecesInputMappingContext> DefaultInputMappingContext;                        // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesInputDeveloperSettings">();
	}
	static class UPiecesInputDeveloperSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesInputDeveloperSettings>();
	}
};
static_assert(alignof(UPiecesInputDeveloperSettings) == 0x000008, "Wrong alignment on UPiecesInputDeveloperSettings");
static_assert(sizeof(UPiecesInputDeveloperSettings) == 0x000060, "Wrong size on UPiecesInputDeveloperSettings");
static_assert(offsetof(UPiecesInputDeveloperSettings, DefaultInputMappingContext) == 0x000038, "Member 'UPiecesInputDeveloperSettings::DefaultInputMappingContext' has a wrong offset!");

// Class PiecesInput.PiecesInputGameUserSettingsInterface
// 0x0000 (0x0028 - 0x0028)
class IPiecesInputGameUserSettingsInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesInputGameUserSettingsInterface">();
	}
	static class IPiecesInputGameUserSettingsInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IPiecesInputGameUserSettingsInterface>();
	}
};
static_assert(alignof(IPiecesInputGameUserSettingsInterface) == 0x000008, "Wrong alignment on IPiecesInputGameUserSettingsInterface");
static_assert(sizeof(IPiecesInputGameUserSettingsInterface) == 0x000028, "Wrong size on IPiecesInputGameUserSettingsInterface");

// Class PiecesInput.PiecesInputMappingContext
// 0x0000 (0x0058 - 0x0058)
class UPiecesInputMappingContext final : public UInputMappingContext
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesInputMappingContext">();
	}
	static class UPiecesInputMappingContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesInputMappingContext>();
	}
};
static_assert(alignof(UPiecesInputMappingContext) == 0x000008, "Wrong alignment on UPiecesInputMappingContext");
static_assert(sizeof(UPiecesInputMappingContext) == 0x000058, "Wrong size on UPiecesInputMappingContext");

// Class PiecesInput.PiecesInputModifierSmooth
// 0x0028 (0x0050 - 0x0028)
class UPiecesInputModifierSmooth final : public UInputModifier
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LowFrameRateThreshold;                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HighFrameRateThreshold;                            // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesInputModifierSmooth">();
	}
	static class UPiecesInputModifierSmooth* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesInputModifierSmooth>();
	}
};
static_assert(alignof(UPiecesInputModifierSmooth) == 0x000008, "Wrong alignment on UPiecesInputModifierSmooth");
static_assert(sizeof(UPiecesInputModifierSmooth) == 0x000050, "Wrong size on UPiecesInputModifierSmooth");
static_assert(offsetof(UPiecesInputModifierSmooth, LowFrameRateThreshold) == 0x000040, "Member 'UPiecesInputModifierSmooth::LowFrameRateThreshold' has a wrong offset!");
static_assert(offsetof(UPiecesInputModifierSmooth, HighFrameRateThreshold) == 0x000044, "Member 'UPiecesInputModifierSmooth::HighFrameRateThreshold' has a wrong offset!");

// Class PiecesInput.PiecesInputModifierDeltaTime
// 0x0000 (0x0028 - 0x0028)
class UPiecesInputModifierDeltaTime final : public UInputModifier
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesInputModifierDeltaTime">();
	}
	static class UPiecesInputModifierDeltaTime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesInputModifierDeltaTime>();
	}
};
static_assert(alignof(UPiecesInputModifierDeltaTime) == 0x000008, "Wrong alignment on UPiecesInputModifierDeltaTime");
static_assert(sizeof(UPiecesInputModifierDeltaTime) == 0x000028, "Wrong size on UPiecesInputModifierDeltaTime");

// Class PiecesInput.PiecesInputSubsystem
// 0x0180 (0x01B0 - 0x0030)
class UPiecesInputSubsystem final : public UGameInstanceSubsystem
{
public:
	FMulticastInlineDelegateProperty_             OnKeyBindingSelectionStateUpdate;                  // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UPiecesInputMappingContext*             SourceMappingContext;                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPiecesInputMappingContext*             DefaultMappingContext;                             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPiecesInputMappingContext*             CustomMappingContext;                              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_68[0x148];                                     // 0x0068(0x0148)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FName GetActionName(class FName BindingName);
	class UPiecesInputMappingContext* GetActiveMappingContext();
	TArray<class FName> GetBindingsForKey(const struct FKey& Key);
	struct FKey GetCurrentGamepadKeyForAction(class FName ActionName);
	struct FKey GetCurrentPrimaryKeyForAction(class FName ActionName);
	struct FKey GetCurrentSecondaryKeyForAction(class FName ActionName);
	bool IsBindingGamepad(const class FString& BindingName);
	bool IsBindingPrimary(const class FString& BindingName);
	bool IsBindingSecondary(const class FString& BindingName);
	bool KeyAlreadyBound(const struct FKey& Key);
	void RemoveCustomKey(class FName ActionName, const struct FKey& OldKey, bool bIsPrimaryKey);
	void ResetCustomContext();
	void UnBindKey(const struct FKey& Key);
	void UpdateCustomKey(class FName ActionName, const struct FKey& NewKey, bool bIsPrimaryKey, bool bUnbindExisting);

	class FText GetActionDisplayName(class FName ActionName, bool bIsGamepadKey) const;
	const struct FEnhancedActionKeyMapping GetActionKeyMappingDefault(const class FName ActionName, bool bIsGamepadKey) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesInputSubsystem">();
	}
	static class UPiecesInputSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesInputSubsystem>();
	}
};
static_assert(alignof(UPiecesInputSubsystem) == 0x000008, "Wrong alignment on UPiecesInputSubsystem");
static_assert(sizeof(UPiecesInputSubsystem) == 0x0001B0, "Wrong size on UPiecesInputSubsystem");
static_assert(offsetof(UPiecesInputSubsystem, OnKeyBindingSelectionStateUpdate) == 0x000030, "Member 'UPiecesInputSubsystem::OnKeyBindingSelectionStateUpdate' has a wrong offset!");
static_assert(offsetof(UPiecesInputSubsystem, SourceMappingContext) == 0x000050, "Member 'UPiecesInputSubsystem::SourceMappingContext' has a wrong offset!");
static_assert(offsetof(UPiecesInputSubsystem, DefaultMappingContext) == 0x000058, "Member 'UPiecesInputSubsystem::DefaultMappingContext' has a wrong offset!");
static_assert(offsetof(UPiecesInputSubsystem, CustomMappingContext) == 0x000060, "Member 'UPiecesInputSubsystem::CustomMappingContext' has a wrong offset!");

// Class PiecesInput.InputTriggerPiecesTimedBase
// 0x0008 (0x0048 - 0x0040)
class UInputTriggerPiecesTimedBase : public UInputTrigger
{
public:
	float                                         HeldDuration;                                      // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAffectedByTimeDilation;                           // 0x0044(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputTriggerPiecesTimedBase">();
	}
	static class UInputTriggerPiecesTimedBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputTriggerPiecesTimedBase>();
	}
};
static_assert(alignof(UInputTriggerPiecesTimedBase) == 0x000008, "Wrong alignment on UInputTriggerPiecesTimedBase");
static_assert(sizeof(UInputTriggerPiecesTimedBase) == 0x000048, "Wrong size on UInputTriggerPiecesTimedBase");
static_assert(offsetof(UInputTriggerPiecesTimedBase, HeldDuration) == 0x000040, "Member 'UInputTriggerPiecesTimedBase::HeldDuration' has a wrong offset!");
static_assert(offsetof(UInputTriggerPiecesTimedBase, bAffectedByTimeDilation) == 0x000044, "Member 'UInputTriggerPiecesTimedBase::bAffectedByTimeDilation' has a wrong offset!");

// Class PiecesInput.InputTriggerToggleableHold
// 0x0018 (0x0060 - 0x0048)
class UInputTriggerToggleableHold : public UInputTriggerPiecesTimedBase
{
public:
	uint8                                         Pad_48[0x4];                                       // 0x0048(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HoldTimeThreshold;                                 // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOneShot;                                        // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           TreatAsHoldTag;                                    // 0x0054(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	ETriggerState UpdateStateNonHeld(const class UEnhancedPlayerInput* PlayerInput, const struct FInputActionValue& ModifiedValue, float DeltaTime, ETriggerState* State);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputTriggerToggleableHold">();
	}
	static class UInputTriggerToggleableHold* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputTriggerToggleableHold>();
	}
};
static_assert(alignof(UInputTriggerToggleableHold) == 0x000008, "Wrong alignment on UInputTriggerToggleableHold");
static_assert(sizeof(UInputTriggerToggleableHold) == 0x000060, "Wrong size on UInputTriggerToggleableHold");
static_assert(offsetof(UInputTriggerToggleableHold, HoldTimeThreshold) == 0x00004C, "Member 'UInputTriggerToggleableHold::HoldTimeThreshold' has a wrong offset!");
static_assert(offsetof(UInputTriggerToggleableHold, bIsOneShot) == 0x000050, "Member 'UInputTriggerToggleableHold::bIsOneShot' has a wrong offset!");
static_assert(offsetof(UInputTriggerToggleableHold, TreatAsHoldTag) == 0x000054, "Member 'UInputTriggerToggleableHold::TreatAsHoldTag' has a wrong offset!");

// Class PiecesInput.InputTriggerHoldOrTap
// 0x0008 (0x0068 - 0x0060)
class UInputTriggerHoldOrTap final : public UInputTriggerToggleableHold
{
public:
	uint8                                         Pad_60[0x4];                                       // 0x0060(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TapReleaseTimeThreshold;                           // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputTriggerHoldOrTap">();
	}
	static class UInputTriggerHoldOrTap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputTriggerHoldOrTap>();
	}
};
static_assert(alignof(UInputTriggerHoldOrTap) == 0x000008, "Wrong alignment on UInputTriggerHoldOrTap");
static_assert(sizeof(UInputTriggerHoldOrTap) == 0x000068, "Wrong size on UInputTriggerHoldOrTap");
static_assert(offsetof(UInputTriggerHoldOrTap, TapReleaseTimeThreshold) == 0x000064, "Member 'UInputTriggerHoldOrTap::TapReleaseTimeThreshold' has a wrong offset!");

// Class PiecesInput.InputTriggerHoldOrPress
// 0x0000 (0x0060 - 0x0060)
class UInputTriggerHoldOrPress final : public UInputTriggerToggleableHold
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputTriggerHoldOrPress">();
	}
	static class UInputTriggerHoldOrPress* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputTriggerHoldOrPress>();
	}
};
static_assert(alignof(UInputTriggerHoldOrPress) == 0x000008, "Wrong alignment on UInputTriggerHoldOrPress");
static_assert(sizeof(UInputTriggerHoldOrPress) == 0x000060, "Wrong size on UInputTriggerHoldOrPress");

}

