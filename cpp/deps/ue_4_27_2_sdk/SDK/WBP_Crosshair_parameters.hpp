#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Crosshair

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "EWeapons_structs.hpp"


namespace SDK::Params
{

// Function WBP_Crosshair.WBP_Crosshair_C.ExecuteUbergraph_WBP_Crosshair
// 0x0190 (0x0190 - 0x0000)
struct WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWeapons                                      Temp_byte_Variable_2;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* DestroyedActor)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWeapons                                      Temp_byte_Variable_8;                              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_9;                              // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_10;                             // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_11;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_12;                             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_13;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bNewHUDVisibility;              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0040(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool bNewHUDVisibility)>       K2Node_CreateDelegate_OutputDelegate_1;            // 0x007C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_DestroyedActor;                 // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsAimingWeapon;                       // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHitscanWeaponActor*                    K2Node_Event_InTrackedWeapon;                      // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRenderOpacity_ReturnValue;             // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBP_HitScanWeaponInterface_C> K2Node_DynamicCast_AsBP_Hit_Scan_Weapon_Interface; // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EWeapons                                      CallFunc_GetWeaponType_WeaponType;                 // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     K2Node_Event_EventPayload;                         // 0x00C8(0x00B0)(ConstParm)
	int32                                         K2Node_Event_Hits;                                 // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair) == 0x000008, "Wrong alignment on WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair");
static_assert(sizeof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair) == 0x000190, "Wrong size on WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, EntryPoint) == 0x000000, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_bool_Variable) == 0x000004, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_byte_Variable) == 0x000005, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_byte_Variable_1) == 0x000006, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_byte_Variable_2) == 0x000007, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_byte_Variable_3) == 0x000018, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_byte_Variable_4) == 0x000019, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_byte_Variable_5) == 0x00001A, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_byte_Variable_6) == 0x00001B, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_byte_Variable_7) == 0x00001C, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_byte_Variable_8) == 0x00001D, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_byte_Variable_9) == 0x00001E, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_byte_Variable_10) == 0x00001F, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_byte_Variable_11) == 0x000020, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_byte_Variable_12) == 0x000021, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, Temp_byte_Variable_13) == 0x000022, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::Temp_byte_Variable_13' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_Event_IsDesignTime) == 0x000023, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_CustomEvent_bNewHUDVisibility) == 0x000024, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_CustomEvent_bNewHUDVisibility' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_PlayAnimation_ReturnValue) == 0x000028, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_Select_Default) == 0x000030, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000038, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_Event_MyGeometry) == 0x000040, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_Event_InDeltaTime) == 0x000078, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_CreateDelegate_OutputDelegate_1) == 0x00007C, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_CustomEvent_DestroyedActor) == 0x000090, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_CustomEvent_DestroyedActor' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_Select_Default_1) == 0x000098, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_Select_Default_2) == 0x000099, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_Event_IsAimingWeapon) == 0x00009A, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_Event_IsAimingWeapon' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_IsValid_ReturnValue) == 0x00009B, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_Event_InTrackedWeapon) == 0x0000A0, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_Event_InTrackedWeapon' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_GetRenderOpacity_ReturnValue) == 0x0000A8, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_GetRenderOpacity_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_DynamicCast_AsBP_Hit_Scan_Weapon_Interface) == 0x0000B0, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_DynamicCast_AsBP_Hit_Scan_Weapon_Interface' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_DynamicCast_bSuccess) == 0x0000C0, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x0000C1, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_GetWeaponType_WeaponType) == 0x0000C2, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_GetWeaponType_WeaponType' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_Not_PreBool_ReturnValue) == 0x0000C3, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_Event_EventPayload) == 0x0000C8, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_Event_EventPayload' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_Event_Hits) == 0x000178, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_Event_Hits' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_PlayAnimation_ReturnValue_1) == 0x000180, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_GetEndTime_ReturnValue) == 0x000188, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00018C, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function WBP_Crosshair.WBP_Crosshair_C.OnWeaponHit
// 0x00B8 (0x00B8 - 0x0000)
struct WBP_Crosshair_C_OnWeaponHit final
{
public:
	struct FGameplayEventData                     EventPayload;                                      // 0x0000(0x00B0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         Hits;                                              // 0x00B0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_C_OnWeaponHit) == 0x000008, "Wrong alignment on WBP_Crosshair_C_OnWeaponHit");
static_assert(sizeof(WBP_Crosshair_C_OnWeaponHit) == 0x0000B8, "Wrong size on WBP_Crosshair_C_OnWeaponHit");
static_assert(offsetof(WBP_Crosshair_C_OnWeaponHit, EventPayload) == 0x000000, "Member 'WBP_Crosshair_C_OnWeaponHit::EventPayload' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_OnWeaponHit, Hits) == 0x0000B0, "Member 'WBP_Crosshair_C_OnWeaponHit::Hits' has a wrong offset!");

// Function WBP_Crosshair.WBP_Crosshair_C.OnTrackedWeaponSet
// 0x0008 (0x0008 - 0x0000)
struct WBP_Crosshair_C_OnTrackedWeaponSet final
{
public:
	class AHitscanWeaponActor*                    InTrackedWeapon;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_C_OnTrackedWeaponSet) == 0x000008, "Wrong alignment on WBP_Crosshair_C_OnTrackedWeaponSet");
static_assert(sizeof(WBP_Crosshair_C_OnTrackedWeaponSet) == 0x000008, "Wrong size on WBP_Crosshair_C_OnTrackedWeaponSet");
static_assert(offsetof(WBP_Crosshair_C_OnTrackedWeaponSet, InTrackedWeapon) == 0x000000, "Member 'WBP_Crosshair_C_OnTrackedWeaponSet::InTrackedWeapon' has a wrong offset!");

// Function WBP_Crosshair.WBP_Crosshair_C.OnWeaponAimStateChanged
// 0x0001 (0x0001 - 0x0000)
struct WBP_Crosshair_C_OnWeaponAimStateChanged final
{
public:
	bool                                          IsAimingWeapon;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Crosshair_C_OnWeaponAimStateChanged) == 0x000001, "Wrong alignment on WBP_Crosshair_C_OnWeaponAimStateChanged");
static_assert(sizeof(WBP_Crosshair_C_OnWeaponAimStateChanged) == 0x000001, "Wrong size on WBP_Crosshair_C_OnWeaponAimStateChanged");
static_assert(offsetof(WBP_Crosshair_C_OnWeaponAimStateChanged, IsAimingWeapon) == 0x000000, "Member 'WBP_Crosshair_C_OnWeaponAimStateChanged::IsAimingWeapon' has a wrong offset!");

// Function WBP_Crosshair.WBP_Crosshair_C.OnTrackedWeaponDestroyed
// 0x0008 (0x0008 - 0x0000)
struct WBP_Crosshair_C_OnTrackedWeaponDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_C_OnTrackedWeaponDestroyed) == 0x000008, "Wrong alignment on WBP_Crosshair_C_OnTrackedWeaponDestroyed");
static_assert(sizeof(WBP_Crosshair_C_OnTrackedWeaponDestroyed) == 0x000008, "Wrong size on WBP_Crosshair_C_OnTrackedWeaponDestroyed");
static_assert(offsetof(WBP_Crosshair_C_OnTrackedWeaponDestroyed, DestroyedActor) == 0x000000, "Member 'WBP_Crosshair_C_OnTrackedWeaponDestroyed::DestroyedActor' has a wrong offset!");

// Function WBP_Crosshair.WBP_Crosshair_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_Crosshair_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_C_Tick) == 0x000004, "Wrong alignment on WBP_Crosshair_C_Tick");
static_assert(sizeof(WBP_Crosshair_C_Tick) == 0x00003C, "Wrong size on WBP_Crosshair_C_Tick");
static_assert(offsetof(WBP_Crosshair_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_Crosshair_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_Crosshair_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_Crosshair.WBP_Crosshair_C.PlayerHUDVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct WBP_Crosshair_C_PlayerHUDVisibilityChanged final
{
public:
	bool                                          bNewHUDVisibility;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Crosshair_C_PlayerHUDVisibilityChanged) == 0x000001, "Wrong alignment on WBP_Crosshair_C_PlayerHUDVisibilityChanged");
static_assert(sizeof(WBP_Crosshair_C_PlayerHUDVisibilityChanged) == 0x000001, "Wrong size on WBP_Crosshair_C_PlayerHUDVisibilityChanged");
static_assert(offsetof(WBP_Crosshair_C_PlayerHUDVisibilityChanged, bNewHUDVisibility) == 0x000000, "Member 'WBP_Crosshair_C_PlayerHUDVisibilityChanged::bNewHUDVisibility' has a wrong offset!");

// Function WBP_Crosshair.WBP_Crosshair_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_Crosshair_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Crosshair_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_Crosshair_C_PreConstruct");
static_assert(sizeof(WBP_Crosshair_C_PreConstruct) == 0x000001, "Wrong size on WBP_Crosshair_C_PreConstruct");
static_assert(offsetof(WBP_Crosshair_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_Crosshair_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_Crosshair.WBP_Crosshair_C.UpdateWeaponSpread
// 0x0050 (0x0050 - 0x0000)
struct WBP_Crosshair_C_UpdateWeaponSpread final
{
public:
	TScriptInterface<class IBP_HitScanWeaponInterface_C> K2Node_DynamicCast_AsBP_Hit_Scan_Weapon_Interface; // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurrentSpreadPixelAdjustment_Pixels;   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentSpreadPixelAdjustment_Screen_Percentage; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetViewportScale_ReturnValue;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_2;               // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_3;               // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_C_UpdateWeaponSpread) == 0x000008, "Wrong alignment on WBP_Crosshair_C_UpdateWeaponSpread");
static_assert(sizeof(WBP_Crosshair_C_UpdateWeaponSpread) == 0x000050, "Wrong size on WBP_Crosshair_C_UpdateWeaponSpread");
static_assert(offsetof(WBP_Crosshair_C_UpdateWeaponSpread, K2Node_DynamicCast_AsBP_Hit_Scan_Weapon_Interface) == 0x000000, "Member 'WBP_Crosshair_C_UpdateWeaponSpread::K2Node_DynamicCast_AsBP_Hit_Scan_Weapon_Interface' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_UpdateWeaponSpread, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WBP_Crosshair_C_UpdateWeaponSpread::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_UpdateWeaponSpread, CallFunc_GetCurrentSpreadPixelAdjustment_Pixels) == 0x000014, "Member 'WBP_Crosshair_C_UpdateWeaponSpread::CallFunc_GetCurrentSpreadPixelAdjustment_Pixels' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_UpdateWeaponSpread, CallFunc_GetCurrentSpreadPixelAdjustment_Screen_Percentage) == 0x000018, "Member 'WBP_Crosshair_C_UpdateWeaponSpread::CallFunc_GetCurrentSpreadPixelAdjustment_Screen_Percentage' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_UpdateWeaponSpread, CallFunc_FMax_ReturnValue) == 0x00001C, "Member 'WBP_Crosshair_C_UpdateWeaponSpread::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_UpdateWeaponSpread, CallFunc_GetViewportScale_ReturnValue) == 0x000020, "Member 'WBP_Crosshair_C_UpdateWeaponSpread::CallFunc_GetViewportScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_UpdateWeaponSpread, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000024, "Member 'WBP_Crosshair_C_UpdateWeaponSpread::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_UpdateWeaponSpread, CallFunc_MakeVector2D_ReturnValue) == 0x000028, "Member 'WBP_Crosshair_C_UpdateWeaponSpread::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_UpdateWeaponSpread, CallFunc_MakeVector2D_ReturnValue_1) == 0x000030, "Member 'WBP_Crosshair_C_UpdateWeaponSpread::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_UpdateWeaponSpread, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000038, "Member 'WBP_Crosshair_C_UpdateWeaponSpread::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_UpdateWeaponSpread, CallFunc_MakeVector2D_ReturnValue_2) == 0x00003C, "Member 'WBP_Crosshair_C_UpdateWeaponSpread::CallFunc_MakeVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_UpdateWeaponSpread, CallFunc_MakeVector2D_ReturnValue_3) == 0x000044, "Member 'WBP_Crosshair_C_UpdateWeaponSpread::CallFunc_MakeVector2D_ReturnValue_3' has a wrong offset!");

}

