#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Player_Opportunity_Target

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "ObsidianFox_structs.hpp"
#include "ObsidianFox_classes.hpp"
#include "SpecialHitReactions_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Player_Opportunity_Target.GA_Player_Opportunity_Target_C
// 0x0170 (0x0530 - 0x03C0)
class UGA_Player_Opportunity_Target_C : public UGameplayAbility_Passive
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABP_OpportunityPickup_C*                OpportunityActor;                                  // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityTargetDataHandle       ThrowTargetData;                                   // 0x03D0(0x0028)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	struct FCollisionProfileName                  Trace_Profile;                                     // 0x03F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         Max_Range;                                         // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time_Held;                                         // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   AimCameraModifierClass;                            // 0x0408(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UCameraModifier*                        Aim_Camera_Modifier;                               // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            FocusWalkGE;                                       // 0x0438(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Collision_Radius;                                  // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndLocation;                                       // 0x0444(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Base_Spread;                                       // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Aim_Socket_Name;                                   // 0x0454(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ProjectedTargetingTask;                            // 0x045C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeHeldForMaxAccuracy;                            // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InputReleased;                                     // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_469[0x7];                                      // 0x0469(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       ArchSpline;                                        // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            ArchMesh;                                          // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Position;                                          // 0x0480(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineMeshComponent*                   ArchSplineMeshComponent;                           // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   HitLocationPointLight;                             // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ArchTrashActor;                                    // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USplineMeshComponent*>           ArchSplineMeshComponentArray;                      // 0x04A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          TargetSnapping;                                    // 0x04B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B9[0x3];                                      // 0x04B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Throw_Range;                                       // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseRaisingThrowSpeed;                             // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C1[0x3];                                      // 0x04C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Opportunity_Input_Tag;                             // 0x04C4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CC[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputAction*                           Input_Action;                                      // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Target_HUD_Interp_Speed;                           // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              Desired_Hit_Reaction;                              // 0x04DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESpecialHitReactions                          Special_Hit_Reaction;                              // 0x04DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DE[0x2];                                      // 0x04DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Target_Blocked_Gameplay_Tags;                      // 0x04E0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayAbilityTargetDataHandle       Latest_Valid_Data;                                 // 0x0500(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 Hit_Gameplay_Effect_Class;                         // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GA_Player_Opportunity_Target(int32 EntryPoint);
	void Initialize();
	void K2_OnEndAbility(bool bWasCancelled);
	void K2_ActivateAbility();
	void Throw_and_Release();
	void StartTargeting();
	void Throw(const struct FGameplayAbilityTargetDataHandle& TargetData);
	void Opporunity_Grabbed(const struct FGameplayEventData& GameplayEventData);
	void LoadCompleteDelegate_3C97D07D41CF080C7294069359CD008A(const TArray<class UClass*>& LoadedAssets);
	void Started_3061E3EC4824D719C9FE5AB2A6BFCD55();
	void Ongoing_3061E3EC4824D719C9FE5AB2A6BFCD55();
	void Canceled_3061E3EC4824D719C9FE5AB2A6BFCD55();
	void Triggered_3061E3EC4824D719C9FE5AB2A6BFCD55();
	void Completed_3061E3EC4824D719C9FE5AB2A6BFCD55();
	void NoInput_3061E3EC4824D719C9FE5AB2A6BFCD55();
	void Triggered_3BA3748F4DF5EF752C243D839B43ABDC(bool Value, float ElapsedTime, float TriggeredSeconds);
	void Added_BD446D444F5B37AA7CE7F2AE82A99540();
	void OnFinish_6EB14B214B9D644E9BE539A302818712();
	void ValidData_D29F2F3E47671C62A7094DBE01DA27C4(const struct FGameplayAbilityTargetDataHandle& Data);
	void Cancelled_D29F2F3E47671C62A7094DBE01DA27C4(const struct FGameplayAbilityTargetDataHandle& Data);
	void EventReceived_9CE976F042CB624002D9E6B37C1EC3FD(const struct FGameplayEventData& Payload);
	void EventReceived_B40B24FA4C5DD181A7380E85AF9DA26D(const struct FGameplayEventData& Payload);
	float CalculateThrowSpread();
	class UCameraModifier* Establish_Camera_Modifier(class UClass*& CameraModifierClass);
	void Remove_Camera_modifier(class UCameraModifier*& CameraModifierRef, bool bImmediate);
	void ApplyFocusWalkGE();
	void RemoveFocusWalkGE();
	void InitializeOpportunityThrowingValues(const struct FGameplayAbilityTargetDataHandle& TargetData);
	void Project_Projectile_Path(const struct FGameplayAbilityTargetDataHandle& TargetData, struct FHitResult* OutHit, TArray<struct FVector>* OutPathPositions, struct FVector* LastTraceDestination);
	void Resolve_Hit_Gameplay_Effect(class UClass** Gameplay_Effect);
	struct FVector GetArcingAimStartLocation();
	void AddArchComponents();
	void UpdateArchComponents(const TArray<struct FVector>& Points, TArray<struct FVector>& Array);
	void IncreaseThrowRange();
	void Create_Effect_Spec(TSubclassOf<class UGameplayEffect> GameplayEffectClass, const struct FGameplayAbilityTargetDataHandle& TargetData, struct FGameplayEffectSpecHandle* Gameplay_Effect_Spec, struct FGameplayEffectContextHandle* Gameplay_Effect_Context);
	void AddHitReactionToTarget(struct FGameplayEventData& GameplayEventData, const struct FGameplayEffectContextHandle& ContextHandle);
	void Add_Force_Feedback(const struct FGameplayEventData& GameplayEventData);
	void Apply_Hit_Effects_On_Target(struct FGameplayEventData& GameplayEventData);

	struct FGameplayTargetDataFilterHandle GetTargetFilter() const;
	class UHitReactionDataObject_C* MakeHitReactionDataObject() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Player_Opportunity_Target_C">();
	}
	static class UGA_Player_Opportunity_Target_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Player_Opportunity_Target_C>();
	}
};
static_assert(alignof(UGA_Player_Opportunity_Target_C) == 0x000008, "Wrong alignment on UGA_Player_Opportunity_Target_C");
static_assert(sizeof(UGA_Player_Opportunity_Target_C) == 0x000530, "Wrong size on UGA_Player_Opportunity_Target_C");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, UberGraphFrame) == 0x0003C0, "Member 'UGA_Player_Opportunity_Target_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, OpportunityActor) == 0x0003C8, "Member 'UGA_Player_Opportunity_Target_C::OpportunityActor' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, ThrowTargetData) == 0x0003D0, "Member 'UGA_Player_Opportunity_Target_C::ThrowTargetData' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, Trace_Profile) == 0x0003F8, "Member 'UGA_Player_Opportunity_Target_C::Trace_Profile' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, Max_Range) == 0x000400, "Member 'UGA_Player_Opportunity_Target_C::Max_Range' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, Time_Held) == 0x000404, "Member 'UGA_Player_Opportunity_Target_C::Time_Held' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, AimCameraModifierClass) == 0x000408, "Member 'UGA_Player_Opportunity_Target_C::AimCameraModifierClass' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, Aim_Camera_Modifier) == 0x000430, "Member 'UGA_Player_Opportunity_Target_C::Aim_Camera_Modifier' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, FocusWalkGE) == 0x000438, "Member 'UGA_Player_Opportunity_Target_C::FocusWalkGE' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, Collision_Radius) == 0x000440, "Member 'UGA_Player_Opportunity_Target_C::Collision_Radius' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, EndLocation) == 0x000444, "Member 'UGA_Player_Opportunity_Target_C::EndLocation' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, Base_Spread) == 0x000450, "Member 'UGA_Player_Opportunity_Target_C::Base_Spread' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, Aim_Socket_Name) == 0x000454, "Member 'UGA_Player_Opportunity_Target_C::Aim_Socket_Name' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, ProjectedTargetingTask) == 0x00045C, "Member 'UGA_Player_Opportunity_Target_C::ProjectedTargetingTask' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, TimeHeldForMaxAccuracy) == 0x000464, "Member 'UGA_Player_Opportunity_Target_C::TimeHeldForMaxAccuracy' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, InputReleased) == 0x000468, "Member 'UGA_Player_Opportunity_Target_C::InputReleased' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, ArchSpline) == 0x000470, "Member 'UGA_Player_Opportunity_Target_C::ArchSpline' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, ArchMesh) == 0x000478, "Member 'UGA_Player_Opportunity_Target_C::ArchMesh' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, Position) == 0x000480, "Member 'UGA_Player_Opportunity_Target_C::Position' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, ArchSplineMeshComponent) == 0x000490, "Member 'UGA_Player_Opportunity_Target_C::ArchSplineMeshComponent' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, HitLocationPointLight) == 0x000498, "Member 'UGA_Player_Opportunity_Target_C::HitLocationPointLight' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, ArchTrashActor) == 0x0004A0, "Member 'UGA_Player_Opportunity_Target_C::ArchTrashActor' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, ArchSplineMeshComponentArray) == 0x0004A8, "Member 'UGA_Player_Opportunity_Target_C::ArchSplineMeshComponentArray' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, TargetSnapping) == 0x0004B8, "Member 'UGA_Player_Opportunity_Target_C::TargetSnapping' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, Throw_Range) == 0x0004BC, "Member 'UGA_Player_Opportunity_Target_C::Throw_Range' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, bUseRaisingThrowSpeed) == 0x0004C0, "Member 'UGA_Player_Opportunity_Target_C::bUseRaisingThrowSpeed' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, Opportunity_Input_Tag) == 0x0004C4, "Member 'UGA_Player_Opportunity_Target_C::Opportunity_Input_Tag' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, Input_Action) == 0x0004D0, "Member 'UGA_Player_Opportunity_Target_C::Input_Action' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, Target_HUD_Interp_Speed) == 0x0004D8, "Member 'UGA_Player_Opportunity_Target_C::Target_HUD_Interp_Speed' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, Desired_Hit_Reaction) == 0x0004DC, "Member 'UGA_Player_Opportunity_Target_C::Desired_Hit_Reaction' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, Special_Hit_Reaction) == 0x0004DD, "Member 'UGA_Player_Opportunity_Target_C::Special_Hit_Reaction' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, Target_Blocked_Gameplay_Tags) == 0x0004E0, "Member 'UGA_Player_Opportunity_Target_C::Target_Blocked_Gameplay_Tags' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, Latest_Valid_Data) == 0x000500, "Member 'UGA_Player_Opportunity_Target_C::Latest_Valid_Data' has a wrong offset!");
static_assert(offsetof(UGA_Player_Opportunity_Target_C, Hit_Gameplay_Effect_Class) == 0x000528, "Member 'UGA_Player_Opportunity_Target_C::Hit_Gameplay_Effect_Class' has a wrong offset!");

}

