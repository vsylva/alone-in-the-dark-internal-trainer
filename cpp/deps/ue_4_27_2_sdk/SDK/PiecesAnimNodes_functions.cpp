#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PiecesAnimNodes

#include "Basic.hpp"

#include "PiecesAnimNodes_classes.hpp"
#include "PiecesAnimNodes_parameters.hpp"


namespace SDK
{

// Function PiecesAnimNodes.AnimationTagComponent.AddTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Caller                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimationTagComponent::AddTag(const class UObject* Caller, const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimationTagComponent", "AddTag");

	Params::AnimationTagComponent_AddTag Parms{};

	Parms.Caller = Caller;
	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PiecesAnimNodes.AnimationTagComponent.RemoveTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Caller                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimationTagComponent::RemoveTag(const class UObject* Caller, const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimationTagComponent", "RemoveTag");

	Params::AnimationTagComponent_RemoveTag Parms{};

	Parms.Caller = Caller;
	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PiecesAnimNodes.AnimationTagComponent.GetNumReferencersForTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UAnimationTagComponent::GetNumReferencersForTag(const struct FGameplayTag& Tag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimationTagComponent", "GetNumReferencersForTag");

	Params::AnimationTagComponent_GetNumReferencersForTag Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesAnimNodes.AnimationTagComponent.HasTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimationTagComponent::HasTag(const struct FGameplayTag& Tag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimationTagComponent", "HasTag");

	Params::AnimationTagComponent_HasTag Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesAnimNodes.BPAsyncAction_PlayMontageBase.OnBlendOutAllowedNotifyStateChangedHandler
// (Final, Native, Private)
// Parameters:
// class UAnimSequenceBase*                Sequence                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNotifyBegin                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBPAsyncAction_PlayMontageBase::OnBlendOutAllowedNotifyStateChangedHandler(const class UAnimSequenceBase* Sequence, bool bNotifyBegin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPAsyncAction_PlayMontageBase", "OnBlendOutAllowedNotifyStateChangedHandler");

	Params::BPAsyncAction_PlayMontageBase_OnBlendOutAllowedNotifyStateChangedHandler Parms{};

	Parms.Sequence = Sequence;
	Parms.bNotifyBegin = bNotifyBegin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PiecesAnimNodes.BPAsyncAction_PlayMontageBase.OnMontageBlendingOut
// (Final, Native, Private)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBPAsyncAction_PlayMontageBase::OnMontageBlendingOut(class UAnimMontage* Montage, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPAsyncAction_PlayMontageBase", "OnMontageBlendingOut");

	Params::BPAsyncAction_PlayMontageBase_OnMontageBlendingOut Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PiecesAnimNodes.BPAsyncAction_PlayMontageBase.OnMontageEnded
// (Final, Native, Private)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBPAsyncAction_PlayMontageBase::OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPAsyncAction_PlayMontageBase", "OnMontageEnded");

	Params::BPAsyncAction_PlayMontageBase_OnMontageEnded Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PiecesAnimNodes.BPAsyncAction_PlayMontageBase.OnMontageNotifyBegin
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBranchingPointNotifyPayload     BranchingPointPayload                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBPAsyncAction_PlayMontageBase::OnMontageNotifyBegin(class FName NotifyName, const struct FBranchingPointNotifyPayload& BranchingPointPayload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPAsyncAction_PlayMontageBase", "OnMontageNotifyBegin");

	Params::BPAsyncAction_PlayMontageBase_OnMontageNotifyBegin Parms{};

	Parms.NotifyName = NotifyName;
	Parms.BranchingPointPayload = std::move(BranchingPointPayload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PiecesAnimNodes.BPAsyncAction_PlayMontageBase.OnMontageNotifyEnd
// (Final, Native, Private, HasOutParams)
// Parameters:
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBranchingPointNotifyPayload     BranchingPointPayload                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBPAsyncAction_PlayMontageBase::OnMontageNotifyEnd(class FName NotifyName, const struct FBranchingPointNotifyPayload& BranchingPointPayload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPAsyncAction_PlayMontageBase", "OnMontageNotifyEnd");

	Params::BPAsyncAction_PlayMontageBase_OnMontageNotifyEnd Parms{};

	Parms.NotifyName = NotifyName;
	Parms.BranchingPointPayload = std::move(BranchingPointPayload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PiecesAnimNodes.PiecesAnimInstance.BlueprintUpdateAnimationStaggered
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPiecesAnimInstance::BlueprintUpdateAnimationStaggered(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesAnimInstance", "BlueprintUpdateAnimationStaggered");

	Params::PiecesAnimInstance_BlueprintUpdateAnimationStaggered Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PiecesAnimNodes.PiecesAnimInstance.GetEarlyBlendOutPossible
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   MachineIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TransitionIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPiecesAnimInstance::GetEarlyBlendOutPossible(int32 MachineIndex, int32 TransitionIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesAnimInstance", "GetEarlyBlendOutPossible");

	Params::PiecesAnimInstance_GetEarlyBlendOutPossible Parms{};

	Parms.MachineIndex = MachineIndex;
	Parms.TransitionIndex = TransitionIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesAnimNodes.PiecesAnimInstance.GetRecordedComponentSpaceTransform
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             BoneName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SnapshotName                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UPiecesAnimInstance::GetRecordedComponentSpaceTransform(const class FName& BoneName, const class FName& SnapshotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesAnimInstance", "GetRecordedComponentSpaceTransform");

	Params::PiecesAnimInstance_GetRecordedComponentSpaceTransform Parms{};

	Parms.BoneName = BoneName;
	Parms.SnapshotName = SnapshotName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesAnimNodes.PiecesAnimInstance.IsSlotPlayingMontage
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             SlotName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPiecesAnimInstance::IsSlotPlayingMontage(const class FName& SlotName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesAnimInstance", "IsSlotPlayingMontage");

	Params::PiecesAnimInstance_IsSlotPlayingMontage Parms{};

	Parms.SlotName = SlotName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesAnimNodes.AbilityTask_PiecesPlayMontageAndWait.PiecesPlayMontageAndWait
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameplayAbility*                 OwningAbility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TaskInstanceName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     InMontageToPlay                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InRate                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InStartSection                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInStopWhenAbilityEnds                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InAnimRootMotionTranslationScale                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InStartTimeSeconds                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAbilityTask_PiecesPlayMontageAndWait*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAbilityTask_PiecesPlayMontageAndWait* UAbilityTask_PiecesPlayMontageAndWait::PiecesPlayMontageAndWait(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, class UAnimMontage* InMontageToPlay, float InRate, class FName InStartSection, bool bInStopWhenAbilityEnds, float InAnimRootMotionTranslationScale, float InStartTimeSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AbilityTask_PiecesPlayMontageAndWait", "PiecesPlayMontageAndWait");

	Params::AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait Parms{};

	Parms.OwningAbility = OwningAbility;
	Parms.TaskInstanceName = TaskInstanceName;
	Parms.InMontageToPlay = InMontageToPlay;
	Parms.InRate = InRate;
	Parms.InStartSection = InStartSection;
	Parms.bInStopWhenAbilityEnds = bInStopWhenAbilityEnds;
	Parms.InAnimRootMotionTranslationScale = InAnimRootMotionTranslationScale;
	Parms.InStartTimeSeconds = InStartTimeSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesAnimNodes.AbilityTask_PiecesPlayMontageAndWait.OnBlendOutAllowedNotifyStateChangedHandler
// (Final, Native, Protected)
// Parameters:
// class UAnimSequenceBase*                Sequence                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNotifyBegin                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAbilityTask_PiecesPlayMontageAndWait::OnBlendOutAllowedNotifyStateChangedHandler(const class UAnimSequenceBase* Sequence, bool bNotifyBegin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AbilityTask_PiecesPlayMontageAndWait", "OnBlendOutAllowedNotifyStateChangedHandler");

	Params::AbilityTask_PiecesPlayMontageAndWait_OnBlendOutAllowedNotifyStateChangedHandler Parms{};

	Parms.Sequence = Sequence;
	Parms.bNotifyBegin = bNotifyBegin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PiecesAnimNodes.AnimNotifyState_PlaySound.OnMontageBlendingOut
// (Final, Native, Protected, Const)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimNotifyState_PlaySound::OnMontageBlendingOut(class UAnimMontage* Montage, bool bInterrupted) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimNotifyState_PlaySound", "OnMontageBlendingOut");

	Params::AnimNotifyState_PlaySound_OnMontageBlendingOut Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PiecesAnimNodes.BarkCollectionFunctionLibrary.GetBarkMontageFromCollection
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       Character                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBarkCollection                  Collection                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UAnimMontage>      ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UAnimMontage> UBarkCollectionFunctionLibrary::GetBarkMontageFromCollection(const class ACharacter* Character, const struct FBarkCollection& Collection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BarkCollectionFunctionLibrary", "GetBarkMontageFromCollection");

	Params::BarkCollectionFunctionLibrary_GetBarkMontageFromCollection Parms{};

	Parms.Character = Character;
	Parms.Collection = std::move(Collection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesAnimNodes.BarkCollectionFunctionLibrary.GetBarkMontageFromCollectionForMeshComponent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class USkeletalMeshComponent*           MeshComponent                                          (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBarkCollection                  Collection                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UAnimMontage>      ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UAnimMontage> UBarkCollectionFunctionLibrary::GetBarkMontageFromCollectionForMeshComponent(const class USkeletalMeshComponent* MeshComponent, const struct FBarkCollection& Collection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BarkCollectionFunctionLibrary", "GetBarkMontageFromCollectionForMeshComponent");

	Params::BarkCollectionFunctionLibrary_GetBarkMontageFromCollectionForMeshComponent Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.Collection = std::move(Collection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesAnimNodes.BPAsyncAction_PiecesPlayMontage.MontagePlay
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           InSkeletalMesh                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     MontageToPlay                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartingPosition                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StartingSection                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBPAsyncAction_PiecesPlayMontage* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBPAsyncAction_PiecesPlayMontage* UBPAsyncAction_PiecesPlayMontage::MontagePlay(class USkeletalMeshComponent* InSkeletalMesh, class UAnimMontage* MontageToPlay, float PlayRate, float StartingPosition, const class FName StartingSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPAsyncAction_PiecesPlayMontage", "MontagePlay");

	Params::BPAsyncAction_PiecesPlayMontage_MontagePlay Parms{};

	Parms.InSkeletalMesh = InSkeletalMesh;
	Parms.MontageToPlay = MontageToPlay;
	Parms.PlayRate = PlayRate;
	Parms.StartingPosition = StartingPosition;
	Parms.StartingSection = StartingSection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesAnimNodes.BPAsyncAction_PiecesPlayBarkCollection.PlayBarkCollection
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       Character                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBarkCollection                  BarkCollection                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EBarkPriority                           BarkPriority                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBPAsyncAction_PiecesPlayMontage* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBPAsyncAction_PiecesPlayMontage* UBPAsyncAction_PiecesPlayBarkCollection::PlayBarkCollection(const class ACharacter* Character, const struct FBarkCollection& BarkCollection, EBarkPriority BarkPriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPAsyncAction_PiecesPlayBarkCollection", "PlayBarkCollection");

	Params::BPAsyncAction_PiecesPlayBarkCollection_PlayBarkCollection Parms{};

	Parms.Character = Character;
	Parms.BarkCollection = std::move(BarkCollection);
	Parms.BarkPriority = BarkPriority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesAnimNodes.EngineSubsystem_Barks.ClearRegisteredBarks
// (Final, Native, Public, BlueprintCallable)

void UEngineSubsystem_Barks::ClearRegisteredBarks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EngineSubsystem_Barks", "ClearRegisteredBarks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PiecesAnimNodes.EngineSubsystem_Barks.RegisterBarkPlayed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             BarkIdentifier                                         (ConstParm, Parm, NativeAccessSpecifierPublic)

void UEngineSubsystem_Barks::RegisterBarkPlayed(const class FText& BarkIdentifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EngineSubsystem_Barks", "RegisterBarkPlayed");

	Params::EngineSubsystem_Barks_RegisterBarkPlayed Parms{};

	Parms.BarkIdentifier = std::move(BarkIdentifier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PiecesAnimNodes.EngineSubsystem_Barks.GetRandomBarkWeighted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FText>                     Candidates                                             (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UEngineSubsystem_Barks::GetRandomBarkWeighted(const TArray<class FText>& Candidates) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EngineSubsystem_Barks", "GetRandomBarkWeighted");

	Params::EngineSubsystem_Barks_GetRandomBarkWeighted Parms{};

	Parms.Candidates = std::move(Candidates);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesAnimNodes.MotionWarpingComponent.RemoveMotionWarpingTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     MotionIdentifier                                       (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMotionWarpingComponent::RemoveMotionWarpingTarget(const struct FGameplayTag& MotionIdentifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MotionWarpingComponent", "RemoveMotionWarpingTarget");

	Params::MotionWarpingComponent_RemoveMotionWarpingTarget Parms{};

	Parms.MotionIdentifier = std::move(MotionIdentifier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PiecesAnimNodes.MotionWarpingComponent.SetMotionWarpingTarget
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     MotionIdentifier                                       (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       TransformTarget                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   DataLifeTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMotionWarpingComponent::SetMotionWarpingTarget(const struct FGameplayTag& MotionIdentifier, const struct FTransform& TransformTarget, float DataLifeTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MotionWarpingComponent", "SetMotionWarpingTarget");

	Params::MotionWarpingComponent_SetMotionWarpingTarget Parms{};

	Parms.MotionIdentifier = std::move(MotionIdentifier);
	Parms.TransformTarget = std::move(TransformTarget);
	Parms.DataLifeTime = DataLifeTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PiecesAnimNodes.MotionWarpingInterface.RemoveMotionWarpingTarget
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     MotionIdentifier                                       (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMotionWarpingInterface::RemoveMotionWarpingTarget(const struct FGameplayTag& MotionIdentifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MotionWarpingInterface", "RemoveMotionWarpingTarget");

	Params::MotionWarpingInterface_RemoveMotionWarpingTarget Parms{};

	Parms.MotionIdentifier = std::move(MotionIdentifier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PiecesAnimNodes.MotionWarpingInterface.SetMotionWarpingTarget
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     MotionIdentifier                                       (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       TransformTarget                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   DataLifeTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMotionWarpingInterface::SetMotionWarpingTarget(const struct FGameplayTag& MotionIdentifier, const struct FTransform& TransformTarget, float DataLifeTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MotionWarpingInterface", "SetMotionWarpingTarget");

	Params::MotionWarpingInterface_SetMotionWarpingTarget Parms{};

	Parms.MotionIdentifier = std::move(MotionIdentifier);
	Parms.TransformTarget = std::move(TransformTarget);
	Parms.DataLifeTime = DataLifeTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PiecesAnimNodes.PiecesAnimationBarkFunctionLibrary.GetBarkMontageBPNodeHelperFunction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<TSoftObjectPtr<class UAnimMontage>>SelectedMontages                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
// class ACharacter*                       Character                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPlayMontage                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBarkPriority                           Priority                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UPiecesAnimationBarkFunctionLibrary::GetBarkMontageBPNodeHelperFunction(const TArray<TSoftObjectPtr<class UAnimMontage>>& SelectedMontages, const class ACharacter* Character, bool bPlayMontage, EBarkPriority Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PiecesAnimationBarkFunctionLibrary", "GetBarkMontageBPNodeHelperFunction");

	Params::PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunction Parms{};

	Parms.SelectedMontages = std::move(SelectedMontages);
	Parms.Character = Character;
	Parms.bPlayMontage = bPlayMontage;
	Parms.Priority = Priority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesAnimNodes.PiecesAnimationBarkFunctionLibrary.GetBarkMontageBPNodeHelperFunctionLoadAsync
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<TSoftObjectPtr<class UAnimMontage>>SelectedMontages                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
// class ACharacter*                       Character                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPlayMontage                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBarkPriority                           Priority                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UAnimMontage>      ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UAnimMontage> UPiecesAnimationBarkFunctionLibrary::GetBarkMontageBPNodeHelperFunctionLoadAsync(const TArray<TSoftObjectPtr<class UAnimMontage>>& SelectedMontages, const class ACharacter* Character, bool bPlayMontage, EBarkPriority Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PiecesAnimationBarkFunctionLibrary", "GetBarkMontageBPNodeHelperFunctionLoadAsync");

	Params::PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunctionLoadAsync Parms{};

	Parms.SelectedMontages = std::move(SelectedMontages);
	Parms.Character = Character;
	Parms.bPlayMontage = bPlayMontage;
	Parms.Priority = Priority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesAnimNodes.PiecesAnimationBarkInterface.ClearOverrideFaceBlendWeightForBarks
// (Event, Public, BlueprintCallable, BlueprintEvent)

void IPiecesAnimationBarkInterface::ClearOverrideFaceBlendWeightForBarks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesAnimationBarkInterface", "ClearOverrideFaceBlendWeightForBarks");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PiecesAnimNodes.PiecesAnimationBarkInterface.GetCurrentPlayingBark
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UAnimMontage>      ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UAnimMontage> IPiecesAnimationBarkInterface::GetCurrentPlayingBark()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesAnimationBarkInterface", "GetCurrentPlayingBark");

	Params::PiecesAnimationBarkInterface_GetCurrentPlayingBark Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PiecesAnimNodes.PiecesAnimationBarkInterface.OnBarkFinished
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     BarkMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPiecesAnimationBarkInterface::OnBarkFinished(class UAnimMontage* BarkMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesAnimationBarkInterface", "OnBarkFinished");

	Params::PiecesAnimationBarkInterface_OnBarkFinished Parms{};

	Parms.BarkMontage = BarkMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PiecesAnimNodes.PiecesAnimationBarkInterface.OverrideFaceBlendWeightForBarks
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   OverrideWeight                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPiecesAnimationBarkInterface::OverrideFaceBlendWeightForBarks(float OverrideWeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesAnimationBarkInterface", "OverrideFaceBlendWeightForBarks");

	Params::PiecesAnimationBarkInterface_OverrideFaceBlendWeightForBarks Parms{};

	Parms.OverrideWeight = OverrideWeight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PiecesAnimNodes.PiecesAnimationBarkInterface.StopBark
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UAnimMontage>      BarkMontage                                            (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPiecesAnimationBarkInterface::StopBark(const TSoftObjectPtr<class UAnimMontage>& BarkMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PiecesAnimationBarkInterface", "StopBark");

	Params::PiecesAnimationBarkInterface_StopBark Parms{};

	Parms.BarkMontage = BarkMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PiecesAnimNodes.PiecesAnimationBlueprintFunctionLibrary.PauseDynamics
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPiecesAnimationBlueprintFunctionLibrary::PauseDynamics(class UAnimInstance* AnimInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PiecesAnimationBlueprintFunctionLibrary", "PauseDynamics");

	Params::PiecesAnimationBlueprintFunctionLibrary_PauseDynamics Parms{};

	Parms.AnimInstance = AnimInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PiecesAnimNodes.PiecesAnimationBlueprintFunctionLibrary.ResumeDynamics
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPiecesAnimationBlueprintFunctionLibrary::ResumeDynamics(class UAnimInstance* AnimInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PiecesAnimationBlueprintFunctionLibrary", "ResumeDynamics");

	Params::PiecesAnimationBlueprintFunctionLibrary_ResumeDynamics Parms{};

	Parms.AnimInstance = AnimInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

