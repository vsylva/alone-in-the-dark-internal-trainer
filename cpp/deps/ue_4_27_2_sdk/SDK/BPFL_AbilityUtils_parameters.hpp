#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_AbilityUtils

#include "Basic.hpp"

#include "EWeapons_structs.hpp"


namespace SDK::Params
{

// Function BPFL_AbilityUtils.BPFL_AbilityUtils_C.Is 2Handed Melee
// 0x0050 (0x0050 - 0x0000)
struct BPFL_AbilityUtils_C_Is_2Handed_Melee final
{
public:
	class ACharacter*                             OwnerCharacter;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Value;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWeaponAnimationComponent*              CallFunc_GetComponentByClass_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMeleeWeaponActor*                      K2Node_DynamicCast_AsMelee_Weapon_Actor;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MeleeWeapon_C>    K2Node_DynamicCast_AsBPI_Melee_Weapon;             // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTwoHanded_Value;                        // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPFL_AbilityUtils_C_Is_2Handed_Melee) == 0x000008, "Wrong alignment on BPFL_AbilityUtils_C_Is_2Handed_Melee");
static_assert(sizeof(BPFL_AbilityUtils_C_Is_2Handed_Melee) == 0x000050, "Wrong size on BPFL_AbilityUtils_C_Is_2Handed_Melee");
static_assert(offsetof(BPFL_AbilityUtils_C_Is_2Handed_Melee, OwnerCharacter) == 0x000000, "Member 'BPFL_AbilityUtils_C_Is_2Handed_Melee::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(BPFL_AbilityUtils_C_Is_2Handed_Melee, __WorldContext) == 0x000008, "Member 'BPFL_AbilityUtils_C_Is_2Handed_Melee::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_AbilityUtils_C_Is_2Handed_Melee, Value) == 0x000010, "Member 'BPFL_AbilityUtils_C_Is_2Handed_Melee::Value' has a wrong offset!");
static_assert(offsetof(BPFL_AbilityUtils_C_Is_2Handed_Melee, CallFunc_GetComponentByClass_ReturnValue) == 0x000018, "Member 'BPFL_AbilityUtils_C_Is_2Handed_Melee::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AbilityUtils_C_Is_2Handed_Melee, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BPFL_AbilityUtils_C_Is_2Handed_Melee::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AbilityUtils_C_Is_2Handed_Melee, K2Node_DynamicCast_AsMelee_Weapon_Actor) == 0x000028, "Member 'BPFL_AbilityUtils_C_Is_2Handed_Melee::K2Node_DynamicCast_AsMelee_Weapon_Actor' has a wrong offset!");
static_assert(offsetof(BPFL_AbilityUtils_C_Is_2Handed_Melee, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BPFL_AbilityUtils_C_Is_2Handed_Melee::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_AbilityUtils_C_Is_2Handed_Melee, K2Node_DynamicCast_AsBPI_Melee_Weapon) == 0x000038, "Member 'BPFL_AbilityUtils_C_Is_2Handed_Melee::K2Node_DynamicCast_AsBPI_Melee_Weapon' has a wrong offset!");
static_assert(offsetof(BPFL_AbilityUtils_C_Is_2Handed_Melee, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'BPFL_AbilityUtils_C_Is_2Handed_Melee::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BPFL_AbilityUtils_C_Is_2Handed_Melee, CallFunc_IsTwoHanded_Value) == 0x000049, "Member 'BPFL_AbilityUtils_C_Is_2Handed_Melee::CallFunc_IsTwoHanded_Value' has a wrong offset!");

// Function BPFL_AbilityUtils.BPFL_AbilityUtils_C.Get Hitscan Weapon Type
// 0x0040 (0x0040 - 0x0000)
struct BPFL_AbilityUtils_C_Get_Hitscan_Weapon_Type final
{
public:
	class ACharacter*                             OwnerCharacter;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasHitscanWeapon;                                  // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EWeapons                                      WeaponType;                                        // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWeaponAnimationComponent*              CallFunc_GetComponentByClass_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBP_HitScanWeaponInterface_C> K2Node_DynamicCast_AsBP_Hit_Scan_Weapon_Interface; // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EWeapons                                      CallFunc_GetWeaponType_WeaponType;                 // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_AbilityUtils_C_Get_Hitscan_Weapon_Type) == 0x000008, "Wrong alignment on BPFL_AbilityUtils_C_Get_Hitscan_Weapon_Type");
static_assert(sizeof(BPFL_AbilityUtils_C_Get_Hitscan_Weapon_Type) == 0x000040, "Wrong size on BPFL_AbilityUtils_C_Get_Hitscan_Weapon_Type");
static_assert(offsetof(BPFL_AbilityUtils_C_Get_Hitscan_Weapon_Type, OwnerCharacter) == 0x000000, "Member 'BPFL_AbilityUtils_C_Get_Hitscan_Weapon_Type::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(BPFL_AbilityUtils_C_Get_Hitscan_Weapon_Type, __WorldContext) == 0x000008, "Member 'BPFL_AbilityUtils_C_Get_Hitscan_Weapon_Type::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_AbilityUtils_C_Get_Hitscan_Weapon_Type, HasHitscanWeapon) == 0x000010, "Member 'BPFL_AbilityUtils_C_Get_Hitscan_Weapon_Type::HasHitscanWeapon' has a wrong offset!");
static_assert(offsetof(BPFL_AbilityUtils_C_Get_Hitscan_Weapon_Type, WeaponType) == 0x000011, "Member 'BPFL_AbilityUtils_C_Get_Hitscan_Weapon_Type::WeaponType' has a wrong offset!");
static_assert(offsetof(BPFL_AbilityUtils_C_Get_Hitscan_Weapon_Type, CallFunc_GetComponentByClass_ReturnValue) == 0x000018, "Member 'BPFL_AbilityUtils_C_Get_Hitscan_Weapon_Type::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AbilityUtils_C_Get_Hitscan_Weapon_Type, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BPFL_AbilityUtils_C_Get_Hitscan_Weapon_Type::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_AbilityUtils_C_Get_Hitscan_Weapon_Type, K2Node_DynamicCast_AsBP_Hit_Scan_Weapon_Interface) == 0x000028, "Member 'BPFL_AbilityUtils_C_Get_Hitscan_Weapon_Type::K2Node_DynamicCast_AsBP_Hit_Scan_Weapon_Interface' has a wrong offset!");
static_assert(offsetof(BPFL_AbilityUtils_C_Get_Hitscan_Weapon_Type, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BPFL_AbilityUtils_C_Get_Hitscan_Weapon_Type::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPFL_AbilityUtils_C_Get_Hitscan_Weapon_Type, CallFunc_GetWeaponType_WeaponType) == 0x000039, "Member 'BPFL_AbilityUtils_C_Get_Hitscan_Weapon_Type::CallFunc_GetWeaponType_WeaponType' has a wrong offset!");

}

