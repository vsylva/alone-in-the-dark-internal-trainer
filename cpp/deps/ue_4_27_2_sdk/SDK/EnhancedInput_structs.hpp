#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EnhancedInput

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "Slate_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum EnhancedInput.EInputActionValueType
// NumValues: 0x0005
enum class EInputActionValueType : uint8
{
	Boolean                                  = 0,
	Axis1D                                   = 1,
	Axis2D                                   = 2,
	Axis3D                                   = 3,
	EInputActionValueType_MAX                = 4,
};

// Enum EnhancedInput.EMappingQueryIssue
// NumValues: 0x0008
enum class EMappingQueryIssue : uint8
{
	NoIssue                                  = 0,
	ReservedByAction                         = 1,
	HidesExistingMapping                     = 2,
	HiddenByExistingMapping                  = 4,
	CollisionWithMappingInSameContext        = 8,
	ForcesTypePromotion                      = 16,
	ForcesTypeDemotion                       = 32,
	EMappingQueryIssue_MAX                   = 33,
};

// Enum EnhancedInput.EMappingQueryResult
// NumValues: 0x0006
enum class EMappingQueryResult : uint8
{
	Error_EnhancedInputNotEnabled            = 0,
	Error_InputContextNotInActiveContexts    = 1,
	Error_InvalidAction                      = 2,
	NotMappable                              = 3,
	MappingAvailable                         = 4,
	EMappingQueryResult_MAX                  = 5,
};

// Enum EnhancedInput.EInputAxisSwizzle
// NumValues: 0x0006
enum class EInputAxisSwizzle : uint8
{
	YXZ                                      = 0,
	ZYX                                      = 1,
	XZY                                      = 2,
	YZX                                      = 3,
	ZXY                                      = 4,
	EInputAxisSwizzle_MAX                    = 5,
};

// Enum EnhancedInput.EFOVScalingType
// NumValues: 0x0003
enum class EFOVScalingType : uint8
{
	Standard                                 = 0,
	UE4_BackCompat                           = 1,
	EFOVScalingType_MAX                      = 2,
};

// Enum EnhancedInput.EDeadZoneType
// NumValues: 0x0003
enum class EDeadZoneType : uint8
{
	Axial                                    = 0,
	Radial                                   = 1,
	EDeadZoneType_MAX                        = 2,
};

// Enum EnhancedInput.EModifierExecutionPhase
// NumValues: 0x0004
enum class EModifierExecutionPhase : uint8
{
	PerInput                                 = 0,
	FinalValue                               = 1,
	NumPhases                                = 2,
	EModifierExecutionPhase_MAX              = 3,
};

// Enum EnhancedInput.ETriggerType
// NumValues: 0x0004
enum class ETriggerType : uint8
{
	Explicit                                 = 0,
	Implicit                                 = 1,
	Blocker                                  = 2,
	ETriggerType_MAX                         = 3,
};

// Enum EnhancedInput.ETriggerEvent
// NumValues: 0x0007
enum class ETriggerEvent : uint8
{
	None                                     = 0,
	Started                                  = 1,
	Ongoing                                  = 2,
	Canceled                                 = 3,
	Triggered                                = 4,
	Completed                                = 5,
	ETriggerEvent_MAX                        = 6,
};

// Enum EnhancedInput.ETriggerState
// NumValues: 0x0004
enum class ETriggerState : uint8
{
	None                                     = 0,
	Ongoing                                  = 1,
	Triggered                                = 2,
	ETriggerState_MAX                        = 3,
};

// ScriptStruct EnhancedInput.InputActionValue
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FInputActionValue final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputActionValue) == 0x000004, "Wrong alignment on FInputActionValue");
static_assert(sizeof(FInputActionValue) == 0x000010, "Wrong size on FInputActionValue");

// ScriptStruct EnhancedInput.EnhancedActionKeyMapping
// 0x0088 (0x0088 - 0x0000)
struct FEnhancedActionKeyMapping final
{
public:
	class UInputAction*                           Action;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInputTrigger*>                  Triggers;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UInputModifier*>                 Modifiers;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIsMappable;                                       // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MappingName;                                       // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKey                                   SecondaryKey;                                      // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowKeyInUIPrompt;                                 // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEnhancedActionKeyMapping) == 0x000008, "Wrong alignment on FEnhancedActionKeyMapping");
static_assert(sizeof(FEnhancedActionKeyMapping) == 0x000088, "Wrong size on FEnhancedActionKeyMapping");
static_assert(offsetof(FEnhancedActionKeyMapping, Action) == 0x000000, "Member 'FEnhancedActionKeyMapping::Action' has a wrong offset!");
static_assert(offsetof(FEnhancedActionKeyMapping, Key) == 0x000008, "Member 'FEnhancedActionKeyMapping::Key' has a wrong offset!");
static_assert(offsetof(FEnhancedActionKeyMapping, Triggers) == 0x000020, "Member 'FEnhancedActionKeyMapping::Triggers' has a wrong offset!");
static_assert(offsetof(FEnhancedActionKeyMapping, Modifiers) == 0x000030, "Member 'FEnhancedActionKeyMapping::Modifiers' has a wrong offset!");
static_assert(offsetof(FEnhancedActionKeyMapping, bIsMappable) == 0x000040, "Member 'FEnhancedActionKeyMapping::bIsMappable' has a wrong offset!");
static_assert(offsetof(FEnhancedActionKeyMapping, MappingName) == 0x000044, "Member 'FEnhancedActionKeyMapping::MappingName' has a wrong offset!");
static_assert(offsetof(FEnhancedActionKeyMapping, DisplayName) == 0x000050, "Member 'FEnhancedActionKeyMapping::DisplayName' has a wrong offset!");
static_assert(offsetof(FEnhancedActionKeyMapping, SecondaryKey) == 0x000068, "Member 'FEnhancedActionKeyMapping::SecondaryKey' has a wrong offset!");
static_assert(offsetof(FEnhancedActionKeyMapping, ShowKeyInUIPrompt) == 0x000080, "Member 'FEnhancedActionKeyMapping::ShowKeyInUIPrompt' has a wrong offset!");

// ScriptStruct EnhancedInput.BlueprintEnhancedInputActionBinding
// 0x0018 (0x0018 - 0x0000)
struct FBlueprintEnhancedInputActionBinding final
{
public:
	class UInputAction*                           InputAction;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETriggerEvent                                 TriggerEvent;                                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FunctionNameToBind;                                // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBlueprintEnhancedInputActionBinding) == 0x000008, "Wrong alignment on FBlueprintEnhancedInputActionBinding");
static_assert(sizeof(FBlueprintEnhancedInputActionBinding) == 0x000018, "Wrong size on FBlueprintEnhancedInputActionBinding");
static_assert(offsetof(FBlueprintEnhancedInputActionBinding, InputAction) == 0x000000, "Member 'FBlueprintEnhancedInputActionBinding::InputAction' has a wrong offset!");
static_assert(offsetof(FBlueprintEnhancedInputActionBinding, TriggerEvent) == 0x000008, "Member 'FBlueprintEnhancedInputActionBinding::TriggerEvent' has a wrong offset!");
static_assert(offsetof(FBlueprintEnhancedInputActionBinding, FunctionNameToBind) == 0x00000C, "Member 'FBlueprintEnhancedInputActionBinding::FunctionNameToBind' has a wrong offset!");

// ScriptStruct EnhancedInput.InputActionInstance
// 0x0070 (0x0070 - 0x0000)
struct FInputActionInstance final
{
public:
	class UInputAction*                           SourceAction;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UInputTrigger*>                  Triggers;                                          // 0x0010(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UInputModifier*>                 Modifiers;                                         // 0x0020(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UInputModifier*>                 PerInputModifiers;                                 // 0x0030(0x0010)(ZeroConstructor, Deprecated, Protected, NativeAccessSpecifierProtected)
	TArray<class UInputModifier*>                 FinalValueModifiers;                               // 0x0040(0x0010)(ZeroConstructor, Deprecated, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElapsedProcessedTime;                              // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ElapsedTriggeredTime;                              // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETriggerEvent                                 TriggerEvent;                                      // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputActionInstance) == 0x000008, "Wrong alignment on FInputActionInstance");
static_assert(sizeof(FInputActionInstance) == 0x000070, "Wrong size on FInputActionInstance");
static_assert(offsetof(FInputActionInstance, SourceAction) == 0x000000, "Member 'FInputActionInstance::SourceAction' has a wrong offset!");
static_assert(offsetof(FInputActionInstance, Triggers) == 0x000010, "Member 'FInputActionInstance::Triggers' has a wrong offset!");
static_assert(offsetof(FInputActionInstance, Modifiers) == 0x000020, "Member 'FInputActionInstance::Modifiers' has a wrong offset!");
static_assert(offsetof(FInputActionInstance, PerInputModifiers) == 0x000030, "Member 'FInputActionInstance::PerInputModifiers' has a wrong offset!");
static_assert(offsetof(FInputActionInstance, FinalValueModifiers) == 0x000040, "Member 'FInputActionInstance::FinalValueModifiers' has a wrong offset!");
static_assert(offsetof(FInputActionInstance, ElapsedProcessedTime) == 0x000060, "Member 'FInputActionInstance::ElapsedProcessedTime' has a wrong offset!");
static_assert(offsetof(FInputActionInstance, ElapsedTriggeredTime) == 0x000064, "Member 'FInputActionInstance::ElapsedTriggeredTime' has a wrong offset!");
static_assert(offsetof(FInputActionInstance, TriggerEvent) == 0x000068, "Member 'FInputActionInstance::TriggerEvent' has a wrong offset!");

// ScriptStruct EnhancedInput.BlueprintInputDebugKeyDelegateBinding
// 0x0030 (0x0030 - 0x0000)
struct FBlueprintInputDebugKeyDelegateBinding final
{
public:
	struct FInputChord                            InputChord;                                        // 0x0000(0x0020)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   InputKeyEvent;                                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FunctionNameToBind;                                // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExecuteWhenPaused;                                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBlueprintInputDebugKeyDelegateBinding) == 0x000008, "Wrong alignment on FBlueprintInputDebugKeyDelegateBinding");
static_assert(sizeof(FBlueprintInputDebugKeyDelegateBinding) == 0x000030, "Wrong size on FBlueprintInputDebugKeyDelegateBinding");
static_assert(offsetof(FBlueprintInputDebugKeyDelegateBinding, InputChord) == 0x000000, "Member 'FBlueprintInputDebugKeyDelegateBinding::InputChord' has a wrong offset!");
static_assert(offsetof(FBlueprintInputDebugKeyDelegateBinding, InputKeyEvent) == 0x000020, "Member 'FBlueprintInputDebugKeyDelegateBinding::InputKeyEvent' has a wrong offset!");
static_assert(offsetof(FBlueprintInputDebugKeyDelegateBinding, FunctionNameToBind) == 0x000024, "Member 'FBlueprintInputDebugKeyDelegateBinding::FunctionNameToBind' has a wrong offset!");
static_assert(offsetof(FBlueprintInputDebugKeyDelegateBinding, bExecuteWhenPaused) == 0x00002C, "Member 'FBlueprintInputDebugKeyDelegateBinding::bExecuteWhenPaused' has a wrong offset!");

// ScriptStruct EnhancedInput.MappingQueryIssue
// 0x0018 (0x0018 - 0x0000)
struct FMappingQueryIssue final
{
public:
	EMappingQueryIssue                            Issue;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputMappingContext*                   BlockingContext;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           BlockingAction;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMappingQueryIssue) == 0x000008, "Wrong alignment on FMappingQueryIssue");
static_assert(sizeof(FMappingQueryIssue) == 0x000018, "Wrong size on FMappingQueryIssue");
static_assert(offsetof(FMappingQueryIssue, Issue) == 0x000000, "Member 'FMappingQueryIssue::Issue' has a wrong offset!");
static_assert(offsetof(FMappingQueryIssue, BlockingContext) == 0x000008, "Member 'FMappingQueryIssue::BlockingContext' has a wrong offset!");
static_assert(offsetof(FMappingQueryIssue, BlockingAction) == 0x000010, "Member 'FMappingQueryIssue::BlockingAction' has a wrong offset!");

}

