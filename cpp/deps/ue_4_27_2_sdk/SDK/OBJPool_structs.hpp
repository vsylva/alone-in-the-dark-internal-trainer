#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OBJPool

#include "Basic.hpp"


namespace SDK
{

// Enum OBJPool.FOBJPoolSpawning
// NumValues: 0x0003
enum class EFOBJPoolSpawning : uint8
{
	SpawnSuccessful                          = 0,
	SpawnFailed                              = 1,
	FOBJPoolSpawning_MAX                     = 2,
};

// Enum OBJPool.EPoolCollisionType
// NumValues: 0x0005
enum class EPoolCollisionType : uint8
{
	NoCollision                              = 0,
	QueryOnly                                = 1,
	PhysicsOnly                              = 2,
	QueryAndPhysics                          = 3,
	EPoolCollisionType_MAX                   = 4,
};

// ScriptStruct OBJPool.PoolSpawnOptions
// 0x0005 (0x0005 - 0x0000)
struct FPoolSpawnOptions final
{
public:
	EPoolCollisionType                            CollisionType;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableCollision;                                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SimulatePhysics;                                   // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ActorTickEnabled;                                  // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCachedSettings;                                // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoolSpawnOptions) == 0x000001, "Wrong alignment on FPoolSpawnOptions");
static_assert(sizeof(FPoolSpawnOptions) == 0x000005, "Wrong size on FPoolSpawnOptions");
static_assert(offsetof(FPoolSpawnOptions, CollisionType) == 0x000000, "Member 'FPoolSpawnOptions::CollisionType' has a wrong offset!");
static_assert(offsetof(FPoolSpawnOptions, EnableCollision) == 0x000001, "Member 'FPoolSpawnOptions::EnableCollision' has a wrong offset!");
static_assert(offsetof(FPoolSpawnOptions, SimulatePhysics) == 0x000002, "Member 'FPoolSpawnOptions::SimulatePhysics' has a wrong offset!");
static_assert(offsetof(FPoolSpawnOptions, ActorTickEnabled) == 0x000003, "Member 'FPoolSpawnOptions::ActorTickEnabled' has a wrong offset!");
static_assert(offsetof(FPoolSpawnOptions, bUseCachedSettings) == 0x000004, "Member 'FPoolSpawnOptions::bUseCachedSettings' has a wrong offset!");

// ScriptStruct OBJPool.ComponentPrePooledSettings
// 0x0003 (0x0003 - 0x0000)
struct FComponentPrePooledSettings final
{
public:
	uint8                                         Pad_0[0x3];                                        // 0x0000(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FComponentPrePooledSettings) == 0x000001, "Wrong alignment on FComponentPrePooledSettings");
static_assert(sizeof(FComponentPrePooledSettings) == 0x000003, "Wrong size on FComponentPrePooledSettings");

}

