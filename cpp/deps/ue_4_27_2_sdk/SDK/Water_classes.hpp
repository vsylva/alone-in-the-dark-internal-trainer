#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Water

#include "Basic.hpp"

#include "Niagara_classes.hpp"
#include "Water_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "AIModule_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class Water.GerstnerWaterWaveGeneratorBase
// 0x0000 (0x0028 - 0x0028)
class UGerstnerWaterWaveGeneratorBase : public UObject
{
public:
	void GenerateGerstnerWaves(TArray<struct FGerstnerWave>* OutWaves) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GerstnerWaterWaveGeneratorBase">();
	}
	static class UGerstnerWaterWaveGeneratorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGerstnerWaterWaveGeneratorBase>();
	}
};
static_assert(alignof(UGerstnerWaterWaveGeneratorBase) == 0x000008, "Wrong alignment on UGerstnerWaterWaveGeneratorBase");
static_assert(sizeof(UGerstnerWaterWaveGeneratorBase) == 0x000028, "Wrong size on UGerstnerWaterWaveGeneratorBase");

// Class Water.BuoyancyComponent
// 0x0128 (0x01E0 - 0x00B8)
class UBuoyancyComponent final : public UActorComponent
{
public:
	TArray<struct FSphericalPontoon>              Pontoons;                                          // 0x00B8(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnEnteredWaterDelegate;                            // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnExitedWaterDelegate;                             // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FBuoyancyData                          BuoyancyData;                                      // 0x00E8(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class AWaterBody*>                     CurrentWaterBodies;                                // 0x0138(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UPrimitiveComponent*                    SimulatingComponent;                               // 0x0148(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_150[0x90];                                     // 0x0150(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetLastWaterSurfaceInfo(struct FVector* OutWaterPlaneLocation, struct FVector* OutWaterPlaneNormal, struct FVector* OutWaterSurfacePosition, float* OutWaterDepth, int32* OutWaterBodyIdx, struct FVector* OutWaterVelocity);
	void OnPontoonEnteredWater(const struct FSphericalPontoon& Pontoon);
	void OnPontoonExitedWater(const struct FSphericalPontoon& Pontoon);

	bool IsInWaterBody() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuoyancyComponent">();
	}
	static class UBuoyancyComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuoyancyComponent>();
	}
};
static_assert(alignof(UBuoyancyComponent) == 0x000008, "Wrong alignment on UBuoyancyComponent");
static_assert(sizeof(UBuoyancyComponent) == 0x0001E0, "Wrong size on UBuoyancyComponent");
static_assert(offsetof(UBuoyancyComponent, Pontoons) == 0x0000B8, "Member 'UBuoyancyComponent::Pontoons' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, OnEnteredWaterDelegate) == 0x0000C8, "Member 'UBuoyancyComponent::OnEnteredWaterDelegate' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, OnExitedWaterDelegate) == 0x0000D8, "Member 'UBuoyancyComponent::OnExitedWaterDelegate' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, BuoyancyData) == 0x0000E8, "Member 'UBuoyancyComponent::BuoyancyData' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, CurrentWaterBodies) == 0x000138, "Member 'UBuoyancyComponent::CurrentWaterBodies' has a wrong offset!");
static_assert(offsetof(UBuoyancyComponent, SimulatingComponent) == 0x000148, "Member 'UBuoyancyComponent::SimulatingComponent' has a wrong offset!");

// Class Water.GerstnerWaterWaveGeneratorSimple
// 0x0038 (0x0060 - 0x0028)
class UGerstnerWaterWaveGeneratorSimple final : public UGerstnerWaterWaveGeneratorBase
{
public:
	int32                                         NumWaves;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seed;                                              // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Randomness;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinWavelength;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWavelength;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WavelengthFalloff;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAmplitude;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAmplitude;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmplitudeFalloff;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindAngleDeg;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionAngularSpreadDeg;                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmallWaveSteepness;                                // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LargeWaveSteepness;                                // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteepnessFalloff;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GerstnerWaterWaveGeneratorSimple">();
	}
	static class UGerstnerWaterWaveGeneratorSimple* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGerstnerWaterWaveGeneratorSimple>();
	}
};
static_assert(alignof(UGerstnerWaterWaveGeneratorSimple) == 0x000008, "Wrong alignment on UGerstnerWaterWaveGeneratorSimple");
static_assert(sizeof(UGerstnerWaterWaveGeneratorSimple) == 0x000060, "Wrong size on UGerstnerWaterWaveGeneratorSimple");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, NumWaves) == 0x000028, "Member 'UGerstnerWaterWaveGeneratorSimple::NumWaves' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, Seed) == 0x00002C, "Member 'UGerstnerWaterWaveGeneratorSimple::Seed' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, Randomness) == 0x000030, "Member 'UGerstnerWaterWaveGeneratorSimple::Randomness' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, MinWavelength) == 0x000034, "Member 'UGerstnerWaterWaveGeneratorSimple::MinWavelength' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, MaxWavelength) == 0x000038, "Member 'UGerstnerWaterWaveGeneratorSimple::MaxWavelength' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, WavelengthFalloff) == 0x00003C, "Member 'UGerstnerWaterWaveGeneratorSimple::WavelengthFalloff' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, MinAmplitude) == 0x000040, "Member 'UGerstnerWaterWaveGeneratorSimple::MinAmplitude' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, MaxAmplitude) == 0x000044, "Member 'UGerstnerWaterWaveGeneratorSimple::MaxAmplitude' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, AmplitudeFalloff) == 0x000048, "Member 'UGerstnerWaterWaveGeneratorSimple::AmplitudeFalloff' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, WindAngleDeg) == 0x00004C, "Member 'UGerstnerWaterWaveGeneratorSimple::WindAngleDeg' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, DirectionAngularSpreadDeg) == 0x000050, "Member 'UGerstnerWaterWaveGeneratorSimple::DirectionAngularSpreadDeg' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, SmallWaveSteepness) == 0x000054, "Member 'UGerstnerWaterWaveGeneratorSimple::SmallWaveSteepness' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, LargeWaveSteepness) == 0x000058, "Member 'UGerstnerWaterWaveGeneratorSimple::LargeWaveSteepness' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSimple, SteepnessFalloff) == 0x00005C, "Member 'UGerstnerWaterWaveGeneratorSimple::SteepnessFalloff' has a wrong offset!");

// Class Water.BuoyancyManager
// 0x00B8 (0x02F0 - 0x0238)
class ABuoyancyManager final : public AActor
{
public:
	uint8                                         Pad_238[0x50];                                     // 0x0238(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBuoyancyComponent*>             BuoyancyComponents;                                // 0x0288(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_298[0x58];                                     // 0x0298(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool GetBuoyancyComponentManager(const class UObject* WorldContextObject, class ABuoyancyManager** Manager);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuoyancyManager">();
	}
	static class ABuoyancyManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABuoyancyManager>();
	}
};
static_assert(alignof(ABuoyancyManager) == 0x000008, "Wrong alignment on ABuoyancyManager");
static_assert(sizeof(ABuoyancyManager) == 0x0002F0, "Wrong size on ABuoyancyManager");
static_assert(offsetof(ABuoyancyManager, BuoyancyComponents) == 0x000288, "Member 'ABuoyancyManager::BuoyancyComponents' has a wrong offset!");

// Class Water.WaterWavesBase
// 0x0000 (0x0028 - 0x0028)
class UWaterWavesBase : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterWavesBase">();
	}
	static class UWaterWavesBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterWavesBase>();
	}
};
static_assert(alignof(UWaterWavesBase) == 0x000008, "Wrong alignment on UWaterWavesBase");
static_assert(sizeof(UWaterWavesBase) == 0x000028, "Wrong size on UWaterWavesBase");

// Class Water.ConvertWaterBodyActorsCommandlet
// 0x0000 (0x0080 - 0x0080)
class UConvertWaterBodyActorsCommandlet final : public UCommandlet
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ConvertWaterBodyActorsCommandlet">();
	}
	static class UConvertWaterBodyActorsCommandlet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConvertWaterBodyActorsCommandlet>();
	}
};
static_assert(alignof(UConvertWaterBodyActorsCommandlet) == 0x000008, "Wrong alignment on UConvertWaterBodyActorsCommandlet");
static_assert(sizeof(UConvertWaterBodyActorsCommandlet) == 0x000080, "Wrong size on UConvertWaterBodyActorsCommandlet");

// Class Water.EnvQueryTest_InsideWaterBody
// 0x0008 (0x0200 - 0x01F8)
class UEnvQueryTest_InsideWaterBody final : public UEnvQueryTest
{
public:
	bool                                          bIncludeWaves;                                     // 0x01F8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimpleWaves;                                      // 0x01F9(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreExclusionVolumes;                           // 0x01FA(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FB[0x5];                                      // 0x01FB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryTest_InsideWaterBody">();
	}
	static class UEnvQueryTest_InsideWaterBody* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryTest_InsideWaterBody>();
	}
};
static_assert(alignof(UEnvQueryTest_InsideWaterBody) == 0x000008, "Wrong alignment on UEnvQueryTest_InsideWaterBody");
static_assert(sizeof(UEnvQueryTest_InsideWaterBody) == 0x000200, "Wrong size on UEnvQueryTest_InsideWaterBody");
static_assert(offsetof(UEnvQueryTest_InsideWaterBody, bIncludeWaves) == 0x0001F8, "Member 'UEnvQueryTest_InsideWaterBody::bIncludeWaves' has a wrong offset!");
static_assert(offsetof(UEnvQueryTest_InsideWaterBody, bSimpleWaves) == 0x0001F9, "Member 'UEnvQueryTest_InsideWaterBody::bSimpleWaves' has a wrong offset!");
static_assert(offsetof(UEnvQueryTest_InsideWaterBody, bIgnoreExclusionVolumes) == 0x0001FA, "Member 'UEnvQueryTest_InsideWaterBody::bIgnoreExclusionVolumes' has a wrong offset!");

// Class Water.GerstnerWaterWaveGeneratorSpectrum
// 0x0018 (0x0040 - 0x0028)
class UGerstnerWaterWaveGeneratorSpectrum final : public UGerstnerWaterWaveGeneratorBase
{
public:
	EWaveSpectrumType                             SpectrumType;                                      // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGerstnerWaveOctave>            Octaves;                                           // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GerstnerWaterWaveGeneratorSpectrum">();
	}
	static class UGerstnerWaterWaveGeneratorSpectrum* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGerstnerWaterWaveGeneratorSpectrum>();
	}
};
static_assert(alignof(UGerstnerWaterWaveGeneratorSpectrum) == 0x000008, "Wrong alignment on UGerstnerWaterWaveGeneratorSpectrum");
static_assert(sizeof(UGerstnerWaterWaveGeneratorSpectrum) == 0x000040, "Wrong size on UGerstnerWaterWaveGeneratorSpectrum");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSpectrum, SpectrumType) == 0x000028, "Member 'UGerstnerWaterWaveGeneratorSpectrum::SpectrumType' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaveGeneratorSpectrum, Octaves) == 0x000030, "Member 'UGerstnerWaterWaveGeneratorSpectrum::Octaves' has a wrong offset!");

// Class Water.WaterWaves
// 0x0000 (0x0028 - 0x0028)
class UWaterWaves : public UWaterWavesBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterWaves">();
	}
	static class UWaterWaves* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterWaves>();
	}
};
static_assert(alignof(UWaterWaves) == 0x000008, "Wrong alignment on UWaterWaves");
static_assert(sizeof(UWaterWaves) == 0x000028, "Wrong size on UWaterWaves");

// Class Water.GerstnerWaterWaves
// 0x0020 (0x0048 - 0x0028)
class UGerstnerWaterWaves final : public UWaterWaves
{
public:
	class UGerstnerWaterWaveGeneratorBase*        GerstnerWaveGenerator;                             // 0x0028(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGerstnerWave>                  GerstnerWaves;                                     // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         MaxWaveHeight;                                     // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GerstnerWaterWaves">();
	}
	static class UGerstnerWaterWaves* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGerstnerWaterWaves>();
	}
};
static_assert(alignof(UGerstnerWaterWaves) == 0x000008, "Wrong alignment on UGerstnerWaterWaves");
static_assert(sizeof(UGerstnerWaterWaves) == 0x000048, "Wrong size on UGerstnerWaterWaves");
static_assert(offsetof(UGerstnerWaterWaves, GerstnerWaveGenerator) == 0x000028, "Member 'UGerstnerWaterWaves::GerstnerWaveGenerator' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaves, GerstnerWaves) == 0x000030, "Member 'UGerstnerWaterWaves::GerstnerWaves' has a wrong offset!");
static_assert(offsetof(UGerstnerWaterWaves, MaxWaveHeight) == 0x000040, "Member 'UGerstnerWaterWaves::MaxWaveHeight' has a wrong offset!");

// Class Water.GerstnerWaterWaveSubsystem
// 0x0018 (0x0048 - 0x0030)
class UGerstnerWaterWaveSubsystem final : public UEngineSubsystem
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GerstnerWaterWaveSubsystem">();
	}
	static class UGerstnerWaterWaveSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGerstnerWaterWaveSubsystem>();
	}
};
static_assert(alignof(UGerstnerWaterWaveSubsystem) == 0x000008, "Wrong alignment on UGerstnerWaterWaveSubsystem");
static_assert(sizeof(UGerstnerWaterWaveSubsystem) == 0x000048, "Wrong size on UGerstnerWaterWaveSubsystem");

// Class Water.LakeCollisionComponent
// 0x0020 (0x0480 - 0x0460)
class ULakeCollisionComponent final : public UPrimitiveComponent
{
public:
	class UBodySetup*                             CachedBodySetup;                                   // 0x0460(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                BoxExtent;                                         // 0x0468(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_474[0xC];                                      // 0x0474(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LakeCollisionComponent">();
	}
	static class ULakeCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULakeCollisionComponent>();
	}
};
static_assert(alignof(ULakeCollisionComponent) == 0x000010, "Wrong alignment on ULakeCollisionComponent");
static_assert(sizeof(ULakeCollisionComponent) == 0x000480, "Wrong size on ULakeCollisionComponent");
static_assert(offsetof(ULakeCollisionComponent, CachedBodySetup) == 0x000460, "Member 'ULakeCollisionComponent::CachedBodySetup' has a wrong offset!");
static_assert(offsetof(ULakeCollisionComponent, BoxExtent) == 0x000468, "Member 'ULakeCollisionComponent::BoxExtent' has a wrong offset!");

// Class Water.NiagaraDataInterfaceWater
// 0x0008 (0x0040 - 0x0038)
class UNiagaraDataInterfaceWater final : public UNiagaraDataInterface
{
public:
	class AWaterBody*                             SourceBody;                                        // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NiagaraDataInterfaceWater">();
	}
	static class UNiagaraDataInterfaceWater* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNiagaraDataInterfaceWater>();
	}
};
static_assert(alignof(UNiagaraDataInterfaceWater) == 0x000008, "Wrong alignment on UNiagaraDataInterfaceWater");
static_assert(sizeof(UNiagaraDataInterfaceWater) == 0x000040, "Wrong size on UNiagaraDataInterfaceWater");
static_assert(offsetof(UNiagaraDataInterfaceWater, SourceBody) == 0x000038, "Member 'UNiagaraDataInterfaceWater::SourceBody' has a wrong offset!");

// Class Water.NiagaraWaterFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UNiagaraWaterFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void SetWaterBody(class UNiagaraComponent* NiagaraSystem, const class FString& OverrideName, class AWaterBody* WaterBody);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NiagaraWaterFunctionLibrary">();
	}
	static class UNiagaraWaterFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNiagaraWaterFunctionLibrary>();
	}
};
static_assert(alignof(UNiagaraWaterFunctionLibrary) == 0x000008, "Wrong alignment on UNiagaraWaterFunctionLibrary");
static_assert(sizeof(UNiagaraWaterFunctionLibrary) == 0x000028, "Wrong size on UNiagaraWaterFunctionLibrary");

// Class Water.OceanCollisionComponent
// 0x0030 (0x0490 - 0x0460)
class UOceanCollisionComponent final : public UPrimitiveComponent
{
public:
	class UBodySetup*                             CachedBodySetup;                                   // 0x0460(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_468[0x28];                                     // 0x0468(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OceanCollisionComponent">();
	}
	static class UOceanCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOceanCollisionComponent>();
	}
};
static_assert(alignof(UOceanCollisionComponent) == 0x000010, "Wrong alignment on UOceanCollisionComponent");
static_assert(sizeof(UOceanCollisionComponent) == 0x000490, "Wrong size on UOceanCollisionComponent");
static_assert(offsetof(UOceanCollisionComponent, CachedBodySetup) == 0x000460, "Member 'UOceanCollisionComponent::CachedBodySetup' has a wrong offset!");

// Class Water.OceanBoxCollisionComponent
// 0x0000 (0x0490 - 0x0490)
class UOceanBoxCollisionComponent final : public UBoxComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OceanBoxCollisionComponent">();
	}
	static class UOceanBoxCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOceanBoxCollisionComponent>();
	}
};
static_assert(alignof(UOceanBoxCollisionComponent) == 0x000010, "Wrong alignment on UOceanBoxCollisionComponent");
static_assert(sizeof(UOceanBoxCollisionComponent) == 0x000490, "Wrong size on UOceanBoxCollisionComponent");

// Class Water.WaterBody
// 0x0BC8 (0x0E00 - 0x0238)
#pragma pack(push, 0x1)
class alignas(0x10) AWaterBody : public AActor
{
public:
	uint8                                         Pad_238[0x10];                                     // 0x0238(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      PhysicalMaterial;                                  // 0x0248(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetWaveMaskDepth;                               // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWaveHeightOffset;                               // 0x0254(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaterBodyIndex;                                    // 0x0258(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFillCollisionUnderWaterBodiesForNavmesh;          // 0x025C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25D[0x3];                                      // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUnderwaterPostProcessSettings         UnderwaterPostProcessSettings;                     // 0x0260(0x0580)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EWaterBodyType                                WaterBodyType;                                     // 0x07E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7E1[0x7];                                      // 0x07E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWaterCurveSettings                    CurveSettings;                                     // 0x07E8(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     WaterMaterial;                                     // 0x0808(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     UnderwaterPostProcessMaterial;                     // 0x0810(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsLandscape;                                 // 0x0818(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGenerateCollisions;                               // 0x0819(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideWaterMesh;                                // 0x081A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_81B[0x5];                                      // 0x081B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            WaterMeshOverride;                                 // 0x0820(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OverlapMaterialPriority;                           // 0x0828(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CollisionProfileName;                              // 0x082C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_834[0x4];                                      // 0x0834(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWaterSplineComponent*                  SplineComp;                                        // 0x0838(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWaterSplineMetadata*                   WaterSplineMetadata;                               // 0x0840(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               WaterMID;                                          // 0x0848(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, TextExportTransient, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               UnderwaterPostProcessMID;                          // 0x0850(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, TextExportTransient, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TLazyObjectPtr<class AWaterBodyIsland>> Islands;                                           // 0x0858(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, AdvancedDisplay, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TLazyObjectPtr<class AWaterBodyExclusionVolume>> ExclusionVolumes;                                  // 0x0868(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, AdvancedDisplay, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ALandscapeProxy>         Landscape;                                         // 0x0878(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPostProcessSettings                   CurrentPostProcessSettings;                        // 0x0880(0x0560)(Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          bCanAffectNavigation;                              // 0x0DE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_DE1[0x7];                                      // 0x0DE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavAreaBase>               WaterNavAreaClass;                                 // 0x0DE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWaterWavesBase*                        WaterWaves;                                        // 0x0DF0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UMaterialInstanceDynamic* GetRiverToLakeTransitionMaterialInstance();
	class UMaterialInstanceDynamic* GetRiverToOceanTransitionMaterialInstance();
	class UMaterialInstanceDynamic* GetUnderwaterPostProcessMaterialInstance();
	class UMaterialInstanceDynamic* GetWaterMaterialInstance();
	void OnWaterBodyChanged(bool bShapeOrPositionChanged, bool bWeightmapSettingsChanged);
	void SetWaterWaves(class UWaterWavesBase* InWaterWaves);

	TArray<class AWaterBodyExclusionVolume*> GetExclusionVolumes() const;
	TArray<class AWaterBodyIsland*> GetIslands() const;
	float GetMaxWaveHeight() const;
	class UMaterialInterface* GetWaterMaterial() const;
	class UWaterSplineComponent* GetWaterSpline() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBody">();
	}
	static class AWaterBody* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterBody>();
	}
};
#pragma pack(pop)
static_assert(alignof(AWaterBody) == 0x000010, "Wrong alignment on AWaterBody");
static_assert(sizeof(AWaterBody) == 0x000E00, "Wrong size on AWaterBody");
static_assert(offsetof(AWaterBody, PhysicalMaterial) == 0x000248, "Member 'AWaterBody::PhysicalMaterial' has a wrong offset!");
static_assert(offsetof(AWaterBody, TargetWaveMaskDepth) == 0x000250, "Member 'AWaterBody::TargetWaveMaskDepth' has a wrong offset!");
static_assert(offsetof(AWaterBody, MaxWaveHeightOffset) == 0x000254, "Member 'AWaterBody::MaxWaveHeightOffset' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterBodyIndex) == 0x000258, "Member 'AWaterBody::WaterBodyIndex' has a wrong offset!");
static_assert(offsetof(AWaterBody, bFillCollisionUnderWaterBodiesForNavmesh) == 0x00025C, "Member 'AWaterBody::bFillCollisionUnderWaterBodiesForNavmesh' has a wrong offset!");
static_assert(offsetof(AWaterBody, UnderwaterPostProcessSettings) == 0x000260, "Member 'AWaterBody::UnderwaterPostProcessSettings' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterBodyType) == 0x0007E0, "Member 'AWaterBody::WaterBodyType' has a wrong offset!");
static_assert(offsetof(AWaterBody, CurveSettings) == 0x0007E8, "Member 'AWaterBody::CurveSettings' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterMaterial) == 0x000808, "Member 'AWaterBody::WaterMaterial' has a wrong offset!");
static_assert(offsetof(AWaterBody, UnderwaterPostProcessMaterial) == 0x000810, "Member 'AWaterBody::UnderwaterPostProcessMaterial' has a wrong offset!");
static_assert(offsetof(AWaterBody, bAffectsLandscape) == 0x000818, "Member 'AWaterBody::bAffectsLandscape' has a wrong offset!");
static_assert(offsetof(AWaterBody, bGenerateCollisions) == 0x000819, "Member 'AWaterBody::bGenerateCollisions' has a wrong offset!");
static_assert(offsetof(AWaterBody, bOverrideWaterMesh) == 0x00081A, "Member 'AWaterBody::bOverrideWaterMesh' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterMeshOverride) == 0x000820, "Member 'AWaterBody::WaterMeshOverride' has a wrong offset!");
static_assert(offsetof(AWaterBody, OverlapMaterialPriority) == 0x000828, "Member 'AWaterBody::OverlapMaterialPriority' has a wrong offset!");
static_assert(offsetof(AWaterBody, CollisionProfileName) == 0x00082C, "Member 'AWaterBody::CollisionProfileName' has a wrong offset!");
static_assert(offsetof(AWaterBody, SplineComp) == 0x000838, "Member 'AWaterBody::SplineComp' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterSplineMetadata) == 0x000840, "Member 'AWaterBody::WaterSplineMetadata' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterMID) == 0x000848, "Member 'AWaterBody::WaterMID' has a wrong offset!");
static_assert(offsetof(AWaterBody, UnderwaterPostProcessMID) == 0x000850, "Member 'AWaterBody::UnderwaterPostProcessMID' has a wrong offset!");
static_assert(offsetof(AWaterBody, Islands) == 0x000858, "Member 'AWaterBody::Islands' has a wrong offset!");
static_assert(offsetof(AWaterBody, ExclusionVolumes) == 0x000868, "Member 'AWaterBody::ExclusionVolumes' has a wrong offset!");
static_assert(offsetof(AWaterBody, Landscape) == 0x000878, "Member 'AWaterBody::Landscape' has a wrong offset!");
static_assert(offsetof(AWaterBody, CurrentPostProcessSettings) == 0x000880, "Member 'AWaterBody::CurrentPostProcessSettings' has a wrong offset!");
static_assert(offsetof(AWaterBody, bCanAffectNavigation) == 0x000DE0, "Member 'AWaterBody::bCanAffectNavigation' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterNavAreaClass) == 0x000DE8, "Member 'AWaterBody::WaterNavAreaClass' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterWaves) == 0x000DF0, "Member 'AWaterBody::WaterWaves' has a wrong offset!");

// Class Water.WaterBodyGenerator
// 0x0000 (0x0028 - 0x0028)
class UWaterBodyGenerator : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyGenerator">();
	}
	static class UWaterBodyGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterBodyGenerator>();
	}
};
static_assert(alignof(UWaterBodyGenerator) == 0x000008, "Wrong alignment on UWaterBodyGenerator");
static_assert(sizeof(UWaterBodyGenerator) == 0x000028, "Wrong size on UWaterBodyGenerator");

// Class Water.CustomMeshGenerator
// 0x0008 (0x0030 - 0x0028)
class UCustomMeshGenerator final : public UWaterBodyGenerator
{
public:
	class UStaticMeshComponent*                   MeshComp;                                          // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomMeshGenerator">();
	}
	static class UCustomMeshGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomMeshGenerator>();
	}
};
static_assert(alignof(UCustomMeshGenerator) == 0x000008, "Wrong alignment on UCustomMeshGenerator");
static_assert(sizeof(UCustomMeshGenerator) == 0x000030, "Wrong size on UCustomMeshGenerator");
static_assert(offsetof(UCustomMeshGenerator, MeshComp) == 0x000028, "Member 'UCustomMeshGenerator::MeshComp' has a wrong offset!");

// Class Water.WaterBodyCustom
// 0x0000 (0x0E00 - 0x0E00)
class AWaterBodyCustom final : public AWaterBody
{
public:
	class UCustomMeshGenerator*                   CustomGenerator;                                   // 0x0DF8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyCustom">();
	}
	static class AWaterBodyCustom* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterBodyCustom>();
	}
};
static_assert(alignof(AWaterBodyCustom) == 0x000010, "Wrong alignment on AWaterBodyCustom");
static_assert(sizeof(AWaterBodyCustom) == 0x000E00, "Wrong size on AWaterBodyCustom");
static_assert(offsetof(AWaterBodyCustom, CustomGenerator) == 0x000DF8, "Member 'AWaterBodyCustom::CustomGenerator' has a wrong offset!");

// Class Water.WaterBodyExclusionVolume
// 0x0018 (0x0298 - 0x0280)
class AWaterBodyExclusionVolume final : public APhysicsVolume
{
public:
	bool                                          bIgnoreAllOverlappingWaterBodies;                  // 0x0280(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_281[0x7];                                      // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AWaterBody*>                     WaterBodiesToIgnore;                               // 0x0288(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyExclusionVolume">();
	}
	static class AWaterBodyExclusionVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterBodyExclusionVolume>();
	}
};
static_assert(alignof(AWaterBodyExclusionVolume) == 0x000008, "Wrong alignment on AWaterBodyExclusionVolume");
static_assert(sizeof(AWaterBodyExclusionVolume) == 0x000298, "Wrong size on AWaterBodyExclusionVolume");
static_assert(offsetof(AWaterBodyExclusionVolume, bIgnoreAllOverlappingWaterBodies) == 0x000280, "Member 'AWaterBodyExclusionVolume::bIgnoreAllOverlappingWaterBodies' has a wrong offset!");
static_assert(offsetof(AWaterBodyExclusionVolume, WaterBodiesToIgnore) == 0x000288, "Member 'AWaterBodyExclusionVolume::WaterBodiesToIgnore' has a wrong offset!");

// Class Water.WaterBodyIsland
// 0x0010 (0x0248 - 0x0238)
class AWaterBodyIsland final : public AActor
{
public:
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWaterSplineComponent*                  SplineComp;                                        // 0x0240(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UWaterSplineComponent* GetWaterSpline() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyIsland">();
	}
	static class AWaterBodyIsland* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterBodyIsland>();
	}
};
static_assert(alignof(AWaterBodyIsland) == 0x000008, "Wrong alignment on AWaterBodyIsland");
static_assert(sizeof(AWaterBodyIsland) == 0x000248, "Wrong size on AWaterBodyIsland");
static_assert(offsetof(AWaterBodyIsland, SplineComp) == 0x000240, "Member 'AWaterBodyIsland::SplineComp' has a wrong offset!");

// Class Water.LakeGenerator
// 0x0018 (0x0040 - 0x0028)
class ULakeGenerator final : public UWaterBodyGenerator
{
public:
	class UStaticMeshComponent*                   LakeMeshComp;                                      // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBoxComponent*                          LakeCollisionComp;                                 // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULakeCollisionComponent*                LakeCollision;                                     // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LakeGenerator">();
	}
	static class ULakeGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULakeGenerator>();
	}
};
static_assert(alignof(ULakeGenerator) == 0x000008, "Wrong alignment on ULakeGenerator");
static_assert(sizeof(ULakeGenerator) == 0x000040, "Wrong size on ULakeGenerator");
static_assert(offsetof(ULakeGenerator, LakeMeshComp) == 0x000028, "Member 'ULakeGenerator::LakeMeshComp' has a wrong offset!");
static_assert(offsetof(ULakeGenerator, LakeCollisionComp) == 0x000030, "Member 'ULakeGenerator::LakeCollisionComp' has a wrong offset!");
static_assert(offsetof(ULakeGenerator, LakeCollision) == 0x000038, "Member 'ULakeGenerator::LakeCollision' has a wrong offset!");

// Class Water.WaterBodyLake
// 0x0000 (0x0E00 - 0x0E00)
class AWaterBodyLake final : public AWaterBody
{
public:
	class ULakeGenerator*                         LakeGenerator;                                     // 0x0DF8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyLake">();
	}
	static class AWaterBodyLake* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterBodyLake>();
	}
};
static_assert(alignof(AWaterBodyLake) == 0x000010, "Wrong alignment on AWaterBodyLake");
static_assert(sizeof(AWaterBodyLake) == 0x000E00, "Wrong size on AWaterBodyLake");
static_assert(offsetof(AWaterBodyLake, LakeGenerator) == 0x000DF8, "Member 'AWaterBodyLake::LakeGenerator' has a wrong offset!");

// Class Water.OceanGenerator
// 0x0020 (0x0048 - 0x0028)
class UOceanGenerator final : public UWaterBodyGenerator
{
public:
	TArray<class UOceanBoxCollisionComponent*>    CollisionBoxes;                                    // 0x0028(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NonPIEDuplicateTransient, NativeAccessSpecifierPrivate)
	TArray<class UOceanCollisionComponent*>       CollisionHullSets;                                 // 0x0038(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NonPIEDuplicateTransient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OceanGenerator">();
	}
	static class UOceanGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOceanGenerator>();
	}
};
static_assert(alignof(UOceanGenerator) == 0x000008, "Wrong alignment on UOceanGenerator");
static_assert(sizeof(UOceanGenerator) == 0x000048, "Wrong size on UOceanGenerator");
static_assert(offsetof(UOceanGenerator, CollisionBoxes) == 0x000028, "Member 'UOceanGenerator::CollisionBoxes' has a wrong offset!");
static_assert(offsetof(UOceanGenerator, CollisionHullSets) == 0x000038, "Member 'UOceanGenerator::CollisionHullSets' has a wrong offset!");

// Class Water.WaterBodyOcean
// 0x0010 (0x0E10 - 0x0E00)
class AWaterBodyOcean final : public AWaterBody
{
public:
	class UOceanGenerator*                        OceanGenerator;                                    // 0x0DF8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                CollisionExtents;                                  // 0x0E00(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeightOffset;                                      // 0x0E0C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyOcean">();
	}
	static class AWaterBodyOcean* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterBodyOcean>();
	}
};
static_assert(alignof(AWaterBodyOcean) == 0x000010, "Wrong alignment on AWaterBodyOcean");
static_assert(sizeof(AWaterBodyOcean) == 0x000E10, "Wrong size on AWaterBodyOcean");
static_assert(offsetof(AWaterBodyOcean, OceanGenerator) == 0x000DF8, "Member 'AWaterBodyOcean::OceanGenerator' has a wrong offset!");
static_assert(offsetof(AWaterBodyOcean, CollisionExtents) == 0x000E00, "Member 'AWaterBodyOcean::CollisionExtents' has a wrong offset!");
static_assert(offsetof(AWaterBodyOcean, HeightOffset) == 0x000E0C, "Member 'AWaterBodyOcean::HeightOffset' has a wrong offset!");

// Class Water.RiverGenerator
// 0x0010 (0x0038 - 0x0028)
class URiverGenerator final : public UWaterBodyGenerator
{
public:
	TArray<class USplineMeshComponent*>           SplineMeshComponents;                              // 0x0028(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NonPIEDuplicateTransient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RiverGenerator">();
	}
	static class URiverGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<URiverGenerator>();
	}
};
static_assert(alignof(URiverGenerator) == 0x000008, "Wrong alignment on URiverGenerator");
static_assert(sizeof(URiverGenerator) == 0x000038, "Wrong size on URiverGenerator");
static_assert(offsetof(URiverGenerator, SplineMeshComponents) == 0x000028, "Member 'URiverGenerator::SplineMeshComponents' has a wrong offset!");

// Class Water.WaterBodyRiver
// 0x0020 (0x0E20 - 0x0E00)
class AWaterBodyRiver final : public AWaterBody
{
public:
	class URiverGenerator*                        RiverGenerator;                                    // 0x0DF8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     LakeTransitionMaterial;                            // 0x0E00(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               LakeTransitionMID;                                 // 0x0E08(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, TextExportTransient, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     OceanTransitionMaterial;                           // 0x0E10(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               OceanTransitionMID;                                // 0x0E18(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, TextExportTransient, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyRiver">();
	}
	static class AWaterBodyRiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterBodyRiver>();
	}
};
static_assert(alignof(AWaterBodyRiver) == 0x000010, "Wrong alignment on AWaterBodyRiver");
static_assert(sizeof(AWaterBodyRiver) == 0x000E20, "Wrong size on AWaterBodyRiver");
static_assert(offsetof(AWaterBodyRiver, RiverGenerator) == 0x000DF8, "Member 'AWaterBodyRiver::RiverGenerator' has a wrong offset!");
static_assert(offsetof(AWaterBodyRiver, LakeTransitionMaterial) == 0x000E00, "Member 'AWaterBodyRiver::LakeTransitionMaterial' has a wrong offset!");
static_assert(offsetof(AWaterBodyRiver, LakeTransitionMID) == 0x000E08, "Member 'AWaterBodyRiver::LakeTransitionMID' has a wrong offset!");
static_assert(offsetof(AWaterBodyRiver, OceanTransitionMaterial) == 0x000E10, "Member 'AWaterBodyRiver::OceanTransitionMaterial' has a wrong offset!");
static_assert(offsetof(AWaterBodyRiver, OceanTransitionMID) == 0x000E18, "Member 'AWaterBodyRiver::OceanTransitionMID' has a wrong offset!");

// Class Water.WaterBrushActorInterface
// 0x0000 (0x0028 - 0x0028)
class IWaterBrushActorInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBrushActorInterface">();
	}
	static class IWaterBrushActorInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IWaterBrushActorInterface>();
	}
};
static_assert(alignof(IWaterBrushActorInterface) == 0x000008, "Wrong alignment on IWaterBrushActorInterface");
static_assert(sizeof(IWaterBrushActorInterface) == 0x000028, "Wrong size on IWaterBrushActorInterface");

// Class Water.WaterMeshActor
// 0x0010 (0x0248 - 0x0238)
class AWaterMeshActor final : public AActor
{
public:
	class UTexture2D*                             WaterVelocityTexture;                              // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWaterMeshComponent*                    WaterMesh;                                         // 0x0240(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterMeshActor">();
	}
	static class AWaterMeshActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterMeshActor>();
	}
};
static_assert(alignof(AWaterMeshActor) == 0x000008, "Wrong alignment on AWaterMeshActor");
static_assert(sizeof(AWaterMeshActor) == 0x000248, "Wrong size on AWaterMeshActor");
static_assert(offsetof(AWaterMeshActor, WaterVelocityTexture) == 0x000238, "Member 'AWaterMeshActor::WaterVelocityTexture' has a wrong offset!");
static_assert(offsetof(AWaterMeshActor, WaterMesh) == 0x000240, "Member 'AWaterMeshActor::WaterMesh' has a wrong offset!");

// Class Water.WaterMeshComponent
// 0x0120 (0x05B0 - 0x0490)
class UWaterMeshComponent final : public UMeshComponent
{
public:
	int32                                         ForceCollapseDensityLevel;                         // 0x0488(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TileSize;                                          // 0x048C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              ExtentInTiles;                                     // 0x0490(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     FarDistanceMaterial;                               // 0x0498(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarDistanceMeshExtent;                             // 0x04A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RTWorldLocation;                                   // 0x04A4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RTWorldSizeVector;                                 // 0x04B0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4BC[0x64];                                     // 0x04BC(0x0064)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UMaterialInterface*>               UsedMaterials;                                     // 0x0520(0x0050)(Transient, TextExportTransient, NonPIEDuplicateTransient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_570[0x30];                                     // 0x0570(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TessellationFactor;                                // 0x05A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LODScale;                                          // 0x05A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5A8[0x8];                                      // 0x05A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterMeshComponent">();
	}
	static class UWaterMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterMeshComponent>();
	}
};
static_assert(alignof(UWaterMeshComponent) == 0x000010, "Wrong alignment on UWaterMeshComponent");
static_assert(sizeof(UWaterMeshComponent) == 0x0005B0, "Wrong size on UWaterMeshComponent");
static_assert(offsetof(UWaterMeshComponent, ForceCollapseDensityLevel) == 0x000488, "Member 'UWaterMeshComponent::ForceCollapseDensityLevel' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, TileSize) == 0x00048C, "Member 'UWaterMeshComponent::TileSize' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, ExtentInTiles) == 0x000490, "Member 'UWaterMeshComponent::ExtentInTiles' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, FarDistanceMaterial) == 0x000498, "Member 'UWaterMeshComponent::FarDistanceMaterial' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, FarDistanceMeshExtent) == 0x0004A0, "Member 'UWaterMeshComponent::FarDistanceMeshExtent' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, RTWorldLocation) == 0x0004A4, "Member 'UWaterMeshComponent::RTWorldLocation' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, RTWorldSizeVector) == 0x0004B0, "Member 'UWaterMeshComponent::RTWorldSizeVector' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, UsedMaterials) == 0x000520, "Member 'UWaterMeshComponent::UsedMaterials' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, TessellationFactor) == 0x0005A0, "Member 'UWaterMeshComponent::TessellationFactor' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, LODScale) == 0x0005A4, "Member 'UWaterMeshComponent::LODScale' has a wrong offset!");

// Class Water.WaterRuntimeSettings
// 0x0040 (0x0078 - 0x0038)
class UWaterRuntimeSettings final : public UDeveloperSettings
{
public:
	ECollisionChannel                             CollisionChannelForWaterTraces;                    // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialParameterCollection> MaterialParameterCollection;                       // 0x0040(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterBodyIconWorldSize;                            // 0x0068(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterBodyIconWorldZOffset;                         // 0x006C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefaultWaterCollisionProfileName;                  // 0x0070(0x0008)(Edit, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterRuntimeSettings">();
	}
	static class UWaterRuntimeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterRuntimeSettings>();
	}
};
static_assert(alignof(UWaterRuntimeSettings) == 0x000008, "Wrong alignment on UWaterRuntimeSettings");
static_assert(sizeof(UWaterRuntimeSettings) == 0x000078, "Wrong size on UWaterRuntimeSettings");
static_assert(offsetof(UWaterRuntimeSettings, CollisionChannelForWaterTraces) == 0x000038, "Member 'UWaterRuntimeSettings::CollisionChannelForWaterTraces' has a wrong offset!");
static_assert(offsetof(UWaterRuntimeSettings, MaterialParameterCollection) == 0x000040, "Member 'UWaterRuntimeSettings::MaterialParameterCollection' has a wrong offset!");
static_assert(offsetof(UWaterRuntimeSettings, WaterBodyIconWorldSize) == 0x000068, "Member 'UWaterRuntimeSettings::WaterBodyIconWorldSize' has a wrong offset!");
static_assert(offsetof(UWaterRuntimeSettings, WaterBodyIconWorldZOffset) == 0x00006C, "Member 'UWaterRuntimeSettings::WaterBodyIconWorldZOffset' has a wrong offset!");
static_assert(offsetof(UWaterRuntimeSettings, DefaultWaterCollisionProfileName) == 0x000070, "Member 'UWaterRuntimeSettings::DefaultWaterCollisionProfileName' has a wrong offset!");

// Class Water.WaterSplineComponent
// 0x0020 (0x0580 - 0x0560)
class UWaterSplineComponent final : public USplineComponent
{
public:
	struct FWaterSplineCurveDefaults              WaterSplineDefaults;                               // 0x0558(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FWaterSplineCurveDefaults              PreviousWaterSplineDefaults;                       // 0x0568(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_578[0x8];                                      // 0x0578(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterSplineComponent">();
	}
	static class UWaterSplineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterSplineComponent>();
	}
};
static_assert(alignof(UWaterSplineComponent) == 0x000010, "Wrong alignment on UWaterSplineComponent");
static_assert(sizeof(UWaterSplineComponent) == 0x000580, "Wrong size on UWaterSplineComponent");
static_assert(offsetof(UWaterSplineComponent, WaterSplineDefaults) == 0x000558, "Member 'UWaterSplineComponent::WaterSplineDefaults' has a wrong offset!");
static_assert(offsetof(UWaterSplineComponent, PreviousWaterSplineDefaults) == 0x000568, "Member 'UWaterSplineComponent::PreviousWaterSplineDefaults' has a wrong offset!");

// Class Water.WaterSplineMetadata
// 0x0078 (0x00A0 - 0x0028)
class UWaterSplineMetadata final : public USplineMetadata
{
public:
	struct FInterpCurveFloat                      Depth;                                             // 0x0028(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                      WaterVelocityScalar;                               // 0x0040(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                      RiverWidth;                                        // 0x0058(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                      AudioIntensity;                                    // 0x0070(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveVector                     WaterVelocity;                                     // 0x0088(0x0018)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterSplineMetadata">();
	}
	static class UWaterSplineMetadata* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterSplineMetadata>();
	}
};
static_assert(alignof(UWaterSplineMetadata) == 0x000008, "Wrong alignment on UWaterSplineMetadata");
static_assert(sizeof(UWaterSplineMetadata) == 0x0000A0, "Wrong size on UWaterSplineMetadata");
static_assert(offsetof(UWaterSplineMetadata, Depth) == 0x000028, "Member 'UWaterSplineMetadata::Depth' has a wrong offset!");
static_assert(offsetof(UWaterSplineMetadata, WaterVelocityScalar) == 0x000040, "Member 'UWaterSplineMetadata::WaterVelocityScalar' has a wrong offset!");
static_assert(offsetof(UWaterSplineMetadata, RiverWidth) == 0x000058, "Member 'UWaterSplineMetadata::RiverWidth' has a wrong offset!");
static_assert(offsetof(UWaterSplineMetadata, AudioIntensity) == 0x000070, "Member 'UWaterSplineMetadata::AudioIntensity' has a wrong offset!");
static_assert(offsetof(UWaterSplineMetadata, WaterVelocity) == 0x000088, "Member 'UWaterSplineMetadata::WaterVelocity' has a wrong offset!");

// Class Water.WaterSubsystem
// 0x00C8 (0x0108 - 0x0040)
class UWaterSubsystem final : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_40[0x38];                                      // 0x0040(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class ABuoyancyManager*                       BuoyancyManager;                                   // 0x0078(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCameraUnderwaterStateChanged;                    // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnWaterScalabilityChanged;                         // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UStaticMesh*                            DefaultRiverMesh;                                  // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            DefaultLakeMesh;                                   // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWaterMeshActor*                        WaterMeshActor;                                    // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B8[0x28];                                      // 0x00B8(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialParameterCollection*           MaterialParameterCollection;                       // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x20];                                      // 0x00E8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static int32 GetShallowWaterMaxDynamicForces();
	static int32 GetShallowWaterMaxImpulseForces();
	static int32 GetShallowWaterSimulationRenderTargetSize();

	void PrintToWaterLog(const class FString& Message, bool bWarning);
	void SetOceanFloodHeight(float InFloodHeight);

	float GetCameraUnderwaterDepth() const;
	float GetOceanBaseHeight() const;
	float GetOceanFloodHeight() const;
	float GetOceanTotalHeight() const;
	float GetSmoothedWorldTimeSeconds() const;
	float GetWaterTimeSeconds() const;
	bool IsShallowWaterSimulationEnabled() const;
	bool IsUnderwaterPostProcessEnabled() const;
	bool IsWaterRenderingEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterSubsystem">();
	}
	static class UWaterSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterSubsystem>();
	}
};
static_assert(alignof(UWaterSubsystem) == 0x000008, "Wrong alignment on UWaterSubsystem");
static_assert(sizeof(UWaterSubsystem) == 0x000108, "Wrong size on UWaterSubsystem");
static_assert(offsetof(UWaterSubsystem, BuoyancyManager) == 0x000078, "Member 'UWaterSubsystem::BuoyancyManager' has a wrong offset!");
static_assert(offsetof(UWaterSubsystem, OnCameraUnderwaterStateChanged) == 0x000080, "Member 'UWaterSubsystem::OnCameraUnderwaterStateChanged' has a wrong offset!");
static_assert(offsetof(UWaterSubsystem, OnWaterScalabilityChanged) == 0x000090, "Member 'UWaterSubsystem::OnWaterScalabilityChanged' has a wrong offset!");
static_assert(offsetof(UWaterSubsystem, DefaultRiverMesh) == 0x0000A0, "Member 'UWaterSubsystem::DefaultRiverMesh' has a wrong offset!");
static_assert(offsetof(UWaterSubsystem, DefaultLakeMesh) == 0x0000A8, "Member 'UWaterSubsystem::DefaultLakeMesh' has a wrong offset!");
static_assert(offsetof(UWaterSubsystem, WaterMeshActor) == 0x0000B0, "Member 'UWaterSubsystem::WaterMeshActor' has a wrong offset!");
static_assert(offsetof(UWaterSubsystem, MaterialParameterCollection) == 0x0000E0, "Member 'UWaterSubsystem::MaterialParameterCollection' has a wrong offset!");

// Class Water.WaterWavesAsset
// 0x0008 (0x0030 - 0x0028)
class UWaterWavesAsset final : public UObject
{
public:
	class UWaterWaves*                            WaterWaves;                                        // 0x0028(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterWavesAsset">();
	}
	static class UWaterWavesAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterWavesAsset>();
	}
};
static_assert(alignof(UWaterWavesAsset) == 0x000008, "Wrong alignment on UWaterWavesAsset");
static_assert(sizeof(UWaterWavesAsset) == 0x000030, "Wrong size on UWaterWavesAsset");
static_assert(offsetof(UWaterWavesAsset, WaterWaves) == 0x000028, "Member 'UWaterWavesAsset::WaterWaves' has a wrong offset!");

// Class Water.WaterWavesAssetReference
// 0x0008 (0x0030 - 0x0028)
class UWaterWavesAssetReference final : public UWaterWavesBase
{
public:
	class UWaterWavesAsset*                       WaterWavesAsset;                                   // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterWavesAssetReference">();
	}
	static class UWaterWavesAssetReference* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterWavesAssetReference>();
	}
};
static_assert(alignof(UWaterWavesAssetReference) == 0x000008, "Wrong alignment on UWaterWavesAssetReference");
static_assert(sizeof(UWaterWavesAssetReference) == 0x000030, "Wrong size on UWaterWavesAssetReference");
static_assert(offsetof(UWaterWavesAssetReference, WaterWavesAsset) == 0x000028, "Member 'UWaterWavesAssetReference::WaterWavesAsset' has a wrong offset!");

}

