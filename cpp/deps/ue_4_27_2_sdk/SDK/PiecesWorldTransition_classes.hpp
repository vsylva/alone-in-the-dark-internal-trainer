#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PiecesWorldTransition

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "FMODStudio_structs.hpp"


namespace SDK
{

// Class PiecesWorldTransition.PiecesWorldTransition_BFL
// 0x0000 (0x0028 - 0x0028)
class UPiecesWorldTransition_BFL final : public UBlueprintFunctionLibrary
{
public:
	static bool LoadAutoSaveAndTravelToLevel(class UObject* WorldContextObject);
	static bool LoadLatestSaveAndTravelToLevel(class UObject* WorldContextObject);
	static bool LoadSaveFromSlotAndTravelToLevel(class UObject* WorldContextObject, int32 InSlotIndex);
	static class ULoadingScreen_Widget* TravelToLevel(class UObject* WorldContextObject, const TSoftObjectPtr<class UWorld> InLevel, TSubclassOf<class ULoadingScreen_Widget> WidgetType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesWorldTransition_BFL">();
	}
	static class UPiecesWorldTransition_BFL* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesWorldTransition_BFL>();
	}
};
static_assert(alignof(UPiecesWorldTransition_BFL) == 0x000008, "Wrong alignment on UPiecesWorldTransition_BFL");
static_assert(sizeof(UPiecesWorldTransition_BFL) == 0x000028, "Wrong size on UPiecesWorldTransition_BFL");

// Class PiecesWorldTransition.PiecesWorldTransition_DeveloperSettings
// 0x0098 (0x00D0 - 0x0038)
class UPiecesWorldTransition_DeveloperSettings final : public UDeveloperSettings
{
public:
	float                                         MinLoadingScreenTime;                              // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   LoadSaveLoadingScreen;                             // 0x0040(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   TravelToLevelLoadingScreen;                        // 0x0068(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoadingScreenCameraFadeTime;                       // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SystemFlowIdentity;                                // 0x0094(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SystemFlowNotify;                                  // 0x009C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Config, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFMODEvent>              LoadingScreenSnapshot;                             // 0x00A8(0x0028)(Edit, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesWorldTransition_DeveloperSettings">();
	}
	static class UPiecesWorldTransition_DeveloperSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesWorldTransition_DeveloperSettings>();
	}
};
static_assert(alignof(UPiecesWorldTransition_DeveloperSettings) == 0x000008, "Wrong alignment on UPiecesWorldTransition_DeveloperSettings");
static_assert(sizeof(UPiecesWorldTransition_DeveloperSettings) == 0x0000D0, "Wrong size on UPiecesWorldTransition_DeveloperSettings");
static_assert(offsetof(UPiecesWorldTransition_DeveloperSettings, MinLoadingScreenTime) == 0x000038, "Member 'UPiecesWorldTransition_DeveloperSettings::MinLoadingScreenTime' has a wrong offset!");
static_assert(offsetof(UPiecesWorldTransition_DeveloperSettings, LoadSaveLoadingScreen) == 0x000040, "Member 'UPiecesWorldTransition_DeveloperSettings::LoadSaveLoadingScreen' has a wrong offset!");
static_assert(offsetof(UPiecesWorldTransition_DeveloperSettings, TravelToLevelLoadingScreen) == 0x000068, "Member 'UPiecesWorldTransition_DeveloperSettings::TravelToLevelLoadingScreen' has a wrong offset!");
static_assert(offsetof(UPiecesWorldTransition_DeveloperSettings, LoadingScreenCameraFadeTime) == 0x000090, "Member 'UPiecesWorldTransition_DeveloperSettings::LoadingScreenCameraFadeTime' has a wrong offset!");
static_assert(offsetof(UPiecesWorldTransition_DeveloperSettings, SystemFlowIdentity) == 0x000094, "Member 'UPiecesWorldTransition_DeveloperSettings::SystemFlowIdentity' has a wrong offset!");
static_assert(offsetof(UPiecesWorldTransition_DeveloperSettings, SystemFlowNotify) == 0x00009C, "Member 'UPiecesWorldTransition_DeveloperSettings::SystemFlowNotify' has a wrong offset!");
static_assert(offsetof(UPiecesWorldTransition_DeveloperSettings, LoadingScreenSnapshot) == 0x0000A8, "Member 'UPiecesWorldTransition_DeveloperSettings::LoadingScreenSnapshot' has a wrong offset!");

// Class PiecesWorldTransition.PiecesWorldTransition_EngineSubsystem
// 0x0010 (0x0040 - 0x0030)
class UPiecesWorldTransition_EngineSubsystem final : public UEngineSubsystem
{
public:
	TSubclassOf<class ULoadingScreen_Widget>      LoadSaveLoadingScreenPrivate;                      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class ULoadingScreen_Widget>      TravelToLevelLoadingScreenPrivate;                 // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesWorldTransition_EngineSubsystem">();
	}
	static class UPiecesWorldTransition_EngineSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesWorldTransition_EngineSubsystem>();
	}
};
static_assert(alignof(UPiecesWorldTransition_EngineSubsystem) == 0x000008, "Wrong alignment on UPiecesWorldTransition_EngineSubsystem");
static_assert(sizeof(UPiecesWorldTransition_EngineSubsystem) == 0x000040, "Wrong size on UPiecesWorldTransition_EngineSubsystem");
static_assert(offsetof(UPiecesWorldTransition_EngineSubsystem, LoadSaveLoadingScreenPrivate) == 0x000030, "Member 'UPiecesWorldTransition_EngineSubsystem::LoadSaveLoadingScreenPrivate' has a wrong offset!");
static_assert(offsetof(UPiecesWorldTransition_EngineSubsystem, TravelToLevelLoadingScreenPrivate) == 0x000038, "Member 'UPiecesWorldTransition_EngineSubsystem::TravelToLevelLoadingScreenPrivate' has a wrong offset!");

// Class PiecesWorldTransition.PiecesWorldTransition_GameInstanceSubsystem
// 0x00A0 (0x00D0 - 0x0030)
class UPiecesWorldTransition_GameInstanceSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnAllLevelsLoaded;                                 // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x80];                                      // 0x0048(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFMODEventInstance                     LoadingScreenInstance;                             // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)

public:
	void DecrementWorkInProgress(const class UObject* Worker);
	void IncrementWorkInProgress(const class UObject* Worker);
	void OnMoviesCompleted();
	void OnPostLoadMapHandler(class UWorld* LoadedWorld);
	void OnSaveGameLoaded(bool Success, const class UPiecesSaveGameWorld* SaveGame);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesWorldTransition_GameInstanceSubsystem">();
	}
	static class UPiecesWorldTransition_GameInstanceSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesWorldTransition_GameInstanceSubsystem>();
	}
};
static_assert(alignof(UPiecesWorldTransition_GameInstanceSubsystem) == 0x000008, "Wrong alignment on UPiecesWorldTransition_GameInstanceSubsystem");
static_assert(sizeof(UPiecesWorldTransition_GameInstanceSubsystem) == 0x0000D0, "Wrong size on UPiecesWorldTransition_GameInstanceSubsystem");
static_assert(offsetof(UPiecesWorldTransition_GameInstanceSubsystem, OnAllLevelsLoaded) == 0x000038, "Member 'UPiecesWorldTransition_GameInstanceSubsystem::OnAllLevelsLoaded' has a wrong offset!");
static_assert(offsetof(UPiecesWorldTransition_GameInstanceSubsystem, LoadingScreenInstance) == 0x0000C8, "Member 'UPiecesWorldTransition_GameInstanceSubsystem::LoadingScreenInstance' has a wrong offset!");

// Class PiecesWorldTransition.PiecesWorldTransition_WorkerInterface
// 0x0000 (0x0028 - 0x0028)
class IPiecesWorldTransition_WorkerInterface final : public IInterface
{
public:
	bool TryToStartWork(const TSoftObjectPtr<class UWorld>& InWorldTryingToLoad, class UPiecesWorldTransition_GameInstanceSubsystem* InPiecesWorldTransition_Subsystem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesWorldTransition_WorkerInterface">();
	}
	static class IPiecesWorldTransition_WorkerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IPiecesWorldTransition_WorkerInterface>();
	}
};
static_assert(alignof(IPiecesWorldTransition_WorkerInterface) == 0x000008, "Wrong alignment on IPiecesWorldTransition_WorkerInterface");
static_assert(sizeof(IPiecesWorldTransition_WorkerInterface) == 0x000028, "Wrong size on IPiecesWorldTransition_WorkerInterface");

}

