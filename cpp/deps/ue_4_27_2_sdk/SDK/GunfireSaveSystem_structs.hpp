#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GunfireSaveSystem

#include "Basic.hpp"


namespace SDK
{

// Enum GunfireSaveSystem.EPersistenceSaveResult
// NumValues: 0x0005
enum class EPersistenceSaveResult : uint8
{
	Success                                  = 0,
	Disabled                                 = 1,
	Busy                                     = 2,
	Unknown                                  = 3,
	EPersistenceSaveResult_MAX               = 4,
};

// Enum GunfireSaveSystem.EPersistenceLoadResult
// NumValues: 0x0006
enum class EPersistenceLoadResult : uint8
{
	Success                                  = 0,
	DoesNotExist                             = 1,
	Corrupt                                  = 2,
	TooNew                                   = 3,
	Unknown                                  = 4,
	EPersistenceLoadResult_MAX               = 5,
};

// Enum GunfireSaveSystem.EPersistenceHasResult
// NumValues: 0x0005
enum class EPersistenceHasResult : uint8
{
	Empty                                    = 0,
	Exists                                   = 1,
	Corrupt                                  = 2,
	Unknown                                  = 3,
	EPersistenceHasResult_MAX                = 4,
};

// Enum GunfireSaveSystem.ESaveTypePolicy
// NumValues: 0x0004
enum class ESaveTypePolicy : uint32
{
	None                                     = 0,
	Profile                                  = 1,
	Game                                     = 2,
	ESaveTypePolicy_MAX                      = 3,
};

// ScriptStruct GunfireSaveSystem.PersistenceKey
// 0x0010 (0x0010 - 0x0000)
struct FPersistenceKey final
{
public:
	class FName                                   ContainerKey;                                      // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        PersistentID;                                      // 0x0008(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPersistenceKey) == 0x000008, "Wrong alignment on FPersistenceKey");
static_assert(sizeof(FPersistenceKey) == 0x000010, "Wrong size on FPersistenceKey");
static_assert(offsetof(FPersistenceKey, ContainerKey) == 0x000000, "Member 'FPersistenceKey::ContainerKey' has a wrong offset!");
static_assert(offsetof(FPersistenceKey, PersistentID) == 0x000008, "Member 'FPersistenceKey::PersistentID' has a wrong offset!");

// ScriptStruct GunfireSaveSystem.PersistentReference
// 0x0018 (0x0018 - 0x0000)
struct FPersistentReference final
{
public:
	struct FPersistenceKey                        Key;                                               // 0x0000(0x0010)(SaveGame, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class AActor*                                 CachedActor;                                       // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FPersistentReference) == 0x000008, "Wrong alignment on FPersistentReference");
static_assert(sizeof(FPersistentReference) == 0x000018, "Wrong size on FPersistentReference");
static_assert(offsetof(FPersistentReference, Key) == 0x000000, "Member 'FPersistentReference::Key' has a wrong offset!");
static_assert(offsetof(FPersistentReference, CachedActor) == 0x000010, "Member 'FPersistentReference::CachedActor' has a wrong offset!");

// ScriptStruct GunfireSaveSystem.PersistenceBlob
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FPersistenceBlob final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPersistenceBlob) == 0x000008, "Wrong alignment on FPersistenceBlob");
static_assert(sizeof(FPersistenceBlob) == 0x000010, "Wrong size on FPersistenceBlob");

// ScriptStruct GunfireSaveSystem.SaveGameAchievementProgress
// 0x0014 (0x0014 - 0x0000)
struct FSaveGameAchievementProgress final
{
public:
	class FName                                   AchievementId;                                     // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x8];                                        // 0x000C(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSaveGameAchievementProgress) == 0x000004, "Wrong alignment on FSaveGameAchievementProgress");
static_assert(sizeof(FSaveGameAchievementProgress) == 0x000014, "Wrong size on FSaveGameAchievementProgress");
static_assert(offsetof(FSaveGameAchievementProgress, AchievementId) == 0x000000, "Member 'FSaveGameAchievementProgress::AchievementId' has a wrong offset!");
static_assert(offsetof(FSaveGameAchievementProgress, Value) == 0x000008, "Member 'FSaveGameAchievementProgress::Value' has a wrong offset!");

// ScriptStruct GunfireSaveSystem.SaveGameUserSetting
// 0x0020 (0x0020 - 0x0000)
struct FSaveGameUserSetting final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSaveGameUserSetting) == 0x000008, "Wrong alignment on FSaveGameUserSetting");
static_assert(sizeof(FSaveGameUserSetting) == 0x000020, "Wrong size on FSaveGameUserSetting");
static_assert(offsetof(FSaveGameUserSetting, Key) == 0x000000, "Member 'FSaveGameUserSetting::Key' has a wrong offset!");
static_assert(offsetof(FSaveGameUserSetting, Value) == 0x000010, "Member 'FSaveGameUserSetting::Value' has a wrong offset!");

}

