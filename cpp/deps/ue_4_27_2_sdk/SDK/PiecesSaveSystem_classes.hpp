#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PiecesSaveSystem

#include "Basic.hpp"

#include "PiecesGameplaySession_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "PiecesSaveSystem_structs.hpp"
#include "GunfireSaveSystem_structs.hpp"
#include "GunfireSaveSystem_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class PiecesSaveSystem.PiecesSaveSubsystem
// 0x00A0 (0x0340 - 0x02A0)
class alignas(0x10) UPiecesSaveSubsystem final : public UPersistenceManager
{
public:
	uint8                                         Pad_2A0[0x8];                                      // 0x02A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPiecesSaveGameWorld*>           SaveGames;                                         // 0x02A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AllSavesDeleted;                                   // 0x02B8(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C8[0x40];                                     // 0x02C8(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumSaveSlots;                                      // 0x0308(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_30C[0x34];                                     // 0x030C(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void DelayedAutoSave(const class UObject* WorldContextObject, const float Delay);
	static void DoAutoSave(const class UObject* WorldContextObject, const TDelegate<void(bool Success)>& Callback);

	void AllSavesDeleted__DelegateSignature();
	void BPDoAutoSave(const TDelegate<void(bool Success)>& CompletedCallback);
	void SaveDoneDelegate__DelegateSignature(bool Success);
	void DeleteAllSaves();
	bool DoesAutoSaveExist();
	const class UPiecesSaveGameWorld* GetSaveGameBySlot(int32 SlotIndex);
	bool HasSaveInAnySlot();
	bool HasSaveInSlot(int32 SlotIndex);
	void LoadDoneDelegate__DelegateSignature(bool Success, const class UPiecesSaveGameWorld* SaveGame);
	void LoadLatestSave(const TDelegate<void(bool Success, class UPiecesSaveGameWorld* SaveGame)>& CompletedCallback);
	void OnGameSessionEnded(class UGameplaySession* GameplaySession);
	void OnPersistenceDeleteSaveDone(bool bResult);
	void OnSaveGameWorldLoadDone(EPersistenceLoadResult Result, class USaveGame* Save);
	void OnSaveGameWorldSaved(EPersistenceSaveResult Result);

	class UPiecesSaveGameWorld* GetLatestSave() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesSaveSubsystem">();
	}
	static class UPiecesSaveSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesSaveSubsystem>();
	}
};
static_assert(alignof(UPiecesSaveSubsystem) == 0x000010, "Wrong alignment on UPiecesSaveSubsystem");
static_assert(sizeof(UPiecesSaveSubsystem) == 0x000340, "Wrong size on UPiecesSaveSubsystem");
static_assert(offsetof(UPiecesSaveSubsystem, SaveGames) == 0x0002A8, "Member 'UPiecesSaveSubsystem::SaveGames' has a wrong offset!");
static_assert(offsetof(UPiecesSaveSubsystem, AllSavesDeleted) == 0x0002B8, "Member 'UPiecesSaveSubsystem::AllSavesDeleted' has a wrong offset!");
static_assert(offsetof(UPiecesSaveSubsystem, NumSaveSlots) == 0x000308, "Member 'UPiecesSaveSubsystem::NumSaveSlots' has a wrong offset!");

// Class PiecesSaveSystem.PiecesSaveGameWorld
// 0x0088 (0x00D0 - 0x0048)
class UPiecesSaveGameWorld : public USaveGameWorld
{
public:
	int32                                         SlotIndex;                                         // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PlayerTransform;                                   // 0x0050(0x0030)(SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDateTime                              SaveTime;                                          // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              TotalPlayTime;                                     // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0x8];                                       // 0x0090(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSystemSaveData>                SystemsData;                                       // 0x0098(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<struct FObjectSaveData>                ObjectData;                                        // 0x00A8(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        CurrentLevelSoftPath;                              // 0x00B8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesSaveGameWorld">();
	}
	static class UPiecesSaveGameWorld* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesSaveGameWorld>();
	}
};
static_assert(alignof(UPiecesSaveGameWorld) == 0x000010, "Wrong alignment on UPiecesSaveGameWorld");
static_assert(sizeof(UPiecesSaveGameWorld) == 0x0000D0, "Wrong size on UPiecesSaveGameWorld");
static_assert(offsetof(UPiecesSaveGameWorld, SlotIndex) == 0x000048, "Member 'UPiecesSaveGameWorld::SlotIndex' has a wrong offset!");
static_assert(offsetof(UPiecesSaveGameWorld, PlayerTransform) == 0x000050, "Member 'UPiecesSaveGameWorld::PlayerTransform' has a wrong offset!");
static_assert(offsetof(UPiecesSaveGameWorld, SaveTime) == 0x000080, "Member 'UPiecesSaveGameWorld::SaveTime' has a wrong offset!");
static_assert(offsetof(UPiecesSaveGameWorld, TotalPlayTime) == 0x000088, "Member 'UPiecesSaveGameWorld::TotalPlayTime' has a wrong offset!");
static_assert(offsetof(UPiecesSaveGameWorld, SystemsData) == 0x000098, "Member 'UPiecesSaveGameWorld::SystemsData' has a wrong offset!");
static_assert(offsetof(UPiecesSaveGameWorld, ObjectData) == 0x0000A8, "Member 'UPiecesSaveGameWorld::ObjectData' has a wrong offset!");
static_assert(offsetof(UPiecesSaveGameWorld, CurrentLevelSoftPath) == 0x0000B8, "Member 'UPiecesSaveGameWorld::CurrentLevelSoftPath' has a wrong offset!");

// Class PiecesSaveSystem.PiecesSaveSystemSettings
// 0x0008 (0x0040 - 0x0038)
class UPiecesSaveSystemSettings final : public UDeveloperSettings
{
public:
	int32                                         NumSaveSlots;                                      // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesSaveSystemSettings">();
	}
	static class UPiecesSaveSystemSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesSaveSystemSettings>();
	}
};
static_assert(alignof(UPiecesSaveSystemSettings) == 0x000008, "Wrong alignment on UPiecesSaveSystemSettings");
static_assert(sizeof(UPiecesSaveSystemSettings) == 0x000040, "Wrong size on UPiecesSaveSystemSettings");
static_assert(offsetof(UPiecesSaveSystemSettings, NumSaveSlots) == 0x000038, "Member 'UPiecesSaveSystemSettings::NumSaveSlots' has a wrong offset!");

// Class PiecesSaveSystem.PiecesSavingEnabledSubsystem
// 0x0030 (0x0060 - 0x0030)
class UPiecesSavingEnabledSubsystem final : public UGameplaySessionSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSavingEnabledChanged;                            // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLoadingEnabledChanged;                           // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bSavingIsEnabled;                                  // 0x0058(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bLoadingIsEnabled;                                 // 0x0059(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SavingEnabledChanged__DelegateSignature(bool bEnabled);
	void SetLoadingEnabled(bool bEnabled);
	void SetSavingEnabled(bool bEnabled);

	bool IsLoadingEnabled() const;
	bool IsSavingEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesSavingEnabledSubsystem">();
	}
	static class UPiecesSavingEnabledSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesSavingEnabledSubsystem>();
	}
};
static_assert(alignof(UPiecesSavingEnabledSubsystem) == 0x000008, "Wrong alignment on UPiecesSavingEnabledSubsystem");
static_assert(sizeof(UPiecesSavingEnabledSubsystem) == 0x000060, "Wrong size on UPiecesSavingEnabledSubsystem");
static_assert(offsetof(UPiecesSavingEnabledSubsystem, OnSavingEnabledChanged) == 0x000038, "Member 'UPiecesSavingEnabledSubsystem::OnSavingEnabledChanged' has a wrong offset!");
static_assert(offsetof(UPiecesSavingEnabledSubsystem, OnLoadingEnabledChanged) == 0x000048, "Member 'UPiecesSavingEnabledSubsystem::OnLoadingEnabledChanged' has a wrong offset!");
static_assert(offsetof(UPiecesSavingEnabledSubsystem, bSavingIsEnabled) == 0x000058, "Member 'UPiecesSavingEnabledSubsystem::bSavingIsEnabled' has a wrong offset!");
static_assert(offsetof(UPiecesSavingEnabledSubsystem, bLoadingIsEnabled) == 0x000059, "Member 'UPiecesSavingEnabledSubsystem::bLoadingIsEnabled' has a wrong offset!");

// Class PiecesSaveSystem.SaveableSubsystem
// 0x0000 (0x0028 - 0x0028)
class ISaveableSubsystem final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SaveableSubsystem">();
	}
	static class ISaveableSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISaveableSubsystem>();
	}
};
static_assert(alignof(ISaveableSubsystem) == 0x000008, "Wrong alignment on ISaveableSubsystem");
static_assert(sizeof(ISaveableSubsystem) == 0x000028, "Wrong size on ISaveableSubsystem");

}

