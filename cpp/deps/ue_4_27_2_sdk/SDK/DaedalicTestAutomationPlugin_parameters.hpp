#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DaedalicTestAutomationPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "DaedalicTestAutomationPlugin_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function DaedalicTestAutomationPlugin.DaeGauntletTestController.OnTestSuiteFinished
// 0x0008 (0x0008 - 0x0000)
struct DaeGauntletTestController_OnTestSuiteFinished final
{
public:
	class ADaeTestSuiteActor*                     TestSuite;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeGauntletTestController_OnTestSuiteFinished) == 0x000008, "Wrong alignment on DaeGauntletTestController_OnTestSuiteFinished");
static_assert(sizeof(DaeGauntletTestController_OnTestSuiteFinished) == 0x000008, "Wrong size on DaeGauntletTestController_OnTestSuiteFinished");
static_assert(offsetof(DaeGauntletTestController_OnTestSuiteFinished, TestSuite) == 0x000000, "Member 'DaeGauntletTestController_OnTestSuiteFinished::TestSuite' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestActor.ReceiveOnAct
// 0x0008 (0x0008 - 0x0000)
struct DaeTestActor_ReceiveOnAct final
{
public:
	class UObject*                                Parameter;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestActor_ReceiveOnAct) == 0x000008, "Wrong alignment on DaeTestActor_ReceiveOnAct");
static_assert(sizeof(DaeTestActor_ReceiveOnAct) == 0x000008, "Wrong size on DaeTestActor_ReceiveOnAct");
static_assert(offsetof(DaeTestActor_ReceiveOnAct, Parameter) == 0x000000, "Member 'DaeTestActor_ReceiveOnAct::Parameter' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestActor.ReceiveOnArrange
// 0x0008 (0x0008 - 0x0000)
struct DaeTestActor_ReceiveOnArrange final
{
public:
	class UObject*                                Parameter;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestActor_ReceiveOnArrange) == 0x000008, "Wrong alignment on DaeTestActor_ReceiveOnArrange");
static_assert(sizeof(DaeTestActor_ReceiveOnArrange) == 0x000008, "Wrong size on DaeTestActor_ReceiveOnArrange");
static_assert(offsetof(DaeTestActor_ReceiveOnArrange, Parameter) == 0x000000, "Member 'DaeTestActor_ReceiveOnArrange::Parameter' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestActor.ReceiveOnAssert
// 0x0008 (0x0008 - 0x0000)
struct DaeTestActor_ReceiveOnAssert final
{
public:
	class UObject*                                Parameter;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestActor_ReceiveOnAssert) == 0x000008, "Wrong alignment on DaeTestActor_ReceiveOnAssert");
static_assert(sizeof(DaeTestActor_ReceiveOnAssert) == 0x000008, "Wrong size on DaeTestActor_ReceiveOnAssert");
static_assert(offsetof(DaeTestActor_ReceiveOnAssert, Parameter) == 0x000000, "Member 'DaeTestActor_ReceiveOnAssert::Parameter' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestActor.ReceiveOnAssume
// 0x0008 (0x0008 - 0x0000)
struct DaeTestActor_ReceiveOnAssume final
{
public:
	class UObject*                                Parameter;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestActor_ReceiveOnAssume) == 0x000008, "Wrong alignment on DaeTestActor_ReceiveOnAssume");
static_assert(sizeof(DaeTestActor_ReceiveOnAssume) == 0x000008, "Wrong size on DaeTestActor_ReceiveOnAssume");
static_assert(offsetof(DaeTestActor_ReceiveOnAssume, Parameter) == 0x000000, "Member 'DaeTestActor_ReceiveOnAssume::Parameter' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestActor.GetCurrentParameter
// 0x0008 (0x0008 - 0x0000)
struct DaeTestActor_GetCurrentParameter final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestActor_GetCurrentParameter) == 0x000008, "Wrong alignment on DaeTestActor_GetCurrentParameter");
static_assert(sizeof(DaeTestActor_GetCurrentParameter) == 0x000008, "Wrong size on DaeTestActor_GetCurrentParameter");
static_assert(offsetof(DaeTestActor_GetCurrentParameter, ReturnValue) == 0x000000, "Member 'DaeTestActor_GetCurrentParameter::ReturnValue' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertCompareByte
// 0x0020 (0x0020 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertCompareByte final
{
public:
	uint8                                         First;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDaeTestComparisonMethod                      ShouldBe;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Second;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareByte) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertCompareByte");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareByte) == 0x000020, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertCompareByte");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareByte, First) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertCompareByte::First' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareByte, ShouldBe) == 0x000001, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertCompareByte::ShouldBe' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareByte, Second) == 0x000002, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertCompareByte::Second' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareByte, What) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertCompareByte::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareByte, Context) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertCompareByte::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertCompareFloat
// 0x0028 (0x0028 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertCompareFloat final
{
public:
	float                                         First;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDaeTestComparisonMethod                      ShouldBe;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Second;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareFloat) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertCompareFloat");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareFloat) == 0x000028, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertCompareFloat");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareFloat, First) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertCompareFloat::First' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareFloat, ShouldBe) == 0x000004, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertCompareFloat::ShouldBe' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareFloat, Second) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertCompareFloat::Second' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareFloat, What) == 0x000010, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertCompareFloat::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareFloat, Context) == 0x000020, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertCompareFloat::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertCompareInt32
// 0x0028 (0x0028 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt32 final
{
public:
	int32                                         First;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDaeTestComparisonMethod                      ShouldBe;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Second;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt32) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt32");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt32) == 0x000028, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt32");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt32, First) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt32::First' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt32, ShouldBe) == 0x000004, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt32::ShouldBe' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt32, Second) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt32::Second' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt32, What) == 0x000010, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt32::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt32, Context) == 0x000020, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt32::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertCompareInt64
// 0x0030 (0x0030 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt64 final
{
public:
	int64                                         First;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDaeTestComparisonMethod                      ShouldBe;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Second;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt64) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt64");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt64) == 0x000030, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt64");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt64, First) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt64::First' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt64, ShouldBe) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt64::ShouldBe' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt64, Second) == 0x000010, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt64::Second' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt64, What) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt64::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt64, Context) == 0x000028, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertCompareInt64::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertEqualByte
// 0x0020 (0x0020 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertEqualByte final
{
public:
	uint8                                         Actual;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Expected;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualByte) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertEqualByte");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualByte) == 0x000020, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertEqualByte");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualByte, Actual) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualByte::Actual' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualByte, Expected) == 0x000001, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualByte::Expected' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualByte, What) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualByte::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualByte, Context) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualByte::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertEqualFloat
// 0x0028 (0x0028 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertEqualFloat final
{
public:
	float                                         Actual;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Expected;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualFloat) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertEqualFloat");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualFloat) == 0x000028, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertEqualFloat");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualFloat, Actual) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualFloat::Actual' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualFloat, Expected) == 0x000004, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualFloat::Expected' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualFloat, What) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualFloat::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualFloat, Context) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualFloat::Context' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualFloat, Tolerance) == 0x000020, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualFloat::Tolerance' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertEqualInt32
// 0x0020 (0x0020 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt32 final
{
public:
	int32                                         Actual;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Expected;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt32) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt32");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt32) == 0x000020, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt32");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt32, Actual) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt32::Actual' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt32, Expected) == 0x000004, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt32::Expected' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt32, What) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt32::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt32, Context) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt32::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertEqualInt64
// 0x0028 (0x0028 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt64 final
{
public:
	int64                                         Actual;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Expected;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt64) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt64");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt64) == 0x000028, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt64");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt64, Actual) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt64::Actual' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt64, Expected) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt64::Expected' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt64, What) == 0x000010, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt64::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt64, Context) == 0x000020, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualInt64::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertEqualName
// 0x0030 (0x0030 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertEqualName final
{
public:
	class FName                                   Actual;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Expected;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCase;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualName) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertEqualName");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualName) == 0x000030, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertEqualName");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualName, Actual) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualName::Actual' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualName, Expected) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualName::Expected' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualName, bIgnoreCase) == 0x000010, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualName::bIgnoreCase' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualName, What) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualName::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualName, Context) == 0x000028, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualName::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertEqualRotator
// 0x0038 (0x0038 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertEqualRotator final
{
public:
	struct FRotator                               Actual;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Expected;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualRotator) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertEqualRotator");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualRotator) == 0x000038, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertEqualRotator");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualRotator, Actual) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualRotator::Actual' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualRotator, Expected) == 0x00000C, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualRotator::Expected' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualRotator, What) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualRotator::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualRotator, Context) == 0x000028, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualRotator::Context' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualRotator, Tolerance) == 0x000030, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualRotator::Tolerance' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertEqualString
// 0x0040 (0x0040 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertEqualString final
{
public:
	class FString                                 Actual;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Expected;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCase;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualString) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertEqualString");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualString) == 0x000040, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertEqualString");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualString, Actual) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualString::Actual' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualString, Expected) == 0x000010, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualString::Expected' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualString, bIgnoreCase) == 0x000020, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualString::bIgnoreCase' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualString, What) == 0x000028, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualString::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualString, Context) == 0x000038, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualString::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertEqualText
// 0x0050 (0x0050 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertEqualText final
{
public:
	class FText                                   Actual;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Expected;                                          // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCase;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualText) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertEqualText");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualText) == 0x000050, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertEqualText");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualText, Actual) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualText::Actual' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualText, Expected) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualText::Expected' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualText, bIgnoreCase) == 0x000030, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualText::bIgnoreCase' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualText, What) == 0x000038, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualText::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualText, Context) == 0x000048, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualText::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertEqualTransform
// 0x0080 (0x0080 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertEqualTransform final
{
public:
	struct FTransform                             Actual;                                            // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             Expected;                                          // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0070(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0078(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualTransform) == 0x000010, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertEqualTransform");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualTransform) == 0x000080, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertEqualTransform");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualTransform, Actual) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualTransform::Actual' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualTransform, Expected) == 0x000030, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualTransform::Expected' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualTransform, What) == 0x000060, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualTransform::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualTransform, Context) == 0x000070, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualTransform::Context' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualTransform, Tolerance) == 0x000078, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualTransform::Tolerance' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertEqualVector
// 0x0038 (0x0038 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertEqualVector final
{
public:
	struct FVector                                Actual;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Expected;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualVector) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertEqualVector");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualVector) == 0x000038, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertEqualVector");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualVector, Actual) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualVector::Actual' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualVector, Expected) == 0x00000C, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualVector::Expected' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualVector, What) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualVector::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualVector, Context) == 0x000028, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualVector::Context' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertEqualVector, Tolerance) == 0x000030, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertEqualVector::Tolerance' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertFail
// 0x0018 (0x0018 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertFail final
{
public:
	class FString                                 What;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertFail) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertFail");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertFail) == 0x000018, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertFail");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertFail, What) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertFail::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertFail, Context) == 0x000010, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertFail::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertFalse
// 0x0020 (0x0020 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertFalse final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertFalse) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertFalse");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertFalse) == 0x000020, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertFalse");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertFalse, bValue) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertFalse::bValue' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertFalse, What) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertFalse::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertFalse, Context) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertFalse::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertImageIsSet
// 0x0020 (0x0020 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertImageIsSet final
{
public:
	class UImage*                                 Image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertImageIsSet) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertImageIsSet");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertImageIsSet) == 0x000020, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertImageIsSet");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertImageIsSet, Image) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertImageIsSet::Image' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertImageIsSet, What) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertImageIsSet::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertImageIsSet, Context) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertImageIsSet::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertInRangeByte
// 0x0020 (0x0020 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertInRangeByte final
{
public:
	uint8                                         Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MinInclusive;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MaxInclusive;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeByte) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertInRangeByte");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeByte) == 0x000020, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertInRangeByte");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeByte, Value) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertInRangeByte::Value' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeByte, MinInclusive) == 0x000001, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertInRangeByte::MinInclusive' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeByte, MaxInclusive) == 0x000002, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertInRangeByte::MaxInclusive' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeByte, What) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertInRangeByte::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeByte, Context) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertInRangeByte::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertInRangeFloat
// 0x0028 (0x0028 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertInRangeFloat final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinInclusive;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxInclusive;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeFloat) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertInRangeFloat");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeFloat) == 0x000028, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertInRangeFloat");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeFloat, Value) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertInRangeFloat::Value' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeFloat, MinInclusive) == 0x000004, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertInRangeFloat::MinInclusive' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeFloat, MaxInclusive) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertInRangeFloat::MaxInclusive' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeFloat, What) == 0x000010, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertInRangeFloat::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeFloat, Context) == 0x000020, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertInRangeFloat::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertInRangeInt32
// 0x0028 (0x0028 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt32 final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinInclusive;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxInclusive;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt32) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt32");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt32) == 0x000028, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt32");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt32, Value) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt32::Value' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt32, MinInclusive) == 0x000004, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt32::MinInclusive' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt32, MaxInclusive) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt32::MaxInclusive' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt32, What) == 0x000010, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt32::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt32, Context) == 0x000020, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt32::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertInRangeInt64
// 0x0030 (0x0030 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt64 final
{
public:
	int64                                         Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         MinInclusive;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         MaxInclusive;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt64) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt64");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt64) == 0x000030, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt64");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt64, Value) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt64::Value' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt64, MinInclusive) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt64::MinInclusive' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt64, MaxInclusive) == 0x000010, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt64::MaxInclusive' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt64, What) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt64::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt64, Context) == 0x000028, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertInRangeInt64::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertInvalid
// 0x0020 (0x0020 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertInvalid final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertInvalid) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertInvalid");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertInvalid) == 0x000020, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertInvalid");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertInvalid, Object) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertInvalid::Object' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertInvalid, What) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertInvalid::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertInvalid, Context) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertInvalid::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotEqualByte
// 0x0020 (0x0020 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualByte final
{
public:
	uint8                                         Actual;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Unexpected;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualByte) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualByte");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualByte) == 0x000020, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualByte");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualByte, Actual) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualByte::Actual' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualByte, Unexpected) == 0x000001, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualByte::Unexpected' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualByte, What) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualByte::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualByte, Context) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualByte::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotEqualFloat
// 0x0028 (0x0028 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualFloat final
{
public:
	float                                         Actual;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Unexpected;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualFloat) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualFloat");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualFloat) == 0x000028, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualFloat");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualFloat, Actual) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualFloat::Actual' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualFloat, Unexpected) == 0x000004, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualFloat::Unexpected' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualFloat, What) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualFloat::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualFloat, Context) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualFloat::Context' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualFloat, Tolerance) == 0x000020, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualFloat::Tolerance' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotEqualInt32
// 0x0020 (0x0020 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt32 final
{
public:
	int32                                         Actual;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Unexpected;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt32) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt32");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt32) == 0x000020, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt32");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt32, Actual) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt32::Actual' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt32, Unexpected) == 0x000004, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt32::Unexpected' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt32, What) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt32::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt32, Context) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt32::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotEqualInt64
// 0x0028 (0x0028 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt64 final
{
public:
	int64                                         Actual;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Unexpected;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt64) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt64");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt64) == 0x000028, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt64");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt64, Actual) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt64::Actual' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt64, Unexpected) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt64::Unexpected' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt64, What) == 0x000010, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt64::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt64, Context) == 0x000020, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualInt64::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotEqualName
// 0x0030 (0x0030 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualName final
{
public:
	class FName                                   Actual;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Unexpected;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCase;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualName) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualName");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualName) == 0x000030, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualName");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualName, Actual) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualName::Actual' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualName, Unexpected) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualName::Unexpected' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualName, bIgnoreCase) == 0x000010, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualName::bIgnoreCase' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualName, What) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualName::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualName, Context) == 0x000028, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualName::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotEqualRotator
// 0x0038 (0x0038 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualRotator final
{
public:
	struct FRotator                               Actual;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Unexpected;                                        // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualRotator) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualRotator");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualRotator) == 0x000038, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualRotator");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualRotator, Actual) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualRotator::Actual' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualRotator, Unexpected) == 0x00000C, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualRotator::Unexpected' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualRotator, What) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualRotator::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualRotator, Context) == 0x000028, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualRotator::Context' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualRotator, Tolerance) == 0x000030, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualRotator::Tolerance' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotEqualString
// 0x0040 (0x0040 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualString final
{
public:
	class FString                                 Actual;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Unexpected;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCase;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualString) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualString");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualString) == 0x000040, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualString");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualString, Actual) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualString::Actual' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualString, Unexpected) == 0x000010, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualString::Unexpected' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualString, bIgnoreCase) == 0x000020, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualString::bIgnoreCase' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualString, What) == 0x000028, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualString::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualString, Context) == 0x000038, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualString::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotEqualText
// 0x0050 (0x0050 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualText final
{
public:
	class FText                                   Actual;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Unexpected;                                        // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCase;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualText) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualText");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualText) == 0x000050, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualText");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualText, Actual) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualText::Actual' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualText, Unexpected) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualText::Unexpected' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualText, bIgnoreCase) == 0x000030, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualText::bIgnoreCase' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualText, What) == 0x000038, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualText::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualText, Context) == 0x000048, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualText::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotEqualTransform
// 0x0080 (0x0080 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualTransform final
{
public:
	struct FTransform                             Actual;                                            // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             Unexpected;                                        // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0070(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0078(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualTransform) == 0x000010, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualTransform");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualTransform) == 0x000080, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualTransform");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualTransform, Actual) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualTransform::Actual' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualTransform, Unexpected) == 0x000030, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualTransform::Unexpected' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualTransform, What) == 0x000060, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualTransform::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualTransform, Context) == 0x000070, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualTransform::Context' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualTransform, Tolerance) == 0x000078, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualTransform::Tolerance' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotEqualVector
// 0x0038 (0x0038 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualVector final
{
public:
	struct FVector                                Actual;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Unexpected;                                        // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualVector) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualVector");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualVector) == 0x000038, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualVector");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualVector, Actual) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualVector::Actual' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualVector, Unexpected) == 0x00000C, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualVector::Unexpected' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualVector, What) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualVector::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualVector, Context) == 0x000028, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualVector::Context' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualVector, Tolerance) == 0x000030, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotEqualVector::Tolerance' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotInRangeByte
// 0x0020 (0x0020 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeByte final
{
public:
	uint8                                         Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MinInclusive;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MaxInclusive;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeByte) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeByte");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeByte) == 0x000020, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeByte");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeByte, Value) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeByte::Value' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeByte, MinInclusive) == 0x000001, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeByte::MinInclusive' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeByte, MaxInclusive) == 0x000002, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeByte::MaxInclusive' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeByte, What) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeByte::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeByte, Context) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeByte::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotInRangeFloat
// 0x0028 (0x0028 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeFloat final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinInclusive;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxInclusive;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeFloat) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeFloat");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeFloat) == 0x000028, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeFloat");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeFloat, Value) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeFloat::Value' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeFloat, MinInclusive) == 0x000004, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeFloat::MinInclusive' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeFloat, MaxInclusive) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeFloat::MaxInclusive' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeFloat, What) == 0x000010, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeFloat::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeFloat, Context) == 0x000020, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeFloat::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotInRangeInt32
// 0x0028 (0x0028 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt32 final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinInclusive;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxInclusive;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt32) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt32");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt32) == 0x000028, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt32");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt32, Value) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt32::Value' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt32, MinInclusive) == 0x000004, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt32::MinInclusive' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt32, MaxInclusive) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt32::MaxInclusive' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt32, What) == 0x000010, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt32::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt32, Context) == 0x000020, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt32::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertNotInRangeInt64
// 0x0030 (0x0030 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt64 final
{
public:
	int64                                         Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         MinInclusive;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         MaxInclusive;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt64) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt64");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt64) == 0x000030, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt64");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt64, Value) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt64::Value' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt64, MinInclusive) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt64::MinInclusive' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt64, MaxInclusive) == 0x000010, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt64::MaxInclusive' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt64, What) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt64::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt64, Context) == 0x000028, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertNotInRangeInt64::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertRichTextIsSet
// 0x0020 (0x0020 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertRichTextIsSet final
{
public:
	class URichTextBlock*                         RichTextBlock;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertRichTextIsSet) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertRichTextIsSet");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertRichTextIsSet) == 0x000020, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertRichTextIsSet");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertRichTextIsSet, RichTextBlock) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertRichTextIsSet::RichTextBlock' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertRichTextIsSet, What) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertRichTextIsSet::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertRichTextIsSet, Context) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertRichTextIsSet::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertTextIsSet
// 0x0020 (0x0020 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertTextIsSet final
{
public:
	class UTextBlock*                             TextBlock;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertTextIsSet) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertTextIsSet");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertTextIsSet) == 0x000020, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertTextIsSet");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertTextIsSet, TextBlock) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertTextIsSet::TextBlock' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertTextIsSet, What) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertTextIsSet::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertTextIsSet, Context) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertTextIsSet::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertTrue
// 0x0020 (0x0020 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertTrue final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertTrue) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertTrue");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertTrue) == 0x000020, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertTrue");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertTrue, bValue) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertTrue::bValue' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertTrue, What) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertTrue::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertTrue, Context) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertTrue::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertValid
// 0x0020 (0x0020 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertValid final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertValid) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertValid");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertValid) == 0x000020, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertValid");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertValid, Object) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertValid::Object' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertValid, What) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertValid::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertValid, Context) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertValid::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertWasNotTriggered
// 0x0010 (0x0010 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertWasNotTriggered final
{
public:
	class ADaeTestTriggerBox*                     TestTriggerBox;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertWasNotTriggered) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertWasNotTriggered");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertWasNotTriggered) == 0x000010, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertWasNotTriggered");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertWasNotTriggered, TestTriggerBox) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertWasNotTriggered::TestTriggerBox' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertWasNotTriggered, Context) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertWasNotTriggered::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertWasTriggered
// 0x0010 (0x0010 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertWasTriggered final
{
public:
	class ADaeTestTriggerBox*                     TestTriggerBox;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertWasTriggered) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertWasTriggered");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertWasTriggered) == 0x000010, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertWasTriggered");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertWasTriggered, TestTriggerBox) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertWasTriggered::TestTriggerBox' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertWasTriggered, Context) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertWasTriggered::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary.AssertWidgetIsVisible
// 0x0020 (0x0020 - 0x0000)
struct DaeTestAssertBlueprintFunctionLibrary_AssertWidgetIsVisible final
{
public:
	class UUserWidget*                            Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 What;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssertBlueprintFunctionLibrary_AssertWidgetIsVisible) == 0x000008, "Wrong alignment on DaeTestAssertBlueprintFunctionLibrary_AssertWidgetIsVisible");
static_assert(sizeof(DaeTestAssertBlueprintFunctionLibrary_AssertWidgetIsVisible) == 0x000020, "Wrong size on DaeTestAssertBlueprintFunctionLibrary_AssertWidgetIsVisible");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertWidgetIsVisible, Widget) == 0x000000, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertWidgetIsVisible::Widget' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertWidgetIsVisible, What) == 0x000008, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertWidgetIsVisible::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssertBlueprintFunctionLibrary_AssertWidgetIsVisible, Context) == 0x000018, "Member 'DaeTestAssertBlueprintFunctionLibrary_AssertWidgetIsVisible::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssumeBlueprintFunctionLibrary.AssumeFalse
// 0x0020 (0x0020 - 0x0000)
struct DaeTestAssumeBlueprintFunctionLibrary_AssumeFalse final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssumeBlueprintFunctionLibrary_AssumeFalse) == 0x000008, "Wrong alignment on DaeTestAssumeBlueprintFunctionLibrary_AssumeFalse");
static_assert(sizeof(DaeTestAssumeBlueprintFunctionLibrary_AssumeFalse) == 0x000020, "Wrong size on DaeTestAssumeBlueprintFunctionLibrary_AssumeFalse");
static_assert(offsetof(DaeTestAssumeBlueprintFunctionLibrary_AssumeFalse, bValue) == 0x000000, "Member 'DaeTestAssumeBlueprintFunctionLibrary_AssumeFalse::bValue' has a wrong offset!");
static_assert(offsetof(DaeTestAssumeBlueprintFunctionLibrary_AssumeFalse, What) == 0x000008, "Member 'DaeTestAssumeBlueprintFunctionLibrary_AssumeFalse::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssumeBlueprintFunctionLibrary_AssumeFalse, Context) == 0x000018, "Member 'DaeTestAssumeBlueprintFunctionLibrary_AssumeFalse::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestAssumeBlueprintFunctionLibrary.AssumeTrue
// 0x0020 (0x0020 - 0x0000)
struct DaeTestAssumeBlueprintFunctionLibrary_AssumeTrue final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 What;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestAssumeBlueprintFunctionLibrary_AssumeTrue) == 0x000008, "Wrong alignment on DaeTestAssumeBlueprintFunctionLibrary_AssumeTrue");
static_assert(sizeof(DaeTestAssumeBlueprintFunctionLibrary_AssumeTrue) == 0x000020, "Wrong size on DaeTestAssumeBlueprintFunctionLibrary_AssumeTrue");
static_assert(offsetof(DaeTestAssumeBlueprintFunctionLibrary_AssumeTrue, bValue) == 0x000000, "Member 'DaeTestAssumeBlueprintFunctionLibrary_AssumeTrue::bValue' has a wrong offset!");
static_assert(offsetof(DaeTestAssumeBlueprintFunctionLibrary_AssumeTrue, What) == 0x000008, "Member 'DaeTestAssumeBlueprintFunctionLibrary_AssumeTrue::What' has a wrong offset!");
static_assert(offsetof(DaeTestAssumeBlueprintFunctionLibrary_AssumeTrue, Context) == 0x000018, "Member 'DaeTestAssumeBlueprintFunctionLibrary_AssumeTrue::Context' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestDelayBlueprintFunctionLibrary.DelayFrames
// 0x0028 (0x0028 - 0x0000)
struct DaeTestDelayBlueprintFunctionLibrary_DelayFrames final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NumFrames;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaeTestDelayBlueprintFunctionLibrary_DelayFrames) == 0x000008, "Wrong alignment on DaeTestDelayBlueprintFunctionLibrary_DelayFrames");
static_assert(sizeof(DaeTestDelayBlueprintFunctionLibrary_DelayFrames) == 0x000028, "Wrong size on DaeTestDelayBlueprintFunctionLibrary_DelayFrames");
static_assert(offsetof(DaeTestDelayBlueprintFunctionLibrary_DelayFrames, WorldContextObject) == 0x000000, "Member 'DaeTestDelayBlueprintFunctionLibrary_DelayFrames::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DaeTestDelayBlueprintFunctionLibrary_DelayFrames, LatentInfo) == 0x000008, "Member 'DaeTestDelayBlueprintFunctionLibrary_DelayFrames::LatentInfo' has a wrong offset!");
static_assert(offsetof(DaeTestDelayBlueprintFunctionLibrary_DelayFrames, NumFrames) == 0x000020, "Member 'DaeTestDelayBlueprintFunctionLibrary_DelayFrames::NumFrames' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestDelayBlueprintFunctionLibrary.DelayUntilTriggered
// 0x0028 (0x0028 - 0x0000)
struct DaeTestDelayBlueprintFunctionLibrary_DelayUntilTriggered final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class ADaeTestTriggerBox*                     TestTriggerBox;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestDelayBlueprintFunctionLibrary_DelayUntilTriggered) == 0x000008, "Wrong alignment on DaeTestDelayBlueprintFunctionLibrary_DelayUntilTriggered");
static_assert(sizeof(DaeTestDelayBlueprintFunctionLibrary_DelayUntilTriggered) == 0x000028, "Wrong size on DaeTestDelayBlueprintFunctionLibrary_DelayUntilTriggered");
static_assert(offsetof(DaeTestDelayBlueprintFunctionLibrary_DelayUntilTriggered, WorldContextObject) == 0x000000, "Member 'DaeTestDelayBlueprintFunctionLibrary_DelayUntilTriggered::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DaeTestDelayBlueprintFunctionLibrary_DelayUntilTriggered, LatentInfo) == 0x000008, "Member 'DaeTestDelayBlueprintFunctionLibrary_DelayUntilTriggered::LatentInfo' has a wrong offset!");
static_assert(offsetof(DaeTestDelayBlueprintFunctionLibrary_DelayUntilTriggered, TestTriggerBox) == 0x000020, "Member 'DaeTestDelayBlueprintFunctionLibrary_DelayUntilTriggered::TestTriggerBox' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestInputBlueprintFunctionLibrary.ApplyInputAction
// 0x0018 (0x0018 - 0x0000)
struct DaeTestInputBlueprintFunctionLibrary_ApplyInputAction final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   InputEventType;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaeTestInputBlueprintFunctionLibrary_ApplyInputAction) == 0x000008, "Wrong alignment on DaeTestInputBlueprintFunctionLibrary_ApplyInputAction");
static_assert(sizeof(DaeTestInputBlueprintFunctionLibrary_ApplyInputAction) == 0x000018, "Wrong size on DaeTestInputBlueprintFunctionLibrary_ApplyInputAction");
static_assert(offsetof(DaeTestInputBlueprintFunctionLibrary_ApplyInputAction, Context) == 0x000000, "Member 'DaeTestInputBlueprintFunctionLibrary_ApplyInputAction::Context' has a wrong offset!");
static_assert(offsetof(DaeTestInputBlueprintFunctionLibrary_ApplyInputAction, ActionName) == 0x000008, "Member 'DaeTestInputBlueprintFunctionLibrary_ApplyInputAction::ActionName' has a wrong offset!");
static_assert(offsetof(DaeTestInputBlueprintFunctionLibrary_ApplyInputAction, InputEventType) == 0x000010, "Member 'DaeTestInputBlueprintFunctionLibrary_ApplyInputAction::InputEventType' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestInputBlueprintFunctionLibrary.ApplyInputAxis
// 0x0018 (0x0018 - 0x0000)
struct DaeTestInputBlueprintFunctionLibrary_ApplyInputAxis final
{
public:
	class UObject*                                Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AxisName;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AxisValue;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DaeTestInputBlueprintFunctionLibrary_ApplyInputAxis) == 0x000008, "Wrong alignment on DaeTestInputBlueprintFunctionLibrary_ApplyInputAxis");
static_assert(sizeof(DaeTestInputBlueprintFunctionLibrary_ApplyInputAxis) == 0x000018, "Wrong size on DaeTestInputBlueprintFunctionLibrary_ApplyInputAxis");
static_assert(offsetof(DaeTestInputBlueprintFunctionLibrary_ApplyInputAxis, Context) == 0x000000, "Member 'DaeTestInputBlueprintFunctionLibrary_ApplyInputAxis::Context' has a wrong offset!");
static_assert(offsetof(DaeTestInputBlueprintFunctionLibrary_ApplyInputAxis, AxisName) == 0x000008, "Member 'DaeTestInputBlueprintFunctionLibrary_ApplyInputAxis::AxisName' has a wrong offset!");
static_assert(offsetof(DaeTestInputBlueprintFunctionLibrary_ApplyInputAxis, AxisValue) == 0x000010, "Member 'DaeTestInputBlueprintFunctionLibrary_ApplyInputAxis::AxisValue' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestParameterProviderActor.GetParameters
// 0x0010 (0x0010 - 0x0000)
struct DaeTestParameterProviderActor_GetParameters final
{
public:
	TArray<class UObject*>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestParameterProviderActor_GetParameters) == 0x000008, "Wrong alignment on DaeTestParameterProviderActor_GetParameters");
static_assert(sizeof(DaeTestParameterProviderActor_GetParameters) == 0x000010, "Wrong size on DaeTestParameterProviderActor_GetParameters");
static_assert(offsetof(DaeTestParameterProviderActor_GetParameters, ReturnValue) == 0x000000, "Member 'DaeTestParameterProviderActor_GetParameters::ReturnValue' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestSuiteActor.OnTestFailed
// 0x0020 (0x0020 - 0x0000)
struct DaeTestSuiteActor_OnTestFailed final
{
public:
	class ADaeTestActor*                          Test;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Parameter;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FailureMessage;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestSuiteActor_OnTestFailed) == 0x000008, "Wrong alignment on DaeTestSuiteActor_OnTestFailed");
static_assert(sizeof(DaeTestSuiteActor_OnTestFailed) == 0x000020, "Wrong size on DaeTestSuiteActor_OnTestFailed");
static_assert(offsetof(DaeTestSuiteActor_OnTestFailed, Test) == 0x000000, "Member 'DaeTestSuiteActor_OnTestFailed::Test' has a wrong offset!");
static_assert(offsetof(DaeTestSuiteActor_OnTestFailed, Parameter) == 0x000008, "Member 'DaeTestSuiteActor_OnTestFailed::Parameter' has a wrong offset!");
static_assert(offsetof(DaeTestSuiteActor_OnTestFailed, FailureMessage) == 0x000010, "Member 'DaeTestSuiteActor_OnTestFailed::FailureMessage' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestSuiteActor.OnTestSkipped
// 0x0020 (0x0020 - 0x0000)
struct DaeTestSuiteActor_OnTestSkipped final
{
public:
	class ADaeTestActor*                          Test;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Parameter;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkipReason;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestSuiteActor_OnTestSkipped) == 0x000008, "Wrong alignment on DaeTestSuiteActor_OnTestSkipped");
static_assert(sizeof(DaeTestSuiteActor_OnTestSkipped) == 0x000020, "Wrong size on DaeTestSuiteActor_OnTestSkipped");
static_assert(offsetof(DaeTestSuiteActor_OnTestSkipped, Test) == 0x000000, "Member 'DaeTestSuiteActor_OnTestSkipped::Test' has a wrong offset!");
static_assert(offsetof(DaeTestSuiteActor_OnTestSkipped, Parameter) == 0x000008, "Member 'DaeTestSuiteActor_OnTestSkipped::Parameter' has a wrong offset!");
static_assert(offsetof(DaeTestSuiteActor_OnTestSkipped, SkipReason) == 0x000010, "Member 'DaeTestSuiteActor_OnTestSkipped::SkipReason' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestSuiteActor.OnTestSuccessful
// 0x0010 (0x0010 - 0x0000)
struct DaeTestSuiteActor_OnTestSuccessful final
{
public:
	class ADaeTestActor*                          Test;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Parameter;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestSuiteActor_OnTestSuccessful) == 0x000008, "Wrong alignment on DaeTestSuiteActor_OnTestSuccessful");
static_assert(sizeof(DaeTestSuiteActor_OnTestSuccessful) == 0x000010, "Wrong size on DaeTestSuiteActor_OnTestSuccessful");
static_assert(offsetof(DaeTestSuiteActor_OnTestSuccessful, Test) == 0x000000, "Member 'DaeTestSuiteActor_OnTestSuccessful::Test' has a wrong offset!");
static_assert(offsetof(DaeTestSuiteActor_OnTestSuccessful, Parameter) == 0x000008, "Member 'DaeTestSuiteActor_OnTestSuccessful::Parameter' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestTriggerBox.OnActorBeginOverlapBroadcast
// 0x0010 (0x0010 - 0x0000)
struct DaeTestTriggerBox_OnActorBeginOverlapBroadcast final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestTriggerBox_OnActorBeginOverlapBroadcast) == 0x000008, "Wrong alignment on DaeTestTriggerBox_OnActorBeginOverlapBroadcast");
static_assert(sizeof(DaeTestTriggerBox_OnActorBeginOverlapBroadcast) == 0x000010, "Wrong size on DaeTestTriggerBox_OnActorBeginOverlapBroadcast");
static_assert(offsetof(DaeTestTriggerBox_OnActorBeginOverlapBroadcast, OverlappedActor) == 0x000000, "Member 'DaeTestTriggerBox_OnActorBeginOverlapBroadcast::OverlappedActor' has a wrong offset!");
static_assert(offsetof(DaeTestTriggerBox_OnActorBeginOverlapBroadcast, OtherActor) == 0x000008, "Member 'DaeTestTriggerBox_OnActorBeginOverlapBroadcast::OtherActor' has a wrong offset!");

// Function DaedalicTestAutomationPlugin.DaeTestTriggerBox.WasTriggered
// 0x0001 (0x0001 - 0x0000)
struct DaeTestTriggerBox_WasTriggered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DaeTestTriggerBox_WasTriggered) == 0x000001, "Wrong alignment on DaeTestTriggerBox_WasTriggered");
static_assert(sizeof(DaeTestTriggerBox_WasTriggered) == 0x000001, "Wrong size on DaeTestTriggerBox_WasTriggered");
static_assert(offsetof(DaeTestTriggerBox_WasTriggered, ReturnValue) == 0x000000, "Member 'DaeTestTriggerBox_WasTriggered::ReturnValue' has a wrong offset!");

}

