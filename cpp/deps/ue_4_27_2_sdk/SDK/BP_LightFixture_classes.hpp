#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightFixture

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LightFixture.BP_LightFixture_C
// 0x0118 (0x0350 - 0x0238)
class ABP_LightFixture_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   LampMesh;                                          // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          bLightsOn;                                         // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          bPreviewLightsOn;                                  // 0x0249(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_24A[0x2];                                      // 0x024A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temperature;                                       // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ULightComponent*>                Lights;                                            // 0x0250(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         IntensityFactor;                                   // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFMODEvent>              Toggle_Lights_Event;                               // 0x0268(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          bBreakLights;                                      // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNiagaraSystem>          BreakLightsEffect;                                 // 0x0298(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class UFMODEvent>              Break_Lights_Event;                                // 0x02C0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         BreakLightsTime;                                   // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBroken;                                           // 0x02EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2ED[0x3];                                      // 0x02ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BreakLightsVFXTransform;                           // 0x02F0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	int32                                         LitMaterialIndex;                                  // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DynamicSssMaterial;                                // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LightColor;                                        // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      LitBaseMaterial;                                   // 0x0340(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseMaterialOverrideWhenLit;                        // 0x0348(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_LightFixture(int32 EntryPoint);
	void ReceiveBeginPlay();
	void LoadCompleteDelegate_CD4940744AC4667E7148BDA96292EF0E(const TArray<class UObject*>& LoadedAssets);
	void UserConstructionScript();
	void UpdateLightState();
	void UpdateLightSettings();
	void ToggleLights();
	void PlaySound(const TSoftObjectPtr<class UFMODEvent>& Event_Played);
	void GatherChildLights();
	void GetAllLights(TArray<class ULightComponent*>* AllLights);
	void BreakLights();
	void Create_Dynamic_Material_Instance();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LightFixture_C">();
	}
	static class ABP_LightFixture_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LightFixture_C>();
	}
};
static_assert(alignof(ABP_LightFixture_C) == 0x000010, "Wrong alignment on ABP_LightFixture_C");
static_assert(sizeof(ABP_LightFixture_C) == 0x000350, "Wrong size on ABP_LightFixture_C");
static_assert(offsetof(ABP_LightFixture_C, UberGraphFrame) == 0x000238, "Member 'ABP_LightFixture_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_C, LampMesh) == 0x000240, "Member 'ABP_LightFixture_C::LampMesh' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_C, bLightsOn) == 0x000248, "Member 'ABP_LightFixture_C::bLightsOn' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_C, bPreviewLightsOn) == 0x000249, "Member 'ABP_LightFixture_C::bPreviewLightsOn' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_C, Temperature) == 0x00024C, "Member 'ABP_LightFixture_C::Temperature' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_C, Lights) == 0x000250, "Member 'ABP_LightFixture_C::Lights' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_C, IntensityFactor) == 0x000260, "Member 'ABP_LightFixture_C::IntensityFactor' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_C, Toggle_Lights_Event) == 0x000268, "Member 'ABP_LightFixture_C::Toggle_Lights_Event' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_C, bBreakLights) == 0x000290, "Member 'ABP_LightFixture_C::bBreakLights' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_C, BreakLightsEffect) == 0x000298, "Member 'ABP_LightFixture_C::BreakLightsEffect' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_C, Break_Lights_Event) == 0x0002C0, "Member 'ABP_LightFixture_C::Break_Lights_Event' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_C, BreakLightsTime) == 0x0002E8, "Member 'ABP_LightFixture_C::BreakLightsTime' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_C, bBroken) == 0x0002EC, "Member 'ABP_LightFixture_C::bBroken' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_C, BreakLightsVFXTransform) == 0x0002F0, "Member 'ABP_LightFixture_C::BreakLightsVFXTransform' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_C, LitMaterialIndex) == 0x000320, "Member 'ABP_LightFixture_C::LitMaterialIndex' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_C, DynamicSssMaterial) == 0x000328, "Member 'ABP_LightFixture_C::DynamicSssMaterial' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_C, LightColor) == 0x000330, "Member 'ABP_LightFixture_C::LightColor' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_C, LitBaseMaterial) == 0x000340, "Member 'ABP_LightFixture_C::LitBaseMaterial' has a wrong offset!");
static_assert(offsetof(ABP_LightFixture_C, UseMaterialOverrideWhenLit) == 0x000348, "Member 'ABP_LightFixture_C::UseMaterialOverrideWhenLit' has a wrong offset!");

}

