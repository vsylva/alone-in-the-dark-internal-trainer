#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FQWindowEvent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FQWindowEvent.BP_FQWindowEvent_C
// 0x00A8 (0x02E0 - 0x0238)
class ABP_FQWindowEvent_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Frame;                                             // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Right;                                             // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Left;                                              // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         EventTimeline_AlphaNoTiming_C5FD9EBD479D0E53E0DEADA25364EA8E; // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EventTimeline_Alpha_C5FD9EBD479D0E53E0DEADA25364EA8E; // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            EventTimeline__Direction_C5FD9EBD479D0E53E0DEADA25364EA8E; // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     EventTimeline;                                     // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartActivated;                                    // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          StartOpen;                                         // 0x0279(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CloseAndOpen;                                      // 0x027A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NoTiming;                                          // 0x027B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OnlyLeft;                                          // 0x027C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OnlyRight;                                         // 0x027D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27E[0x2];                                      // 0x027E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               LeftClosedRotation;                                // 0x0280(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               LeftOpenRotation;                                  // 0x028C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               RightClosedRotation;                               // 0x0298(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               RightOpenRotation;                                 // 0x02A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RandomOpenRotation;                                // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RandomRotationRange;                               // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldLoop;                                        // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B9[0x3];                                      // 0x02B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoopDelay;                                         // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _ShowFrame_;                                       // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsOpening;                                         // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsClosing;                                         // 0x02C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C3[0x5];                                      // 0x02C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             OpeningSound;                                      // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             ClosingSound;                                      // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SoundDelay;                                        // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_FQWindowEvent(int32 EntryPoint);
	void PlayCloseSound();
	void PlayOpenSound();
	void PlayLoop();
	void PlayClose();
	void PlayOpen();
	void ReceiveBeginPlay();
	void EventTimeline__UpdateFunc();
	void EventTimeline__FinishedFunc();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FQWindowEvent_C">();
	}
	static class ABP_FQWindowEvent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FQWindowEvent_C>();
	}
};
static_assert(alignof(ABP_FQWindowEvent_C) == 0x000008, "Wrong alignment on ABP_FQWindowEvent_C");
static_assert(sizeof(ABP_FQWindowEvent_C) == 0x0002E0, "Wrong size on ABP_FQWindowEvent_C");
static_assert(offsetof(ABP_FQWindowEvent_C, UberGraphFrame) == 0x000238, "Member 'ABP_FQWindowEvent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, Frame) == 0x000240, "Member 'ABP_FQWindowEvent_C::Frame' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, Right) == 0x000248, "Member 'ABP_FQWindowEvent_C::Right' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, Left) == 0x000250, "Member 'ABP_FQWindowEvent_C::Left' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, DefaultSceneRoot) == 0x000258, "Member 'ABP_FQWindowEvent_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, EventTimeline_AlphaNoTiming_C5FD9EBD479D0E53E0DEADA25364EA8E) == 0x000260, "Member 'ABP_FQWindowEvent_C::EventTimeline_AlphaNoTiming_C5FD9EBD479D0E53E0DEADA25364EA8E' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, EventTimeline_Alpha_C5FD9EBD479D0E53E0DEADA25364EA8E) == 0x000264, "Member 'ABP_FQWindowEvent_C::EventTimeline_Alpha_C5FD9EBD479D0E53E0DEADA25364EA8E' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, EventTimeline__Direction_C5FD9EBD479D0E53E0DEADA25364EA8E) == 0x000268, "Member 'ABP_FQWindowEvent_C::EventTimeline__Direction_C5FD9EBD479D0E53E0DEADA25364EA8E' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, EventTimeline) == 0x000270, "Member 'ABP_FQWindowEvent_C::EventTimeline' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, StartActivated) == 0x000278, "Member 'ABP_FQWindowEvent_C::StartActivated' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, StartOpen) == 0x000279, "Member 'ABP_FQWindowEvent_C::StartOpen' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, CloseAndOpen) == 0x00027A, "Member 'ABP_FQWindowEvent_C::CloseAndOpen' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, NoTiming) == 0x00027B, "Member 'ABP_FQWindowEvent_C::NoTiming' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, OnlyLeft) == 0x00027C, "Member 'ABP_FQWindowEvent_C::OnlyLeft' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, OnlyRight) == 0x00027D, "Member 'ABP_FQWindowEvent_C::OnlyRight' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, LeftClosedRotation) == 0x000280, "Member 'ABP_FQWindowEvent_C::LeftClosedRotation' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, LeftOpenRotation) == 0x00028C, "Member 'ABP_FQWindowEvent_C::LeftOpenRotation' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, RightClosedRotation) == 0x000298, "Member 'ABP_FQWindowEvent_C::RightClosedRotation' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, RightOpenRotation) == 0x0002A4, "Member 'ABP_FQWindowEvent_C::RightOpenRotation' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, RandomOpenRotation) == 0x0002B0, "Member 'ABP_FQWindowEvent_C::RandomOpenRotation' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, RandomRotationRange) == 0x0002B4, "Member 'ABP_FQWindowEvent_C::RandomRotationRange' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, ShouldLoop) == 0x0002B8, "Member 'ABP_FQWindowEvent_C::ShouldLoop' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, LoopDelay) == 0x0002BC, "Member 'ABP_FQWindowEvent_C::LoopDelay' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, _ShowFrame_) == 0x0002C0, "Member 'ABP_FQWindowEvent_C::_ShowFrame_' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, IsOpening) == 0x0002C1, "Member 'ABP_FQWindowEvent_C::IsOpening' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, IsClosing) == 0x0002C2, "Member 'ABP_FQWindowEvent_C::IsClosing' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, OpeningSound) == 0x0002C8, "Member 'ABP_FQWindowEvent_C::OpeningSound' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, ClosingSound) == 0x0002D0, "Member 'ABP_FQWindowEvent_C::ClosingSound' has a wrong offset!");
static_assert(offsetof(ABP_FQWindowEvent_C, SoundDelay) == 0x0002D8, "Member 'ABP_FQWindowEvent_C::SoundDelay' has a wrong offset!");

}

