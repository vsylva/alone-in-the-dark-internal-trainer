#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_CombatInterface

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "CharacterSize_structs.hpp"
#include "AnimationMontageIdentifier_structs.hpp"
#include "CemeteryCreatureType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_CombatInterface.BPI_CombatInterface_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_CombatInterface_C final : public IInterface
{
public:
	void SetStartBurrowed(bool beginBurrowed, bool* Success);
	void SetOrderTarget(const struct FVector& Location, bool* Success);
	void UpdateBossHealthData(float CurrentHealthPercentage);
	void HitscanWeaponFired(bool* Success);
	void GetMostSuitableMeleeSection(EAnimationMontageIdentifier* Value);
	void SetMostSuitableMeleeSection(EAnimationMontageIdentifier Value);
	void GetAggroState(bool* Aggro);
	void SetNewAggro(bool NewAggro, bool* Success);
	void IncrementJac3ProneCounter(int32* ProneCounter);
	void MoveToGrappleLocatio(const struct FVector& Grapple_Location);
	void ControlRotationFocus(class AActor* FocusTarget);
	void MeleeAttackTranslate(const struct FVector& StartVector, const struct FVector& EndVector);
	void GetCharacterSize(ECharacterSize* Size);
	void GetCemeteryCreatureType(ECemeteryCreatureType* CemeteryCreatureType);
	void SetCanCirculate(bool CanCirculate, bool* Success);
	void SetStartOnWall(bool StartOnWall, bool* Success);
	void LaserHit();
	void AimedAt(bool* Return);
	void GetUpgradeComponent(class UWeaponUpgradeComponent_C** UpgradeComponent);
	void QuicktimeInput(float CurrentProgress, float MaxProgress);
	void FlashlightHit(float Distance, bool* Success);
	void QuicktimeSuccess();
	void SetCemeteryCreatureType(ECemeteryCreatureType CreatureType);
	void MeleeAttack();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_CombatInterface_C">();
	}
	static class IBPI_CombatInterface_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_CombatInterface_C>();
	}
};
static_assert(alignof(IBPI_CombatInterface_C) == 0x000008, "Wrong alignment on IBPI_CombatInterface_C");
static_assert(sizeof(IBPI_CombatInterface_C) == 0x000028, "Wrong size on IBPI_CombatInterface_C");

}

