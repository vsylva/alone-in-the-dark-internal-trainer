#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HitscanWeapon_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EWeapons_structs.hpp"
#include "ObsidianFox_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HitscanWeapon_Base.BP_HitscanWeapon_Base_C
// 0x00E8 (0x05B8 - 0x04D0)
class ABP_HitscanWeapon_Base_C : public AHitscanWeaponActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   PointLight;                                        // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      SmokingBarrel;                                     // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      MuzzleFlash;                                       // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            MuzzleFlashTImeline__Direction_3B6C099944104D2CA38868B91AA6ABFD; // 0x0500(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_501[0x7];                                      // 0x0501(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     MuzzleFlashTImeline;                               // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Range;                                             // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentSpread;                                     // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseSpread;                                        // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpreadReturnRate;                                  // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpreadAddShoot;                                    // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpreadAddDodge;                                    // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpreadAddMove;                                     // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpreadMoveMax;                                     // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpreadMax;                                         // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpreadAddAim;                                      // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpreadAddDamage;                                   // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Aiming;                                            // 0x053C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HitCharacter;                                      // 0x053D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53E[0x2];                                      // 0x053E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Recoil_Camera_Shake;                               // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          BulletTrail;                                       // 0x0548(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         SmokeBuildupPerShot;                               // 0x0570(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BarrelHeat;                                        // 0x0574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeatThreshold;                                     // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeatLossPerSecond;                                 // 0x057C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeatPerShot;                                       // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWeapons                                      WeaponType;                                        // 0x0584(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_585[0x3];                                      // 0x0585(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             FireAudio;                                         // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             UpgradedWeaponEvent;                               // 0x0590(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         MuzzleFlashLightRadius;                            // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempWSpeed;                                        // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasSetupWeaponData;                               // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A9[0x3];                                      // 0x05A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraDelay;                                       // 0x05AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         BulletTrailEffect;                                 // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void GetWeaponType(EWeapons* WeaponType_0);
	void SetCurrentAmmoCheckSaved(int32 NewAmmo);
	class FName GetParentHandBoneName(bool RightHand);
	void TriggerMuzzleFlashParticles();
	void EnableMuzzleFlashLight();
	void GetReloadRate(float* ReloadRate);
	void OnInstigatorPossessed(class UObject* Object);
	void AddHeat();
	void UpdateBarrelHeat();
	void SpawnBulletTrail(const struct FHitResult& Hit);
	class USkeletalMeshComponent* GetMesh();
	void AddSpreadBasedOnMovement(float Delta_Seconds, bool* bMoving);
	void AddSpread(float SpreadToAdd);
	void UpdateSpreadAndCrosshairSize(float DeltaSeconds);
	void SetupWeaponData();
	void CheatReload();
	void DisableMuzzleFlashLight();
	void UserConstructionScript();
	void MuzzleFlashTImeline__FinishedFunc();
	void ResetBarrelHeat();
	void MuzzleFlashTImeline__UpdateFunc();
	void LoadCompleteDelegate_BA66FBCE41A7518686CE3ABA0CA2CEC5(const TArray<class UObject*>& LoadedAssets);
	void AddRecoilAimOffset();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void InstigatorDestroyed(class AActor* DestroyedActor);
	void OnEffectFire();
	void OnEffectImpact(const struct FHitResult& OutHit);
	void LoadCompleteDelegate_F4C5A1CB49D346BD47EDFDB598E0ACB7(const TArray<class UObject*>& LoadedAssets);
	void TriggerWeaponShootVFX();
	void OnAimingEvent(bool bIsAiming);
	void CheckWeaponUpgrades();
	void ApplyRecoil();
	void OnUnequipEvent(class AOFWeaponActor* Weapon);
	void TriggerMuzzleFlash();
	void OnEquipEvent(class AOFWeaponActor* Weapon);
	void OnHealthChanged(float NewCurrentHealth, float DeltaValue, const struct FGameplayTagContainer& EventTags);
	void OnFireEvent();
	void ExecuteUbergraph_BP_HitscanWeapon_Base(int32 EntryPoint);
	void UpgradedWeaponEvent__DelegateSignature();

	void GetCurrentSpreadPixelAdjustment(float* Pixels, float* Screen_Percentage) const;
	void GetCurrentSpreadPixelAdjustmentInternal(float* Pixels, float* Screen_Percentage) const;
	void GetTraceParameters(struct FVector* Start, struct FVector* End, struct FVector* Direction) const;
	struct FVector GetTraceEnd() const;
	struct FVector GetTraceStart() const;
	bool TraceForTarget(TArray<struct FHitResult>* OutHit) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HitscanWeapon_Base_C">();
	}
	static class ABP_HitscanWeapon_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HitscanWeapon_Base_C>();
	}
};
static_assert(alignof(ABP_HitscanWeapon_Base_C) == 0x000008, "Wrong alignment on ABP_HitscanWeapon_Base_C");
static_assert(sizeof(ABP_HitscanWeapon_Base_C) == 0x0005B8, "Wrong size on ABP_HitscanWeapon_Base_C");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, UberGraphFrame) == 0x0004D0, "Member 'ABP_HitscanWeapon_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, PointLight) == 0x0004D8, "Member 'ABP_HitscanWeapon_Base_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, SmokingBarrel) == 0x0004E0, "Member 'ABP_HitscanWeapon_Base_C::SmokingBarrel' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, MuzzleFlash) == 0x0004E8, "Member 'ABP_HitscanWeapon_Base_C::MuzzleFlash' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, SkeletalMesh) == 0x0004F0, "Member 'ABP_HitscanWeapon_Base_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, Arrow) == 0x0004F8, "Member 'ABP_HitscanWeapon_Base_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, MuzzleFlashTImeline__Direction_3B6C099944104D2CA38868B91AA6ABFD) == 0x000500, "Member 'ABP_HitscanWeapon_Base_C::MuzzleFlashTImeline__Direction_3B6C099944104D2CA38868B91AA6ABFD' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, MuzzleFlashTImeline) == 0x000508, "Member 'ABP_HitscanWeapon_Base_C::MuzzleFlashTImeline' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, Range) == 0x000510, "Member 'ABP_HitscanWeapon_Base_C::Range' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, CurrentSpread) == 0x000514, "Member 'ABP_HitscanWeapon_Base_C::CurrentSpread' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, BaseSpread) == 0x000518, "Member 'ABP_HitscanWeapon_Base_C::BaseSpread' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, SpreadReturnRate) == 0x00051C, "Member 'ABP_HitscanWeapon_Base_C::SpreadReturnRate' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, SpreadAddShoot) == 0x000520, "Member 'ABP_HitscanWeapon_Base_C::SpreadAddShoot' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, SpreadAddDodge) == 0x000524, "Member 'ABP_HitscanWeapon_Base_C::SpreadAddDodge' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, SpreadAddMove) == 0x000528, "Member 'ABP_HitscanWeapon_Base_C::SpreadAddMove' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, SpreadMoveMax) == 0x00052C, "Member 'ABP_HitscanWeapon_Base_C::SpreadMoveMax' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, SpreadMax) == 0x000530, "Member 'ABP_HitscanWeapon_Base_C::SpreadMax' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, SpreadAddAim) == 0x000534, "Member 'ABP_HitscanWeapon_Base_C::SpreadAddAim' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, SpreadAddDamage) == 0x000538, "Member 'ABP_HitscanWeapon_Base_C::SpreadAddDamage' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, Aiming) == 0x00053C, "Member 'ABP_HitscanWeapon_Base_C::Aiming' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, HitCharacter) == 0x00053D, "Member 'ABP_HitscanWeapon_Base_C::HitCharacter' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, Recoil_Camera_Shake) == 0x000540, "Member 'ABP_HitscanWeapon_Base_C::Recoil_Camera_Shake' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, BulletTrail) == 0x000548, "Member 'ABP_HitscanWeapon_Base_C::BulletTrail' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, SmokeBuildupPerShot) == 0x000570, "Member 'ABP_HitscanWeapon_Base_C::SmokeBuildupPerShot' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, BarrelHeat) == 0x000574, "Member 'ABP_HitscanWeapon_Base_C::BarrelHeat' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, HeatThreshold) == 0x000578, "Member 'ABP_HitscanWeapon_Base_C::HeatThreshold' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, HeatLossPerSecond) == 0x00057C, "Member 'ABP_HitscanWeapon_Base_C::HeatLossPerSecond' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, HeatPerShot) == 0x000580, "Member 'ABP_HitscanWeapon_Base_C::HeatPerShot' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, WeaponType) == 0x000584, "Member 'ABP_HitscanWeapon_Base_C::WeaponType' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, FireAudio) == 0x000588, "Member 'ABP_HitscanWeapon_Base_C::FireAudio' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, UpgradedWeaponEvent) == 0x000590, "Member 'ABP_HitscanWeapon_Base_C::UpgradedWeaponEvent' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, MuzzleFlashLightRadius) == 0x0005A0, "Member 'ABP_HitscanWeapon_Base_C::MuzzleFlashLightRadius' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, TempWSpeed) == 0x0005A4, "Member 'ABP_HitscanWeapon_Base_C::TempWSpeed' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, bHasSetupWeaponData) == 0x0005A8, "Member 'ABP_HitscanWeapon_Base_C::bHasSetupWeaponData' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, CameraDelay) == 0x0005AC, "Member 'ABP_HitscanWeapon_Base_C::CameraDelay' has a wrong offset!");
static_assert(offsetof(ABP_HitscanWeapon_Base_C, BulletTrailEffect) == 0x0005B0, "Member 'ABP_HitscanWeapon_Base_C::BulletTrailEffect' has a wrong offset!");

}

