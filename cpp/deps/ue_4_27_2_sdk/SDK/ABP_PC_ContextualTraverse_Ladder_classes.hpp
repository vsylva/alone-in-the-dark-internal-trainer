#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_PC_ContextualTraverse_Ladder

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "ContextualTraverseMovementDirection_structs.hpp"
#include "ObsidianFox_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_PC_ContextualTraverse_Ladder.ABP_PC_ContextualTraverse_Ladder_C
// 0x0980 (0x1D30 - 0x13B0)
class UABP_PC_ContextualTraverse_Ladder_C final : public UContextualTraverseAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x13B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root_1;                              // 0x13B8(0x0030)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose;                     // 0x13E8(0x0118)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x1500(0x0158)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x1658(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x1680(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x16A8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x16D0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x16F8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x1720(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x1748(0x00B0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x17F8(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x1828(0x00B0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x18D8(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x1908(0x00B0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x19B8(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x19E8(0x00B0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x1A98(0x0030)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x1AC8(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x1AF0(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x1B20(0x00B0)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x1BD0(0x0030)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose;                        // 0x1C00(0x0018)()
	struct FAnimNode_LinkedAnimLayer              AnimGraphNode_LinkedAnimLayer;                     // 0x1C18(0x00B0)()
	FMulticastInlineDelegateProperty_             LadderStepUp;                                      // 0x1CC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             LadderStepDown;                                    // 0x1CD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             StartDone;                                         // 0x1CE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             LadderEnd;                                         // 0x1CF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsClimbing;                                        // 0x1D08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EContextualTraverseMovementDirection          ClimbDirection;                                    // 0x1D09(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D0A[0x6];                                     // 0x1D0A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerCharacterContextualMovementAnimations_C* Animations;                                        // 0x1D10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             GetClimbDir;                                       // 0x1D18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIsMovingOnLadder;                                 // 0x1D28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ContextualMovement(const struct FPoseLink& ContextualMovementInputPose, struct FPoseLink* ContextualMovement_0);
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void EndClimbing();
	void SetClimbDirection(EContextualTraverseMovementDirection Direction);
	void StartClimbing();
	void IsMovingOnLadder(bool* IsMoving);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder_AnimGraphNode_SequencePlayer_E97F96374C7683446EE335BF44B0CB36();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder_AnimGraphNode_SequencePlayer_E92800AE41433CA0E97A2D888BB0C0E8();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder_AnimGraphNode_SequencePlayer_D39994514A2DED407F30C185CDB6F24F();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder_AnimGraphNode_TransitionResult_6590167D409AB66B1E05CE86DB4C6B24();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder_AnimGraphNode_TransitionResult_ABF6F05D440BB7C8C1D4F3BA1BDAB6FC();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder_AnimGraphNode_TransitionResult_D38053DB4EB6D237393B04B48CF97EBD();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder_AnimGraphNode_TransitionResult_5B3B1F684FEAEB202E83DA8A0CA7463D();
	void AnimNotify_AN_LadderStepUp();
	void AnimNotify_AN_LadderStepDown();
	void BlueprintLinkedAnimationLayersInitialized();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void AnimNotify_LadderEnd();
	void ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder(int32 EntryPoint);
	void GetClimbDir__DelegateSignature(EContextualTraverseMovementDirection ClimbDirection_0);
	void LadderEnd__DelegateSignature();
	void StartDone__DelegateSignature();
	void LadderStepDown__DelegateSignature();
	void LadderStepUp__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_PC_ContextualTraverse_Ladder_C">();
	}
	static class UABP_PC_ContextualTraverse_Ladder_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_PC_ContextualTraverse_Ladder_C>();
	}
};
static_assert(alignof(UABP_PC_ContextualTraverse_Ladder_C) == 0x000010, "Wrong alignment on UABP_PC_ContextualTraverse_Ladder_C");
static_assert(sizeof(UABP_PC_ContextualTraverse_Ladder_C) == 0x001D30, "Wrong size on UABP_PC_ContextualTraverse_Ladder_C");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, UberGraphFrame) == 0x0013B0, "Member 'UABP_PC_ContextualTraverse_Ladder_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, AnimGraphNode_Root_1) == 0x0013B8, "Member 'UABP_PC_ContextualTraverse_Ladder_C::AnimGraphNode_Root_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, AnimGraphNode_LinkedInputPose) == 0x0013E8, "Member 'UABP_PC_ContextualTraverse_Ladder_C::AnimGraphNode_LinkedInputPose' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, AnimGraphNode_SaveCachedPose) == 0x001500, "Member 'UABP_PC_ContextualTraverse_Ladder_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, AnimGraphNode_TransitionResult_5) == 0x001658, "Member 'UABP_PC_ContextualTraverse_Ladder_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, AnimGraphNode_TransitionResult_4) == 0x001680, "Member 'UABP_PC_ContextualTraverse_Ladder_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, AnimGraphNode_TransitionResult_3) == 0x0016A8, "Member 'UABP_PC_ContextualTraverse_Ladder_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, AnimGraphNode_TransitionResult_2) == 0x0016D0, "Member 'UABP_PC_ContextualTraverse_Ladder_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, AnimGraphNode_TransitionResult_1) == 0x0016F8, "Member 'UABP_PC_ContextualTraverse_Ladder_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, AnimGraphNode_TransitionResult) == 0x001720, "Member 'UABP_PC_ContextualTraverse_Ladder_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, AnimGraphNode_SequencePlayer_2) == 0x001748, "Member 'UABP_PC_ContextualTraverse_Ladder_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, AnimGraphNode_StateResult_4) == 0x0017F8, "Member 'UABP_PC_ContextualTraverse_Ladder_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, AnimGraphNode_SequencePlayer_1) == 0x001828, "Member 'UABP_PC_ContextualTraverse_Ladder_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, AnimGraphNode_StateResult_3) == 0x0018D8, "Member 'UABP_PC_ContextualTraverse_Ladder_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, AnimGraphNode_SequencePlayer) == 0x001908, "Member 'UABP_PC_ContextualTraverse_Ladder_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, AnimGraphNode_StateResult_2) == 0x0019B8, "Member 'UABP_PC_ContextualTraverse_Ladder_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, AnimGraphNode_StateMachine_1) == 0x0019E8, "Member 'UABP_PC_ContextualTraverse_Ladder_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, AnimGraphNode_StateResult_1) == 0x001A98, "Member 'UABP_PC_ContextualTraverse_Ladder_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, AnimGraphNode_UseCachedPose) == 0x001AC8, "Member 'UABP_PC_ContextualTraverse_Ladder_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, AnimGraphNode_StateResult) == 0x001AF0, "Member 'UABP_PC_ContextualTraverse_Ladder_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, AnimGraphNode_StateMachine) == 0x001B20, "Member 'UABP_PC_ContextualTraverse_Ladder_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, AnimGraphNode_Root) == 0x001BD0, "Member 'UABP_PC_ContextualTraverse_Ladder_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, AnimGraphNode_LocalRefPose) == 0x001C00, "Member 'UABP_PC_ContextualTraverse_Ladder_C::AnimGraphNode_LocalRefPose' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, AnimGraphNode_LinkedAnimLayer) == 0x001C18, "Member 'UABP_PC_ContextualTraverse_Ladder_C::AnimGraphNode_LinkedAnimLayer' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, LadderStepUp) == 0x001CC8, "Member 'UABP_PC_ContextualTraverse_Ladder_C::LadderStepUp' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, LadderStepDown) == 0x001CD8, "Member 'UABP_PC_ContextualTraverse_Ladder_C::LadderStepDown' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, StartDone) == 0x001CE8, "Member 'UABP_PC_ContextualTraverse_Ladder_C::StartDone' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, LadderEnd) == 0x001CF8, "Member 'UABP_PC_ContextualTraverse_Ladder_C::LadderEnd' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, IsClimbing) == 0x001D08, "Member 'UABP_PC_ContextualTraverse_Ladder_C::IsClimbing' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, ClimbDirection) == 0x001D09, "Member 'UABP_PC_ContextualTraverse_Ladder_C::ClimbDirection' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, Animations) == 0x001D10, "Member 'UABP_PC_ContextualTraverse_Ladder_C::Animations' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, GetClimbDir) == 0x001D18, "Member 'UABP_PC_ContextualTraverse_Ladder_C::GetClimbDir' has a wrong offset!");
static_assert(offsetof(UABP_PC_ContextualTraverse_Ladder_C, bIsMovingOnLadder) == 0x001D28, "Member 'UABP_PC_ContextualTraverse_Ladder_C::bIsMovingOnLadder' has a wrong offset!");

}

