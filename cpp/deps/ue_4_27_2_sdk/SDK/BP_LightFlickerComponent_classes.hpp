#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightFlickerComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ELightFlickerCurves_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LightFlickerComponent.BP_LightFlickerComponent_C
// 0x00A8 (0x0160 - 0x00B8)
class UBP_LightFlickerComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCurveFloat*                            FlickerCurve;                                      // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 LightIntensities;                                  // 0x00C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ULightComponent*>                Lights;                                            // 0x00D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         LightIntensity;                                    // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ELightFlickerCurves, class UCurveFloat*> FlickerCurves;                                     // 0x00F0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	ELightFlickerCurves                           Flicker_Type;                                      // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Flicker_Rate;                                      // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Offset;                                            // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULightComponent*>                InvisibleLights;                                   // 0x0150(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void ExecuteUbergraph_BP_LightFlickerComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void ValidateMobilityOfLights(TArray<class ULightComponent*>& Array, bool* Problem);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LightFlickerComponent_C">();
	}
	static class UBP_LightFlickerComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_LightFlickerComponent_C>();
	}
};
static_assert(alignof(UBP_LightFlickerComponent_C) == 0x000008, "Wrong alignment on UBP_LightFlickerComponent_C");
static_assert(sizeof(UBP_LightFlickerComponent_C) == 0x000160, "Wrong size on UBP_LightFlickerComponent_C");
static_assert(offsetof(UBP_LightFlickerComponent_C, UberGraphFrame) == 0x0000B8, "Member 'UBP_LightFlickerComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_LightFlickerComponent_C, FlickerCurve) == 0x0000C0, "Member 'UBP_LightFlickerComponent_C::FlickerCurve' has a wrong offset!");
static_assert(offsetof(UBP_LightFlickerComponent_C, LightIntensities) == 0x0000C8, "Member 'UBP_LightFlickerComponent_C::LightIntensities' has a wrong offset!");
static_assert(offsetof(UBP_LightFlickerComponent_C, Lights) == 0x0000D8, "Member 'UBP_LightFlickerComponent_C::Lights' has a wrong offset!");
static_assert(offsetof(UBP_LightFlickerComponent_C, LightIntensity) == 0x0000E8, "Member 'UBP_LightFlickerComponent_C::LightIntensity' has a wrong offset!");
static_assert(offsetof(UBP_LightFlickerComponent_C, FlickerCurves) == 0x0000F0, "Member 'UBP_LightFlickerComponent_C::FlickerCurves' has a wrong offset!");
static_assert(offsetof(UBP_LightFlickerComponent_C, Flicker_Type) == 0x000140, "Member 'UBP_LightFlickerComponent_C::Flicker_Type' has a wrong offset!");
static_assert(offsetof(UBP_LightFlickerComponent_C, Flicker_Rate) == 0x000144, "Member 'UBP_LightFlickerComponent_C::Flicker_Rate' has a wrong offset!");
static_assert(offsetof(UBP_LightFlickerComponent_C, Offset) == 0x000148, "Member 'UBP_LightFlickerComponent_C::Offset' has a wrong offset!");
static_assert(offsetof(UBP_LightFlickerComponent_C, InvisibleLights) == 0x000150, "Member 'UBP_LightFlickerComponent_C::InvisibleLights' has a wrong offset!");

}

