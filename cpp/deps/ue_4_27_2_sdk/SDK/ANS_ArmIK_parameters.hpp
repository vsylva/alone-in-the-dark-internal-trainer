#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ANS_ArmIK

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ObsidianFox_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ANS_ArmIK.ANS_ArmIK_C.GetReferenceAndCompensationData
// 0x02B0 (0x02B0 - 0x0000)
struct ANS_ArmIK_C_GetReferenceAndCompensationData final
{
public:
	class UAnimSequenceBase*                      Sequence;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UAnimInstance*                    AnimInstance;                                      // 0x0010(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FArmIKReferenceTarget                  ArmIKReferenceTarget;                              // 0x0020(0x0010)(Parm, OutParm, NoDestructor)
	struct FArmIKCompensationData                 ArmIKCompensationData;                             // 0x0030(0x0014)(Parm, OutParm, NoDestructor)
	struct FArmIKCompensationData                 CompensationData;                                  // 0x0044(0x0014)(Edit, BlueprintVisible, NoDestructor)
	bool                                          HasNotifies;                                       // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNotifyEvent                       NotifyEvent;                                       // 0x0060(0x00B8)(Edit, BlueprintVisible, ContainsInstancedReference)
	struct FVector                                BoneLocationAtNotify;                              // 0x0118(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FArmIKReferenceTarget                  ReferenceTarget;                                   // 0x0124(0x0010)(Edit, BlueprintVisible, NoDestructor)
	struct FArmIKCompensationData                 K2Node_MakeStruct_ArmIKCompensationData;           // 0x0134(0x0014)(NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14B[0x5];                                      // 0x014B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0150(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue;     // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBoneLocationAtNotifyEvent_ReturnValue; // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FAnimNotifyEvent>               CallFunc_GetInteractionReachNotifyEventsForCurrentSection_OutNotifyEvents; // 0x0198(0x0010)(ReferenceParm, ContainsInstancedReference)
	struct FVector                                CallFunc_GetBoneLocationAtNotifyEvent_ReturnValue_1; // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNotifyEvent                       CallFunc_Array_Get_Item;                           // 0x01B8(0x00B8)(ContainsInstancedReference)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0270(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FArmIKCompensationData                 K2Node_MakeStruct_ArmIKCompensationData_1;         // 0x027C(0x0014)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0294(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0295(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_296[0x2];                                      // 0x0296(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FArmIKReferenceTarget                  K2Node_MakeStruct_ArmIKReferenceTarget;            // 0x0298(0x0010)(NoDestructor)
};
static_assert(alignof(ANS_ArmIK_C_GetReferenceAndCompensationData) == 0x000010, "Wrong alignment on ANS_ArmIK_C_GetReferenceAndCompensationData");
static_assert(sizeof(ANS_ArmIK_C_GetReferenceAndCompensationData) == 0x0002B0, "Wrong size on ANS_ArmIK_C_GetReferenceAndCompensationData");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, Sequence) == 0x000000, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::Sequence' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, BoneName) == 0x000008, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::BoneName' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, AnimInstance) == 0x000010, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::AnimInstance' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, Mesh) == 0x000018, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::Mesh' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, ArmIKReferenceTarget) == 0x000020, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::ArmIKReferenceTarget' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, ArmIKCompensationData) == 0x000030, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::ArmIKCompensationData' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, CompensationData) == 0x000044, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::CompensationData' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, HasNotifies) == 0x000058, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::HasNotifies' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, NotifyEvent) == 0x000060, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::NotifyEvent' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, BoneLocationAtNotify) == 0x000118, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::BoneLocationAtNotify' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, ReferenceTarget) == 0x000124, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::ReferenceTarget' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, K2Node_MakeStruct_ArmIKCompensationData) == 0x000134, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::K2Node_MakeStruct_ArmIKCompensationData' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, CallFunc_NotEqual_NameName_ReturnValue) == 0x000148, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, CallFunc_BooleanAND_ReturnValue) == 0x000149, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, CallFunc_BooleanAND_ReturnValue_1) == 0x00014A, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000150, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, CallFunc_InverseTransformLocation_ReturnValue) == 0x000180, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::CallFunc_InverseTransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, CallFunc_GetBoneLocationAtNotifyEvent_ReturnValue) == 0x00018C, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::CallFunc_GetBoneLocationAtNotifyEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, CallFunc_GetInteractionReachNotifyEventsForCurrentSection_OutNotifyEvents) == 0x000198, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::CallFunc_GetInteractionReachNotifyEventsForCurrentSection_OutNotifyEvents' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, CallFunc_GetBoneLocationAtNotifyEvent_ReturnValue_1) == 0x0001A8, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::CallFunc_GetBoneLocationAtNotifyEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, CallFunc_Array_Get_Item) == 0x0001B8, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000270, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, K2Node_MakeStruct_ArmIKCompensationData_1) == 0x00027C, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::K2Node_MakeStruct_ArmIKCompensationData_1' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, CallFunc_Array_Length_ReturnValue) == 0x000290, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, CallFunc_Greater_IntInt_ReturnValue) == 0x000294, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, CallFunc_BooleanAND_ReturnValue_2) == 0x000295, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_GetReferenceAndCompensationData, K2Node_MakeStruct_ArmIKReferenceTarget) == 0x000298, "Member 'ANS_ArmIK_C_GetReferenceAndCompensationData::K2Node_MakeStruct_ArmIKReferenceTarget' has a wrong offset!");

// Function ANS_ArmIK.ANS_ArmIK_C.Received_NotifyEnd
// 0x0058 (0x0058 - 0x0000)
struct ANS_ArmIK_C_Received_NotifyEnd final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IHumanoidAnimInterface> K2Node_DynamicCast_AsHumanoid_Anim_Interface;      // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IAnimInterface>        K2Node_DynamicCast_AsAnim_Interface;               // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetHandBoneName_ReturnValue;              // 0x004C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANS_ArmIK_C_Received_NotifyEnd) == 0x000008, "Wrong alignment on ANS_ArmIK_C_Received_NotifyEnd");
static_assert(sizeof(ANS_ArmIK_C_Received_NotifyEnd) == 0x000058, "Wrong size on ANS_ArmIK_C_Received_NotifyEnd");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyEnd, MeshComp) == 0x000000, "Member 'ANS_ArmIK_C_Received_NotifyEnd::MeshComp' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyEnd, Animation) == 0x000008, "Member 'ANS_ArmIK_C_Received_NotifyEnd::Animation' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyEnd, ReturnValue) == 0x000010, "Member 'ANS_ArmIK_C_Received_NotifyEnd::ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyEnd, CallFunc_GetAnimInstance_ReturnValue) == 0x000018, "Member 'ANS_ArmIK_C_Received_NotifyEnd::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyEnd, K2Node_DynamicCast_AsHumanoid_Anim_Interface) == 0x000020, "Member 'ANS_ArmIK_C_Received_NotifyEnd::K2Node_DynamicCast_AsHumanoid_Anim_Interface' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyEnd, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'ANS_ArmIK_C_Received_NotifyEnd::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyEnd, K2Node_DynamicCast_AsAnim_Interface) == 0x000038, "Member 'ANS_ArmIK_C_Received_NotifyEnd::K2Node_DynamicCast_AsAnim_Interface' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyEnd, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'ANS_ArmIK_C_Received_NotifyEnd::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyEnd, CallFunc_GetHandBoneName_ReturnValue) == 0x00004C, "Member 'ANS_ArmIK_C_Received_NotifyEnd::CallFunc_GetHandBoneName_ReturnValue' has a wrong offset!");

// Function ANS_ArmIK.ANS_ArmIK_C.Received_NotifyBegin
// 0x00A0 (0x00A0 - 0x0000)
struct ANS_ArmIK_C_Received_NotifyBegin final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TotalDuration;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Anim;                                              // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          AnimInstance;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FArmIKReferenceTarget                  CallFunc_GetReferenceAndCompensationData_ArmIKReferenceTarget; // 0x0040(0x0010)(NoDestructor)
	struct FArmIKCompensationData                 CallFunc_GetReferenceAndCompensationData_ArmIKCompensationData; // 0x0050(0x0014)(NoDestructor)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IAnimInterface>        K2Node_DynamicCast_AsAnim_Interface;               // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IHumanoidAnimInterface> K2Node_DynamicCast_AsHumanoid_Anim_Interface;      // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetHandBoneName_ReturnValue;              // 0x0094(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ANS_ArmIK_C_Received_NotifyBegin) == 0x000008, "Wrong alignment on ANS_ArmIK_C_Received_NotifyBegin");
static_assert(sizeof(ANS_ArmIK_C_Received_NotifyBegin) == 0x0000A0, "Wrong size on ANS_ArmIK_C_Received_NotifyBegin");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyBegin, MeshComp) == 0x000000, "Member 'ANS_ArmIK_C_Received_NotifyBegin::MeshComp' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyBegin, Animation) == 0x000008, "Member 'ANS_ArmIK_C_Received_NotifyBegin::Animation' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyBegin, TotalDuration) == 0x000010, "Member 'ANS_ArmIK_C_Received_NotifyBegin::TotalDuration' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyBegin, ReturnValue) == 0x000014, "Member 'ANS_ArmIK_C_Received_NotifyBegin::ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyBegin, BoneName) == 0x000018, "Member 'ANS_ArmIK_C_Received_NotifyBegin::BoneName' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyBegin, Mesh) == 0x000020, "Member 'ANS_ArmIK_C_Received_NotifyBegin::Mesh' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyBegin, Anim) == 0x000028, "Member 'ANS_ArmIK_C_Received_NotifyBegin::Anim' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyBegin, AnimInstance) == 0x000030, "Member 'ANS_ArmIK_C_Received_NotifyBegin::AnimInstance' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyBegin, CallFunc_GetAnimInstance_ReturnValue) == 0x000038, "Member 'ANS_ArmIK_C_Received_NotifyBegin::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyBegin, CallFunc_GetReferenceAndCompensationData_ArmIKReferenceTarget) == 0x000040, "Member 'ANS_ArmIK_C_Received_NotifyBegin::CallFunc_GetReferenceAndCompensationData_ArmIKReferenceTarget' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyBegin, CallFunc_GetReferenceAndCompensationData_ArmIKCompensationData) == 0x000050, "Member 'ANS_ArmIK_C_Received_NotifyBegin::CallFunc_GetReferenceAndCompensationData_ArmIKCompensationData' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyBegin, K2Node_DynamicCast_AsAnim_Interface) == 0x000068, "Member 'ANS_ArmIK_C_Received_NotifyBegin::K2Node_DynamicCast_AsAnim_Interface' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyBegin, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'ANS_ArmIK_C_Received_NotifyBegin::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyBegin, K2Node_DynamicCast_AsHumanoid_Anim_Interface) == 0x000080, "Member 'ANS_ArmIK_C_Received_NotifyBegin::K2Node_DynamicCast_AsHumanoid_Anim_Interface' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyBegin, K2Node_DynamicCast_bSuccess_1) == 0x000090, "Member 'ANS_ArmIK_C_Received_NotifyBegin::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ANS_ArmIK_C_Received_NotifyBegin, CallFunc_GetHandBoneName_ReturnValue) == 0x000094, "Member 'ANS_ArmIK_C_Received_NotifyBegin::CallFunc_GetHandBoneName_ReturnValue' has a wrong offset!");

}

