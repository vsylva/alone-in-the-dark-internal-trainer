#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CtrlRig_PlayerCharacter_LegIK

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ControlRig_classes.hpp"


namespace SDK
{

// ControlRigBlueprintGeneratedClass CtrlRig_PlayerCharacter_LegIK.CtrlRig_PlayerCharacter_LegIK_C
// 0x00A0 (0x06F0 - 0x0650)
class UCtrlRig_PlayerCharacter_LegIK_C final : public UControlRig
{
public:
	bool                                          bUseInternalData;                                  // 0x0650(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLimitLegReach;                                    // 0x0651(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bUseFeetPlant;                                     // 0x0652(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_653[0x1];                                      // 0x0653(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HipOffset;                                         // 0x0654(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LegReach;                                          // 0x0658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65C[0x4];                                      // 0x065C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LeftFootEffector;                                  // 0x0660(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FTransform                             RightFootEffector;                                 // 0x0690(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	float                                         HipOffsetAdjust;                                   // 0x06C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WorldZOffset;                                      // 0x06C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GroundNormal;                                      // 0x06C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ManualHipInterpolationSpeed;                       // 0x06D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StepHeight;                                        // 0x06D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PredictiveIKStepLength;                            // 0x06DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseSimpleHipOffset;                               // 0x06E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDisableHipOffset;                                 // 0x06E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E2[0x2];                                      // 0x06E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveSpeed;                                         // 0x06E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FootIKAlpha;                                       // 0x06E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnkleToHeelLength;                                 // 0x06EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CtrlRig_PlayerCharacter_LegIK_C">();
	}
	static class UCtrlRig_PlayerCharacter_LegIK_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCtrlRig_PlayerCharacter_LegIK_C>();
	}
};
static_assert(alignof(UCtrlRig_PlayerCharacter_LegIK_C) == 0x000010, "Wrong alignment on UCtrlRig_PlayerCharacter_LegIK_C");
static_assert(sizeof(UCtrlRig_PlayerCharacter_LegIK_C) == 0x0006F0, "Wrong size on UCtrlRig_PlayerCharacter_LegIK_C");
static_assert(offsetof(UCtrlRig_PlayerCharacter_LegIK_C, bUseInternalData) == 0x000650, "Member 'UCtrlRig_PlayerCharacter_LegIK_C::bUseInternalData' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacter_LegIK_C, bLimitLegReach) == 0x000651, "Member 'UCtrlRig_PlayerCharacter_LegIK_C::bLimitLegReach' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacter_LegIK_C, bUseFeetPlant) == 0x000652, "Member 'UCtrlRig_PlayerCharacter_LegIK_C::bUseFeetPlant' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacter_LegIK_C, HipOffset) == 0x000654, "Member 'UCtrlRig_PlayerCharacter_LegIK_C::HipOffset' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacter_LegIK_C, LegReach) == 0x000658, "Member 'UCtrlRig_PlayerCharacter_LegIK_C::LegReach' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacter_LegIK_C, LeftFootEffector) == 0x000660, "Member 'UCtrlRig_PlayerCharacter_LegIK_C::LeftFootEffector' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacter_LegIK_C, RightFootEffector) == 0x000690, "Member 'UCtrlRig_PlayerCharacter_LegIK_C::RightFootEffector' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacter_LegIK_C, HipOffsetAdjust) == 0x0006C0, "Member 'UCtrlRig_PlayerCharacter_LegIK_C::HipOffsetAdjust' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacter_LegIK_C, WorldZOffset) == 0x0006C4, "Member 'UCtrlRig_PlayerCharacter_LegIK_C::WorldZOffset' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacter_LegIK_C, GroundNormal) == 0x0006C8, "Member 'UCtrlRig_PlayerCharacter_LegIK_C::GroundNormal' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacter_LegIK_C, ManualHipInterpolationSpeed) == 0x0006D4, "Member 'UCtrlRig_PlayerCharacter_LegIK_C::ManualHipInterpolationSpeed' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacter_LegIK_C, StepHeight) == 0x0006D8, "Member 'UCtrlRig_PlayerCharacter_LegIK_C::StepHeight' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacter_LegIK_C, PredictiveIKStepLength) == 0x0006DC, "Member 'UCtrlRig_PlayerCharacter_LegIK_C::PredictiveIKStepLength' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacter_LegIK_C, bUseSimpleHipOffset) == 0x0006E0, "Member 'UCtrlRig_PlayerCharacter_LegIK_C::bUseSimpleHipOffset' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacter_LegIK_C, bDisableHipOffset) == 0x0006E1, "Member 'UCtrlRig_PlayerCharacter_LegIK_C::bDisableHipOffset' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacter_LegIK_C, MoveSpeed) == 0x0006E4, "Member 'UCtrlRig_PlayerCharacter_LegIK_C::MoveSpeed' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacter_LegIK_C, FootIKAlpha) == 0x0006E8, "Member 'UCtrlRig_PlayerCharacter_LegIK_C::FootIKAlpha' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacter_LegIK_C, AnkleToHeelLength) == 0x0006EC, "Member 'UCtrlRig_PlayerCharacter_LegIK_C::AnkleToHeelLength' has a wrong offset!");

}

