#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BirdFlock_Spline

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_Boids_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BirdFlock_Spline.BP_BirdFlock_Spline_C
// 0x0020 (0x03C8 - 0x03A8)
class BP_BirdFlock_Spline::ABP_BirdFlock_Spline_C final : public ABP_Boids_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_BirdFlock_Spline_C;              // 0x03A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineComponent*                       Spline;                                            // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         AlignRotationWithSpline;                           // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomLocationOffset;                              // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumberOfEmptySpots;                                // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EmptySpotWidth;                                    // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void GetRandomRotation(float DistanceAlongSpline, struct FRotator* Rotation);
	void GetRandomLocation(int32 IterationIndex, struct FVector* Location, float* DistanceAlongSpline);
	void SpawnBoidsOnSpline();
	void UserConstructionScript();
	void CreateBoids();
	void ExecuteUbergraph_BP_BirdFlock_Spline(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BlueprintGeneratedClass BP_BirdFlock_Spline.BP_BirdFlock_Spline_C", true, "BP_BirdFlock_Spline_C">();
	}
	static class BP_BirdFlock_Spline::ABP_BirdFlock_Spline_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<BP_BirdFlock_Spline::ABP_BirdFlock_Spline_C>();
	}
};
static_assert(alignof(BP_BirdFlock_Spline::ABP_BirdFlock_Spline_C) == 0x000008, "Wrong alignment on BP_BirdFlock_Spline::ABP_BirdFlock_Spline_C");
static_assert(sizeof(BP_BirdFlock_Spline::ABP_BirdFlock_Spline_C) == 0x0003C8, "Wrong size on BP_BirdFlock_Spline::ABP_BirdFlock_Spline_C");
static_assert(offsetof(BP_BirdFlock_Spline::ABP_BirdFlock_Spline_C, UberGraphFrame_BP_BirdFlock_Spline_C) == 0x0003A8, "Member 'BP_BirdFlock_Spline::ABP_BirdFlock_Spline_C::UberGraphFrame_BP_BirdFlock_Spline_C' has a wrong offset!");
static_assert(offsetof(BP_BirdFlock_Spline::ABP_BirdFlock_Spline_C, Spline) == 0x0003B0, "Member 'BP_BirdFlock_Spline::ABP_BirdFlock_Spline_C::Spline' has a wrong offset!");
static_assert(offsetof(BP_BirdFlock_Spline::ABP_BirdFlock_Spline_C, AlignRotationWithSpline) == 0x0003B8, "Member 'BP_BirdFlock_Spline::ABP_BirdFlock_Spline_C::AlignRotationWithSpline' has a wrong offset!");
static_assert(offsetof(BP_BirdFlock_Spline::ABP_BirdFlock_Spline_C, RandomLocationOffset) == 0x0003BC, "Member 'BP_BirdFlock_Spline::ABP_BirdFlock_Spline_C::RandomLocationOffset' has a wrong offset!");
static_assert(offsetof(BP_BirdFlock_Spline::ABP_BirdFlock_Spline_C, NumberOfEmptySpots) == 0x0003C0, "Member 'BP_BirdFlock_Spline::ABP_BirdFlock_Spline_C::NumberOfEmptySpots' has a wrong offset!");
static_assert(offsetof(BP_BirdFlock_Spline::ABP_BirdFlock_Spline_C, EmptySpotWidth) == 0x0003C4, "Member 'BP_BirdFlock_Spline::ABP_BirdFlock_Spline_C::EmptySpotWidth' has a wrong offset!");

}

