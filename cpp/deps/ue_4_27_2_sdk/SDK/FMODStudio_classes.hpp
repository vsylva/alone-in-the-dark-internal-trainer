#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FMODStudio

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "FMODStudio_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "MovieScene_classes.hpp"


namespace SDK
{

// Class FMODStudio.FMODAmbientSound
// 0x0018 (0x0250 - 0x0238)
class AFMODAmbientSound final : public AActor
{
public:
	class UFMODAudioComponent*                    AudioComponent;                                    // 0x0238(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPersistenceComponent*                  PersistenceComponent;                              // 0x0240(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSerializedWasPlaying;                             // 0x0248(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_249[0x3];                                      // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SerializedTimelinePosition;                        // 0x024C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FMODAmbientSound">();
	}
	static class AFMODAmbientSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFMODAmbientSound>();
	}
};
static_assert(alignof(AFMODAmbientSound) == 0x000008, "Wrong alignment on AFMODAmbientSound");
static_assert(sizeof(AFMODAmbientSound) == 0x000250, "Wrong size on AFMODAmbientSound");
static_assert(offsetof(AFMODAmbientSound, AudioComponent) == 0x000238, "Member 'AFMODAmbientSound::AudioComponent' has a wrong offset!");
static_assert(offsetof(AFMODAmbientSound, PersistenceComponent) == 0x000240, "Member 'AFMODAmbientSound::PersistenceComponent' has a wrong offset!");
static_assert(offsetof(AFMODAmbientSound, bSerializedWasPlaying) == 0x000248, "Member 'AFMODAmbientSound::bSerializedWasPlaying' has a wrong offset!");
static_assert(offsetof(AFMODAmbientSound, SerializedTimelinePosition) == 0x00024C, "Member 'AFMODAmbientSound::SerializedTimelinePosition' has a wrong offset!");

// Class FMODStudio.FMODAnimNotifyPlay
// 0x0020 (0x0058 - 0x0038)
class UFMODAnimNotifyPlay final : public UAnimNotify
{
public:
	uint8                                         bFollow : 1;                                       // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AttachName;                                        // 0x0040(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFMODEvent*                             Event;                                             // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FMODAnimNotifyPlay">();
	}
	static class UFMODAnimNotifyPlay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFMODAnimNotifyPlay>();
	}
};
static_assert(alignof(UFMODAnimNotifyPlay) == 0x000008, "Wrong alignment on UFMODAnimNotifyPlay");
static_assert(sizeof(UFMODAnimNotifyPlay) == 0x000058, "Wrong size on UFMODAnimNotifyPlay");
static_assert(offsetof(UFMODAnimNotifyPlay, AttachName) == 0x000040, "Member 'UFMODAnimNotifyPlay::AttachName' has a wrong offset!");
static_assert(offsetof(UFMODAnimNotifyPlay, Event) == 0x000050, "Member 'UFMODAnimNotifyPlay::Event' has a wrong offset!");

// Class FMODStudio.FMODAsset
// 0x0010 (0x0038 - 0x0028)
class UFMODAsset : public UObject
{
public:
	struct FGuid                                  AssetGuid;                                         // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FMODAsset">();
	}
	static class UFMODAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFMODAsset>();
	}
};
static_assert(alignof(UFMODAsset) == 0x000008, "Wrong alignment on UFMODAsset");
static_assert(sizeof(UFMODAsset) == 0x000038, "Wrong size on UFMODAsset");
static_assert(offsetof(UFMODAsset, AssetGuid) == 0x000028, "Member 'UFMODAsset::AssetGuid' has a wrong offset!");

// Class FMODStudio.FMODAudioComponent
// 0x01B0 (0x03C0 - 0x0210)
class UFMODAudioComponent final : public USceneComponent
{
public:
	class UFMODEvent*                             Event;                                             // 0x0208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      ParameterCache;                                    // 0x0210(0x0050)(Edit, BlueprintVisible, SimpleDisplay, NativeAccessSpecifierPublic)
	class FString                                 ProgrammerSoundName;                               // 0x0260(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableTimelineCallbacks : 1;                      // 0x0270(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAutoDestroy : 1;                                  // 0x0270(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStopWhenOwnerDestroyed : 1;                       // 0x0270(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_271[0x7];                                      // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnEventStopped;                                    // 0x0278(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTimelineMarker;                                  // 0x0288(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTimelineBeat;                                    // 0x0298(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FFMODAttenuationDetails                AttenuationDetails;                                // 0x02A8(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFMODOcclusionDetails                  OcclusionDetails;                                  // 0x02B4(0x0003)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B7[0x9];                                      // 0x02B7(0x0009)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bShowSubtitle;                                     // 0x02C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStringTable>            SubtitlesStringTable;                              // 0x02C8(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F0[0xD0];                                     // 0x02F0(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetParameter(class FName Name_0);
	void GetParameterValue(class FName Name_0, float* UserValue, float* FinalValue);
	float GetProperty(EFMODEventProperty Property);
	int32 GetTimelinePosition();
	bool IsPlaying();
	void KeyOff();
	void Play();
	void Release();
	void SetEvent(class UFMODEvent* NewEvent);
	void SetParameter(class FName Name_0, float Value);
	void SetPaused(bool Paused);
	void SetPitch(float Pitch);
	void SetProgrammerSoundName(const class FString& Value);
	void SetProperty(EFMODEventProperty Property, float Value);
	void SetShowSubtitle(bool bInShowSubtitle);
	void SetSubtitleStringTable(const class UStringTable* SubtitleTable);
	void SetTimelinePosition(int32 Time);
	void SetVolume(float Volume);
	void Stop();

	int32 GetLength() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FMODAudioComponent">();
	}
	static class UFMODAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFMODAudioComponent>();
	}
};
static_assert(alignof(UFMODAudioComponent) == 0x000010, "Wrong alignment on UFMODAudioComponent");
static_assert(sizeof(UFMODAudioComponent) == 0x0003C0, "Wrong size on UFMODAudioComponent");
static_assert(offsetof(UFMODAudioComponent, Event) == 0x000208, "Member 'UFMODAudioComponent::Event' has a wrong offset!");
static_assert(offsetof(UFMODAudioComponent, ParameterCache) == 0x000210, "Member 'UFMODAudioComponent::ParameterCache' has a wrong offset!");
static_assert(offsetof(UFMODAudioComponent, ProgrammerSoundName) == 0x000260, "Member 'UFMODAudioComponent::ProgrammerSoundName' has a wrong offset!");
static_assert(offsetof(UFMODAudioComponent, OnEventStopped) == 0x000278, "Member 'UFMODAudioComponent::OnEventStopped' has a wrong offset!");
static_assert(offsetof(UFMODAudioComponent, OnTimelineMarker) == 0x000288, "Member 'UFMODAudioComponent::OnTimelineMarker' has a wrong offset!");
static_assert(offsetof(UFMODAudioComponent, OnTimelineBeat) == 0x000298, "Member 'UFMODAudioComponent::OnTimelineBeat' has a wrong offset!");
static_assert(offsetof(UFMODAudioComponent, AttenuationDetails) == 0x0002A8, "Member 'UFMODAudioComponent::AttenuationDetails' has a wrong offset!");
static_assert(offsetof(UFMODAudioComponent, OcclusionDetails) == 0x0002B4, "Member 'UFMODAudioComponent::OcclusionDetails' has a wrong offset!");
static_assert(offsetof(UFMODAudioComponent, bShowSubtitle) == 0x0002C0, "Member 'UFMODAudioComponent::bShowSubtitle' has a wrong offset!");
static_assert(offsetof(UFMODAudioComponent, SubtitlesStringTable) == 0x0002C8, "Member 'UFMODAudioComponent::SubtitlesStringTable' has a wrong offset!");

// Class FMODStudio.FMODBank
// 0x0000 (0x0038 - 0x0038)
class UFMODBank final : public UFMODAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FMODBank">();
	}
	static class UFMODBank* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFMODBank>();
	}
};
static_assert(alignof(UFMODBank) == 0x000008, "Wrong alignment on UFMODBank");
static_assert(sizeof(UFMODBank) == 0x000038, "Wrong size on UFMODBank");

// Class FMODStudio.FMODBankLookup
// 0x0038 (0x0060 - 0x0028)
class UFMODBankLookup final : public UObject
{
public:
	class UDataTable*                             DataTable;                                         // 0x0028(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MasterBankPath;                                    // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MasterAssetsBankPath;                              // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MasterStringsBankPath;                             // 0x0050(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FMODBankLookup">();
	}
	static class UFMODBankLookup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFMODBankLookup>();
	}
};
static_assert(alignof(UFMODBankLookup) == 0x000008, "Wrong alignment on UFMODBankLookup");
static_assert(sizeof(UFMODBankLookup) == 0x000060, "Wrong size on UFMODBankLookup");
static_assert(offsetof(UFMODBankLookup, DataTable) == 0x000028, "Member 'UFMODBankLookup::DataTable' has a wrong offset!");
static_assert(offsetof(UFMODBankLookup, MasterBankPath) == 0x000030, "Member 'UFMODBankLookup::MasterBankPath' has a wrong offset!");
static_assert(offsetof(UFMODBankLookup, MasterAssetsBankPath) == 0x000040, "Member 'UFMODBankLookup::MasterAssetsBankPath' has a wrong offset!");
static_assert(offsetof(UFMODBankLookup, MasterStringsBankPath) == 0x000050, "Member 'UFMODBankLookup::MasterStringsBankPath' has a wrong offset!");

// Class FMODStudio.FMODBlueprintStatics
// 0x0000 (0x0028 - 0x0028)
class UFMODBlueprintStatics final : public UBlueprintFunctionLibrary
{
public:
	static void BusSetMute(class UFMODBus* Bus, bool bMute);
	static void BusSetPaused(class UFMODBus* Bus, bool bPaused);
	static void BusSetVolume(class UFMODBus* Bus, float Volume);
	static void BusStopAllEvents(class UFMODBus* Bus, EFMOD_STUDIO_STOP_MODE StopMode);
	static float EventInstanceGetParameter(const struct FFMODEventInstance& EventInstance, class FName Name_0);
	static void EventInstanceGetParameterValue(const struct FFMODEventInstance& EventInstance, class FName Name_0, float* UserValue, float* FinalValue);
	static bool EventInstanceIsValid(const struct FFMODEventInstance& EventInstance);
	static void EventInstanceKeyOff(const struct FFMODEventInstance& EventInstance);
	static void EventInstancePlay(const struct FFMODEventInstance& EventInstance);
	static void EventInstanceRelease(const struct FFMODEventInstance& EventInstance);
	static void EventInstanceSetParameter(const struct FFMODEventInstance& EventInstance, class FName Name_0, float Value);
	static void EventInstanceSetPaused(const struct FFMODEventInstance& EventInstance, bool Paused);
	static void EventInstanceSetPitch(const struct FFMODEventInstance& EventInstance, float Pitch);
	static void EventInstanceSetProperty(const struct FFMODEventInstance& EventInstance, EFMODEventProperty Property, float Value);
	static void EventInstanceSetTransform(const struct FFMODEventInstance& EventInstance, const struct FTransform& Location);
	static void EventInstanceSetVolume(const struct FFMODEventInstance& EventInstance, float Volume);
	static void EventInstanceStop(const struct FFMODEventInstance& EventInstance, bool Release);
	static class UFMODAsset* FindAssetByName(const class FString& Name_0);
	static class UFMODEvent* FindEventByName(const class FString& Name_0);
	static TArray<struct FFMODEventInstance> FindEventInstances(class UObject* WorldContextObject, class UFMODEvent* Event);
	static float GetGlobalParameterByName(class FName Name_0);
	static void GetGlobalParameterValueByName(class FName Name_0, float* UserValue, float* FinalValue);
	static TArray<class FString> GetOutputDrivers();
	static bool IsBankLoaded(class UFMODBank* Bank);
	static void LoadBank(class UFMODBank* Bank, bool bBlocking, bool bLoadSampleData);
	static void LoadBankSampleData(class UFMODBank* Bank);
	static void LoadEventSampleData(class UObject* WorldContextObject, class UFMODEvent* Event);
	static void MixerResume();
	static void MixerSuspend();
	static struct FFMODEventInstance PlayEvent2D(class UObject* WorldContextObject, class UFMODEvent* Event, bool bAutoPlay);
	static struct FFMODEventInstance PlayEventAtLocation(class UObject* WorldContextObject, class UFMODEvent* Event, const struct FTransform& Location, bool bAutoPlay);
	static class UFMODAudioComponent* PlayEventAttached(class UFMODEvent* Event, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, bool bAutoPlay, bool bAutoDestroy, const class FString& ProgrammerSound);
	static void SetGlobalParameterByName(class FName Name_0, float Value);
	static void SetLocale(const class FString& Locale);
	static void SetOutputDriverByIndex(int32 NewDriverIndex);
	static void SetOutputDriverByName(const class FString& NewDriverName);
	static void UnloadBank(class UFMODBank* Bank);
	static void UnloadBankSampleData(class UFMODBank* Bank);
	static void UnloadEventSampleData(class UObject* WorldContextObject, class UFMODEvent* Event);
	static void VCASetVolume(class UFMODVCA* Vca, float Volume);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FMODBlueprintStatics">();
	}
	static class UFMODBlueprintStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFMODBlueprintStatics>();
	}
};
static_assert(alignof(UFMODBlueprintStatics) == 0x000008, "Wrong alignment on UFMODBlueprintStatics");
static_assert(sizeof(UFMODBlueprintStatics) == 0x000028, "Wrong size on UFMODBlueprintStatics");

// Class FMODStudio.FMODBus
// 0x0000 (0x0038 - 0x0038)
class UFMODBus final : public UFMODAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FMODBus">();
	}
	static class UFMODBus* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFMODBus>();
	}
};
static_assert(alignof(UFMODBus) == 0x000008, "Wrong alignment on UFMODBus");
static_assert(sizeof(UFMODBus) == 0x000038, "Wrong size on UFMODBus");

// Class FMODStudio.FMODEngineSubsystem
// 0x0040 (0x0070 - 0x0030)
class UFMODEngineSubsystem final : public UEngineSubsystem
{
public:
	FMulticastInlineDelegateProperty_             OnFMODEventPlayed;                                 // 0x0030(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x30];                                      // 0x0040(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const TArray<class UFMODAudioComponent*> GetComponents();
	struct FFMODDebugEventUpdate GetFMODDebugEventUpdate();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FMODEngineSubsystem">();
	}
	static class UFMODEngineSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFMODEngineSubsystem>();
	}
};
static_assert(alignof(UFMODEngineSubsystem) == 0x000008, "Wrong alignment on UFMODEngineSubsystem");
static_assert(sizeof(UFMODEngineSubsystem) == 0x000070, "Wrong size on UFMODEngineSubsystem");
static_assert(offsetof(UFMODEngineSubsystem, OnFMODEventPlayed) == 0x000030, "Member 'UFMODEngineSubsystem::OnFMODEventPlayed' has a wrong offset!");

// Class FMODStudio.FMODEvent
// 0x0000 (0x0038 - 0x0038)
class UFMODEvent : public UFMODAsset
{
public:
	class FString GetDesc();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FMODEvent">();
	}
	static class UFMODEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFMODEvent>();
	}
};
static_assert(alignof(UFMODEvent) == 0x000008, "Wrong alignment on UFMODEvent");
static_assert(sizeof(UFMODEvent) == 0x000038, "Wrong size on UFMODEvent");

// Class FMODStudio.FMODEventControlSection
// 0x0098 (0x0180 - 0x00E8)
class UFMODEventControlSection final : public UMovieSceneSection
{
public:
	struct FFMODEventControlChannel               ControlKeys;                                       // 0x00E8(0x0098)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FMODEventControlSection">();
	}
	static class UFMODEventControlSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFMODEventControlSection>();
	}
};
static_assert(alignof(UFMODEventControlSection) == 0x000008, "Wrong alignment on UFMODEventControlSection");
static_assert(sizeof(UFMODEventControlSection) == 0x000180, "Wrong size on UFMODEventControlSection");
static_assert(offsetof(UFMODEventControlSection, ControlKeys) == 0x0000E8, "Member 'UFMODEventControlSection::ControlKeys' has a wrong offset!");

// Class FMODStudio.FMODEventControlTrack
// 0x0018 (0x00A8 - 0x0090)
class UFMODEventControlTrack final : public UMovieSceneNameableTrack
{
public:
	uint8                                         Pad_90[0x8];                                       // 0x0090(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             ControlSections;                                   // 0x0098(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FMODEventControlTrack">();
	}
	static class UFMODEventControlTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFMODEventControlTrack>();
	}
};
static_assert(alignof(UFMODEventControlTrack) == 0x000008, "Wrong alignment on UFMODEventControlTrack");
static_assert(sizeof(UFMODEventControlTrack) == 0x0000A8, "Wrong size on UFMODEventControlTrack");
static_assert(offsetof(UFMODEventControlTrack, ControlSections) == 0x000098, "Member 'UFMODEventControlTrack::ControlSections' has a wrong offset!");

// Class FMODStudio.FMODEventParameterTrack
// 0x0018 (0x00A8 - 0x0090)
class UFMODEventParameterTrack final : public UMovieSceneNameableTrack
{
public:
	uint8                                         Pad_90[0x8];                                       // 0x0090(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0098(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FMODEventParameterTrack">();
	}
	static class UFMODEventParameterTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFMODEventParameterTrack>();
	}
};
static_assert(alignof(UFMODEventParameterTrack) == 0x000008, "Wrong alignment on UFMODEventParameterTrack");
static_assert(sizeof(UFMODEventParameterTrack) == 0x0000A8, "Wrong size on UFMODEventParameterTrack");
static_assert(offsetof(UFMODEventParameterTrack, Sections) == 0x000098, "Member 'UFMODEventParameterTrack::Sections' has a wrong offset!");

// Class FMODStudio.FMODPort
// 0x0000 (0x0038 - 0x0038)
class UFMODPort final : public UFMODAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FMODPort">();
	}
	static class UFMODPort* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFMODPort>();
	}
};
static_assert(alignof(UFMODPort) == 0x000008, "Wrong alignment on UFMODPort");
static_assert(sizeof(UFMODPort) == 0x000038, "Wrong size on UFMODPort");

// Class FMODStudio.FMODSettings
// 0x01C0 (0x01E8 - 0x0028)
class UFMODSettings final : public UObject
{
public:
	bool                                          bLoadAllBanks;                                     // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadAllSampleData;                                // 0x0029(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLiveUpdate;                                 // 0x002A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableEditorLiveUpdate;                           // 0x002B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDirectoryPath                         BankOutputDirectory;                               // 0x0030(0x0010)(Edit, Config, NativeAccessSpecifierPublic)
	EFMODSpeakerMode                              OutputFormat;                                      // 0x0040(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFMODOutput                                   OutputType;                                        // 0x0041(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFMODProjectLocale>             Locales;                                           // 0x0048(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          bVol0Virtual;                                      // 0x0058(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Vol0VirtualLevel;                                  // 0x005C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SampleRate;                                        // 0x0060(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchHardwareSampleRate;                          // 0x0064(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RealChannelCount;                                  // 0x0068(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalChannelCount;                                 // 0x006C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DSPBufferLength;                                   // 0x0070(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DSPBufferCount;                                    // 0x0074(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FileBufferSize;                                    // 0x0078(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StudioUpdatePeriod;                                // 0x007C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InitialOutputDriverName;                           // 0x0080(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockAllBuses;                                     // 0x0090(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCustomPoolSizes                       MemoryPoolSizes;                                   // 0x0094(0x0014)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         LiveUpdatePort;                                    // 0x00A8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EditorLiveUpdatePort;                              // 0x00AC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReloadBanksDelay;                                  // 0x00B0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAPIErrorLogging;                            // 0x00B4(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMemoryTracking;                             // 0x00B5(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         PluginFiles;                                       // 0x00B8(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	class FString                                 ContentBrowserPrefix;                              // 0x00C8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ForcePlatformName;                                 // 0x00D8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MasterBankName;                                    // 0x00E8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkipLoadBankName;                                  // 0x00F8(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StudioBankKey;                                     // 0x0108(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WavWriterPath;                                     // 0x0118(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFMODLogging                                  LoggingLevel;                                      // 0x0128(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OcclusionParameter;                                // 0x0130(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AmbientVolumeParameter;                            // 0x0140(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AmbientLPFParameter;                               // 0x0150(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStringTable>            SubtitleStringTable;                               // 0x0160(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EFMODPlatforms, struct FFMODPlatformSettings> Platforms;                                         // 0x0188(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x10];                                     // 0x01D8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FMODSettings">();
	}
	static class UFMODSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFMODSettings>();
	}
};
static_assert(alignof(UFMODSettings) == 0x000008, "Wrong alignment on UFMODSettings");
static_assert(sizeof(UFMODSettings) == 0x0001E8, "Wrong size on UFMODSettings");
static_assert(offsetof(UFMODSettings, bLoadAllBanks) == 0x000028, "Member 'UFMODSettings::bLoadAllBanks' has a wrong offset!");
static_assert(offsetof(UFMODSettings, bLoadAllSampleData) == 0x000029, "Member 'UFMODSettings::bLoadAllSampleData' has a wrong offset!");
static_assert(offsetof(UFMODSettings, bEnableLiveUpdate) == 0x00002A, "Member 'UFMODSettings::bEnableLiveUpdate' has a wrong offset!");
static_assert(offsetof(UFMODSettings, bEnableEditorLiveUpdate) == 0x00002B, "Member 'UFMODSettings::bEnableEditorLiveUpdate' has a wrong offset!");
static_assert(offsetof(UFMODSettings, BankOutputDirectory) == 0x000030, "Member 'UFMODSettings::BankOutputDirectory' has a wrong offset!");
static_assert(offsetof(UFMODSettings, OutputFormat) == 0x000040, "Member 'UFMODSettings::OutputFormat' has a wrong offset!");
static_assert(offsetof(UFMODSettings, OutputType) == 0x000041, "Member 'UFMODSettings::OutputType' has a wrong offset!");
static_assert(offsetof(UFMODSettings, Locales) == 0x000048, "Member 'UFMODSettings::Locales' has a wrong offset!");
static_assert(offsetof(UFMODSettings, bVol0Virtual) == 0x000058, "Member 'UFMODSettings::bVol0Virtual' has a wrong offset!");
static_assert(offsetof(UFMODSettings, Vol0VirtualLevel) == 0x00005C, "Member 'UFMODSettings::Vol0VirtualLevel' has a wrong offset!");
static_assert(offsetof(UFMODSettings, SampleRate) == 0x000060, "Member 'UFMODSettings::SampleRate' has a wrong offset!");
static_assert(offsetof(UFMODSettings, bMatchHardwareSampleRate) == 0x000064, "Member 'UFMODSettings::bMatchHardwareSampleRate' has a wrong offset!");
static_assert(offsetof(UFMODSettings, RealChannelCount) == 0x000068, "Member 'UFMODSettings::RealChannelCount' has a wrong offset!");
static_assert(offsetof(UFMODSettings, TotalChannelCount) == 0x00006C, "Member 'UFMODSettings::TotalChannelCount' has a wrong offset!");
static_assert(offsetof(UFMODSettings, DSPBufferLength) == 0x000070, "Member 'UFMODSettings::DSPBufferLength' has a wrong offset!");
static_assert(offsetof(UFMODSettings, DSPBufferCount) == 0x000074, "Member 'UFMODSettings::DSPBufferCount' has a wrong offset!");
static_assert(offsetof(UFMODSettings, FileBufferSize) == 0x000078, "Member 'UFMODSettings::FileBufferSize' has a wrong offset!");
static_assert(offsetof(UFMODSettings, StudioUpdatePeriod) == 0x00007C, "Member 'UFMODSettings::StudioUpdatePeriod' has a wrong offset!");
static_assert(offsetof(UFMODSettings, InitialOutputDriverName) == 0x000080, "Member 'UFMODSettings::InitialOutputDriverName' has a wrong offset!");
static_assert(offsetof(UFMODSettings, bLockAllBuses) == 0x000090, "Member 'UFMODSettings::bLockAllBuses' has a wrong offset!");
static_assert(offsetof(UFMODSettings, MemoryPoolSizes) == 0x000094, "Member 'UFMODSettings::MemoryPoolSizes' has a wrong offset!");
static_assert(offsetof(UFMODSettings, LiveUpdatePort) == 0x0000A8, "Member 'UFMODSettings::LiveUpdatePort' has a wrong offset!");
static_assert(offsetof(UFMODSettings, EditorLiveUpdatePort) == 0x0000AC, "Member 'UFMODSettings::EditorLiveUpdatePort' has a wrong offset!");
static_assert(offsetof(UFMODSettings, ReloadBanksDelay) == 0x0000B0, "Member 'UFMODSettings::ReloadBanksDelay' has a wrong offset!");
static_assert(offsetof(UFMODSettings, bEnableAPIErrorLogging) == 0x0000B4, "Member 'UFMODSettings::bEnableAPIErrorLogging' has a wrong offset!");
static_assert(offsetof(UFMODSettings, bEnableMemoryTracking) == 0x0000B5, "Member 'UFMODSettings::bEnableMemoryTracking' has a wrong offset!");
static_assert(offsetof(UFMODSettings, PluginFiles) == 0x0000B8, "Member 'UFMODSettings::PluginFiles' has a wrong offset!");
static_assert(offsetof(UFMODSettings, ContentBrowserPrefix) == 0x0000C8, "Member 'UFMODSettings::ContentBrowserPrefix' has a wrong offset!");
static_assert(offsetof(UFMODSettings, ForcePlatformName) == 0x0000D8, "Member 'UFMODSettings::ForcePlatformName' has a wrong offset!");
static_assert(offsetof(UFMODSettings, MasterBankName) == 0x0000E8, "Member 'UFMODSettings::MasterBankName' has a wrong offset!");
static_assert(offsetof(UFMODSettings, SkipLoadBankName) == 0x0000F8, "Member 'UFMODSettings::SkipLoadBankName' has a wrong offset!");
static_assert(offsetof(UFMODSettings, StudioBankKey) == 0x000108, "Member 'UFMODSettings::StudioBankKey' has a wrong offset!");
static_assert(offsetof(UFMODSettings, WavWriterPath) == 0x000118, "Member 'UFMODSettings::WavWriterPath' has a wrong offset!");
static_assert(offsetof(UFMODSettings, LoggingLevel) == 0x000128, "Member 'UFMODSettings::LoggingLevel' has a wrong offset!");
static_assert(offsetof(UFMODSettings, OcclusionParameter) == 0x000130, "Member 'UFMODSettings::OcclusionParameter' has a wrong offset!");
static_assert(offsetof(UFMODSettings, AmbientVolumeParameter) == 0x000140, "Member 'UFMODSettings::AmbientVolumeParameter' has a wrong offset!");
static_assert(offsetof(UFMODSettings, AmbientLPFParameter) == 0x000150, "Member 'UFMODSettings::AmbientLPFParameter' has a wrong offset!");
static_assert(offsetof(UFMODSettings, SubtitleStringTable) == 0x000160, "Member 'UFMODSettings::SubtitleStringTable' has a wrong offset!");
static_assert(offsetof(UFMODSettings, Platforms) == 0x000188, "Member 'UFMODSettings::Platforms' has a wrong offset!");

// Class FMODStudio.FMODSnapshot
// 0x0000 (0x0038 - 0x0038)
class UFMODSnapshot final : public UFMODEvent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FMODSnapshot">();
	}
	static class UFMODSnapshot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFMODSnapshot>();
	}
};
static_assert(alignof(UFMODSnapshot) == 0x000008, "Wrong alignment on UFMODSnapshot");
static_assert(sizeof(UFMODSnapshot) == 0x000038, "Wrong size on UFMODSnapshot");

// Class FMODStudio.FMODSnapshotReverb
// 0x0010 (0x0070 - 0x0060)
class UFMODSnapshotReverb final : public UReverbEffect
{
public:
	struct FGuid                                  AssetGuid;                                         // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FMODSnapshotReverb">();
	}
	static class UFMODSnapshotReverb* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFMODSnapshotReverb>();
	}
};
static_assert(alignof(UFMODSnapshotReverb) == 0x000008, "Wrong alignment on UFMODSnapshotReverb");
static_assert(sizeof(UFMODSnapshotReverb) == 0x000070, "Wrong size on UFMODSnapshotReverb");
static_assert(offsetof(UFMODSnapshotReverb, AssetGuid) == 0x000060, "Member 'UFMODSnapshotReverb::AssetGuid' has a wrong offset!");

// Class FMODStudio.FMODVCA
// 0x0000 (0x0038 - 0x0038)
class UFMODVCA final : public UFMODAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FMODVCA">();
	}
	static class UFMODVCA* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFMODVCA>();
	}
};
static_assert(alignof(UFMODVCA) == 0x000008, "Wrong alignment on UFMODVCA");
static_assert(sizeof(UFMODVCA) == 0x000038, "Wrong size on UFMODVCA");

}

