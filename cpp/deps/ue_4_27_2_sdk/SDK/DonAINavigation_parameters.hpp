#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DonAINavigation

#include "Basic.hpp"

#include "DonAINavigation_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function DonAINavigation.BTTask_FlyTo.Pathfinding_OnDynamicCollisionAlert
// 0x0038 (0x0038 - 0x0000)
struct BTTask_FlyTo_Pathfinding_OnDynamicCollisionAlert final
{
public:
	struct FDonNavigationDynamicCollisionPayload  Data;                                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTTask_FlyTo_Pathfinding_OnDynamicCollisionAlert) == 0x000008, "Wrong alignment on BTTask_FlyTo_Pathfinding_OnDynamicCollisionAlert");
static_assert(sizeof(BTTask_FlyTo_Pathfinding_OnDynamicCollisionAlert) == 0x000038, "Wrong size on BTTask_FlyTo_Pathfinding_OnDynamicCollisionAlert");
static_assert(offsetof(BTTask_FlyTo_Pathfinding_OnDynamicCollisionAlert, Data) == 0x000000, "Member 'BTTask_FlyTo_Pathfinding_OnDynamicCollisionAlert::Data' has a wrong offset!");

// Function DonAINavigation.BTTask_FlyTo.Pathfinding_OnFinish
// 0x02E0 (0x02E0 - 0x0000)
struct BTTask_FlyTo_Pathfinding_OnFinish final
{
public:
	struct FDoNNavigationQueryData                Data;                                              // 0x0000(0x02E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BTTask_FlyTo_Pathfinding_OnFinish) == 0x000008, "Wrong alignment on BTTask_FlyTo_Pathfinding_OnFinish");
static_assert(sizeof(BTTask_FlyTo_Pathfinding_OnFinish) == 0x0002E0, "Wrong size on BTTask_FlyTo_Pathfinding_OnFinish");
static_assert(offsetof(BTTask_FlyTo_Pathfinding_OnFinish, Data) == 0x000000, "Member 'BTTask_FlyTo_Pathfinding_OnFinish::Data' has a wrong offset!");

// Function DonAINavigation.DonNavigationHelper.DonNavigationManager
// 0x0010 (0x0010 - 0x0000)
struct DonNavigationHelper_DonNavigationManager final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADonNavigationManager*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DonNavigationHelper_DonNavigationManager) == 0x000008, "Wrong alignment on DonNavigationHelper_DonNavigationManager");
static_assert(sizeof(DonNavigationHelper_DonNavigationManager) == 0x000010, "Wrong size on DonNavigationHelper_DonNavigationManager");
static_assert(offsetof(DonNavigationHelper_DonNavigationManager, WorldContextObject) == 0x000000, "Member 'DonNavigationHelper_DonNavigationManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DonNavigationHelper_DonNavigationManager, ReturnValue) == 0x000008, "Member 'DonNavigationHelper_DonNavigationManager::ReturnValue' has a wrong offset!");

// Function DonAINavigation.DonNavigationHelper.DonNavigationManagerForActor
// 0x0010 (0x0010 - 0x0000)
struct DonNavigationHelper_DonNavigationManagerForActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADonNavigationManager*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DonNavigationHelper_DonNavigationManagerForActor) == 0x000008, "Wrong alignment on DonNavigationHelper_DonNavigationManagerForActor");
static_assert(sizeof(DonNavigationHelper_DonNavigationManagerForActor) == 0x000010, "Wrong size on DonNavigationHelper_DonNavigationManagerForActor");
static_assert(offsetof(DonNavigationHelper_DonNavigationManagerForActor, Actor) == 0x000000, "Member 'DonNavigationHelper_DonNavigationManagerForActor::Actor' has a wrong offset!");
static_assert(offsetof(DonNavigationHelper_DonNavigationManagerForActor, ReturnValue) == 0x000008, "Member 'DonNavigationHelper_DonNavigationManagerForActor::ReturnValue' has a wrong offset!");

// Function DonAINavigation.DonNavigationManager.AbortPathfindingTask
// 0x0008 (0x0008 - 0x0000)
struct DonNavigationManager_AbortPathfindingTask final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DonNavigationManager_AbortPathfindingTask) == 0x000008, "Wrong alignment on DonNavigationManager_AbortPathfindingTask");
static_assert(sizeof(DonNavigationManager_AbortPathfindingTask) == 0x000008, "Wrong size on DonNavigationManager_AbortPathfindingTask");
static_assert(offsetof(DonNavigationManager_AbortPathfindingTask, Actor) == 0x000000, "Member 'DonNavigationManager_AbortPathfindingTask::Actor' has a wrong offset!");

// Function DonAINavigation.DonNavigationManager.CanNavigate
// 0x0010 (0x0010 - 0x0000)
struct DonNavigationManager_CanNavigate final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DonNavigationManager_CanNavigate) == 0x000004, "Wrong alignment on DonNavigationManager_CanNavigate");
static_assert(sizeof(DonNavigationManager_CanNavigate) == 0x000010, "Wrong size on DonNavigationManager_CanNavigate");
static_assert(offsetof(DonNavigationManager_CanNavigate, Location) == 0x000000, "Member 'DonNavigationManager_CanNavigate::Location' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_CanNavigate, ReturnValue) == 0x00000C, "Member 'DonNavigationManager_CanNavigate::ReturnValue' has a wrong offset!");

// Function DonAINavigation.DonNavigationManager.ClampLocationToNavigableWorld
// 0x0018 (0x0018 - 0x0000)
struct DonNavigationManager_ClampLocationToNavigableWorld final
{
public:
	struct FVector                                DesiredLocation;                                   // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DonNavigationManager_ClampLocationToNavigableWorld) == 0x000004, "Wrong alignment on DonNavigationManager_ClampLocationToNavigableWorld");
static_assert(sizeof(DonNavigationManager_ClampLocationToNavigableWorld) == 0x000018, "Wrong size on DonNavigationManager_ClampLocationToNavigableWorld");
static_assert(offsetof(DonNavigationManager_ClampLocationToNavigableWorld, DesiredLocation) == 0x000000, "Member 'DonNavigationManager_ClampLocationToNavigableWorld::DesiredLocation' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_ClampLocationToNavigableWorld, ReturnValue) == 0x00000C, "Member 'DonNavigationManager_ClampLocationToNavigableWorld::ReturnValue' has a wrong offset!");

// Function DonAINavigation.DonNavigationManager.Debug_DrawAllVolumes
// 0x0004 (0x0004 - 0x0000)
struct DonNavigationManager_Debug_DrawAllVolumes final
{
public:
	float                                         LineThickness;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DonNavigationManager_Debug_DrawAllVolumes) == 0x000004, "Wrong alignment on DonNavigationManager_Debug_DrawAllVolumes");
static_assert(sizeof(DonNavigationManager_Debug_DrawAllVolumes) == 0x000004, "Wrong size on DonNavigationManager_Debug_DrawAllVolumes");
static_assert(offsetof(DonNavigationManager_Debug_DrawAllVolumes, LineThickness) == 0x000000, "Member 'DonNavigationManager_Debug_DrawAllVolumes::LineThickness' has a wrong offset!");

// Function DonAINavigation.DonNavigationManager.Debug_DrawVolumesAroundPoint
// 0x0020 (0x0020 - 0x0000)
struct DonNavigationManager_Debug_DrawVolumesAroundPoint final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CubeSize;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawPersistentLines;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineThickness;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoInitializeVolumes;                            // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DonNavigationManager_Debug_DrawVolumesAroundPoint) == 0x000004, "Wrong alignment on DonNavigationManager_Debug_DrawVolumesAroundPoint");
static_assert(sizeof(DonNavigationManager_Debug_DrawVolumesAroundPoint) == 0x000020, "Wrong size on DonNavigationManager_Debug_DrawVolumesAroundPoint");
static_assert(offsetof(DonNavigationManager_Debug_DrawVolumesAroundPoint, Location) == 0x000000, "Member 'DonNavigationManager_Debug_DrawVolumesAroundPoint::Location' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_Debug_DrawVolumesAroundPoint, CubeSize) == 0x00000C, "Member 'DonNavigationManager_Debug_DrawVolumesAroundPoint::CubeSize' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_Debug_DrawVolumesAroundPoint, DrawPersistentLines) == 0x000010, "Member 'DonNavigationManager_Debug_DrawVolumesAroundPoint::DrawPersistentLines' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_Debug_DrawVolumesAroundPoint, Duration) == 0x000014, "Member 'DonNavigationManager_Debug_DrawVolumesAroundPoint::Duration' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_Debug_DrawVolumesAroundPoint, LineThickness) == 0x000018, "Member 'DonNavigationManager_Debug_DrawVolumesAroundPoint::LineThickness' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_Debug_DrawVolumesAroundPoint, bAutoInitializeVolumes) == 0x00001C, "Member 'DonNavigationManager_Debug_DrawVolumesAroundPoint::bAutoInitializeVolumes' has a wrong offset!");

// Function DonAINavigation.DonNavigationManager.Debug_DrawVoxelCollisionProfile
// 0x0010 (0x0010 - 0x0000)
struct DonNavigationManager_Debug_DrawVoxelCollisionProfile final
{
public:
	class UPrimitiveComponent*                    MeshOrPrimitive;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawPersistent;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DonNavigationManager_Debug_DrawVoxelCollisionProfile) == 0x000008, "Wrong alignment on DonNavigationManager_Debug_DrawVoxelCollisionProfile");
static_assert(sizeof(DonNavigationManager_Debug_DrawVoxelCollisionProfile) == 0x000010, "Wrong size on DonNavigationManager_Debug_DrawVoxelCollisionProfile");
static_assert(offsetof(DonNavigationManager_Debug_DrawVoxelCollisionProfile, MeshOrPrimitive) == 0x000000, "Member 'DonNavigationManager_Debug_DrawVoxelCollisionProfile::MeshOrPrimitive' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_Debug_DrawVoxelCollisionProfile, bDrawPersistent) == 0x000008, "Member 'DonNavigationManager_Debug_DrawVoxelCollisionProfile::bDrawPersistent' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_Debug_DrawVoxelCollisionProfile, Duration) == 0x00000C, "Member 'DonNavigationManager_Debug_DrawVoxelCollisionProfile::Duration' has a wrong offset!");

// Function DonAINavigation.DonNavigationManager.FindPathSolution_StressTesting
// 0x00C0 (0x00C0 - 0x0000)
struct DonNavigationManager_FindPathSolution_StressTesting final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Destination;                                       // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        PathSolutionRaw;                                   // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        PathSolutionOptimized;                             // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDoNNavigationQueryParams              QueryParams;                                       // 0x0038(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDoNNavigationDebugParams              DebugParams;                                       // 0x00B0(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00BC(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DonNavigationManager_FindPathSolution_StressTesting) == 0x000008, "Wrong alignment on DonNavigationManager_FindPathSolution_StressTesting");
static_assert(sizeof(DonNavigationManager_FindPathSolution_StressTesting) == 0x0000C0, "Wrong size on DonNavigationManager_FindPathSolution_StressTesting");
static_assert(offsetof(DonNavigationManager_FindPathSolution_StressTesting, Actor) == 0x000000, "Member 'DonNavigationManager_FindPathSolution_StressTesting::Actor' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_FindPathSolution_StressTesting, Destination) == 0x000008, "Member 'DonNavigationManager_FindPathSolution_StressTesting::Destination' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_FindPathSolution_StressTesting, PathSolutionRaw) == 0x000018, "Member 'DonNavigationManager_FindPathSolution_StressTesting::PathSolutionRaw' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_FindPathSolution_StressTesting, PathSolutionOptimized) == 0x000028, "Member 'DonNavigationManager_FindPathSolution_StressTesting::PathSolutionOptimized' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_FindPathSolution_StressTesting, QueryParams) == 0x000038, "Member 'DonNavigationManager_FindPathSolution_StressTesting::QueryParams' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_FindPathSolution_StressTesting, DebugParams) == 0x0000B0, "Member 'DonNavigationManager_FindPathSolution_StressTesting::DebugParams' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_FindPathSolution_StressTesting, ReturnValue) == 0x0000BC, "Member 'DonNavigationManager_FindPathSolution_StressTesting::ReturnValue' has a wrong offset!");

// Function DonAINavigation.DonNavigationManager.FindRandomPointAroundOriginInNavWorld
// 0x0038 (0x0038 - 0x0000)
struct DonNavigationManager_FindRandomPointAroundOriginInNavWorld final
{
public:
	class AActor*                                 NavigationActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFoundValidResult;                                 // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckForSupportedSurfaces;                        // 0x0019(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDesiredAltitude;                                // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxZAngularDispacement;                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAttempts;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DonNavigationManager_FindRandomPointAroundOriginInNavWorld) == 0x000008, "Wrong alignment on DonNavigationManager_FindRandomPointAroundOriginInNavWorld");
static_assert(sizeof(DonNavigationManager_FindRandomPointAroundOriginInNavWorld) == 0x000038, "Wrong size on DonNavigationManager_FindRandomPointAroundOriginInNavWorld");
static_assert(offsetof(DonNavigationManager_FindRandomPointAroundOriginInNavWorld, NavigationActor) == 0x000000, "Member 'DonNavigationManager_FindRandomPointAroundOriginInNavWorld::NavigationActor' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_FindRandomPointAroundOriginInNavWorld, Origin) == 0x000008, "Member 'DonNavigationManager_FindRandomPointAroundOriginInNavWorld::Origin' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_FindRandomPointAroundOriginInNavWorld, Distance) == 0x000014, "Member 'DonNavigationManager_FindRandomPointAroundOriginInNavWorld::Distance' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_FindRandomPointAroundOriginInNavWorld, bFoundValidResult) == 0x000018, "Member 'DonNavigationManager_FindRandomPointAroundOriginInNavWorld::bFoundValidResult' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_FindRandomPointAroundOriginInNavWorld, bCheckForSupportedSurfaces) == 0x000019, "Member 'DonNavigationManager_FindRandomPointAroundOriginInNavWorld::bCheckForSupportedSurfaces' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_FindRandomPointAroundOriginInNavWorld, MaxDesiredAltitude) == 0x00001C, "Member 'DonNavigationManager_FindRandomPointAroundOriginInNavWorld::MaxDesiredAltitude' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_FindRandomPointAroundOriginInNavWorld, MaxZAngularDispacement) == 0x000020, "Member 'DonNavigationManager_FindRandomPointAroundOriginInNavWorld::MaxZAngularDispacement' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_FindRandomPointAroundOriginInNavWorld, MaxAttempts) == 0x000024, "Member 'DonNavigationManager_FindRandomPointAroundOriginInNavWorld::MaxAttempts' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_FindRandomPointAroundOriginInNavWorld, ReturnValue) == 0x000028, "Member 'DonNavigationManager_FindRandomPointAroundOriginInNavWorld::ReturnValue' has a wrong offset!");

// Function DonAINavigation.DonNavigationManager.FindRandomPointFromActorInNavWorld
// 0x0028 (0x0028 - 0x0000)
struct DonNavigationManager_FindRandomPointFromActorInNavWorld final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFoundValidResult;                                 // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckForSupportedSurfaces;                        // 0x000D(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDesiredAltitude;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxZAngularDispacement;                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAttempts;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DonNavigationManager_FindRandomPointFromActorInNavWorld) == 0x000008, "Wrong alignment on DonNavigationManager_FindRandomPointFromActorInNavWorld");
static_assert(sizeof(DonNavigationManager_FindRandomPointFromActorInNavWorld) == 0x000028, "Wrong size on DonNavigationManager_FindRandomPointFromActorInNavWorld");
static_assert(offsetof(DonNavigationManager_FindRandomPointFromActorInNavWorld, Actor) == 0x000000, "Member 'DonNavigationManager_FindRandomPointFromActorInNavWorld::Actor' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_FindRandomPointFromActorInNavWorld, Distance) == 0x000008, "Member 'DonNavigationManager_FindRandomPointFromActorInNavWorld::Distance' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_FindRandomPointFromActorInNavWorld, bFoundValidResult) == 0x00000C, "Member 'DonNavigationManager_FindRandomPointFromActorInNavWorld::bFoundValidResult' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_FindRandomPointFromActorInNavWorld, bCheckForSupportedSurfaces) == 0x00000D, "Member 'DonNavigationManager_FindRandomPointFromActorInNavWorld::bCheckForSupportedSurfaces' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_FindRandomPointFromActorInNavWorld, MaxDesiredAltitude) == 0x000010, "Member 'DonNavigationManager_FindRandomPointFromActorInNavWorld::MaxDesiredAltitude' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_FindRandomPointFromActorInNavWorld, MaxZAngularDispacement) == 0x000014, "Member 'DonNavigationManager_FindRandomPointFromActorInNavWorld::MaxZAngularDispacement' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_FindRandomPointFromActorInNavWorld, MaxAttempts) == 0x000018, "Member 'DonNavigationManager_FindRandomPointFromActorInNavWorld::MaxAttempts' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_FindRandomPointFromActorInNavWorld, ReturnValue) == 0x00001C, "Member 'DonNavigationManager_FindRandomPointFromActorInNavWorld::ReturnValue' has a wrong offset!");

// Function DonAINavigation.DonNavigationManager.HasTask
// 0x0010 (0x0010 - 0x0000)
struct DonNavigationManager_HasTask final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DonNavigationManager_HasTask) == 0x000008, "Wrong alignment on DonNavigationManager_HasTask");
static_assert(sizeof(DonNavigationManager_HasTask) == 0x000010, "Wrong size on DonNavigationManager_HasTask");
static_assert(offsetof(DonNavigationManager_HasTask, Actor) == 0x000000, "Member 'DonNavigationManager_HasTask::Actor' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_HasTask, ReturnValue) == 0x000008, "Member 'DonNavigationManager_HasTask::ReturnValue' has a wrong offset!");

// Function DonAINavigation.DonNavigationManager.IsDirectPathLineSweep
// 0x00B8 (0x00B8 - 0x0000)
struct DonNavigationManager_IsDirectPathLineSweep final
{
public:
	class UPrimitiveComponent*                    CollisionComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHit;                                            // 0x0020(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bFindInitialOverlaps;                              // 0x00A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CollisionShapeInflation;                           // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DonNavigationManager_IsDirectPathLineSweep) == 0x000008, "Wrong alignment on DonNavigationManager_IsDirectPathLineSweep");
static_assert(sizeof(DonNavigationManager_IsDirectPathLineSweep) == 0x0000B8, "Wrong size on DonNavigationManager_IsDirectPathLineSweep");
static_assert(offsetof(DonNavigationManager_IsDirectPathLineSweep, CollisionComponent) == 0x000000, "Member 'DonNavigationManager_IsDirectPathLineSweep::CollisionComponent' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsDirectPathLineSweep, Start) == 0x000008, "Member 'DonNavigationManager_IsDirectPathLineSweep::Start' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsDirectPathLineSweep, End) == 0x000014, "Member 'DonNavigationManager_IsDirectPathLineSweep::End' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsDirectPathLineSweep, OutHit) == 0x000020, "Member 'DonNavigationManager_IsDirectPathLineSweep::OutHit' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsDirectPathLineSweep, bFindInitialOverlaps) == 0x0000A8, "Member 'DonNavigationManager_IsDirectPathLineSweep::bFindInitialOverlaps' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsDirectPathLineSweep, CollisionShapeInflation) == 0x0000AC, "Member 'DonNavigationManager_IsDirectPathLineSweep::CollisionShapeInflation' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsDirectPathLineSweep, ReturnValue) == 0x0000B0, "Member 'DonNavigationManager_IsDirectPathLineSweep::ReturnValue' has a wrong offset!");

// Function DonAINavigation.DonNavigationManager.IsDirectPathLineTrace
// 0x00B8 (0x00B8 - 0x0000)
struct DonNavigationManager_IsDirectPathLineTrace final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHit;                                            // 0x0018(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x00A0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bFindInitialOverlaps;                              // 0x00B0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B1(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DonNavigationManager_IsDirectPathLineTrace) == 0x000008, "Wrong alignment on DonNavigationManager_IsDirectPathLineTrace");
static_assert(sizeof(DonNavigationManager_IsDirectPathLineTrace) == 0x0000B8, "Wrong size on DonNavigationManager_IsDirectPathLineTrace");
static_assert(offsetof(DonNavigationManager_IsDirectPathLineTrace, Start) == 0x000000, "Member 'DonNavigationManager_IsDirectPathLineTrace::Start' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsDirectPathLineTrace, End) == 0x00000C, "Member 'DonNavigationManager_IsDirectPathLineTrace::End' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsDirectPathLineTrace, OutHit) == 0x000018, "Member 'DonNavigationManager_IsDirectPathLineTrace::OutHit' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsDirectPathLineTrace, ActorsToIgnore) == 0x0000A0, "Member 'DonNavigationManager_IsDirectPathLineTrace::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsDirectPathLineTrace, bFindInitialOverlaps) == 0x0000B0, "Member 'DonNavigationManager_IsDirectPathLineTrace::bFindInitialOverlaps' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsDirectPathLineTrace, ReturnValue) == 0x0000B1, "Member 'DonNavigationManager_IsDirectPathLineTrace::ReturnValue' has a wrong offset!");

// Function DonAINavigation.DonNavigationManager.IsDirectPathSweep
// 0x00B8 (0x00B8 - 0x0000)
struct DonNavigationManager_IsDirectPathSweep final
{
public:
	class UPrimitiveComponent*                    CollisionComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHit;                                            // 0x0020(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bFindInitialOverlaps;                              // 0x00A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CollisionShapeInflation;                           // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DonNavigationManager_IsDirectPathSweep) == 0x000008, "Wrong alignment on DonNavigationManager_IsDirectPathSweep");
static_assert(sizeof(DonNavigationManager_IsDirectPathSweep) == 0x0000B8, "Wrong size on DonNavigationManager_IsDirectPathSweep");
static_assert(offsetof(DonNavigationManager_IsDirectPathSweep, CollisionComponent) == 0x000000, "Member 'DonNavigationManager_IsDirectPathSweep::CollisionComponent' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsDirectPathSweep, Start) == 0x000008, "Member 'DonNavigationManager_IsDirectPathSweep::Start' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsDirectPathSweep, End) == 0x000014, "Member 'DonNavigationManager_IsDirectPathSweep::End' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsDirectPathSweep, OutHit) == 0x000020, "Member 'DonNavigationManager_IsDirectPathSweep::OutHit' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsDirectPathSweep, bFindInitialOverlaps) == 0x0000A8, "Member 'DonNavigationManager_IsDirectPathSweep::bFindInitialOverlaps' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsDirectPathSweep, CollisionShapeInflation) == 0x0000AC, "Member 'DonNavigationManager_IsDirectPathSweep::CollisionShapeInflation' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsDirectPathSweep, ReturnValue) == 0x0000B0, "Member 'DonNavigationManager_IsDirectPathSweep::ReturnValue' has a wrong offset!");

// Function DonAINavigation.DonNavigationManager.IsLocationBeneathLandscape
// 0x0014 (0x0014 - 0x0000)
struct DonNavigationManager_IsLocationBeneathLandscape final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineTraceHeight;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DonNavigationManager_IsLocationBeneathLandscape) == 0x000004, "Wrong alignment on DonNavigationManager_IsLocationBeneathLandscape");
static_assert(sizeof(DonNavigationManager_IsLocationBeneathLandscape) == 0x000014, "Wrong size on DonNavigationManager_IsLocationBeneathLandscape");
static_assert(offsetof(DonNavigationManager_IsLocationBeneathLandscape, Location) == 0x000000, "Member 'DonNavigationManager_IsLocationBeneathLandscape::Location' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsLocationBeneathLandscape, LineTraceHeight) == 0x00000C, "Member 'DonNavigationManager_IsLocationBeneathLandscape::LineTraceHeight' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsLocationBeneathLandscape, ReturnValue) == 0x000010, "Member 'DonNavigationManager_IsLocationBeneathLandscape::ReturnValue' has a wrong offset!");

// Function DonAINavigation.DonNavigationManager.IsLocationNavigable
// 0x0010 (0x0010 - 0x0000)
struct DonNavigationManager_IsLocationNavigable final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckForSupportedSurfaces;                        // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DonNavigationManager_IsLocationNavigable) == 0x000004, "Wrong alignment on DonNavigationManager_IsLocationNavigable");
static_assert(sizeof(DonNavigationManager_IsLocationNavigable) == 0x000010, "Wrong size on DonNavigationManager_IsLocationNavigable");
static_assert(offsetof(DonNavigationManager_IsLocationNavigable, Location) == 0x000000, "Member 'DonNavigationManager_IsLocationNavigable::Location' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsLocationNavigable, bCheckForSupportedSurfaces) == 0x00000C, "Member 'DonNavigationManager_IsLocationNavigable::bCheckForSupportedSurfaces' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsLocationNavigable, ReturnValue) == 0x00000D, "Member 'DonNavigationManager_IsLocationNavigable::ReturnValue' has a wrong offset!");

// Function DonAINavigation.DonNavigationManager.IsMeshBoundsWithinNavigableWorld
// 0x0010 (0x0010 - 0x0000)
struct DonNavigationManager_IsMeshBoundsWithinNavigableWorld final
{
public:
	class UPrimitiveComponent*                    Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoundsScaleFactor;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DonNavigationManager_IsMeshBoundsWithinNavigableWorld) == 0x000008, "Wrong alignment on DonNavigationManager_IsMeshBoundsWithinNavigableWorld");
static_assert(sizeof(DonNavigationManager_IsMeshBoundsWithinNavigableWorld) == 0x000010, "Wrong size on DonNavigationManager_IsMeshBoundsWithinNavigableWorld");
static_assert(offsetof(DonNavigationManager_IsMeshBoundsWithinNavigableWorld, Mesh) == 0x000000, "Member 'DonNavigationManager_IsMeshBoundsWithinNavigableWorld::Mesh' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsMeshBoundsWithinNavigableWorld, BoundsScaleFactor) == 0x000008, "Member 'DonNavigationManager_IsMeshBoundsWithinNavigableWorld::BoundsScaleFactor' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsMeshBoundsWithinNavigableWorld, ReturnValue) == 0x00000C, "Member 'DonNavigationManager_IsMeshBoundsWithinNavigableWorld::ReturnValue' has a wrong offset!");

// Function DonAINavigation.DonNavigationManager.ScheduleDynamicCollisionUpdate
// 0x0030 (0x0030 - 0x0000)
struct DonNavigationManager_ScheduleDynamicCollisionUpdate final
{
public:
	class UPrimitiveComponent*                    Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bTaskSuccessful)>         ResultHandler;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   CustomCacheIdentifier;                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplaceExistingTask;                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableCacheUsage;                                // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReloadCollisionCache;                             // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCheapBoundsCollision;                          // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoundsScaleFactor;                                 // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceSynchronousExecution;                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebug;                                        // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DonNavigationManager_ScheduleDynamicCollisionUpdate) == 0x000008, "Wrong alignment on DonNavigationManager_ScheduleDynamicCollisionUpdate");
static_assert(sizeof(DonNavigationManager_ScheduleDynamicCollisionUpdate) == 0x000030, "Wrong size on DonNavigationManager_ScheduleDynamicCollisionUpdate");
static_assert(offsetof(DonNavigationManager_ScheduleDynamicCollisionUpdate, Mesh) == 0x000000, "Member 'DonNavigationManager_ScheduleDynamicCollisionUpdate::Mesh' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_ScheduleDynamicCollisionUpdate, ResultHandler) == 0x000008, "Member 'DonNavigationManager_ScheduleDynamicCollisionUpdate::ResultHandler' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_ScheduleDynamicCollisionUpdate, CustomCacheIdentifier) == 0x000018, "Member 'DonNavigationManager_ScheduleDynamicCollisionUpdate::CustomCacheIdentifier' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_ScheduleDynamicCollisionUpdate, bReplaceExistingTask) == 0x000020, "Member 'DonNavigationManager_ScheduleDynamicCollisionUpdate::bReplaceExistingTask' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_ScheduleDynamicCollisionUpdate, bDisableCacheUsage) == 0x000021, "Member 'DonNavigationManager_ScheduleDynamicCollisionUpdate::bDisableCacheUsage' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_ScheduleDynamicCollisionUpdate, bReloadCollisionCache) == 0x000022, "Member 'DonNavigationManager_ScheduleDynamicCollisionUpdate::bReloadCollisionCache' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_ScheduleDynamicCollisionUpdate, bUseCheapBoundsCollision) == 0x000023, "Member 'DonNavigationManager_ScheduleDynamicCollisionUpdate::bUseCheapBoundsCollision' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_ScheduleDynamicCollisionUpdate, BoundsScaleFactor) == 0x000024, "Member 'DonNavigationManager_ScheduleDynamicCollisionUpdate::BoundsScaleFactor' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_ScheduleDynamicCollisionUpdate, bForceSynchronousExecution) == 0x000028, "Member 'DonNavigationManager_ScheduleDynamicCollisionUpdate::bForceSynchronousExecution' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_ScheduleDynamicCollisionUpdate, bDrawDebug) == 0x000029, "Member 'DonNavigationManager_ScheduleDynamicCollisionUpdate::bDrawDebug' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_ScheduleDynamicCollisionUpdate, ReturnValue) == 0x00002A, "Member 'DonNavigationManager_ScheduleDynamicCollisionUpdate::ReturnValue' has a wrong offset!");

// Function DonAINavigation.DonNavigationManager.SchedulePathfindingTask
// 0x00C8 (0x00C8 - 0x0000)
struct DonNavigationManager_SchedulePathfindingTask final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Destination;                                       // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDoNNavigationQueryParams              QueryParams;                                       // 0x0020(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDoNNavigationDebugParams              DebugParams;                                       // 0x0098(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FDoNNavigationQueryData& Data)> ResultHandlerDelegate;                             // 0x00A4(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(struct FDonNavigationDynamicCollisionPayload& Data)> DynamicCollisionListener;                          // 0x00B4(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C4(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DonNavigationManager_SchedulePathfindingTask) == 0x000008, "Wrong alignment on DonNavigationManager_SchedulePathfindingTask");
static_assert(sizeof(DonNavigationManager_SchedulePathfindingTask) == 0x0000C8, "Wrong size on DonNavigationManager_SchedulePathfindingTask");
static_assert(offsetof(DonNavigationManager_SchedulePathfindingTask, Actor) == 0x000000, "Member 'DonNavigationManager_SchedulePathfindingTask::Actor' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_SchedulePathfindingTask, Origin) == 0x000008, "Member 'DonNavigationManager_SchedulePathfindingTask::Origin' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_SchedulePathfindingTask, Destination) == 0x000014, "Member 'DonNavigationManager_SchedulePathfindingTask::Destination' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_SchedulePathfindingTask, QueryParams) == 0x000020, "Member 'DonNavigationManager_SchedulePathfindingTask::QueryParams' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_SchedulePathfindingTask, DebugParams) == 0x000098, "Member 'DonNavigationManager_SchedulePathfindingTask::DebugParams' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_SchedulePathfindingTask, ResultHandlerDelegate) == 0x0000A4, "Member 'DonNavigationManager_SchedulePathfindingTask::ResultHandlerDelegate' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_SchedulePathfindingTask, DynamicCollisionListener) == 0x0000B4, "Member 'DonNavigationManager_SchedulePathfindingTask::DynamicCollisionListener' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_SchedulePathfindingTask, ReturnValue) == 0x0000C4, "Member 'DonNavigationManager_SchedulePathfindingTask::ReturnValue' has a wrong offset!");

// Function DonAINavigation.DonNavigationManager.StopListeningToDynamicCollisionsForPath
// 0x02F0 (0x02F0 - 0x0000)
struct DonNavigationManager_StopListeningToDynamicCollisionsForPath final
{
public:
	TDelegate<void(struct FDonNavigationDynamicCollisionPayload& Data)> ListenerToClear;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FDoNNavigationQueryData                QueryData;                                         // 0x0010(0x02E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DonNavigationManager_StopListeningToDynamicCollisionsForPath) == 0x000008, "Wrong alignment on DonNavigationManager_StopListeningToDynamicCollisionsForPath");
static_assert(sizeof(DonNavigationManager_StopListeningToDynamicCollisionsForPath) == 0x0002F0, "Wrong size on DonNavigationManager_StopListeningToDynamicCollisionsForPath");
static_assert(offsetof(DonNavigationManager_StopListeningToDynamicCollisionsForPath, ListenerToClear) == 0x000000, "Member 'DonNavigationManager_StopListeningToDynamicCollisionsForPath::ListenerToClear' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_StopListeningToDynamicCollisionsForPath, QueryData) == 0x000010, "Member 'DonNavigationManager_StopListeningToDynamicCollisionsForPath::QueryData' has a wrong offset!");

// Function DonAINavigation.DonNavigationManager.StopListeningToDynamicCollisionsForPathIndex
// 0x02F8 (0x02F8 - 0x0000)
struct DonNavigationManager_StopListeningToDynamicCollisionsForPathIndex final
{
public:
	TDelegate<void(struct FDonNavigationDynamicCollisionPayload& Data)> ListenerToClear;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FDoNNavigationQueryData                QueryData;                                         // 0x0010(0x02E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         VolumeIndex;                                       // 0x02F0(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DonNavigationManager_StopListeningToDynamicCollisionsForPathIndex) == 0x000008, "Wrong alignment on DonNavigationManager_StopListeningToDynamicCollisionsForPathIndex");
static_assert(sizeof(DonNavigationManager_StopListeningToDynamicCollisionsForPathIndex) == 0x0002F8, "Wrong size on DonNavigationManager_StopListeningToDynamicCollisionsForPathIndex");
static_assert(offsetof(DonNavigationManager_StopListeningToDynamicCollisionsForPathIndex, ListenerToClear) == 0x000000, "Member 'DonNavigationManager_StopListeningToDynamicCollisionsForPathIndex::ListenerToClear' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_StopListeningToDynamicCollisionsForPathIndex, QueryData) == 0x000010, "Member 'DonNavigationManager_StopListeningToDynamicCollisionsForPathIndex::QueryData' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_StopListeningToDynamicCollisionsForPathIndex, VolumeIndex) == 0x0002F0, "Member 'DonNavigationManager_StopListeningToDynamicCollisionsForPathIndex::VolumeIndex' has a wrong offset!");

// Function DonAINavigation.DonNavigationManager.VisualizeDynamicCollisionListeners
// 0x02F0 (0x02F0 - 0x0000)
struct DonNavigationManager_VisualizeDynamicCollisionListeners final
{
public:
	TDelegate<void(struct FDonNavigationDynamicCollisionPayload& Data)> Listener;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FDoNNavigationQueryData                QueryData;                                         // 0x0010(0x02E0)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DonNavigationManager_VisualizeDynamicCollisionListeners) == 0x000008, "Wrong alignment on DonNavigationManager_VisualizeDynamicCollisionListeners");
static_assert(sizeof(DonNavigationManager_VisualizeDynamicCollisionListeners) == 0x0002F0, "Wrong size on DonNavigationManager_VisualizeDynamicCollisionListeners");
static_assert(offsetof(DonNavigationManager_VisualizeDynamicCollisionListeners, Listener) == 0x000000, "Member 'DonNavigationManager_VisualizeDynamicCollisionListeners::Listener' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_VisualizeDynamicCollisionListeners, QueryData) == 0x000010, "Member 'DonNavigationManager_VisualizeDynamicCollisionListeners::QueryData' has a wrong offset!");

// Function DonAINavigation.DonNavigationManager.VisualizeNAVResult
// 0x0040 (0x0040 - 0x0000)
struct DonNavigationManager_VisualizeNAVResult final
{
public:
	TArray<struct FVector>                        PathSolution;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Source;                                            // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Destination;                                       // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reset;                                             // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDoNNavigationDebugParams              DebugParams;                                       // 0x002C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FColor                                 LineColor;                                         // 0x0038(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DonNavigationManager_VisualizeNAVResult) == 0x000008, "Wrong alignment on DonNavigationManager_VisualizeNAVResult");
static_assert(sizeof(DonNavigationManager_VisualizeNAVResult) == 0x000040, "Wrong size on DonNavigationManager_VisualizeNAVResult");
static_assert(offsetof(DonNavigationManager_VisualizeNAVResult, PathSolution) == 0x000000, "Member 'DonNavigationManager_VisualizeNAVResult::PathSolution' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_VisualizeNAVResult, Source) == 0x000010, "Member 'DonNavigationManager_VisualizeNAVResult::Source' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_VisualizeNAVResult, Destination) == 0x00001C, "Member 'DonNavigationManager_VisualizeNAVResult::Destination' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_VisualizeNAVResult, Reset) == 0x000028, "Member 'DonNavigationManager_VisualizeNAVResult::Reset' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_VisualizeNAVResult, DebugParams) == 0x00002C, "Member 'DonNavigationManager_VisualizeNAVResult::DebugParams' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_VisualizeNAVResult, LineColor) == 0x000038, "Member 'DonNavigationManager_VisualizeNAVResult::LineColor' has a wrong offset!");

// Function DonAINavigation.DonNavigationManager.IsLocationWithinNavigableWorld
// 0x0010 (0x0010 - 0x0000)
struct DonNavigationManager_IsLocationWithinNavigableWorld final
{
public:
	struct FVector                                DesiredLocation;                                   // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DonNavigationManager_IsLocationWithinNavigableWorld) == 0x000004, "Wrong alignment on DonNavigationManager_IsLocationWithinNavigableWorld");
static_assert(sizeof(DonNavigationManager_IsLocationWithinNavigableWorld) == 0x000010, "Wrong size on DonNavigationManager_IsLocationWithinNavigableWorld");
static_assert(offsetof(DonNavigationManager_IsLocationWithinNavigableWorld, DesiredLocation) == 0x000000, "Member 'DonNavigationManager_IsLocationWithinNavigableWorld::DesiredLocation' has a wrong offset!");
static_assert(offsetof(DonNavigationManager_IsLocationWithinNavigableWorld, ReturnValue) == 0x00000C, "Member 'DonNavigationManager_IsLocationWithinNavigableWorld::ReturnValue' has a wrong offset!");

// Function DonAINavigation.DonNavigator.AddMovementInputCustom
// 0x0010 (0x0010 - 0x0000)
struct DonNavigator_AddMovementInputCustom final
{
public:
	struct FVector                                WorldDirection;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleValue;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DonNavigator_AddMovementInputCustom) == 0x000004, "Wrong alignment on DonNavigator_AddMovementInputCustom");
static_assert(sizeof(DonNavigator_AddMovementInputCustom) == 0x000010, "Wrong size on DonNavigator_AddMovementInputCustom");
static_assert(offsetof(DonNavigator_AddMovementInputCustom, WorldDirection) == 0x000000, "Member 'DonNavigator_AddMovementInputCustom::WorldDirection' has a wrong offset!");
static_assert(offsetof(DonNavigator_AddMovementInputCustom, ScaleValue) == 0x00000C, "Member 'DonNavigator_AddMovementInputCustom::ScaleValue' has a wrong offset!");

// Function DonAINavigation.DonNavigator.OnLocomotionEnd
// 0x0001 (0x0001 - 0x0000)
struct DonNavigator_OnLocomotionEnd final
{
public:
	bool                                          bLocomotionSuccess;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DonNavigator_OnLocomotionEnd) == 0x000001, "Wrong alignment on DonNavigator_OnLocomotionEnd");
static_assert(sizeof(DonNavigator_OnLocomotionEnd) == 0x000001, "Wrong size on DonNavigator_OnLocomotionEnd");
static_assert(offsetof(DonNavigator_OnLocomotionEnd, bLocomotionSuccess) == 0x000000, "Member 'DonNavigator_OnLocomotionEnd::bLocomotionSuccess' has a wrong offset!");

// Function DonAINavigation.DonNavigator.OnNextSegment
// 0x000C (0x000C - 0x0000)
struct DonNavigator_OnNextSegment final
{
public:
	struct FVector                                NextPoint;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DonNavigator_OnNextSegment) == 0x000004, "Wrong alignment on DonNavigator_OnNextSegment");
static_assert(sizeof(DonNavigator_OnNextSegment) == 0x00000C, "Wrong size on DonNavigator_OnNextSegment");
static_assert(offsetof(DonNavigator_OnNextSegment, NextPoint) == 0x000000, "Member 'DonNavigator_OnNextSegment::NextPoint' has a wrong offset!");

}

