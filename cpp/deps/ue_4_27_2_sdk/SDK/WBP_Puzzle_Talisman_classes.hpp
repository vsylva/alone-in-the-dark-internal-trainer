#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Puzzle_Talisman

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "WBP_Puzzle_Basic_classes.hpp"
#include "ObsidianFoxSettings_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Puzzle_Talisman.WBP_Puzzle_Talisman_C
// 0x0098 (0x0458 - 0x03C0)
class UWBP_Puzzle_Talisman_C final : public UWBP_Puzzle_Basic_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_WBP_Puzzle_Talisman_C;              // 0x03C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 ImageButtons;                                      // 0x03C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Inner;                                             // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 InnerImage;                                        // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Middle;                                            // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 MiddleImage;                                       // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Outer_0;                                           // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 OuterImage;                                        // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OverlayInner;                                      // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OverlayMiddle;                                     // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OverlayOuter;                                      // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FLinearColor                           ActiveColor;                                       // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NormalColor;                                       // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ActiveRing;                                        // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UImage*>                         RingImage;                                         // 0x0440(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          bHideTalismanNumbers;                              // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDrawInputButtons;                                 // 0x0451(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void DrawInputHelpButtons();
	void Set_UI_Visibility_Based_On_Lock_Status();
	void SetColorOnRingImage(int32 Dimension_1, const struct FLinearColor& InColorAndOpacity);
	void PreConstruct(bool IsDesignTime);
	void Construct();
	void OnNewTalismanCombination_Event_0(int32 NewTalismanCombination);
	void OnInitialized();
	void Destruct();
	void OnNewTalismanActiveRing_Event(int32 NewActiveRing);
	void HideTalismanNumbers();
	void ExecuteUbergraph_WBP_Puzzle_Talisman(int32 EntryPoint);
	void SetTalismanRingValue();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Puzzle_Talisman_C">();
	}
	static class UWBP_Puzzle_Talisman_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Puzzle_Talisman_C>();
	}
};
static_assert(alignof(UWBP_Puzzle_Talisman_C) == 0x000008, "Wrong alignment on UWBP_Puzzle_Talisman_C");
static_assert(sizeof(UWBP_Puzzle_Talisman_C) == 0x000458, "Wrong size on UWBP_Puzzle_Talisman_C");
static_assert(offsetof(UWBP_Puzzle_Talisman_C, UberGraphFrame_WBP_Puzzle_Talisman_C) == 0x0003C0, "Member 'UWBP_Puzzle_Talisman_C::UberGraphFrame_WBP_Puzzle_Talisman_C' has a wrong offset!");
static_assert(offsetof(UWBP_Puzzle_Talisman_C, ImageButtons) == 0x0003C8, "Member 'UWBP_Puzzle_Talisman_C::ImageButtons' has a wrong offset!");
static_assert(offsetof(UWBP_Puzzle_Talisman_C, Inner) == 0x0003D0, "Member 'UWBP_Puzzle_Talisman_C::Inner' has a wrong offset!");
static_assert(offsetof(UWBP_Puzzle_Talisman_C, InnerImage) == 0x0003D8, "Member 'UWBP_Puzzle_Talisman_C::InnerImage' has a wrong offset!");
static_assert(offsetof(UWBP_Puzzle_Talisman_C, Middle) == 0x0003E0, "Member 'UWBP_Puzzle_Talisman_C::Middle' has a wrong offset!");
static_assert(offsetof(UWBP_Puzzle_Talisman_C, MiddleImage) == 0x0003E8, "Member 'UWBP_Puzzle_Talisman_C::MiddleImage' has a wrong offset!");
static_assert(offsetof(UWBP_Puzzle_Talisman_C, Outer_0) == 0x0003F0, "Member 'UWBP_Puzzle_Talisman_C::Outer_0' has a wrong offset!");
static_assert(offsetof(UWBP_Puzzle_Talisman_C, OuterImage) == 0x0003F8, "Member 'UWBP_Puzzle_Talisman_C::OuterImage' has a wrong offset!");
static_assert(offsetof(UWBP_Puzzle_Talisman_C, OverlayInner) == 0x000400, "Member 'UWBP_Puzzle_Talisman_C::OverlayInner' has a wrong offset!");
static_assert(offsetof(UWBP_Puzzle_Talisman_C, OverlayMiddle) == 0x000408, "Member 'UWBP_Puzzle_Talisman_C::OverlayMiddle' has a wrong offset!");
static_assert(offsetof(UWBP_Puzzle_Talisman_C, OverlayOuter) == 0x000410, "Member 'UWBP_Puzzle_Talisman_C::OverlayOuter' has a wrong offset!");
static_assert(offsetof(UWBP_Puzzle_Talisman_C, ActiveColor) == 0x000418, "Member 'UWBP_Puzzle_Talisman_C::ActiveColor' has a wrong offset!");
static_assert(offsetof(UWBP_Puzzle_Talisman_C, NormalColor) == 0x000428, "Member 'UWBP_Puzzle_Talisman_C::NormalColor' has a wrong offset!");
static_assert(offsetof(UWBP_Puzzle_Talisman_C, ActiveRing) == 0x000438, "Member 'UWBP_Puzzle_Talisman_C::ActiveRing' has a wrong offset!");
static_assert(offsetof(UWBP_Puzzle_Talisman_C, RingImage) == 0x000440, "Member 'UWBP_Puzzle_Talisman_C::RingImage' has a wrong offset!");
static_assert(offsetof(UWBP_Puzzle_Talisman_C, bHideTalismanNumbers) == 0x000450, "Member 'UWBP_Puzzle_Talisman_C::bHideTalismanNumbers' has a wrong offset!");
static_assert(offsetof(UWBP_Puzzle_Talisman_C, bDrawInputButtons) == 0x000451, "Member 'UWBP_Puzzle_Talisman_C::bDrawInputButtons' has a wrong offset!");

}

