#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PiecesUtils

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "PiecesUtils_structs.hpp"


namespace SDK::Params
{

// Function PiecesUtils.AssetUtils.GetReferencersOfAsset
// 0x0098 (0x0098 - 0x0000)
struct AssetUtils_GetReferencersOfAsset final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAssetData                             AssetData;                                         // 0x0008(0x0060)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UClass*                           InRefrencersClass;                                 // 0x0068(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         InSubStringsToIgnore;                              // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReferenceDepthToLookBeforeWeGiveUp;                // 0x0080(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAssetData>                     OutRefrencers;                                     // 0x0088(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AssetUtils_GetReferencersOfAsset) == 0x000008, "Wrong alignment on AssetUtils_GetReferencersOfAsset");
static_assert(sizeof(AssetUtils_GetReferencersOfAsset) == 0x000098, "Wrong size on AssetUtils_GetReferencersOfAsset");
static_assert(offsetof(AssetUtils_GetReferencersOfAsset, WorldContextObject) == 0x000000, "Member 'AssetUtils_GetReferencersOfAsset::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AssetUtils_GetReferencersOfAsset, AssetData) == 0x000008, "Member 'AssetUtils_GetReferencersOfAsset::AssetData' has a wrong offset!");
static_assert(offsetof(AssetUtils_GetReferencersOfAsset, InRefrencersClass) == 0x000068, "Member 'AssetUtils_GetReferencersOfAsset::InRefrencersClass' has a wrong offset!");
static_assert(offsetof(AssetUtils_GetReferencersOfAsset, InSubStringsToIgnore) == 0x000070, "Member 'AssetUtils_GetReferencersOfAsset::InSubStringsToIgnore' has a wrong offset!");
static_assert(offsetof(AssetUtils_GetReferencersOfAsset, ReferenceDepthToLookBeforeWeGiveUp) == 0x000080, "Member 'AssetUtils_GetReferencersOfAsset::ReferenceDepthToLookBeforeWeGiveUp' has a wrong offset!");
static_assert(offsetof(AssetUtils_GetReferencersOfAsset, OutRefrencers) == 0x000088, "Member 'AssetUtils_GetReferencersOfAsset::OutRefrencers' has a wrong offset!");

// Function PiecesUtils.BuildInfoUtils_BFL.GetConfig
// 0x0001 (0x0001 - 0x0000)
struct BuildInfoUtils_BFL_GetConfig final
{
public:
	EConfigEnum                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildInfoUtils_BFL_GetConfig) == 0x000001, "Wrong alignment on BuildInfoUtils_BFL_GetConfig");
static_assert(sizeof(BuildInfoUtils_BFL_GetConfig) == 0x000001, "Wrong size on BuildInfoUtils_BFL_GetConfig");
static_assert(offsetof(BuildInfoUtils_BFL_GetConfig, ReturnValue) == 0x000000, "Member 'BuildInfoUtils_BFL_GetConfig::ReturnValue' has a wrong offset!");

// Function PiecesUtils.OFMultiBoolFunctionLibrary.GetMultiBoolValue
// 0x0068 (0x0068 - 0x0000)
struct OFMultiBoolFunctionLibrary_GetMultiBoolValue final
{
public:
	struct FMultiBool                             MultiBool;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFMultiBoolFunctionLibrary_GetMultiBoolValue) == 0x000008, "Wrong alignment on OFMultiBoolFunctionLibrary_GetMultiBoolValue");
static_assert(sizeof(OFMultiBoolFunctionLibrary_GetMultiBoolValue) == 0x000068, "Wrong size on OFMultiBoolFunctionLibrary_GetMultiBoolValue");
static_assert(offsetof(OFMultiBoolFunctionLibrary_GetMultiBoolValue, MultiBool) == 0x000000, "Member 'OFMultiBoolFunctionLibrary_GetMultiBoolValue::MultiBool' has a wrong offset!");
static_assert(offsetof(OFMultiBoolFunctionLibrary_GetMultiBoolValue, ReturnValue) == 0x000060, "Member 'OFMultiBoolFunctionLibrary_GetMultiBoolValue::ReturnValue' has a wrong offset!");

// Function PiecesUtils.OFMultiBoolFunctionLibrary.SetMultiBoolFalse
// 0x0068 (0x0068 - 0x0000)
struct OFMultiBoolFunctionLibrary_SetMultiBoolFalse final
{
public:
	struct FMultiBool                             MultiBool;                                         // 0x0000(0x0060)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	const class UObject*                          AssignmentSourceReference;                         // 0x0060(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFMultiBoolFunctionLibrary_SetMultiBoolFalse) == 0x000008, "Wrong alignment on OFMultiBoolFunctionLibrary_SetMultiBoolFalse");
static_assert(sizeof(OFMultiBoolFunctionLibrary_SetMultiBoolFalse) == 0x000068, "Wrong size on OFMultiBoolFunctionLibrary_SetMultiBoolFalse");
static_assert(offsetof(OFMultiBoolFunctionLibrary_SetMultiBoolFalse, MultiBool) == 0x000000, "Member 'OFMultiBoolFunctionLibrary_SetMultiBoolFalse::MultiBool' has a wrong offset!");
static_assert(offsetof(OFMultiBoolFunctionLibrary_SetMultiBoolFalse, AssignmentSourceReference) == 0x000060, "Member 'OFMultiBoolFunctionLibrary_SetMultiBoolFalse::AssignmentSourceReference' has a wrong offset!");

// Function PiecesUtils.OFMultiBoolFunctionLibrary.SetMultiBoolTrue
// 0x0068 (0x0068 - 0x0000)
struct OFMultiBoolFunctionLibrary_SetMultiBoolTrue final
{
public:
	struct FMultiBool                             MultiBool;                                         // 0x0000(0x0060)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	const class UObject*                          AssignmentSouceReference;                          // 0x0060(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFMultiBoolFunctionLibrary_SetMultiBoolTrue) == 0x000008, "Wrong alignment on OFMultiBoolFunctionLibrary_SetMultiBoolTrue");
static_assert(sizeof(OFMultiBoolFunctionLibrary_SetMultiBoolTrue) == 0x000068, "Wrong size on OFMultiBoolFunctionLibrary_SetMultiBoolTrue");
static_assert(offsetof(OFMultiBoolFunctionLibrary_SetMultiBoolTrue, MultiBool) == 0x000000, "Member 'OFMultiBoolFunctionLibrary_SetMultiBoolTrue::MultiBool' has a wrong offset!");
static_assert(offsetof(OFMultiBoolFunctionLibrary_SetMultiBoolTrue, AssignmentSouceReference) == 0x000060, "Member 'OFMultiBoolFunctionLibrary_SetMultiBoolTrue::AssignmentSouceReference' has a wrong offset!");

// Function PiecesUtils.PiecesAsyncAction_RotateToActorComponent.StopRotation
// 0x0001 (0x0001 - 0x0000)
struct PiecesAsyncAction_RotateToActorComponent_StopRotation final
{
public:
	bool                                          CallCompleteDelegate;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesAsyncAction_RotateToActorComponent_StopRotation) == 0x000001, "Wrong alignment on PiecesAsyncAction_RotateToActorComponent_StopRotation");
static_assert(sizeof(PiecesAsyncAction_RotateToActorComponent_StopRotation) == 0x000001, "Wrong size on PiecesAsyncAction_RotateToActorComponent_StopRotation");
static_assert(offsetof(PiecesAsyncAction_RotateToActorComponent_StopRotation, CallCompleteDelegate) == 0x000000, "Member 'PiecesAsyncAction_RotateToActorComponent_StopRotation::CallCompleteDelegate' has a wrong offset!");

// Function PiecesUtils.PiecesAsyncAction_RotateTo.RotateActorTo
// 0x0028 (0x0028 - 0x0000)
struct PiecesAsyncAction_RotateTo_RotateActorTo final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Target;                                            // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPiecesAsyncAction_RotateTo*            OutRotatorProxy;                                   // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPiecesAsyncAction_RotateTo*            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesAsyncAction_RotateTo_RotateActorTo) == 0x000008, "Wrong alignment on PiecesAsyncAction_RotateTo_RotateActorTo");
static_assert(sizeof(PiecesAsyncAction_RotateTo_RotateActorTo) == 0x000028, "Wrong size on PiecesAsyncAction_RotateTo_RotateActorTo");
static_assert(offsetof(PiecesAsyncAction_RotateTo_RotateActorTo, Actor) == 0x000000, "Member 'PiecesAsyncAction_RotateTo_RotateActorTo::Actor' has a wrong offset!");
static_assert(offsetof(PiecesAsyncAction_RotateTo_RotateActorTo, Target) == 0x000008, "Member 'PiecesAsyncAction_RotateTo_RotateActorTo::Target' has a wrong offset!");
static_assert(offsetof(PiecesAsyncAction_RotateTo_RotateActorTo, Speed) == 0x000014, "Member 'PiecesAsyncAction_RotateTo_RotateActorTo::Speed' has a wrong offset!");
static_assert(offsetof(PiecesAsyncAction_RotateTo_RotateActorTo, OutRotatorProxy) == 0x000018, "Member 'PiecesAsyncAction_RotateTo_RotateActorTo::OutRotatorProxy' has a wrong offset!");
static_assert(offsetof(PiecesAsyncAction_RotateTo_RotateActorTo, ReturnValue) == 0x000020, "Member 'PiecesAsyncAction_RotateTo_RotateActorTo::ReturnValue' has a wrong offset!");

// Function PiecesUtils.PiecesAsyncAction_RotateTo.GetRotatorComponent
// 0x0008 (0x0008 - 0x0000)
struct PiecesAsyncAction_RotateTo_GetRotatorComponent final
{
public:
	class UPiecesAsyncAction_RotateToActorComponent* ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesAsyncAction_RotateTo_GetRotatorComponent) == 0x000008, "Wrong alignment on PiecesAsyncAction_RotateTo_GetRotatorComponent");
static_assert(sizeof(PiecesAsyncAction_RotateTo_GetRotatorComponent) == 0x000008, "Wrong size on PiecesAsyncAction_RotateTo_GetRotatorComponent");
static_assert(offsetof(PiecesAsyncAction_RotateTo_GetRotatorComponent, ReturnValue) == 0x000000, "Member 'PiecesAsyncAction_RotateTo_GetRotatorComponent::ReturnValue' has a wrong offset!");

// Function PiecesUtils.PiecesAbilityTask_RotateTo.RotateActorTo
// 0x0028 (0x0028 - 0x0000)
struct PiecesAbilityTask_RotateTo_RotateActorTo final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Target;                                            // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPiecesAbilityTask_RotateTo*            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesAbilityTask_RotateTo_RotateActorTo) == 0x000008, "Wrong alignment on PiecesAbilityTask_RotateTo_RotateActorTo");
static_assert(sizeof(PiecesAbilityTask_RotateTo_RotateActorTo) == 0x000028, "Wrong size on PiecesAbilityTask_RotateTo_RotateActorTo");
static_assert(offsetof(PiecesAbilityTask_RotateTo_RotateActorTo, OwningAbility) == 0x000000, "Member 'PiecesAbilityTask_RotateTo_RotateActorTo::OwningAbility' has a wrong offset!");
static_assert(offsetof(PiecesAbilityTask_RotateTo_RotateActorTo, Actor) == 0x000008, "Member 'PiecesAbilityTask_RotateTo_RotateActorTo::Actor' has a wrong offset!");
static_assert(offsetof(PiecesAbilityTask_RotateTo_RotateActorTo, Target) == 0x000010, "Member 'PiecesAbilityTask_RotateTo_RotateActorTo::Target' has a wrong offset!");
static_assert(offsetof(PiecesAbilityTask_RotateTo_RotateActorTo, Speed) == 0x00001C, "Member 'PiecesAbilityTask_RotateTo_RotateActorTo::Speed' has a wrong offset!");
static_assert(offsetof(PiecesAbilityTask_RotateTo_RotateActorTo, ReturnValue) == 0x000020, "Member 'PiecesAbilityTask_RotateTo_RotateActorTo::ReturnValue' has a wrong offset!");

// Function PiecesUtils.PiecesAbilityTask_RotateTo.GetRotatorComponent
// 0x0008 (0x0008 - 0x0000)
struct PiecesAbilityTask_RotateTo_GetRotatorComponent final
{
public:
	class UPiecesAsyncAction_RotateToActorComponent* ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesAbilityTask_RotateTo_GetRotatorComponent) == 0x000008, "Wrong alignment on PiecesAbilityTask_RotateTo_GetRotatorComponent");
static_assert(sizeof(PiecesAbilityTask_RotateTo_GetRotatorComponent) == 0x000008, "Wrong size on PiecesAbilityTask_RotateTo_GetRotatorComponent");
static_assert(offsetof(PiecesAbilityTask_RotateTo_GetRotatorComponent, ReturnValue) == 0x000000, "Member 'PiecesAbilityTask_RotateTo_GetRotatorComponent::ReturnValue' has a wrong offset!");

// Function PiecesUtils.PiecesUtilsFunctionLibrary.GetClosestToValue
// 0x0020 (0x0020 - 0x0000)
struct PiecesUtilsFunctionLibrary_GetClosestToValue final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         TargetValue;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PiecesUtilsFunctionLibrary_GetClosestToValue) == 0x000008, "Wrong alignment on PiecesUtilsFunctionLibrary_GetClosestToValue");
static_assert(sizeof(PiecesUtilsFunctionLibrary_GetClosestToValue) == 0x000020, "Wrong size on PiecesUtilsFunctionLibrary_GetClosestToValue");
static_assert(offsetof(PiecesUtilsFunctionLibrary_GetClosestToValue, Names) == 0x000000, "Member 'PiecesUtilsFunctionLibrary_GetClosestToValue::Names' has a wrong offset!");
static_assert(offsetof(PiecesUtilsFunctionLibrary_GetClosestToValue, TargetValue) == 0x000010, "Member 'PiecesUtilsFunctionLibrary_GetClosestToValue::TargetValue' has a wrong offset!");
static_assert(offsetof(PiecesUtilsFunctionLibrary_GetClosestToValue, ReturnValue) == 0x000014, "Member 'PiecesUtilsFunctionLibrary_GetClosestToValue::ReturnValue' has a wrong offset!");

// Function PiecesUtils.PiecesUtilsFunctionLibrary.GetGameInstanceSubsystem
// 0x0018 (0x0018 - 0x0000)
struct PiecesUtilsFunctionLibrary_GetGameInstanceSubsystem final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameInstanceSubsystem>     Class_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameInstanceSubsystem*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesUtilsFunctionLibrary_GetGameInstanceSubsystem) == 0x000008, "Wrong alignment on PiecesUtilsFunctionLibrary_GetGameInstanceSubsystem");
static_assert(sizeof(PiecesUtilsFunctionLibrary_GetGameInstanceSubsystem) == 0x000018, "Wrong size on PiecesUtilsFunctionLibrary_GetGameInstanceSubsystem");
static_assert(offsetof(PiecesUtilsFunctionLibrary_GetGameInstanceSubsystem, WorldContextObject) == 0x000000, "Member 'PiecesUtilsFunctionLibrary_GetGameInstanceSubsystem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PiecesUtilsFunctionLibrary_GetGameInstanceSubsystem, Class_0) == 0x000008, "Member 'PiecesUtilsFunctionLibrary_GetGameInstanceSubsystem::Class_0' has a wrong offset!");
static_assert(offsetof(PiecesUtilsFunctionLibrary_GetGameInstanceSubsystem, ReturnValue) == 0x000010, "Member 'PiecesUtilsFunctionLibrary_GetGameInstanceSubsystem::ReturnValue' has a wrong offset!");

// Function PiecesUtils.PiecesUtilsFunctionLibrary.GetTimeDilationPauseThreshold
// 0x0004 (0x0004 - 0x0000)
struct PiecesUtilsFunctionLibrary_GetTimeDilationPauseThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesUtilsFunctionLibrary_GetTimeDilationPauseThreshold) == 0x000004, "Wrong alignment on PiecesUtilsFunctionLibrary_GetTimeDilationPauseThreshold");
static_assert(sizeof(PiecesUtilsFunctionLibrary_GetTimeDilationPauseThreshold) == 0x000004, "Wrong size on PiecesUtilsFunctionLibrary_GetTimeDilationPauseThreshold");
static_assert(offsetof(PiecesUtilsFunctionLibrary_GetTimeDilationPauseThreshold, ReturnValue) == 0x000000, "Member 'PiecesUtilsFunctionLibrary_GetTimeDilationPauseThreshold::ReturnValue' has a wrong offset!");

// Function PiecesUtils.PiecesUtilsFunctionLibrary.GetWorldSubsystem
// 0x0018 (0x0018 - 0x0000)
struct PiecesUtilsFunctionLibrary_GetWorldSubsystem final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWorldSubsystem>            Class_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWorldSubsystem*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesUtilsFunctionLibrary_GetWorldSubsystem) == 0x000008, "Wrong alignment on PiecesUtilsFunctionLibrary_GetWorldSubsystem");
static_assert(sizeof(PiecesUtilsFunctionLibrary_GetWorldSubsystem) == 0x000018, "Wrong size on PiecesUtilsFunctionLibrary_GetWorldSubsystem");
static_assert(offsetof(PiecesUtilsFunctionLibrary_GetWorldSubsystem, WorldContextObject) == 0x000000, "Member 'PiecesUtilsFunctionLibrary_GetWorldSubsystem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PiecesUtilsFunctionLibrary_GetWorldSubsystem, Class_0) == 0x000008, "Member 'PiecesUtilsFunctionLibrary_GetWorldSubsystem::Class_0' has a wrong offset!");
static_assert(offsetof(PiecesUtilsFunctionLibrary_GetWorldSubsystem, ReturnValue) == 0x000010, "Member 'PiecesUtilsFunctionLibrary_GetWorldSubsystem::ReturnValue' has a wrong offset!");

// Function PiecesUtils.PiecesUtilsFunctionLibrary.IsPausedByTimeDilation
// 0x0010 (0x0010 - 0x0000)
struct PiecesUtilsFunctionLibrary_IsPausedByTimeDilation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PiecesUtilsFunctionLibrary_IsPausedByTimeDilation) == 0x000008, "Wrong alignment on PiecesUtilsFunctionLibrary_IsPausedByTimeDilation");
static_assert(sizeof(PiecesUtilsFunctionLibrary_IsPausedByTimeDilation) == 0x000010, "Wrong size on PiecesUtilsFunctionLibrary_IsPausedByTimeDilation");
static_assert(offsetof(PiecesUtilsFunctionLibrary_IsPausedByTimeDilation, WorldContextObject) == 0x000000, "Member 'PiecesUtilsFunctionLibrary_IsPausedByTimeDilation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PiecesUtilsFunctionLibrary_IsPausedByTimeDilation, ReturnValue) == 0x000008, "Member 'PiecesUtilsFunctionLibrary_IsPausedByTimeDilation::ReturnValue' has a wrong offset!");

}

