#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PuzzleSelectionComponent

#include "Basic.hpp"

#include "EPuzzleMovementStates_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FPuzzleSlot_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.OnSwapItem__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_PuzzleSelectionComponent_C_OnSwapItem__DelegateSignature final
{
public:
	int32                                         PreviousItemIndex;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SelectedItemIndex;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_OnSwapItem__DelegateSignature) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_OnSwapItem__DelegateSignature");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_OnSwapItem__DelegateSignature) == 0x000008, "Wrong size on BP_PuzzleSelectionComponent_C_OnSwapItem__DelegateSignature");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_OnSwapItem__DelegateSignature, PreviousItemIndex) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_OnSwapItem__DelegateSignature::PreviousItemIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_OnSwapItem__DelegateSignature, SelectedItemIndex) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_OnSwapItem__DelegateSignature::SelectedItemIndex' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.OnItemHeld__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BP_PuzzleSelectionComponent_C_OnItemHeld__DelegateSignature final
{
public:
	int32                                         HeldItemIndex_0;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_OnItemHeld__DelegateSignature) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_OnItemHeld__DelegateSignature");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_OnItemHeld__DelegateSignature) == 0x000004, "Wrong size on BP_PuzzleSelectionComponent_C_OnItemHeld__DelegateSignature");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_OnItemHeld__DelegateSignature, HeldItemIndex_0) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_OnItemHeld__DelegateSignature::HeldItemIndex_0' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.OnItemReleased__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BP_PuzzleSelectionComponent_C_OnItemReleased__DelegateSignature final
{
public:
	int32                                         HeldItemIndex_0;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_OnItemReleased__DelegateSignature) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_OnItemReleased__DelegateSignature");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_OnItemReleased__DelegateSignature) == 0x000004, "Wrong size on BP_PuzzleSelectionComponent_C_OnItemReleased__DelegateSignature");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_OnItemReleased__DelegateSignature, HeldItemIndex_0) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_OnItemReleased__DelegateSignature::HeldItemIndex_0' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.OnNavigated__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_PuzzleSelectionComponent_C_OnNavigated__DelegateSignature final
{
public:
	bool                                          IsHoldingItem;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentSelectedIndex;                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreviousSelectedIndex;                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NavigationSuccessful;                              // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_OnNavigated__DelegateSignature) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_OnNavigated__DelegateSignature");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_OnNavigated__DelegateSignature) == 0x000010, "Wrong size on BP_PuzzleSelectionComponent_C_OnNavigated__DelegateSignature");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_OnNavigated__DelegateSignature, IsHoldingItem) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_OnNavigated__DelegateSignature::IsHoldingItem' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_OnNavigated__DelegateSignature, CurrentSelectedIndex) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_OnNavigated__DelegateSignature::CurrentSelectedIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_OnNavigated__DelegateSignature, PreviousSelectedIndex) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_OnNavigated__DelegateSignature::PreviousSelectedIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_OnNavigated__DelegateSignature, NavigationSuccessful) == 0x00000C, "Member 'BP_PuzzleSelectionComponent_C_OnNavigated__DelegateSignature::NavigationSuccessful' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.OnSlotToggled__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_PuzzleSelectionComponent_C_OnSlotToggled__DelegateSignature final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Item;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_OnSlotToggled__DelegateSignature) == 0x000008, "Wrong alignment on BP_PuzzleSelectionComponent_C_OnSlotToggled__DelegateSignature");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_OnSlotToggled__DelegateSignature) == 0x000010, "Wrong size on BP_PuzzleSelectionComponent_C_OnSlotToggled__DelegateSignature");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_OnSlotToggled__DelegateSignature, Enabled) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_OnSlotToggled__DelegateSignature::Enabled' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_OnSlotToggled__DelegateSignature, Item) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_OnSlotToggled__DelegateSignature::Item' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.ExecuteUbergraph_BP_PuzzleSelectionComponent
// 0x001C (0x001C - 0x0000)
struct BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_RightAxis;                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPuzzleMovementStates                         K2Node_CustomEvent_State;                          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_ForwardAxis;                    // 0x0014(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent) == 0x00001C, "Wrong size on BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent, EntryPoint) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent, K2Node_CustomEvent_RightAxis) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent::K2Node_CustomEvent_RightAxis' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent, CallFunc_Less_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000009, "Member 'BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent, K2Node_CustomEvent_State) == 0x00000A, "Member 'BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent::K2Node_CustomEvent_State' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent, K2Node_SwitchEnum_CmpSuccess) == 0x00000B, "Member 'BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent, K2Node_Event_DeltaSeconds) == 0x00000C, "Member 'BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent, K2Node_SwitchEnum_CmpSuccess_1) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent, K2Node_CustomEvent_ForwardAxis) == 0x000014, "Member 'BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent::K2Node_CustomEvent_ForwardAxis' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000018, "Member 'BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000019, "Member 'BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent, K2Node_SwitchEnum_CmpSuccess_2) == 0x00001A, "Member 'BP_PuzzleSelectionComponent_C_ExecuteUbergraph_BP_PuzzleSelectionComponent::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_PuzzleSelectionComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_ReceiveTick");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_PuzzleSelectionComponent_C_ReceiveTick");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.SetState
// 0x0001 (0x0001 - 0x0000)
struct BP_PuzzleSelectionComponent_C_SetState final
{
public:
	EPuzzleMovementStates                         State_0;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_SetState) == 0x000001, "Wrong alignment on BP_PuzzleSelectionComponent_C_SetState");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_SetState) == 0x000001, "Wrong size on BP_PuzzleSelectionComponent_C_SetState");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetState, State_0) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_SetState::State_0' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.HorizontalSelectionInput
// 0x0004 (0x0004 - 0x0000)
struct BP_PuzzleSelectionComponent_C_HorizontalSelectionInput final
{
public:
	float                                         RightAxis;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_HorizontalSelectionInput) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_HorizontalSelectionInput");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_HorizontalSelectionInput) == 0x000004, "Wrong size on BP_PuzzleSelectionComponent_C_HorizontalSelectionInput");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_HorizontalSelectionInput, RightAxis) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_HorizontalSelectionInput::RightAxis' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.VerticalSelectionInput
// 0x0004 (0x0004 - 0x0000)
struct BP_PuzzleSelectionComponent_C_VerticalSelectionInput final
{
public:
	float                                         ForwardAxis;                                       // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_VerticalSelectionInput) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_VerticalSelectionInput");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_VerticalSelectionInput) == 0x000004, "Wrong size on BP_PuzzleSelectionComponent_C_VerticalSelectionInput");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_VerticalSelectionInput, ForwardAxis) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_VerticalSelectionInput::ForwardAxis' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.SetupPuzzleItems
// 0x0010 (0x0010 - 0x0000)
struct BP_PuzzleSelectionComponent_C_SetupPuzzleItems final
{
public:
	TArray<class UPrimitiveComponent*>            PuzzleItems_0;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_SetupPuzzleItems) == 0x000008, "Wrong alignment on BP_PuzzleSelectionComponent_C_SetupPuzzleItems");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_SetupPuzzleItems) == 0x000010, "Wrong size on BP_PuzzleSelectionComponent_C_SetupPuzzleItems");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetupPuzzleItems, PuzzleItems_0) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_SetupPuzzleItems::PuzzleItems_0' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.MapItemsToSlots
// 0x00B0 (0x00B0 - 0x0000)
struct BP_PuzzleSelectionComponent_C_MapItemsToSlots final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetRelativeTransform_ReturnValue;         // 0x0020(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0xC];                                       // 0x0054(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPuzzleSlot                           K2Node_MakeStruct_FPuzzleSlot;                     // 0x0060(0x0040)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_MapItemsToSlots) == 0x000010, "Wrong alignment on BP_PuzzleSelectionComponent_C_MapItemsToSlots");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_MapItemsToSlots) == 0x0000B0, "Wrong size on BP_PuzzleSelectionComponent_C_MapItemsToSlots");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_MapItemsToSlots, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_MapItemsToSlots::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_MapItemsToSlots, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_MapItemsToSlots::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_MapItemsToSlots, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_MapItemsToSlots::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_MapItemsToSlots, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'BP_PuzzleSelectionComponent_C_MapItemsToSlots::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_MapItemsToSlots, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_MapItemsToSlots::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_MapItemsToSlots, CallFunc_GetRelativeTransform_ReturnValue) == 0x000020, "Member 'BP_PuzzleSelectionComponent_C_MapItemsToSlots::CallFunc_GetRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_MapItemsToSlots, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_PuzzleSelectionComponent_C_MapItemsToSlots::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_MapItemsToSlots, K2Node_MakeStruct_FPuzzleSlot) == 0x000060, "Member 'BP_PuzzleSelectionComponent_C_MapItemsToSlots::K2Node_MakeStruct_FPuzzleSlot' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_MapItemsToSlots, CallFunc_Less_IntInt_ReturnValue) == 0x0000A0, "Member 'BP_PuzzleSelectionComponent_C_MapItemsToSlots::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_MapItemsToSlots, CallFunc_Array_Length_ReturnValue_1) == 0x0000A4, "Member 'BP_PuzzleSelectionComponent_C_MapItemsToSlots::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.GetSelectedItem
// 0x0060 (0x0060 - 0x0000)
struct BP_PuzzleSelectionComponent_C_GetSelectedItem final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPuzzleSlot                           CallFunc_Map_Find_Value;                           // 0x0010(0x0040)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_GetSelectedItem) == 0x000010, "Wrong alignment on BP_PuzzleSelectionComponent_C_GetSelectedItem");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_GetSelectedItem) == 0x000060, "Wrong size on BP_PuzzleSelectionComponent_C_GetSelectedItem");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSelectedItem, ReturnValue) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_GetSelectedItem::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSelectedItem, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_GetSelectedItem::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSelectedItem, CallFunc_Map_Find_ReturnValue) == 0x000050, "Member 'BP_PuzzleSelectionComponent_C_GetSelectedItem::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.SwapItemsBetweenSlots
// 0x0160 (0x0160 - 0x0000)
struct BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots final
{
public:
	int32                                         FromIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ToIndex;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SwapSuccessful;                                    // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SwapToIndex;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SwapFromIndex;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    ItemToSwap;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetItemInIndex_ReturnValue;               // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetItemInIndex_ReturnValue_1;             // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0xF];                                       // 0x0031(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPuzzleSlot                           CallFunc_Map_Find_Value;                           // 0x0040(0x0040)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPuzzleSlot                           CallFunc_Map_Find_Value_1;                         // 0x0090(0x0040)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0xF];                                       // 0x00D1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPuzzleSlot                           K2Node_MakeStruct_FPuzzleSlot;                     // 0x00E0(0x0040)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FFPuzzleSlot                           K2Node_MakeStruct_FPuzzleSlot_1;                   // 0x0120(0x0040)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots) == 0x000010, "Wrong alignment on BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots) == 0x000160, "Wrong size on BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots, FromIndex) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots::FromIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots, ToIndex) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots::ToIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots, SwapSuccessful) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots::SwapSuccessful' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots, SwapToIndex) == 0x00000C, "Member 'BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots::SwapToIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots, SwapFromIndex) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots::SwapFromIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots, ItemToSwap) == 0x000018, "Member 'BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots::ItemToSwap' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots, CallFunc_GetItemInIndex_ReturnValue) == 0x000020, "Member 'BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots::CallFunc_GetItemInIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots, CallFunc_GetItemInIndex_ReturnValue_1) == 0x000028, "Member 'BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots::CallFunc_GetItemInIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000030, "Member 'BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots, CallFunc_Map_Find_Value) == 0x000040, "Member 'BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots, CallFunc_Map_Find_ReturnValue) == 0x000080, "Member 'BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots, CallFunc_Map_Find_Value_1) == 0x000090, "Member 'BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots, CallFunc_Map_Find_ReturnValue_1) == 0x0000D0, "Member 'BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots, K2Node_MakeStruct_FPuzzleSlot) == 0x0000E0, "Member 'BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots::K2Node_MakeStruct_FPuzzleSlot' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots, K2Node_MakeStruct_FPuzzleSlot_1) == 0x000120, "Member 'BP_PuzzleSelectionComponent_C_SwapItemsBetweenSlots::K2Node_MakeStruct_FPuzzleSlot_1' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.GetItemInIndex
// 0x0070 (0x0070 - 0x0000)
struct BP_PuzzleSelectionComponent_C_GetItemInIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPuzzleSlot                           CallFunc_Map_Find_Value;                           // 0x0020(0x0040)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_GetItemInIndex) == 0x000010, "Wrong alignment on BP_PuzzleSelectionComponent_C_GetItemInIndex");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_GetItemInIndex) == 0x000070, "Wrong size on BP_PuzzleSelectionComponent_C_GetItemInIndex");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetItemInIndex, Index_0) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_GetItemInIndex::Index_0' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetItemInIndex, ReturnValue) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_GetItemInIndex::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetItemInIndex, CallFunc_Subtract_IntInt_ReturnValue) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_GetItemInIndex::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetItemInIndex, CallFunc_Clamp_ReturnValue) == 0x000014, "Member 'BP_PuzzleSelectionComponent_C_GetItemInIndex::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetItemInIndex, CallFunc_Map_Find_Value) == 0x000020, "Member 'BP_PuzzleSelectionComponent_C_GetItemInIndex::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetItemInIndex, CallFunc_Map_Find_ReturnValue) == 0x000060, "Member 'BP_PuzzleSelectionComponent_C_GetItemInIndex::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.GetSlotTransformInIndex
// 0x00A0 (0x00A0 - 0x0000)
struct BP_PuzzleSelectionComponent_C_GetSlotTransformInIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPuzzleSlot                           CallFunc_Map_Find_Value;                           // 0x0050(0x0040)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_GetSlotTransformInIndex) == 0x000010, "Wrong alignment on BP_PuzzleSelectionComponent_C_GetSlotTransformInIndex");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_GetSlotTransformInIndex) == 0x0000A0, "Wrong size on BP_PuzzleSelectionComponent_C_GetSlotTransformInIndex");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSlotTransformInIndex, Index_0) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_GetSlotTransformInIndex::Index_0' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSlotTransformInIndex, ReturnValue) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_GetSlotTransformInIndex::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSlotTransformInIndex, CallFunc_Subtract_IntInt_ReturnValue) == 0x000040, "Member 'BP_PuzzleSelectionComponent_C_GetSlotTransformInIndex::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSlotTransformInIndex, CallFunc_Clamp_ReturnValue) == 0x000044, "Member 'BP_PuzzleSelectionComponent_C_GetSlotTransformInIndex::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSlotTransformInIndex, CallFunc_Map_Find_Value) == 0x000050, "Member 'BP_PuzzleSelectionComponent_C_GetSlotTransformInIndex::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSlotTransformInIndex, CallFunc_Map_Find_ReturnValue) == 0x000090, "Member 'BP_PuzzleSelectionComponent_C_GetSlotTransformInIndex::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.GetHeldItemIndex
// 0x0004 (0x0004 - 0x0000)
struct BP_PuzzleSelectionComponent_C_GetHeldItemIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_GetHeldItemIndex) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_GetHeldItemIndex");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_GetHeldItemIndex) == 0x000004, "Wrong size on BP_PuzzleSelectionComponent_C_GetHeldItemIndex");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetHeldItemIndex, ReturnValue) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_GetHeldItemIndex::ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.GetSelectedItemIndex
// 0x0004 (0x0004 - 0x0000)
struct BP_PuzzleSelectionComponent_C_GetSelectedItemIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_GetSelectedItemIndex) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_GetSelectedItemIndex");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_GetSelectedItemIndex) == 0x000004, "Wrong size on BP_PuzzleSelectionComponent_C_GetSelectedItemIndex");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSelectedItemIndex, ReturnValue) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_GetSelectedItemIndex::ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.SetupSelectionMaterial
// 0x00B0 (0x00B0 - 0x0000)
struct BP_PuzzleSelectionComponent_C_SetupSelectionMaterial final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_Map_Keys_Keys;                            // 0x0018(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0xF];                                       // 0x0031(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPuzzleSlot                           CallFunc_Map_Find_Value;                           // 0x0040(0x0040)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumMaterials_ReturnValue;              // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_SetupSelectionMaterial) == 0x000010, "Wrong alignment on BP_PuzzleSelectionComponent_C_SetupSelectionMaterial");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_SetupSelectionMaterial) == 0x0000B0, "Wrong size on BP_PuzzleSelectionComponent_C_SetupSelectionMaterial");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetupSelectionMaterial, Index_0) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_SetupSelectionMaterial::Index_0' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetupSelectionMaterial, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_SetupSelectionMaterial::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetupSelectionMaterial, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_SetupSelectionMaterial::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetupSelectionMaterial, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_PuzzleSelectionComponent_C_SetupSelectionMaterial::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetupSelectionMaterial, Temp_int_Variable) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_SetupSelectionMaterial::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetupSelectionMaterial, CallFunc_Add_IntInt_ReturnValue_1) == 0x000014, "Member 'BP_PuzzleSelectionComponent_C_SetupSelectionMaterial::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetupSelectionMaterial, CallFunc_Map_Keys_Keys) == 0x000018, "Member 'BP_PuzzleSelectionComponent_C_SetupSelectionMaterial::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetupSelectionMaterial, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_PuzzleSelectionComponent_C_SetupSelectionMaterial::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetupSelectionMaterial, CallFunc_Array_Get_Item) == 0x00002C, "Member 'BP_PuzzleSelectionComponent_C_SetupSelectionMaterial::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetupSelectionMaterial, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_PuzzleSelectionComponent_C_SetupSelectionMaterial::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetupSelectionMaterial, CallFunc_Map_Find_Value) == 0x000040, "Member 'BP_PuzzleSelectionComponent_C_SetupSelectionMaterial::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetupSelectionMaterial, CallFunc_Map_Find_ReturnValue) == 0x000080, "Member 'BP_PuzzleSelectionComponent_C_SetupSelectionMaterial::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetupSelectionMaterial, CallFunc_GetNumMaterials_ReturnValue) == 0x000084, "Member 'BP_PuzzleSelectionComponent_C_SetupSelectionMaterial::CallFunc_GetNumMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetupSelectionMaterial, CallFunc_GetMaterial_ReturnValue) == 0x000088, "Member 'BP_PuzzleSelectionComponent_C_SetupSelectionMaterial::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetupSelectionMaterial, CallFunc_Subtract_IntInt_ReturnValue) == 0x000090, "Member 'BP_PuzzleSelectionComponent_C_SetupSelectionMaterial::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetupSelectionMaterial, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000098, "Member 'BP_PuzzleSelectionComponent_C_SetupSelectionMaterial::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetupSelectionMaterial, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000A0, "Member 'BP_PuzzleSelectionComponent_C_SetupSelectionMaterial::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.ToggleHighlightOnItemInSlot
// 0x0090 (0x0090 - 0x0000)
struct BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot final
{
public:
	bool                                          IsHighlit;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndex;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetItemInIndex_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumMaterials_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               K2Node_DynamicCast_AsMaterial_Instance_Dynamic;    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot) == 0x000008, "Wrong alignment on BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot) == 0x000090, "Wrong size on BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot, IsHighlit) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot::IsHighlit' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot, SlotIndex) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot, Index_0) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot::Index_0' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot, CallFunc_GetItemInIndex_ReturnValue) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot::CallFunc_GetItemInIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000018, "Member 'BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot, CallFunc_GetNumMaterials_ReturnValue) == 0x00001C, "Member 'BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot::CallFunc_GetNumMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot, CallFunc_Subtract_IntInt_ReturnValue) == 0x000020, "Member 'BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot, Temp_int_Variable) == 0x000024, "Member 'BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot, CallFunc_GetMaterial_ReturnValue) == 0x000028, "Member 'BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot, K2Node_DynamicCast_AsMaterial_Instance_Dynamic) == 0x000030, "Member 'BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot::K2Node_DynamicCast_AsMaterial_Instance_Dynamic' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot, CallFunc_GetDisplayName_ReturnValue) == 0x000040, "Member 'BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot, CallFunc_Concat_StrStr_ReturnValue) == 0x000050, "Member 'BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000060, "Member 'BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000068, "Member 'BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000078, "Member 'BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot, CallFunc_Add_IntInt_ReturnValue) == 0x000088, "Member 'BP_PuzzleSelectionComponent_C_ToggleHighlightOnItemInSlot::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.GetHeldItem
// 0x0060 (0x0060 - 0x0000)
struct BP_PuzzleSelectionComponent_C_GetHeldItem final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPuzzleSlot                           CallFunc_Map_Find_Value;                           // 0x0010(0x0040)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_GetHeldItem) == 0x000010, "Wrong alignment on BP_PuzzleSelectionComponent_C_GetHeldItem");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_GetHeldItem) == 0x000060, "Wrong size on BP_PuzzleSelectionComponent_C_GetHeldItem");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetHeldItem, ReturnValue) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_GetHeldItem::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetHeldItem, CallFunc_Map_Find_Value) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_GetHeldItem::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetHeldItem, CallFunc_Map_Find_ReturnValue) == 0x000050, "Member 'BP_PuzzleSelectionComponent_C_GetHeldItem::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.SwapItems
// 0x000C (0x000C - 0x0000)
struct BP_PuzzleSelectionComponent_C_SwapItems final
{
public:
	int32                                         CallFunc_GetSelectedItemIndex_ReturnValue;         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHeldItemIndex_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SwapItemsBetweenSlots_SwapSuccessful;     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_SwapItems) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_SwapItems");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_SwapItems) == 0x00000C, "Wrong size on BP_PuzzleSelectionComponent_C_SwapItems");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapItems, CallFunc_GetSelectedItemIndex_ReturnValue) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_SwapItems::CallFunc_GetSelectedItemIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapItems, CallFunc_GetHeldItemIndex_ReturnValue) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_SwapItems::CallFunc_GetHeldItemIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapItems, CallFunc_SwapItemsBetweenSlots_SwapSuccessful) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_SwapItems::CallFunc_SwapItemsBetweenSlots_SwapSuccessful' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.NavigateUp
// 0x0018 (0x0018 - 0x0000)
struct BP_PuzzleSelectionComponent_C_NavigateUp final
{
public:
	int32                                         CallFunc_DecrementVerticalIndex_CurrentIndex;      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_DecrementVerticalIndex_PreviousSelectedIndex; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DecrementVerticalIndex_NavigationSuccessful; // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_NavigateUp) == 0x000008, "Wrong alignment on BP_PuzzleSelectionComponent_C_NavigateUp");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_NavigateUp) == 0x000018, "Wrong size on BP_PuzzleSelectionComponent_C_NavigateUp");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_NavigateUp, CallFunc_DecrementVerticalIndex_CurrentIndex) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_NavigateUp::CallFunc_DecrementVerticalIndex_CurrentIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_NavigateUp, CallFunc_DecrementVerticalIndex_PreviousSelectedIndex) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_NavigateUp::CallFunc_DecrementVerticalIndex_PreviousSelectedIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_NavigateUp, CallFunc_DecrementVerticalIndex_NavigationSuccessful) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_NavigateUp::CallFunc_DecrementVerticalIndex_NavigationSuccessful' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_NavigateUp, CallFunc_K2_SetTimer_ReturnValue) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_NavigateUp::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.NavigateRight
// 0x0018 (0x0018 - 0x0000)
struct BP_PuzzleSelectionComponent_C_NavigateRight final
{
public:
	int32                                         CallFunc_IncrementHorizontalIndex_CurrentIndex;    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_IncrementHorizontalIndex_PreviousSelectedIndex; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IncrementHorizontalIndex_NavigationSuccessful; // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_NavigateRight) == 0x000008, "Wrong alignment on BP_PuzzleSelectionComponent_C_NavigateRight");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_NavigateRight) == 0x000018, "Wrong size on BP_PuzzleSelectionComponent_C_NavigateRight");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_NavigateRight, CallFunc_IncrementHorizontalIndex_CurrentIndex) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_NavigateRight::CallFunc_IncrementHorizontalIndex_CurrentIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_NavigateRight, CallFunc_IncrementHorizontalIndex_PreviousSelectedIndex) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_NavigateRight::CallFunc_IncrementHorizontalIndex_PreviousSelectedIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_NavigateRight, CallFunc_IncrementHorizontalIndex_NavigationSuccessful) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_NavigateRight::CallFunc_IncrementHorizontalIndex_NavigationSuccessful' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_NavigateRight, CallFunc_K2_SetTimer_ReturnValue) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_NavigateRight::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.NavigateLeft
// 0x0018 (0x0018 - 0x0000)
struct BP_PuzzleSelectionComponent_C_NavigateLeft final
{
public:
	int32                                         CallFunc_DecrementHorizontalIndex_CurrentIndex;    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_DecrementHorizontalIndex_PreviousSelectedIndex; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DecrementHorizontalIndex_NavigationSuccessful; // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_NavigateLeft) == 0x000008, "Wrong alignment on BP_PuzzleSelectionComponent_C_NavigateLeft");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_NavigateLeft) == 0x000018, "Wrong size on BP_PuzzleSelectionComponent_C_NavigateLeft");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_NavigateLeft, CallFunc_DecrementHorizontalIndex_CurrentIndex) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_NavigateLeft::CallFunc_DecrementHorizontalIndex_CurrentIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_NavigateLeft, CallFunc_DecrementHorizontalIndex_PreviousSelectedIndex) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_NavigateLeft::CallFunc_DecrementHorizontalIndex_PreviousSelectedIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_NavigateLeft, CallFunc_DecrementHorizontalIndex_NavigationSuccessful) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_NavigateLeft::CallFunc_DecrementHorizontalIndex_NavigationSuccessful' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_NavigateLeft, CallFunc_K2_SetTimer_ReturnValue) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_NavigateLeft::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.NavigateDown
// 0x0018 (0x0018 - 0x0000)
struct BP_PuzzleSelectionComponent_C_NavigateDown final
{
public:
	int32                                         CallFunc_IncrementVerticalIndex_CurrentIndex;      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_IncrementVerticalIndex_PreviousSelectedIndex; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IncrementVerticalIndex_NavigationSuccessful; // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_NavigateDown) == 0x000008, "Wrong alignment on BP_PuzzleSelectionComponent_C_NavigateDown");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_NavigateDown) == 0x000018, "Wrong size on BP_PuzzleSelectionComponent_C_NavigateDown");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_NavigateDown, CallFunc_IncrementVerticalIndex_CurrentIndex) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_NavigateDown::CallFunc_IncrementVerticalIndex_CurrentIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_NavigateDown, CallFunc_IncrementVerticalIndex_PreviousSelectedIndex) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_NavigateDown::CallFunc_IncrementVerticalIndex_PreviousSelectedIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_NavigateDown, CallFunc_IncrementVerticalIndex_NavigationSuccessful) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_NavigateDown::CallFunc_IncrementVerticalIndex_NavigationSuccessful' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_NavigateDown, CallFunc_K2_SetTimer_ReturnValue) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_NavigateDown::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.HoldItem
// 0x000C (0x000C - 0x0000)
struct BP_PuzzleSelectionComponent_C_HoldItem final
{
public:
	bool                                          CallFunc_IsAnySlotsEnabled_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetHeldItemIndex_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_HoldItem) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_HoldItem");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_HoldItem) == 0x00000C, "Wrong size on BP_PuzzleSelectionComponent_C_HoldItem");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_HoldItem, CallFunc_IsAnySlotsEnabled_ReturnValue) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_HoldItem::CallFunc_IsAnySlotsEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_HoldItem, CallFunc_GetHeldItemIndex_ReturnValue) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_HoldItem::CallFunc_GetHeldItemIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_HoldItem, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_HoldItem::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.DebugStates
// 0x0018 (0x0018 - 0x0000)
struct BP_PuzzleSelectionComponent_C_DebugStates final
{
public:
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_DebugStates) == 0x000008, "Wrong alignment on BP_PuzzleSelectionComponent_C_DebugStates");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_DebugStates) == 0x000018, "Wrong size on BP_PuzzleSelectionComponent_C_DebugStates");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DebugStates, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_DebugStates::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DebugStates, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_DebugStates::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.StopHoldingItem
// 0x0004 (0x0004 - 0x0000)
struct BP_PuzzleSelectionComponent_C_StopHoldingItem final
{
public:
	int32                                         CallFunc_GetHeldItemIndex_ReturnValue;             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_StopHoldingItem) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_StopHoldingItem");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_StopHoldingItem) == 0x000004, "Wrong size on BP_PuzzleSelectionComponent_C_StopHoldingItem");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_StopHoldingItem, CallFunc_GetHeldItemIndex_ReturnValue) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_StopHoldingItem::CallFunc_GetHeldItemIndex_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.ResetLocationOfItems
// 0x0120 (0x0120 - 0x0000)
struct BP_PuzzleSelectionComponent_C_ResetLocationOfItems final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_Map_Keys_Keys;                            // 0x0010(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPuzzleSlot                           CallFunc_Map_Find_Value;                           // 0x0030(0x0040)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0098(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_ResetLocationOfItems) == 0x000010, "Wrong alignment on BP_PuzzleSelectionComponent_C_ResetLocationOfItems");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_ResetLocationOfItems) == 0x000120, "Wrong size on BP_PuzzleSelectionComponent_C_ResetLocationOfItems");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ResetLocationOfItems, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_ResetLocationOfItems::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ResetLocationOfItems, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_ResetLocationOfItems::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ResetLocationOfItems, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_ResetLocationOfItems::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ResetLocationOfItems, CallFunc_Map_Keys_Keys) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_ResetLocationOfItems::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ResetLocationOfItems, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_PuzzleSelectionComponent_C_ResetLocationOfItems::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ResetLocationOfItems, CallFunc_Array_Get_Item) == 0x000024, "Member 'BP_PuzzleSelectionComponent_C_ResetLocationOfItems::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ResetLocationOfItems, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'BP_PuzzleSelectionComponent_C_ResetLocationOfItems::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ResetLocationOfItems, CallFunc_Map_Find_Value) == 0x000030, "Member 'BP_PuzzleSelectionComponent_C_ResetLocationOfItems::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ResetLocationOfItems, CallFunc_Map_Find_ReturnValue) == 0x000070, "Member 'BP_PuzzleSelectionComponent_C_ResetLocationOfItems::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ResetLocationOfItems, CallFunc_BreakTransform_Location) == 0x000074, "Member 'BP_PuzzleSelectionComponent_C_ResetLocationOfItems::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ResetLocationOfItems, CallFunc_BreakTransform_Rotation) == 0x000080, "Member 'BP_PuzzleSelectionComponent_C_ResetLocationOfItems::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ResetLocationOfItems, CallFunc_BreakTransform_Scale) == 0x00008C, "Member 'BP_PuzzleSelectionComponent_C_ResetLocationOfItems::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ResetLocationOfItems, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000098, "Member 'BP_PuzzleSelectionComponent_C_ResetLocationOfItems::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.HoldSelectedItem
// 0x0001 (0x0001 - 0x0000)
struct BP_PuzzleSelectionComponent_C_HoldSelectedItem final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_HoldSelectedItem) == 0x000001, "Wrong alignment on BP_PuzzleSelectionComponent_C_HoldSelectedItem");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_HoldSelectedItem) == 0x000001, "Wrong size on BP_PuzzleSelectionComponent_C_HoldSelectedItem");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_HoldSelectedItem, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_HoldSelectedItem::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.ToggleSlotOfItem
// 0x00B0 (0x00B0 - 0x0000)
struct BP_PuzzleSelectionComponent_C_ToggleSlotOfItem final
{
public:
	class UPrimitiveComponent*                    PuzzleItem;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enabled;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSlotIndexOfItem_SlotIndex;             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPuzzleSlot                           CallFunc_Map_Find_Value;                           // 0x0020(0x0040)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0xE];                                       // 0x0062(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPuzzleSlot                           K2Node_MakeStruct_FPuzzleSlot;                     // 0x0070(0x0040)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_ToggleSlotOfItem) == 0x000010, "Wrong alignment on BP_PuzzleSelectionComponent_C_ToggleSlotOfItem");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_ToggleSlotOfItem) == 0x0000B0, "Wrong size on BP_PuzzleSelectionComponent_C_ToggleSlotOfItem");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleSlotOfItem, PuzzleItem) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_ToggleSlotOfItem::PuzzleItem' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleSlotOfItem, Enabled) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_ToggleSlotOfItem::Enabled' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleSlotOfItem, CallFunc_GetSlotIndexOfItem_SlotIndex) == 0x00000C, "Member 'BP_PuzzleSelectionComponent_C_ToggleSlotOfItem::CallFunc_GetSlotIndexOfItem_SlotIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleSlotOfItem, CallFunc_Array_Add_ReturnValue) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_ToggleSlotOfItem::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleSlotOfItem, CallFunc_Map_Find_Value) == 0x000020, "Member 'BP_PuzzleSelectionComponent_C_ToggleSlotOfItem::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleSlotOfItem, CallFunc_Map_Find_ReturnValue) == 0x000060, "Member 'BP_PuzzleSelectionComponent_C_ToggleSlotOfItem::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleSlotOfItem, CallFunc_Array_RemoveItem_ReturnValue) == 0x000061, "Member 'BP_PuzzleSelectionComponent_C_ToggleSlotOfItem::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_ToggleSlotOfItem, K2Node_MakeStruct_FPuzzleSlot) == 0x000070, "Member 'BP_PuzzleSelectionComponent_C_ToggleSlotOfItem::K2Node_MakeStruct_FPuzzleSlot' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.EnableSlotOfItem
// 0x0008 (0x0008 - 0x0000)
struct BP_PuzzleSelectionComponent_C_EnableSlotOfItem final
{
public:
	class UPrimitiveComponent*                    PuzzleItem;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_EnableSlotOfItem) == 0x000008, "Wrong alignment on BP_PuzzleSelectionComponent_C_EnableSlotOfItem");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_EnableSlotOfItem) == 0x000008, "Wrong size on BP_PuzzleSelectionComponent_C_EnableSlotOfItem");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_EnableSlotOfItem, PuzzleItem) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_EnableSlotOfItem::PuzzleItem' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.DisableSlotOfItem
// 0x0008 (0x0008 - 0x0000)
struct BP_PuzzleSelectionComponent_C_DisableSlotOfItem final
{
public:
	class UPrimitiveComponent*                    PuzzleItem;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_DisableSlotOfItem) == 0x000008, "Wrong alignment on BP_PuzzleSelectionComponent_C_DisableSlotOfItem");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_DisableSlotOfItem) == 0x000008, "Wrong size on BP_PuzzleSelectionComponent_C_DisableSlotOfItem");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DisableSlotOfItem, PuzzleItem) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_DisableSlotOfItem::PuzzleItem' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.GetSlotIndexOfItem
// 0x0090 (0x0090 - 0x0000)
struct BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem final
{
public:
	class UPrimitiveComponent*                    PuzzleItem;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_Map_Keys_Keys;                            // 0x0018(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0xF];                                       // 0x0031(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPuzzleSlot                           CallFunc_Map_Find_Value;                           // 0x0040(0x0040)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem) == 0x000010, "Wrong alignment on BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem) == 0x000090, "Wrong size on BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem, PuzzleItem) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem::PuzzleItem' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem, SlotIndex) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem::SlotIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem, CallFunc_Map_Keys_Keys) == 0x000018, "Member 'BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem, CallFunc_Array_Get_Item) == 0x00002C, "Member 'BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem, CallFunc_Map_Find_Value) == 0x000040, "Member 'BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem, CallFunc_Map_Find_ReturnValue) == 0x000080, "Member 'BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000081, "Member 'BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem, CallFunc_BooleanAND_ReturnValue) == 0x000082, "Member 'BP_PuzzleSelectionComponent_C_GetSlotIndexOfItem::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.IsSlotIndexDisabled
// 0x0030 (0x0030 - 0x0000)
struct BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CachedArray;                                       // 0x0008(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled) == 0x000008, "Wrong alignment on BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled) == 0x000030, "Wrong size on BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled, Index_0) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled::Index_0' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled, ReturnValue) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled, CachedArray) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled::CachedArray' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00002D, "Member 'BP_PuzzleSelectionComponent_C_IsSlotIndexDisabled::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.GetDisabledSlotIndices
// 0x0010 (0x0010 - 0x0000)
struct BP_PuzzleSelectionComponent_C_GetDisabledSlotIndices final
{
public:
	TArray<int32>                                 DisabledIndices_0;                                 // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_GetDisabledSlotIndices) == 0x000008, "Wrong alignment on BP_PuzzleSelectionComponent_C_GetDisabledSlotIndices");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_GetDisabledSlotIndices) == 0x000010, "Wrong size on BP_PuzzleSelectionComponent_C_GetDisabledSlotIndices");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetDisabledSlotIndices, DisabledIndices_0) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_GetDisabledSlotIndices::DisabledIndices_0' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.IncrementHorizontalIndex
// 0x0058 (0x0058 - 0x0000)
struct BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex final
{
public:
	int32                                         CurrentIndex;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreviousSelectedIndex;                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NavigationSuccessful;                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PreviousIndex;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSlotIndexDisabled_ReturnValue;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex) == 0x000058, "Wrong size on BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex, CurrentIndex) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex::CurrentIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex, PreviousSelectedIndex) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex::PreviousSelectedIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex, NavigationSuccessful) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex::NavigationSuccessful' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex, PreviousIndex) == 0x00000C, "Member 'BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex::PreviousIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex, Temp_int_Variable) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex, CallFunc_IsSlotIndexDisabled_ReturnValue) == 0x000014, "Member 'BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex::CallFunc_IsSlotIndexDisabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex, CallFunc_Subtract_IntInt_ReturnValue) == 0x000020, "Member 'BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex, CallFunc_Add_IntInt_ReturnValue_1) == 0x000024, "Member 'BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000028, "Member 'BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x00002C, "Member 'BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex, CallFunc_FCeil_ReturnValue) == 0x000034, "Member 'BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex::CallFunc_FCeil_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex, CallFunc_Multiply_IntInt_ReturnValue) == 0x000038, "Member 'BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00003C, "Member 'BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex, CallFunc_Clamp_ReturnValue) == 0x000040, "Member 'BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex, Temp_bool_Variable) == 0x000044, "Member 'BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000048, "Member 'BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex, CallFunc_Add_IntInt_ReturnValue_2) == 0x00004C, "Member 'BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex, K2Node_Select_Default) == 0x000050, "Member 'BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000054, "Member 'BP_PuzzleSelectionComponent_C_IncrementHorizontalIndex::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.DecrementHorizontalIndex
// 0x0058 (0x0058 - 0x0000)
struct BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex final
{
public:
	int32                                         CurrentIndex;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreviousSelectedIndex;                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NavigationSuccessful;                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PreviousIndex;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSlotIndexDisabled_ReturnValue;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_3;            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex) == 0x000058, "Wrong size on BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex, CurrentIndex) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex::CurrentIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex, PreviousSelectedIndex) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex::PreviousSelectedIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex, NavigationSuccessful) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex::NavigationSuccessful' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex, PreviousIndex) == 0x00000C, "Member 'BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex::PreviousIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex, Temp_int_Variable) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex, CallFunc_IsSlotIndexDisabled_ReturnValue) == 0x000014, "Member 'BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex::CallFunc_IsSlotIndexDisabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex, CallFunc_Subtract_IntInt_ReturnValue) == 0x000018, "Member 'BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex, Temp_int_Variable_1) == 0x00001C, "Member 'BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000020, "Member 'BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000028, "Member 'BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x00002C, "Member 'BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex, CallFunc_FCeil_ReturnValue) == 0x000038, "Member 'BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex::CallFunc_FCeil_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex, CallFunc_Multiply_IntInt_ReturnValue) == 0x00003C, "Member 'BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000040, "Member 'BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex, CallFunc_Clamp_ReturnValue) == 0x000044, "Member 'BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex, Temp_bool_Variable) == 0x000048, "Member 'BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex, CallFunc_Subtract_IntInt_ReturnValue_3) == 0x00004C, "Member 'BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex::CallFunc_Subtract_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex, K2Node_Select_Default) == 0x000050, "Member 'BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000054, "Member 'BP_PuzzleSelectionComponent_C_DecrementHorizontalIndex::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.IncrementVerticalIndex
// 0x002C (0x002C - 0x0000)
struct BP_PuzzleSelectionComponent_C_IncrementVerticalIndex final
{
public:
	int32                                         CurrentIndex;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreviousSelectedIndex;                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NavigationSuccessful;                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PreviousIndex;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSlotIndexDisabled_ReturnValue;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_IncrementVerticalIndex) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_IncrementVerticalIndex");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_IncrementVerticalIndex) == 0x00002C, "Wrong size on BP_PuzzleSelectionComponent_C_IncrementVerticalIndex");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementVerticalIndex, CurrentIndex) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_IncrementVerticalIndex::CurrentIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementVerticalIndex, PreviousSelectedIndex) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_IncrementVerticalIndex::PreviousSelectedIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementVerticalIndex, NavigationSuccessful) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_IncrementVerticalIndex::NavigationSuccessful' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementVerticalIndex, PreviousIndex) == 0x00000C, "Member 'BP_PuzzleSelectionComponent_C_IncrementVerticalIndex::PreviousIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementVerticalIndex, Temp_int_Variable) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_IncrementVerticalIndex::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementVerticalIndex, CallFunc_IsSlotIndexDisabled_ReturnValue) == 0x000014, "Member 'BP_PuzzleSelectionComponent_C_IncrementVerticalIndex::CallFunc_IsSlotIndexDisabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementVerticalIndex, Temp_bool_Variable) == 0x000015, "Member 'BP_PuzzleSelectionComponent_C_IncrementVerticalIndex::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementVerticalIndex, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_PuzzleSelectionComponent_C_IncrementVerticalIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementVerticalIndex, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'BP_PuzzleSelectionComponent_C_IncrementVerticalIndex::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementVerticalIndex, CallFunc_Subtract_IntInt_ReturnValue) == 0x000020, "Member 'BP_PuzzleSelectionComponent_C_IncrementVerticalIndex::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementVerticalIndex, CallFunc_Add_IntInt_ReturnValue_1) == 0x000024, "Member 'BP_PuzzleSelectionComponent_C_IncrementVerticalIndex::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementVerticalIndex, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000028, "Member 'BP_PuzzleSelectionComponent_C_IncrementVerticalIndex::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementVerticalIndex, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000029, "Member 'BP_PuzzleSelectionComponent_C_IncrementVerticalIndex::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IncrementVerticalIndex, K2Node_Select_Default) == 0x00002A, "Member 'BP_PuzzleSelectionComponent_C_IncrementVerticalIndex::K2Node_Select_Default' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.DecrementVerticalIndex
// 0x0028 (0x0028 - 0x0000)
struct BP_PuzzleSelectionComponent_C_DecrementVerticalIndex final
{
public:
	int32                                         CurrentIndex;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreviousSelectedIndex;                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NavigationSuccessful;                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PreviousIndex;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSlotIndexDisabled_ReturnValue;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_DecrementVerticalIndex) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_DecrementVerticalIndex");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_DecrementVerticalIndex) == 0x000028, "Wrong size on BP_PuzzleSelectionComponent_C_DecrementVerticalIndex");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementVerticalIndex, CurrentIndex) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_DecrementVerticalIndex::CurrentIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementVerticalIndex, PreviousSelectedIndex) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_DecrementVerticalIndex::PreviousSelectedIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementVerticalIndex, NavigationSuccessful) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_DecrementVerticalIndex::NavigationSuccessful' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementVerticalIndex, PreviousIndex) == 0x00000C, "Member 'BP_PuzzleSelectionComponent_C_DecrementVerticalIndex::PreviousIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementVerticalIndex, Temp_int_Variable) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_DecrementVerticalIndex::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementVerticalIndex, CallFunc_IsSlotIndexDisabled_ReturnValue) == 0x000014, "Member 'BP_PuzzleSelectionComponent_C_DecrementVerticalIndex::CallFunc_IsSlotIndexDisabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementVerticalIndex, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000015, "Member 'BP_PuzzleSelectionComponent_C_DecrementVerticalIndex::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementVerticalIndex, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000016, "Member 'BP_PuzzleSelectionComponent_C_DecrementVerticalIndex::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementVerticalIndex, Temp_bool_Variable) == 0x000017, "Member 'BP_PuzzleSelectionComponent_C_DecrementVerticalIndex::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementVerticalIndex, CallFunc_Multiply_IntInt_ReturnValue) == 0x000018, "Member 'BP_PuzzleSelectionComponent_C_DecrementVerticalIndex::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementVerticalIndex, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_PuzzleSelectionComponent_C_DecrementVerticalIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementVerticalIndex, CallFunc_Subtract_IntInt_ReturnValue) == 0x000020, "Member 'BP_PuzzleSelectionComponent_C_DecrementVerticalIndex::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementVerticalIndex, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'BP_PuzzleSelectionComponent_C_DecrementVerticalIndex::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DecrementVerticalIndex, K2Node_Select_Default) == 0x000025, "Member 'BP_PuzzleSelectionComponent_C_DecrementVerticalIndex::K2Node_Select_Default' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.GetIsHoldingItem
// 0x0001 (0x0001 - 0x0000)
struct BP_PuzzleSelectionComponent_C_GetIsHoldingItem final
{
public:
	bool                                          IsHoldingItem;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_GetIsHoldingItem) == 0x000001, "Wrong alignment on BP_PuzzleSelectionComponent_C_GetIsHoldingItem");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_GetIsHoldingItem) == 0x000001, "Wrong size on BP_PuzzleSelectionComponent_C_GetIsHoldingItem");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetIsHoldingItem, IsHoldingItem) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_GetIsHoldingItem::IsHoldingItem' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.FindFirstEnabledSlot
// 0x0018 (0x0018 - 0x0000)
struct BP_PuzzleSelectionComponent_C_FindFirstEnabledSlot final
{
public:
	int32                                         EnabledIndex;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSlotIndexDisabled_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_FindFirstEnabledSlot) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_FindFirstEnabledSlot");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_FindFirstEnabledSlot) == 0x000018, "Wrong size on BP_PuzzleSelectionComponent_C_FindFirstEnabledSlot");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_FindFirstEnabledSlot, EnabledIndex) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_FindFirstEnabledSlot::EnabledIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_FindFirstEnabledSlot, Success) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_FindFirstEnabledSlot::Success' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_FindFirstEnabledSlot, Temp_int_Variable) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_FindFirstEnabledSlot::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_FindFirstEnabledSlot, CallFunc_Subtract_IntInt_ReturnValue) == 0x00000C, "Member 'BP_PuzzleSelectionComponent_C_FindFirstEnabledSlot::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_FindFirstEnabledSlot, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_FindFirstEnabledSlot::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_FindFirstEnabledSlot, CallFunc_IsSlotIndexDisabled_ReturnValue) == 0x000011, "Member 'BP_PuzzleSelectionComponent_C_FindFirstEnabledSlot::CallFunc_IsSlotIndexDisabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_FindFirstEnabledSlot, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BP_PuzzleSelectionComponent_C_FindFirstEnabledSlot::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.FindAndSetFirstEnabledSlot
// 0x0008 (0x0008 - 0x0000)
struct BP_PuzzleSelectionComponent_C_FindAndSetFirstEnabledSlot final
{
public:
	int32                                         CallFunc_FindFirstEnabledSlot_EnabledIndex;        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindFirstEnabledSlot_Success;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_FindAndSetFirstEnabledSlot) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_FindAndSetFirstEnabledSlot");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_FindAndSetFirstEnabledSlot) == 0x000008, "Wrong size on BP_PuzzleSelectionComponent_C_FindAndSetFirstEnabledSlot");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_FindAndSetFirstEnabledSlot, CallFunc_FindFirstEnabledSlot_EnabledIndex) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_FindAndSetFirstEnabledSlot::CallFunc_FindFirstEnabledSlot_EnabledIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_FindAndSetFirstEnabledSlot, CallFunc_FindFirstEnabledSlot_Success) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_FindAndSetFirstEnabledSlot::CallFunc_FindFirstEnabledSlot_Success' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.SetSelectedItemIndex
// 0x000C (0x000C - 0x0000)
struct BP_PuzzleSelectionComponent_C_SetSelectedItemIndex final
{
public:
	int32                                         CurrentItemIndex_0;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_SetSelectedItemIndex) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_SetSelectedItemIndex");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_SetSelectedItemIndex) == 0x00000C, "Wrong size on BP_PuzzleSelectionComponent_C_SetSelectedItemIndex");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetSelectedItemIndex, CurrentItemIndex_0) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_SetSelectedItemIndex::CurrentItemIndex_0' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetSelectedItemIndex, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_SetSelectedItemIndex::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetSelectedItemIndex, CallFunc_Clamp_ReturnValue) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_SetSelectedItemIndex::CallFunc_Clamp_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.SetSelectedItemIndexOfItem
// 0x0010 (0x0010 - 0x0000)
struct BP_PuzzleSelectionComponent_C_SetSelectedItemIndexOfItem final
{
public:
	class UPrimitiveComponent*                    PuzzleItem;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndexOfItem_SlotIndex;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_SetSelectedItemIndexOfItem) == 0x000008, "Wrong alignment on BP_PuzzleSelectionComponent_C_SetSelectedItemIndexOfItem");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_SetSelectedItemIndexOfItem) == 0x000010, "Wrong size on BP_PuzzleSelectionComponent_C_SetSelectedItemIndexOfItem");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetSelectedItemIndexOfItem, PuzzleItem) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_SetSelectedItemIndexOfItem::PuzzleItem' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SetSelectedItemIndexOfItem, CallFunc_GetSlotIndexOfItem_SlotIndex) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_SetSelectedItemIndexOfItem::CallFunc_GetSlotIndexOfItem_SlotIndex' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.FindFirstDisabledSlot
// 0x0090 (0x0090 - 0x0000)
struct BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_Map_Keys_Keys;                            // 0x0018(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0xF];                                       // 0x0031(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPuzzleSlot                           CallFunc_Map_Find_Value;                           // 0x0040(0x0040)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot) == 0x000010, "Wrong alignment on BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot) == 0x000090, "Wrong size on BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot, Index_0) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot::Index_0' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot, Success) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot::Success' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot, CallFunc_Map_Keys_Keys) == 0x000018, "Member 'BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot, CallFunc_Array_Get_Item) == 0x00002C, "Member 'BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot, CallFunc_Map_Find_Value) == 0x000040, "Member 'BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot, CallFunc_Map_Find_ReturnValue) == 0x000080, "Member 'BP_PuzzleSelectionComponent_C_FindFirstDisabledSlot::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.DiscreetSwap
// 0x000C (0x000C - 0x0000)
struct BP_PuzzleSelectionComponent_C_DiscreetSwap final
{
public:
	int32                                         FromIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ToIndex;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SwapItemsBetweenSlots_SwapSuccessful;     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_DiscreetSwap) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_DiscreetSwap");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_DiscreetSwap) == 0x00000C, "Wrong size on BP_PuzzleSelectionComponent_C_DiscreetSwap");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DiscreetSwap, FromIndex) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_DiscreetSwap::FromIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DiscreetSwap, ToIndex) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_DiscreetSwap::ToIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_DiscreetSwap, CallFunc_SwapItemsBetweenSlots_SwapSuccessful) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_DiscreetSwap::CallFunc_SwapItemsBetweenSlots_SwapSuccessful' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.SwapTransformsOfTwoIndices
// 0x02F0 (0x02F0 - 0x0000)
struct BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices final
{
public:
	int32                                         FromIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ToIndex;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetItemInIndex_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetItemInIndex_ReturnValue_1;             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSlotTransformInIndex_ReturnValue;      // 0x0020(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetSlotTransformInIndex_ReturnValue_1;    // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSlotTransformInIndex_ReturnValue_2;    // 0x00D0(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetSlotTransformInIndex_ReturnValue_3;    // 0x0100(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0180(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x01B0(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeTransform_SweepHitResult;   // 0x01E0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeTransform_SweepHitResult_1; // 0x0268(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices) == 0x000010, "Wrong alignment on BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices) == 0x0002F0, "Wrong size on BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, FromIndex) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::FromIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, ToIndex) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::ToIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, CallFunc_GetItemInIndex_ReturnValue) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::CallFunc_GetItemInIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, CallFunc_GetItemInIndex_ReturnValue_1) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::CallFunc_GetItemInIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, CallFunc_GetSlotTransformInIndex_ReturnValue) == 0x000020, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::CallFunc_GetSlotTransformInIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, CallFunc_GetSlotTransformInIndex_ReturnValue_1) == 0x000050, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::CallFunc_GetSlotTransformInIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, CallFunc_BreakTransform_Location) == 0x000080, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, CallFunc_BreakTransform_Rotation) == 0x00008C, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, CallFunc_BreakTransform_Scale) == 0x000098, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, CallFunc_BreakTransform_Location_1) == 0x0000A4, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, CallFunc_BreakTransform_Rotation_1) == 0x0000B0, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, CallFunc_BreakTransform_Scale_1) == 0x0000BC, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, CallFunc_GetSlotTransformInIndex_ReturnValue_2) == 0x0000D0, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::CallFunc_GetSlotTransformInIndex_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, CallFunc_GetSlotTransformInIndex_ReturnValue_3) == 0x000100, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::CallFunc_GetSlotTransformInIndex_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, CallFunc_BreakTransform_Location_2) == 0x000130, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, CallFunc_BreakTransform_Rotation_2) == 0x00013C, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, CallFunc_BreakTransform_Scale_2) == 0x000148, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, CallFunc_BreakTransform_Location_3) == 0x000154, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, CallFunc_BreakTransform_Rotation_3) == 0x000160, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, CallFunc_BreakTransform_Scale_3) == 0x00016C, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, CallFunc_MakeTransform_ReturnValue) == 0x000180, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, CallFunc_MakeTransform_ReturnValue_1) == 0x0001B0, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, CallFunc_K2_SetRelativeTransform_SweepHitResult) == 0x0001E0, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::CallFunc_K2_SetRelativeTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices, CallFunc_K2_SetRelativeTransform_SweepHitResult_1) == 0x000268, "Member 'BP_PuzzleSelectionComponent_C_SwapTransformsOfTwoIndices::CallFunc_K2_SetRelativeTransform_SweepHitResult_1' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.GetState
// 0x0001 (0x0001 - 0x0000)
struct BP_PuzzleSelectionComponent_C_GetState final
{
public:
	EPuzzleMovementStates                         State_0;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_GetState) == 0x000001, "Wrong alignment on BP_PuzzleSelectionComponent_C_GetState");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_GetState) == 0x000001, "Wrong size on BP_PuzzleSelectionComponent_C_GetState");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetState, State_0) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_GetState::State_0' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.GetSlotTransformOfItem
// 0x0080 (0x0080 - 0x0000)
struct BP_PuzzleSelectionComponent_C_GetSlotTransformOfItem final
{
public:
	class UPrimitiveComponent*                    PuzzleItem;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SlotTransform;                                     // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetSlotIndexOfItem_SlotIndex;             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSlotTransformInIndex_ReturnValue;      // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_GetSlotTransformOfItem) == 0x000010, "Wrong alignment on BP_PuzzleSelectionComponent_C_GetSlotTransformOfItem");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_GetSlotTransformOfItem) == 0x000080, "Wrong size on BP_PuzzleSelectionComponent_C_GetSlotTransformOfItem");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSlotTransformOfItem, PuzzleItem) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_GetSlotTransformOfItem::PuzzleItem' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSlotTransformOfItem, SlotTransform) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_GetSlotTransformOfItem::SlotTransform' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSlotTransformOfItem, CallFunc_GetSlotIndexOfItem_SlotIndex) == 0x000040, "Member 'BP_PuzzleSelectionComponent_C_GetSlotTransformOfItem::CallFunc_GetSlotIndexOfItem_SlotIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_GetSlotTransformOfItem, CallFunc_GetSlotTransformInIndex_ReturnValue) == 0x000050, "Member 'BP_PuzzleSelectionComponent_C_GetSlotTransformOfItem::CallFunc_GetSlotTransformInIndex_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.IsAnySlotsEnabled
// 0x0014 (0x0014 - 0x0000)
struct BP_PuzzleSelectionComponent_C_IsAnySlotsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSlotIndexDisabled_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_IsAnySlotsEnabled) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_IsAnySlotsEnabled");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_IsAnySlotsEnabled) == 0x000014, "Wrong size on BP_PuzzleSelectionComponent_C_IsAnySlotsEnabled");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsAnySlotsEnabled, ReturnValue) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_IsAnySlotsEnabled::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsAnySlotsEnabled, Temp_int_Variable) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_IsAnySlotsEnabled::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsAnySlotsEnabled, CallFunc_Subtract_IntInt_ReturnValue) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_IsAnySlotsEnabled::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsAnySlotsEnabled, CallFunc_IsSlotIndexDisabled_ReturnValue) == 0x00000C, "Member 'BP_PuzzleSelectionComponent_C_IsAnySlotsEnabled::CallFunc_IsSlotIndexDisabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsAnySlotsEnabled, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00000D, "Member 'BP_PuzzleSelectionComponent_C_IsAnySlotsEnabled::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsAnySlotsEnabled, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_IsAnySlotsEnabled::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.HandleHighlightOnFailedNavigation
// 0x000C (0x000C - 0x0000)
struct BP_PuzzleSelectionComponent_C_HandleHighlightOnFailedNavigation final
{
public:
	bool                                          NavigationSucessful;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndex;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_HandleHighlightOnFailedNavigation) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_HandleHighlightOnFailedNavigation");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_HandleHighlightOnFailedNavigation) == 0x00000C, "Wrong size on BP_PuzzleSelectionComponent_C_HandleHighlightOnFailedNavigation");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_HandleHighlightOnFailedNavigation, NavigationSucessful) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_HandleHighlightOnFailedNavigation::NavigationSucessful' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_HandleHighlightOnFailedNavigation, SlotIndex) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_HandleHighlightOnFailedNavigation::SlotIndex' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_HandleHighlightOnFailedNavigation, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_HandleHighlightOnFailedNavigation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_HandleHighlightOnFailedNavigation, CallFunc_BooleanAND_ReturnValue) == 0x000009, "Member 'BP_PuzzleSelectionComponent_C_HandleHighlightOnFailedNavigation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_HandleHighlightOnFailedNavigation, CallFunc_BooleanAND_ReturnValue_1) == 0x00000A, "Member 'BP_PuzzleSelectionComponent_C_HandleHighlightOnFailedNavigation::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_HandleHighlightOnFailedNavigation, CallFunc_Not_PreBool_ReturnValue_1) == 0x00000B, "Member 'BP_PuzzleSelectionComponent_C_HandleHighlightOnFailedNavigation::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.SavePuzzle
// 0x00B0 (0x00B0 - 0x0000)
struct BP_PuzzleSelectionComponent_C_SavePuzzle final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_Map_Keys_Keys;                            // 0x0010(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPuzzleSlot                           CallFunc_Map_Find_Value;                           // 0x0030(0x0040)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetRelativeTransform_ReturnValue;         // 0x0080(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_SavePuzzle) == 0x000010, "Wrong alignment on BP_PuzzleSelectionComponent_C_SavePuzzle");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_SavePuzzle) == 0x0000B0, "Wrong size on BP_PuzzleSelectionComponent_C_SavePuzzle");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SavePuzzle, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_SavePuzzle::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SavePuzzle, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_SavePuzzle::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SavePuzzle, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_SavePuzzle::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SavePuzzle, CallFunc_Map_Keys_Keys) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_SavePuzzle::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SavePuzzle, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_PuzzleSelectionComponent_C_SavePuzzle::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SavePuzzle, CallFunc_Array_Get_Item) == 0x000024, "Member 'BP_PuzzleSelectionComponent_C_SavePuzzle::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SavePuzzle, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'BP_PuzzleSelectionComponent_C_SavePuzzle::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SavePuzzle, CallFunc_Map_Find_Value) == 0x000030, "Member 'BP_PuzzleSelectionComponent_C_SavePuzzle::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SavePuzzle, CallFunc_Map_Find_ReturnValue) == 0x000070, "Member 'BP_PuzzleSelectionComponent_C_SavePuzzle::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_SavePuzzle, CallFunc_GetRelativeTransform_ReturnValue) == 0x000080, "Member 'BP_PuzzleSelectionComponent_C_SavePuzzle::CallFunc_GetRelativeTransform_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.LoadPuzzle
// 0x0240 (0x0240 - 0x0000)
struct BP_PuzzleSelectionComponent_C_LoadPuzzle final
{
public:
	bool                                          CallFunc_IsSavedArrayTheSameLengthAsSetup_ReturnValue; // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSavedItemsTheSameAsSetup_IsItemsTheSame; // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_Map_Keys_Keys;                            // 0x0018(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0xF];                                       // 0x0031(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Array_Get_Item_1;                         // 0x0040(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item_2;                         // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item_3;                         // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFPuzzleSlot                           CallFunc_Map_Find_Value;                           // 0x00A0(0x0040)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0110(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0140(0x0030)(IsPlainOldData, NoDestructor)
	struct FFPuzzleSlot                           K2Node_MakeStruct_FPuzzleSlot;                     // 0x0170(0x0040)(IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeTransform_SweepHitResult;   // 0x01B0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_LoadPuzzle) == 0x000010, "Wrong alignment on BP_PuzzleSelectionComponent_C_LoadPuzzle");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_LoadPuzzle) == 0x000240, "Wrong size on BP_PuzzleSelectionComponent_C_LoadPuzzle");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, CallFunc_IsSavedArrayTheSameLengthAsSetup_ReturnValue) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::CallFunc_IsSavedArrayTheSameLengthAsSetup_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, CallFunc_IsSavedItemsTheSameAsSetup_IsItemsTheSame) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::CallFunc_IsSavedItemsTheSameAsSetup_IsItemsTheSame' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, CallFunc_Map_Keys_Keys) == 0x000018, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, CallFunc_Array_Get_Item) == 0x00002C, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, CallFunc_Array_Get_Item_1) == 0x000040, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, CallFunc_BreakTransform_Location) == 0x000070, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, CallFunc_BreakTransform_Rotation) == 0x00007C, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, CallFunc_BreakTransform_Scale) == 0x000088, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, CallFunc_Array_Get_Item_2) == 0x000094, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, CallFunc_Array_Get_Item_3) == 0x000098, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, CallFunc_Map_Find_Value) == 0x0000A0, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, CallFunc_Map_Find_ReturnValue) == 0x0000E0, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, CallFunc_BreakTransform_Location_1) == 0x0000E4, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, CallFunc_BreakTransform_Rotation_1) == 0x0000F0, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, CallFunc_BreakTransform_Scale_1) == 0x0000FC, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, CallFunc_MakeTransform_ReturnValue) == 0x000110, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, CallFunc_MakeTransform_ReturnValue_1) == 0x000140, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, K2Node_MakeStruct_FPuzzleSlot) == 0x000170, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::K2Node_MakeStruct_FPuzzleSlot' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_LoadPuzzle, CallFunc_K2_SetRelativeTransform_SweepHitResult) == 0x0001B0, "Member 'BP_PuzzleSelectionComponent_C_LoadPuzzle::CallFunc_K2_SetRelativeTransform_SweepHitResult' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.StopHighlightOfAllPuzzleItems
// 0x0030 (0x0030 - 0x0000)
struct BP_PuzzleSelectionComponent_C_StopHighlightOfAllPuzzleItems final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_Map_Keys_Keys;                            // 0x0010(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_StopHighlightOfAllPuzzleItems) == 0x000008, "Wrong alignment on BP_PuzzleSelectionComponent_C_StopHighlightOfAllPuzzleItems");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_StopHighlightOfAllPuzzleItems) == 0x000030, "Wrong size on BP_PuzzleSelectionComponent_C_StopHighlightOfAllPuzzleItems");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_StopHighlightOfAllPuzzleItems, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_StopHighlightOfAllPuzzleItems::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_StopHighlightOfAllPuzzleItems, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_StopHighlightOfAllPuzzleItems::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_StopHighlightOfAllPuzzleItems, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_StopHighlightOfAllPuzzleItems::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_StopHighlightOfAllPuzzleItems, CallFunc_Map_Keys_Keys) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_StopHighlightOfAllPuzzleItems::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_StopHighlightOfAllPuzzleItems, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_PuzzleSelectionComponent_C_StopHighlightOfAllPuzzleItems::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_StopHighlightOfAllPuzzleItems, CallFunc_Array_Get_Item) == 0x000024, "Member 'BP_PuzzleSelectionComponent_C_StopHighlightOfAllPuzzleItems::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_StopHighlightOfAllPuzzleItems, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'BP_PuzzleSelectionComponent_C_StopHighlightOfAllPuzzleItems::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.IsSavedItemsTheSameAsSetup
// 0x0020 (0x0020 - 0x0000)
struct BP_PuzzleSelectionComponent_C_IsSavedItemsTheSameAsSetup final
{
public:
	bool                                          IsItemsTheSame;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_IsSavedItemsTheSameAsSetup) == 0x000008, "Wrong alignment on BP_PuzzleSelectionComponent_C_IsSavedItemsTheSameAsSetup");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_IsSavedItemsTheSameAsSetup) == 0x000020, "Wrong size on BP_PuzzleSelectionComponent_C_IsSavedItemsTheSameAsSetup");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsSavedItemsTheSameAsSetup, IsItemsTheSame) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_IsSavedItemsTheSameAsSetup::IsItemsTheSame' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsSavedItemsTheSameAsSetup, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_IsSavedItemsTheSameAsSetup::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsSavedItemsTheSameAsSetup, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_IsSavedItemsTheSameAsSetup::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsSavedItemsTheSameAsSetup, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_PuzzleSelectionComponent_C_IsSavedItemsTheSameAsSetup::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsSavedItemsTheSameAsSetup, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_PuzzleSelectionComponent_C_IsSavedItemsTheSameAsSetup::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsSavedItemsTheSameAsSetup, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BP_PuzzleSelectionComponent_C_IsSavedItemsTheSameAsSetup::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsSavedItemsTheSameAsSetup, CallFunc_Array_Contains_ReturnValue) == 0x00001C, "Member 'BP_PuzzleSelectionComponent_C_IsSavedItemsTheSameAsSetup::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsSavedItemsTheSameAsSetup, CallFunc_Less_IntInt_ReturnValue) == 0x00001D, "Member 'BP_PuzzleSelectionComponent_C_IsSavedItemsTheSameAsSetup::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PuzzleSelectionComponent.BP_PuzzleSelectionComponent_C.IsSavedArrayTheSameLengthAsSetup
// 0x0010 (0x0010 - 0x0000)
struct BP_PuzzleSelectionComponent_C_IsSavedArrayTheSameLengthAsSetup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Length_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_PuzzleSelectionComponent_C_IsSavedArrayTheSameLengthAsSetup) == 0x000004, "Wrong alignment on BP_PuzzleSelectionComponent_C_IsSavedArrayTheSameLengthAsSetup");
static_assert(sizeof(BP_PuzzleSelectionComponent_C_IsSavedArrayTheSameLengthAsSetup) == 0x000010, "Wrong size on BP_PuzzleSelectionComponent_C_IsSavedArrayTheSameLengthAsSetup");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsSavedArrayTheSameLengthAsSetup, ReturnValue) == 0x000000, "Member 'BP_PuzzleSelectionComponent_C_IsSavedArrayTheSameLengthAsSetup::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsSavedArrayTheSameLengthAsSetup, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'BP_PuzzleSelectionComponent_C_IsSavedArrayTheSameLengthAsSetup::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsSavedArrayTheSameLengthAsSetup, CallFunc_Map_Length_ReturnValue) == 0x000008, "Member 'BP_PuzzleSelectionComponent_C_IsSavedArrayTheSameLengthAsSetup::CallFunc_Map_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PuzzleSelectionComponent_C_IsSavedArrayTheSameLengthAsSetup, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00000C, "Member 'BP_PuzzleSelectionComponent_C_IsSavedArrayTheSameLengthAsSetup::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

}

