#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BumpIntoPhysicsAsset

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BumpIntoPhysicsAsset.BP_BumpIntoPhysicsAsset_C
// 0x0098 (0x02D0 - 0x0238)
class ABP_BumpIntoPhysicsAsset_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFMODAudioComponent*                    HitSoundSource;                                    // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mesh;                                              // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PhysicsConstraint;                                 // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            JigglyMesh;                                        // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MassMultiplier;                                    // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AngularDamping;                                    // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LinearDamping;                                     // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementLimit;                                     // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELinearConstraintMotion                       Movement_Type_X;                                   // 0x027C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELinearConstraintMotion                       Movement_Type_Y;                                   // 0x027D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELinearConstraintMotion                       Movement_Type_Z;                                   // 0x027E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SeparateMovementAxis;                              // 0x027F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         MovementLimitX;                                    // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementLimitY;                                    // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementLimitZ;                                    // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         MovementTypeOldForReference;                       // 0x028C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_28D[0x3];                                      // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Swing1Limit;                                       // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Swing2Limit;                                       // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TwistLimit;                                        // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Swing1TypeOldForReference;                         // 0x029C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Swing2TypeOldForReference;                         // 0x029D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         TwistTypeOldForReference;                          // 0x029E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Linear_Drive_X;                                    // 0x029F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Linear_Drive_Y;                                    // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Linear_Drive_Z;                                    // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A2[0x2];                                      // 0x02A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Strength_Linear;                                   // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damping_Linear;                                    // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAngularDriveMode                             AngularDriveType;                                  // 0x02AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Slerp;                                             // 0x02AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Twist;                                             // 0x02AE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Swing;                                             // 0x02AF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         StrengthAngular;                                   // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             HitSound;                                          // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayBetweenSounds;                                // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELinearConstraintMotion                       Movement_Type;                                     // 0x02C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAngularConstraintMotion                      Swing1Type;                                        // 0x02C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAngularConstraintMotion                      Swing2Type;                                        // 0x02C6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAngularConstraintMotion                      TwistType;                                         // 0x02C7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enabled;                                           // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_BumpIntoPhysicsAsset(int32 EntryPoint);
	void ResetCooldown();
	void BndEvt__Mesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BumpIntoPhysicsAsset_C">();
	}
	static class ABP_BumpIntoPhysicsAsset_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BumpIntoPhysicsAsset_C>();
	}
};
static_assert(alignof(ABP_BumpIntoPhysicsAsset_C) == 0x000008, "Wrong alignment on ABP_BumpIntoPhysicsAsset_C");
static_assert(sizeof(ABP_BumpIntoPhysicsAsset_C) == 0x0002D0, "Wrong size on ABP_BumpIntoPhysicsAsset_C");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, UberGraphFrame) == 0x000238, "Member 'ABP_BumpIntoPhysicsAsset_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, HitSoundSource) == 0x000240, "Member 'ABP_BumpIntoPhysicsAsset_C::HitSoundSource' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, Mesh) == 0x000248, "Member 'ABP_BumpIntoPhysicsAsset_C::Mesh' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, PhysicsConstraint) == 0x000250, "Member 'ABP_BumpIntoPhysicsAsset_C::PhysicsConstraint' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, DefaultSceneRoot) == 0x000258, "Member 'ABP_BumpIntoPhysicsAsset_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, JigglyMesh) == 0x000260, "Member 'ABP_BumpIntoPhysicsAsset_C::JigglyMesh' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, Debug) == 0x000268, "Member 'ABP_BumpIntoPhysicsAsset_C::Debug' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, MassMultiplier) == 0x00026C, "Member 'ABP_BumpIntoPhysicsAsset_C::MassMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, AngularDamping) == 0x000270, "Member 'ABP_BumpIntoPhysicsAsset_C::AngularDamping' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, LinearDamping) == 0x000274, "Member 'ABP_BumpIntoPhysicsAsset_C::LinearDamping' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, MovementLimit) == 0x000278, "Member 'ABP_BumpIntoPhysicsAsset_C::MovementLimit' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, Movement_Type_X) == 0x00027C, "Member 'ABP_BumpIntoPhysicsAsset_C::Movement_Type_X' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, Movement_Type_Y) == 0x00027D, "Member 'ABP_BumpIntoPhysicsAsset_C::Movement_Type_Y' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, Movement_Type_Z) == 0x00027E, "Member 'ABP_BumpIntoPhysicsAsset_C::Movement_Type_Z' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, SeparateMovementAxis) == 0x00027F, "Member 'ABP_BumpIntoPhysicsAsset_C::SeparateMovementAxis' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, MovementLimitX) == 0x000280, "Member 'ABP_BumpIntoPhysicsAsset_C::MovementLimitX' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, MovementLimitY) == 0x000284, "Member 'ABP_BumpIntoPhysicsAsset_C::MovementLimitY' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, MovementLimitZ) == 0x000288, "Member 'ABP_BumpIntoPhysicsAsset_C::MovementLimitZ' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, MovementTypeOldForReference) == 0x00028C, "Member 'ABP_BumpIntoPhysicsAsset_C::MovementTypeOldForReference' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, Swing1Limit) == 0x000290, "Member 'ABP_BumpIntoPhysicsAsset_C::Swing1Limit' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, Swing2Limit) == 0x000294, "Member 'ABP_BumpIntoPhysicsAsset_C::Swing2Limit' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, TwistLimit) == 0x000298, "Member 'ABP_BumpIntoPhysicsAsset_C::TwistLimit' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, Swing1TypeOldForReference) == 0x00029C, "Member 'ABP_BumpIntoPhysicsAsset_C::Swing1TypeOldForReference' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, Swing2TypeOldForReference) == 0x00029D, "Member 'ABP_BumpIntoPhysicsAsset_C::Swing2TypeOldForReference' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, TwistTypeOldForReference) == 0x00029E, "Member 'ABP_BumpIntoPhysicsAsset_C::TwistTypeOldForReference' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, Linear_Drive_X) == 0x00029F, "Member 'ABP_BumpIntoPhysicsAsset_C::Linear_Drive_X' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, Linear_Drive_Y) == 0x0002A0, "Member 'ABP_BumpIntoPhysicsAsset_C::Linear_Drive_Y' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, Linear_Drive_Z) == 0x0002A1, "Member 'ABP_BumpIntoPhysicsAsset_C::Linear_Drive_Z' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, Strength_Linear) == 0x0002A4, "Member 'ABP_BumpIntoPhysicsAsset_C::Strength_Linear' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, Damping_Linear) == 0x0002A8, "Member 'ABP_BumpIntoPhysicsAsset_C::Damping_Linear' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, AngularDriveType) == 0x0002AC, "Member 'ABP_BumpIntoPhysicsAsset_C::AngularDriveType' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, Slerp) == 0x0002AD, "Member 'ABP_BumpIntoPhysicsAsset_C::Slerp' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, Twist) == 0x0002AE, "Member 'ABP_BumpIntoPhysicsAsset_C::Twist' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, Swing) == 0x0002AF, "Member 'ABP_BumpIntoPhysicsAsset_C::Swing' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, StrengthAngular) == 0x0002B0, "Member 'ABP_BumpIntoPhysicsAsset_C::StrengthAngular' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, HitSound) == 0x0002B8, "Member 'ABP_BumpIntoPhysicsAsset_C::HitSound' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, DelayBetweenSounds) == 0x0002C0, "Member 'ABP_BumpIntoPhysicsAsset_C::DelayBetweenSounds' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, Movement_Type) == 0x0002C4, "Member 'ABP_BumpIntoPhysicsAsset_C::Movement_Type' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, Swing1Type) == 0x0002C5, "Member 'ABP_BumpIntoPhysicsAsset_C::Swing1Type' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, Swing2Type) == 0x0002C6, "Member 'ABP_BumpIntoPhysicsAsset_C::Swing2Type' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, TwistType) == 0x0002C7, "Member 'ABP_BumpIntoPhysicsAsset_C::TwistType' has a wrong offset!");
static_assert(offsetof(ABP_BumpIntoPhysicsAsset_C, Enabled) == 0x0002C8, "Member 'ABP_BumpIntoPhysicsAsset_C::Enabled' has a wrong offset!");

}

