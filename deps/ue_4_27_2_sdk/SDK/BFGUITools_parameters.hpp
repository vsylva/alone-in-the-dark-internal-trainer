#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BFGUITools

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BFGUITools.BFGMatrixMath.BuildProjectionMatrix
// 0x0060 (0x0060 - 0x0000)
struct BFGMatrixMath_BuildProjectionMatrix final
{
public:
	struct FIntPoint                              _RenderTargetSize;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraProjectionMode                         _ProjectionType;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _FOV;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _InOrthoWidth;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                _ProjectionMatrix;                                 // 0x0020(0x0040)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_BuildProjectionMatrix) == 0x000010, "Wrong alignment on BFGMatrixMath_BuildProjectionMatrix");
static_assert(sizeof(BFGMatrixMath_BuildProjectionMatrix) == 0x000060, "Wrong size on BFGMatrixMath_BuildProjectionMatrix");
static_assert(offsetof(BFGMatrixMath_BuildProjectionMatrix, _RenderTargetSize) == 0x000000, "Member 'BFGMatrixMath_BuildProjectionMatrix::_RenderTargetSize' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_BuildProjectionMatrix, _ProjectionType) == 0x000008, "Member 'BFGMatrixMath_BuildProjectionMatrix::_ProjectionType' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_BuildProjectionMatrix, _FOV) == 0x00000C, "Member 'BFGMatrixMath_BuildProjectionMatrix::_FOV' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_BuildProjectionMatrix, _InOrthoWidth) == 0x000010, "Member 'BFGMatrixMath_BuildProjectionMatrix::_InOrthoWidth' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_BuildProjectionMatrix, _ProjectionMatrix) == 0x000020, "Member 'BFGMatrixMath_BuildProjectionMatrix::_ProjectionMatrix' has a wrong offset!");

// Function BFGUITools.BFGMatrixMath.ComputeOffCenterProjectionMatrix
// 0x0060 (0x0060 - 0x0000)
struct BFGMatrixMath_ComputeOffCenterProjectionMatrix final
{
public:
	class USceneCaptureComponent2D*               _Component;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                _Point;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _Radius;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                ReturnValue;                                       // 0x0020(0x0040)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_ComputeOffCenterProjectionMatrix) == 0x000010, "Wrong alignment on BFGMatrixMath_ComputeOffCenterProjectionMatrix");
static_assert(sizeof(BFGMatrixMath_ComputeOffCenterProjectionMatrix) == 0x000060, "Wrong size on BFGMatrixMath_ComputeOffCenterProjectionMatrix");
static_assert(offsetof(BFGMatrixMath_ComputeOffCenterProjectionMatrix, _Component) == 0x000000, "Member 'BFGMatrixMath_ComputeOffCenterProjectionMatrix::_Component' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_ComputeOffCenterProjectionMatrix, _Point) == 0x000008, "Member 'BFGMatrixMath_ComputeOffCenterProjectionMatrix::_Point' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_ComputeOffCenterProjectionMatrix, _Radius) == 0x000014, "Member 'BFGMatrixMath_ComputeOffCenterProjectionMatrix::_Radius' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_ComputeOffCenterProjectionMatrix, ReturnValue) == 0x000020, "Member 'BFGMatrixMath_ComputeOffCenterProjectionMatrix::ReturnValue' has a wrong offset!");

// Function BFGUITools.BFGMatrixMath.GetInverseViewProjMatrix
// 0x00C0 (0x00C0 - 0x0000)
struct BFGMatrixMath_GetInverseViewProjMatrix final
{
public:
	struct FMatrix                                _MatView;                                          // 0x0000(0x0040)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatrix                                _MatProj;                                          // 0x0040(0x0040)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatrix                                ReturnValue;                                       // 0x0080(0x0040)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_GetInverseViewProjMatrix) == 0x000010, "Wrong alignment on BFGMatrixMath_GetInverseViewProjMatrix");
static_assert(sizeof(BFGMatrixMath_GetInverseViewProjMatrix) == 0x0000C0, "Wrong size on BFGMatrixMath_GetInverseViewProjMatrix");
static_assert(offsetof(BFGMatrixMath_GetInverseViewProjMatrix, _MatView) == 0x000000, "Member 'BFGMatrixMath_GetInverseViewProjMatrix::_MatView' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetInverseViewProjMatrix, _MatProj) == 0x000040, "Member 'BFGMatrixMath_GetInverseViewProjMatrix::_MatProj' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetInverseViewProjMatrix, ReturnValue) == 0x000080, "Member 'BFGMatrixMath_GetInverseViewProjMatrix::ReturnValue' has a wrong offset!");

// Function BFGUITools.BFGMatrixMath.GetMatrixAsLinearColor
// 0x0090 (0x0090 - 0x0000)
struct BFGMatrixMath_GetMatrixAsLinearColor final
{
public:
	struct FLinearColor                           _Row1;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           _Row2;                                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           _Row3;                                             // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           _Row4;                                             // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatrix                                _M;                                                // 0x0040(0x0040)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          _TransposeOutput;                                  // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFGMatrixMath_GetMatrixAsLinearColor) == 0x000010, "Wrong alignment on BFGMatrixMath_GetMatrixAsLinearColor");
static_assert(sizeof(BFGMatrixMath_GetMatrixAsLinearColor) == 0x000090, "Wrong size on BFGMatrixMath_GetMatrixAsLinearColor");
static_assert(offsetof(BFGMatrixMath_GetMatrixAsLinearColor, _Row1) == 0x000000, "Member 'BFGMatrixMath_GetMatrixAsLinearColor::_Row1' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixAsLinearColor, _Row2) == 0x000010, "Member 'BFGMatrixMath_GetMatrixAsLinearColor::_Row2' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixAsLinearColor, _Row3) == 0x000020, "Member 'BFGMatrixMath_GetMatrixAsLinearColor::_Row3' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixAsLinearColor, _Row4) == 0x000030, "Member 'BFGMatrixMath_GetMatrixAsLinearColor::_Row4' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixAsLinearColor, _M) == 0x000040, "Member 'BFGMatrixMath_GetMatrixAsLinearColor::_M' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixAsLinearColor, _TransposeOutput) == 0x000080, "Member 'BFGMatrixMath_GetMatrixAsLinearColor::_TransposeOutput' has a wrong offset!");

// Function BFGUITools.BFGMatrixMath.GetMatrixFromColor
// 0x0090 (0x0090 - 0x0000)
struct BFGMatrixMath_GetMatrixFromColor final
{
public:
	struct FLinearColor                           _Row1;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           _Row2;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           _Row3;                                             // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           _Row4;                                             // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _TransposeInput;                                   // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                ReturnValue;                                       // 0x0050(0x0040)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_GetMatrixFromColor) == 0x000010, "Wrong alignment on BFGMatrixMath_GetMatrixFromColor");
static_assert(sizeof(BFGMatrixMath_GetMatrixFromColor) == 0x000090, "Wrong size on BFGMatrixMath_GetMatrixFromColor");
static_assert(offsetof(BFGMatrixMath_GetMatrixFromColor, _Row1) == 0x000000, "Member 'BFGMatrixMath_GetMatrixFromColor::_Row1' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixFromColor, _Row2) == 0x000010, "Member 'BFGMatrixMath_GetMatrixFromColor::_Row2' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixFromColor, _Row3) == 0x000020, "Member 'BFGMatrixMath_GetMatrixFromColor::_Row3' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixFromColor, _Row4) == 0x000030, "Member 'BFGMatrixMath_GetMatrixFromColor::_Row4' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixFromColor, _TransposeInput) == 0x000040, "Member 'BFGMatrixMath_GetMatrixFromColor::_TransposeInput' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixFromColor, ReturnValue) == 0x000050, "Member 'BFGMatrixMath_GetMatrixFromColor::ReturnValue' has a wrong offset!");

// Function BFGUITools.BFGMatrixMath.GetMatrixFromTransform
// 0x0080 (0x0080 - 0x0000)
struct BFGMatrixMath_GetMatrixFromTransform final
{
public:
	struct FTransform                             _Transform;                                        // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          _WithScale;                                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0xF];                                       // 0x0031(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                ReturnValue;                                       // 0x0040(0x0040)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_GetMatrixFromTransform) == 0x000010, "Wrong alignment on BFGMatrixMath_GetMatrixFromTransform");
static_assert(sizeof(BFGMatrixMath_GetMatrixFromTransform) == 0x000080, "Wrong size on BFGMatrixMath_GetMatrixFromTransform");
static_assert(offsetof(BFGMatrixMath_GetMatrixFromTransform, _Transform) == 0x000000, "Member 'BFGMatrixMath_GetMatrixFromTransform::_Transform' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixFromTransform, _WithScale) == 0x000030, "Member 'BFGMatrixMath_GetMatrixFromTransform::_WithScale' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetMatrixFromTransform, ReturnValue) == 0x000040, "Member 'BFGMatrixMath_GetMatrixFromTransform::ReturnValue' has a wrong offset!");

// Function BFGUITools.BFGMatrixMath.GetProjectionMatrix
// 0x0050 (0x0050 - 0x0000)
struct BFGMatrixMath_GetProjectionMatrix final
{
public:
	class USceneCaptureComponent2D*               _Component;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                ReturnValue;                                       // 0x0010(0x0040)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_GetProjectionMatrix) == 0x000010, "Wrong alignment on BFGMatrixMath_GetProjectionMatrix");
static_assert(sizeof(BFGMatrixMath_GetProjectionMatrix) == 0x000050, "Wrong size on BFGMatrixMath_GetProjectionMatrix");
static_assert(offsetof(BFGMatrixMath_GetProjectionMatrix, _Component) == 0x000000, "Member 'BFGMatrixMath_GetProjectionMatrix::_Component' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetProjectionMatrix, ReturnValue) == 0x000010, "Member 'BFGMatrixMath_GetProjectionMatrix::ReturnValue' has a wrong offset!");

// Function BFGUITools.BFGMatrixMath.GetViewMatrix
// 0x0050 (0x0050 - 0x0000)
struct BFGMatrixMath_GetViewMatrix final
{
public:
	class USceneCaptureComponent2D*               _Component;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                ReturnValue;                                       // 0x0010(0x0040)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_GetViewMatrix) == 0x000010, "Wrong alignment on BFGMatrixMath_GetViewMatrix");
static_assert(sizeof(BFGMatrixMath_GetViewMatrix) == 0x000050, "Wrong size on BFGMatrixMath_GetViewMatrix");
static_assert(offsetof(BFGMatrixMath_GetViewMatrix, _Component) == 0x000000, "Member 'BFGMatrixMath_GetViewMatrix::_Component' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetViewMatrix, ReturnValue) == 0x000010, "Member 'BFGMatrixMath_GetViewMatrix::ReturnValue' has a wrong offset!");

// Function BFGUITools.BFGMatrixMath.GetViewProjectionMatrix
// 0x0050 (0x0050 - 0x0000)
struct BFGMatrixMath_GetViewProjectionMatrix final
{
public:
	class USceneCaptureComponent2D*               _Component;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                ReturnValue;                                       // 0x0010(0x0040)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_GetViewProjectionMatrix) == 0x000010, "Wrong alignment on BFGMatrixMath_GetViewProjectionMatrix");
static_assert(sizeof(BFGMatrixMath_GetViewProjectionMatrix) == 0x000050, "Wrong size on BFGMatrixMath_GetViewProjectionMatrix");
static_assert(offsetof(BFGMatrixMath_GetViewProjectionMatrix, _Component) == 0x000000, "Member 'BFGMatrixMath_GetViewProjectionMatrix::_Component' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_GetViewProjectionMatrix, ReturnValue) == 0x000010, "Member 'BFGMatrixMath_GetViewProjectionMatrix::ReturnValue' has a wrong offset!");

// Function BFGUITools.BFGMatrixMath.InvertMatrix
// 0x0080 (0x0080 - 0x0000)
struct BFGMatrixMath_InvertMatrix final
{
public:
	struct FMatrix                                _A;                                                // 0x0000(0x0040)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatrix                                ReturnValue;                                       // 0x0040(0x0040)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_InvertMatrix) == 0x000010, "Wrong alignment on BFGMatrixMath_InvertMatrix");
static_assert(sizeof(BFGMatrixMath_InvertMatrix) == 0x000080, "Wrong size on BFGMatrixMath_InvertMatrix");
static_assert(offsetof(BFGMatrixMath_InvertMatrix, _A) == 0x000000, "Member 'BFGMatrixMath_InvertMatrix::_A' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_InvertMatrix, ReturnValue) == 0x000040, "Member 'BFGMatrixMath_InvertMatrix::ReturnValue' has a wrong offset!");

// Function BFGUITools.BFGMatrixMath.InvertMatrixFromColor
// 0x0090 (0x0090 - 0x0000)
struct BFGMatrixMath_InvertMatrixFromColor final
{
public:
	struct FLinearColor                           _Row1;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           _Row2;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           _Row3;                                             // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           _Row4;                                             // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _TransposeInput;                                   // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                ReturnValue;                                       // 0x0050(0x0040)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_InvertMatrixFromColor) == 0x000010, "Wrong alignment on BFGMatrixMath_InvertMatrixFromColor");
static_assert(sizeof(BFGMatrixMath_InvertMatrixFromColor) == 0x000090, "Wrong size on BFGMatrixMath_InvertMatrixFromColor");
static_assert(offsetof(BFGMatrixMath_InvertMatrixFromColor, _Row1) == 0x000000, "Member 'BFGMatrixMath_InvertMatrixFromColor::_Row1' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_InvertMatrixFromColor, _Row2) == 0x000010, "Member 'BFGMatrixMath_InvertMatrixFromColor::_Row2' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_InvertMatrixFromColor, _Row3) == 0x000020, "Member 'BFGMatrixMath_InvertMatrixFromColor::_Row3' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_InvertMatrixFromColor, _Row4) == 0x000030, "Member 'BFGMatrixMath_InvertMatrixFromColor::_Row4' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_InvertMatrixFromColor, _TransposeInput) == 0x000040, "Member 'BFGMatrixMath_InvertMatrixFromColor::_TransposeInput' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_InvertMatrixFromColor, ReturnValue) == 0x000050, "Member 'BFGMatrixMath_InvertMatrixFromColor::ReturnValue' has a wrong offset!");

// Function BFGUITools.BFGMatrixMath.MultiplyMatrices
// 0x00C0 (0x00C0 - 0x0000)
struct BFGMatrixMath_MultiplyMatrices final
{
public:
	struct FMatrix                                _A;                                                // 0x0000(0x0040)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatrix                                _B;                                                // 0x0040(0x0040)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatrix                                ReturnValue;                                       // 0x0080(0x0040)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_MultiplyMatrices) == 0x000010, "Wrong alignment on BFGMatrixMath_MultiplyMatrices");
static_assert(sizeof(BFGMatrixMath_MultiplyMatrices) == 0x0000C0, "Wrong size on BFGMatrixMath_MultiplyMatrices");
static_assert(offsetof(BFGMatrixMath_MultiplyMatrices, _A) == 0x000000, "Member 'BFGMatrixMath_MultiplyMatrices::_A' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_MultiplyMatrices, _B) == 0x000040, "Member 'BFGMatrixMath_MultiplyMatrices::_B' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_MultiplyMatrices, ReturnValue) == 0x000080, "Member 'BFGMatrixMath_MultiplyMatrices::ReturnValue' has a wrong offset!");

// Function BFGUITools.BFGMatrixMath.TransformVector
// 0x0060 (0x0060 - 0x0000)
struct BFGMatrixMath_TransformVector final
{
public:
	struct FMatrix                                _A;                                                // 0x0000(0x0040)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector4                               _B;                                                // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_TransformVector) == 0x000010, "Wrong alignment on BFGMatrixMath_TransformVector");
static_assert(sizeof(BFGMatrixMath_TransformVector) == 0x000060, "Wrong size on BFGMatrixMath_TransformVector");
static_assert(offsetof(BFGMatrixMath_TransformVector, _A) == 0x000000, "Member 'BFGMatrixMath_TransformVector::_A' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_TransformVector, _B) == 0x000040, "Member 'BFGMatrixMath_TransformVector::_B' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_TransformVector, ReturnValue) == 0x000050, "Member 'BFGMatrixMath_TransformVector::ReturnValue' has a wrong offset!");

// Function BFGUITools.BFGMatrixMath.TransposeMatrix
// 0x0080 (0x0080 - 0x0000)
struct BFGMatrixMath_TransposeMatrix final
{
public:
	struct FMatrix                                _A;                                                // 0x0000(0x0040)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatrix                                ReturnValue;                                       // 0x0040(0x0040)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFGMatrixMath_TransposeMatrix) == 0x000010, "Wrong alignment on BFGMatrixMath_TransposeMatrix");
static_assert(sizeof(BFGMatrixMath_TransposeMatrix) == 0x000080, "Wrong size on BFGMatrixMath_TransposeMatrix");
static_assert(offsetof(BFGMatrixMath_TransposeMatrix, _A) == 0x000000, "Member 'BFGMatrixMath_TransposeMatrix::_A' has a wrong offset!");
static_assert(offsetof(BFGMatrixMath_TransposeMatrix, ReturnValue) == 0x000040, "Member 'BFGMatrixMath_TransposeMatrix::ReturnValue' has a wrong offset!");

}

