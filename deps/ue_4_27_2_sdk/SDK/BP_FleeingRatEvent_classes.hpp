#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FleeingRatEvent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FleeingRatEvent.BP_FleeingRatEvent_C
// 0x00B0 (0x02E8 - 0x0238)
class ABP_FleeingRatEvent_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAbilitySystemComponent*                AbilitySystem;                                     // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Trigger;                                           // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    RatsScuttling;                                     // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 RatMesh;                                           // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        RatRoot;                                           // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       RunSpline;                                         // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         MaxRatMoveSpeed;                                   // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Acceleration;                                      // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldAlignWithGround;                             // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_281[0x3];                                      // 0x0281(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeightAdjustmentSpeed;                             // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceLength;                                       // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RatVelocity;                                       // 0x028C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RatRotationOffset;                                 // 0x0298(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         ProgressAlongSpline;                               // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PredictionMoveSpeed;                               // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightDifference;                                  // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFalling;                                         // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GravityStrength;                                   // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnSlowdownPredictRange;                          // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableDebug;                                       // 0x02BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BD[0x3];                                      // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotationSpeed;                                     // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RatScale;                                          // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RemoveAfterReachingEnd;                            // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             RatEnd;                                            // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          UseTriggerComponent;                               // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsDead;                                            // 0x02E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void InitializeTriggerBox();
	void AlignRotationWithMoveDirection();
	void Align_Rotation_with_Surface_and_Move_Dir();
	void DebugDrawLineWithDot(const struct FVector& Position, const struct FVector& Direction, float DotSize, float LineLength, float Thickness, const struct FLinearColor& Color);
	void DebugTurnSlowdown();
	void DebugRatTransform();
	void UpdateSplineProgress();
	float Predict_Base_Move_Speed(float Acceleration_0, const struct FVector& Velocity);
	void ApplyMovement();
	void SetVelocity();
	void CheckWantedMoveLocation(const struct FVector& WantedMoveLocation);
	void PredictMovement(struct FVector* PredictMoveLocation);
	void CheckForGround(const struct FVector& Location, struct FHitResult* OutHit);
	void GetRatVelocity(struct FVector* Velocity);
	void UserConstructionScript();
	void ReceiveTick(float DeltaSeconds);
	void TriggerEvent();
	void BndEvt__BP_FleeingRatEvent_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveBeginPlay();
	float GetMaxSplineDistance();
	void WeaponHit(class AActor* Weapon, const struct FGameplayTag& EventTag, const struct FGameplayEventData& Payload);
	void ExecuteUbergraph_BP_FleeingRatEvent(int32 EntryPoint);
	void RatEnd__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FleeingRatEvent_C">();
	}
	static class ABP_FleeingRatEvent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FleeingRatEvent_C>();
	}
};
static_assert(alignof(ABP_FleeingRatEvent_C) == 0x000008, "Wrong alignment on ABP_FleeingRatEvent_C");
static_assert(sizeof(ABP_FleeingRatEvent_C) == 0x0002E8, "Wrong size on ABP_FleeingRatEvent_C");
static_assert(offsetof(ABP_FleeingRatEvent_C, UberGraphFrame) == 0x000238, "Member 'ABP_FleeingRatEvent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, AbilitySystem) == 0x000240, "Member 'ABP_FleeingRatEvent_C::AbilitySystem' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, Trigger) == 0x000248, "Member 'ABP_FleeingRatEvent_C::Trigger' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, RatsScuttling) == 0x000250, "Member 'ABP_FleeingRatEvent_C::RatsScuttling' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, RatMesh) == 0x000258, "Member 'ABP_FleeingRatEvent_C::RatMesh' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, RatRoot) == 0x000260, "Member 'ABP_FleeingRatEvent_C::RatRoot' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, RunSpline) == 0x000268, "Member 'ABP_FleeingRatEvent_C::RunSpline' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, DefaultSceneRoot) == 0x000270, "Member 'ABP_FleeingRatEvent_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, MaxRatMoveSpeed) == 0x000278, "Member 'ABP_FleeingRatEvent_C::MaxRatMoveSpeed' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, Acceleration) == 0x00027C, "Member 'ABP_FleeingRatEvent_C::Acceleration' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, ShouldAlignWithGround) == 0x000280, "Member 'ABP_FleeingRatEvent_C::ShouldAlignWithGround' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, HeightAdjustmentSpeed) == 0x000284, "Member 'ABP_FleeingRatEvent_C::HeightAdjustmentSpeed' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, TraceLength) == 0x000288, "Member 'ABP_FleeingRatEvent_C::TraceLength' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, RatVelocity) == 0x00028C, "Member 'ABP_FleeingRatEvent_C::RatVelocity' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, RatRotationOffset) == 0x000298, "Member 'ABP_FleeingRatEvent_C::RatRotationOffset' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, ProgressAlongSpline) == 0x0002A4, "Member 'ABP_FleeingRatEvent_C::ProgressAlongSpline' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, PredictionMoveSpeed) == 0x0002A8, "Member 'ABP_FleeingRatEvent_C::PredictionMoveSpeed' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, HeightDifference) == 0x0002AC, "Member 'ABP_FleeingRatEvent_C::HeightDifference' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, IsFalling) == 0x0002B0, "Member 'ABP_FleeingRatEvent_C::IsFalling' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, GravityStrength) == 0x0002B4, "Member 'ABP_FleeingRatEvent_C::GravityStrength' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, TurnSlowdownPredictRange) == 0x0002B8, "Member 'ABP_FleeingRatEvent_C::TurnSlowdownPredictRange' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, EnableDebug) == 0x0002BC, "Member 'ABP_FleeingRatEvent_C::EnableDebug' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, RotationSpeed) == 0x0002C0, "Member 'ABP_FleeingRatEvent_C::RotationSpeed' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, RatScale) == 0x0002C4, "Member 'ABP_FleeingRatEvent_C::RatScale' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, RemoveAfterReachingEnd) == 0x0002C8, "Member 'ABP_FleeingRatEvent_C::RemoveAfterReachingEnd' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, RatEnd) == 0x0002D0, "Member 'ABP_FleeingRatEvent_C::RatEnd' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, UseTriggerComponent) == 0x0002E0, "Member 'ABP_FleeingRatEvent_C::UseTriggerComponent' has a wrong offset!");
static_assert(offsetof(ABP_FleeingRatEvent_C, IsDead) == 0x0002E1, "Member 'ABP_FleeingRatEvent_C::IsDead' has a wrong offset!");

}

