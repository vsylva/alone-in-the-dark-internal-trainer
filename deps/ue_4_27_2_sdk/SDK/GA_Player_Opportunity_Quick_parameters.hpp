#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Player_Opportunity_Quick

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function GA_Player_Opportunity_Quick.GA_Player_Opportunity_Quick_C.ExecuteUbergraph_GA_Player_Opportunity_Quick
// 0x0068 (0x0068 - 0x0000)
struct GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitDelay*                 CallFunc_WaitDelay_ReturnValue;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bWasCancelled;                        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraModifier*                        CallFunc_EnableCameraModifier_ReturnValue;         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AObsidianFoxCharacter*                  CallFunc_GetClosestEnemyCharacter_Character;       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityTargetDataHandle       CallFunc_AbilityTargetDataFromActor_ReturnValue;   // 0x0040(0x0028)()
};
static_assert(alignof(GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick) == 0x000008, "Wrong alignment on GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick");
static_assert(sizeof(GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick) == 0x000068, "Wrong size on GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick, EntryPoint) == 0x000000, "Member 'GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick, CallFunc_WaitDelay_ReturnValue) == 0x000018, "Member 'GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick::CallFunc_WaitDelay_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick, K2Node_Event_bWasCancelled) == 0x000020, "Member 'GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick::K2Node_Event_bWasCancelled' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000028, "Member 'GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick, CallFunc_EnableCameraModifier_ReturnValue) == 0x000030, "Member 'GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick::CallFunc_EnableCameraModifier_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick, CallFunc_GetClosestEnemyCharacter_Character) == 0x000038, "Member 'GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick::CallFunc_GetClosestEnemyCharacter_Character' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick, CallFunc_AbilityTargetDataFromActor_ReturnValue) == 0x000040, "Member 'GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick::CallFunc_AbilityTargetDataFromActor_ReturnValue' has a wrong offset!");

// Function GA_Player_Opportunity_Quick.GA_Player_Opportunity_Quick_C.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct GA_Player_Opportunity_Quick_C_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Player_Opportunity_Quick_C_K2_OnEndAbility) == 0x000001, "Wrong alignment on GA_Player_Opportunity_Quick_C_K2_OnEndAbility");
static_assert(sizeof(GA_Player_Opportunity_Quick_C_K2_OnEndAbility) == 0x000001, "Wrong size on GA_Player_Opportunity_Quick_C_K2_OnEndAbility");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'GA_Player_Opportunity_Quick_C_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// Function GA_Player_Opportunity_Quick.GA_Player_Opportunity_Quick_C.InitializeOpportunityThrowingValues
// 0x0098 (0x0098 - 0x0000)
struct GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class AActor*>                         CallFunc_GetActorsFromTargetData_ReturnValue;      // 0x0028(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TargetDataHasActor_ReturnValue;           // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_PlayerCameraManager; // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues) == 0x000008, "Wrong alignment on GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues");
static_assert(sizeof(GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues) == 0x000098, "Wrong size on GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues, TargetData) == 0x000000, "Member 'GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues::TargetData' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues, CallFunc_GetActorsFromTargetData_ReturnValue) == 0x000028, "Member 'GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues::CallFunc_GetActorsFromTargetData_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000038, "Member 'GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues, CallFunc_Array_Get_Item) == 0x000048, "Member 'GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues, CallFunc_TargetDataHasActor_ReturnValue) == 0x000050, "Member 'GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues::CallFunc_TargetDataHasActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues, K2Node_DynamicCast_AsCharacter) == 0x000058, "Member 'GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues, CallFunc_GetPlayerCameraManager_PlayerCameraManager) == 0x000068, "Member 'GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues::CallFunc_GetPlayerCameraManager_PlayerCameraManager' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues, CallFunc_GetActorForwardVector_ReturnValue) == 0x000070, "Member 'GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00007C, "Member 'GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues, CallFunc_Add_VectorVector_ReturnValue) == 0x000088, "Member 'GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function GA_Player_Opportunity_Quick.GA_Player_Opportunity_Quick_C.Rotate Character & Camera
// 0x0100 (0x0100 - 0x0000)
struct GA_Player_Opportunity_Quick_C_Rotate_Character___Camera final
{
public:
	class AObsidianFoxCharacter*                  Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerCharacter_C*                  PlayerCharacterRef;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_PlayerCameraManager; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Get_Facing_Rotation_In_Camera_FacingRotation; // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Get_Facing_Rotation_In_Camera_RotatingOk; // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFOVAngle_ReturnValue;                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_RotatorRotator_ReturnValue;    // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0040(0x0048)(ContainsInstancedReference)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue_1;          // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AOFPlayerCharacter*                     K2Node_DynamicCast_AsOFPlayer_Character;           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_CombatInterface_C> CallFunc_ControlRotationFocus_self_CastInput;      // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerCharacter_C*                  K2Node_DynamicCast_AsBP_Player_Character;          // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera) == 0x000008, "Wrong alignment on GA_Player_Opportunity_Quick_C_Rotate_Character___Camera");
static_assert(sizeof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera) == 0x000100, "Wrong size on GA_Player_Opportunity_Quick_C_Rotate_Character___Camera");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, Target) == 0x000000, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::Target' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, PlayerCharacterRef) == 0x000008, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::PlayerCharacterRef' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, CallFunc_GetPlayerCameraManager_PlayerCameraManager) == 0x000010, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::CallFunc_GetPlayerCameraManager_PlayerCameraManager' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, CallFunc_Get_Facing_Rotation_In_Camera_FacingRotation) == 0x000018, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::CallFunc_Get_Facing_Rotation_In_Camera_FacingRotation' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, CallFunc_Get_Facing_Rotation_In_Camera_RotatingOk) == 0x000024, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::CallFunc_Get_Facing_Rotation_In_Camera_RotatingOk' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, CallFunc_GetFOVAngle_ReturnValue) == 0x000028, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::CallFunc_GetFOVAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, CallFunc_GetCameraRotation_ReturnValue) == 0x00002C, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000038, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, CallFunc_IsValid_ReturnValue) == 0x00003C, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, CallFunc_EqualEqual_RotatorRotator_ReturnValue) == 0x00003D, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::CallFunc_EqualEqual_RotatorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, CallFunc_GetActorInfo_ReturnValue) == 0x000040, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, CallFunc_BooleanAND_ReturnValue) == 0x000088, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, CallFunc_GetCameraRotation_ReturnValue_1) == 0x00008C, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::CallFunc_GetCameraRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000098, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, CallFunc_BreakRotator_Roll) == 0x0000A4, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, CallFunc_BreakRotator_Pitch) == 0x0000A8, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, CallFunc_BreakRotator_Yaw) == 0x0000AC, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, CallFunc_BreakRotator_Roll_1) == 0x0000B0, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, CallFunc_BreakRotator_Pitch_1) == 0x0000B4, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, CallFunc_BreakRotator_Yaw_1) == 0x0000B8, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, K2Node_DynamicCast_AsOFPlayer_Character) == 0x0000C0, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::K2Node_DynamicCast_AsOFPlayer_Character' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, K2Node_DynamicCast_bSuccess) == 0x0000C8, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, CallFunc_MakeRotator_ReturnValue) == 0x0000CC, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, CallFunc_ControlRotationFocus_self_CastInput) == 0x0000D8, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::CallFunc_ControlRotationFocus_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x0000E8, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, K2Node_DynamicCast_AsBP_Player_Character) == 0x0000F0, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::K2Node_DynamicCast_AsBP_Player_Character' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Rotate_Character___Camera, K2Node_DynamicCast_bSuccess_1) == 0x0000F8, "Member 'GA_Player_Opportunity_Quick_C_Rotate_Character___Camera::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function GA_Player_Opportunity_Quick.GA_Player_Opportunity_Quick_C.Get Facing Rotation In Camera
// 0x00B8 (0x00B8 - 0x0000)
struct GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         CameraRotationTolerance;                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               FacingRotation;                                    // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RotatingOk;                                        // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_1;        // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_3;                      // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_3;                     // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_3;                       // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera) == 0x000008, "Wrong alignment on GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera");
static_assert(sizeof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera) == 0x0000B8, "Wrong size on GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, TargetActor) == 0x000000, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::TargetActor' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, CameraRotationTolerance) == 0x000008, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::CameraRotationTolerance' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, FacingRotation) == 0x00000C, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::FacingRotation' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, RotatingOk) == 0x000018, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::RotatingOk' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, Temp_bool_Variable) == 0x000019, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00001C, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000028, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000030, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000038, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, CallFunc_GetCameraRotation_ReturnValue) == 0x000044, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, CallFunc_BreakRotator_Roll) == 0x000050, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, CallFunc_BreakRotator_Pitch) == 0x000054, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, CallFunc_BreakRotator_Yaw) == 0x000058, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, CallFunc_BreakRotator_Roll_1) == 0x00005C, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, CallFunc_BreakRotator_Pitch_1) == 0x000060, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, CallFunc_BreakRotator_Yaw_1) == 0x000064, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, CallFunc_K2_GetActorRotation_ReturnValue_1) == 0x000068, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::CallFunc_K2_GetActorRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000074, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, CallFunc_BreakRotator_Roll_2) == 0x000080, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, CallFunc_BreakRotator_Pitch_2) == 0x000084, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, CallFunc_BreakRotator_Yaw_2) == 0x000088, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, CallFunc_FindLookAtRotation_ReturnValue) == 0x00008C, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, CallFunc_BreakRotator_Roll_3) == 0x000098, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::CallFunc_BreakRotator_Roll_3' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, CallFunc_BreakRotator_Pitch_3) == 0x00009C, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::CallFunc_BreakRotator_Pitch_3' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, CallFunc_BreakRotator_Yaw_3) == 0x0000A0, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::CallFunc_BreakRotator_Yaw_3' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x0000A4, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, K2Node_Select_Default) == 0x0000A8, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera, CallFunc_MakeRotator_ReturnValue) == 0x0000AC, "Member 'GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function GA_Player_Opportunity_Quick.GA_Player_Opportunity_Quick_C.GetPlayerCameraManager
// 0x0050 (0x0050 - 0x0000)
struct GA_Player_Opportunity_Quick_C_GetPlayerCameraManager final
{
public:
	class APlayerCameraManager*                   PlayerCameraManager;                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0008(0x0048)(ContainsInstancedReference)
};
static_assert(alignof(GA_Player_Opportunity_Quick_C_GetPlayerCameraManager) == 0x000008, "Wrong alignment on GA_Player_Opportunity_Quick_C_GetPlayerCameraManager");
static_assert(sizeof(GA_Player_Opportunity_Quick_C_GetPlayerCameraManager) == 0x000050, "Wrong size on GA_Player_Opportunity_Quick_C_GetPlayerCameraManager");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_GetPlayerCameraManager, PlayerCameraManager) == 0x000000, "Member 'GA_Player_Opportunity_Quick_C_GetPlayerCameraManager::PlayerCameraManager' has a wrong offset!");
static_assert(offsetof(GA_Player_Opportunity_Quick_C_GetPlayerCameraManager, CallFunc_GetActorInfo_ReturnValue) == 0x000008, "Member 'GA_Player_Opportunity_Quick_C_GetPlayerCameraManager::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");

}

