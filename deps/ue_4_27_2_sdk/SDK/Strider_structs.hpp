#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Strider

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// Enum Strider.ESlopeWarpQuality
// NumValues: 0x0005
enum class ESlopeWarpQuality : uint8
{
	Capsule                                  = 0,
	PerFootRay                               = 1,
	PerFootShape                             = 2,
	LODBased                                 = 3,
	ESlopeWarpQuality_MAX                    = 4,
};

// Enum Strider.ESlopeRollCompensation
// NumValues: 0x0004
enum class ESlopeRollCompensation : uint8
{
	None                                     = 0,
	AdjustHips                               = 1,
	AdjustFeet                               = 2,
	ESlopeRollCompensation_MAX               = 3,
};

// Enum Strider.ESlopeDetectionMode
// NumValues: 0x0003
enum class ESlopeDetectionMode : uint8
{
	ManualSlope                              = 0,
	AutomaticSlope                           = 1,
	ESlopeDetectionMode_MAX                  = 2,
};

// Enum Strider.EStrideVectorMethod
// NumValues: 0x0003
enum class EStrideVectorMethod : uint8
{
	ManualVelocity                           = 0,
	ActorVelocity                            = 1,
	EStrideVectorMethod_MAX                  = 2,
};

// ScriptStruct Strider.HipAdjustment
// 0x0018 (0x0018 - 0x0000)
struct FHipAdjustment final
{
public:
	struct FBoneReference                         Hips;                                              // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         AdjustmentRatio;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRecoveryRate;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHipAdjustment) == 0x000004, "Wrong alignment on FHipAdjustment");
static_assert(sizeof(FHipAdjustment) == 0x000018, "Wrong size on FHipAdjustment");
static_assert(offsetof(FHipAdjustment, Hips) == 0x000000, "Member 'FHipAdjustment::Hips' has a wrong offset!");
static_assert(offsetof(FHipAdjustment, AdjustmentRatio) == 0x000010, "Member 'FHipAdjustment::AdjustmentRatio' has a wrong offset!");
static_assert(offsetof(FHipAdjustment, MaxRecoveryRate) == 0x000014, "Member 'FHipAdjustment::MaxRecoveryRate' has a wrong offset!");

// ScriptStruct Strider.LimbDefinition
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x10) FLimbDefinition final
{
public:
	struct FBoneReference                         Tip;                                               // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         IkTarget;                                          // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         BoneCount;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x5C];                                      // 0x0024(0x005C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLimbDefinition) == 0x000010, "Wrong alignment on FLimbDefinition");
static_assert(sizeof(FLimbDefinition) == 0x000080, "Wrong size on FLimbDefinition");
static_assert(offsetof(FLimbDefinition, Tip) == 0x000000, "Member 'FLimbDefinition::Tip' has a wrong offset!");
static_assert(offsetof(FLimbDefinition, IkTarget) == 0x000010, "Member 'FLimbDefinition::IkTarget' has a wrong offset!");
static_assert(offsetof(FLimbDefinition, BoneCount) == 0x000020, "Member 'FLimbDefinition::BoneCount' has a wrong offset!");

// ScriptStruct Strider.AnimNode_SlopeWarp
// 0x00E8 (0x01B0 - 0x00C8)
struct alignas(0x10) FAnimNode_SlopeWarp final : public FAnimNode_SkeletalControlBase
{
public:
	struct FVector                                SlopeNormal;                                       // 0x00C8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SlopePoint;                                        // 0x00D4(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlopeDetectionMode                           SlopeDetectionMode;                                // 0x00E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlopeRollCompensation                        SlopeRollCompensation;                             // 0x00E1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x2];                                       // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                IKRootLeftVector;                                  // 0x00E4(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSlopeAngle;                                     // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightOffset;                                      // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopeSmoothingRate;                                // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AllowExtensionPercent;                             // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownSlopeShiftRate;                                // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         IkRoot;                                            // 0x0104(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FHipAdjustment                         HipAdjustment;                                     // 0x0114(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLimbDefinition>                Limbs;                                             // 0x0130(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 AdditionalBonesToAdjustWithHips;                   // 0x0140(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_150[0x60];                                     // 0x0150(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_SlopeWarp) == 0x000010, "Wrong alignment on FAnimNode_SlopeWarp");
static_assert(sizeof(FAnimNode_SlopeWarp) == 0x0001B0, "Wrong size on FAnimNode_SlopeWarp");
static_assert(offsetof(FAnimNode_SlopeWarp, SlopeNormal) == 0x0000C8, "Member 'FAnimNode_SlopeWarp::SlopeNormal' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarp, SlopePoint) == 0x0000D4, "Member 'FAnimNode_SlopeWarp::SlopePoint' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarp, SlopeDetectionMode) == 0x0000E0, "Member 'FAnimNode_SlopeWarp::SlopeDetectionMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarp, SlopeRollCompensation) == 0x0000E1, "Member 'FAnimNode_SlopeWarp::SlopeRollCompensation' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarp, IKRootLeftVector) == 0x0000E4, "Member 'FAnimNode_SlopeWarp::IKRootLeftVector' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarp, MaxSlopeAngle) == 0x0000F0, "Member 'FAnimNode_SlopeWarp::MaxSlopeAngle' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarp, HeightOffset) == 0x0000F4, "Member 'FAnimNode_SlopeWarp::HeightOffset' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarp, SlopeSmoothingRate) == 0x0000F8, "Member 'FAnimNode_SlopeWarp::SlopeSmoothingRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarp, AllowExtensionPercent) == 0x0000FC, "Member 'FAnimNode_SlopeWarp::AllowExtensionPercent' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarp, DownSlopeShiftRate) == 0x000100, "Member 'FAnimNode_SlopeWarp::DownSlopeShiftRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarp, IkRoot) == 0x000104, "Member 'FAnimNode_SlopeWarp::IkRoot' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarp, HipAdjustment) == 0x000114, "Member 'FAnimNode_SlopeWarp::HipAdjustment' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarp, Limbs) == 0x000130, "Member 'FAnimNode_SlopeWarp::Limbs' has a wrong offset!");
static_assert(offsetof(FAnimNode_SlopeWarp, AdditionalBonesToAdjustWithHips) == 0x000140, "Member 'FAnimNode_SlopeWarp::AdditionalBonesToAdjustWithHips' has a wrong offset!");

// ScriptStruct Strider.BoneChainLink
// 0x0018 (0x0018 - 0x0000)
struct FBoneChainLink final
{
public:
	struct FBoneReference                         Bone;                                              // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBoneChainLink) == 0x000004, "Wrong alignment on FBoneChainLink");
static_assert(sizeof(FBoneChainLink) == 0x000018, "Wrong size on FBoneChainLink");
static_assert(offsetof(FBoneChainLink, Bone) == 0x000000, "Member 'FBoneChainLink::Bone' has a wrong offset!");
static_assert(offsetof(FBoneChainLink, Weight) == 0x000010, "Member 'FBoneChainLink::Weight' has a wrong offset!");

// ScriptStruct Strider.BoneChain
// 0x0020 (0x0020 - 0x0000)
struct FBoneChain final
{
public:
	TArray<struct FBoneChainLink>                 BoneChain;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBoneChain) == 0x000008, "Wrong alignment on FBoneChain");
static_assert(sizeof(FBoneChain) == 0x000020, "Wrong size on FBoneChain");
static_assert(offsetof(FBoneChain, BoneChain) == 0x000000, "Member 'FBoneChain::BoneChain' has a wrong offset!");

// ScriptStruct Strider.AnimNode_AccelerationWarp
// 0x0060 (0x0070 - 0x0010)
struct FAnimNode_AccelerationWarp final : public FAnimNode_Base
{
public:
	struct FPoseLink                              InputPose;                                         // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Direction;                                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpAxis;                                            // 0x002C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TorsoBendRatio;                                    // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTorsoBend;                                      // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Smoothing;                                         // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneChain                             SpineChain;                                        // 0x0048(0x0020)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_AccelerationWarp) == 0x000008, "Wrong alignment on FAnimNode_AccelerationWarp");
static_assert(sizeof(FAnimNode_AccelerationWarp) == 0x000070, "Wrong size on FAnimNode_AccelerationWarp");
static_assert(offsetof(FAnimNode_AccelerationWarp, InputPose) == 0x000010, "Member 'FAnimNode_AccelerationWarp::InputPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_AccelerationWarp, Acceleration) == 0x000020, "Member 'FAnimNode_AccelerationWarp::Acceleration' has a wrong offset!");
static_assert(offsetof(FAnimNode_AccelerationWarp, Direction) == 0x000024, "Member 'FAnimNode_AccelerationWarp::Direction' has a wrong offset!");
static_assert(offsetof(FAnimNode_AccelerationWarp, Alpha) == 0x000028, "Member 'FAnimNode_AccelerationWarp::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_AccelerationWarp, UpAxis) == 0x00002C, "Member 'FAnimNode_AccelerationWarp::UpAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_AccelerationWarp, TorsoBendRatio) == 0x000038, "Member 'FAnimNode_AccelerationWarp::TorsoBendRatio' has a wrong offset!");
static_assert(offsetof(FAnimNode_AccelerationWarp, MaxTorsoBend) == 0x00003C, "Member 'FAnimNode_AccelerationWarp::MaxTorsoBend' has a wrong offset!");
static_assert(offsetof(FAnimNode_AccelerationWarp, Smoothing) == 0x000040, "Member 'FAnimNode_AccelerationWarp::Smoothing' has a wrong offset!");
static_assert(offsetof(FAnimNode_AccelerationWarp, SpineChain) == 0x000048, "Member 'FAnimNode_AccelerationWarp::SpineChain' has a wrong offset!");

// ScriptStruct Strider.AnimNode_BankWarp
// 0x0090 (0x00A0 - 0x0010)
struct FAnimNode_BankWarp final : public FAnimNode_Base
{
public:
	struct FPoseLink                              InputPose;                                         // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BankValue;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpAxis;                                            // 0x0028(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ForwardAxis;                                       // 0x0034(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TwistRate;                                         // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTwist;                                          // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanRate;                                          // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLean;                                           // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Smoothing;                                         // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         RootBone;                                          // 0x0054(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneChain                             SpineChain;                                        // 0x0068(0x0020)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 RootBonesToAdjust;                                 // 0x0088(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BankWarp) == 0x000008, "Wrong alignment on FAnimNode_BankWarp");
static_assert(sizeof(FAnimNode_BankWarp) == 0x0000A0, "Wrong size on FAnimNode_BankWarp");
static_assert(offsetof(FAnimNode_BankWarp, InputPose) == 0x000010, "Member 'FAnimNode_BankWarp::InputPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_BankWarp, BankValue) == 0x000020, "Member 'FAnimNode_BankWarp::BankValue' has a wrong offset!");
static_assert(offsetof(FAnimNode_BankWarp, Alpha) == 0x000024, "Member 'FAnimNode_BankWarp::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_BankWarp, UpAxis) == 0x000028, "Member 'FAnimNode_BankWarp::UpAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_BankWarp, ForwardAxis) == 0x000034, "Member 'FAnimNode_BankWarp::ForwardAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_BankWarp, TwistRate) == 0x000040, "Member 'FAnimNode_BankWarp::TwistRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_BankWarp, MaxTwist) == 0x000044, "Member 'FAnimNode_BankWarp::MaxTwist' has a wrong offset!");
static_assert(offsetof(FAnimNode_BankWarp, LeanRate) == 0x000048, "Member 'FAnimNode_BankWarp::LeanRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_BankWarp, MaxLean) == 0x00004C, "Member 'FAnimNode_BankWarp::MaxLean' has a wrong offset!");
static_assert(offsetof(FAnimNode_BankWarp, Smoothing) == 0x000050, "Member 'FAnimNode_BankWarp::Smoothing' has a wrong offset!");
static_assert(offsetof(FAnimNode_BankWarp, RootBone) == 0x000054, "Member 'FAnimNode_BankWarp::RootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_BankWarp, SpineChain) == 0x000068, "Member 'FAnimNode_BankWarp::SpineChain' has a wrong offset!");
static_assert(offsetof(FAnimNode_BankWarp, RootBonesToAdjust) == 0x000088, "Member 'FAnimNode_BankWarp::RootBonesToAdjust' has a wrong offset!");

// ScriptStruct Strider.AnimNode_OrientationWarp
// 0x0080 (0x0090 - 0x0010)
struct FAnimNode_OrientationWarp final : public FAnimNode_Base
{
public:
	struct FPoseLink                              InputPose;                                         // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Direction;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Offset;                                            // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpperBodyAlpha;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpAxis;                                            // 0x002C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWarpDelta;                                      // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Smoothing;                                         // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         RootBone;                                          // 0x0044(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneChain                             SpineChain;                                        // 0x0058(0x0020)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 RootBonesToCounterAdjust;                          // 0x0078(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_OrientationWarp) == 0x000008, "Wrong alignment on FAnimNode_OrientationWarp");
static_assert(sizeof(FAnimNode_OrientationWarp) == 0x000090, "Wrong size on FAnimNode_OrientationWarp");
static_assert(offsetof(FAnimNode_OrientationWarp, InputPose) == 0x000010, "Member 'FAnimNode_OrientationWarp::InputPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarp, Direction) == 0x000020, "Member 'FAnimNode_OrientationWarp::Direction' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarp, Offset) == 0x000024, "Member 'FAnimNode_OrientationWarp::Offset' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarp, UpperBodyAlpha) == 0x000028, "Member 'FAnimNode_OrientationWarp::UpperBodyAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarp, UpAxis) == 0x00002C, "Member 'FAnimNode_OrientationWarp::UpAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarp, Alpha) == 0x000038, "Member 'FAnimNode_OrientationWarp::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarp, MaxWarpDelta) == 0x00003C, "Member 'FAnimNode_OrientationWarp::MaxWarpDelta' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarp, Smoothing) == 0x000040, "Member 'FAnimNode_OrientationWarp::Smoothing' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarp, RootBone) == 0x000044, "Member 'FAnimNode_OrientationWarp::RootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarp, SpineChain) == 0x000058, "Member 'FAnimNode_OrientationWarp::SpineChain' has a wrong offset!");
static_assert(offsetof(FAnimNode_OrientationWarp, RootBonesToCounterAdjust) == 0x000078, "Member 'FAnimNode_OrientationWarp::RootBonesToCounterAdjust' has a wrong offset!");

// ScriptStruct Strider.StridePivot
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x10) FStridePivot final
{
public:
	struct FBoneReference                         Root;                                              // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bProjectToGround;                                  // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Offset;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStrideVectorMethod                           StrideVectorMethod;                                // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Smoothing;                                         // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChooseNearestAxis;                                // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3F];                                      // 0x0021(0x003F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStridePivot) == 0x000010, "Wrong alignment on FStridePivot");
static_assert(sizeof(FStridePivot) == 0x000060, "Wrong size on FStridePivot");
static_assert(offsetof(FStridePivot, Root) == 0x000000, "Member 'FStridePivot::Root' has a wrong offset!");
static_assert(offsetof(FStridePivot, bProjectToGround) == 0x000010, "Member 'FStridePivot::bProjectToGround' has a wrong offset!");
static_assert(offsetof(FStridePivot, Offset) == 0x000014, "Member 'FStridePivot::Offset' has a wrong offset!");
static_assert(offsetof(FStridePivot, StrideVectorMethod) == 0x000018, "Member 'FStridePivot::StrideVectorMethod' has a wrong offset!");
static_assert(offsetof(FStridePivot, Smoothing) == 0x00001C, "Member 'FStridePivot::Smoothing' has a wrong offset!");
static_assert(offsetof(FStridePivot, bChooseNearestAxis) == 0x000020, "Member 'FStridePivot::bChooseNearestAxis' has a wrong offset!");

// ScriptStruct Strider.AnimNode_StrideWarp
// 0x00C8 (0x0190 - 0x00C8)
struct FAnimNode_StrideWarp final : public FAnimNode_SkeletalControlBase
{
public:
	float                                         StrideScale;                                       // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Direction;                                         // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Twist;                                             // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AllowExtensionPercent;                             // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStridePivot                           StridePivot;                                       // 0x00E0(0x0060)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FHipAdjustment                         HipAdjustment;                                     // 0x0140(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FLimbDefinition>                Limbs;                                             // 0x0158(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 AdditionalBonesToAdjustWithHips;                   // 0x0168(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x18];                                     // 0x0178(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_StrideWarp) == 0x000010, "Wrong alignment on FAnimNode_StrideWarp");
static_assert(sizeof(FAnimNode_StrideWarp) == 0x000190, "Wrong size on FAnimNode_StrideWarp");
static_assert(offsetof(FAnimNode_StrideWarp, StrideScale) == 0x0000C8, "Member 'FAnimNode_StrideWarp::StrideScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_StrideWarp, Direction) == 0x0000CC, "Member 'FAnimNode_StrideWarp::Direction' has a wrong offset!");
static_assert(offsetof(FAnimNode_StrideWarp, Twist) == 0x0000D0, "Member 'FAnimNode_StrideWarp::Twist' has a wrong offset!");
static_assert(offsetof(FAnimNode_StrideWarp, AllowExtensionPercent) == 0x0000D4, "Member 'FAnimNode_StrideWarp::AllowExtensionPercent' has a wrong offset!");
static_assert(offsetof(FAnimNode_StrideWarp, StridePivot) == 0x0000E0, "Member 'FAnimNode_StrideWarp::StridePivot' has a wrong offset!");
static_assert(offsetof(FAnimNode_StrideWarp, HipAdjustment) == 0x000140, "Member 'FAnimNode_StrideWarp::HipAdjustment' has a wrong offset!");
static_assert(offsetof(FAnimNode_StrideWarp, Limbs) == 0x000158, "Member 'FAnimNode_StrideWarp::Limbs' has a wrong offset!");
static_assert(offsetof(FAnimNode_StrideWarp, AdditionalBonesToAdjustWithHips) == 0x000168, "Member 'FAnimNode_StrideWarp::AdditionalBonesToAdjustWithHips' has a wrong offset!");

}

