#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PiecesUtils

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "PiecesUtils_structs.hpp"
#include "GameplayAbilities_classes.hpp"


namespace SDK
{

// Class PiecesUtils.AssetUtils
// 0x0000 (0x0028 - 0x0028)
class UAssetUtils final : public UBlueprintFunctionLibrary
{
public:
	static void GetReferencersOfAsset(const class UObject* WorldContextObject, const struct FAssetData& AssetData, const class UClass* InRefrencersClass, const TArray<class FString>& InSubStringsToIgnore, const int32 ReferenceDepthToLookBeforeWeGiveUp, TArray<struct FAssetData>* OutRefrencers);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AssetUtils">();
	}
	static class UAssetUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAssetUtils>();
	}
};
static_assert(alignof(UAssetUtils) == 0x000008, "Wrong alignment on UAssetUtils");
static_assert(sizeof(UAssetUtils) == 0x000028, "Wrong size on UAssetUtils");

// Class PiecesUtils.BuildInfoUtils_BFL
// 0x0000 (0x0028 - 0x0028)
class UBuildInfoUtils_BFL final : public UBlueprintFunctionLibrary
{
public:
	static EConfigEnum GetConfig();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuildInfoUtils_BFL">();
	}
	static class UBuildInfoUtils_BFL* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuildInfoUtils_BFL>();
	}
};
static_assert(alignof(UBuildInfoUtils_BFL) == 0x000008, "Wrong alignment on UBuildInfoUtils_BFL");
static_assert(sizeof(UBuildInfoUtils_BFL) == 0x000028, "Wrong size on UBuildInfoUtils_BFL");

// Class PiecesUtils.CollisionUtils
// 0x0000 (0x0028 - 0x0028)
class UCollisionUtils final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CollisionUtils">();
	}
	static class UCollisionUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCollisionUtils>();
	}
};
static_assert(alignof(UCollisionUtils) == 0x000008, "Wrong alignment on UCollisionUtils");
static_assert(sizeof(UCollisionUtils) == 0x000028, "Wrong size on UCollisionUtils");

// Class PiecesUtils.OFMultiBoolFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UOFMultiBoolFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool GetMultiBoolValue(const struct FMultiBool& MultiBool);
	static void SetMultiBoolFalse(struct FMultiBool& MultiBool, const class UObject* AssignmentSourceReference);
	static void SetMultiBoolTrue(struct FMultiBool& MultiBool, const class UObject* AssignmentSouceReference);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OFMultiBoolFunctionLibrary">();
	}
	static class UOFMultiBoolFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOFMultiBoolFunctionLibrary>();
	}
};
static_assert(alignof(UOFMultiBoolFunctionLibrary) == 0x000008, "Wrong alignment on UOFMultiBoolFunctionLibrary");
static_assert(sizeof(UOFMultiBoolFunctionLibrary) == 0x000028, "Wrong size on UOFMultiBoolFunctionLibrary");

// Class PiecesUtils.PiecesAsyncAction_RotateToActorComponent
// 0x0048 (0x0100 - 0x00B8)
class UPiecesAsyncAction_RotateToActorComponent final : public UActorComponent
{
public:
	uint8                                         Pad_B8[0x48];                                      // 0x00B8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void StopRotation(bool CallCompleteDelegate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesAsyncAction_RotateToActorComponent">();
	}
	static class UPiecesAsyncAction_RotateToActorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesAsyncAction_RotateToActorComponent>();
	}
};
static_assert(alignof(UPiecesAsyncAction_RotateToActorComponent) == 0x000008, "Wrong alignment on UPiecesAsyncAction_RotateToActorComponent");
static_assert(sizeof(UPiecesAsyncAction_RotateToActorComponent) == 0x000100, "Wrong size on UPiecesAsyncAction_RotateToActorComponent");

// Class PiecesUtils.PiecesAsyncAction_RotateTo
// 0x0050 (0x0080 - 0x0030)
class alignas(0x10) UPiecesAsyncAction_RotateTo final : public UBlueprintAsyncActionBase
{
public:
	uint8                                         Pad_30[0x38];                                      // 0x0030(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Completed;                                         // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPiecesAsyncAction_RotateTo* RotateActorTo(class AActor* Actor, const struct FRotator& Target, float Speed, class UPiecesAsyncAction_RotateTo** OutRotatorProxy);

	class UPiecesAsyncAction_RotateToActorComponent* GetRotatorComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesAsyncAction_RotateTo">();
	}
	static class UPiecesAsyncAction_RotateTo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesAsyncAction_RotateTo>();
	}
};
static_assert(alignof(UPiecesAsyncAction_RotateTo) == 0x000010, "Wrong alignment on UPiecesAsyncAction_RotateTo");
static_assert(sizeof(UPiecesAsyncAction_RotateTo) == 0x000080, "Wrong size on UPiecesAsyncAction_RotateTo");
static_assert(offsetof(UPiecesAsyncAction_RotateTo, Completed) == 0x000068, "Member 'UPiecesAsyncAction_RotateTo::Completed' has a wrong offset!");

// Class PiecesUtils.PiecesAbilityTask_RotateTo
// 0x0050 (0x00D0 - 0x0080)
class alignas(0x10) UPiecesAbilityTask_RotateTo final : public UAbilityTask
{
public:
	uint8                                         Pad_80[0x38];                                      // 0x0080(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Completed;                                         // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPiecesAbilityTask_RotateTo* RotateActorTo(class UGameplayAbility* OwningAbility, class AActor* Actor, const struct FRotator& Target, float Speed);

	class UPiecesAsyncAction_RotateToActorComponent* GetRotatorComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesAbilityTask_RotateTo">();
	}
	static class UPiecesAbilityTask_RotateTo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesAbilityTask_RotateTo>();
	}
};
static_assert(alignof(UPiecesAbilityTask_RotateTo) == 0x000010, "Wrong alignment on UPiecesAbilityTask_RotateTo");
static_assert(sizeof(UPiecesAbilityTask_RotateTo) == 0x0000D0, "Wrong size on UPiecesAbilityTask_RotateTo");
static_assert(offsetof(UPiecesAbilityTask_RotateTo, Completed) == 0x0000B8, "Member 'UPiecesAbilityTask_RotateTo::Completed' has a wrong offset!");

// Class PiecesUtils.PiecesUtilsFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UPiecesUtilsFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class FName GetClosestToValue(const TArray<class FName>& Names, float TargetValue);
	static class UGameInstanceSubsystem* GetGameInstanceSubsystem(class UObject* WorldContextObject, TSubclassOf<class UGameInstanceSubsystem> Class_0);
	static float GetTimeDilationPauseThreshold();
	static class UWorldSubsystem* GetWorldSubsystem(class UObject* WorldContextObject, TSubclassOf<class UWorldSubsystem> Class_0);
	static bool IsPausedByTimeDilation(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesUtilsFunctionLibrary">();
	}
	static class UPiecesUtilsFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesUtilsFunctionLibrary>();
	}
};
static_assert(alignof(UPiecesUtilsFunctionLibrary) == 0x000008, "Wrong alignment on UPiecesUtilsFunctionLibrary");
static_assert(sizeof(UPiecesUtilsFunctionLibrary) == 0x000028, "Wrong size on UPiecesUtilsFunctionLibrary");

// Class PiecesUtils.WorldUtils
// 0x0000 (0x0028 - 0x0028)
class UWorldUtils final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WorldUtils">();
	}
	static class UWorldUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldUtils>();
	}
};
static_assert(alignof(UWorldUtils) == 0x000008, "Wrong alignment on UWorldUtils");
static_assert(sizeof(UWorldUtils) == 0x000028, "Wrong size on UWorldUtils");

}

