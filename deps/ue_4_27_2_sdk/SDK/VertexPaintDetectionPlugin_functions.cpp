#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VertexPaintDetectionPlugin

#include "Basic.hpp"

#include "VertexPaintDetectionPlugin_classes.hpp"
#include "VertexPaintDetectionPlugin_parameters.hpp"


namespace SDK
{

// Function VertexPaintDetectionPlugin.VertexPaintClothOverlapComponent.GetClothObjectsToSphereTrace
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<EObjectTypeQuery>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<EObjectTypeQuery> UVertexPaintClothOverlapComponent::GetClothObjectsToSphereTrace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintClothOverlapComponent", "GetClothObjectsToSphereTrace");

	Params::VertexPaintClothOverlapComponent_GetClothObjectsToSphereTrace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintClothOverlapComponent.OnRep_ClothOverlapTracingEnabledRep
// (Final, Native, Private)

void UVertexPaintClothOverlapComponent::OnRep_ClothOverlapTracingEnabledRep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintClothOverlapComponent", "OnRep_ClothOverlapTracingEnabledRep");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintClothOverlapComponent.SetClothObjectsToSphereTrace
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<EObjectTypeQuery>                Objects                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UVertexPaintClothOverlapComponent::SetClothObjectsToSphereTrace(const TArray<EObjectTypeQuery>& Objects)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintClothOverlapComponent", "SetClothObjectsToSphereTrace");

	Params::VertexPaintClothOverlapComponent_SetClothObjectsToSphereTrace Parms{};

	Parms.Objects = std::move(Objects);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintClothOverlapComponent.SetClothOverlapTracingEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    EnableClothTracing                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintClothOverlapComponent::SetClothOverlapTracingEnabled(bool EnableClothTracing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintClothOverlapComponent", "SetClothOverlapTracingEnabled");

	Params::VertexPaintClothOverlapComponent_SetClothOverlapTracingEnabled Parms{};

	Parms.EnableClothTracing = EnableClothTracing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintColorSnippetRefs.ContainsColorSnippet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           SnippetID                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVertexPaintColorSnippetRefs::ContainsColorSnippet(const class FString& SnippetID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintColorSnippetRefs", "ContainsColorSnippet");

	Params::VertexPaintColorSnippetRefs_ContainsColorSnippet Parms{};

	Parms.SnippetID = std::move(SnippetID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintColorSnippetRefs.GetAllColorSnippetsAndDataAssetForObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>>ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TMap<class FString, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>> UVertexPaintColorSnippetRefs::GetAllColorSnippetsAndDataAssetForObject(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintColorSnippetRefs", "GetAllColorSnippetsAndDataAssetForObject");

	Params::VertexPaintColorSnippetRefs_GetAllColorSnippetsAndDataAssetForObject Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintColorSnippetRefs.GetObjectFromSnippetID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           SnippetID                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UObject>           ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UObject> UVertexPaintColorSnippetRefs::GetObjectFromSnippetID(const class FString& SnippetID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintColorSnippetRefs", "GetObjectFromSnippetID");

	Params::VertexPaintColorSnippetRefs_GetObjectFromSnippetID Parms{};

	Parms.SnippetID = std::move(SnippetID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.ClothBeginOverlappingMesh
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::ClothBeginOverlappingMesh(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "ClothBeginOverlappingMesh");

	Params::VertexPaintDetectionInterface_ClothBeginOverlappingMesh Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.ClothEndOverlappingMesh
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::ClothEndOverlappingMesh(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "ClothEndOverlappingMesh");

	Params::VertexPaintDetectionInterface_ClothEndOverlappingMesh Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.ColorsAppliedOnActor
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVertexDetectTaskResultInfo      TaskResultInfo                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVertexDetectMeshDataStruct      MeshData                                               (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVertexPaintStruct               PaintedOnActorSettings                                 (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVertexDetectAmountOfPaintedColorsOfEachChannelAmountOfPaintedColorsOfEachChannel                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVertexDetectVertexColorsOnEachBoneVertexColorsOnEachBone                                 (Parm, NativeAccessSpecifierPublic)
// struct FVertexDetectAdditionalDataToPassThroughAdditionalData                                         (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::ColorsAppliedOnActor(const struct FVertexDetectTaskResultInfo& TaskResultInfo, const struct FVertexDetectMeshDataStruct& MeshData, const struct FVertexPaintStruct& PaintedOnActorSettings, const struct FVertexDetectAmountOfPaintedColorsOfEachChannel& AmountOfPaintedColorsOfEachChannel, const struct FVertexDetectVertexColorsOnEachBone& VertexColorsOnEachBone, const struct FVertexDetectAdditionalDataToPassThrough& AdditionalData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "ColorsAppliedOnActor");

	Params::VertexPaintDetectionInterface_ColorsAppliedOnActor Parms{};

	Parms.TaskResultInfo = std::move(TaskResultInfo);
	Parms.MeshData = std::move(MeshData);
	Parms.PaintedOnActorSettings = std::move(PaintedOnActorSettings);
	Parms.AmountOfPaintedColorsOfEachChannel = std::move(AmountOfPaintedColorsOfEachChannel);
	Parms.VertexColorsOnEachBone = std::move(VertexColorsOnEachBone);
	Parms.AdditionalData = std::move(AdditionalData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.GetAllVertexColorsOnlyOnActor
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVertexDetectTaskResultInfo      TaskResultInfo                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVertexDetectMeshDataStruct      MeshData                                               (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVertexDetectGetColorsOnlyStruct GotAllVertexColorsWithSettings                         (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVertexDetectAmountOfPaintedColorsOfEachChannelAmountOfPaintedColorsOfEachChannel                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVertexDetectVertexColorsOnEachBoneVertexColorsOnEachBone                                 (Parm, NativeAccessSpecifierPublic)
// struct FVertexDetectAdditionalDataToPassThroughAdditionalData                                         (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::GetAllVertexColorsOnlyOnActor(const struct FVertexDetectTaskResultInfo& TaskResultInfo, const struct FVertexDetectMeshDataStruct& MeshData, const struct FVertexDetectGetColorsOnlyStruct& GotAllVertexColorsWithSettings, const struct FVertexDetectAmountOfPaintedColorsOfEachChannel& AmountOfPaintedColorsOfEachChannel, const struct FVertexDetectVertexColorsOnEachBone& VertexColorsOnEachBone, const struct FVertexDetectAdditionalDataToPassThrough& AdditionalData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "GetAllVertexColorsOnlyOnActor");

	Params::VertexPaintDetectionInterface_GetAllVertexColorsOnlyOnActor Parms{};

	Parms.TaskResultInfo = std::move(TaskResultInfo);
	Parms.MeshData = std::move(MeshData);
	Parms.GotAllVertexColorsWithSettings = std::move(GotAllVertexColorsWithSettings);
	Parms.AmountOfPaintedColorsOfEachChannel = std::move(AmountOfPaintedColorsOfEachChannel);
	Parms.VertexColorsOnEachBone = std::move(VertexColorsOnEachBone);
	Parms.AdditionalData = std::move(AdditionalData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.GetClosestVertexDataOnActor
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVertexDetectTaskResultInfo      TaskResultInfo                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVertexDetectMeshDataStruct      MeshData                                               (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVertexDetectInfoStruct          DetectedMeshWithSettings                               (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVertexDetectClosestVertexDataResultStructClosestVertexColorResult                               (Parm, NativeAccessSpecifierPublic)
// struct FVertexDetectEstimatedColorAtHitLocationResultStructEstimatedColorAtHitLocationResult                      (Parm, NativeAccessSpecifierPublic)
// struct FVertexDetectAvarageColorInAreaInfoAvarageColorInAreaInfo                                 (Parm, NativeAccessSpecifierPublic)
// struct FVertexDetectAmountOfPaintedColorsOfEachChannelAmountOfPaintedColorsOfEachChannel                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVertexDetectVertexColorsOnEachBoneVertexColorsOnEachBone                                 (Parm, NativeAccessSpecifierPublic)
// struct FVertexDetectAdditionalDataToPassThroughAdditionalData                                         (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::GetClosestVertexDataOnActor(const struct FVertexDetectTaskResultInfo& TaskResultInfo, const struct FVertexDetectMeshDataStruct& MeshData, const struct FVertexDetectInfoStruct& DetectedMeshWithSettings, const struct FVertexDetectClosestVertexDataResultStruct& ClosestVertexColorResult, const struct FVertexDetectEstimatedColorAtHitLocationResultStruct& EstimatedColorAtHitLocationResult, const struct FVertexDetectAvarageColorInAreaInfo& AvarageColorInAreaInfo, const struct FVertexDetectAmountOfPaintedColorsOfEachChannel& AmountOfPaintedColorsOfEachChannel, const struct FVertexDetectVertexColorsOnEachBone& VertexColorsOnEachBone, const struct FVertexDetectAdditionalDataToPassThrough& AdditionalData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "GetClosestVertexDataOnActor");

	Params::VertexPaintDetectionInterface_GetClosestVertexDataOnActor Parms{};

	Parms.TaskResultInfo = std::move(TaskResultInfo);
	Parms.MeshData = std::move(MeshData);
	Parms.DetectedMeshWithSettings = std::move(DetectedMeshWithSettings);
	Parms.ClosestVertexColorResult = std::move(ClosestVertexColorResult);
	Parms.EstimatedColorAtHitLocationResult = std::move(EstimatedColorAtHitLocationResult);
	Parms.AvarageColorInAreaInfo = std::move(AvarageColorInAreaInfo);
	Parms.AmountOfPaintedColorsOfEachChannel = std::move(AmountOfPaintedColorsOfEachChannel);
	Parms.VertexColorsOnEachBone = std::move(VertexColorsOnEachBone);
	Parms.AdditionalData = std::move(AdditionalData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.GetSkeletalMeshClothPhysicsSettings
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponentTryingToGetClothSettingsFor       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class UClothingAssetBase*, struct FVertexDetectClothSettingsStruct>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class UClothingAssetBase*, struct FVertexDetectClothSettingsStruct> IVertexPaintDetectionInterface::GetSkeletalMeshClothPhysicsSettings(class USkeletalMeshComponent* SkeletalMeshComponentTryingToGetClothSettingsFor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "GetSkeletalMeshClothPhysicsSettings");

	Params::VertexPaintDetectionInterface_GetSkeletalMeshClothPhysicsSettings Parms{};

	Parms.SkeletalMeshComponentTryingToGetClothSettingsFor = SkeletalMeshComponentTryingToGetClothSettingsFor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.PaintedOnActor_AtLocation
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVertexDetectTaskResultInfo      TaskResultInfo                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVertexDetectMeshDataStruct      MeshData                                               (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVertexPaintAtLocationStruct     PaintedAtLocationSettings                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVertexDetectClosestVertexDataResultStructClosestVertexColorResult                               (Parm, NativeAccessSpecifierPublic)
// struct FVertexDetectEstimatedColorAtHitLocationResultStructEstimatedColorAtHitLocationResult                      (Parm, NativeAccessSpecifierPublic)
// struct FVertexDetectAvarageColorInAreaInfoAvarageColorInAreaInfo                                 (Parm, NativeAccessSpecifierPublic)
// struct FVertexDetectAmountOfPaintedColorsOfEachChannelAmountOfPaintedColorsOfEachChannel                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVertexDetectVertexColorsOnEachBoneVertexColorsOnEachBone                                 (Parm, NativeAccessSpecifierPublic)
// struct FVertexDetectAdditionalDataToPassThroughAdditionalData                                         (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::PaintedOnActor_AtLocation(const struct FVertexDetectTaskResultInfo& TaskResultInfo, const struct FVertexDetectMeshDataStruct& MeshData, const struct FVertexPaintAtLocationStruct& PaintedAtLocationSettings, const struct FVertexDetectClosestVertexDataResultStruct& ClosestVertexColorResult, const struct FVertexDetectEstimatedColorAtHitLocationResultStruct& EstimatedColorAtHitLocationResult, const struct FVertexDetectAvarageColorInAreaInfo& AvarageColorInAreaInfo, const struct FVertexDetectAmountOfPaintedColorsOfEachChannel& AmountOfPaintedColorsOfEachChannel, const struct FVertexDetectVertexColorsOnEachBone& VertexColorsOnEachBone, const struct FVertexDetectAdditionalDataToPassThrough& AdditionalData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "PaintedOnActor_AtLocation");

	Params::VertexPaintDetectionInterface_PaintedOnActor_AtLocation Parms{};

	Parms.TaskResultInfo = std::move(TaskResultInfo);
	Parms.MeshData = std::move(MeshData);
	Parms.PaintedAtLocationSettings = std::move(PaintedAtLocationSettings);
	Parms.ClosestVertexColorResult = std::move(ClosestVertexColorResult);
	Parms.EstimatedColorAtHitLocationResult = std::move(EstimatedColorAtHitLocationResult);
	Parms.AvarageColorInAreaInfo = std::move(AvarageColorInAreaInfo);
	Parms.AmountOfPaintedColorsOfEachChannel = std::move(AmountOfPaintedColorsOfEachChannel);
	Parms.VertexColorsOnEachBone = std::move(VertexColorsOnEachBone);
	Parms.AdditionalData = std::move(AdditionalData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.PaintedOnActor_EntireMesh
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVertexDetectTaskResultInfo      TaskResultInfo                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVertexDetectMeshDataStruct      MeshData                                               (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVertexPaintOnEntireMeshStruct   PaintedEntireMeshSettings                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVertexDetectAmountOfPaintedColorsOfEachChannelAmountOfPaintedColorsOfEachChannel                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVertexDetectVertexColorsOnEachBoneVertexColorsOnEachBone                                 (Parm, NativeAccessSpecifierPublic)
// struct FVertexDetectAdditionalDataToPassThroughAdditionalData                                         (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::PaintedOnActor_EntireMesh(const struct FVertexDetectTaskResultInfo& TaskResultInfo, const struct FVertexDetectMeshDataStruct& MeshData, const struct FVertexPaintOnEntireMeshStruct& PaintedEntireMeshSettings, const struct FVertexDetectAmountOfPaintedColorsOfEachChannel& AmountOfPaintedColorsOfEachChannel, const struct FVertexDetectVertexColorsOnEachBone& VertexColorsOnEachBone, const struct FVertexDetectAdditionalDataToPassThrough& AdditionalData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "PaintedOnActor_EntireMesh");

	Params::VertexPaintDetectionInterface_PaintedOnActor_EntireMesh Parms{};

	Parms.TaskResultInfo = std::move(TaskResultInfo);
	Parms.MeshData = std::move(MeshData);
	Parms.PaintedEntireMeshSettings = std::move(PaintedEntireMeshSettings);
	Parms.AmountOfPaintedColorsOfEachChannel = std::move(AmountOfPaintedColorsOfEachChannel);
	Parms.VertexColorsOnEachBone = std::move(VertexColorsOnEachBone);
	Parms.AdditionalData = std::move(AdditionalData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.PaintedOnActor_PaintColorSnippet
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVertexDetectTaskResultInfo      TaskResultInfo                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVertexDetectMeshDataStruct      MeshData                                               (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVertexPaintColorSnippetStruct   PaintedColorSnippetSettings                            (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVertexDetectAmountOfPaintedColorsOfEachChannelAmountOfPaintedColorsOfEachChannel                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVertexDetectVertexColorsOnEachBoneVertexColorsOnEachBone                                 (Parm, NativeAccessSpecifierPublic)
// struct FVertexDetectAdditionalDataToPassThroughAdditionalData                                         (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::PaintedOnActor_PaintColorSnippet(const struct FVertexDetectTaskResultInfo& TaskResultInfo, const struct FVertexDetectMeshDataStruct& MeshData, const struct FVertexPaintColorSnippetStruct& PaintedColorSnippetSettings, const struct FVertexDetectAmountOfPaintedColorsOfEachChannel& AmountOfPaintedColorsOfEachChannel, const struct FVertexDetectVertexColorsOnEachBone& VertexColorsOnEachBone, const struct FVertexDetectAdditionalDataToPassThrough& AdditionalData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "PaintedOnActor_PaintColorSnippet");

	Params::VertexPaintDetectionInterface_PaintedOnActor_PaintColorSnippet Parms{};

	Parms.TaskResultInfo = std::move(TaskResultInfo);
	Parms.MeshData = std::move(MeshData);
	Parms.PaintedColorSnippetSettings = std::move(PaintedColorSnippetSettings);
	Parms.AmountOfPaintedColorsOfEachChannel = std::move(AmountOfPaintedColorsOfEachChannel);
	Parms.VertexColorsOnEachBone = std::move(VertexColorsOnEachBone);
	Parms.AdditionalData = std::move(AdditionalData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintDetectionInterface.PaintedOnActor_WithinArea
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVertexDetectTaskResultInfo      TaskResultInfo                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVertexDetectMeshDataStruct      MeshData                                               (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVertexPainthWithinAreaStruct    PaintedWithinAreaSettings                              (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVertexDetectAmountOfPaintedColorsOfEachChannelAmountOfPaintedColorsOfEachChannel                     (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVertexDetectVertexColorsOnEachBoneVertexColorsOnEachBone                                 (Parm, NativeAccessSpecifierPublic)
// struct FVertexDetectAdditionalDataToPassThroughAdditionalData                                         (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IVertexPaintDetectionInterface::PaintedOnActor_WithinArea(const struct FVertexDetectTaskResultInfo& TaskResultInfo, const struct FVertexDetectMeshDataStruct& MeshData, const struct FVertexPainthWithinAreaStruct& PaintedWithinAreaSettings, const struct FVertexDetectAmountOfPaintedColorsOfEachChannel& AmountOfPaintedColorsOfEachChannel, const struct FVertexDetectVertexColorsOnEachBone& VertexColorsOnEachBone, const struct FVertexDetectAdditionalDataToPassThrough& AdditionalData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintDetectionInterface", "PaintedOnActor_WithinArea");

	Params::VertexPaintDetectionInterface_PaintedOnActor_WithinArea Parms{};

	Parms.TaskResultInfo = std::move(TaskResultInfo);
	Parms.MeshData = std::move(MeshData);
	Parms.PaintedWithinAreaSettings = std::move(PaintedWithinAreaSettings);
	Parms.AmountOfPaintedColorsOfEachChannel = std::move(AmountOfPaintedColorsOfEachChannel);
	Parms.VertexColorsOnEachBone = std::move(VertexColorsOnEachBone);
	Parms.AdditionalData = std::move(AdditionalData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.ClearMeshPaintedSinceSessionStarted_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::ClearMeshPaintedSinceSessionStarted_Wrapper(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "ClearMeshPaintedSinceSessionStarted_Wrapper");

	Params::VertexPaintFunctionLibrary_ClearMeshPaintedSinceSessionStarted_Wrapper Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.CollisionChannelToObjectType
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ECollisionChannel                       Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EObjectTypeQuery                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EObjectTypeQuery UVertexPaintFunctionLibrary::CollisionChannelToObjectType(ECollisionChannel Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "CollisionChannelToObjectType");

	Params::VertexPaintFunctionLibrary_CollisionChannelToObjectType Parms{};

	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.DrawPrimitiveComponentBoundsBox
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Lifetime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Thickness                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ColorToDraw                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::DrawPrimitiveComponentBoundsBox(class UPrimitiveComponent* Component, float Lifetime, float Thickness, const struct FLinearColor& ColorToDraw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "DrawPrimitiveComponentBoundsBox");

	Params::VertexPaintFunctionLibrary_DrawPrimitiveComponentBoundsBox Parms{};

	Parms.Component = Component;
	Parms.Lifetime = Lifetime;
	Parms.Thickness = Thickness;
	Parms.ColorToDraw = std::move(ColorToDraw);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllMeshColorSnippetsAsString_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>>AvailableColorSnippetsAndDataAssets                    (Parm, OutParm, UObjectWrapper, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::GetAllMeshColorSnippetsAsString_Wrapper(class UPrimitiveComponent* MeshComponent, TMap<class FString, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>>* AvailableColorSnippetsAndDataAssets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetAllMeshColorSnippetsAsString_Wrapper");

	Params::VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsString_Wrapper Parms{};

	Parms.MeshComponent = MeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AvailableColorSnippetsAndDataAssets != nullptr)
		*AvailableColorSnippetsAndDataAssets = std::move(Parms.AvailableColorSnippetsAndDataAssets);
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllMeshColorSnippetsAsTags_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<struct FGameplayTag, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>>AvailableColorSnippetTagsAndDataAssets                 (Parm, OutParm, UObjectWrapper, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::GetAllMeshColorSnippetsAsTags_Wrapper(class UPrimitiveComponent* MeshComponent, TMap<struct FGameplayTag, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>>* AvailableColorSnippetTagsAndDataAssets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetAllMeshColorSnippetsAsTags_Wrapper");

	Params::VertexPaintFunctionLibrary_GetAllMeshColorSnippetsAsTags_Wrapper Parms{};

	Parms.MeshComponent = MeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AvailableColorSnippetTagsAndDataAssets != nullptr)
		*AvailableColorSnippetTagsAndDataAssets = std::move(Parms.AvailableColorSnippetTagsAndDataAssets);
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     TagCategory                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<struct FGameplayTag, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>>AvailableColorSnippetTagsAndDataAssetsUnderTagCategory (Parm, OutParm, UObjectWrapper, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper(class UPrimitiveComponent* MeshComponent, const struct FGameplayTag& TagCategory, TMap<struct FGameplayTag, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>>* AvailableColorSnippetTagsAndDataAssetsUnderTagCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper");

	Params::VertexPaintFunctionLibrary_GetAllMeshColorSnippetsTagsUnderTagCategory_Wrapper Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.TagCategory = std::move(TagCategory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AvailableColorSnippetTagsAndDataAssetsUnderTagCategory != nullptr)
		*AvailableColorSnippetTagsAndDataAssetsUnderTagCategory = std::move(Parms.AvailableColorSnippetTagsAndDataAssetsUnderTagCategory);
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllPhysicsSurfaces
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<EPhysicalSurface>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<EPhysicalSurface> UVertexPaintFunctionLibrary::GetAllPhysicsSurfaces()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetAllPhysicsSurfaces");

	Params::VertexPaintFunctionLibrary_GetAllPhysicsSurfaces Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhysicalSurface                        PhysicsSurface                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Successfull                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<Enum_SurfaceAtChannel>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<Enum_SurfaceAtChannel> UVertexPaintFunctionLibrary::GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper(class UMaterialInterface* Material, EPhysicalSurface PhysicsSurface, bool* Successfull)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper");

	Params::VertexPaintFunctionLibrary_GetAllVertexColorChannelsPhysicsSurfaceIsRegisteredTo_Wrapper Parms{};

	Parms.Material = Material;
	Parms.PhysicsSurface = PhysicsSurface;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Successfull != nullptr)
		*Successfull = Parms.Successfull;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAllVertexColorsOnly_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVertexPaintDetectionComponent*   RuntimeVertexPaintAndDetectionComponent                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVertexDetectGetColorsOnlyStruct GetAllVertexColorsStruct                               (Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVertexDetectAdditionalDataToPassThroughAdditionalDataToPassThrough                            (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::GetAllVertexColorsOnly_Wrapper(class UVertexPaintDetectionComponent* RuntimeVertexPaintAndDetectionComponent, class UPrimitiveComponent* MeshComponent, const struct FVertexDetectGetColorsOnlyStruct& GetAllVertexColorsStruct, const struct FVertexDetectAdditionalDataToPassThrough& AdditionalDataToPassThrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetAllVertexColorsOnly_Wrapper");

	Params::VertexPaintFunctionLibrary_GetAllVertexColorsOnly_Wrapper Parms{};

	Parms.RuntimeVertexPaintAndDetectionComponent = RuntimeVertexPaintAndDetectionComponent;
	Parms.MeshComponent = MeshComponent;
	Parms.GetAllVertexColorsStruct = std::move(GetAllVertexColorsStruct);
	Parms.AdditionalDataToPassThrough = std::move(AdditionalDataToPassThrough);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAmountOfLODsToPaintOn
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComp                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OverrideLODToPaintUpOn                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OverrideUpToLOD                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVertexPaintFunctionLibrary::GetAmountOfLODsToPaintOn(class UPrimitiveComponent* MeshComp, bool OverrideLODToPaintUpOn, int32 OverrideUpToLOD)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetAmountOfLODsToPaintOn");

	Params::VertexPaintFunctionLibrary_GetAmountOfLODsToPaintOn Parms{};

	Parms.MeshComp = MeshComp;
	Parms.OverrideLODToPaintUpOn = OverrideLODToPaintUpOn;
	Parms.OverrideUpToLOD = OverrideUpToLOD;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAmountOfPaintedColorsForEachChannel
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FColor>                   VertexColors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   MinColorAmountToBeConsidered                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVertexDetectAmountOfPaintedColorsOfEachChannelReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FVertexDetectAmountOfPaintedColorsOfEachChannel UVertexPaintFunctionLibrary::GetAmountOfPaintedColorsForEachChannel(const TArray<struct FColor>& VertexColors, float MinColorAmountToBeConsidered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetAmountOfPaintedColorsForEachChannel");

	Params::VertexPaintFunctionLibrary_GetAmountOfPaintedColorsForEachChannel Parms{};

	Parms.VertexColors = std::move(VertexColors);
	Parms.MinColorAmountToBeConsidered = MinColorAmountToBeConsidered;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetAmountOfTasksStartedByComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVertexPaintDetectionComponent*   PaintComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVertexPaintFunctionLibrary::GetAmountOfTasksStartedByComponent(class UVertexPaintDetectionComponent* PaintComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetAmountOfTasksStartedByComponent");

	Params::VertexPaintFunctionLibrary_GetAmountOfTasksStartedByComponent Parms{};

	Parms.PaintComponent = PaintComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetCalculateColorsDetectionTasksAmount_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class UPrimitiveComponent*, int32> ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<class UPrimitiveComponent*, int32> UVertexPaintFunctionLibrary::GetCalculateColorsDetectionTasksAmount_Wrapper(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetCalculateColorsDetectionTasksAmount_Wrapper");

	Params::VertexPaintFunctionLibrary_GetCalculateColorsDetectionTasksAmount_Wrapper Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetCalculateColorsPaintTasksAmount_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class UPrimitiveComponent*, int32> ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<class UPrimitiveComponent*, int32> UVertexPaintFunctionLibrary::GetCalculateColorsPaintTasksAmount_Wrapper(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetCalculateColorsPaintTasksAmount_Wrapper");

	Params::VertexPaintFunctionLibrary_GetCalculateColorsPaintTasksAmount_Wrapper Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetClosestVertexDataOnMesh_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVertexPaintDetectionComponent*   RuntimeVertexPaintAndDetectionComponent                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVertexDetectInfoStruct          GetClosestVertexDataStruct                             (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVertexDetectAdditionalDataToPassThroughAdditionalDataToPassThrough                            (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::GetClosestVertexDataOnMesh_Wrapper(class UVertexPaintDetectionComponent* RuntimeVertexPaintAndDetectionComponent, class UPrimitiveComponent* MeshComponent, const struct FVertexDetectInfoStruct& GetClosestVertexDataStruct, const struct FVertexDetectAdditionalDataToPassThrough& AdditionalDataToPassThrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetClosestVertexDataOnMesh_Wrapper");

	Params::VertexPaintFunctionLibrary_GetClosestVertexDataOnMesh_Wrapper Parms{};

	Parms.RuntimeVertexPaintAndDetectionComponent = RuntimeVertexPaintAndDetectionComponent;
	Parms.MeshComponent = MeshComponent;
	Parms.GetClosestVertexDataStruct = std::move(GetClosestVertexDataStruct);
	Parms.AdditionalDataToPassThrough = std::move(AdditionalDataToPassThrough);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetClothAssets
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USkeletalMesh*                    SkeletalMesh                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UClothingAssetBase*>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UClothingAssetBase*> UVertexPaintFunctionLibrary::GetClothAssets(class USkeletalMesh* SkeletalMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetClothAssets");

	Params::VertexPaintFunctionLibrary_GetClothAssets Parms{};

	Parms.SkeletalMesh = SkeletalMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetColorSnippetReferenceDataAsset
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UVertexPaintColorSnippetRefs*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVertexPaintColorSnippetRefs* UVertexPaintFunctionLibrary::GetColorSnippetReferenceDataAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetColorSnippetReferenceDataAsset");

	Params::VertexPaintFunctionLibrary_GetColorSnippetReferenceDataAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetColorsToApplyFromPhysicsMaterial_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               MaterialToApplyColorsTo                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhysicalSurface                        PhysicalSurface                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RedAmountToApply                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GreenAmountToApply                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   blueAmountToApply                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AlphaAmountToApply                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DefaultAmountIfFailOrChannelIsNotRegistered            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVertexPaintFunctionLibrary::GetColorsToApplyFromPhysicsMaterial_Wrapper(class UMaterialInterface* MaterialToApplyColorsTo, EPhysicalSurface PhysicalSurface, float* RedAmountToApply, float* GreenAmountToApply, float* blueAmountToApply, float* AlphaAmountToApply, float DefaultAmountIfFailOrChannelIsNotRegistered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetColorsToApplyFromPhysicsMaterial_Wrapper");

	Params::VertexPaintFunctionLibrary_GetColorsToApplyFromPhysicsMaterial_Wrapper Parms{};

	Parms.MaterialToApplyColorsTo = MaterialToApplyColorsTo;
	Parms.PhysicalSurface = PhysicalSurface;
	Parms.DefaultAmountIfFailOrChannelIsNotRegistered = DefaultAmountIfFailOrChannelIsNotRegistered;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (RedAmountToApply != nullptr)
		*RedAmountToApply = Parms.RedAmountToApply;

	if (GreenAmountToApply != nullptr)
		*GreenAmountToApply = Parms.GreenAmountToApply;

	if (blueAmountToApply != nullptr)
		*blueAmountToApply = Parms.blueAmountToApply;

	if (AlphaAmountToApply != nullptr)
		*AlphaAmountToApply = Parms.AlphaAmountToApply;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetMeshColorSnippetsTagsInTagCategory_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     TagCategory                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<struct FGameplayTag, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>>AvailableColorSnippetTagsAndDataAssetsUnderTagCategory (Parm, OutParm, UObjectWrapper, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::GetMeshColorSnippetsTagsInTagCategory_Wrapper(class UPrimitiveComponent* MeshComponent, const struct FGameplayTag& TagCategory, TMap<struct FGameplayTag, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>>* AvailableColorSnippetTagsAndDataAssetsUnderTagCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetMeshColorSnippetsTagsInTagCategory_Wrapper");

	Params::VertexPaintFunctionLibrary_GetMeshColorSnippetsTagsInTagCategory_Wrapper Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.TagCategory = std::move(TagCategory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AvailableColorSnippetTagsAndDataAssetsUnderTagCategory != nullptr)
		*AvailableColorSnippetTagsAndDataAssetsUnderTagCategory = std::move(Parms.AvailableColorSnippetTagsAndDataAssetsUnderTagCategory);
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetMeshComponentVertexColors_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    GetColorsForAllLODs                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   GetColorsUpToLOD                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVertexDetectMeshDataStruct      ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FVertexDetectMeshDataStruct UVertexPaintFunctionLibrary::GetMeshComponentVertexColors_Wrapper(class UPrimitiveComponent* MeshComponent, bool* Success, bool GetColorsForAllLODs, int32 GetColorsUpToLOD)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetMeshComponentVertexColors_Wrapper");

	Params::VertexPaintFunctionLibrary_GetMeshComponentVertexColors_Wrapper Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.GetColorsForAllLODs = GetColorsForAllLODs;
	Parms.GetColorsUpToLOD = GetColorsUpToLOD;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Success != nullptr)
		*Success = Parms.Success;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetMeshPaintedSinceSessionStarted_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class UPrimitiveComponent*, int32> ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TMap<class UPrimitiveComponent*, int32> UVertexPaintFunctionLibrary::GetMeshPaintedSinceSessionStarted_Wrapper(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetMeshPaintedSinceSessionStarted_Wrapper");

	Params::VertexPaintFunctionLibrary_GetMeshPaintedSinceSessionStarted_Wrapper Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetOptimizationDataAsset
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UVertexPaintOptimizationDataAsset*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVertexPaintOptimizationDataAsset* UVertexPaintFunctionLibrary::GetOptimizationDataAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetOptimizationDataAsset");

	Params::VertexPaintFunctionLibrary_GetOptimizationDataAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetPhysicalMaterialUsingPhysicsSurface_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UPhysicalMaterial>    PhysicalMaterialClass                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhysicalSurface                        PhysicsSurface                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPhysicalMaterial*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPhysicalMaterial* UVertexPaintFunctionLibrary::GetPhysicalMaterialUsingPhysicsSurface_Wrapper(const class UObject* WorldContextObject, TSubclassOf<class UPhysicalMaterial> PhysicalMaterialClass, EPhysicalSurface PhysicsSurface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetPhysicalMaterialUsingPhysicsSurface_Wrapper");

	Params::VertexPaintFunctionLibrary_GetPhysicalMaterialUsingPhysicsSurface_Wrapper Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PhysicalMaterialClass = PhysicalMaterialClass;
	Parms.PhysicsSurface = PhysicsSurface;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetTheMostDominantPhysicsSurface_Wrapper
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               OptionalMaterialPhysicsSurfaceWasDetectedOn            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<EPhysicalSurface>                PhysicsSurfaces                                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<float>                           PhysicsSurfaceValues                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// EPhysicalSurface                        MostDominantPhysicsSurfaceFromArray                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MostDominantPhysicsSurfaceColorValue                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVertexPaintFunctionLibrary::GetTheMostDominantPhysicsSurface_Wrapper(class UMaterialInterface* OptionalMaterialPhysicsSurfaceWasDetectedOn, const TArray<EPhysicalSurface>& PhysicsSurfaces, const TArray<float>& PhysicsSurfaceValues, EPhysicalSurface* MostDominantPhysicsSurfaceFromArray, float* MostDominantPhysicsSurfaceColorValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetTheMostDominantPhysicsSurface_Wrapper");

	Params::VertexPaintFunctionLibrary_GetTheMostDominantPhysicsSurface_Wrapper Parms{};

	Parms.OptionalMaterialPhysicsSurfaceWasDetectedOn = OptionalMaterialPhysicsSurfaceWasDetectedOn;
	Parms.PhysicsSurfaces = std::move(PhysicsSurfaces);
	Parms.PhysicsSurfaceValues = std::move(PhysicsSurfaceValues);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MostDominantPhysicsSurfaceFromArray != nullptr)
		*MostDominantPhysicsSurfaceFromArray = Parms.MostDominantPhysicsSurfaceFromArray;

	if (MostDominantPhysicsSurfaceColorValue != nullptr)
		*MostDominantPhysicsSurfaceColorValue = Parms.MostDominantPhysicsSurfaceColorValue;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.GetVertexPaintMaterialDataAsset
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UVertexPaintMaterialDataAsset*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVertexPaintMaterialDataAsset* UVertexPaintFunctionLibrary::GetVertexPaintMaterialDataAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "GetVertexPaintMaterialDataAsset");

	Params::VertexPaintFunctionLibrary_GetVertexPaintMaterialDataAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.IsWorldValid
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVertexPaintFunctionLibrary::IsWorldValid(class UWorld* World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "IsWorldValid");

	Params::VertexPaintFunctionLibrary_IsWorldValid Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.MultisphereTraceForPaintAtLocation_Wrapper
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AreaOfEffect                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<EObjectTypeQuery>                ObjectTypesToTraceFor                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ExpectedCallbacksFromPaintAtLocation                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHitResult>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<struct FHitResult> UVertexPaintFunctionLibrary::MultisphereTraceForPaintAtLocation_Wrapper(const class UObject* WorldContextObject, const struct FVector& Location, const float& AreaOfEffect, const TArray<EObjectTypeQuery>& ObjectTypesToTraceFor, int32* ExpectedCallbacksFromPaintAtLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "MultisphereTraceForPaintAtLocation_Wrapper");

	Params::VertexPaintFunctionLibrary_MultisphereTraceForPaintAtLocation_Wrapper Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Location = std::move(Location);
	Parms.AreaOfEffect = AreaOfEffect;
	Parms.ObjectTypesToTraceFor = std::move(ObjectTypesToTraceFor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExpectedCallbacksFromPaintAtLocation != nullptr)
		*ExpectedCallbacksFromPaintAtLocation = Parms.ExpectedCallbacksFromPaintAtLocation;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.ObjectTypeToCollisionChannel
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EObjectTypeQuery                        Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECollisionChannel UVertexPaintFunctionLibrary::ObjectTypeToCollisionChannel(EObjectTypeQuery Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "ObjectTypeToCollisionChannel");

	Params::VertexPaintFunctionLibrary_ObjectTypeToCollisionChannel Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.PaintColorSnippetOnMesh_Wrappers
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVertexPaintDetectionComponent*   RuntimeVertexPaintAndDetectionComponent                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVertexPaintColorSnippetStruct   PaintColorSnippetStruct                                (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVertexDetectAdditionalDataToPassThroughAdditionalDataToPassThrough                            (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::PaintColorSnippetOnMesh_Wrappers(class UVertexPaintDetectionComponent* RuntimeVertexPaintAndDetectionComponent, class UPrimitiveComponent* MeshComponent, const struct FVertexPaintColorSnippetStruct& PaintColorSnippetStruct, const struct FVertexDetectAdditionalDataToPassThrough& AdditionalDataToPassThrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "PaintColorSnippetOnMesh_Wrappers");

	Params::VertexPaintFunctionLibrary_PaintColorSnippetOnMesh_Wrappers Parms{};

	Parms.RuntimeVertexPaintAndDetectionComponent = RuntimeVertexPaintAndDetectionComponent;
	Parms.MeshComponent = MeshComponent;
	Parms.PaintColorSnippetStruct = std::move(PaintColorSnippetStruct);
	Parms.AdditionalDataToPassThrough = std::move(AdditionalDataToPassThrough);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.PaintOnEntireMesh_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVertexPaintDetectionComponent*   RuntimeVertexPaintAndDetectionComponent                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVertexPaintOnEntireMeshStruct   PaintOnEntireMeshStruct                                (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVertexDetectAdditionalDataToPassThroughAdditionalDataToPassThrough                            (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::PaintOnEntireMesh_Wrapper(class UVertexPaintDetectionComponent* RuntimeVertexPaintAndDetectionComponent, class UPrimitiveComponent* MeshComponent, const struct FVertexPaintOnEntireMeshStruct& PaintOnEntireMeshStruct, const struct FVertexDetectAdditionalDataToPassThrough& AdditionalDataToPassThrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "PaintOnEntireMesh_Wrapper");

	Params::VertexPaintFunctionLibrary_PaintOnEntireMesh_Wrapper Parms{};

	Parms.RuntimeVertexPaintAndDetectionComponent = RuntimeVertexPaintAndDetectionComponent;
	Parms.MeshComponent = MeshComponent;
	Parms.PaintOnEntireMeshStruct = std::move(PaintOnEntireMeshStruct);
	Parms.AdditionalDataToPassThrough = std::move(AdditionalDataToPassThrough);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.PaintOnMeshAtLocation_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVertexPaintDetectionComponent*   RuntimeVertexPaintAndDetectionComponent                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVertexPaintAtLocationStruct     PaintAtLocationStruct                                  (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVertexDetectAdditionalDataToPassThroughAdditionalDataToPassThrough                            (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::PaintOnMeshAtLocation_Wrapper(class UVertexPaintDetectionComponent* RuntimeVertexPaintAndDetectionComponent, class UPrimitiveComponent* MeshComponent, const struct FVertexPaintAtLocationStruct& PaintAtLocationStruct, const struct FVertexDetectAdditionalDataToPassThrough& AdditionalDataToPassThrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "PaintOnMeshAtLocation_Wrapper");

	Params::VertexPaintFunctionLibrary_PaintOnMeshAtLocation_Wrapper Parms{};

	Parms.RuntimeVertexPaintAndDetectionComponent = RuntimeVertexPaintAndDetectionComponent;
	Parms.MeshComponent = MeshComponent;
	Parms.PaintAtLocationStruct = std::move(PaintAtLocationStruct);
	Parms.AdditionalDataToPassThrough = std::move(AdditionalDataToPassThrough);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.PaintOnMeshWithinArea_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UVertexPaintDetectionComponent*   RuntimeVertexPaintAndDetectionComponent                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVertexPainthWithinArea_ComponentToCheckIfIsWithinInfo>ComponentsToCheckIfIsWithin                            (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVertexPainthWithinAreaStruct    PaintWithinAreaStruct                                  (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVertexDetectAdditionalDataToPassThroughAdditionalDataToPassThrough                            (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::PaintOnMeshWithinArea_Wrapper(class UVertexPaintDetectionComponent* RuntimeVertexPaintAndDetectionComponent, class UPrimitiveComponent* MeshComponent, const TArray<struct FVertexPainthWithinArea_ComponentToCheckIfIsWithinInfo>& ComponentsToCheckIfIsWithin, const struct FVertexPainthWithinAreaStruct& PaintWithinAreaStruct, const struct FVertexDetectAdditionalDataToPassThrough& AdditionalDataToPassThrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "PaintOnMeshWithinArea_Wrapper");

	Params::VertexPaintFunctionLibrary_PaintOnMeshWithinArea_Wrapper Parms{};

	Parms.RuntimeVertexPaintAndDetectionComponent = RuntimeVertexPaintAndDetectionComponent;
	Parms.MeshComponent = MeshComponent;
	Parms.ComponentsToCheckIfIsWithin = std::move(ComponentsToCheckIfIsWithin);
	Parms.PaintWithinAreaStruct = std::move(PaintWithinAreaStruct);
	Parms.AdditionalDataToPassThrough = std::move(AdditionalDataToPassThrough);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.SetChaosClothPhysics
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClothingAssetBase*               ClothingAsset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVertexDetectChaosClothPhysicsSettingsClothPhysicsSettings                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::SetChaosClothPhysics(class USkeletalMeshComponent* SkeletalMeshComponent, class UClothingAssetBase* ClothingAsset, const struct FVertexDetectChaosClothPhysicsSettings& ClothPhysicsSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "SetChaosClothPhysics");

	Params::VertexPaintFunctionLibrary_SetChaosClothPhysics Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.ClothingAsset = ClothingAsset;
	Parms.ClothPhysicsSettings = std::move(ClothPhysicsSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.SetChaosWheeledVehicleFrictionMultiplier_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UChaosWheeledVehicleMovementComponent*ChaosWheeledVehicleMovementComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   WheelIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Friction                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::SetChaosWheeledVehicleFrictionMultiplier_Wrapper(class UChaosWheeledVehicleMovementComponent* ChaosWheeledVehicleMovementComponent, int32 WheelIndex, float Friction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "SetChaosWheeledVehicleFrictionMultiplier_Wrapper");

	Params::VertexPaintFunctionLibrary_SetChaosWheeledVehicleFrictionMultiplier_Wrapper Parms{};

	Parms.ChaosWheeledVehicleMovementComponent = ChaosWheeledVehicleMovementComponent;
	Parms.WheelIndex = WheelIndex;
	Parms.Friction = Friction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.SetMeshComponentVertexColors_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVertexPaintSetMeshComponentVertexColorsSetMeshComponentVertexColorsSettings                   (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVertexDetectAdditionalDataToPassThroughAdditionalDataToPassThrough                            (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::SetMeshComponentVertexColors_Wrapper(class UPrimitiveComponent* MeshComponent, const struct FVertexPaintSetMeshComponentVertexColors& SetMeshComponentVertexColorsSettings, const struct FVertexDetectAdditionalDataToPassThrough& AdditionalDataToPassThrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "SetMeshComponentVertexColors_Wrapper");

	Params::VertexPaintFunctionLibrary_SetMeshComponentVertexColors_Wrapper Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.SetMeshComponentVertexColorsSettings = std::move(SetMeshComponentVertexColorsSettings);
	Parms.AdditionalDataToPassThrough = std::move(AdditionalDataToPassThrough);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.SetMeshComponentVertexColorsUsingSerializedString_Wrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVertexPaintSetMeshComponentVertexColorsUsingSerializedStringSetMeshComponentVertexColorsUsingSerializedStringSettings(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVertexDetectAdditionalDataToPassThroughAdditionalDataToPassThrough                            (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::SetMeshComponentVertexColorsUsingSerializedString_Wrapper(class UPrimitiveComponent* MeshComponent, const struct FVertexPaintSetMeshComponentVertexColorsUsingSerializedString& SetMeshComponentVertexColorsUsingSerializedStringSettings, const struct FVertexDetectAdditionalDataToPassThrough& AdditionalDataToPassThrough)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "SetMeshComponentVertexColorsUsingSerializedString_Wrapper");

	Params::VertexPaintFunctionLibrary_SetMeshComponentVertexColorsUsingSerializedString_Wrapper Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.SetMeshComponentVertexColorsUsingSerializedStringSettings = std::move(SetMeshComponentVertexColorsUsingSerializedStringSettings);
	Parms.AdditionalDataToPassThrough = std::move(AdditionalDataToPassThrough);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.UpdateChaosClothPhysicsWithExistingColors
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::UpdateChaosClothPhysicsWithExistingColors(class USkeletalMeshComponent* SkeletalMeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "UpdateChaosClothPhysicsWithExistingColors");

	Params::VertexPaintFunctionLibrary_UpdateChaosClothPhysicsWithExistingColors Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.VertexPaintDetectionPlugin_GetSkeletalMesh
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComp                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMesh*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMesh* UVertexPaintFunctionLibrary::VertexPaintDetectionPlugin_GetSkeletalMesh(class USkeletalMeshComponent* SkeletalMeshComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "VertexPaintDetectionPlugin_GetSkeletalMesh");

	Params::VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMesh Parms{};

	Parms.SkeletalMeshComp = SkeletalMeshComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.VertexPaintDetectionPlugin_GetSkeletalMeshVertexColorsAtLOD
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Lod                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FColor>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FColor> UVertexPaintFunctionLibrary::VertexPaintDetectionPlugin_GetSkeletalMeshVertexColorsAtLOD(class USkeletalMeshComponent* SkeletalMeshComponent, int32 Lod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "VertexPaintDetectionPlugin_GetSkeletalMeshVertexColorsAtLOD");

	Params::VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetSkeletalMeshVertexColorsAtLOD Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.Lod = Lod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.VertexPaintDetectionPlugin_GetStaticMeshVertexColorsAtLOD
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMeshComponent*             StaticMeshComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Lod                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FColor>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FColor> UVertexPaintFunctionLibrary::VertexPaintDetectionPlugin_GetStaticMeshVertexColorsAtLOD(class UStaticMeshComponent* StaticMeshComponent, int32 Lod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "VertexPaintDetectionPlugin_GetStaticMeshVertexColorsAtLOD");

	Params::VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_GetStaticMeshVertexColorsAtLOD Parms{};

	Parms.StaticMeshComponent = StaticMeshComponent;
	Parms.Lod = Lod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.VertexPaintDetectionPlugin_SetSkeletalMeshAndReleaseResources
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMesh*                    NewMesh                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::VertexPaintDetectionPlugin_SetSkeletalMeshAndReleaseResources(class USkeletalMeshComponent* SkeletalMeshComponent, class USkeletalMesh* NewMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "VertexPaintDetectionPlugin_SetSkeletalMeshAndReleaseResources");

	Params::VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SetSkeletalMeshAndReleaseResources Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.NewMesh = NewMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.VertexPaintDetectionPlugin_SetStaticMeshAndReleaseOverrideVertexColors
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStaticMeshComponent*             StaticMeshComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      NewMesh                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintFunctionLibrary::VertexPaintDetectionPlugin_SetStaticMeshAndReleaseOverrideVertexColors(class UStaticMeshComponent* StaticMeshComponent, class UStaticMesh* NewMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "VertexPaintDetectionPlugin_SetStaticMeshAndReleaseOverrideVertexColors");

	Params::VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SetStaticMeshAndReleaseOverrideVertexColors Parms{};

	Parms.StaticMeshComponent = StaticMeshComponent;
	Parms.NewMesh = NewMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<int32, class FString>              AssetIndexAndName                                      (Parm, NativeAccessSpecifierPublic)
// TMap<int32, class FString>              ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<int32, class FString> UVertexPaintFunctionLibrary::VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically(const TMap<int32, class FString>& AssetIndexAndName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically");

	Params::VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortAssetsNamesAlphabetically Parms{};

	Parms.AssetIndexAndName = std::move(AssetIndexAndName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintFunctionLibrary.VertexPaintDetectionPlugin_SortStringArrayAlphabetically
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Strings                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UVertexPaintFunctionLibrary::VertexPaintDetectionPlugin_SortStringArrayAlphabetically(const TArray<class FString>& Strings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VertexPaintFunctionLibrary", "VertexPaintDetectionPlugin_SortStringArrayAlphabetically");

	Params::VertexPaintFunctionLibrary_VertexPaintDetectionPlugin_SortStringArrayAlphabetically Parms{};

	Parms.Strings = std::move(Strings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintMaterialDataAsset.AddToVertexPaintMaterialInterface
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UMaterialInterface>Material                                               (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVertexPaintMaterialDataAssetStructMaterialDataAssetStruct                                (Parm, NativeAccessSpecifierPublic)

void UVertexPaintMaterialDataAsset::AddToVertexPaintMaterialInterface(TSoftObjectPtr<class UMaterialInterface> Material, const struct FVertexPaintMaterialDataAssetStruct& MaterialDataAssetStruct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintMaterialDataAsset", "AddToVertexPaintMaterialInterface");

	Params::VertexPaintMaterialDataAsset_AddToVertexPaintMaterialInterface Parms{};

	Parms.Material = Material;
	Parms.MaterialDataAssetStruct = std::move(MaterialDataAssetStruct);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VertexPaintDetectionPlugin.VertexPaintMaterialDataAsset.GetVertexPaintMaterialInterface
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<TSoftObjectPtr<class UMaterialInterface>, struct FVertexPaintMaterialDataAssetStruct>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<TSoftObjectPtr<class UMaterialInterface>, struct FVertexPaintMaterialDataAssetStruct> UVertexPaintMaterialDataAsset::GetVertexPaintMaterialInterface()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintMaterialDataAsset", "GetVertexPaintMaterialInterface");

	Params::VertexPaintMaterialDataAsset_GetVertexPaintMaterialInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintMaterialDataAsset.IsMaterialAddedToPaintOnMaterialDataAsset
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSoftObjectPtr<class UMaterialInterface>Material                                               (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVertexPaintMaterialDataAsset::IsMaterialAddedToPaintOnMaterialDataAsset(TSoftObjectPtr<class UMaterialInterface> Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintMaterialDataAsset", "IsMaterialAddedToPaintOnMaterialDataAsset");

	Params::VertexPaintMaterialDataAsset_IsMaterialAddedToPaintOnMaterialDataAsset Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VertexPaintDetectionPlugin.VertexPaintMaterialDataAsset.RemoveFromVertexPaintMaterialInterface
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UMaterialInterface>Material                                               (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVertexPaintMaterialDataAsset::RemoveFromVertexPaintMaterialInterface(TSoftObjectPtr<class UMaterialInterface> Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VertexPaintMaterialDataAsset", "RemoveFromVertexPaintMaterialInterface");

	Params::VertexPaintMaterialDataAsset_RemoveFromVertexPaintMaterialInterface Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

