#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALI_PlayerCharacter

#include "Basic.hpp"

#include "ALI_PlayerCharacter_classes.hpp"
#include "ALI_PlayerCharacter_parameters.hpp"


namespace SDK
{

// Function ALI_PlayerCharacter.ALI_PlayerCharacter_C.WalkTwistHandTweaks
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPoseLink                        WalkTwistHandTweaksInputPose                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   TwistInput                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   JogBlend                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FPoseLink                        WalkTwistHandTweaks_0                                  (Parm, OutParm, NoDestructor)

void IALI_PlayerCharacter_C::WalkTwistHandTweaks(const struct FPoseLink& WalkTwistHandTweaksInputPose, float TwistInput, float JogBlend, struct FPoseLink* WalkTwistHandTweaks_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALI_PlayerCharacter_C", "WalkTwistHandTweaks");

	Params::ALI_PlayerCharacter_C_WalkTwistHandTweaks Parms{};

	Parms.WalkTwistHandTweaksInputPose = std::move(WalkTwistHandTweaksInputPose);
	Parms.TwistInput = TwistInput;
	Parms.JogBlend = JogBlend;

	UObject::ProcessEvent(Func, &Parms);

	if (WalkTwistHandTweaks_0 != nullptr)
		*WalkTwistHandTweaks_0 = std::move(Parms.WalkTwistHandTweaks_0);
}


// Function ALI_PlayerCharacter.ALI_PlayerCharacter_C.ArmIKLayer
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPoseLink                        ArmIKInputPose                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FArmIKEffectorData               RightArmIKData                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FArmIKEffectorData               LeftArmIKData                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FVector                          RightArmPoleVector                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          LeftArmPoleVector                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IKActive                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FPoseLink                        ArmIKLayer_0                                           (Parm, OutParm, NoDestructor)

void IALI_PlayerCharacter_C::ArmIKLayer(const struct FPoseLink& ArmIKInputPose, const struct FArmIKEffectorData& RightArmIKData, const struct FArmIKEffectorData& LeftArmIKData, const struct FVector& RightArmPoleVector, const struct FVector& LeftArmPoleVector, bool IKActive, struct FPoseLink* ArmIKLayer_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALI_PlayerCharacter_C", "ArmIKLayer");

	Params::ALI_PlayerCharacter_C_ArmIKLayer Parms{};

	Parms.ArmIKInputPose = std::move(ArmIKInputPose);
	Parms.RightArmIKData = std::move(RightArmIKData);
	Parms.LeftArmIKData = std::move(LeftArmIKData);
	Parms.RightArmPoleVector = std::move(RightArmPoleVector);
	Parms.LeftArmPoleVector = std::move(LeftArmPoleVector);
	Parms.IKActive = IKActive;

	UObject::ProcessEvent(Func, &Parms);

	if (ArmIKLayer_0 != nullptr)
		*ArmIKLayer_0 = std::move(Parms.ArmIKLayer_0);
}


// Function ALI_PlayerCharacter.ALI_PlayerCharacter_C.FootIKLayer
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPoseLink                        FootIKInputPose                                        (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// class UAnimComponentFootIK*             FootIKData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FootIKHipsOffset                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FPoseLink                        FootIKLayer_0                                          (Parm, OutParm, NoDestructor)

void IALI_PlayerCharacter_C::FootIKLayer(const struct FPoseLink& FootIKInputPose, class UAnimComponentFootIK* FootIKData, float FootIKHipsOffset, struct FPoseLink* FootIKLayer_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALI_PlayerCharacter_C", "FootIKLayer");

	Params::ALI_PlayerCharacter_C_FootIKLayer Parms{};

	Parms.FootIKInputPose = std::move(FootIKInputPose);
	Parms.FootIKData = FootIKData;
	Parms.FootIKHipsOffset = FootIKHipsOffset;

	UObject::ProcessEvent(Func, &Parms);

	if (FootIKLayer_0 != nullptr)
		*FootIKLayer_0 = std::move(Parms.FootIKLayer_0);
}

}

