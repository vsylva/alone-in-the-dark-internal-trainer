#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MultiUserClientLibrary

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum MultiUserClientLibrary.EMultiUserConnectionStatus
// NumValues: 0x0005
enum class EMultiUserConnectionStatus : uint8
{
	Connecting                               = 0,
	Connected                                = 1,
	Disconnecting                            = 2,
	Disconnected                             = 3,
	EMultiUserConnectionStatus_MAX           = 4,
};

// Enum MultiUserClientLibrary.EMultiUserSourceValidationMode
// NumValues: 0x0004
enum class EMultiUserSourceValidationMode : uint8
{
	Hard                                     = 0,
	Soft                                     = 1,
	SoftAutoProceed                          = 2,
	EMultiUserSourceValidationMode_MAX       = 3,
};

// Enum MultiUserClientLibrary.EMultiUserConnectionError
// NumValues: 0x000B
enum class EMultiUserConnectionError : uint32
{
	None                                     = 0,
	Canceled                                 = 1,
	ConnectionAttemptAborted                 = 2,
	ServerNotResponding                      = 3,
	ServerError                              = 4,
	WorkspaceValidationUnknown               = 100,
	SourceControlValidationUnknown           = 110,
	SourceControlValidationCanceled          = 111,
	SourceControlValidationError             = 112,
	DirtyPackageValidationError              = 113,
	EMultiUserConnectionError_MAX            = 114,
};

// ScriptStruct MultiUserClientLibrary.MultiUserClientConfig
// 0x0038 (0x0038 - 0x0000)
struct FMultiUserClientConfig final
{
public:
	class FString                                 DefaultServerURL;                                  // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultSessionName;                                // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultSessionToRestore;                           // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMultiUserSourceValidationMode                ValidationMode;                                    // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMultiUserClientConfig) == 0x000008, "Wrong alignment on FMultiUserClientConfig");
static_assert(sizeof(FMultiUserClientConfig) == 0x000038, "Wrong size on FMultiUserClientConfig");
static_assert(offsetof(FMultiUserClientConfig, DefaultServerURL) == 0x000000, "Member 'FMultiUserClientConfig::DefaultServerURL' has a wrong offset!");
static_assert(offsetof(FMultiUserClientConfig, DefaultSessionName) == 0x000010, "Member 'FMultiUserClientConfig::DefaultSessionName' has a wrong offset!");
static_assert(offsetof(FMultiUserClientConfig, DefaultSessionToRestore) == 0x000020, "Member 'FMultiUserClientConfig::DefaultSessionToRestore' has a wrong offset!");
static_assert(offsetof(FMultiUserClientConfig, ValidationMode) == 0x000030, "Member 'FMultiUserClientConfig::ValidationMode' has a wrong offset!");

// ScriptStruct MultiUserClientLibrary.MultiUserConnectionError
// 0x0020 (0x0020 - 0x0000)
struct FMultiUserConnectionError final
{
public:
	EMultiUserConnectionError                     ErrorCode;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ErrorMessage;                                      // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiUserConnectionError) == 0x000008, "Wrong alignment on FMultiUserConnectionError");
static_assert(sizeof(FMultiUserConnectionError) == 0x000020, "Wrong size on FMultiUserConnectionError");
static_assert(offsetof(FMultiUserConnectionError, ErrorCode) == 0x000000, "Member 'FMultiUserConnectionError::ErrorCode' has a wrong offset!");
static_assert(offsetof(FMultiUserConnectionError, ErrorMessage) == 0x000008, "Member 'FMultiUserConnectionError::ErrorMessage' has a wrong offset!");

// ScriptStruct MultiUserClientLibrary.MultiUserClientInfo
// 0x0040 (0x0040 - 0x0000)
struct FMultiUserClientInfo final
{
public:
	struct FGuid                                  ClientEndpointId;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AvatarColor;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Tags;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, AdvancedDisplay, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiUserClientInfo) == 0x000008, "Wrong alignment on FMultiUserClientInfo");
static_assert(sizeof(FMultiUserClientInfo) == 0x000040, "Wrong size on FMultiUserClientInfo");
static_assert(offsetof(FMultiUserClientInfo, ClientEndpointId) == 0x000000, "Member 'FMultiUserClientInfo::ClientEndpointId' has a wrong offset!");
static_assert(offsetof(FMultiUserClientInfo, DisplayName) == 0x000010, "Member 'FMultiUserClientInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FMultiUserClientInfo, AvatarColor) == 0x000020, "Member 'FMultiUserClientInfo::AvatarColor' has a wrong offset!");
static_assert(offsetof(FMultiUserClientInfo, Tags) == 0x000030, "Member 'FMultiUserClientInfo::Tags' has a wrong offset!");

}

