#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LSD_OFLevelSequenceDirector

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "PiecesSequence_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass LSD_OFLevelSequenceDirector.LSD_OFLevelSequenceDirector_C
// 0x0020 (0x0068 - 0x0048)
class ULSD_OFLevelSequenceDirector_C : public UPiecesLevelSequenceDirector
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0048(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AActor*                                 PlayerViewTarget;                                  // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_PlaceHolderCutsceneText_C*         UIText;                                            // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInteractiveSequenceCameraModifier*     InteractiveCutsceneModifier;                       // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SwitchCinematic(class ULevelSequence* NewCinematic, class ULevelSequencePlayer** NewSequencePlayer);
	void EndInteractiveCameraSegment(float* DecidedValue);
	void StartInteractiveCameraSegment(class ACineCameraActor* CameraReference, const struct FTransform& TransformTargetStickLeft, const struct FTransform& TransformTargetStickRight, float BlendSpeed, const struct FGameplayTag& InteractionUnlockedTag, const class FString& MarkForSkippingSegment, float TimeDilation);
	void RemovePlaceHolderTextWidget();
	void CreatePlaceHolderTextWidget();
	class FText GetTemplateText();
	void TeleportToGoalLocation(class ACharacter* Character);
	void BlendCamera(class AActor* NewViewTarget, float BlendTime, float BlendExp);
	void ResetToPlayerCamera(float BlendTime, float BlendExp);
	void SetCamera(class AActor* NewViewTarget, float BlendTime, float BlendExp);
	void OnCreated();
	void ExecuteUbergraph_LSD_OFLevelSequenceDirector(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"LSD_OFLevelSequenceDirector_C">();
	}
	static class ULSD_OFLevelSequenceDirector_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULSD_OFLevelSequenceDirector_C>();
	}
};
static_assert(alignof(ULSD_OFLevelSequenceDirector_C) == 0x000008, "Wrong alignment on ULSD_OFLevelSequenceDirector_C");
static_assert(sizeof(ULSD_OFLevelSequenceDirector_C) == 0x000068, "Wrong size on ULSD_OFLevelSequenceDirector_C");
static_assert(offsetof(ULSD_OFLevelSequenceDirector_C, UberGraphFrame) == 0x000048, "Member 'ULSD_OFLevelSequenceDirector_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ULSD_OFLevelSequenceDirector_C, PlayerViewTarget) == 0x000050, "Member 'ULSD_OFLevelSequenceDirector_C::PlayerViewTarget' has a wrong offset!");
static_assert(offsetof(ULSD_OFLevelSequenceDirector_C, UIText) == 0x000058, "Member 'ULSD_OFLevelSequenceDirector_C::UIText' has a wrong offset!");
static_assert(offsetof(ULSD_OFLevelSequenceDirector_C, InteractiveCutsceneModifier) == 0x000060, "Member 'ULSD_OFLevelSequenceDirector_C::InteractiveCutsceneModifier' has a wrong offset!");

}

