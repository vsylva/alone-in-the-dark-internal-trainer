#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_PC_ContextualTraverse_Ladder

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ContextualTraverseMovementDirection_structs.hpp"


namespace SDK::Params
{

// Function ABP_PC_ContextualTraverse_Ladder.ABP_PC_ContextualTraverse_Ladder_C.ContextualMovement
// 0x0020 (0x0020 - 0x0000)
struct ABP_PC_ContextualTraverse_Ladder_C_ContextualMovement final
{
public:
	struct FPoseLink                              ContextualMovementInputPose;                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              ContextualMovement_0;                              // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PC_ContextualTraverse_Ladder_C_ContextualMovement) == 0x000008, "Wrong alignment on ABP_PC_ContextualTraverse_Ladder_C_ContextualMovement");
static_assert(sizeof(ABP_PC_ContextualTraverse_Ladder_C_ContextualMovement) == 0x000020, "Wrong size on ABP_PC_ContextualTraverse_Ladder_C_ContextualMovement");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ContextualMovement, ContextualMovementInputPose) == 0x000000, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ContextualMovement::ContextualMovementInputPose' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ContextualMovement, ContextualMovement_0) == 0x000010, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ContextualMovement::ContextualMovement_0' has a wrong offset!");

// Function ABP_PC_ContextualTraverse_Ladder.ABP_PC_ContextualTraverse_Ladder_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_PC_ContextualTraverse_Ladder_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PC_ContextualTraverse_Ladder_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_PC_ContextualTraverse_Ladder_C_AnimGraph");
static_assert(sizeof(ABP_PC_ContextualTraverse_Ladder_C_AnimGraph) == 0x000010, "Wrong size on ABP_PC_ContextualTraverse_Ladder_C_AnimGraph");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_PC_ContextualTraverse_Ladder_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_PC_ContextualTraverse_Ladder.ABP_PC_ContextualTraverse_Ladder_C.SetClimbDirection
// 0x0001 (0x0001 - 0x0000)
struct ABP_PC_ContextualTraverse_Ladder_C_SetClimbDirection final
{
public:
	EContextualTraverseMovementDirection          Direction;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PC_ContextualTraverse_Ladder_C_SetClimbDirection) == 0x000001, "Wrong alignment on ABP_PC_ContextualTraverse_Ladder_C_SetClimbDirection");
static_assert(sizeof(ABP_PC_ContextualTraverse_Ladder_C_SetClimbDirection) == 0x000001, "Wrong size on ABP_PC_ContextualTraverse_Ladder_C_SetClimbDirection");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_SetClimbDirection, Direction) == 0x000000, "Member 'ABP_PC_ContextualTraverse_Ladder_C_SetClimbDirection::Direction' has a wrong offset!");

// Function ABP_PC_ContextualTraverse_Ladder.ABP_PC_ContextualTraverse_Ladder_C.IsMovingOnLadder
// 0x0002 (0x0002 - 0x0000)
struct ABP_PC_ContextualTraverse_Ladder_C_IsMovingOnLadder final
{
public:
	bool                                          IsMoving;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PC_ContextualTraverse_Ladder_C_IsMovingOnLadder) == 0x000001, "Wrong alignment on ABP_PC_ContextualTraverse_Ladder_C_IsMovingOnLadder");
static_assert(sizeof(ABP_PC_ContextualTraverse_Ladder_C_IsMovingOnLadder) == 0x000002, "Wrong size on ABP_PC_ContextualTraverse_Ladder_C_IsMovingOnLadder");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_IsMovingOnLadder, IsMoving) == 0x000000, "Member 'ABP_PC_ContextualTraverse_Ladder_C_IsMovingOnLadder::IsMoving' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_IsMovingOnLadder, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'ABP_PC_ContextualTraverse_Ladder_C_IsMovingOnLadder::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function ABP_PC_ContextualTraverse_Ladder.ABP_PC_ContextualTraverse_Ladder_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_PC_ContextualTraverse_Ladder_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PC_ContextualTraverse_Ladder_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_PC_ContextualTraverse_Ladder_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_PC_ContextualTraverse_Ladder_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_PC_ContextualTraverse_Ladder_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_PC_ContextualTraverse_Ladder_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_PC_ContextualTraverse_Ladder.ABP_PC_ContextualTraverse_Ladder_C.ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder
// 0x0034 (0x0034 - 0x0000)
struct ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue_1; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInstanceStateWeight_ReturnValue;       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceStateWeight_ReturnValue_1;     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue_1; // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_1;        // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMovingOnLadder_IsMoving;                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder) == 0x000004, "Wrong alignment on ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder");
static_assert(sizeof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder) == 0x000034, "Wrong size on ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder, EntryPoint) == 0x000000, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder, CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue) == 0x000004, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder::CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder, CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue) == 0x000008, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder::CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder, CallFunc_Less_FloatFloat_ReturnValue) == 0x00000C, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00000D, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder, CallFunc_BooleanAND_ReturnValue) == 0x00000E, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000F, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder, CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue_1) == 0x000010, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder::CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder, CallFunc_GetInstanceStateWeight_ReturnValue) == 0x000014, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder::CallFunc_GetInstanceStateWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000019, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder, CallFunc_BooleanAND_ReturnValue_1) == 0x00001A, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder, CallFunc_GetInstanceStateWeight_ReturnValue_1) == 0x00001C, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder::CallFunc_GetInstanceStateWeight_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder, CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue_1) == 0x000020, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder::CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000024, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000025, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder, CallFunc_BooleanAND_ReturnValue_2) == 0x000026, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000027, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder, CallFunc_BooleanAND_ReturnValue_3) == 0x000028, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000029, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder, CallFunc_NotEqual_FloatFloat_ReturnValue_1) == 0x00002A, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder::CallFunc_NotEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder, K2Node_Event_DeltaTimeX) == 0x00002C, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder, CallFunc_IsMovingOnLadder_IsMoving) == 0x000030, "Member 'ABP_PC_ContextualTraverse_Ladder_C_ExecuteUbergraph_ABP_PC_ContextualTraverse_Ladder::CallFunc_IsMovingOnLadder_IsMoving' has a wrong offset!");

// Function ABP_PC_ContextualTraverse_Ladder.ABP_PC_ContextualTraverse_Ladder_C.GetClimbDir__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct ABP_PC_ContextualTraverse_Ladder_C_GetClimbDir__DelegateSignature final
{
public:
	EContextualTraverseMovementDirection          ClimbDirection_0;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PC_ContextualTraverse_Ladder_C_GetClimbDir__DelegateSignature) == 0x000001, "Wrong alignment on ABP_PC_ContextualTraverse_Ladder_C_GetClimbDir__DelegateSignature");
static_assert(sizeof(ABP_PC_ContextualTraverse_Ladder_C_GetClimbDir__DelegateSignature) == 0x000001, "Wrong size on ABP_PC_ContextualTraverse_Ladder_C_GetClimbDir__DelegateSignature");
static_assert(offsetof(ABP_PC_ContextualTraverse_Ladder_C_GetClimbDir__DelegateSignature, ClimbDirection_0) == 0x000000, "Member 'ABP_PC_ContextualTraverse_Ladder_C_GetClimbDir__DelegateSignature::ClimbDirection_0' has a wrong offset!");

}

