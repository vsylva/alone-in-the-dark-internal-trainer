#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MasterPuzzle

#include "Basic.hpp"

#include "BP_MasterPuzzle_classes.hpp"
#include "BP_MasterPuzzle_parameters.hpp"


namespace SDK
{

// Function BP_MasterPuzzle.BP_MasterPuzzle_C.OnItemPickerOpened__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::OnItemPickerOpened__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "OnItemPickerOpened__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.ExecuteUbergraph_BP_MasterPuzzle
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::ExecuteUbergraph_BP_MasterPuzzle(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "ExecuteUbergraph_BP_MasterPuzzle");

	Params::BP_MasterPuzzle_C_ExecuteUbergraph_BP_MasterPuzzle Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.FadeInUI
// (BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::FadeInUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "FadeInUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.FadeOutUI
// (BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::FadeOutUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "FadeOutUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.Rotate Tile
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::Rotate_Tile(float ActionValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "Rotate Tile");

	Params::BP_MasterPuzzle_C_Rotate_Tile Parms{};

	Parms.ActionValue = ActionValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.TranslateCameraToPuzzleView
// (BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::TranslateCameraToPuzzleView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "TranslateCameraToPuzzleView");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.ResetRotation
// (BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::ResetRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "ResetRotation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.BndEvt__BP_MasterPuzzle_InteractionComponentFlow_K2Node_ComponentBoundEvent_3_InteractionSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class ACharacter*                       InteractionCharacter                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::BndEvt__BP_MasterPuzzle_InteractionComponentFlow_K2Node_ComponentBoundEvent_3_InteractionSignature__DelegateSignature(class ACharacter* InteractionCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "BndEvt__BP_MasterPuzzle_InteractionComponentFlow_K2Node_ComponentBoundEvent_3_InteractionSignature__DelegateSignature");

	Params::BP_MasterPuzzle_C_BndEvt__BP_MasterPuzzle_InteractionComponentFlow_K2Node_ComponentBoundEvent_3_InteractionSignature__DelegateSignature Parms{};

	Parms.InteractionCharacter = InteractionCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.SolvingPuzzle
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AOFPlayerController*              InteractingPlayerController                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::SolvingPuzzle(class AOFPlayerController* InteractingPlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "SolvingPuzzle");

	Params::BP_MasterPuzzle_C_SolvingPuzzle Parms{};

	Parms.InteractingPlayerController = InteractingPlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.OnExitPuzzle
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class APuzzleActor*                     PuzzleActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AOFPlayerController*              InteractingController                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::OnExitPuzzle(class APuzzleActor* PuzzleActor, class AOFPlayerController* InteractingController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "OnExitPuzzle");

	Params::BP_MasterPuzzle_C_OnExitPuzzle Parms{};

	Parms.PuzzleActor = PuzzleActor;
	Parms.InteractingController = InteractingController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.TalismanMode
// (BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::TalismanMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "TalismanMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.Move Camera to Original Position
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   OverTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::Move_Camera_to_Original_Position(float OverTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "Move Camera to Original Position");

	Params::BP_MasterPuzzle_C_Move_Camera_to_Original_Position Parms{};

	Parms.OverTime = OverTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.MoveCameraToClock
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CameraPanTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::MoveCameraToClock(float CameraPanTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "MoveCameraToClock");

	Params::BP_MasterPuzzle_C_MoveCameraToClock Parms{};

	Parms.CameraPanTime = CameraPanTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.OnValidCombinationEntered
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class ABP_Talisman_IP_C*                TalismanActor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::OnValidCombinationEntered(const struct FGameplayTag& GameplayTag, class ABP_Talisman_IP_C* TalismanActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "OnValidCombinationEntered");

	Params::BP_MasterPuzzle_C_OnValidCombinationEntered Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.TalismanActor = TalismanActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.Bring Up Talisman
// (BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::Bring_Up_Talisman()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "Bring Up Talisman");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.MoveCameraToTalisman
// (BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::MoveCameraToTalisman()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "MoveCameraToTalisman");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.Open Item Drawer
// (BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::Open_Item_Drawer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "Open Item Drawer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.Clock Event
// (BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::Clock_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "Clock Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "ReceiveTick");

	Params::BP_MasterPuzzle_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.AnimateAddedTiles
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  Added_Tile                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::AnimateAddedTiles(class USceneComponent* Added_Tile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "AnimateAddedTiles");

	Params::BP_MasterPuzzle_C_AnimateAddedTiles Parms{};

	Parms.Added_Tile = Added_Tile;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.PickUpTile
// (BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::PickUpTile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "PickUpTile");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.PutBackTile
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_ExitingPuzzle_0                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_MasterPuzzle_C::PutBackTile(bool Param_ExitingPuzzle_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "PutBackTile");

	Params::BP_MasterPuzzle_C_PutBackTile Parms{};

	Parms.Param_ExitingPuzzle_0 = Param_ExitingPuzzle_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.BndEvt__BP_KeyholeBox_PuzzleSelectionComponent_K2Node_ComponentBoundEvent_1_OnNavigated__DelegateSignature
// (BlueprintEvent)
// Parameters:
// bool                                    IsHoldingItem                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   CurrentSelectedIndex                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PreviousSelectedIndex                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NavigationSuccessful                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_MasterPuzzle_C::BndEvt__BP_KeyholeBox_PuzzleSelectionComponent_K2Node_ComponentBoundEvent_1_OnNavigated__DelegateSignature(bool IsHoldingItem, int32 CurrentSelectedIndex, int32 PreviousSelectedIndex, bool NavigationSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "BndEvt__BP_KeyholeBox_PuzzleSelectionComponent_K2Node_ComponentBoundEvent_1_OnNavigated__DelegateSignature");

	Params::BP_MasterPuzzle_C_BndEvt__BP_KeyholeBox_PuzzleSelectionComponent_K2Node_ComponentBoundEvent_1_OnNavigated__DelegateSignature Parms{};

	Parms.IsHoldingItem = IsHoldingItem;
	Parms.CurrentSelectedIndex = CurrentSelectedIndex;
	Parms.PreviousSelectedIndex = PreviousSelectedIndex;
	Parms.NavigationSuccessful = NavigationSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.BndEvt__BP_KeyholeBox_PuzzleSelectionComponent_K2Node_ComponentBoundEvent_0_OnSwapItem__DelegateSignature
// (BlueprintEvent)
// Parameters:
// int32                                   PreviousItemIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SelectedItemIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::BndEvt__BP_KeyholeBox_PuzzleSelectionComponent_K2Node_ComponentBoundEvent_0_OnSwapItem__DelegateSignature(int32 PreviousItemIndex, int32 SelectedItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "BndEvt__BP_KeyholeBox_PuzzleSelectionComponent_K2Node_ComponentBoundEvent_0_OnSwapItem__DelegateSignature");

	Params::BP_MasterPuzzle_C_BndEvt__BP_KeyholeBox_PuzzleSelectionComponent_K2Node_ComponentBoundEvent_0_OnSwapItem__DelegateSignature Parms{};

	Parms.PreviousItemIndex = PreviousItemIndex;
	Parms.SelectedItemIndex = SelectedItemIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.OnWindowClose
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::OnWindowClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "OnWindowClose");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.InpActEvt_IA_Interact_K2Node_EnhancedInputActionEvent_0
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::InpActEvt_IA_Interact_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "InpActEvt_IA_Interact_K2Node_EnhancedInputActionEvent_0");

	Params::BP_MasterPuzzle_C_InpActEvt_IA_Interact_K2Node_EnhancedInputActionEvent_0 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.InpActEvt_T_K2Node_InputDebugKeyEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::InpActEvt_T_K2Node_InputDebugKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "InpActEvt_T_K2Node_InputDebugKeyEvent_0");

	Params::BP_MasterPuzzle_C_InpActEvt_T_K2Node_InputDebugKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.InpActEvt_IA_PuzzleSelection_Rotate_K2Node_EnhancedInputActionEvent_1
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::InpActEvt_IA_PuzzleSelection_Rotate_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "InpActEvt_IA_PuzzleSelection_Rotate_K2Node_EnhancedInputActionEvent_1");

	Params::BP_MasterPuzzle_C_InpActEvt_IA_PuzzleSelection_Rotate_K2Node_EnhancedInputActionEvent_1 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.InpActEvt_IA_PuzzleSelection_Cancel_K2Node_EnhancedInputActionEvent_2
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::InpActEvt_IA_PuzzleSelection_Cancel_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "InpActEvt_IA_PuzzleSelection_Cancel_K2Node_EnhancedInputActionEvent_2");

	Params::BP_MasterPuzzle_C_InpActEvt_IA_PuzzleSelection_Cancel_K2Node_EnhancedInputActionEvent_2 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.InpActEvt_IA_PuzzleSelection_Up_K2Node_EnhancedInputActionEvent_3
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::InpActEvt_IA_PuzzleSelection_Up_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "InpActEvt_IA_PuzzleSelection_Up_K2Node_EnhancedInputActionEvent_3");

	Params::BP_MasterPuzzle_C_InpActEvt_IA_PuzzleSelection_Up_K2Node_EnhancedInputActionEvent_3 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.InpActEvt_IA_PuzzleSelection_Right_K2Node_EnhancedInputActionEvent_4
// (BlueprintEvent)
// Parameters:
// struct FInputActionValue                ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::InpActEvt_IA_PuzzleSelection_Right_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "InpActEvt_IA_PuzzleSelection_Right_K2Node_EnhancedInputActionEvent_4");

	Params::BP_MasterPuzzle_C_InpActEvt_IA_PuzzleSelection_Right_K2Node_EnhancedInputActionEvent_4 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.FadeUITime__UpdateFunc
// (BlueprintEvent)

void ABP_MasterPuzzle_C::FadeUITime__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "FadeUITime__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.FadeUITime__FinishedFunc
// (BlueprintEvent)

void ABP_MasterPuzzle_C::FadeUITime__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "FadeUITime__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.MoveCameraTime__UpdateFunc
// (BlueprintEvent)

void ABP_MasterPuzzle_C::MoveCameraTime__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "MoveCameraTime__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.MoveCameraTime__FinishedFunc
// (BlueprintEvent)

void ABP_MasterPuzzle_C::MoveCameraTime__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "MoveCameraTime__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.SwapPieceTime__UpdateFunc
// (BlueprintEvent)

void ABP_MasterPuzzle_C::SwapPieceTime__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "SwapPieceTime__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.SwapPieceTime__FinishedFunc
// (BlueprintEvent)

void ABP_MasterPuzzle_C::SwapPieceTime__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "SwapPieceTime__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.RotateItemTime__UpdateFunc
// (BlueprintEvent)

void ABP_MasterPuzzle_C::RotateItemTime__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "RotateItemTime__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.RotateItemTime__FinishedFunc
// (BlueprintEvent)

void ABP_MasterPuzzle_C::RotateItemTime__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "RotateItemTime__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.Clock Solve Timeline__UpdateFunc
// (BlueprintEvent)

void ABP_MasterPuzzle_C::Clock_Solve_Timeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "Clock Solve Timeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.Clock Solve Timeline__FinishedFunc
// (BlueprintEvent)

void ABP_MasterPuzzle_C::Clock_Solve_Timeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "Clock Solve Timeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.ReceiveBeginPlay
// (Event, Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.IsItem In Desired Position
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Desired_Index                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_MasterPuzzle_C::IsItem_In_Desired_Position(class UObject* Item, int32 Desired_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "IsItem In Desired Position");

	Params::BP_MasterPuzzle_C_IsItem_In_Desired_Position Parms{};

	Parms.Item = Item;
	Parms.Desired_Index = Desired_Index;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.All Items In Desired Positions
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_MasterPuzzle_C::All_Items_In_Desired_Positions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "All Items In Desired Positions");

	Params::BP_MasterPuzzle_C_All_Items_In_Desired_Positions Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.Set Solved Tile Positions
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::Set_Solved_Tile_Positions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "Set Solved Tile Positions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.Interact With Tile
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::Interact_With_Tile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "Interact With Tile");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.Rebuild Puzzle
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::Rebuild_Puzzle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "Rebuild Puzzle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.SetItemMesh
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::SetItemMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "SetItemMesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.SetAdditionalTilesAsHidden
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::SetAdditionalTilesAsHidden()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "SetAdditionalTilesAsHidden");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.Add Missing Tile
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UItemData*                        ItemData                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::Add_Missing_Tile(class UItemData* ItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "Add Missing Tile");

	Params::BP_MasterPuzzle_C_Add_Missing_Tile Parms{};

	Parms.ItemData = ItemData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.Open Item Picker
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::Open_Item_Picker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "Open Item Picker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.Attach Tiles to Puzzle Socket
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::Attach_Tiles_to_Puzzle_Socket()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "Attach Tiles to Puzzle Socket");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.UpdateClockTime
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::UpdateClockTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "UpdateClockTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.SetClockTalismanNumbers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::SetClockTalismanNumbers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "SetClockTalismanNumbers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.CancelExitsPuzzle
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_MasterPuzzle_C::CancelExitsPuzzle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "CancelExitsPuzzle");

	Params::BP_MasterPuzzle_C_CancelExitsPuzzle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.SetTalismanCombinationValue
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::SetTalismanCombinationValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "SetTalismanCombinationValue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.Cache Original Camera Transform
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::Cache_Original_Camera_Transform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "Cache Original Camera Transform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.AlignTiles
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::AlignTiles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "AlignTiles");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.SetOtherworldState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EOtherworldPathwayStage                 Enum                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::SetOtherworldState(EOtherworldPathwayStage Enum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "SetOtherworldState");

	Params::BP_MasterPuzzle_C_SetOtherworldState Parms{};

	Parms.Enum = Enum;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.EnteringPuzzle
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACharacter*                       InteractingCharacter                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::EnteringPuzzle(class ACharacter* InteractingCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "EnteringPuzzle");

	Params::BP_MasterPuzzle_C_EnteringPuzzle Parms{};

	Parms.InteractingCharacter = InteractingCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.ExitingPuzzle
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AOFPlayerController*              InteractingPlayerController                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::ExitingPuzzle(class AOFPlayerController* InteractingPlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "ExitingPuzzle");

	Params::BP_MasterPuzzle_C_ExitingPuzzle Parms{};

	Parms.InteractingPlayerController = InteractingPlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.GetRequiredItems
// (Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSet<class UItemData*>                  ReturnValue                                            (Parm, OutParm, ReturnParm)

TSet<class UItemData*> ABP_MasterPuzzle_C::GetRequiredItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "GetRequiredItems");

	Params::BP_MasterPuzzle_C_GetRequiredItems Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.MakeNewRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator ABP_MasterPuzzle_C::MakeNewRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "MakeNewRotation");

	Params::BP_MasterPuzzle_C_MakeNewRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.LerpToNewRotation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::LerpToNewRotation(float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "LerpToNewRotation");

	Params::BP_MasterPuzzle_C_LerpToNewRotation Parms{};

	Parms.Alpha = Alpha;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.GetRotationOfHeldItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator ABP_MasterPuzzle_C::GetRotationOfHeldItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "GetRotationOfHeldItem");

	Params::BP_MasterPuzzle_C_GetRotationOfHeldItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.GetPermanentPuzzleItems
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class UStaticMeshComponent*>     PermanentPuzzleItems                                   (Parm, OutParm, ContainsInstancedReference)

void ABP_MasterPuzzle_C::GetPermanentPuzzleItems(TArray<class UStaticMeshComponent*>* PermanentPuzzleItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "GetPermanentPuzzleItems");

	Params::BP_MasterPuzzle_C_GetPermanentPuzzleItems Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PermanentPuzzleItems != nullptr)
		*PermanentPuzzleItems = std::move(Parms.PermanentPuzzleItems);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.SetPuzzleItemsPermanentlyInPlace
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::SetPuzzleItemsPermanentlyInPlace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "SetPuzzleItemsPermanentlyInPlace");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.LerpSwappedItem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurveMultiplier                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::LerpSwappedItem(int32 Index_0, float Alpha, const struct FVector& Offset, float CurveMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "LerpSwappedItem");

	Params::BP_MasterPuzzle_C_LerpSwappedItem Parms{};

	Parms.Index_0 = Index_0;
	Parms.Alpha = Alpha;
	Parms.Offset = std::move(Offset);
	Parms.CurveMultiplier = CurveMultiplier;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.SetCameraToPuzzleView
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MasterPuzzle_C::SetCameraToPuzzleView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "SetCameraToPuzzleView");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.FlowNotify_Cheat
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFlowComponent*                   FlowComponent_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     NotifyTag                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::FlowNotify_Cheat(class UFlowComponent* FlowComponent_0, const struct FGameplayTag& NotifyTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "FlowNotify_Cheat");

	Params::BP_MasterPuzzle_C_FlowNotify_Cheat Parms{};

	Parms.FlowComponent_0 = FlowComponent_0;
	Parms.NotifyTag = std::move(NotifyTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.DetermineStartRotations
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator ABP_MasterPuzzle_C::DetermineStartRotations(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "DetermineStartRotations");

	Params::BP_MasterPuzzle_C_DetermineStartRotations Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.CheckIfRightItem
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UItemData*                        ItemData                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_MasterPuzzle_C::CheckIfRightItem(class UItemData* ItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "CheckIfRightItem");

	Params::BP_MasterPuzzle_C_CheckIfRightItem Parms{};

	Parms.ItemData = ItemData;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.GetTargetName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText ABP_MasterPuzzle_C::GetTargetName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "GetTargetName");

	Params::BP_MasterPuzzle_C_GetTargetName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.GetPuzzleItems
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<class UStaticMeshComponent*>     Array                                                  (Parm, OutParm, ContainsInstancedReference)

void ABP_MasterPuzzle_C::GetPuzzleItems(TArray<class UStaticMeshComponent*>* Array) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "GetPuzzleItems");

	Params::BP_MasterPuzzle_C_GetPuzzleItems Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.AllPiecesAdded
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bAllPiecesAdded                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_MasterPuzzle_C::AllPiecesAdded(bool* bAllPiecesAdded) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "AllPiecesAdded");

	Params::BP_MasterPuzzle_C_AllPiecesAdded Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bAllPiecesAdded != nullptr)
		*bAllPiecesAdded = Parms.bAllPiecesAdded;
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.GetDesiredPuzzleItems
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<class UStaticMeshComponent*>     Array                                                  (Parm, OutParm, ContainsInstancedReference)

void ABP_MasterPuzzle_C::GetDesiredPuzzleItems(TArray<class UStaticMeshComponent*>* Array) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "GetDesiredPuzzleItems");

	Params::BP_MasterPuzzle_C_GetDesiredPuzzleItems Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.GetDialRotationFromValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   InValue                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxHandValue                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   StartOffset                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bClockwiseRotation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MasterPuzzle_C::GetDialRotationFromValue(int32 InValue, int32 MaxHandValue, int32 StartOffset, bool bClockwiseRotation, float* Rotation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "GetDialRotationFromValue");

	Params::BP_MasterPuzzle_C_GetDialRotationFromValue Parms{};

	Parms.InValue = InValue;
	Parms.MaxHandValue = MaxHandValue;
	Parms.StartOffset = StartOffset;
	Parms.bClockwiseRotation = bClockwiseRotation;

	UObject::ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = Parms.Rotation;
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.GetClockHandsCombinationRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FRotator                         Large_Hand_Rotation                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         Medium_Hand_Rotation                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         Small_Hand_Rotation                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_MasterPuzzle_C::GetClockHandsCombinationRotation(struct FRotator* Large_Hand_Rotation, struct FRotator* Medium_Hand_Rotation, struct FRotator* Small_Hand_Rotation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "GetClockHandsCombinationRotation");

	Params::BP_MasterPuzzle_C_GetClockHandsCombinationRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Large_Hand_Rotation != nullptr)
		*Large_Hand_Rotation = std::move(Parms.Large_Hand_Rotation);

	if (Medium_Hand_Rotation != nullptr)
		*Medium_Hand_Rotation = std::move(Parms.Medium_Hand_Rotation);

	if (Small_Hand_Rotation != nullptr)
		*Small_Hand_Rotation = std::move(Parms.Small_Hand_Rotation);
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.GetTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FDateTime                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

struct FDateTime ABP_MasterPuzzle_C::GetTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "GetTime");

	Params::BP_MasterPuzzle_C_GetTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.CanRotateSelectedPiece
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_MasterPuzzle_C::CanRotateSelectedPiece() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "CanRotateSelectedPiece");

	Params::BP_MasterPuzzle_C_CanRotateSelectedPiece Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_MasterPuzzle.BP_MasterPuzzle_C.GetItemCategoryGameplayTag
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

struct FGameplayTag ABP_MasterPuzzle_C::GetItemCategoryGameplayTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MasterPuzzle_C", "GetItemCategoryGameplayTag");

	Params::BP_MasterPuzzle_C_GetItemCategoryGameplayTag Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

