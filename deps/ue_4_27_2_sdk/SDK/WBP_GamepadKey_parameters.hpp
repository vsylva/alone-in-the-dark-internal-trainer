#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_GamepadKey

#include "Basic.hpp"

#include "PiecesPlatform_structs.hpp"
#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "ObsidianFoxSettings_structs.hpp"


namespace SDK::Params
{

// Function WBP_GamepadKey.WBP_GamepadKey_C.ExecuteUbergraph_WBP_GamepadKey
// 0x01C8 (0x01C8 - 0x0000)
struct WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded_1;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UKeyBindingTextureDataAsset*            K2Node_DynamicCast_AsKey_Binding_Texture_Data_Asset; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable_1;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_DynamicCast_AsTexture_2D;                   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0048(0x0010)(ReferenceParm)
	class UPiecesInputSubsystem*                  CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0060(0x0018)()
	TDelegate<void(class FName KeyBindName, const struct FKey& NewKey, bool bIsPrimaryKey, bool bUnbindExisting)> K2Node_CreateDelegate_OutputDelegate;              // 0x0078(0x0010)(ZeroConstructor, NoDestructor)
	class UOFGameUserSettings*                    CallFunc_GetOFGameUserSettings_ReturnValue;        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_KeyBindName;                    // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_CustomEvent_NewKey;                         // 0x0098(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bIsPrimaryKey;                  // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bUnbindExisting;                // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B2[0x2];                                       // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_1;            // 0x00B4(0x0010)(ZeroConstructor, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00C4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EProjectType                                  CallFunc_GetProjectType_ReturnValue;               // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CF[0x1];                                       // 0x00CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              K2Node_CustomEvent_Texture;                        // 0x00D0(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPiecesInputSubsystem*                  CallFunc_GetGameInstanceSubsystem_ReturnValue_1;   // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetActionDisplayName_ReturnValue;         // 0x0108(0x0018)()
	TMap<struct FKey, TSoftObjectPtr<class UTexture2D>> CallFunc_GetKeyToTextures_Key_Textures;            // 0x0120(0x0050)()
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_2;            // 0x0170(0x0010)(ZeroConstructor, NoDestructor)
	struct FKey                                   CallFunc_GetCurrentGamepadKeyForAction_ReturnValue; // 0x0180(0x0018)(HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              CallFunc_Map_Find_Value;                           // 0x0198(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey) == 0x000008, "Wrong alignment on WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey");
static_assert(sizeof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey) == 0x0001C8, "Wrong size on WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, EntryPoint) == 0x000000, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, K2Node_CustomEvent_Loaded_1) == 0x000008, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::K2Node_CustomEvent_Loaded_1' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, Temp_object_Variable) == 0x000010, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, K2Node_DynamicCast_AsKey_Binding_Texture_Data_Asset) == 0x000018, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::K2Node_DynamicCast_AsKey_Binding_Texture_Data_Asset' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, K2Node_CustomEvent_Loaded) == 0x000028, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, Temp_object_Variable_1) == 0x000030, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, K2Node_DynamicCast_AsTexture_2D) == 0x000038, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::K2Node_DynamicCast_AsTexture_2D' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, K2Node_MakeArray_Array) == 0x000048, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000058, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, CallFunc_Format_ReturnValue) == 0x000060, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, K2Node_CreateDelegate_OutputDelegate) == 0x000078, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, CallFunc_GetOFGameUserSettings_ReturnValue) == 0x000088, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::CallFunc_GetOFGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, K2Node_CustomEvent_KeyBindName) == 0x000090, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::K2Node_CustomEvent_KeyBindName' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, K2Node_CustomEvent_NewKey) == 0x000098, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::K2Node_CustomEvent_NewKey' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, K2Node_CustomEvent_bIsPrimaryKey) == 0x0000B0, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::K2Node_CustomEvent_bIsPrimaryKey' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, K2Node_CustomEvent_bUnbindExisting) == 0x0000B1, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::K2Node_CustomEvent_bUnbindExisting' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000B4, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, CallFunc_MakeVector2D_ReturnValue) == 0x0000C4, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, CallFunc_Not_PreBool_ReturnValue) == 0x0000CC, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, CallFunc_GetProjectType_ReturnValue) == 0x0000CD, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::CallFunc_GetProjectType_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000CE, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, K2Node_CustomEvent_Texture) == 0x0000D0, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::K2Node_CustomEvent_Texture' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, CallFunc_BooleanAND_ReturnValue) == 0x0000F8, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, CallFunc_GetGameInstanceSubsystem_ReturnValue_1) == 0x000100, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::CallFunc_GetGameInstanceSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, CallFunc_GetActionDisplayName_ReturnValue) == 0x000108, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::CallFunc_GetActionDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, CallFunc_GetKeyToTextures_Key_Textures) == 0x000120, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::CallFunc_GetKeyToTextures_Key_Textures' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, K2Node_CreateDelegate_OutputDelegate_2) == 0x000170, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, CallFunc_GetCurrentGamepadKeyForAction_ReturnValue) == 0x000180, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::CallFunc_GetCurrentGamepadKeyForAction_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, CallFunc_Map_Find_Value) == 0x000198, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, CallFunc_Map_Find_ReturnValue) == 0x0001C0, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey, K2Node_Event_IsDesignTime) == 0x0001C1, "Member 'WBP_GamepadKey_C_ExecuteUbergraph_WBP_GamepadKey::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_GamepadKey.WBP_GamepadKey_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_GamepadKey_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_GamepadKey_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_GamepadKey_C_PreConstruct");
static_assert(sizeof(WBP_GamepadKey_C_PreConstruct) == 0x000001, "Wrong size on WBP_GamepadKey_C_PreConstruct");
static_assert(offsetof(WBP_GamepadKey_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_GamepadKey_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_GamepadKey.WBP_GamepadKey_C.Load And Set Texture
// 0x0028 (0x0028 - 0x0000)
struct WBP_GamepadKey_C_Load_And_Set_Texture final
{
public:
	TSoftObjectPtr<class UTexture2D>              Texture;                                           // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GamepadKey_C_Load_And_Set_Texture) == 0x000008, "Wrong alignment on WBP_GamepadKey_C_Load_And_Set_Texture");
static_assert(sizeof(WBP_GamepadKey_C_Load_And_Set_Texture) == 0x000028, "Wrong size on WBP_GamepadKey_C_Load_And_Set_Texture");
static_assert(offsetof(WBP_GamepadKey_C_Load_And_Set_Texture, Texture) == 0x000000, "Member 'WBP_GamepadKey_C_Load_And_Set_Texture::Texture' has a wrong offset!");

// Function WBP_GamepadKey.WBP_GamepadKey_C.OnUpdateKeyBind
// 0x0028 (0x0028 - 0x0000)
struct WBP_GamepadKey_C_OnUpdateKeyBind final
{
public:
	class FName                                   KeyBindName;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   NewKey;                                            // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          bIsPrimaryKey;                                     // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bUnbindExisting;                                   // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_GamepadKey_C_OnUpdateKeyBind) == 0x000008, "Wrong alignment on WBP_GamepadKey_C_OnUpdateKeyBind");
static_assert(sizeof(WBP_GamepadKey_C_OnUpdateKeyBind) == 0x000028, "Wrong size on WBP_GamepadKey_C_OnUpdateKeyBind");
static_assert(offsetof(WBP_GamepadKey_C_OnUpdateKeyBind, KeyBindName) == 0x000000, "Member 'WBP_GamepadKey_C_OnUpdateKeyBind::KeyBindName' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_OnUpdateKeyBind, NewKey) == 0x000008, "Member 'WBP_GamepadKey_C_OnUpdateKeyBind::NewKey' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_OnUpdateKeyBind, bIsPrimaryKey) == 0x000020, "Member 'WBP_GamepadKey_C_OnUpdateKeyBind::bIsPrimaryKey' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_OnUpdateKeyBind, bUnbindExisting) == 0x000021, "Member 'WBP_GamepadKey_C_OnUpdateKeyBind::bUnbindExisting' has a wrong offset!");

// Function WBP_GamepadKey.WBP_GamepadKey_C.OnLoaded_C664A9BD48DA2A2E9B4AEC9AB0394272
// 0x0008 (0x0008 - 0x0000)
struct WBP_GamepadKey_C_OnLoaded_C664A9BD48DA2A2E9B4AEC9AB0394272 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GamepadKey_C_OnLoaded_C664A9BD48DA2A2E9B4AEC9AB0394272) == 0x000008, "Wrong alignment on WBP_GamepadKey_C_OnLoaded_C664A9BD48DA2A2E9B4AEC9AB0394272");
static_assert(sizeof(WBP_GamepadKey_C_OnLoaded_C664A9BD48DA2A2E9B4AEC9AB0394272) == 0x000008, "Wrong size on WBP_GamepadKey_C_OnLoaded_C664A9BD48DA2A2E9B4AEC9AB0394272");
static_assert(offsetof(WBP_GamepadKey_C_OnLoaded_C664A9BD48DA2A2E9B4AEC9AB0394272, Loaded) == 0x000000, "Member 'WBP_GamepadKey_C_OnLoaded_C664A9BD48DA2A2E9B4AEC9AB0394272::Loaded' has a wrong offset!");

// Function WBP_GamepadKey.WBP_GamepadKey_C.OnLoaded_44550C264E73A7D3C77EA6BFCD7BB533
// 0x0008 (0x0008 - 0x0000)
struct WBP_GamepadKey_C_OnLoaded_44550C264E73A7D3C77EA6BFCD7BB533 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GamepadKey_C_OnLoaded_44550C264E73A7D3C77EA6BFCD7BB533) == 0x000008, "Wrong alignment on WBP_GamepadKey_C_OnLoaded_44550C264E73A7D3C77EA6BFCD7BB533");
static_assert(sizeof(WBP_GamepadKey_C_OnLoaded_44550C264E73A7D3C77EA6BFCD7BB533) == 0x000008, "Wrong size on WBP_GamepadKey_C_OnLoaded_44550C264E73A7D3C77EA6BFCD7BB533");
static_assert(offsetof(WBP_GamepadKey_C_OnLoaded_44550C264E73A7D3C77EA6BFCD7BB533, Loaded) == 0x000000, "Member 'WBP_GamepadKey_C_OnLoaded_44550C264E73A7D3C77EA6BFCD7BB533::Loaded' has a wrong offset!");

// Function WBP_GamepadKey.WBP_GamepadKey_C.SortEntries
// 0x0070 (0x0070 - 0x0000)
struct WBP_GamepadKey_C_SortEntries final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveChild_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveChild_ReturnValue_1;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Select_Default_1;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue;      // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue_1;                   // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue_2;                   // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RemoveChild_ReturnValue_2;                // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default_2;                           // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GamepadKey_C_SortEntries) == 0x000008, "Wrong alignment on WBP_GamepadKey_C_SortEntries");
static_assert(sizeof(WBP_GamepadKey_C_SortEntries) == 0x000070, "Wrong size on WBP_GamepadKey_C_SortEntries");
static_assert(offsetof(WBP_GamepadKey_C_SortEntries, Temp_bool_Variable) == 0x000000, "Member 'WBP_GamepadKey_C_SortEntries::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_SortEntries, Temp_bool_Variable_1) == 0x000001, "Member 'WBP_GamepadKey_C_SortEntries::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_SortEntries, Temp_struct_Variable) == 0x000004, "Member 'WBP_GamepadKey_C_SortEntries::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_SortEntries, Temp_struct_Variable_1) == 0x00000C, "Member 'WBP_GamepadKey_C_SortEntries::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_SortEntries, CallFunc_RemoveChild_ReturnValue) == 0x000014, "Member 'WBP_GamepadKey_C_SortEntries::CallFunc_RemoveChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_SortEntries, K2Node_Select_Default) == 0x000018, "Member 'WBP_GamepadKey_C_SortEntries::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_SortEntries, CallFunc_RemoveChild_ReturnValue_1) == 0x000020, "Member 'WBP_GamepadKey_C_SortEntries::CallFunc_RemoveChild_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_SortEntries, K2Node_Select_Default_1) == 0x000028, "Member 'WBP_GamepadKey_C_SortEntries::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_SortEntries, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000030, "Member 'WBP_GamepadKey_C_SortEntries::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_SortEntries, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue) == 0x000038, "Member 'WBP_GamepadKey_C_SortEntries::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_SortEntries, CallFunc_AddChild_ReturnValue) == 0x000040, "Member 'WBP_GamepadKey_C_SortEntries::CallFunc_AddChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_SortEntries, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'WBP_GamepadKey_C_SortEntries::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_SortEntries, CallFunc_AddChild_ReturnValue_1) == 0x000050, "Member 'WBP_GamepadKey_C_SortEntries::CallFunc_AddChild_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_SortEntries, CallFunc_AddChild_ReturnValue_2) == 0x000058, "Member 'WBP_GamepadKey_C_SortEntries::CallFunc_AddChild_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_SortEntries, Temp_bool_Variable_2) == 0x000060, "Member 'WBP_GamepadKey_C_SortEntries::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_SortEntries, CallFunc_RemoveChild_ReturnValue_2) == 0x000061, "Member 'WBP_GamepadKey_C_SortEntries::CallFunc_RemoveChild_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_SortEntries, K2Node_Select_Default_2) == 0x000064, "Member 'WBP_GamepadKey_C_SortEntries::K2Node_Select_Default_2' has a wrong offset!");

// Function WBP_GamepadKey.WBP_GamepadKey_C.GetKeyToTextures
// 0x0058 (0x0058 - 0x0000)
struct WBP_GamepadKey_C_GetKeyToTextures final
{
public:
	TMap<struct FKey, TSoftObjectPtr<class UTexture2D>> Key_Textures;                                      // 0x0000(0x0050)(Parm, OutParm)
	EPlatformSubtype                              CallFunc_GetActivePlatformSubtype_ReturnValue;     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlatformtype                                 CallFunc_GetActivePlatformtype_ReturnValue;        // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_GamepadKey_C_GetKeyToTextures) == 0x000008, "Wrong alignment on WBP_GamepadKey_C_GetKeyToTextures");
static_assert(sizeof(WBP_GamepadKey_C_GetKeyToTextures) == 0x000058, "Wrong size on WBP_GamepadKey_C_GetKeyToTextures");
static_assert(offsetof(WBP_GamepadKey_C_GetKeyToTextures, Key_Textures) == 0x000000, "Member 'WBP_GamepadKey_C_GetKeyToTextures::Key_Textures' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_GetKeyToTextures, CallFunc_GetActivePlatformSubtype_ReturnValue) == 0x000050, "Member 'WBP_GamepadKey_C_GetKeyToTextures::CallFunc_GetActivePlatformSubtype_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_GetKeyToTextures, K2Node_SwitchEnum_CmpSuccess) == 0x000051, "Member 'WBP_GamepadKey_C_GetKeyToTextures::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_GetKeyToTextures, CallFunc_GetActivePlatformtype_ReturnValue) == 0x000052, "Member 'WBP_GamepadKey_C_GetKeyToTextures::CallFunc_GetActivePlatformtype_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GamepadKey_C_GetKeyToTextures, K2Node_SwitchEnum_CmpSuccess_1) == 0x000053, "Member 'WBP_GamepadKey_C_GetKeyToTextures::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");

}

