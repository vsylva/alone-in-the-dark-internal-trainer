#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerCharacter

#include "Basic.hpp"

#include "ObsidianFoxSettings_structs.hpp"
#include "CharacterSize_structs.hpp"
#include "AnimationMontageIdentifier_structs.hpp"
#include "FaceButtonType_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ObsidianFox_structs.hpp"
#include "ObsidianFox_classes.hpp"
#include "CemeteryCreatureType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerCharacter.BP_PlayerCharacter_C
// 0x0310 (0x0CD0 - 0x09C0)
class ABP_PlayerCharacter_C : public AOFPlayerCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x09C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFMODAudioComponent*                    WindDownAudioEdward;                               // 0x09C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    WindDownAudioEmily;                                // 0x09D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    CharacterFill_RimLight;                            // 0x09D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    CharacterFill_Front;                               // 0x09E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_EmoteCigaretteSpawnerComponent_C*   CigaretteSpawner;                                  // 0x09E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMotionWarpingComponent*                MotionWarping;                                     // 0x09F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UOFChildActorComponent*                 EQSCameraDirection;                                // 0x09F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   FlashLightFill;                                    // 0x0A00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FlashlightBeam2;                                   // 0x0A08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDEZInteractionComponent*               RightFootEnvInteraction;                           // 0x0A10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDEZInteractionComponent*               LeftFootEnvInteraction;                            // 0x0A18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   DebugLight;                                        // 0x0A20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_WaterLevelComponent_C*              WaterLevelComponent;                               // 0x0A28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TalismanComponent_C*                TalismanComponent;                                 // 0x0A30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWeaponUpgradeComponent_C*              WeaponUpgradeComponent;                            // 0x0A38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      BreathingVFX;                                      // 0x0A40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0A48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PointLightRotator;                                 // 0x0A50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialSettingsComponent_C*           MaterialSettingsComponent;                         // 0x0A58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVectorFieldInteractionComponent*       VectorFieldInteraction;                            // 0x0A60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFootPrintSpawnerComponent*             FootPrintSpawner;                                  // 0x0A68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFoliageInteractionComponent*           FoliageInteraction;                                // 0x0A70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFoliageInteractionManager*             FoliageInteractionManager;                         // 0x0A78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FlashlightCone_C*                   Flashlight;                                        // 0x0A80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FlashlightMesh;                                    // 0x0A88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UThirdPersonSpringArmComponent*         FlashLightRotator;                                 // 0x0A90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerNoiseEmitter_C*               PlayerNoiseEmitter;                                // 0x0A98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FluidDripComponent_C*               BP_BleedingComponent;                              // 0x0AA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDynamicMaterialEffectsComponent*       DynamicMaterialEffects;                            // 0x0AA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDynamicEnvironmentZoneComponent*       DynamicEnvironmentZone;                            // 0x0AB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGenericTeamAgentComponent*             GenericTeamAgent;                                  // 0x0AB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInteractionPromptComponent_C*          InteractionPromptComponent;                        // 0x0AC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    MultiFSWalk;                                       // 0x0AC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    BreathingSound;                                    // 0x0AD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIPerceptionStimuliSourceComponent*    AIPerceptionStimuliSource;                         // 0x0AD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_RadiusOverTime_1CD438BF4117DF17CA655EB008F602C4; // 0x0AE0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_1CD438BF4117DF17CA655EB008F602C4; // 0x0AE4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AE5[0x3];                                      // 0x0AE5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x0AE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_7_Turn_8534C7EE4F2316E0C873A4A91A573FCC;  // 0x0AF0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_7_MoveRight_8534C7EE4F2316E0C873A4A91A573FCC; // 0x0AF4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_7_MoveForward_8534C7EE4F2316E0C873A4A91A573FCC; // 0x0AF8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_7__Direction_8534C7EE4F2316E0C873A4A91A573FCC; // 0x0AFC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AFD[0x3];                                      // 0x0AFD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_7;                                        // 0x0B00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_6_Alpha_94010A834F1F2CF6DD100CB6ECFC24CC; // 0x0B08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_6__Direction_94010A834F1F2CF6DD100CB6ECFC24CC; // 0x0B0C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B0D[0x3];                                      // 0x0B0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_6;                                        // 0x0B10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_5_NewTrack_0_52CF1094407A5AB94146AC9B9F275DF4; // 0x0B18(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_5__Direction_52CF1094407A5AB94146AC9B9F275DF4; // 0x0B1C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1D[0x3];                                      // 0x0B1D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_5;                                        // 0x0B20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_LerpV_E10A68524C2B2ADFADFAAFA9FD470995; // 0x0B28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_E10A68524C2B2ADFADFAAFA9FD470995; // 0x0B2C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B2D[0x3];                                      // 0x0B2D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0B30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __1Lerp20Sec_NewTrack_0_997765FB465FE252F88EDAB6AA5F3935; // 0x0B38(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            __1Lerp20Sec__Direction_997765FB465FE252F88EDAB6AA5F3935; // 0x0B3C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B3D[0x3];                                      // 0x0B3D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ZeroMinus1Lerp20Sec;                               // 0x0B40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayerLeanAmount;                                  // 0x0B48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnValue;                                         // 0x0B4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InCombat;                                          // 0x0B50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B51[0x3];                                      // 0x0B51(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveForwardAxisInput;                              // 0x0B54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveRightAxisInput;                                // 0x0B58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GrappleStartLocation;                              // 0x0B5C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnCancel;                                          // 0x0B68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, Deprecated, BlueprintCallable)
	bool                                          InQuicktimeEvent;                                  // 0x0B78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B79[0x7];                                      // 0x0B79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNiagaraSystem>          DamageEffect;                                      // 0x0B80(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnInspect;                                         // 0x0BA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnSwitchConsumable;                                // 0x0BB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         HolsterDelay;                                      // 0x0BC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerHealthState                            OldHealthState;                                    // 0x0BCC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFaceButtonType                               LastIQuicktimeInput;                               // 0x0BCD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BCE[0x2];                                      // 0x0BCE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SplatterStage1Intensity;                           // 0x0BD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SplatterStage2Intensity;                           // 0x0BD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SplatterStage3Intensity;                           // 0x0BD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CurrentSplatterStage;                              // 0x0BDC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Base_Light_On;                                     // 0x0BE4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPrintDebugSpeed;                                  // 0x0BE5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlashlightAvailable;                               // 0x0BE6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BE7[0x1];                                      // 0x0BE7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMatineeCameraShake>        Damage_Camera_Shake;                               // 0x0BE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          bCameraDepthFadeDisabled;                          // 0x0BF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BF1[0x7];                                      // 0x0BF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DynamicFlashlightLightFunction;                    // 0x0BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreviousInnerRingScale;                            // 0x0C00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreviousCenterScale;                               // 0x0C04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmokeBuildup;                                      // 0x0C08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmokeBuildupLossPerSecond;                         // 0x0C0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealthThresholdPrompt;                             // 0x0C10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CurrentPlayerRotation;                             // 0x0C14(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                CurrentPlayerLocation;                             // 0x0C20(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetRotationLocation;                            // 0x0C2C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLockFlashlightRotation;                           // 0x0C38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C39[0x7];                                      // 0x0C39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               FlashlightDynMat;                                  // 0x0C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimationMontageIdentifier                   Most_Suitable_Melee_Section;                       // 0x0C48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C49[0x3];                                      // 0x0C49(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 FlashlightControllerColorOn;                       // 0x0C4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 FlashlightControllerColorOff;                      // 0x0C50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x0C54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasFlashlightOn_;                                  // 0x0C58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCameraDepthFadeManualDisable;                     // 0x0C59(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugPlayerCollision;                             // 0x0C5A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C5B[0x5];                                      // 0x0C5B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnWeaponFired;                                     // 0x0C60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UNiagaraSystem*                         DamageEffectRef;                                   // 0x0C70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   FMOD_In_Combat_Paramer;                            // 0x0C78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Enter_Combat_VO;                                   // 0x0C80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Exit_Combat_VO;                                    // 0x0C88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UItemData_Equippable*>           NGPlusWeapons;                                     // 0x0C90(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSoftClassPtr<class UClass>                   PhotoModeClass;                                    // 0x0CA0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UBPC_PhotoModeBase_C*                   PhotoModeComponent;                                // 0x0CC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SetStartBurrowed(bool beginBurrowed, bool* Success);
	void SetOrderTarget(const struct FVector& Location, bool* Success);
	void HitscanWeaponFired(bool* Success);
	void GetMostSuitableMeleeSection(EAnimationMontageIdentifier* Value);
	void GetAggroState(bool* Aggro);
	void SetNewAggro(bool NewAggro, bool* Success);
	void IncrementJac3ProneCounter(int32* ProneCounter);
	void GetCharacterSize(ECharacterSize* Size);
	void GetCemeteryCreatureType(ECemeteryCreatureType* CemeteryCreatureType);
	void SetCanCirculate(bool CanCirculate, bool* Success);
	void SetStartOnWall(bool StartOnWall, bool* Success);
	void AimedAt(bool* Return);
	void GetUpgradeComponent(class UWeaponUpgradeComponent_C** UpgradeComponent);
	void FlashlightHit(float Distance, bool* Success);
	void AddNGPlusWeapons();
	void Start_Loading_Animations();
	void Set_Combat_Sprint(bool Condition);
	void TurnOffFlashlight();
	void TurnOnFlashlight();
	void UpdateSlopGE();
	void IsOnSlope(bool* Value);
	void UpdateFlashlightVisibility();
	void UnbindOnItemAddedEvent(class AActor* Controller_0);
	void BindOnItemAddedEvent(class AActor* Controller_0);
	void OnItemAdded_SetFlashlightVisibility(class UItemData* AddedItem);
	void OnItemAddedToInventory(const class UItemData* ItemData);
	void InitializeFlashlightDynMat();
	void SetLockFlashlightRotation(bool IsLocked);
	void ToggleFlashlight();
	void RotateFlashlight();
	bool IsHealthBelowThreshold(float NewCurrentHealth);
	void UpdateFlashlightLightFunction();
	void Debug_Movement_Speed();
	void UpdateBreathingVFX();
	void RotateCharacterLight(class UCameraComponent* CameraComponent, class USceneComponent* PointLightParentTarget);
	void CharacterFadeCloseToCamera();
	void UpdateBleedingEffects(EPlayerHealthState HealthState);
	void ToggleBloodDrippingBasedOnHealthState(EPlayerHealthState HealthState);
	bool IsAiming();
	void SpawnDamageEffect(const struct FVector& Location, const struct FRotator& Rotation, bool Invert);
	void Update_Play_State_Health(float NewHealth);
	void IncrementFearEmotionInCombat(float Delta_Seconds);
	void CalculateLeanAmount(float* LeanAmount, float* InterpSpeed, float* NewParam);
	void OnHealthStateChanged(EPlayerHealthState NewHealthState);
	void OnHealthChange(float New_Current_Health, float HealthDeltaValue, struct FGameplayTagContainer& NewParam);
	void OnDeathEvent();
	void ActivateAimAssistWeapon();
	void SpawnWeapon(class UClass* Class_0, class FName Attach_Socket, bool StartEquipped, class AOFWeaponActor** Weapon);
	void OnGameMainStateChanged(EGameMainState OldGameState, EGameMainState NewGameState);
	void UserConstructionScript();
	void Timeline_1__FinishedFunc();
	void Timeline_1__UpdateFunc();
	void ZeroMinus1Lerp20Sec__FinishedFunc();
	void ZeroMinus1Lerp20Sec__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_5__FinishedFunc();
	void Timeline_5__UpdateFunc();
	void Timeline_6__FinishedFunc();
	void Timeline_6__UpdateFunc();
	void Timeline_7__FinishedFunc();
	void Timeline_7__UpdateFunc();
	void InpActEvt_CheatDebugPlayerCollision_K2Node_InputActionEvent_0(const struct FKey& Key);
	void LoadCompleteDelegate_93EE35E9463AAA2DC2E644A5607D0D69(const TArray<class UClass*>& LoadedAssets);
	void OnLoaded_EF25E9654C5D8EEC633B6D8193B34DFF(class UObject* Loaded);
	void LoadCompleteDelegate_615251364088BC9D9B5513B7EF4514D8(const TArray<class UObject*>& LoadedAssets);
	void SetCemeteryCreatureType(ECemeteryCreatureType CreatureType);
	void QuicktimeSuccess();
	void QuicktimeInput(float CurrentProgress, float MaxProgress);
	void LaserHit();
	void MoveToGrappleLocatio(const struct FVector& Grapple_Location);
	void UpdateBossHealthData(float CurrentHealthPercentage);
	void TickDebugTesting(float Delta_Seconds);
	void MeleeAttack();
	void Deactivate_Lens(class AActor* MirrorRef);
	void Override_Audio_Listener_Position();
	void OnConsoleCommandsLoaded(class UConsoleCommandsManager* ConsoleCommandsManager);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void PlayePointLightShadowsOn();
	void FocusLensBeamInteraction();
	void PlayePointLightShadowsOff();
	void PlayePointLightToggle();
	void PhotoMode(const struct FKey& InKey, bool Exit_To_Menu);
	void Bind_Cheat_Console_Input(class AController* Controller_0);
	void ReceiveTick(float DeltaSeconds);
	void LessBleedingInMaterials(class FName RGB);
	void PhotoMode_Cleanup();
	void MoreBleedingInMaterials(class FName RGB);
	void EnterRainZone();
	void ExitRainZone();
	void CharacterDeath(const struct FGameplayTagContainer& EventTags);
	void MoveToGrappleLoc(const struct FVector& GrappleLocation);
	void RemoveSplatter(class FName SplatterStage);
	void SplatterEffect(int32 StageSplatter, const struct FLinearColor& ColorSplatter, float RoughnessSplatter, const float DeltaIntensityForStage);
	void ReceivePossessed(class AController* NewController);
	void ReceiveUnpossessed(class AController* OldController);
	void ApplyBurning();
	void ResetBurn();
	void BeamInteraction(const struct FVector& ImpactPoint, class UPrimitiveComponent* HitComponent, class AActor* MirrorRef);
	void ControlRotationFocus(class AActor* FocusTarget);
	void DrunkWalk(bool Stop);
	void SetLastQuicktimeInput(EFaceButtonType LastIQuicktimeInput_0);
	void SetMostSuitableMeleeSection(EAnimationMontageIdentifier Value);
	void MeleeAttackTranslate(const struct FVector& StartVector, const struct FVector& EndVector);
	void LowHealthBark(bool bNewIsInCombat);
	void CharacterFadeManualDisable();
	void CharacterFadeManualEnable();
	void SetLastQuicktimeInput_2(EFaceButtonType LastInput);
	void AddSmokeBuildup(float PercentToAdd);
	void LoadBloodVFX();
	void DifficultyChanged(EDifficulty NewDifficulty);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void UpdateSlopeGETimerEvent();
	void CharacterSwitchWarning(const class AOFPlayerCharacter* Character);
	void OnCombatStateChanged(bool bNewIsInCombat);
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BP_PlayerCharacter(int32 EntryPoint);
	void OnWeaponFired__DelegateSignature();
	void OnSwitchConsumable__DelegateSignature();
	void OnInspect__DelegateSignature();
	void OnCancel__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerCharacter_C">();
	}
	static class ABP_PlayerCharacter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerCharacter_C>();
	}
};
static_assert(alignof(ABP_PlayerCharacter_C) == 0x000010, "Wrong alignment on ABP_PlayerCharacter_C");
static_assert(sizeof(ABP_PlayerCharacter_C) == 0x000CD0, "Wrong size on ABP_PlayerCharacter_C");
static_assert(offsetof(ABP_PlayerCharacter_C, UberGraphFrame) == 0x0009C0, "Member 'ABP_PlayerCharacter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, WindDownAudioEdward) == 0x0009C8, "Member 'ABP_PlayerCharacter_C::WindDownAudioEdward' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, WindDownAudioEmily) == 0x0009D0, "Member 'ABP_PlayerCharacter_C::WindDownAudioEmily' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, CharacterFill_RimLight) == 0x0009D8, "Member 'ABP_PlayerCharacter_C::CharacterFill_RimLight' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, CharacterFill_Front) == 0x0009E0, "Member 'ABP_PlayerCharacter_C::CharacterFill_Front' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, CigaretteSpawner) == 0x0009E8, "Member 'ABP_PlayerCharacter_C::CigaretteSpawner' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, MotionWarping) == 0x0009F0, "Member 'ABP_PlayerCharacter_C::MotionWarping' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, EQSCameraDirection) == 0x0009F8, "Member 'ABP_PlayerCharacter_C::EQSCameraDirection' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FlashLightFill) == 0x000A00, "Member 'ABP_PlayerCharacter_C::FlashLightFill' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FlashlightBeam2) == 0x000A08, "Member 'ABP_PlayerCharacter_C::FlashlightBeam2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, RightFootEnvInteraction) == 0x000A10, "Member 'ABP_PlayerCharacter_C::RightFootEnvInteraction' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, LeftFootEnvInteraction) == 0x000A18, "Member 'ABP_PlayerCharacter_C::LeftFootEnvInteraction' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, DebugLight) == 0x000A20, "Member 'ABP_PlayerCharacter_C::DebugLight' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, WaterLevelComponent) == 0x000A28, "Member 'ABP_PlayerCharacter_C::WaterLevelComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, TalismanComponent) == 0x000A30, "Member 'ABP_PlayerCharacter_C::TalismanComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, WeaponUpgradeComponent) == 0x000A38, "Member 'ABP_PlayerCharacter_C::WeaponUpgradeComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BreathingVFX) == 0x000A40, "Member 'ABP_PlayerCharacter_C::BreathingVFX' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, PointLight) == 0x000A48, "Member 'ABP_PlayerCharacter_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, PointLightRotator) == 0x000A50, "Member 'ABP_PlayerCharacter_C::PointLightRotator' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, MaterialSettingsComponent) == 0x000A58, "Member 'ABP_PlayerCharacter_C::MaterialSettingsComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, VectorFieldInteraction) == 0x000A60, "Member 'ABP_PlayerCharacter_C::VectorFieldInteraction' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FootPrintSpawner) == 0x000A68, "Member 'ABP_PlayerCharacter_C::FootPrintSpawner' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FoliageInteraction) == 0x000A70, "Member 'ABP_PlayerCharacter_C::FoliageInteraction' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FoliageInteractionManager) == 0x000A78, "Member 'ABP_PlayerCharacter_C::FoliageInteractionManager' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Flashlight) == 0x000A80, "Member 'ABP_PlayerCharacter_C::Flashlight' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FlashlightMesh) == 0x000A88, "Member 'ABP_PlayerCharacter_C::FlashlightMesh' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FlashLightRotator) == 0x000A90, "Member 'ABP_PlayerCharacter_C::FlashLightRotator' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, PlayerNoiseEmitter) == 0x000A98, "Member 'ABP_PlayerCharacter_C::PlayerNoiseEmitter' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BP_BleedingComponent) == 0x000AA0, "Member 'ABP_PlayerCharacter_C::BP_BleedingComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, DynamicMaterialEffects) == 0x000AA8, "Member 'ABP_PlayerCharacter_C::DynamicMaterialEffects' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, DynamicEnvironmentZone) == 0x000AB0, "Member 'ABP_PlayerCharacter_C::DynamicEnvironmentZone' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, GenericTeamAgent) == 0x000AB8, "Member 'ABP_PlayerCharacter_C::GenericTeamAgent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, InteractionPromptComponent) == 0x000AC0, "Member 'ABP_PlayerCharacter_C::InteractionPromptComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, MultiFSWalk) == 0x000AC8, "Member 'ABP_PlayerCharacter_C::MultiFSWalk' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BreathingSound) == 0x000AD0, "Member 'ABP_PlayerCharacter_C::BreathingSound' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, AIPerceptionStimuliSource) == 0x000AD8, "Member 'ABP_PlayerCharacter_C::AIPerceptionStimuliSource' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Timeline_1_RadiusOverTime_1CD438BF4117DF17CA655EB008F602C4) == 0x000AE0, "Member 'ABP_PlayerCharacter_C::Timeline_1_RadiusOverTime_1CD438BF4117DF17CA655EB008F602C4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Timeline_1__Direction_1CD438BF4117DF17CA655EB008F602C4) == 0x000AE4, "Member 'ABP_PlayerCharacter_C::Timeline_1__Direction_1CD438BF4117DF17CA655EB008F602C4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Timeline_1) == 0x000AE8, "Member 'ABP_PlayerCharacter_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Timeline_7_Turn_8534C7EE4F2316E0C873A4A91A573FCC) == 0x000AF0, "Member 'ABP_PlayerCharacter_C::Timeline_7_Turn_8534C7EE4F2316E0C873A4A91A573FCC' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Timeline_7_MoveRight_8534C7EE4F2316E0C873A4A91A573FCC) == 0x000AF4, "Member 'ABP_PlayerCharacter_C::Timeline_7_MoveRight_8534C7EE4F2316E0C873A4A91A573FCC' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Timeline_7_MoveForward_8534C7EE4F2316E0C873A4A91A573FCC) == 0x000AF8, "Member 'ABP_PlayerCharacter_C::Timeline_7_MoveForward_8534C7EE4F2316E0C873A4A91A573FCC' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Timeline_7__Direction_8534C7EE4F2316E0C873A4A91A573FCC) == 0x000AFC, "Member 'ABP_PlayerCharacter_C::Timeline_7__Direction_8534C7EE4F2316E0C873A4A91A573FCC' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Timeline_7) == 0x000B00, "Member 'ABP_PlayerCharacter_C::Timeline_7' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Timeline_6_Alpha_94010A834F1F2CF6DD100CB6ECFC24CC) == 0x000B08, "Member 'ABP_PlayerCharacter_C::Timeline_6_Alpha_94010A834F1F2CF6DD100CB6ECFC24CC' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Timeline_6__Direction_94010A834F1F2CF6DD100CB6ECFC24CC) == 0x000B0C, "Member 'ABP_PlayerCharacter_C::Timeline_6__Direction_94010A834F1F2CF6DD100CB6ECFC24CC' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Timeline_6) == 0x000B10, "Member 'ABP_PlayerCharacter_C::Timeline_6' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Timeline_5_NewTrack_0_52CF1094407A5AB94146AC9B9F275DF4) == 0x000B18, "Member 'ABP_PlayerCharacter_C::Timeline_5_NewTrack_0_52CF1094407A5AB94146AC9B9F275DF4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Timeline_5__Direction_52CF1094407A5AB94146AC9B9F275DF4) == 0x000B1C, "Member 'ABP_PlayerCharacter_C::Timeline_5__Direction_52CF1094407A5AB94146AC9B9F275DF4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Timeline_5) == 0x000B20, "Member 'ABP_PlayerCharacter_C::Timeline_5' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Timeline_0_LerpV_E10A68524C2B2ADFADFAAFA9FD470995) == 0x000B28, "Member 'ABP_PlayerCharacter_C::Timeline_0_LerpV_E10A68524C2B2ADFADFAAFA9FD470995' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Timeline_0__Direction_E10A68524C2B2ADFADFAAFA9FD470995) == 0x000B2C, "Member 'ABP_PlayerCharacter_C::Timeline_0__Direction_E10A68524C2B2ADFADFAAFA9FD470995' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Timeline_0) == 0x000B30, "Member 'ABP_PlayerCharacter_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, __1Lerp20Sec_NewTrack_0_997765FB465FE252F88EDAB6AA5F3935) == 0x000B38, "Member 'ABP_PlayerCharacter_C::__1Lerp20Sec_NewTrack_0_997765FB465FE252F88EDAB6AA5F3935' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, __1Lerp20Sec__Direction_997765FB465FE252F88EDAB6AA5F3935) == 0x000B3C, "Member 'ABP_PlayerCharacter_C::__1Lerp20Sec__Direction_997765FB465FE252F88EDAB6AA5F3935' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, ZeroMinus1Lerp20Sec) == 0x000B40, "Member 'ABP_PlayerCharacter_C::ZeroMinus1Lerp20Sec' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, PlayerLeanAmount) == 0x000B48, "Member 'ABP_PlayerCharacter_C::PlayerLeanAmount' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, TurnValue) == 0x000B4C, "Member 'ABP_PlayerCharacter_C::TurnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, InCombat) == 0x000B50, "Member 'ABP_PlayerCharacter_C::InCombat' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, MoveForwardAxisInput) == 0x000B54, "Member 'ABP_PlayerCharacter_C::MoveForwardAxisInput' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, MoveRightAxisInput) == 0x000B58, "Member 'ABP_PlayerCharacter_C::MoveRightAxisInput' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, GrappleStartLocation) == 0x000B5C, "Member 'ABP_PlayerCharacter_C::GrappleStartLocation' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, OnCancel) == 0x000B68, "Member 'ABP_PlayerCharacter_C::OnCancel' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, InQuicktimeEvent) == 0x000B78, "Member 'ABP_PlayerCharacter_C::InQuicktimeEvent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, DamageEffect) == 0x000B80, "Member 'ABP_PlayerCharacter_C::DamageEffect' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, OnInspect) == 0x000BA8, "Member 'ABP_PlayerCharacter_C::OnInspect' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, OnSwitchConsumable) == 0x000BB8, "Member 'ABP_PlayerCharacter_C::OnSwitchConsumable' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, HolsterDelay) == 0x000BC8, "Member 'ABP_PlayerCharacter_C::HolsterDelay' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, OldHealthState) == 0x000BCC, "Member 'ABP_PlayerCharacter_C::OldHealthState' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, LastIQuicktimeInput) == 0x000BCD, "Member 'ABP_PlayerCharacter_C::LastIQuicktimeInput' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, SplatterStage1Intensity) == 0x000BD0, "Member 'ABP_PlayerCharacter_C::SplatterStage1Intensity' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, SplatterStage2Intensity) == 0x000BD4, "Member 'ABP_PlayerCharacter_C::SplatterStage2Intensity' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, SplatterStage3Intensity) == 0x000BD8, "Member 'ABP_PlayerCharacter_C::SplatterStage3Intensity' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, CurrentSplatterStage) == 0x000BDC, "Member 'ABP_PlayerCharacter_C::CurrentSplatterStage' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Base_Light_On) == 0x000BE4, "Member 'ABP_PlayerCharacter_C::Base_Light_On' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bPrintDebugSpeed) == 0x000BE5, "Member 'ABP_PlayerCharacter_C::bPrintDebugSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FlashlightAvailable) == 0x000BE6, "Member 'ABP_PlayerCharacter_C::FlashlightAvailable' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Damage_Camera_Shake) == 0x000BE8, "Member 'ABP_PlayerCharacter_C::Damage_Camera_Shake' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bCameraDepthFadeDisabled) == 0x000BF0, "Member 'ABP_PlayerCharacter_C::bCameraDepthFadeDisabled' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, DynamicFlashlightLightFunction) == 0x000BF8, "Member 'ABP_PlayerCharacter_C::DynamicFlashlightLightFunction' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, PreviousInnerRingScale) == 0x000C00, "Member 'ABP_PlayerCharacter_C::PreviousInnerRingScale' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, PreviousCenterScale) == 0x000C04, "Member 'ABP_PlayerCharacter_C::PreviousCenterScale' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, SmokeBuildup) == 0x000C08, "Member 'ABP_PlayerCharacter_C::SmokeBuildup' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, SmokeBuildupLossPerSecond) == 0x000C0C, "Member 'ABP_PlayerCharacter_C::SmokeBuildupLossPerSecond' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, HealthThresholdPrompt) == 0x000C10, "Member 'ABP_PlayerCharacter_C::HealthThresholdPrompt' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, CurrentPlayerRotation) == 0x000C14, "Member 'ABP_PlayerCharacter_C::CurrentPlayerRotation' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, CurrentPlayerLocation) == 0x000C20, "Member 'ABP_PlayerCharacter_C::CurrentPlayerLocation' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, TargetRotationLocation) == 0x000C2C, "Member 'ABP_PlayerCharacter_C::TargetRotationLocation' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bLockFlashlightRotation) == 0x000C38, "Member 'ABP_PlayerCharacter_C::bLockFlashlightRotation' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FlashlightDynMat) == 0x000C40, "Member 'ABP_PlayerCharacter_C::FlashlightDynMat' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Most_Suitable_Melee_Section) == 0x000C48, "Member 'ABP_PlayerCharacter_C::Most_Suitable_Melee_Section' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FlashlightControllerColorOn) == 0x000C4C, "Member 'ABP_PlayerCharacter_C::FlashlightControllerColorOn' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FlashlightControllerColorOff) == 0x000C50, "Member 'ABP_PlayerCharacter_C::FlashlightControllerColorOff' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, DeltaTime) == 0x000C54, "Member 'ABP_PlayerCharacter_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, WasFlashlightOn_) == 0x000C58, "Member 'ABP_PlayerCharacter_C::WasFlashlightOn_' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bCameraDepthFadeManualDisable) == 0x000C59, "Member 'ABP_PlayerCharacter_C::bCameraDepthFadeManualDisable' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bDebugPlayerCollision) == 0x000C5A, "Member 'ABP_PlayerCharacter_C::bDebugPlayerCollision' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, OnWeaponFired) == 0x000C60, "Member 'ABP_PlayerCharacter_C::OnWeaponFired' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, DamageEffectRef) == 0x000C70, "Member 'ABP_PlayerCharacter_C::DamageEffectRef' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FMOD_In_Combat_Paramer) == 0x000C78, "Member 'ABP_PlayerCharacter_C::FMOD_In_Combat_Paramer' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Enter_Combat_VO) == 0x000C80, "Member 'ABP_PlayerCharacter_C::Enter_Combat_VO' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Exit_Combat_VO) == 0x000C88, "Member 'ABP_PlayerCharacter_C::Exit_Combat_VO' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, NGPlusWeapons) == 0x000C90, "Member 'ABP_PlayerCharacter_C::NGPlusWeapons' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, PhotoModeClass) == 0x000CA0, "Member 'ABP_PlayerCharacter_C::PhotoModeClass' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, PhotoModeComponent) == 0x000CC8, "Member 'ABP_PlayerCharacter_C::PhotoModeComponent' has a wrong offset!");

}

