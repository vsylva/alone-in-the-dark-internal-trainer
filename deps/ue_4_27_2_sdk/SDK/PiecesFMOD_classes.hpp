#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PiecesFMOD

#include "Basic.hpp"

#include "FMODStudio_structs.hpp"
#include "PiecesGameplaySession_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "PiecesFMOD_structs.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class PiecesFMOD.FMODSaveSubSystem
// 0x00C0 (0x00F0 - 0x0030)
class UFMODSaveSubSystem final : public UGameplaySessionSubsystem
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, float>                      Parameters;                                        // 0x0048(0x0050)(SaveGame, NativeAccessSpecifierPrivate)
	TMap<class FName, float>                      ParametersOldValue;                                // 0x0098(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FMODSaveSubSystem">();
	}
	static class UFMODSaveSubSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFMODSaveSubSystem>();
	}
};
static_assert(alignof(UFMODSaveSubSystem) == 0x000008, "Wrong alignment on UFMODSaveSubSystem");
static_assert(sizeof(UFMODSaveSubSystem) == 0x0000F0, "Wrong size on UFMODSaveSubSystem");
static_assert(offsetof(UFMODSaveSubSystem, Parameters) == 0x000048, "Member 'UFMODSaveSubSystem::Parameters' has a wrong offset!");
static_assert(offsetof(UFMODSaveSubSystem, ParametersOldValue) == 0x000098, "Member 'UFMODSaveSubSystem::ParametersOldValue' has a wrong offset!");

// Class PiecesFMOD.PiecesFMODBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UPiecesFMODBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UFMODAudioComponent* PlayEventAttached(class UFMODEvent* Event, class USceneComponent* AttachToComponent, const class FName& AttachPointName, const struct FVector& Location, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, bool bAutoPlay, bool bAutoDestroy, const class FText& ProgrammerSound);
	static void SetBusPortIndex(class UFMODAsset* BusAsset, int32 PortIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesFMODBlueprintLibrary">();
	}
	static class UPiecesFMODBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesFMODBlueprintLibrary>();
	}
};
static_assert(alignof(UPiecesFMODBlueprintLibrary) == 0x000008, "Wrong alignment on UPiecesFMODBlueprintLibrary");
static_assert(sizeof(UPiecesFMODBlueprintLibrary) == 0x000028, "Wrong size on UPiecesFMODBlueprintLibrary");

// Class PiecesFMOD.PiecesFMODDeveloperSettings
// 0x00A8 (0x00E0 - 0x0038)
class UPiecesFMODDeveloperSettings final : public UDeveloperSettings
{
public:
	TArray<class FName>                           FMODParametersToIgnore;                            // 0x0038(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFMODPort>               PS5ControllerPort;                                 // 0x0048(0x0028)(Edit, Config, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UFMODBank>>       LocalizationBanks;                                 // 0x0070(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UFMODBank>>       AlwaysPreloadSampleBanks;                          // 0x0080(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FFMODPauseGameSettings                 FmodPauseGameSetting;                              // 0x0090(0x0050)(Edit, Config, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesFMODDeveloperSettings">();
	}
	static class UPiecesFMODDeveloperSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesFMODDeveloperSettings>();
	}
};
static_assert(alignof(UPiecesFMODDeveloperSettings) == 0x000008, "Wrong alignment on UPiecesFMODDeveloperSettings");
static_assert(sizeof(UPiecesFMODDeveloperSettings) == 0x0000E0, "Wrong size on UPiecesFMODDeveloperSettings");
static_assert(offsetof(UPiecesFMODDeveloperSettings, FMODParametersToIgnore) == 0x000038, "Member 'UPiecesFMODDeveloperSettings::FMODParametersToIgnore' has a wrong offset!");
static_assert(offsetof(UPiecesFMODDeveloperSettings, PS5ControllerPort) == 0x000048, "Member 'UPiecesFMODDeveloperSettings::PS5ControllerPort' has a wrong offset!");
static_assert(offsetof(UPiecesFMODDeveloperSettings, LocalizationBanks) == 0x000070, "Member 'UPiecesFMODDeveloperSettings::LocalizationBanks' has a wrong offset!");
static_assert(offsetof(UPiecesFMODDeveloperSettings, AlwaysPreloadSampleBanks) == 0x000080, "Member 'UPiecesFMODDeveloperSettings::AlwaysPreloadSampleBanks' has a wrong offset!");
static_assert(offsetof(UPiecesFMODDeveloperSettings, FmodPauseGameSetting) == 0x000090, "Member 'UPiecesFMODDeveloperSettings::FmodPauseGameSetting' has a wrong offset!");

// Class PiecesFMOD.PiecesFMODPauseSubsystem
// 0x0080 (0x00B0 - 0x0030)
class UPiecesFMODPauseSubsystem final : public UGameplaySessionSubsystem
{
public:
	struct FFMODPauseGameSettings                 FmodPauseGameSetting;                              // 0x0030(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0x20];                                      // 0x0080(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFMODEventInstance                     FMODPauseEventSnapshotInstance;                    // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateFmodPauseGameSettings();
	void DeactivateFmodPauseGameSetting();

	bool IsFmodPauseSettingsActive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesFMODPauseSubsystem">();
	}
	static class UPiecesFMODPauseSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesFMODPauseSubsystem>();
	}
};
static_assert(alignof(UPiecesFMODPauseSubsystem) == 0x000008, "Wrong alignment on UPiecesFMODPauseSubsystem");
static_assert(sizeof(UPiecesFMODPauseSubsystem) == 0x0000B0, "Wrong size on UPiecesFMODPauseSubsystem");
static_assert(offsetof(UPiecesFMODPauseSubsystem, FmodPauseGameSetting) == 0x000030, "Member 'UPiecesFMODPauseSubsystem::FmodPauseGameSetting' has a wrong offset!");
static_assert(offsetof(UPiecesFMODPauseSubsystem, FMODPauseEventSnapshotInstance) == 0x0000A0, "Member 'UPiecesFMODPauseSubsystem::FMODPauseEventSnapshotInstance' has a wrong offset!");

// Class PiecesFMOD.PiecesFMODWorldSubSystem
// 0x0010 (0x0040 - 0x0030)
class UPiecesFMODWorldSubSystem final : public UWorldSubsystem
{
public:
	TArray<class UFMODBank*>                      LoadedBankAssets;                                  // 0x0030(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PiecesFMODWorldSubSystem">();
	}
	static class UPiecesFMODWorldSubSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPiecesFMODWorldSubSystem>();
	}
};
static_assert(alignof(UPiecesFMODWorldSubSystem) == 0x000008, "Wrong alignment on UPiecesFMODWorldSubSystem");
static_assert(sizeof(UPiecesFMODWorldSubSystem) == 0x000040, "Wrong size on UPiecesFMODWorldSubSystem");
static_assert(offsetof(UPiecesFMODWorldSubSystem, LoadedBankAssets) == 0x000030, "Member 'UPiecesFMODWorldSubSystem::LoadedBankAssets' has a wrong offset!");

}

