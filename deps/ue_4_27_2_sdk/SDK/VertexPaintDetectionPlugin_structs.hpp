#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VertexPaintDetectionPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum VertexPaintDetectionPlugin.EThreadPriorityWrapper
// NumValues: 0x0009
enum class EThreadPriorityWrapper : uint8
{
	TPri_Normal                              = 0,
	TPri_AboveNormal                         = 1,
	TPri_BelowNormal                         = 2,
	TPri_Highest                             = 3,
	TPri_Lowest                              = 4,
	TPri_SlightlyBelowNormal                 = 5,
	TPri_TimeCritical                        = 6,
	TPri_Num                                 = 7,
	TPri_MAX                                 = 8,
};

// Enum VertexPaintDetectionPlugin.Enum_SurfaceAtChannel
// NumValues: 0x0006
enum class Enum_SurfaceAtChannel : uint8
{
	Default                                  = 0,
	RedChannel                               = 1,
	GreenChannel                             = 2,
	BlueChannel                              = 3,
	AlphaChannel                             = 4,
	Enum_MAX                                 = 5,
};

// Enum VertexPaintDetectionPlugin.EApplyVertexColorSetting
// NumValues: 0x0003
enum class EApplyVertexColorSetting : uint8
{
	EAddVertexColor                          = 0,
	ESetVertexColor                          = 1,
	EApplyVertexColorSetting_MAX             = 2,
};

// Enum VertexPaintDetectionPlugin.Enum_PaintEntireMeshAtRandomVertices_PropogateToLODsMethod
// NumValues: 0x0003
enum class Enum_PaintEntireMeshAtRandomVertices_PropogateToLODsMethod : uint8
{
	ModifiedEngineMethod                     = 0,
	DontPropogateLOD0ToAllLODs               = 1,
	Enum_PaintEntireMeshAtRandomVertices_MAX = 2,
};

// Enum VertexPaintDetectionPlugin.EVertexPaintFallOffType
// NumValues: 0x0003
enum class EVertexPaintFallOffType : uint8
{
	FromComponentCenter                      = 0,
	FromComponentZHeight                     = 1,
	EVertexPaintFallOffType_MAX              = 2,
};

// Enum VertexPaintDetectionPlugin.Enum_PaintWithinAreaShape
// NumValues: 0x0004
enum class Enum_PaintWithinAreaShape : uint8
{
	IsSquareOrRectangleShape                 = 0,
	IsSphereShape                            = 1,
	IsComplexShape                           = 2,
	Enum_MAX                                 = 3,
};

// ScriptStruct VertexPaintDetectionPlugin.VertexPaintOverridePaintUpToLOD
// 0x0008 (0x0008 - 0x0000)
struct FVertexPaintOverridePaintUpToLOD final
{
public:
	bool                                          OverrideLODToPaintUpTo;                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AmountOfLODsToPaint;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexPaintOverridePaintUpToLOD) == 0x000004, "Wrong alignment on FVertexPaintOverridePaintUpToLOD");
static_assert(sizeof(FVertexPaintOverridePaintUpToLOD) == 0x000008, "Wrong size on FVertexPaintOverridePaintUpToLOD");
static_assert(offsetof(FVertexPaintOverridePaintUpToLOD, OverrideLODToPaintUpTo) == 0x000000, "Member 'FVertexPaintOverridePaintUpToLOD::OverrideLODToPaintUpTo' has a wrong offset!");
static_assert(offsetof(FVertexPaintOverridePaintUpToLOD, AmountOfLODsToPaint) == 0x000004, "Member 'FVertexPaintOverridePaintUpToLOD::AmountOfLODsToPaint' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectIncludeAmountOfPaintedColorsOfEachChannel
// 0x0008 (0x0008 - 0x0000)
struct FVertexDetectIncludeAmountOfPaintedColorsOfEachChannel final
{
public:
	bool                                          IncludeAmountOfPaintedColorsOfEachChannel;         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IncludeAmountOfPaintedColorsOfEachChannel_IfMinColorAmount; // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectIncludeAmountOfPaintedColorsOfEachChannel) == 0x000004, "Wrong alignment on FVertexDetectIncludeAmountOfPaintedColorsOfEachChannel");
static_assert(sizeof(FVertexDetectIncludeAmountOfPaintedColorsOfEachChannel) == 0x000008, "Wrong size on FVertexDetectIncludeAmountOfPaintedColorsOfEachChannel");
static_assert(offsetof(FVertexDetectIncludeAmountOfPaintedColorsOfEachChannel, IncludeAmountOfPaintedColorsOfEachChannel) == 0x000000, "Member 'FVertexDetectIncludeAmountOfPaintedColorsOfEachChannel::IncludeAmountOfPaintedColorsOfEachChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectIncludeAmountOfPaintedColorsOfEachChannel, IncludeAmountOfPaintedColorsOfEachChannel_IfMinColorAmount) == 0x000004, "Member 'FVertexDetectIncludeAmountOfPaintedColorsOfEachChannel::IncludeAmountOfPaintedColorsOfEachChannel_IfMinColorAmount' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectEventSettings
// 0x0010 (0x0010 - 0x0000)
struct FVertexDetectEventSettings final
{
public:
	bool                                          RunCallbackDelegate;                               // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RunCallbackInterfaces;                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeVertexDataOnlyForLOD0;                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeColorsOfEachBone;                           // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVertexDetectIncludeAmountOfPaintedColorsOfEachChannel IncludeAmountOfPaintedColorsOfEachChannel;         // 0x0004(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IncludeVertexColorData;                            // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeSerializedVertexColorData;                  // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeVertexPositionData;                         // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeVertexNormalData;                           // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectEventSettings) == 0x000004, "Wrong alignment on FVertexDetectEventSettings");
static_assert(sizeof(FVertexDetectEventSettings) == 0x000010, "Wrong size on FVertexDetectEventSettings");
static_assert(offsetof(FVertexDetectEventSettings, RunCallbackDelegate) == 0x000000, "Member 'FVertexDetectEventSettings::RunCallbackDelegate' has a wrong offset!");
static_assert(offsetof(FVertexDetectEventSettings, RunCallbackInterfaces) == 0x000001, "Member 'FVertexDetectEventSettings::RunCallbackInterfaces' has a wrong offset!");
static_assert(offsetof(FVertexDetectEventSettings, IncludeVertexDataOnlyForLOD0) == 0x000002, "Member 'FVertexDetectEventSettings::IncludeVertexDataOnlyForLOD0' has a wrong offset!");
static_assert(offsetof(FVertexDetectEventSettings, IncludeColorsOfEachBone) == 0x000003, "Member 'FVertexDetectEventSettings::IncludeColorsOfEachBone' has a wrong offset!");
static_assert(offsetof(FVertexDetectEventSettings, IncludeAmountOfPaintedColorsOfEachChannel) == 0x000004, "Member 'FVertexDetectEventSettings::IncludeAmountOfPaintedColorsOfEachChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectEventSettings, IncludeVertexColorData) == 0x00000C, "Member 'FVertexDetectEventSettings::IncludeVertexColorData' has a wrong offset!");
static_assert(offsetof(FVertexDetectEventSettings, IncludeSerializedVertexColorData) == 0x00000D, "Member 'FVertexDetectEventSettings::IncludeSerializedVertexColorData' has a wrong offset!");
static_assert(offsetof(FVertexDetectEventSettings, IncludeVertexPositionData) == 0x00000E, "Member 'FVertexDetectEventSettings::IncludeVertexPositionData' has a wrong offset!");
static_assert(offsetof(FVertexDetectEventSettings, IncludeVertexNormalData) == 0x00000F, "Member 'FVertexDetectEventSettings::IncludeVertexNormalData' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexPaintMultiThreadSettingsStruct
// 0x0002 (0x0002 - 0x0000)
struct FVertexPaintMultiThreadSettingsStruct final
{
public:
	bool                                          UseMultithreadingForCalculations;                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EThreadPriorityWrapper                        MultithreadPriority;                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexPaintMultiThreadSettingsStruct) == 0x000001, "Wrong alignment on FVertexPaintMultiThreadSettingsStruct");
static_assert(sizeof(FVertexPaintMultiThreadSettingsStruct) == 0x000002, "Wrong size on FVertexPaintMultiThreadSettingsStruct");
static_assert(offsetof(FVertexPaintMultiThreadSettingsStruct, UseMultithreadingForCalculations) == 0x000000, "Member 'FVertexPaintMultiThreadSettingsStruct::UseMultithreadingForCalculations' has a wrong offset!");
static_assert(offsetof(FVertexPaintMultiThreadSettingsStruct, MultithreadPriority) == 0x000001, "Member 'FVertexPaintMultiThreadSettingsStruct::MultithreadPriority' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectFundementalStruct
// 0x0028 (0x0028 - 0x0000)
struct FVertexDetectFundementalStruct
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVertexDetectEventSettings             CallbackSettings;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVertexPaintMultiThreadSettingsStruct  MultiThreadSettings;                               // 0x0020(0x0002)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVertexDetectFundementalStruct) == 0x000008, "Wrong alignment on FVertexDetectFundementalStruct");
static_assert(sizeof(FVertexDetectFundementalStruct) == 0x000028, "Wrong size on FVertexDetectFundementalStruct");
static_assert(offsetof(FVertexDetectFundementalStruct, Actor) == 0x000000, "Member 'FVertexDetectFundementalStruct::Actor' has a wrong offset!");
static_assert(offsetof(FVertexDetectFundementalStruct, MeshComponent) == 0x000008, "Member 'FVertexDetectFundementalStruct::MeshComponent' has a wrong offset!");
static_assert(offsetof(FVertexDetectFundementalStruct, CallbackSettings) == 0x000010, "Member 'FVertexDetectFundementalStruct::CallbackSettings' has a wrong offset!");
static_assert(offsetof(FVertexDetectFundementalStruct, MultiThreadSettings) == 0x000020, "Member 'FVertexDetectFundementalStruct::MultiThreadSettings' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexPaintStruct
// 0x0010 (0x0038 - 0x0028)
struct FVertexPaintStruct : public FVertexDetectFundementalStruct
{
public:
	struct FVertexPaintOverridePaintUpToLOD       OverrideLOD;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          AffectClothPhysics;                                // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVertexPaintStruct) == 0x000008, "Wrong alignment on FVertexPaintStruct");
static_assert(sizeof(FVertexPaintStruct) == 0x000038, "Wrong size on FVertexPaintStruct");
static_assert(offsetof(FVertexPaintStruct, OverrideLOD) == 0x000028, "Member 'FVertexPaintStruct::OverrideLOD' has a wrong offset!");
static_assert(offsetof(FVertexPaintStruct, AffectClothPhysics) == 0x000030, "Member 'FVertexPaintStruct::AffectClothPhysics' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexPaintColorSnippetStruct
// 0x0028 (0x0060 - 0x0038)
struct FVertexPaintColorSnippetStruct final : public FVertexPaintStruct
{
public:
	struct FGameplayTag                           ColorSnippetTag;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           RandomizeAnyColorSnippetTagUnderThisCategory;      // 0x0040(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ColorSnippetID;                                    // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVertexPaintColorSnippetDataAsset*      ColorSnippetDataAssetSnippetIsStoredIn;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexPaintColorSnippetStruct) == 0x000008, "Wrong alignment on FVertexPaintColorSnippetStruct");
static_assert(sizeof(FVertexPaintColorSnippetStruct) == 0x000060, "Wrong size on FVertexPaintColorSnippetStruct");
static_assert(offsetof(FVertexPaintColorSnippetStruct, ColorSnippetTag) == 0x000038, "Member 'FVertexPaintColorSnippetStruct::ColorSnippetTag' has a wrong offset!");
static_assert(offsetof(FVertexPaintColorSnippetStruct, RandomizeAnyColorSnippetTagUnderThisCategory) == 0x000040, "Member 'FVertexPaintColorSnippetStruct::RandomizeAnyColorSnippetTagUnderThisCategory' has a wrong offset!");
static_assert(offsetof(FVertexPaintColorSnippetStruct, ColorSnippetID) == 0x000048, "Member 'FVertexPaintColorSnippetStruct::ColorSnippetID' has a wrong offset!");
static_assert(offsetof(FVertexPaintColorSnippetStruct, ColorSnippetDataAssetSnippetIsStoredIn) == 0x000058, "Member 'FVertexPaintColorSnippetStruct::ColorSnippetDataAssetSnippetIsStoredIn' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectClosestVertexNormalStruct
// 0x0018 (0x0018 - 0x0000)
struct FVertexDetectClosestVertexNormalStruct final
{
public:
	struct FVector                                ClosestVertexNormal;                               // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClosestVertexNormalLocal;                          // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectClosestVertexNormalStruct) == 0x000004, "Wrong alignment on FVertexDetectClosestVertexNormalStruct");
static_assert(sizeof(FVertexDetectClosestVertexNormalStruct) == 0x000018, "Wrong size on FVertexDetectClosestVertexNormalStruct");
static_assert(offsetof(FVertexDetectClosestVertexNormalStruct, ClosestVertexNormal) == 0x000000, "Member 'FVertexDetectClosestVertexNormalStruct::ClosestVertexNormal' has a wrong offset!");
static_assert(offsetof(FVertexDetectClosestVertexNormalStruct, ClosestVertexNormalLocal) == 0x00000C, "Member 'FVertexDetectClosestVertexNormalStruct::ClosestVertexNormalLocal' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectClosestVertexPositionStruct
// 0x0018 (0x0018 - 0x0000)
struct FVertexDetectClosestVertexPositionStruct final
{
public:
	struct FVector                                ClosestVertexPositionWorld;                        // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClosestVertexPositionActorLocal;                   // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectClosestVertexPositionStruct) == 0x000004, "Wrong alignment on FVertexDetectClosestVertexPositionStruct");
static_assert(sizeof(FVertexDetectClosestVertexPositionStruct) == 0x000018, "Wrong size on FVertexDetectClosestVertexPositionStruct");
static_assert(offsetof(FVertexDetectClosestVertexPositionStruct, ClosestVertexPositionWorld) == 0x000000, "Member 'FVertexDetectClosestVertexPositionStruct::ClosestVertexPositionWorld' has a wrong offset!");
static_assert(offsetof(FVertexDetectClosestVertexPositionStruct, ClosestVertexPositionActorLocal) == 0x00000C, "Member 'FVertexDetectClosestVertexPositionStruct::ClosestVertexPositionActorLocal' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectClosestVertexGeneralInfoStruct
// 0x0060 (0x0060 - 0x0000)
struct FVertexDetectClosestVertexGeneralInfoStruct final
{
public:
	int32                                         ClosestVertexIndex;                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClosestSection;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ClosestVertexColors;                               // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVertexDetectClosestVertexPositionStruct ClosestVertexPositionInfo;                         // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FVertexDetectClosestVertexNormalStruct ClosestVertexNormalInfo;                           // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ClosestVertexMaterial;                             // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      ClosestVertexUVAtEachUVChannel;                    // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectClosestVertexGeneralInfoStruct) == 0x000008, "Wrong alignment on FVertexDetectClosestVertexGeneralInfoStruct");
static_assert(sizeof(FVertexDetectClosestVertexGeneralInfoStruct) == 0x000060, "Wrong size on FVertexDetectClosestVertexGeneralInfoStruct");
static_assert(offsetof(FVertexDetectClosestVertexGeneralInfoStruct, ClosestVertexIndex) == 0x000000, "Member 'FVertexDetectClosestVertexGeneralInfoStruct::ClosestVertexIndex' has a wrong offset!");
static_assert(offsetof(FVertexDetectClosestVertexGeneralInfoStruct, ClosestSection) == 0x000004, "Member 'FVertexDetectClosestVertexGeneralInfoStruct::ClosestSection' has a wrong offset!");
static_assert(offsetof(FVertexDetectClosestVertexGeneralInfoStruct, ClosestVertexColors) == 0x000008, "Member 'FVertexDetectClosestVertexGeneralInfoStruct::ClosestVertexColors' has a wrong offset!");
static_assert(offsetof(FVertexDetectClosestVertexGeneralInfoStruct, ClosestVertexPositionInfo) == 0x000018, "Member 'FVertexDetectClosestVertexGeneralInfoStruct::ClosestVertexPositionInfo' has a wrong offset!");
static_assert(offsetof(FVertexDetectClosestVertexGeneralInfoStruct, ClosestVertexNormalInfo) == 0x000030, "Member 'FVertexDetectClosestVertexGeneralInfoStruct::ClosestVertexNormalInfo' has a wrong offset!");
static_assert(offsetof(FVertexDetectClosestVertexGeneralInfoStruct, ClosestVertexMaterial) == 0x000048, "Member 'FVertexDetectClosestVertexGeneralInfoStruct::ClosestVertexMaterial' has a wrong offset!");
static_assert(offsetof(FVertexDetectClosestVertexGeneralInfoStruct, ClosestVertexUVAtEachUVChannel) == 0x000050, "Member 'FVertexDetectClosestVertexGeneralInfoStruct::ClosestVertexUVAtEachUVChannel' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectMostDominantPhysicsSurfaceInfo
// 0x0030 (0x0030 - 0x0000)
struct FVertexDetectMostDominantPhysicsSurfaceInfo final
{
public:
	EPhysicalSurface                              MostDominantPhysicsSurface;                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MostDominantPhysicsSurfaceAsString;                // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MostDominantPhysicstSurfaceValue;                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<Enum_SurfaceAtChannel>                 MostDominantPhysicsSurfaceAtVertexColorChannels;   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectMostDominantPhysicsSurfaceInfo) == 0x000008, "Wrong alignment on FVertexDetectMostDominantPhysicsSurfaceInfo");
static_assert(sizeof(FVertexDetectMostDominantPhysicsSurfaceInfo) == 0x000030, "Wrong size on FVertexDetectMostDominantPhysicsSurfaceInfo");
static_assert(offsetof(FVertexDetectMostDominantPhysicsSurfaceInfo, MostDominantPhysicsSurface) == 0x000000, "Member 'FVertexDetectMostDominantPhysicsSurfaceInfo::MostDominantPhysicsSurface' has a wrong offset!");
static_assert(offsetof(FVertexDetectMostDominantPhysicsSurfaceInfo, MostDominantPhysicsSurfaceAsString) == 0x000008, "Member 'FVertexDetectMostDominantPhysicsSurfaceInfo::MostDominantPhysicsSurfaceAsString' has a wrong offset!");
static_assert(offsetof(FVertexDetectMostDominantPhysicsSurfaceInfo, MostDominantPhysicstSurfaceValue) == 0x000018, "Member 'FVertexDetectMostDominantPhysicsSurfaceInfo::MostDominantPhysicstSurfaceValue' has a wrong offset!");
static_assert(offsetof(FVertexDetectMostDominantPhysicsSurfaceInfo, MostDominantPhysicsSurfaceAtVertexColorChannels) == 0x000020, "Member 'FVertexDetectMostDominantPhysicsSurfaceInfo::MostDominantPhysicsSurfaceAtVertexColorChannels' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectPhysicsSurfaceDataStruct_AtDefault
// 0x0020 (0x0020 - 0x0000)
struct FVertexDetectPhysicsSurfaceDataStruct_AtDefault final
{
public:
	bool                                          MaterialRegisteredToIncludeDefaultChannel;         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PhysicalSurfaceAtDefault;                          // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PhysicalSurfaceAsStringAtDefault;                  // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicalSurfaceValueAtDefault;                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVertexDetectPhysicsSurfaceDataStruct_AtDefault) == 0x000008, "Wrong alignment on FVertexDetectPhysicsSurfaceDataStruct_AtDefault");
static_assert(sizeof(FVertexDetectPhysicsSurfaceDataStruct_AtDefault) == 0x000020, "Wrong size on FVertexDetectPhysicsSurfaceDataStruct_AtDefault");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct_AtDefault, MaterialRegisteredToIncludeDefaultChannel) == 0x000000, "Member 'FVertexDetectPhysicsSurfaceDataStruct_AtDefault::MaterialRegisteredToIncludeDefaultChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct_AtDefault, PhysicalSurfaceAtDefault) == 0x000001, "Member 'FVertexDetectPhysicsSurfaceDataStruct_AtDefault::PhysicalSurfaceAtDefault' has a wrong offset!");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct_AtDefault, PhysicalSurfaceAsStringAtDefault) == 0x000008, "Member 'FVertexDetectPhysicsSurfaceDataStruct_AtDefault::PhysicalSurfaceAsStringAtDefault' has a wrong offset!");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct_AtDefault, PhysicalSurfaceValueAtDefault) == 0x000018, "Member 'FVertexDetectPhysicsSurfaceDataStruct_AtDefault::PhysicalSurfaceValueAtDefault' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectPhysicsSurfaceDataStruct_AtRed
// 0x0020 (0x0020 - 0x0000)
struct FVertexDetectPhysicsSurfaceDataStruct_AtRed final
{
public:
	EPhysicalSurface                              PhysicalSurfaceAtRedChannel;                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PhysicalSurfaceAsStringAtRedChannel;               // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicalSurfaceValueAtRedChannel;                  // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVertexDetectPhysicsSurfaceDataStruct_AtRed) == 0x000008, "Wrong alignment on FVertexDetectPhysicsSurfaceDataStruct_AtRed");
static_assert(sizeof(FVertexDetectPhysicsSurfaceDataStruct_AtRed) == 0x000020, "Wrong size on FVertexDetectPhysicsSurfaceDataStruct_AtRed");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct_AtRed, PhysicalSurfaceAtRedChannel) == 0x000000, "Member 'FVertexDetectPhysicsSurfaceDataStruct_AtRed::PhysicalSurfaceAtRedChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct_AtRed, PhysicalSurfaceAsStringAtRedChannel) == 0x000008, "Member 'FVertexDetectPhysicsSurfaceDataStruct_AtRed::PhysicalSurfaceAsStringAtRedChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct_AtRed, PhysicalSurfaceValueAtRedChannel) == 0x000018, "Member 'FVertexDetectPhysicsSurfaceDataStruct_AtRed::PhysicalSurfaceValueAtRedChannel' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectPhysicsSurfaceDataStruct_AtGreen
// 0x0020 (0x0020 - 0x0000)
struct FVertexDetectPhysicsSurfaceDataStruct_AtGreen final
{
public:
	EPhysicalSurface                              PhysicalSurfaceAtGreenChannel;                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PhysicalSurfaceAsStringAtGreenChannel;             // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicalSurfaceValueAtGreenChannel;                // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVertexDetectPhysicsSurfaceDataStruct_AtGreen) == 0x000008, "Wrong alignment on FVertexDetectPhysicsSurfaceDataStruct_AtGreen");
static_assert(sizeof(FVertexDetectPhysicsSurfaceDataStruct_AtGreen) == 0x000020, "Wrong size on FVertexDetectPhysicsSurfaceDataStruct_AtGreen");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct_AtGreen, PhysicalSurfaceAtGreenChannel) == 0x000000, "Member 'FVertexDetectPhysicsSurfaceDataStruct_AtGreen::PhysicalSurfaceAtGreenChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct_AtGreen, PhysicalSurfaceAsStringAtGreenChannel) == 0x000008, "Member 'FVertexDetectPhysicsSurfaceDataStruct_AtGreen::PhysicalSurfaceAsStringAtGreenChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct_AtGreen, PhysicalSurfaceValueAtGreenChannel) == 0x000018, "Member 'FVertexDetectPhysicsSurfaceDataStruct_AtGreen::PhysicalSurfaceValueAtGreenChannel' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectPhysicsSurfaceDataStruct_AtBlue
// 0x0020 (0x0020 - 0x0000)
struct FVertexDetectPhysicsSurfaceDataStruct_AtBlue final
{
public:
	EPhysicalSurface                              PhysicalSurfaceAtBlueChannel;                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PhysicalSurfaceAsStringAtBlueChannel;              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicalSurfaceValueAtBlueChannel;                 // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVertexDetectPhysicsSurfaceDataStruct_AtBlue) == 0x000008, "Wrong alignment on FVertexDetectPhysicsSurfaceDataStruct_AtBlue");
static_assert(sizeof(FVertexDetectPhysicsSurfaceDataStruct_AtBlue) == 0x000020, "Wrong size on FVertexDetectPhysicsSurfaceDataStruct_AtBlue");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct_AtBlue, PhysicalSurfaceAtBlueChannel) == 0x000000, "Member 'FVertexDetectPhysicsSurfaceDataStruct_AtBlue::PhysicalSurfaceAtBlueChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct_AtBlue, PhysicalSurfaceAsStringAtBlueChannel) == 0x000008, "Member 'FVertexDetectPhysicsSurfaceDataStruct_AtBlue::PhysicalSurfaceAsStringAtBlueChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct_AtBlue, PhysicalSurfaceValueAtBlueChannel) == 0x000018, "Member 'FVertexDetectPhysicsSurfaceDataStruct_AtBlue::PhysicalSurfaceValueAtBlueChannel' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectPhysicsSurfaceDataStruct_AtAlpha
// 0x0020 (0x0020 - 0x0000)
struct FVertexDetectPhysicsSurfaceDataStruct_AtAlpha final
{
public:
	EPhysicalSurface                              PhysicalSurfaceAtAlphaChannel;                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PhysicalSurfaceAsStringAtAlphaChannel;             // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicalSurfaceValueAtAlphaChannel;                // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVertexDetectPhysicsSurfaceDataStruct_AtAlpha) == 0x000008, "Wrong alignment on FVertexDetectPhysicsSurfaceDataStruct_AtAlpha");
static_assert(sizeof(FVertexDetectPhysicsSurfaceDataStruct_AtAlpha) == 0x000020, "Wrong size on FVertexDetectPhysicsSurfaceDataStruct_AtAlpha");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct_AtAlpha, PhysicalSurfaceAtAlphaChannel) == 0x000000, "Member 'FVertexDetectPhysicsSurfaceDataStruct_AtAlpha::PhysicalSurfaceAtAlphaChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct_AtAlpha, PhysicalSurfaceAsStringAtAlphaChannel) == 0x000008, "Member 'FVertexDetectPhysicsSurfaceDataStruct_AtAlpha::PhysicalSurfaceAsStringAtAlphaChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct_AtAlpha, PhysicalSurfaceValueAtAlphaChannel) == 0x000018, "Member 'FVertexDetectPhysicsSurfaceDataStruct_AtAlpha::PhysicalSurfaceValueAtAlphaChannel' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectPhysicsSurfaceDataStruct
// 0x0108 (0x0108 - 0x0000)
struct FVertexDetectPhysicsSurfaceDataStruct final
{
public:
	bool                                          PhysicsSurfaceSuccessfullyAcquired;                // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectMostDominantPhysicsSurfaceInfo MostDominantPhysicsSurfaceInfo;                    // 0x0008(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FVertexDetectPhysicsSurfaceDataStruct_AtDefault PhysicsSurface_AtDefault;                          // 0x0038(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FVertexDetectPhysicsSurfaceDataStruct_AtRed PhysicsSurface_AtRed;                              // 0x0058(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FVertexDetectPhysicsSurfaceDataStruct_AtGreen PhysicsSurface_AtGreen;                            // 0x0078(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FVertexDetectPhysicsSurfaceDataStruct_AtBlue PhysicsSurface_AtBlue;                             // 0x0098(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FVertexDetectPhysicsSurfaceDataStruct_AtAlpha PhysicsSurface_AtAlpha;                            // 0x00B8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	TArray<EPhysicalSurface>                      PhysicalSurfacesAsArray;                           // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         SurfacesAsStringArray;                             // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<float>                                 SurfaceValuesArray;                                // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectPhysicsSurfaceDataStruct) == 0x000008, "Wrong alignment on FVertexDetectPhysicsSurfaceDataStruct");
static_assert(sizeof(FVertexDetectPhysicsSurfaceDataStruct) == 0x000108, "Wrong size on FVertexDetectPhysicsSurfaceDataStruct");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct, PhysicsSurfaceSuccessfullyAcquired) == 0x000000, "Member 'FVertexDetectPhysicsSurfaceDataStruct::PhysicsSurfaceSuccessfullyAcquired' has a wrong offset!");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct, MostDominantPhysicsSurfaceInfo) == 0x000008, "Member 'FVertexDetectPhysicsSurfaceDataStruct::MostDominantPhysicsSurfaceInfo' has a wrong offset!");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct, PhysicsSurface_AtDefault) == 0x000038, "Member 'FVertexDetectPhysicsSurfaceDataStruct::PhysicsSurface_AtDefault' has a wrong offset!");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct, PhysicsSurface_AtRed) == 0x000058, "Member 'FVertexDetectPhysicsSurfaceDataStruct::PhysicsSurface_AtRed' has a wrong offset!");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct, PhysicsSurface_AtGreen) == 0x000078, "Member 'FVertexDetectPhysicsSurfaceDataStruct::PhysicsSurface_AtGreen' has a wrong offset!");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct, PhysicsSurface_AtBlue) == 0x000098, "Member 'FVertexDetectPhysicsSurfaceDataStruct::PhysicsSurface_AtBlue' has a wrong offset!");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct, PhysicsSurface_AtAlpha) == 0x0000B8, "Member 'FVertexDetectPhysicsSurfaceDataStruct::PhysicsSurface_AtAlpha' has a wrong offset!");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct, PhysicalSurfacesAsArray) == 0x0000D8, "Member 'FVertexDetectPhysicsSurfaceDataStruct::PhysicalSurfacesAsArray' has a wrong offset!");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct, SurfacesAsStringArray) == 0x0000E8, "Member 'FVertexDetectPhysicsSurfaceDataStruct::SurfacesAsStringArray' has a wrong offset!");
static_assert(offsetof(FVertexDetectPhysicsSurfaceDataStruct, SurfaceValuesArray) == 0x0000F8, "Member 'FVertexDetectPhysicsSurfaceDataStruct::SurfaceValuesArray' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectClosestVertexDataResultStruct
// 0x0170 (0x0170 - 0x0000)
struct FVertexDetectClosestVertexDataResultStruct final
{
public:
	bool                                          ClosestVertexDataSuccessfullyAcquired;             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectClosestVertexGeneralInfoStruct ClosestVertexGeneralInfo;                          // 0x0008(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FVertexDetectPhysicsSurfaceDataStruct  ClosestVertexPhysicalSurfaceInfo;                  // 0x0068(0x0108)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectClosestVertexDataResultStruct) == 0x000008, "Wrong alignment on FVertexDetectClosestVertexDataResultStruct");
static_assert(sizeof(FVertexDetectClosestVertexDataResultStruct) == 0x000170, "Wrong size on FVertexDetectClosestVertexDataResultStruct");
static_assert(offsetof(FVertexDetectClosestVertexDataResultStruct, ClosestVertexDataSuccessfullyAcquired) == 0x000000, "Member 'FVertexDetectClosestVertexDataResultStruct::ClosestVertexDataSuccessfullyAcquired' has a wrong offset!");
static_assert(offsetof(FVertexDetectClosestVertexDataResultStruct, ClosestVertexGeneralInfo) == 0x000008, "Member 'FVertexDetectClosestVertexDataResultStruct::ClosestVertexGeneralInfo' has a wrong offset!");
static_assert(offsetof(FVertexDetectClosestVertexDataResultStruct, ClosestVertexPhysicalSurfaceInfo) == 0x000068, "Member 'FVertexDetectClosestVertexDataResultStruct::ClosestVertexPhysicalSurfaceInfo' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectSerializedColorsPerLODStruct
// 0x0018 (0x0018 - 0x0000)
struct FVertexDetectSerializedColorsPerLODStruct final
{
public:
	int32                                         Lod;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ColorsAtLODAsJSonString;                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectSerializedColorsPerLODStruct) == 0x000008, "Wrong alignment on FVertexDetectSerializedColorsPerLODStruct");
static_assert(sizeof(FVertexDetectSerializedColorsPerLODStruct) == 0x000018, "Wrong size on FVertexDetectSerializedColorsPerLODStruct");
static_assert(offsetof(FVertexDetectSerializedColorsPerLODStruct, Lod) == 0x000000, "Member 'FVertexDetectSerializedColorsPerLODStruct::Lod' has a wrong offset!");
static_assert(offsetof(FVertexDetectSerializedColorsPerLODStruct, ColorsAtLODAsJSonString) == 0x000008, "Member 'FVertexDetectSerializedColorsPerLODStruct::ColorsAtLODAsJSonString' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectMeshDataPerLODStruct
// 0x0050 (0x0050 - 0x0000)
struct FVertexDetectMeshDataPerLODStruct final
{
public:
	int32                                         Lod;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FColor>                         MeshVertexColorsPerLODArray;                       // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVertexDetectSerializedColorsPerLODStruct SerializedVertexColorsData;                        // 0x0018(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        MeshVertexPositionsInComponentSpacePerLODArray;    // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        MeshVertexNormalsPerLODArray;                      // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectMeshDataPerLODStruct) == 0x000008, "Wrong alignment on FVertexDetectMeshDataPerLODStruct");
static_assert(sizeof(FVertexDetectMeshDataPerLODStruct) == 0x000050, "Wrong size on FVertexDetectMeshDataPerLODStruct");
static_assert(offsetof(FVertexDetectMeshDataPerLODStruct, Lod) == 0x000000, "Member 'FVertexDetectMeshDataPerLODStruct::Lod' has a wrong offset!");
static_assert(offsetof(FVertexDetectMeshDataPerLODStruct, MeshVertexColorsPerLODArray) == 0x000008, "Member 'FVertexDetectMeshDataPerLODStruct::MeshVertexColorsPerLODArray' has a wrong offset!");
static_assert(offsetof(FVertexDetectMeshDataPerLODStruct, SerializedVertexColorsData) == 0x000018, "Member 'FVertexDetectMeshDataPerLODStruct::SerializedVertexColorsData' has a wrong offset!");
static_assert(offsetof(FVertexDetectMeshDataPerLODStruct, MeshVertexPositionsInComponentSpacePerLODArray) == 0x000030, "Member 'FVertexDetectMeshDataPerLODStruct::MeshVertexPositionsInComponentSpacePerLODArray' has a wrong offset!");
static_assert(offsetof(FVertexDetectMeshDataPerLODStruct, MeshVertexNormalsPerLODArray) == 0x000040, "Member 'FVertexDetectMeshDataPerLODStruct::MeshVertexNormalsPerLODArray' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectMeshDataStruct
// 0x0060 (0x0060 - 0x0000)
struct FVertexDetectMeshDataStruct final
{
public:
	TSoftObjectPtr<class UObject>                 MeshSource;                                        // 0x0000(0x0028)(Edit, BlueprintVisible, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPrimitiveComponent>     MeshComp;                                          // 0x0028(0x0028)(Edit, BlueprintVisible, ExportObject, EditConst, InstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVertexDetectMeshDataPerLODStruct> MeshDataPerLOD;                                    // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectMeshDataStruct) == 0x000008, "Wrong alignment on FVertexDetectMeshDataStruct");
static_assert(sizeof(FVertexDetectMeshDataStruct) == 0x000060, "Wrong size on FVertexDetectMeshDataStruct");
static_assert(offsetof(FVertexDetectMeshDataStruct, MeshSource) == 0x000000, "Member 'FVertexDetectMeshDataStruct::MeshSource' has a wrong offset!");
static_assert(offsetof(FVertexDetectMeshDataStruct, MeshComp) == 0x000028, "Member 'FVertexDetectMeshDataStruct::MeshComp' has a wrong offset!");
static_assert(offsetof(FVertexDetectMeshDataStruct, MeshDataPerLOD) == 0x000050, "Member 'FVertexDetectMeshDataStruct::MeshDataPerLOD' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectEstimatedColorAtHitLocationResultStruct
// 0x0130 (0x0130 - 0x0000)
struct FVertexDetectEstimatedColorAtHitLocationResultStruct final
{
public:
	bool                                          EstimatedColorAtHitLocationDataSuccessfullyAcquired; // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           EstimatedColorAtHitLocation;                       // 0x0004(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectPhysicsSurfaceDataStruct  PhysicalSurfaceInfo;                               // 0x0018(0x0108)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FVector                                WorldSpaceLocationWeEstimatedTheColorAt;           // 0x0120(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVertexDetectEstimatedColorAtHitLocationResultStruct) == 0x000008, "Wrong alignment on FVertexDetectEstimatedColorAtHitLocationResultStruct");
static_assert(sizeof(FVertexDetectEstimatedColorAtHitLocationResultStruct) == 0x000130, "Wrong size on FVertexDetectEstimatedColorAtHitLocationResultStruct");
static_assert(offsetof(FVertexDetectEstimatedColorAtHitLocationResultStruct, EstimatedColorAtHitLocationDataSuccessfullyAcquired) == 0x000000, "Member 'FVertexDetectEstimatedColorAtHitLocationResultStruct::EstimatedColorAtHitLocationDataSuccessfullyAcquired' has a wrong offset!");
static_assert(offsetof(FVertexDetectEstimatedColorAtHitLocationResultStruct, EstimatedColorAtHitLocation) == 0x000004, "Member 'FVertexDetectEstimatedColorAtHitLocationResultStruct::EstimatedColorAtHitLocation' has a wrong offset!");
static_assert(offsetof(FVertexDetectEstimatedColorAtHitLocationResultStruct, PhysicalSurfaceInfo) == 0x000018, "Member 'FVertexDetectEstimatedColorAtHitLocationResultStruct::PhysicalSurfaceInfo' has a wrong offset!");
static_assert(offsetof(FVertexDetectEstimatedColorAtHitLocationResultStruct, WorldSpaceLocationWeEstimatedTheColorAt) == 0x000120, "Member 'FVertexDetectEstimatedColorAtHitLocationResultStruct::WorldSpaceLocationWeEstimatedTheColorAt' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectAvarageColorInAreaInfo
// 0x0118 (0x0118 - 0x0000)
struct FVertexDetectAvarageColorInAreaInfo final
{
public:
	struct FLinearColor                           AvarageVertexColorsWithinAreaOfEffect;             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVertexDetectPhysicsSurfaceDataStruct  AvaragePhysicalSurfaceInfoBasedOffTheClosestVertexMaterial; // 0x0010(0x0108)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectAvarageColorInAreaInfo) == 0x000008, "Wrong alignment on FVertexDetectAvarageColorInAreaInfo");
static_assert(sizeof(FVertexDetectAvarageColorInAreaInfo) == 0x000118, "Wrong size on FVertexDetectAvarageColorInAreaInfo");
static_assert(offsetof(FVertexDetectAvarageColorInAreaInfo, AvarageVertexColorsWithinAreaOfEffect) == 0x000000, "Member 'FVertexDetectAvarageColorInAreaInfo::AvarageVertexColorsWithinAreaOfEffect' has a wrong offset!");
static_assert(offsetof(FVertexDetectAvarageColorInAreaInfo, AvaragePhysicalSurfaceInfoBasedOffTheClosestVertexMaterial) == 0x000010, "Member 'FVertexDetectAvarageColorInAreaInfo::AvaragePhysicalSurfaceInfoBasedOffTheClosestVertexMaterial' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectAmountOfPaintedColorsOfEachChannel
// 0x0034 (0x0034 - 0x0000)
struct FVertexDetectAmountOfPaintedColorsOfEachChannel final
{
public:
	bool                                          SuccessfullyGotVerticesOfEachChannelAtTheMinAmount; // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AmountOfVerticesWithAnyRedPaintedAtTheMinAmount;   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmountOfRedChannelPercentPaintedAtTheMinAmount;    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageAmountOfRedColorAtTheMinAmount;             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmountOfVerticesWithAnyGreenPaintedAtTheMinAmount; // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmountOfGreenChannelPercentPaintedAtTheMinAmount;  // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageAmountOfGreenColorAtTheMinAmount;           // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmountOfVerticesWithAnyBluePaintedAtTheMinAmount;  // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmountOfBlueChannelPercentPaintedAtTheMinAmount;   // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageAmountOfBlueColorAtTheMinAmount;            // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmountOfVerticesWithAnyAlphaPaintedAtTheMinAmount; // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmountOfAlphaChannelPercentPaintedAtTheMinAmount;  // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageAmountOfAlphaColorAtTheMinAmount;           // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectAmountOfPaintedColorsOfEachChannel) == 0x000004, "Wrong alignment on FVertexDetectAmountOfPaintedColorsOfEachChannel");
static_assert(sizeof(FVertexDetectAmountOfPaintedColorsOfEachChannel) == 0x000034, "Wrong size on FVertexDetectAmountOfPaintedColorsOfEachChannel");
static_assert(offsetof(FVertexDetectAmountOfPaintedColorsOfEachChannel, SuccessfullyGotVerticesOfEachChannelAtTheMinAmount) == 0x000000, "Member 'FVertexDetectAmountOfPaintedColorsOfEachChannel::SuccessfullyGotVerticesOfEachChannelAtTheMinAmount' has a wrong offset!");
static_assert(offsetof(FVertexDetectAmountOfPaintedColorsOfEachChannel, AmountOfVerticesWithAnyRedPaintedAtTheMinAmount) == 0x000004, "Member 'FVertexDetectAmountOfPaintedColorsOfEachChannel::AmountOfVerticesWithAnyRedPaintedAtTheMinAmount' has a wrong offset!");
static_assert(offsetof(FVertexDetectAmountOfPaintedColorsOfEachChannel, AmountOfRedChannelPercentPaintedAtTheMinAmount) == 0x000008, "Member 'FVertexDetectAmountOfPaintedColorsOfEachChannel::AmountOfRedChannelPercentPaintedAtTheMinAmount' has a wrong offset!");
static_assert(offsetof(FVertexDetectAmountOfPaintedColorsOfEachChannel, AverageAmountOfRedColorAtTheMinAmount) == 0x00000C, "Member 'FVertexDetectAmountOfPaintedColorsOfEachChannel::AverageAmountOfRedColorAtTheMinAmount' has a wrong offset!");
static_assert(offsetof(FVertexDetectAmountOfPaintedColorsOfEachChannel, AmountOfVerticesWithAnyGreenPaintedAtTheMinAmount) == 0x000010, "Member 'FVertexDetectAmountOfPaintedColorsOfEachChannel::AmountOfVerticesWithAnyGreenPaintedAtTheMinAmount' has a wrong offset!");
static_assert(offsetof(FVertexDetectAmountOfPaintedColorsOfEachChannel, AmountOfGreenChannelPercentPaintedAtTheMinAmount) == 0x000014, "Member 'FVertexDetectAmountOfPaintedColorsOfEachChannel::AmountOfGreenChannelPercentPaintedAtTheMinAmount' has a wrong offset!");
static_assert(offsetof(FVertexDetectAmountOfPaintedColorsOfEachChannel, AverageAmountOfGreenColorAtTheMinAmount) == 0x000018, "Member 'FVertexDetectAmountOfPaintedColorsOfEachChannel::AverageAmountOfGreenColorAtTheMinAmount' has a wrong offset!");
static_assert(offsetof(FVertexDetectAmountOfPaintedColorsOfEachChannel, AmountOfVerticesWithAnyBluePaintedAtTheMinAmount) == 0x00001C, "Member 'FVertexDetectAmountOfPaintedColorsOfEachChannel::AmountOfVerticesWithAnyBluePaintedAtTheMinAmount' has a wrong offset!");
static_assert(offsetof(FVertexDetectAmountOfPaintedColorsOfEachChannel, AmountOfBlueChannelPercentPaintedAtTheMinAmount) == 0x000020, "Member 'FVertexDetectAmountOfPaintedColorsOfEachChannel::AmountOfBlueChannelPercentPaintedAtTheMinAmount' has a wrong offset!");
static_assert(offsetof(FVertexDetectAmountOfPaintedColorsOfEachChannel, AverageAmountOfBlueColorAtTheMinAmount) == 0x000024, "Member 'FVertexDetectAmountOfPaintedColorsOfEachChannel::AverageAmountOfBlueColorAtTheMinAmount' has a wrong offset!");
static_assert(offsetof(FVertexDetectAmountOfPaintedColorsOfEachChannel, AmountOfVerticesWithAnyAlphaPaintedAtTheMinAmount) == 0x000028, "Member 'FVertexDetectAmountOfPaintedColorsOfEachChannel::AmountOfVerticesWithAnyAlphaPaintedAtTheMinAmount' has a wrong offset!");
static_assert(offsetof(FVertexDetectAmountOfPaintedColorsOfEachChannel, AmountOfAlphaChannelPercentPaintedAtTheMinAmount) == 0x00002C, "Member 'FVertexDetectAmountOfPaintedColorsOfEachChannel::AmountOfAlphaChannelPercentPaintedAtTheMinAmount' has a wrong offset!");
static_assert(offsetof(FVertexDetectAmountOfPaintedColorsOfEachChannel, AverageAmountOfAlphaColorAtTheMinAmount) == 0x000030, "Member 'FVertexDetectAmountOfPaintedColorsOfEachChannel::AverageAmountOfAlphaColorAtTheMinAmount' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectBoneColorsStruct
// 0x0010 (0x0010 - 0x0000)
struct FVertexDetectBoneColorsStruct final
{
public:
	TArray<struct FColor>                         boneVertexColors;                                  // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectBoneColorsStruct) == 0x000008, "Wrong alignment on FVertexDetectBoneColorsStruct");
static_assert(sizeof(FVertexDetectBoneColorsStruct) == 0x000010, "Wrong size on FVertexDetectBoneColorsStruct");
static_assert(offsetof(FVertexDetectBoneColorsStruct, boneVertexColors) == 0x000000, "Member 'FVertexDetectBoneColorsStruct::boneVertexColors' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectVertexColorsOnEachBone
// 0x0058 (0x0058 - 0x0000)
struct FVertexDetectVertexColorsOnEachBone final
{
public:
	bool                                          SuccessFullyGotColorsForEachBone;                  // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FVertexDetectBoneColorsStruct> NameAndColorOfEachBone;                            // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectVertexColorsOnEachBone) == 0x000008, "Wrong alignment on FVertexDetectVertexColorsOnEachBone");
static_assert(sizeof(FVertexDetectVertexColorsOnEachBone) == 0x000058, "Wrong size on FVertexDetectVertexColorsOnEachBone");
static_assert(offsetof(FVertexDetectVertexColorsOnEachBone, SuccessFullyGotColorsForEachBone) == 0x000000, "Member 'FVertexDetectVertexColorsOnEachBone::SuccessFullyGotColorsForEachBone' has a wrong offset!");
static_assert(offsetof(FVertexDetectVertexColorsOnEachBone, NameAndColorOfEachBone) == 0x000008, "Member 'FVertexDetectVertexColorsOnEachBone::NameAndColorOfEachBone' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectTaskResultInfo
// 0x000C (0x000C - 0x0000)
struct FVertexDetectTaskResultInfo final
{
public:
	bool                                          TaskSuccessfull;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TaskDuration;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AnyVertexColorGotChangedByPaintJob;                // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVertexDetectTaskResultInfo) == 0x000004, "Wrong alignment on FVertexDetectTaskResultInfo");
static_assert(sizeof(FVertexDetectTaskResultInfo) == 0x00000C, "Wrong size on FVertexDetectTaskResultInfo");
static_assert(offsetof(FVertexDetectTaskResultInfo, TaskSuccessfull) == 0x000000, "Member 'FVertexDetectTaskResultInfo::TaskSuccessfull' has a wrong offset!");
static_assert(offsetof(FVertexDetectTaskResultInfo, TaskDuration) == 0x000004, "Member 'FVertexDetectTaskResultInfo::TaskDuration' has a wrong offset!");
static_assert(offsetof(FVertexDetectTaskResultInfo, AnyVertexColorGotChangedByPaintJob) == 0x000008, "Member 'FVertexDetectTaskResultInfo::AnyVertexColorGotChangedByPaintJob' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectGetAverageColorStruct
// 0x0008 (0x0008 - 0x0000)
struct FVertexDetectGetAverageColorStruct final
{
public:
	float                                         AreaRangeToGetAvarageColorFrom;                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VertexNormalToHitNormal_MinimumDotProductToBeAccountedFor; // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectGetAverageColorStruct) == 0x000004, "Wrong alignment on FVertexDetectGetAverageColorStruct");
static_assert(sizeof(FVertexDetectGetAverageColorStruct) == 0x000008, "Wrong size on FVertexDetectGetAverageColorStruct");
static_assert(offsetof(FVertexDetectGetAverageColorStruct, AreaRangeToGetAvarageColorFrom) == 0x000000, "Member 'FVertexDetectGetAverageColorStruct::AreaRangeToGetAvarageColorFrom' has a wrong offset!");
static_assert(offsetof(FVertexDetectGetAverageColorStruct, VertexNormalToHitNormal_MinimumDotProductToBeAccountedFor) == 0x000004, "Member 'FVertexDetectGetAverageColorStruct::VertexNormalToHitNormal_MinimumDotProductToBeAccountedFor' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectAndPaintFundementalsStruct
// 0x0040 (0x0040 - 0x0000)
struct FVertexDetectAndPaintFundementalsStruct final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocationInComponentSpace;                       // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitBone;                                           // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionalFaceIndexForStaticMeshComponents;          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RunTaskFor;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectAndPaintFundementalsStruct) == 0x000008, "Wrong alignment on FVertexDetectAndPaintFundementalsStruct");
static_assert(sizeof(FVertexDetectAndPaintFundementalsStruct) == 0x000040, "Wrong size on FVertexDetectAndPaintFundementalsStruct");
static_assert(offsetof(FVertexDetectAndPaintFundementalsStruct, HitLocation) == 0x000000, "Member 'FVertexDetectAndPaintFundementalsStruct::HitLocation' has a wrong offset!");
static_assert(offsetof(FVertexDetectAndPaintFundementalsStruct, HitLocationInComponentSpace) == 0x00000C, "Member 'FVertexDetectAndPaintFundementalsStruct::HitLocationInComponentSpace' has a wrong offset!");
static_assert(offsetof(FVertexDetectAndPaintFundementalsStruct, HitNormal) == 0x000018, "Member 'FVertexDetectAndPaintFundementalsStruct::HitNormal' has a wrong offset!");
static_assert(offsetof(FVertexDetectAndPaintFundementalsStruct, HitBone) == 0x000024, "Member 'FVertexDetectAndPaintFundementalsStruct::HitBone' has a wrong offset!");
static_assert(offsetof(FVertexDetectAndPaintFundementalsStruct, OptionalFaceIndexForStaticMeshComponents) == 0x00002C, "Member 'FVertexDetectAndPaintFundementalsStruct::OptionalFaceIndexForStaticMeshComponents' has a wrong offset!");
static_assert(offsetof(FVertexDetectAndPaintFundementalsStruct, RunTaskFor) == 0x000030, "Member 'FVertexDetectAndPaintFundementalsStruct::RunTaskFor' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectEstimatedColorAtHitLocationStruct
// 0x0008 (0x0008 - 0x0000)
struct FVertexDetectEstimatedColorAtHitLocationStruct final
{
public:
	bool                                          GetEstimatedColorAtHitLocation;                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyGetIfMeshHasMaxAmountOfVertices;               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxAmountOfVertices;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectEstimatedColorAtHitLocationStruct) == 0x000004, "Wrong alignment on FVertexDetectEstimatedColorAtHitLocationStruct");
static_assert(sizeof(FVertexDetectEstimatedColorAtHitLocationStruct) == 0x000008, "Wrong size on FVertexDetectEstimatedColorAtHitLocationStruct");
static_assert(offsetof(FVertexDetectEstimatedColorAtHitLocationStruct, GetEstimatedColorAtHitLocation) == 0x000000, "Member 'FVertexDetectEstimatedColorAtHitLocationStruct::GetEstimatedColorAtHitLocation' has a wrong offset!");
static_assert(offsetof(FVertexDetectEstimatedColorAtHitLocationStruct, OnlyGetIfMeshHasMaxAmountOfVertices) == 0x000001, "Member 'FVertexDetectEstimatedColorAtHitLocationStruct::OnlyGetIfMeshHasMaxAmountOfVertices' has a wrong offset!");
static_assert(offsetof(FVertexDetectEstimatedColorAtHitLocationStruct, MaxAmountOfVertices) == 0x000004, "Member 'FVertexDetectEstimatedColorAtHitLocationStruct::MaxAmountOfVertices' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectInfoStruct
// 0x0050 (0x0078 - 0x0028)
struct FVertexDetectInfoStruct final : public FVertexDetectFundementalStruct
{
public:
	struct FVertexDetectGetAverageColorStruct     GetAverageColorInAreaSettings;                     // 0x0028(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVertexDetectAndPaintFundementalsStruct HitFundementals;                                   // 0x0030(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVertexDetectEstimatedColorAtHitLocationStruct GetEstimatedColorAtHitLocationSettings;            // 0x0070(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectInfoStruct) == 0x000008, "Wrong alignment on FVertexDetectInfoStruct");
static_assert(sizeof(FVertexDetectInfoStruct) == 0x000078, "Wrong size on FVertexDetectInfoStruct");
static_assert(offsetof(FVertexDetectInfoStruct, GetAverageColorInAreaSettings) == 0x000028, "Member 'FVertexDetectInfoStruct::GetAverageColorInAreaSettings' has a wrong offset!");
static_assert(offsetof(FVertexDetectInfoStruct, HitFundementals) == 0x000030, "Member 'FVertexDetectInfoStruct::HitFundementals' has a wrong offset!");
static_assert(offsetof(FVertexDetectInfoStruct, GetEstimatedColorAtHitLocationSettings) == 0x000070, "Member 'FVertexDetectInfoStruct::GetEstimatedColorAtHitLocationSettings' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectGetColorsOnlyStruct
// 0x0000 (0x0028 - 0x0028)
struct FVertexDetectGetColorsOnlyStruct final : public FVertexDetectFundementalStruct
{
};
static_assert(alignof(FVertexDetectGetColorsOnlyStruct) == 0x000008, "Wrong alignment on FVertexDetectGetColorsOnlyStruct");
static_assert(sizeof(FVertexDetectGetColorsOnlyStruct) == 0x000028, "Wrong size on FVertexDetectGetColorsOnlyStruct");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectPaintAtLocationAreaSettings
// 0x0014 (0x0014 - 0x0000)
struct FVertexDetectPaintAtLocationAreaSettings final
{
public:
	float                                         AreaOfEffect;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AreaOfEffectWithFullColor;                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallOffStrength;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VertexNormalToHitNormal_MinimumDotProductToGetPainted_StaticMesh; // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VertexNormalToHitNormal_MinimumDotProductToGetPainted_SkeletalMesh; // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectPaintAtLocationAreaSettings) == 0x000004, "Wrong alignment on FVertexDetectPaintAtLocationAreaSettings");
static_assert(sizeof(FVertexDetectPaintAtLocationAreaSettings) == 0x000014, "Wrong size on FVertexDetectPaintAtLocationAreaSettings");
static_assert(offsetof(FVertexDetectPaintAtLocationAreaSettings, AreaOfEffect) == 0x000000, "Member 'FVertexDetectPaintAtLocationAreaSettings::AreaOfEffect' has a wrong offset!");
static_assert(offsetof(FVertexDetectPaintAtLocationAreaSettings, AreaOfEffectWithFullColor) == 0x000004, "Member 'FVertexDetectPaintAtLocationAreaSettings::AreaOfEffectWithFullColor' has a wrong offset!");
static_assert(offsetof(FVertexDetectPaintAtLocationAreaSettings, FallOffStrength) == 0x000008, "Member 'FVertexDetectPaintAtLocationAreaSettings::FallOffStrength' has a wrong offset!");
static_assert(offsetof(FVertexDetectPaintAtLocationAreaSettings, VertexNormalToHitNormal_MinimumDotProductToGetPainted_StaticMesh) == 0x00000C, "Member 'FVertexDetectPaintAtLocationAreaSettings::VertexNormalToHitNormal_MinimumDotProductToGetPainted_StaticMesh' has a wrong offset!");
static_assert(offsetof(FVertexDetectPaintAtLocationAreaSettings, VertexNormalToHitNormal_MinimumDotProductToGetPainted_SkeletalMesh) == 0x000010, "Member 'FVertexDetectPaintAtLocationAreaSettings::VertexNormalToHitNormal_MinimumDotProductToGetPainted_SkeletalMesh' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectWhenPaintingSettings
// 0x0050 (0x0050 - 0x0000)
struct FVertexDetectWhenPaintingSettings final
{
public:
	bool                                          RunGetClosestVertexDataOnMeshBeforeApplyingPaint;  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RunGetClosestVertexDataOnMeshAfterApplyingPaint;   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectGetAverageColorStruct     GetAverageColorInAreaSettings;                     // 0x0004(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          UseCustomHitFundementalsForDetection;              // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectAndPaintFundementalsStruct DetectHitFundementals;                             // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectWhenPaintingSettings) == 0x000008, "Wrong alignment on FVertexDetectWhenPaintingSettings");
static_assert(sizeof(FVertexDetectWhenPaintingSettings) == 0x000050, "Wrong size on FVertexDetectWhenPaintingSettings");
static_assert(offsetof(FVertexDetectWhenPaintingSettings, RunGetClosestVertexDataOnMeshBeforeApplyingPaint) == 0x000000, "Member 'FVertexDetectWhenPaintingSettings::RunGetClosestVertexDataOnMeshBeforeApplyingPaint' has a wrong offset!");
static_assert(offsetof(FVertexDetectWhenPaintingSettings, RunGetClosestVertexDataOnMeshAfterApplyingPaint) == 0x000001, "Member 'FVertexDetectWhenPaintingSettings::RunGetClosestVertexDataOnMeshAfterApplyingPaint' has a wrong offset!");
static_assert(offsetof(FVertexDetectWhenPaintingSettings, GetAverageColorInAreaSettings) == 0x000004, "Member 'FVertexDetectWhenPaintingSettings::GetAverageColorInAreaSettings' has a wrong offset!");
static_assert(offsetof(FVertexDetectWhenPaintingSettings, UseCustomHitFundementalsForDetection) == 0x00000C, "Member 'FVertexDetectWhenPaintingSettings::UseCustomHitFundementalsForDetection' has a wrong offset!");
static_assert(offsetof(FVertexDetectWhenPaintingSettings, DetectHitFundementals) == 0x000010, "Member 'FVertexDetectWhenPaintingSettings::DetectHitFundementals' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectPaintColorCondition_IsWithinColorRangeStruct
// 0x000C (0x000C - 0x0000)
struct FVertexDetectPaintColorCondition_IsWithinColorRangeStruct final
{
public:
	Enum_SurfaceAtChannel                         IfVertexColorChannelWithinColorRange;              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IfCurrentVertexColorValueIsHigherOrEqualThan;      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IfCurrentVertexColorValueIsLessOrEqualThan;        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectPaintColorCondition_IsWithinColorRangeStruct) == 0x000004, "Wrong alignment on FVertexDetectPaintColorCondition_IsWithinColorRangeStruct");
static_assert(sizeof(FVertexDetectPaintColorCondition_IsWithinColorRangeStruct) == 0x00000C, "Wrong size on FVertexDetectPaintColorCondition_IsWithinColorRangeStruct");
static_assert(offsetof(FVertexDetectPaintColorCondition_IsWithinColorRangeStruct, IfVertexColorChannelWithinColorRange) == 0x000000, "Member 'FVertexDetectPaintColorCondition_IsWithinColorRangeStruct::IfVertexColorChannelWithinColorRange' has a wrong offset!");
static_assert(offsetof(FVertexDetectPaintColorCondition_IsWithinColorRangeStruct, IfCurrentVertexColorValueIsHigherOrEqualThan) == 0x000004, "Member 'FVertexDetectPaintColorCondition_IsWithinColorRangeStruct::IfCurrentVertexColorValueIsHigherOrEqualThan' has a wrong offset!");
static_assert(offsetof(FVertexDetectPaintColorCondition_IsWithinColorRangeStruct, IfCurrentVertexColorValueIsLessOrEqualThan) == 0x000008, "Member 'FVertexDetectPaintColorCondition_IsWithinColorRangeStruct::IfCurrentVertexColorValueIsLessOrEqualThan' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectPaintColorCondition_HasLineOfSightStruct
// 0x0060 (0x0060 - 0x0000)
struct FVertexDetectPaintColorCondition_HasLineOfSightStruct final
{
public:
	TSoftObjectPtr<class AActor>                  IfVertexHasLineOfSightToActor;                     // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                IfVertexHasLineOfSightToPosition;                  // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFromVertexPositionToStartTrace;            // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      CheckLineOfSightAgainstObjectTypes;                // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IgnoreMeshActorTryingToApplyPaintOn;               // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         LineOfSightTraceActorsToIgnore;                    // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectPaintColorCondition_HasLineOfSightStruct) == 0x000008, "Wrong alignment on FVertexDetectPaintColorCondition_HasLineOfSightStruct");
static_assert(sizeof(FVertexDetectPaintColorCondition_HasLineOfSightStruct) == 0x000060, "Wrong size on FVertexDetectPaintColorCondition_HasLineOfSightStruct");
static_assert(offsetof(FVertexDetectPaintColorCondition_HasLineOfSightStruct, IfVertexHasLineOfSightToActor) == 0x000000, "Member 'FVertexDetectPaintColorCondition_HasLineOfSightStruct::IfVertexHasLineOfSightToActor' has a wrong offset!");
static_assert(offsetof(FVertexDetectPaintColorCondition_HasLineOfSightStruct, IfVertexHasLineOfSightToPosition) == 0x000028, "Member 'FVertexDetectPaintColorCondition_HasLineOfSightStruct::IfVertexHasLineOfSightToPosition' has a wrong offset!");
static_assert(offsetof(FVertexDetectPaintColorCondition_HasLineOfSightStruct, DistanceFromVertexPositionToStartTrace) == 0x000034, "Member 'FVertexDetectPaintColorCondition_HasLineOfSightStruct::DistanceFromVertexPositionToStartTrace' has a wrong offset!");
static_assert(offsetof(FVertexDetectPaintColorCondition_HasLineOfSightStruct, CheckLineOfSightAgainstObjectTypes) == 0x000038, "Member 'FVertexDetectPaintColorCondition_HasLineOfSightStruct::CheckLineOfSightAgainstObjectTypes' has a wrong offset!");
static_assert(offsetof(FVertexDetectPaintColorCondition_HasLineOfSightStruct, IgnoreMeshActorTryingToApplyPaintOn) == 0x000048, "Member 'FVertexDetectPaintColorCondition_HasLineOfSightStruct::IgnoreMeshActorTryingToApplyPaintOn' has a wrong offset!");
static_assert(offsetof(FVertexDetectPaintColorCondition_HasLineOfSightStruct, LineOfSightTraceActorsToIgnore) == 0x000050, "Member 'FVertexDetectPaintColorCondition_HasLineOfSightStruct::LineOfSightTraceActorsToIgnore' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectPaintColorCondition_IsBoneStruct
// 0x0008 (0x0008 - 0x0000)
struct FVertexDetectPaintColorCondition_IsBoneStruct final
{
public:
	class FName                                   IfVertexIsAtBone;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectPaintColorCondition_IsBoneStruct) == 0x000004, "Wrong alignment on FVertexDetectPaintColorCondition_IsBoneStruct");
static_assert(sizeof(FVertexDetectPaintColorCondition_IsBoneStruct) == 0x000008, "Wrong size on FVertexDetectPaintColorCondition_IsBoneStruct");
static_assert(offsetof(FVertexDetectPaintColorCondition_IsBoneStruct, IfVertexIsAtBone) == 0x000000, "Member 'FVertexDetectPaintColorCondition_IsBoneStruct::IfVertexIsAtBone' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectPaintColorConditionStruct
// 0x0038 (0x0038 - 0x0000)
struct FVertexDetectPaintColorConditionStruct final
{
public:
	TArray<struct FVertexDetectPaintColorCondition_IsWithinColorRangeStruct> IfVertexColorIsWithinRange;                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVertexDetectPaintColorCondition_HasLineOfSightStruct> IfVertexHasLineOfSightTo;                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVertexDetectPaintColorCondition_IsBoneStruct> IfVertexIsOnBone;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ApplyColorStrengthIfConditionIsNotMet;             // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ColorStrengthIfConditionIsNotMet;                  // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectPaintColorConditionStruct) == 0x000008, "Wrong alignment on FVertexDetectPaintColorConditionStruct");
static_assert(sizeof(FVertexDetectPaintColorConditionStruct) == 0x000038, "Wrong size on FVertexDetectPaintColorConditionStruct");
static_assert(offsetof(FVertexDetectPaintColorConditionStruct, IfVertexColorIsWithinRange) == 0x000000, "Member 'FVertexDetectPaintColorConditionStruct::IfVertexColorIsWithinRange' has a wrong offset!");
static_assert(offsetof(FVertexDetectPaintColorConditionStruct, IfVertexHasLineOfSightTo) == 0x000010, "Member 'FVertexDetectPaintColorConditionStruct::IfVertexHasLineOfSightTo' has a wrong offset!");
static_assert(offsetof(FVertexDetectPaintColorConditionStruct, IfVertexIsOnBone) == 0x000020, "Member 'FVertexDetectPaintColorConditionStruct::IfVertexIsOnBone' has a wrong offset!");
static_assert(offsetof(FVertexDetectPaintColorConditionStruct, ApplyColorStrengthIfConditionIsNotMet) == 0x000030, "Member 'FVertexDetectPaintColorConditionStruct::ApplyColorStrengthIfConditionIsNotMet' has a wrong offset!");
static_assert(offsetof(FVertexDetectPaintColorConditionStruct, ColorStrengthIfConditionIsNotMet) == 0x000034, "Member 'FVertexDetectPaintColorConditionStruct::ColorStrengthIfConditionIsNotMet' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectRGBAStruct
// 0x0100 (0x0100 - 0x0000)
struct FVertexDetectRGBAStruct final
{
public:
	EApplyVertexColorSetting                      ApplyVertexColorSetting;                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RedColor;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVertexDetectPaintColorConditionStruct RedColorCondition;                                 // 0x0008(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         GreenColor;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectPaintColorConditionStruct GreenColorCondition;                               // 0x0048(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         blueColor;                                         // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectPaintColorConditionStruct blueColorCondition;                                // 0x0088(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         AlphaColor;                                        // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectPaintColorConditionStruct AlphaColorCondition;                               // 0x00C8(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectRGBAStruct) == 0x000008, "Wrong alignment on FVertexDetectRGBAStruct");
static_assert(sizeof(FVertexDetectRGBAStruct) == 0x000100, "Wrong size on FVertexDetectRGBAStruct");
static_assert(offsetof(FVertexDetectRGBAStruct, ApplyVertexColorSetting) == 0x000000, "Member 'FVertexDetectRGBAStruct::ApplyVertexColorSetting' has a wrong offset!");
static_assert(offsetof(FVertexDetectRGBAStruct, RedColor) == 0x000004, "Member 'FVertexDetectRGBAStruct::RedColor' has a wrong offset!");
static_assert(offsetof(FVertexDetectRGBAStruct, RedColorCondition) == 0x000008, "Member 'FVertexDetectRGBAStruct::RedColorCondition' has a wrong offset!");
static_assert(offsetof(FVertexDetectRGBAStruct, GreenColor) == 0x000040, "Member 'FVertexDetectRGBAStruct::GreenColor' has a wrong offset!");
static_assert(offsetof(FVertexDetectRGBAStruct, GreenColorCondition) == 0x000048, "Member 'FVertexDetectRGBAStruct::GreenColorCondition' has a wrong offset!");
static_assert(offsetof(FVertexDetectRGBAStruct, blueColor) == 0x000080, "Member 'FVertexDetectRGBAStruct::blueColor' has a wrong offset!");
static_assert(offsetof(FVertexDetectRGBAStruct, blueColorCondition) == 0x000088, "Member 'FVertexDetectRGBAStruct::blueColorCondition' has a wrong offset!");
static_assert(offsetof(FVertexDetectRGBAStruct, AlphaColor) == 0x0000C0, "Member 'FVertexDetectRGBAStruct::AlphaColor' has a wrong offset!");
static_assert(offsetof(FVertexDetectRGBAStruct, AlphaColorCondition) == 0x0000C8, "Member 'FVertexDetectRGBAStruct::AlphaColorCondition' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexPaintingLimitStruct
// 0x0014 (0x0014 - 0x0000)
struct FVertexPaintingLimitStruct final
{
public:
	bool                                          UsePaintLimits;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LimitColorIfTheColorWasAlreadyOverTheLimit;        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PaintLimitOnRedChannel;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaintLimitOnGreenChannel;                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaintLimitOnBlueChannel;                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PaintLimitOnAlphaChannel;                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexPaintingLimitStruct) == 0x000004, "Wrong alignment on FVertexPaintingLimitStruct");
static_assert(sizeof(FVertexPaintingLimitStruct) == 0x000014, "Wrong size on FVertexPaintingLimitStruct");
static_assert(offsetof(FVertexPaintingLimitStruct, UsePaintLimits) == 0x000000, "Member 'FVertexPaintingLimitStruct::UsePaintLimits' has a wrong offset!");
static_assert(offsetof(FVertexPaintingLimitStruct, LimitColorIfTheColorWasAlreadyOverTheLimit) == 0x000001, "Member 'FVertexPaintingLimitStruct::LimitColorIfTheColorWasAlreadyOverTheLimit' has a wrong offset!");
static_assert(offsetof(FVertexPaintingLimitStruct, PaintLimitOnRedChannel) == 0x000004, "Member 'FVertexPaintingLimitStruct::PaintLimitOnRedChannel' has a wrong offset!");
static_assert(offsetof(FVertexPaintingLimitStruct, PaintLimitOnGreenChannel) == 0x000008, "Member 'FVertexPaintingLimitStruct::PaintLimitOnGreenChannel' has a wrong offset!");
static_assert(offsetof(FVertexPaintingLimitStruct, PaintLimitOnBlueChannel) == 0x00000C, "Member 'FVertexPaintingLimitStruct::PaintLimitOnBlueChannel' has a wrong offset!");
static_assert(offsetof(FVertexPaintingLimitStruct, PaintLimitOnAlphaChannel) == 0x000010, "Member 'FVertexPaintingLimitStruct::PaintLimitOnAlphaChannel' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexPaintLimitPaintToSpecifiedNormal
// 0x0014 (0x0014 - 0x0000)
struct FVertexPaintLimitPaintToSpecifiedNormal final
{
public:
	bool                                          LimitPaintingToSpecifiedWorldNormal;               // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldNormal;                                       // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErrorTolerance;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexPaintLimitPaintToSpecifiedNormal) == 0x000004, "Wrong alignment on FVertexPaintLimitPaintToSpecifiedNormal");
static_assert(sizeof(FVertexPaintLimitPaintToSpecifiedNormal) == 0x000014, "Wrong size on FVertexPaintLimitPaintToSpecifiedNormal");
static_assert(offsetof(FVertexPaintLimitPaintToSpecifiedNormal, LimitPaintingToSpecifiedWorldNormal) == 0x000000, "Member 'FVertexPaintLimitPaintToSpecifiedNormal::LimitPaintingToSpecifiedWorldNormal' has a wrong offset!");
static_assert(offsetof(FVertexPaintLimitPaintToSpecifiedNormal, WorldNormal) == 0x000004, "Member 'FVertexPaintLimitPaintToSpecifiedNormal::WorldNormal' has a wrong offset!");
static_assert(offsetof(FVertexPaintLimitPaintToSpecifiedNormal, ErrorTolerance) == 0x000010, "Member 'FVertexPaintLimitPaintToSpecifiedNormal::ErrorTolerance' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexPaintColorSettingStruct
// 0x0128 (0x0160 - 0x0038)
struct FVertexPaintColorSettingStruct : public FVertexPaintStruct
{
public:
	struct FVertexDetectRGBAStruct                ApplyVertexColorSettings;                          // 0x0038(0x0100)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVertexPaintingLimitStruct             LimitPaintColor;                                   // 0x0138(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVertexPaintLimitPaintToSpecifiedNormal LimitPaintToSpecifiedNormal;                       // 0x014C(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexPaintColorSettingStruct) == 0x000008, "Wrong alignment on FVertexPaintColorSettingStruct");
static_assert(sizeof(FVertexPaintColorSettingStruct) == 0x000160, "Wrong size on FVertexPaintColorSettingStruct");
static_assert(offsetof(FVertexPaintColorSettingStruct, ApplyVertexColorSettings) == 0x000038, "Member 'FVertexPaintColorSettingStruct::ApplyVertexColorSettings' has a wrong offset!");
static_assert(offsetof(FVertexPaintColorSettingStruct, LimitPaintColor) == 0x000138, "Member 'FVertexPaintColorSettingStruct::LimitPaintColor' has a wrong offset!");
static_assert(offsetof(FVertexPaintColorSettingStruct, LimitPaintToSpecifiedNormal) == 0x00014C, "Member 'FVertexPaintColorSettingStruct::LimitPaintToSpecifiedNormal' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexPaintAtLocationStruct
// 0x00B0 (0x0210 - 0x0160)
struct FVertexPaintAtLocationStruct final : public FVertexPaintColorSettingStruct
{
public:
	struct FVertexDetectAndPaintFundementalsStruct HitFundementals;                                   // 0x0160(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVertexDetectPaintAtLocationAreaSettings PaintAtAreaSettings;                               // 0x01A0(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVertexDetectEstimatedColorAtHitLocationStruct GetEstimatedColorAtHitLocationSettings;            // 0x01B4(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectWhenPaintingSettings      Detection;                                         // 0x01C0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexPaintAtLocationStruct) == 0x000008, "Wrong alignment on FVertexPaintAtLocationStruct");
static_assert(sizeof(FVertexPaintAtLocationStruct) == 0x000210, "Wrong size on FVertexPaintAtLocationStruct");
static_assert(offsetof(FVertexPaintAtLocationStruct, HitFundementals) == 0x000160, "Member 'FVertexPaintAtLocationStruct::HitFundementals' has a wrong offset!");
static_assert(offsetof(FVertexPaintAtLocationStruct, PaintAtAreaSettings) == 0x0001A0, "Member 'FVertexPaintAtLocationStruct::PaintAtAreaSettings' has a wrong offset!");
static_assert(offsetof(FVertexPaintAtLocationStruct, GetEstimatedColorAtHitLocationSettings) == 0x0001B4, "Member 'FVertexPaintAtLocationStruct::GetEstimatedColorAtHitLocationSettings' has a wrong offset!");
static_assert(offsetof(FVertexPaintAtLocationStruct, Detection) == 0x0001C0, "Member 'FVertexPaintAtLocationStruct::Detection' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexPainthWithinArea_ComponentToCheckIfIsWithinInfo
// 0x0110 (0x0110 - 0x0000)
struct alignas(0x10) FVertexPainthWithinArea_ComponentToCheckIfIsWithinInfo final
{
public:
	class UPrimitiveComponent*                    ComponentToCheckIfIsWithin;                        // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Enum_PaintWithinAreaShape                     PaintWithinAreaShape;                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x107];                                      // 0x0009(0x0107)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVertexPainthWithinArea_ComponentToCheckIfIsWithinInfo) == 0x000010, "Wrong alignment on FVertexPainthWithinArea_ComponentToCheckIfIsWithinInfo");
static_assert(sizeof(FVertexPainthWithinArea_ComponentToCheckIfIsWithinInfo) == 0x000110, "Wrong size on FVertexPainthWithinArea_ComponentToCheckIfIsWithinInfo");
static_assert(offsetof(FVertexPainthWithinArea_ComponentToCheckIfIsWithinInfo, ComponentToCheckIfIsWithin) == 0x000000, "Member 'FVertexPainthWithinArea_ComponentToCheckIfIsWithinInfo::ComponentToCheckIfIsWithin' has a wrong offset!");
static_assert(offsetof(FVertexPainthWithinArea_ComponentToCheckIfIsWithinInfo, PaintWithinAreaShape) == 0x000008, "Member 'FVertexPainthWithinArea_ComponentToCheckIfIsWithinInfo::PaintWithinAreaShape' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexPainthWithinAreaStruct
// 0x0020 (0x0180 - 0x0160)
struct FVertexPainthWithinAreaStruct final : public FVertexPaintColorSettingStruct
{
public:
	TArray<struct FVertexPainthWithinArea_ComponentToCheckIfIsWithinInfo> ComponentsToCheckIfIsWithin;                       // 0x0160(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         ExtraExtentToApplyPaintOn;                         // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AreaOfEffectWithFullColor;                         // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallOffStrength;                                   // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVertexPaintFallOffType                       FalloffType;                                       // 0x017C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17D[0x3];                                      // 0x017D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVertexPainthWithinAreaStruct) == 0x000008, "Wrong alignment on FVertexPainthWithinAreaStruct");
static_assert(sizeof(FVertexPainthWithinAreaStruct) == 0x000180, "Wrong size on FVertexPainthWithinAreaStruct");
static_assert(offsetof(FVertexPainthWithinAreaStruct, ComponentsToCheckIfIsWithin) == 0x000160, "Member 'FVertexPainthWithinAreaStruct::ComponentsToCheckIfIsWithin' has a wrong offset!");
static_assert(offsetof(FVertexPainthWithinAreaStruct, ExtraExtentToApplyPaintOn) == 0x000170, "Member 'FVertexPainthWithinAreaStruct::ExtraExtentToApplyPaintOn' has a wrong offset!");
static_assert(offsetof(FVertexPainthWithinAreaStruct, AreaOfEffectWithFullColor) == 0x000174, "Member 'FVertexPainthWithinAreaStruct::AreaOfEffectWithFullColor' has a wrong offset!");
static_assert(offsetof(FVertexPainthWithinAreaStruct, FallOffStrength) == 0x000178, "Member 'FVertexPainthWithinAreaStruct::FallOffStrength' has a wrong offset!");
static_assert(offsetof(FVertexPainthWithinAreaStruct, FalloffType) == 0x00017C, "Member 'FVertexPainthWithinAreaStruct::FalloffType' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectPaintOnEntireMeshRandomizeSettingsStruct
// 0x000C (0x000C - 0x0000)
struct FVertexDetectPaintOnEntireMeshRandomizeSettingsStruct final
{
public:
	bool                                          PaintAtRandomVerticesSpreadOutOverTheEntireMesh;   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PaintAtRandomVerticesSpreadOutOverTheEntireMesh_PercentToPaint; // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	Enum_PaintEntireMeshAtRandomVertices_PropogateToLODsMethod PaintAtRandomVerticesSpreadOutOverTheEntireMesh_PropogateLOD0ToAllLODsMethod; // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVertexDetectPaintOnEntireMeshRandomizeSettingsStruct) == 0x000004, "Wrong alignment on FVertexDetectPaintOnEntireMeshRandomizeSettingsStruct");
static_assert(sizeof(FVertexDetectPaintOnEntireMeshRandomizeSettingsStruct) == 0x00000C, "Wrong size on FVertexDetectPaintOnEntireMeshRandomizeSettingsStruct");
static_assert(offsetof(FVertexDetectPaintOnEntireMeshRandomizeSettingsStruct, PaintAtRandomVerticesSpreadOutOverTheEntireMesh) == 0x000000, "Member 'FVertexDetectPaintOnEntireMeshRandomizeSettingsStruct::PaintAtRandomVerticesSpreadOutOverTheEntireMesh' has a wrong offset!");
static_assert(offsetof(FVertexDetectPaintOnEntireMeshRandomizeSettingsStruct, PaintAtRandomVerticesSpreadOutOverTheEntireMesh_PercentToPaint) == 0x000004, "Member 'FVertexDetectPaintOnEntireMeshRandomizeSettingsStruct::PaintAtRandomVerticesSpreadOutOverTheEntireMesh_PercentToPaint' has a wrong offset!");
static_assert(offsetof(FVertexDetectPaintOnEntireMeshRandomizeSettingsStruct, PaintAtRandomVerticesSpreadOutOverTheEntireMesh_PropogateLOD0ToAllLODsMethod) == 0x000008, "Member 'FVertexDetectPaintOnEntireMeshRandomizeSettingsStruct::PaintAtRandomVerticesSpreadOutOverTheEntireMesh_PropogateLOD0ToAllLODsMethod' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexPaintOnEntireMeshStruct
// 0x0010 (0x0170 - 0x0160)
struct FVertexPaintOnEntireMeshStruct final : public FVertexPaintColorSettingStruct
{
public:
	struct FVertexDetectPaintOnEntireMeshRandomizeSettingsStruct PaintOnRandomVerticesSettings;                     // 0x0160(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVertexPaintOnEntireMeshStruct) == 0x000008, "Wrong alignment on FVertexPaintOnEntireMeshStruct");
static_assert(sizeof(FVertexPaintOnEntireMeshStruct) == 0x000170, "Wrong size on FVertexPaintOnEntireMeshStruct");
static_assert(offsetof(FVertexPaintOnEntireMeshStruct, PaintOnRandomVerticesSettings) == 0x000160, "Member 'FVertexPaintOnEntireMeshStruct::PaintOnRandomVerticesSettings' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectAdditionalDataToPassThrough
// 0x0BD0 (0x0BD0 - 0x0000)
struct FVertexDetectAdditionalDataToPassThrough final
{
public:
	class AActor*                                 PassThrough_Actor;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    PassThrough_PrimitiveComponent;                    // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PassThrough_Bool1;                                 // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PassThrough_Bool2;                                 // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PassThrough_Byte1;                                 // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PassThrough_Byte2;                                 // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PassThrough_Float1;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PassThrough_Float2;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassThrough_Int1;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PassThrough_Int2;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PassThrough_Vector1;                               // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PassThrough_Vector2;                               // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PassThrough_Vector3;                               // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PassThrough_Vector4;                               // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               PassThrough_Rotator1;                              // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               PassThrough_Rotator2;                              // 0x0060(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PassThrough_Transform;                             // 0x0070(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 PassThrough_String1;                               // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PassThrough_String2;                               // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PassThrough_Name;                                  // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PassThrough_PhysicsSurface1;                       // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PassThrough_PhysicsSurface2;                       // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      PassThrough_PhysicalMaterial1;                     // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             PassThrough_ObjectCollisionChannel;                // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectTypeQuery                              PassThrough_ObjectType;                            // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectMeshDataStruct            PassThrough_MeshVertexData;                        // 0x00E0(0x0060)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexDetectClosestVertexDataResultStruct PassThrough_ClosestVertexInfo;                     // 0x0140(0x0170)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVertexDetectEstimatedColorAtHitLocationResultStruct PassThrough_EstimatedColorAtHitLocationInfo;       // 0x02B0(0x0130)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVertexDetectAvarageColorInAreaInfo    PassThrough_AvarageColorInAreaInfo;                // 0x03E0(0x0118)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVertexDetectAmountOfPaintedColorsOfEachChannel PassThrough_AmountOfPaintedColorsOfEachChannel;    // 0x04F8(0x0034)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_52C[0x4];                                      // 0x052C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectVertexColorsOnEachBone    PassThrough_vertexColorsOnEachBone;                // 0x0530(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVertexDetectTaskResultInfo            PassThrough_TaskResultInfo;                        // 0x0588(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_594[0x4];                                      // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectInfoStruct                PassThrough_DetectedMeshWithSettings;              // 0x0598(0x0078)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexDetectGetColorsOnlyStruct       GotAllVertexColorsWithSettings;                    // 0x0610(0x0028)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexPaintAtLocationStruct           MeshPaintedWithSettings;                           // 0x0638(0x0210)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexPainthWithinAreaStruct          AreaWithinMeshPaintedWithSettings;                 // 0x0848(0x0180)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexPaintOnEntireMeshStruct         EntireMeshPaintedWithSettings;                     // 0x09C8(0x0170)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexPaintColorSnippetStruct         PaintColorSnippetWithSettings;                     // 0x0B38(0x0060)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVertexPaintStruct                     SetMeshComponentVertexColorSettings;               // 0x0B98(0x0038)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectAdditionalDataToPassThrough) == 0x000010, "Wrong alignment on FVertexDetectAdditionalDataToPassThrough");
static_assert(sizeof(FVertexDetectAdditionalDataToPassThrough) == 0x000BD0, "Wrong size on FVertexDetectAdditionalDataToPassThrough");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_Actor) == 0x000000, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_Actor' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_PrimitiveComponent) == 0x000008, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_Bool1) == 0x000010, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_Bool1' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_Bool2) == 0x000011, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_Bool2' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_Byte1) == 0x000012, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_Byte1' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_Byte2) == 0x000013, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_Byte2' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_Float1) == 0x000014, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_Float1' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_Float2) == 0x000018, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_Float2' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_Int1) == 0x00001C, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_Int1' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_Int2) == 0x000020, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_Int2' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_Vector1) == 0x000024, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_Vector1' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_Vector2) == 0x000030, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_Vector2' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_Vector3) == 0x00003C, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_Vector3' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_Vector4) == 0x000048, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_Vector4' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_Rotator1) == 0x000054, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_Rotator1' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_Rotator2) == 0x000060, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_Rotator2' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_Transform) == 0x000070, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_Transform' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_String1) == 0x0000A0, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_String1' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_String2) == 0x0000B0, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_String2' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_Name) == 0x0000C0, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_Name' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_PhysicsSurface1) == 0x0000C8, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_PhysicsSurface1' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_PhysicsSurface2) == 0x0000C9, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_PhysicsSurface2' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_PhysicalMaterial1) == 0x0000D0, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_PhysicalMaterial1' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_ObjectCollisionChannel) == 0x0000D8, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_ObjectCollisionChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_ObjectType) == 0x0000D9, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_ObjectType' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_MeshVertexData) == 0x0000E0, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_MeshVertexData' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_ClosestVertexInfo) == 0x000140, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_ClosestVertexInfo' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_EstimatedColorAtHitLocationInfo) == 0x0002B0, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_EstimatedColorAtHitLocationInfo' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_AvarageColorInAreaInfo) == 0x0003E0, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_AvarageColorInAreaInfo' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_AmountOfPaintedColorsOfEachChannel) == 0x0004F8, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_AmountOfPaintedColorsOfEachChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_vertexColorsOnEachBone) == 0x000530, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_vertexColorsOnEachBone' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_TaskResultInfo) == 0x000588, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_TaskResultInfo' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PassThrough_DetectedMeshWithSettings) == 0x000598, "Member 'FVertexDetectAdditionalDataToPassThrough::PassThrough_DetectedMeshWithSettings' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, GotAllVertexColorsWithSettings) == 0x000610, "Member 'FVertexDetectAdditionalDataToPassThrough::GotAllVertexColorsWithSettings' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, MeshPaintedWithSettings) == 0x000638, "Member 'FVertexDetectAdditionalDataToPassThrough::MeshPaintedWithSettings' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, AreaWithinMeshPaintedWithSettings) == 0x000848, "Member 'FVertexDetectAdditionalDataToPassThrough::AreaWithinMeshPaintedWithSettings' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, EntireMeshPaintedWithSettings) == 0x0009C8, "Member 'FVertexDetectAdditionalDataToPassThrough::EntireMeshPaintedWithSettings' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, PaintColorSnippetWithSettings) == 0x000B38, "Member 'FVertexDetectAdditionalDataToPassThrough::PaintColorSnippetWithSettings' has a wrong offset!");
static_assert(offsetof(FVertexDetectAdditionalDataToPassThrough, SetMeshComponentVertexColorSettings) == 0x000B98, "Member 'FVertexDetectAdditionalDataToPassThrough::SetMeshComponentVertexColorSettings' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.PaintOnLODSettingsStruct
// 0x0004 (0x0004 - 0x0000)
struct FPaintOnLODSettingsStruct final
{
public:
	int32                                         MaxAmountOfLODsToPaint;                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaintOnLODSettingsStruct) == 0x000004, "Wrong alignment on FPaintOnLODSettingsStruct");
static_assert(sizeof(FPaintOnLODSettingsStruct) == 0x000004, "Wrong size on FPaintOnLODSettingsStruct");
static_assert(offsetof(FPaintOnLODSettingsStruct, MaxAmountOfLODsToPaint) == 0x000000, "Member 'FPaintOnLODSettingsStruct::MaxAmountOfLODsToPaint' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectClothPhysicsDampingSettingsStruct
// 0x0004 (0x0004 - 0x0000)
struct FVertexDetectClothPhysicsDampingSettingsStruct final
{
public:
	float                                         SetDamping_dampingCoefficient;                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectClothPhysicsDampingSettingsStruct) == 0x000004, "Wrong alignment on FVertexDetectClothPhysicsDampingSettingsStruct");
static_assert(sizeof(FVertexDetectClothPhysicsDampingSettingsStruct) == 0x000004, "Wrong size on FVertexDetectClothPhysicsDampingSettingsStruct");
static_assert(offsetof(FVertexDetectClothPhysicsDampingSettingsStruct, SetDamping_dampingCoefficient) == 0x000000, "Member 'FVertexDetectClothPhysicsDampingSettingsStruct::SetDamping_dampingCoefficient' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectClothPhysicsGravitySettingsStruct
// 0x0014 (0x0014 - 0x0000)
struct FVertexDetectClothPhysicsGravitySettingsStruct final
{
public:
	float                                         SetGravity_gravityScale;                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetGravity_overrideGravity;                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SetGravity_gravityOverride;                        // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectClothPhysicsGravitySettingsStruct) == 0x000004, "Wrong alignment on FVertexDetectClothPhysicsGravitySettingsStruct");
static_assert(sizeof(FVertexDetectClothPhysicsGravitySettingsStruct) == 0x000014, "Wrong size on FVertexDetectClothPhysicsGravitySettingsStruct");
static_assert(offsetof(FVertexDetectClothPhysicsGravitySettingsStruct, SetGravity_gravityScale) == 0x000000, "Member 'FVertexDetectClothPhysicsGravitySettingsStruct::SetGravity_gravityScale' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsGravitySettingsStruct, SetGravity_overrideGravity) == 0x000004, "Member 'FVertexDetectClothPhysicsGravitySettingsStruct::SetGravity_overrideGravity' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsGravitySettingsStruct, SetGravity_gravityOverride) == 0x000008, "Member 'FVertexDetectClothPhysicsGravitySettingsStruct::SetGravity_gravityOverride' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectClothPhysicsWindSettingsStruct
// 0x0020 (0x0020 - 0x0000)
struct FVertexDetectClothPhysicsWindSettingsStruct final
{
public:
	struct FVector2D                              SetWind_drag;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SetWind_lift;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SetWind_airDensity;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SetWind_windVelocity;                              // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectClothPhysicsWindSettingsStruct) == 0x000004, "Wrong alignment on FVertexDetectClothPhysicsWindSettingsStruct");
static_assert(sizeof(FVertexDetectClothPhysicsWindSettingsStruct) == 0x000020, "Wrong size on FVertexDetectClothPhysicsWindSettingsStruct");
static_assert(offsetof(FVertexDetectClothPhysicsWindSettingsStruct, SetWind_drag) == 0x000000, "Member 'FVertexDetectClothPhysicsWindSettingsStruct::SetWind_drag' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsWindSettingsStruct, SetWind_lift) == 0x000008, "Member 'FVertexDetectClothPhysicsWindSettingsStruct::SetWind_lift' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsWindSettingsStruct, SetWind_airDensity) == 0x000010, "Member 'FVertexDetectClothPhysicsWindSettingsStruct::SetWind_airDensity' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsWindSettingsStruct, SetWind_windVelocity) == 0x000014, "Member 'FVertexDetectClothPhysicsWindSettingsStruct::SetWind_windVelocity' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectClothPhysicsAnimDriveSettingsStruct
// 0x0010 (0x0010 - 0x0000)
struct FVertexDetectClothPhysicsAnimDriveSettingsStruct final
{
public:
	struct FVector2D                              SetAnimDrive_Stiffness;                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SetAnimDrive_Damping;                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectClothPhysicsAnimDriveSettingsStruct) == 0x000004, "Wrong alignment on FVertexDetectClothPhysicsAnimDriveSettingsStruct");
static_assert(sizeof(FVertexDetectClothPhysicsAnimDriveSettingsStruct) == 0x000010, "Wrong size on FVertexDetectClothPhysicsAnimDriveSettingsStruct");
static_assert(offsetof(FVertexDetectClothPhysicsAnimDriveSettingsStruct, SetAnimDrive_Stiffness) == 0x000000, "Member 'FVertexDetectClothPhysicsAnimDriveSettingsStruct::SetAnimDrive_Stiffness' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsAnimDriveSettingsStruct, SetAnimDrive_Damping) == 0x000008, "Member 'FVertexDetectClothPhysicsAnimDriveSettingsStruct::SetAnimDrive_Damping' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectClothPhysicsCollisionSettingsStruct
// 0x0010 (0x0010 - 0x0000)
struct FVertexDetectClothPhysicsCollisionSettingsStruct final
{
public:
	float                                         SetCollision_CollisionThickness;                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SetCollision_FrictionCoefficient;                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetCollision_UseCCD;                               // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SetCollision_SelfCollisionThickness;               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectClothPhysicsCollisionSettingsStruct) == 0x000004, "Wrong alignment on FVertexDetectClothPhysicsCollisionSettingsStruct");
static_assert(sizeof(FVertexDetectClothPhysicsCollisionSettingsStruct) == 0x000010, "Wrong size on FVertexDetectClothPhysicsCollisionSettingsStruct");
static_assert(offsetof(FVertexDetectClothPhysicsCollisionSettingsStruct, SetCollision_CollisionThickness) == 0x000000, "Member 'FVertexDetectClothPhysicsCollisionSettingsStruct::SetCollision_CollisionThickness' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsCollisionSettingsStruct, SetCollision_FrictionCoefficient) == 0x000004, "Member 'FVertexDetectClothPhysicsCollisionSettingsStruct::SetCollision_FrictionCoefficient' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsCollisionSettingsStruct, SetCollision_UseCCD) == 0x000008, "Member 'FVertexDetectClothPhysicsCollisionSettingsStruct::SetCollision_UseCCD' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsCollisionSettingsStruct, SetCollision_SelfCollisionThickness) == 0x00000C, "Member 'FVertexDetectClothPhysicsCollisionSettingsStruct::SetCollision_SelfCollisionThickness' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectClothPhysicsLongRangeAttachmentSettingsStruct
// 0x0010 (0x0010 - 0x0000)
struct FVertexDetectClothPhysicsLongRangeAttachmentSettingsStruct final
{
public:
	struct FVector2D                              LongRangeAttachment_TetherThickness;               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LongRangeAttachment_TetherScale;                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectClothPhysicsLongRangeAttachmentSettingsStruct) == 0x000004, "Wrong alignment on FVertexDetectClothPhysicsLongRangeAttachmentSettingsStruct");
static_assert(sizeof(FVertexDetectClothPhysicsLongRangeAttachmentSettingsStruct) == 0x000010, "Wrong size on FVertexDetectClothPhysicsLongRangeAttachmentSettingsStruct");
static_assert(offsetof(FVertexDetectClothPhysicsLongRangeAttachmentSettingsStruct, LongRangeAttachment_TetherThickness) == 0x000000, "Member 'FVertexDetectClothPhysicsLongRangeAttachmentSettingsStruct::LongRangeAttachment_TetherThickness' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsLongRangeAttachmentSettingsStruct, LongRangeAttachment_TetherScale) == 0x000008, "Member 'FVertexDetectClothPhysicsLongRangeAttachmentSettingsStruct::LongRangeAttachment_TetherScale' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectClothPhysicsMaterialSettingsStruct
// 0x0018 (0x0018 - 0x0000)
struct FVertexDetectClothPhysicsMaterialSettingsStruct final
{
public:
	struct FVector2D                              Material_EdgeStiffness;                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Material_BendingStiffness;                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Material_AreaStiffness;                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectClothPhysicsMaterialSettingsStruct) == 0x000004, "Wrong alignment on FVertexDetectClothPhysicsMaterialSettingsStruct");
static_assert(sizeof(FVertexDetectClothPhysicsMaterialSettingsStruct) == 0x000018, "Wrong size on FVertexDetectClothPhysicsMaterialSettingsStruct");
static_assert(offsetof(FVertexDetectClothPhysicsMaterialSettingsStruct, Material_EdgeStiffness) == 0x000000, "Member 'FVertexDetectClothPhysicsMaterialSettingsStruct::Material_EdgeStiffness' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsMaterialSettingsStruct, Material_BendingStiffness) == 0x000008, "Member 'FVertexDetectClothPhysicsMaterialSettingsStruct::Material_BendingStiffness' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsMaterialSettingsStruct, Material_AreaStiffness) == 0x000010, "Member 'FVertexDetectClothPhysicsMaterialSettingsStruct::Material_AreaStiffness' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectClothPhysicsVelocityScaleSettingsStruct
// 0x0014 (0x0014 - 0x0000)
struct FVertexDetectClothPhysicsVelocityScaleSettingsStruct final
{
public:
	struct FVector                                PhysicsVelocityScale_LinearVelocityScale;          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicVelocityScale_AngularVelocityScale;          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicsVelocityScale_FictitiousAngularVelocityScale; // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectClothPhysicsVelocityScaleSettingsStruct) == 0x000004, "Wrong alignment on FVertexDetectClothPhysicsVelocityScaleSettingsStruct");
static_assert(sizeof(FVertexDetectClothPhysicsVelocityScaleSettingsStruct) == 0x000014, "Wrong size on FVertexDetectClothPhysicsVelocityScaleSettingsStruct");
static_assert(offsetof(FVertexDetectClothPhysicsVelocityScaleSettingsStruct, PhysicsVelocityScale_LinearVelocityScale) == 0x000000, "Member 'FVertexDetectClothPhysicsVelocityScaleSettingsStruct::PhysicsVelocityScale_LinearVelocityScale' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsVelocityScaleSettingsStruct, PhysicVelocityScale_AngularVelocityScale) == 0x00000C, "Member 'FVertexDetectClothPhysicsVelocityScaleSettingsStruct::PhysicVelocityScale_AngularVelocityScale' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsVelocityScaleSettingsStruct, PhysicsVelocityScale_FictitiousAngularVelocityScale) == 0x000010, "Member 'FVertexDetectClothPhysicsVelocityScaleSettingsStruct::PhysicsVelocityScale_FictitiousAngularVelocityScale' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectChaosClothPhysicsSettings
// 0x00B4 (0x00B4 - 0x0000)
struct FVertexDetectChaosClothPhysicsSettings final
{
public:
	bool                                          SetDamping;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectClothPhysicsDampingSettingsStruct ClothDampingSettings;                              // 0x0004(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetGravity;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectClothPhysicsGravitySettingsStruct ClothGravitySettings;                              // 0x000C(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetWind;                                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectClothPhysicsWindSettingsStruct ClothWindSettings;                                 // 0x0024(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetAnimDrive;                                      // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectClothPhysicsAnimDriveSettingsStruct ClothAnimDriveSettings;                            // 0x0048(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetCollision;                                      // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectClothPhysicsCollisionSettingsStruct ClothCollisionSettings;                            // 0x005C(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetLongRangeAttachment;                            // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectClothPhysicsLongRangeAttachmentSettingsStruct ClothLongRangeAttachmentSettings;                  // 0x0070(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetMaterial;                                       // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectClothPhysicsMaterialSettingsStruct ClothMaterialSettings;                             // 0x0084(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetPhysicsVelocityScale;                           // 0x009C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectClothPhysicsVelocityScaleSettingsStruct ClothPhysicsVelocityScaleSettings;                 // 0x00A0(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectChaosClothPhysicsSettings) == 0x000004, "Wrong alignment on FVertexDetectChaosClothPhysicsSettings");
static_assert(sizeof(FVertexDetectChaosClothPhysicsSettings) == 0x0000B4, "Wrong size on FVertexDetectChaosClothPhysicsSettings");
static_assert(offsetof(FVertexDetectChaosClothPhysicsSettings, SetDamping) == 0x000000, "Member 'FVertexDetectChaosClothPhysicsSettings::SetDamping' has a wrong offset!");
static_assert(offsetof(FVertexDetectChaosClothPhysicsSettings, ClothDampingSettings) == 0x000004, "Member 'FVertexDetectChaosClothPhysicsSettings::ClothDampingSettings' has a wrong offset!");
static_assert(offsetof(FVertexDetectChaosClothPhysicsSettings, SetGravity) == 0x000008, "Member 'FVertexDetectChaosClothPhysicsSettings::SetGravity' has a wrong offset!");
static_assert(offsetof(FVertexDetectChaosClothPhysicsSettings, ClothGravitySettings) == 0x00000C, "Member 'FVertexDetectChaosClothPhysicsSettings::ClothGravitySettings' has a wrong offset!");
static_assert(offsetof(FVertexDetectChaosClothPhysicsSettings, SetWind) == 0x000020, "Member 'FVertexDetectChaosClothPhysicsSettings::SetWind' has a wrong offset!");
static_assert(offsetof(FVertexDetectChaosClothPhysicsSettings, ClothWindSettings) == 0x000024, "Member 'FVertexDetectChaosClothPhysicsSettings::ClothWindSettings' has a wrong offset!");
static_assert(offsetof(FVertexDetectChaosClothPhysicsSettings, SetAnimDrive) == 0x000044, "Member 'FVertexDetectChaosClothPhysicsSettings::SetAnimDrive' has a wrong offset!");
static_assert(offsetof(FVertexDetectChaosClothPhysicsSettings, ClothAnimDriveSettings) == 0x000048, "Member 'FVertexDetectChaosClothPhysicsSettings::ClothAnimDriveSettings' has a wrong offset!");
static_assert(offsetof(FVertexDetectChaosClothPhysicsSettings, SetCollision) == 0x000058, "Member 'FVertexDetectChaosClothPhysicsSettings::SetCollision' has a wrong offset!");
static_assert(offsetof(FVertexDetectChaosClothPhysicsSettings, ClothCollisionSettings) == 0x00005C, "Member 'FVertexDetectChaosClothPhysicsSettings::ClothCollisionSettings' has a wrong offset!");
static_assert(offsetof(FVertexDetectChaosClothPhysicsSettings, SetLongRangeAttachment) == 0x00006C, "Member 'FVertexDetectChaosClothPhysicsSettings::SetLongRangeAttachment' has a wrong offset!");
static_assert(offsetof(FVertexDetectChaosClothPhysicsSettings, ClothLongRangeAttachmentSettings) == 0x000070, "Member 'FVertexDetectChaosClothPhysicsSettings::ClothLongRangeAttachmentSettings' has a wrong offset!");
static_assert(offsetof(FVertexDetectChaosClothPhysicsSettings, SetMaterial) == 0x000080, "Member 'FVertexDetectChaosClothPhysicsSettings::SetMaterial' has a wrong offset!");
static_assert(offsetof(FVertexDetectChaosClothPhysicsSettings, ClothMaterialSettings) == 0x000084, "Member 'FVertexDetectChaosClothPhysicsSettings::ClothMaterialSettings' has a wrong offset!");
static_assert(offsetof(FVertexDetectChaosClothPhysicsSettings, SetPhysicsVelocityScale) == 0x00009C, "Member 'FVertexDetectChaosClothPhysicsSettings::SetPhysicsVelocityScale' has a wrong offset!");
static_assert(offsetof(FVertexDetectChaosClothPhysicsSettings, ClothPhysicsVelocityScaleSettings) == 0x0000A0, "Member 'FVertexDetectChaosClothPhysicsSettings::ClothPhysicsVelocityScaleSettings' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectClothPhysicsSettingsAtVertexColorStruct
// 0x0148 (0x0148 - 0x0000)
struct FVertexDetectClothPhysicsSettingsAtVertexColorStruct final
{
public:
	bool                                          AffectClothPhysicsAtColorValue;                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetDamping;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectClothPhysicsDampingSettingsStruct ClothDampingSettingsWithNoColorPaintedAtChannel;   // 0x0004(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVertexDetectClothPhysicsDampingSettingsStruct ClothDampingSettingsWithFullColorPaintedAtChannel; // 0x0008(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetGravity;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectClothPhysicsGravitySettingsStruct ClothGravitySettingsWithNoColorPaintedAtChannel;   // 0x0010(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVertexDetectClothPhysicsGravitySettingsStruct ClothGravitySettingsWithFullColorPaintedAtChannel; // 0x0024(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetWind;                                           // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectClothPhysicsWindSettingsStruct ClothWindSettingsWithNoColorPaintedAtChannel;      // 0x003C(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVertexDetectClothPhysicsWindSettingsStruct ClothWindSettingsWithFullColorPaintedAtChannel;    // 0x005C(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetAnimDrive;                                      // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectClothPhysicsAnimDriveSettingsStruct ClothAnimDriveSettingsWithNoColorPaintedAtChannel; // 0x0080(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVertexDetectClothPhysicsAnimDriveSettingsStruct ClothAnimDriveSettingsWithFullColorPaintedAtChannel; // 0x0090(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetCollision;                                      // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectClothPhysicsCollisionSettingsStruct ClothCollisionSettingsWithNoColorPaintedAtChannel; // 0x00A4(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVertexDetectClothPhysicsCollisionSettingsStruct ClothCollisionSettingsWithFullColorPaintedAtChannel; // 0x00B4(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetLongRangeAttachment;                            // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectClothPhysicsLongRangeAttachmentSettingsStruct ClothLongRangeAttachmentSettingsWithNoColorPaintedAtChannel; // 0x00C8(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVertexDetectClothPhysicsLongRangeAttachmentSettingsStruct ClothLongRangeAttachmentSettingsWithFullColorPaintedAtChannel; // 0x00D8(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetMaterial;                                       // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectClothPhysicsMaterialSettingsStruct ClothMaterialSettingsWithNoColorPaintedAtChannel;  // 0x00EC(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVertexDetectClothPhysicsMaterialSettingsStruct ClothMaterialSettingsWithFullColorPaintedAtChannel; // 0x0104(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          SetPhysicsVelocityScale;                           // 0x011C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVertexDetectClothPhysicsVelocityScaleSettingsStruct ClothPhysicsVelocityScaleSettingsWithNoColorPaintedAtChannel; // 0x0120(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVertexDetectClothPhysicsVelocityScaleSettingsStruct ClothPhysicsVelocityScaleSettingsWithFullColorPaintedAtChannel; // 0x0134(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct) == 0x000004, "Wrong alignment on FVertexDetectClothPhysicsSettingsAtVertexColorStruct");
static_assert(sizeof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct) == 0x000148, "Wrong size on FVertexDetectClothPhysicsSettingsAtVertexColorStruct");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, AffectClothPhysicsAtColorValue) == 0x000000, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::AffectClothPhysicsAtColorValue' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, SetDamping) == 0x000001, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::SetDamping' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, ClothDampingSettingsWithNoColorPaintedAtChannel) == 0x000004, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::ClothDampingSettingsWithNoColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, ClothDampingSettingsWithFullColorPaintedAtChannel) == 0x000008, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::ClothDampingSettingsWithFullColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, SetGravity) == 0x00000C, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::SetGravity' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, ClothGravitySettingsWithNoColorPaintedAtChannel) == 0x000010, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::ClothGravitySettingsWithNoColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, ClothGravitySettingsWithFullColorPaintedAtChannel) == 0x000024, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::ClothGravitySettingsWithFullColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, SetWind) == 0x000038, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::SetWind' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, ClothWindSettingsWithNoColorPaintedAtChannel) == 0x00003C, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::ClothWindSettingsWithNoColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, ClothWindSettingsWithFullColorPaintedAtChannel) == 0x00005C, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::ClothWindSettingsWithFullColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, SetAnimDrive) == 0x00007C, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::SetAnimDrive' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, ClothAnimDriveSettingsWithNoColorPaintedAtChannel) == 0x000080, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::ClothAnimDriveSettingsWithNoColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, ClothAnimDriveSettingsWithFullColorPaintedAtChannel) == 0x000090, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::ClothAnimDriveSettingsWithFullColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, SetCollision) == 0x0000A0, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::SetCollision' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, ClothCollisionSettingsWithNoColorPaintedAtChannel) == 0x0000A4, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::ClothCollisionSettingsWithNoColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, ClothCollisionSettingsWithFullColorPaintedAtChannel) == 0x0000B4, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::ClothCollisionSettingsWithFullColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, SetLongRangeAttachment) == 0x0000C4, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::SetLongRangeAttachment' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, ClothLongRangeAttachmentSettingsWithNoColorPaintedAtChannel) == 0x0000C8, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::ClothLongRangeAttachmentSettingsWithNoColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, ClothLongRangeAttachmentSettingsWithFullColorPaintedAtChannel) == 0x0000D8, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::ClothLongRangeAttachmentSettingsWithFullColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, SetMaterial) == 0x0000E8, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::SetMaterial' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, ClothMaterialSettingsWithNoColorPaintedAtChannel) == 0x0000EC, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::ClothMaterialSettingsWithNoColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, ClothMaterialSettingsWithFullColorPaintedAtChannel) == 0x000104, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::ClothMaterialSettingsWithFullColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, SetPhysicsVelocityScale) == 0x00011C, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::SetPhysicsVelocityScale' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, ClothPhysicsVelocityScaleSettingsWithNoColorPaintedAtChannel) == 0x000120, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::ClothPhysicsVelocityScaleSettingsWithNoColorPaintedAtChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothPhysicsSettingsAtVertexColorStruct, ClothPhysicsVelocityScaleSettingsWithFullColorPaintedAtChannel) == 0x000134, "Member 'FVertexDetectClothPhysicsSettingsAtVertexColorStruct::ClothPhysicsVelocityScaleSettingsWithFullColorPaintedAtChannel' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.CalculateColorsInfo
// 0x17C0 (0x17C0 - 0x0000)
struct alignas(0x10) FCalculateColorsInfo final
{
public:
	uint8                                         Pad_0[0x17C0];                                     // 0x0000(0x17C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCalculateColorsInfo) == 0x000010, "Wrong alignment on FCalculateColorsInfo");
static_assert(sizeof(FCalculateColorsInfo) == 0x0017C0, "Wrong size on FCalculateColorsInfo");

// ScriptStruct VertexPaintDetectionPlugin.VertexPaintCalculateColorsQueueArrayStruct
// 0x0010 (0x0010 - 0x0000)
struct FVertexPaintCalculateColorsQueueArrayStruct final
{
public:
	TArray<struct FCalculateColorsInfo>           CalculateColorsQueueArray;                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexPaintCalculateColorsQueueArrayStruct) == 0x000008, "Wrong alignment on FVertexPaintCalculateColorsQueueArrayStruct");
static_assert(sizeof(FVertexPaintCalculateColorsQueueArrayStruct) == 0x000010, "Wrong size on FVertexPaintCalculateColorsQueueArrayStruct");
static_assert(offsetof(FVertexPaintCalculateColorsQueueArrayStruct, CalculateColorsQueueArray) == 0x000000, "Member 'FVertexPaintCalculateColorsQueueArrayStruct::CalculateColorsQueueArray' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexPaintClothOverlapComponentsStruct
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FVertexPaintClothOverlapComponentsStruct final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVertexPaintClothOverlapComponentsStruct) == 0x000008, "Wrong alignment on FVertexPaintClothOverlapComponentsStruct");
static_assert(sizeof(FVertexPaintClothOverlapComponentsStruct) == 0x000010, "Wrong size on FVertexPaintClothOverlapComponentsStruct");

// ScriptStruct VertexPaintDetectionPlugin.VertexPaintSetMeshComponentVertexColorsUsingSerializedString
// 0x0018 (0x0050 - 0x0038)
struct FVertexPaintSetMeshComponentVertexColorsUsingSerializedString final : public FVertexPaintStruct
{
public:
	class FString                                 SerializedColorDataAtLOD0;                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVertexPaintDetectionComponent*         OptionalCallbackComponent;                         // 0x0048(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexPaintSetMeshComponentVertexColorsUsingSerializedString) == 0x000008, "Wrong alignment on FVertexPaintSetMeshComponentVertexColorsUsingSerializedString");
static_assert(sizeof(FVertexPaintSetMeshComponentVertexColorsUsingSerializedString) == 0x000050, "Wrong size on FVertexPaintSetMeshComponentVertexColorsUsingSerializedString");
static_assert(offsetof(FVertexPaintSetMeshComponentVertexColorsUsingSerializedString, SerializedColorDataAtLOD0) == 0x000038, "Member 'FVertexPaintSetMeshComponentVertexColorsUsingSerializedString::SerializedColorDataAtLOD0' has a wrong offset!");
static_assert(offsetof(FVertexPaintSetMeshComponentVertexColorsUsingSerializedString, OptionalCallbackComponent) == 0x000048, "Member 'FVertexPaintSetMeshComponentVertexColorsUsingSerializedString::OptionalCallbackComponent' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexPaintSetMeshComponentVertexColors
// 0x0018 (0x0050 - 0x0038)
struct FVertexPaintSetMeshComponentVertexColors final : public FVertexPaintStruct
{
public:
	TArray<struct FColor>                         VertexColorsAtLOD0ToSet;                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UVertexPaintDetectionComponent*         OptionalCallbackComponent;                         // 0x0048(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexPaintSetMeshComponentVertexColors) == 0x000008, "Wrong alignment on FVertexPaintSetMeshComponentVertexColors");
static_assert(sizeof(FVertexPaintSetMeshComponentVertexColors) == 0x000050, "Wrong size on FVertexPaintSetMeshComponentVertexColors");
static_assert(offsetof(FVertexPaintSetMeshComponentVertexColors, VertexColorsAtLOD0ToSet) == 0x000038, "Member 'FVertexPaintSetMeshComponentVertexColors::VertexColorsAtLOD0ToSet' has a wrong offset!");
static_assert(offsetof(FVertexPaintSetMeshComponentVertexColors, OptionalCallbackComponent) == 0x000048, "Member 'FVertexPaintSetMeshComponentVertexColors::OptionalCallbackComponent' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectClothSettingsStruct
// 0x0520 (0x0520 - 0x0000)
struct FVertexDetectClothSettingsStruct final
{
public:
	struct FVertexDetectClothPhysicsSettingsAtVertexColorStruct ClothPhysicsSettingsAtRedChannel;                  // 0x0000(0x0148)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVertexDetectClothPhysicsSettingsAtVertexColorStruct ClothPhysicsSettingsAtGreenChannel;                // 0x0148(0x0148)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVertexDetectClothPhysicsSettingsAtVertexColorStruct ClothPhysicsSettingsAtBlueChannel;                 // 0x0290(0x0148)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVertexDetectClothPhysicsSettingsAtVertexColorStruct ClothPhysicsSettingsAtAlphaChannel;                // 0x03D8(0x0148)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectClothSettingsStruct) == 0x000004, "Wrong alignment on FVertexDetectClothSettingsStruct");
static_assert(sizeof(FVertexDetectClothSettingsStruct) == 0x000520, "Wrong size on FVertexDetectClothSettingsStruct");
static_assert(offsetof(FVertexDetectClothSettingsStruct, ClothPhysicsSettingsAtRedChannel) == 0x000000, "Member 'FVertexDetectClothSettingsStruct::ClothPhysicsSettingsAtRedChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothSettingsStruct, ClothPhysicsSettingsAtGreenChannel) == 0x000148, "Member 'FVertexDetectClothSettingsStruct::ClothPhysicsSettingsAtGreenChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothSettingsStruct, ClothPhysicsSettingsAtBlueChannel) == 0x000290, "Member 'FVertexDetectClothSettingsStruct::ClothPhysicsSettingsAtBlueChannel' has a wrong offset!");
static_assert(offsetof(FVertexDetectClothSettingsStruct, ClothPhysicsSettingsAtAlphaChannel) == 0x0003D8, "Member 'FVertexDetectClothSettingsStruct::ClothPhysicsSettingsAtAlphaChannel' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexPaintColorToApplyToVertexChannelsDependingOnPhysicsMaterial
// 0x0058 (0x0058 - 0x0000)
struct FVertexPaintColorToApplyToVertexChannelsDependingOnPhysicsMaterial final
{
public:
	EPhysicalSurface                              PhysicsMaterial;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<Enum_SurfaceAtChannel, float>            ChannelsAndAmountToApply;                          // 0x0008(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexPaintColorToApplyToVertexChannelsDependingOnPhysicsMaterial) == 0x000008, "Wrong alignment on FVertexPaintColorToApplyToVertexChannelsDependingOnPhysicsMaterial");
static_assert(sizeof(FVertexPaintColorToApplyToVertexChannelsDependingOnPhysicsMaterial) == 0x000058, "Wrong size on FVertexPaintColorToApplyToVertexChannelsDependingOnPhysicsMaterial");
static_assert(offsetof(FVertexPaintColorToApplyToVertexChannelsDependingOnPhysicsMaterial, PhysicsMaterial) == 0x000000, "Member 'FVertexPaintColorToApplyToVertexChannelsDependingOnPhysicsMaterial::PhysicsMaterial' has a wrong offset!");
static_assert(offsetof(FVertexPaintColorToApplyToVertexChannelsDependingOnPhysicsMaterial, ChannelsAndAmountToApply) == 0x000008, "Member 'FVertexPaintColorToApplyToVertexChannelsDependingOnPhysicsMaterial::ChannelsAndAmountToApply' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexPaintPhysicsSurfaceBlendingSettings
// 0x0040 (0x0040 - 0x0000)
struct FVertexPaintPhysicsSurfaceBlendingSettings final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      AssociatedMaterial;                                // 0x0000(0x0028)(Edit, BlueprintVisible, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EPhysicalSurface>                      PhysicsSurfacesThatCanBlend;                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	float                                         MinAmountOnEachSurfaceToBeAbleToBlend;             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PhysicsSurfaceToResultIn;                          // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVertexPaintPhysicsSurfaceBlendingSettings) == 0x000008, "Wrong alignment on FVertexPaintPhysicsSurfaceBlendingSettings");
static_assert(sizeof(FVertexPaintPhysicsSurfaceBlendingSettings) == 0x000040, "Wrong size on FVertexPaintPhysicsSurfaceBlendingSettings");
static_assert(offsetof(FVertexPaintPhysicsSurfaceBlendingSettings, AssociatedMaterial) == 0x000000, "Member 'FVertexPaintPhysicsSurfaceBlendingSettings::AssociatedMaterial' has a wrong offset!");
static_assert(offsetof(FVertexPaintPhysicsSurfaceBlendingSettings, PhysicsSurfacesThatCanBlend) == 0x000028, "Member 'FVertexPaintPhysicsSurfaceBlendingSettings::PhysicsSurfacesThatCanBlend' has a wrong offset!");
static_assert(offsetof(FVertexPaintPhysicsSurfaceBlendingSettings, MinAmountOnEachSurfaceToBeAbleToBlend) == 0x000038, "Member 'FVertexPaintPhysicsSurfaceBlendingSettings::MinAmountOnEachSurfaceToBeAbleToBlend' has a wrong offset!");
static_assert(offsetof(FVertexPaintPhysicsSurfaceBlendingSettings, PhysicsSurfaceToResultIn) == 0x00003C, "Member 'FVertexPaintPhysicsSurfaceBlendingSettings::PhysicsSurfaceToResultIn' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexPaintMaterialDataAssetStruct
// 0x00A8 (0x00A8 - 0x0000)
struct FVertexPaintMaterialDataAssetStruct final
{
public:
	bool                                          IncludeDefaultChannelWhenDetecting;                // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              AtDefault;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PaintedAtRed;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PaintedAtGreen;                                    // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PaintedAtBlue;                                     // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              PaintedAtAlpha;                                    // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPhysicalSurface, struct FVertexPaintColorToApplyToVertexChannelsDependingOnPhysicsMaterial> VertexColorToApplyOnMaterialBasedOffPhysicsSurface; // 0x0008(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	TMap<EPhysicalSurface, struct FVertexPaintPhysicsSurfaceBlendingSettings> PhysicsSurfaceBlendingSettings;                    // 0x0058(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexPaintMaterialDataAssetStruct) == 0x000008, "Wrong alignment on FVertexPaintMaterialDataAssetStruct");
static_assert(sizeof(FVertexPaintMaterialDataAssetStruct) == 0x0000A8, "Wrong size on FVertexPaintMaterialDataAssetStruct");
static_assert(offsetof(FVertexPaintMaterialDataAssetStruct, IncludeDefaultChannelWhenDetecting) == 0x000000, "Member 'FVertexPaintMaterialDataAssetStruct::IncludeDefaultChannelWhenDetecting' has a wrong offset!");
static_assert(offsetof(FVertexPaintMaterialDataAssetStruct, AtDefault) == 0x000001, "Member 'FVertexPaintMaterialDataAssetStruct::AtDefault' has a wrong offset!");
static_assert(offsetof(FVertexPaintMaterialDataAssetStruct, PaintedAtRed) == 0x000002, "Member 'FVertexPaintMaterialDataAssetStruct::PaintedAtRed' has a wrong offset!");
static_assert(offsetof(FVertexPaintMaterialDataAssetStruct, PaintedAtGreen) == 0x000003, "Member 'FVertexPaintMaterialDataAssetStruct::PaintedAtGreen' has a wrong offset!");
static_assert(offsetof(FVertexPaintMaterialDataAssetStruct, PaintedAtBlue) == 0x000004, "Member 'FVertexPaintMaterialDataAssetStruct::PaintedAtBlue' has a wrong offset!");
static_assert(offsetof(FVertexPaintMaterialDataAssetStruct, PaintedAtAlpha) == 0x000005, "Member 'FVertexPaintMaterialDataAssetStruct::PaintedAtAlpha' has a wrong offset!");
static_assert(offsetof(FVertexPaintMaterialDataAssetStruct, VertexColorToApplyOnMaterialBasedOffPhysicsSurface) == 0x000008, "Member 'FVertexPaintMaterialDataAssetStruct::VertexColorToApplyOnMaterialBasedOffPhysicsSurface' has a wrong offset!");
static_assert(offsetof(FVertexPaintMaterialDataAssetStruct, PhysicsSurfaceBlendingSettings) == 0x000058, "Member 'FVertexPaintMaterialDataAssetStruct::PhysicsSurfaceBlendingSettings' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectColorSnippetDataStruct
// 0x0048 (0x0048 - 0x0000)
struct FVertexDetectColorSnippetDataStruct final
{
public:
	TSoftObjectPtr<class UObject>                 ObjectColorSnippetBelongsTo;                       // 0x0000(0x0028)(Edit, BlueprintVisible, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVertexDetectMeshDataPerLODStruct> ColorSnippetDataPerLOD;                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FVertexDetectSerializedColorsPerLODStruct> ColorSnippetPerLODAsRapidJSon;                     // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectColorSnippetDataStruct) == 0x000008, "Wrong alignment on FVertexDetectColorSnippetDataStruct");
static_assert(sizeof(FVertexDetectColorSnippetDataStruct) == 0x000048, "Wrong size on FVertexDetectColorSnippetDataStruct");
static_assert(offsetof(FVertexDetectColorSnippetDataStruct, ObjectColorSnippetBelongsTo) == 0x000000, "Member 'FVertexDetectColorSnippetDataStruct::ObjectColorSnippetBelongsTo' has a wrong offset!");
static_assert(offsetof(FVertexDetectColorSnippetDataStruct, ColorSnippetDataPerLOD) == 0x000028, "Member 'FVertexDetectColorSnippetDataStruct::ColorSnippetDataPerLOD' has a wrong offset!");
static_assert(offsetof(FVertexDetectColorSnippetDataStruct, ColorSnippetPerLODAsRapidJSon) == 0x000038, "Member 'FVertexDetectColorSnippetDataStruct::ColorSnippetPerLODAsRapidJSon' has a wrong offset!");

// ScriptStruct VertexPaintDetectionPlugin.VertexDetectColorSnippetReferenceDataStruct
// 0x0050 (0x0050 - 0x0000)
struct FVertexDetectColorSnippetReferenceDataStruct final
{
public:
	TMap<class FString, TSoftObjectPtr<class UVertexPaintColorSnippetDataAsset>> VertexColorSnippetsAndDataAssetsStoredOn;          // 0x0000(0x0050)(Edit, BlueprintVisible, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVertexDetectColorSnippetReferenceDataStruct) == 0x000008, "Wrong alignment on FVertexDetectColorSnippetReferenceDataStruct");
static_assert(sizeof(FVertexDetectColorSnippetReferenceDataStruct) == 0x000050, "Wrong size on FVertexDetectColorSnippetReferenceDataStruct");
static_assert(offsetof(FVertexDetectColorSnippetReferenceDataStruct, VertexColorSnippetsAndDataAssetsStoredOn) == 0x000000, "Member 'FVertexDetectColorSnippetReferenceDataStruct::VertexColorSnippetsAndDataAssetsStoredOn' has a wrong offset!");

}

