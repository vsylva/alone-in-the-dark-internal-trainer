#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RapidJsonModule

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// Class RapidJsonModule.CustomStructSerializationExample
// 0x0030 (0x0268 - 0x0238)
class ACustomStructSerializationExample final : public AActor
{
public:
	uint8                                         Pad_238[0x30];                                     // 0x0238(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomStructSerializationExample">();
	}
	static class ACustomStructSerializationExample* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACustomStructSerializationExample>();
	}
};
static_assert(alignof(ACustomStructSerializationExample) == 0x000008, "Wrong alignment on ACustomStructSerializationExample");
static_assert(sizeof(ACustomStructSerializationExample) == 0x000268, "Wrong size on ACustomStructSerializationExample");

// Class RapidJsonModule.RapidJsonFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class URapidJsonFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool DeserializeBool_Wrapper(const class FString& JsonString);
	static struct FColor DeserializeFColor_Wrapper(const class FString& JsonString);
	static float DeserializeFloat_Wrapper(const class FString& JsonString);
	static class FName DeserializeFName_Wrapper(const class FString& JsonString);
	static struct FRotator DeserializeFRotator_Wrapper(const class FString& JsonString);
	static class FString DeserializeFString_Wrapper(const class FString& JsonString);
	static class FText DeserializeFText_Wrapper(const class FString& JsonString);
	static struct FTransform DeserializeFTransform_Wrapper(const class FString& JsonString);
	static struct FVector DeserializeFVector_Wrapper(const class FString& JsonString);
	static int64 DeserializeInt64_Wrapper(const class FString& JsonString);
	static int32 DeserializeInt_Wrapper(const class FString& JsonString);
	static TArray<bool> DeserializeTArrayBool_Wrapper(const class FString& JsonString);
	static TArray<struct FColor> DeserializeTArrayFColor_Wrapper(const class FString& JsonString);
	static TArray<float> DeserializeTArrayFloat_Wrapper(const class FString& JsonString);
	static TArray<class FName> DeserializeTArrayFName_Wrapper(const class FString& JsonString);
	static TArray<struct FRotator> DeserializeTArrayFRotator_Wrapper(const class FString& JsonString);
	static TArray<class FString> DeserializeTArrayFString_Wrapper(const class FString& JsonString);
	static TArray<class FText> DeserializeTArrayFText_Wrapper(const class FString& JsonString);
	static TArray<struct FTransform> DeserializeTArrayFTransform_Wrapper(const class FString& JsonString);
	static TArray<struct FVector> DeserializeTArrayFVector_Wrapper(const class FString& JsonString);
	static TArray<int64> DeserializeTArrayInt64_Wrapper(const class FString& JsonString);
	static TArray<int32> DeserializeTArrayInt_Wrapper(const class FString& JsonString);
	static TArray<uint8> DeserializeTArrayUInt8_Wrapper(const class FString& JsonString);
	static uint8 DeserializeUInt8_Wrapper(const class FString& JsonString);
	static class FString SerializeBool_Wrapper(bool BoolValue);
	static class FString SerializeFColor_Wrapper(const struct FColor& ColorValue);
	static class FString SerializeFloat_Wrapper(const float& TextValue);
	static class FString SerializeFName_Wrapper(const class FName& NameValue);
	static class FString SerializeFRotator_Wrapper(const struct FRotator& TextValue);
	static class FString SerializeFString_Wrapper(const class FString& StringValue);
	static class FString SerializeFText_Wrapper(const class FText& TextValue);
	static class FString SerializeFTransform_Wrapper(const struct FTransform& TextValue);
	static class FString SerializeFVector_Wrapper(const struct FVector& TextValue);
	static class FString SerializeInt64_Wrapper(int64 Int64Value);
	static class FString SerializeInt_Wrapper(int32 IntValue);
	static class FString SerializeTArrayBool_Wrapper(const TArray<bool>& InBools);
	static class FString SerializeTArrayFColor_Wrapper(const TArray<struct FColor>& Colors);
	static class FString SerializeTArrayFloat_Wrapper(const TArray<float>& InFloats);
	static class FString SerializeTArrayFName_Wrapper(const TArray<class FName>& InNames);
	static class FString SerializeTArrayFRotator_Wrapper(const TArray<struct FRotator>& InRotator);
	static class FString SerializeTArrayFString_Wrapper(const TArray<class FString>& InStrings);
	static class FString SerializeTArrayFText_Wrapper(const TArray<class FText>& InTexts);
	static class FString SerializeTArrayFTransform_Wrapper(const TArray<struct FTransform>& InTransform);
	static class FString SerializeTArrayFVector_Wrapper(const TArray<struct FVector>& InFVector);
	static class FString SerializeTArrayInt64_Wrapper(const TArray<int64>& InInt64s);
	static class FString SerializeTArrayInt_Wrapper(const TArray<int32>& InInts);
	static class FString SerializeTArrayUInt8_Wrapper(const TArray<uint8>& InUInt8s);
	static class FString SerializeUInt8_Wrapper(uint8 UInt8Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RapidJsonFunctionLibrary">();
	}
	static class URapidJsonFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<URapidJsonFunctionLibrary>();
	}
};
static_assert(alignof(URapidJsonFunctionLibrary) == 0x000008, "Wrong alignment on URapidJsonFunctionLibrary");
static_assert(sizeof(URapidJsonFunctionLibrary) == 0x000028, "Wrong size on URapidJsonFunctionLibrary");

}

