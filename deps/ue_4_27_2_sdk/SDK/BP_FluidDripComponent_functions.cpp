#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FluidDripComponent

#include "Basic.hpp"

#include "BP_FluidDripComponent_classes.hpp"
#include "BP_FluidDripComponent_parameters.hpp"


namespace SDK
{

// Function BP_FluidDripComponent.BP_FluidDripComponent_C.GetRandomLocationInSphereAroundPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Point                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          RandomLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FluidDripComponent_C::GetRandomLocationInSphereAroundPoint(const struct FVector& Point, float Radius, struct FVector* RandomLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FluidDripComponent_C", "GetRandomLocationInSphereAroundPoint");

	Params::BP_FluidDripComponent_C_GetRandomLocationInSphereAroundPoint Parms{};

	Parms.Point = std::move(Point);
	Parms.Radius = Radius;

	UObject::ProcessEvent(Func, &Parms);

	if (RandomLocation != nullptr)
		*RandomLocation = std::move(Parms.RandomLocation);
}


// Function BP_FluidDripComponent.BP_FluidDripComponent_C.ReceiveBeginPlay
// (Exec, Event, Public, BlueprintEvent)

void UBP_FluidDripComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FluidDripComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FluidDripComponent.BP_FluidDripComponent_C.SpawnDrops
// (BlueprintCallable, BlueprintEvent)

void UBP_FluidDripComponent_C::SpawnDrops()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FluidDripComponent_C", "SpawnDrops");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FluidDripComponent.BP_FluidDripComponent_C.OnComponentActivated_Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bReset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_FluidDripComponent_C::OnComponentActivated_Event(class UActorComponent* Component, bool bReset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FluidDripComponent_C", "OnComponentActivated_Event");

	Params::BP_FluidDripComponent_C_OnComponentActivated_Event Parms{};

	Parms.Component = Component;
	Parms.bReset = bReset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FluidDripComponent.BP_FluidDripComponent_C.MaxDripTimeReached
// (BlueprintCallable, BlueprintEvent)

void UBP_FluidDripComponent_C::MaxDripTimeReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FluidDripComponent_C", "MaxDripTimeReached");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FluidDripComponent.BP_FluidDripComponent_C.OnGameStateChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EGameMainState                          OldGameState                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EGameMainState                          NewGameState                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FluidDripComponent_C::OnGameStateChanged(EGameMainState OldGameState, EGameMainState NewGameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FluidDripComponent_C", "OnGameStateChanged");

	Params::BP_FluidDripComponent_C_OnGameStateChanged Parms{};

	Parms.OldGameState = OldGameState;
	Parms.NewGameState = NewGameState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FluidDripComponent.BP_FluidDripComponent_C.ExecuteUbergraph_BP_FluidDripComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FluidDripComponent_C::ExecuteUbergraph_BP_FluidDripComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FluidDripComponent_C", "ExecuteUbergraph_BP_FluidDripComponent");

	Params::BP_FluidDripComponent_C_ExecuteUbergraph_BP_FluidDripComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FluidDripComponent.BP_FluidDripComponent_C.OnComponentDeactivated_Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_FluidDripComponent_C::OnComponentDeactivated_Event(class UActorComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FluidDripComponent_C", "OnComponentDeactivated_Event");

	Params::BP_FluidDripComponent_C_OnComponentDeactivated_Event Parms{};

	Parms.Component = Component;

	UObject::ProcessEvent(Func, &Parms);
}

}

