#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Player_Opportunity_Quick

#include "Basic.hpp"

#include "GA_Player_Opportunity_Quick_classes.hpp"
#include "GA_Player_Opportunity_Quick_parameters.hpp"


namespace SDK
{

// Function GA_Player_Opportunity_Quick.GA_Player_Opportunity_Quick_C.ExecuteUbergraph_GA_Player_Opportunity_Quick
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Player_Opportunity_Quick_C::ExecuteUbergraph_GA_Player_Opportunity_Quick(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Player_Opportunity_Quick_C", "ExecuteUbergraph_GA_Player_Opportunity_Quick");

	Params::GA_Player_Opportunity_Quick_C_ExecuteUbergraph_GA_Player_Opportunity_Quick Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Player_Opportunity_Quick.GA_Player_Opportunity_Quick_C.Initialize
// (BlueprintCallable, BlueprintEvent)

void UGA_Player_Opportunity_Quick_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Player_Opportunity_Quick_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_Player_Opportunity_Quick.GA_Player_Opportunity_Quick_C.ImmediateThrow
// (BlueprintCallable, BlueprintEvent)

void UGA_Player_Opportunity_Quick_C::ImmediateThrow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Player_Opportunity_Quick_C", "ImmediateThrow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_Player_Opportunity_Quick.GA_Player_Opportunity_Quick_C.StartTargeting
// (BlueprintCallable, BlueprintEvent)

void UGA_Player_Opportunity_Quick_C::StartTargeting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Player_Opportunity_Quick_C", "StartTargeting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_Player_Opportunity_Quick.GA_Player_Opportunity_Quick_C.K2_OnEndAbility
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bWasCancelled                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UGA_Player_Opportunity_Quick_C::K2_OnEndAbility(bool bWasCancelled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Player_Opportunity_Quick_C", "K2_OnEndAbility");

	Params::GA_Player_Opportunity_Quick_C_K2_OnEndAbility Parms{};

	Parms.bWasCancelled = bWasCancelled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Player_Opportunity_Quick.GA_Player_Opportunity_Quick_C.OnFinish_81557D5649EC0396C05B2284FBDA9994
// (BlueprintCallable, BlueprintEvent)

void UGA_Player_Opportunity_Quick_C::OnFinish_81557D5649EC0396C05B2284FBDA9994()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Player_Opportunity_Quick_C", "OnFinish_81557D5649EC0396C05B2284FBDA9994");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_Player_Opportunity_Quick.GA_Player_Opportunity_Quick_C.InitializeOpportunityThrowingValues
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayAbilityTargetDataHandle TargetData                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UGA_Player_Opportunity_Quick_C::InitializeOpportunityThrowingValues(const struct FGameplayAbilityTargetDataHandle& TargetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Player_Opportunity_Quick_C", "InitializeOpportunityThrowingValues");

	Params::GA_Player_Opportunity_Quick_C_InitializeOpportunityThrowingValues Parms{};

	Parms.TargetData = std::move(TargetData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Player_Opportunity_Quick.GA_Player_Opportunity_Quick_C.Rotate Character & Camera
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AObsidianFoxCharacter*            Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Player_Opportunity_Quick_C::Rotate_Character___Camera(class AObsidianFoxCharacter* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Player_Opportunity_Quick_C", "Rotate Character & Camera");

	Params::GA_Player_Opportunity_Quick_C_Rotate_Character___Camera Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Player_Opportunity_Quick.GA_Player_Opportunity_Quick_C.Get Facing Rotation In Camera
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// float                                   CameraRotationTolerance                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         FacingRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    RotatingOk                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UGA_Player_Opportunity_Quick_C::Get_Facing_Rotation_In_Camera(class AActor*& TargetActor, float CameraRotationTolerance, struct FRotator* FacingRotation, bool* RotatingOk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Player_Opportunity_Quick_C", "Get Facing Rotation In Camera");

	Params::GA_Player_Opportunity_Quick_C_Get_Facing_Rotation_In_Camera Parms{};

	Parms.TargetActor = TargetActor;
	Parms.CameraRotationTolerance = CameraRotationTolerance;

	UObject::ProcessEvent(Func, &Parms);

	TargetActor = Parms.TargetActor;

	if (FacingRotation != nullptr)
		*FacingRotation = std::move(Parms.FacingRotation);

	if (RotatingOk != nullptr)
		*RotatingOk = Parms.RotatingOk;
}


// Function GA_Player_Opportunity_Quick.GA_Player_Opportunity_Quick_C.GetPlayerCameraManager
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class APlayerCameraManager*             PlayerCameraManager                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Player_Opportunity_Quick_C::GetPlayerCameraManager(class APlayerCameraManager** PlayerCameraManager) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Player_Opportunity_Quick_C", "GetPlayerCameraManager");

	Params::GA_Player_Opportunity_Quick_C_GetPlayerCameraManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerCameraManager != nullptr)
		*PlayerCameraManager = Parms.PlayerCameraManager;
}

}

