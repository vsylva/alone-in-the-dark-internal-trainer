#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_OpportunityPickup

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "ThrowableOpportunityType_structs.hpp"
#include "Engine_structs.hpp"
#include "ObsidianFoxSettings_structs.hpp"
#include "ObsidianFox_structs.hpp"
#include "ObsidianFox_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_OpportunityPickup.BP_OpportunityPickup_C
// 0x0278 (0x04F8 - 0x0280)
class ABP_OpportunityPickup_C final : public AOpportunity
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPauseComponent*                        Pause;                                             // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPersistenceComponent*                  Persistence;                                       // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       TutorialDetectionSphere;                           // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFlowComponent*                         Flow;                                              // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInteractionFlowComponent*              InteractionComp;                                   // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URotatingMovementComponent*             RotatingMovement;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    EditorBillboard;                                   // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialBillboardComponent*            MaterialBillboard;                                 // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   OppoStaticMesh;                                    // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EDifficulty                                   MaxDifficultyToSpawn;                              // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   Hit_Gameplay_Effect;                               // 0x02D8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash)
	class ACharacter*                             TargetCharacter;                                   // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             InteractingCharacter;                              // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          GlassImpactVFX;                                    // 0x0310(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          BookImpactVFX;                                     // 0x0338(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          CeramicImpactVFX;                                  // 0x0360(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          WoodImpactVFX;                                     // 0x0388(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsMolotov;                                         // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor)
	EThrowableOpportunityType                     OpportunityType;                                   // 0x03B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B2[0x2];                                      // 0x03B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               AttachRotation;                                    // 0x03B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	FMulticastInlineDelegateProperty_             StartInteract;                                     // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector                                AttachLocation;                                    // 0x03D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BillboardArrowHeight;                              // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x03E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ActorHit;                                          // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         ImpactLoudness;                                    // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Ground_Location;                                   // 0x03FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         Launch_Speed;                                      // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Launch_Spread;                                     // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TargetSocket;                                      // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Opportunity_Target_GE;                             // 0x0418(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash)
	struct FGameplayTag                           Throwing_Montage_Tag;                              // 0x0440(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0448(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnPickup;                                          // 0x0470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         MolotovExplosionChance;                            // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_484[0x4];                                      // 0x0484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnThrow;                                           // 0x0488(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bUseCamera_Based_Arc;                              // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_499[0x3];                                      // 0x0499(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HomingStrength;                                    // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HitPawn;                                           // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bThrown;                                           // 0x04A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A2[0x6];                                      // 0x04A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UStaticMesh>>     BottleMeshes;                                      // 0x04A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class UStaticMesh>>     BrickMeshes;                                       // 0x04B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UStaticMesh*                            OpportunityMesh;                                   // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UNiagaraSystem*                         ImpactVFX;                                         // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDA_PerceptionTag_C*                    Environmental_Perception_Ref;                      // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MaxZVector;                                        // 0x04E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4EC[0x4];                                      // 0x04EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Opportunity_Target_GE_Ref;                         // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)

public:
	void StartInteract__DelegateSignature();
	void OnPickup__DelegateSignature();
	void OnThrow__DelegateSignature();
	void ExecuteUbergraph_BP_OpportunityPickup(int32 EntryPoint);
	void LoadImpactVFX();
	void HandleHit(const struct FGameplayAbilityTargetDataHandle& TargetData_0);
	void WeaponHit(class AActor* Weapon, const struct FGameplayTag& EventTag, const struct FGameplayEventData& Payload);
	void BndEvt__BP_OpportunityPickup_TutorialDetectionSphere_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_OpportunityPickup_TutorialDetectionSphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveTick(float DeltaSeconds);
	void Start_Ability();
	void Init_Input();
	void Release();
	void BndEvt__BP_OpportunityPickup_InteractionFlow_K2Node_ComponentBoundEvent_1_InteractionSignature__DelegateSignature(class ACharacter* InteractionCharacter);
	void CancelOpportunity();
	void Throwing_Arc_Movement();
	void BndEvt__StaticMesh_K2Node_ComponentBoundEvent_5_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void Pickup();
	void MainStateChanged(EGameMainState OldGameState, EGameMainState NewGameState);
	void Throw_to_Release();
	void CombatEvent(bool bNewIsInCombat);
	void HitEffect();
	void ReceiveBeginPlay();
	void LoadCompleteDelegate_9A660EEF4DC1DFA72EF12393254AA6C3(const TArray<class UClass*>& LoadedAssets);
	void LoadCompleteDelegate_348D3AD14BC6420630A05295BD450BCA(const TArray<class UObject*>& LoadedAssets);
	void LoadCompleteDelegate_87B61A9D4A4C843D0D3252863EDA7C1C(const TArray<class UClass*>& LoadedAssets);
	void InpActEvt_IA_Opportunity_Target_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime);
	void InpActEvt_IA_Opportunity_Quick_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime);
	void OnCompleted_C5C0CC524C4A3999EAF7DEA6EA4C359F(class FName NotifyName);
	void OnBlendOut_C5C0CC524C4A3999EAF7DEA6EA4C359F(class FName NotifyName);
	void OnInterrupted_C5C0CC524C4A3999EAF7DEA6EA4C359F(class FName NotifyName);
	void OnNotifyBegin_C5C0CC524C4A3999EAF7DEA6EA4C359F(class FName NotifyName);
	void OnNotifyEnd_C5C0CC524C4A3999EAF7DEA6EA4C359F(class FName NotifyName);
	void UserConstructionScript();
	void PlayImpactVFX(const struct FVector& Location, const struct FVector& Normal);
	void TempGetHitNormal(class AActor* Target, struct FVector* Normal);
	void SpawnPuddle(bool IgniteOnSpawn, const struct FHitResult& NewParam, class ABP_Alcohol_Puddle_C** PuddleRef);
	bool IsVisibilityAllowed();
	void GetTargetLocation(struct FVector* TargetLocation);
	void LineTraceToGround(struct FHitResult* OutHit, struct FVector* GroundLocation);
	void Get_Default_Projectile_Arc(float Launch_Speed_0, float Spread, bool bCameraBasedArc, struct FVector* Velocity);
	void GetInteractingPlayerController(class APlayerController** AsPlayer_Controller);
	void Update_Mesh();
	void InitializeOpportunityGraphics();
	void CheckIfIngitionIsForced(bool* AlwaysIgnite);
	void Randomize_Appearance();
	void GetAdditionalRequiredAssets(TArray<TSoftObjectPtr<class UObject>>* AdditionalAssets, TArray<TSoftClassPtr<class UClass>>* AdditionalClasses);
	void Check_Target_Data_for_Hit_Pawn(const struct FGameplayAbilityTargetDataHandle& TargetData_0);
	void FourPointLineTrace(const struct FVector& Location, const struct FRotator& Rotation, TArray<class AActor*>& ActorsToIgnore, float OffsetFromCenterAmount, TArray<struct FHitResult>* HitData, bool* Success);
	void GetNormalAndLocationAverage(const struct FVector& BaseDirection, TArray<struct FHitResult>& HitData, struct FVector* AverageLocation, struct FVector* AverageNormal);
	void Set_Opportunity_Type_Icon();

	void Get_Random_Opportunity_Mesh(EThrowableOpportunityType Opportunity_Type, class UStaticMesh** Mesh) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_OpportunityPickup_C">();
	}
	static class ABP_OpportunityPickup_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_OpportunityPickup_C>();
	}
};
static_assert(alignof(ABP_OpportunityPickup_C) == 0x000008, "Wrong alignment on ABP_OpportunityPickup_C");
static_assert(sizeof(ABP_OpportunityPickup_C) == 0x0004F8, "Wrong size on ABP_OpportunityPickup_C");
static_assert(offsetof(ABP_OpportunityPickup_C, UberGraphFrame) == 0x000280, "Member 'ABP_OpportunityPickup_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, Pause) == 0x000288, "Member 'ABP_OpportunityPickup_C::Pause' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, Persistence) == 0x000290, "Member 'ABP_OpportunityPickup_C::Persistence' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, TutorialDetectionSphere) == 0x000298, "Member 'ABP_OpportunityPickup_C::TutorialDetectionSphere' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, Flow) == 0x0002A0, "Member 'ABP_OpportunityPickup_C::Flow' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, InteractionComp) == 0x0002A8, "Member 'ABP_OpportunityPickup_C::InteractionComp' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, RotatingMovement) == 0x0002B0, "Member 'ABP_OpportunityPickup_C::RotatingMovement' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, EditorBillboard) == 0x0002B8, "Member 'ABP_OpportunityPickup_C::EditorBillboard' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, MaterialBillboard) == 0x0002C0, "Member 'ABP_OpportunityPickup_C::MaterialBillboard' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, OppoStaticMesh) == 0x0002C8, "Member 'ABP_OpportunityPickup_C::OppoStaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, MaxDifficultyToSpawn) == 0x0002D0, "Member 'ABP_OpportunityPickup_C::MaxDifficultyToSpawn' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, Hit_Gameplay_Effect) == 0x0002D8, "Member 'ABP_OpportunityPickup_C::Hit_Gameplay_Effect' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, TargetCharacter) == 0x000300, "Member 'ABP_OpportunityPickup_C::TargetCharacter' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, InteractingCharacter) == 0x000308, "Member 'ABP_OpportunityPickup_C::InteractingCharacter' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, GlassImpactVFX) == 0x000310, "Member 'ABP_OpportunityPickup_C::GlassImpactVFX' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, BookImpactVFX) == 0x000338, "Member 'ABP_OpportunityPickup_C::BookImpactVFX' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, CeramicImpactVFX) == 0x000360, "Member 'ABP_OpportunityPickup_C::CeramicImpactVFX' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, WoodImpactVFX) == 0x000388, "Member 'ABP_OpportunityPickup_C::WoodImpactVFX' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, IsMolotov) == 0x0003B0, "Member 'ABP_OpportunityPickup_C::IsMolotov' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, OpportunityType) == 0x0003B1, "Member 'ABP_OpportunityPickup_C::OpportunityType' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, AttachRotation) == 0x0003B4, "Member 'ABP_OpportunityPickup_C::AttachRotation' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, StartInteract) == 0x0003C0, "Member 'ABP_OpportunityPickup_C::StartInteract' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, AttachLocation) == 0x0003D0, "Member 'ABP_OpportunityPickup_C::AttachLocation' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, BillboardArrowHeight) == 0x0003DC, "Member 'ABP_OpportunityPickup_C::BillboardArrowHeight' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, HitLocation) == 0x0003E0, "Member 'ABP_OpportunityPickup_C::HitLocation' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, ActorHit) == 0x0003F0, "Member 'ABP_OpportunityPickup_C::ActorHit' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, ImpactLoudness) == 0x0003F8, "Member 'ABP_OpportunityPickup_C::ImpactLoudness' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, Ground_Location) == 0x0003FC, "Member 'ABP_OpportunityPickup_C::Ground_Location' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, Launch_Speed) == 0x000408, "Member 'ABP_OpportunityPickup_C::Launch_Speed' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, Launch_Spread) == 0x00040C, "Member 'ABP_OpportunityPickup_C::Launch_Spread' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, TargetSocket) == 0x000410, "Member 'ABP_OpportunityPickup_C::TargetSocket' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, Opportunity_Target_GE) == 0x000418, "Member 'ABP_OpportunityPickup_C::Opportunity_Target_GE' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, Throwing_Montage_Tag) == 0x000440, "Member 'ABP_OpportunityPickup_C::Throwing_Montage_Tag' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, TargetData) == 0x000448, "Member 'ABP_OpportunityPickup_C::TargetData' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, OnPickup) == 0x000470, "Member 'ABP_OpportunityPickup_C::OnPickup' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, MolotovExplosionChance) == 0x000480, "Member 'ABP_OpportunityPickup_C::MolotovExplosionChance' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, OnThrow) == 0x000488, "Member 'ABP_OpportunityPickup_C::OnThrow' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, bUseCamera_Based_Arc) == 0x000498, "Member 'ABP_OpportunityPickup_C::bUseCamera_Based_Arc' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, HomingStrength) == 0x00049C, "Member 'ABP_OpportunityPickup_C::HomingStrength' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, HitPawn) == 0x0004A0, "Member 'ABP_OpportunityPickup_C::HitPawn' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, bThrown) == 0x0004A1, "Member 'ABP_OpportunityPickup_C::bThrown' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, BottleMeshes) == 0x0004A8, "Member 'ABP_OpportunityPickup_C::BottleMeshes' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, BrickMeshes) == 0x0004B8, "Member 'ABP_OpportunityPickup_C::BrickMeshes' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, OpportunityMesh) == 0x0004C8, "Member 'ABP_OpportunityPickup_C::OpportunityMesh' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, ImpactVFX) == 0x0004D0, "Member 'ABP_OpportunityPickup_C::ImpactVFX' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, Environmental_Perception_Ref) == 0x0004D8, "Member 'ABP_OpportunityPickup_C::Environmental_Perception_Ref' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, MaxZVector) == 0x0004E0, "Member 'ABP_OpportunityPickup_C::MaxZVector' has a wrong offset!");
static_assert(offsetof(ABP_OpportunityPickup_C, Opportunity_Target_GE_Ref) == 0x0004F0, "Member 'ABP_OpportunityPickup_C::Opportunity_Target_GE_Ref' has a wrong offset!");

}

