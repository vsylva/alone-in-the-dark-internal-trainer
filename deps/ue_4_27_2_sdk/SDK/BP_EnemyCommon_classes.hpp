#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EnemyCommon

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ObsidianFox_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "ObsidianFoxSettings_structs.hpp"
#include "AnimationMontageIdentifier_structs.hpp"
#include "CharacterSize_structs.hpp"
#include "CemeteryCreatureType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EnemyCommon.BP_EnemyCommon_C
// 0x0210 (0x0AA0 - 0x0890)
class ABP_EnemyCommon_C : public AOFEnemyCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0890(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetComponent*                       ThreatWidget;                                      // 0x0898(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       AimAssistSphere;                                   // 0x08A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkinnedDecalSampler*                   SkinnedDecalSampler;                               // 0x08A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAimAssistTargetComponent_C*            AimAssistTargetComponent;                          // 0x08B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DeathBloodPoolSpawner_C*            BP_DeathBloodPoolSpawner;                          // 0x08B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFlowComponent*                         Flow;                                              // 0x08C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialSettingsComponent_C*           MaterialSettingsComponent;                         // 0x08C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      MobPlayerCollision;                                // 0x08D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    ProximitySound;                                    // 0x08D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMeleeAttackHitZonesComponent*          MeleeAttackHitZones;                               // 0x08E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDamagePointSequence*                   DamagePointSequence;                               // 0x08E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGenericTeamAgentComponent*             GenericTeamAgent;                                  // 0x08F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMeleeWeaponComponent_C*                MeleeWeaponComponent;                              // 0x08F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHealthHistoryComponent*                HealthHistory;                                     // 0x0900(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEQSDataComponent_C*                    EQSDataComponent;                                  // 0x0908(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaggerBonesComponent_C*               StaggerBonesComponent;                             // 0x0910(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_LerpV_83AC807A420A408852C709B84F3B2AD8; // 0x0918(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_83AC807A420A408852C709B84F3B2AD8; // 0x091C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91D[0x3];                                      // 0x091D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0920(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LeftWeaponSocket;                                  // 0x0928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            HealthRegenHandle;                                 // 0x0930(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   RightHandSocket;                                   // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           Bones;                                             // 0x0940(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Dead;                                              // 0x0950(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ECharacterSize                                Size;                                              // 0x0951(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_952[0x2];                                      // 0x0952(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GrappleStartLocation;                              // 0x0954(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RotationLockBlackboardKey;                         // 0x0960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseHomeRange;                                      // 0x0968(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          StartAsSleeping;                                   // 0x0969(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShouldPatrol;                                      // 0x096A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_96B[0x5];                                      // 0x096B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ATargetPoint*                           OrderTarget;                                       // 0x0970(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlashlightThreat;                                  // 0x0978(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasAggroed;                                        // 0x0979(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseAggroSound;                                     // 0x097A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_97B[0x5];                                      // 0x097B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             AggroSound;                                        // 0x0980(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             On_Enemy_Hit;                                      // 0x0988(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TSoftObjectPtr<class ABP_PatrolPath_C>        PatrolPathRef;                                     // 0x0998(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          LaserHitFireEffect;                                // 0x09C0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Sleep_GE;                                          // 0x09E8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Wakeup_GA;                                         // 0x0A10(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         SkinnedDecalSize;                                  // 0x0A38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AimAssistMainTargetSocket;                         // 0x0A3C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A44[0x4];                                      // 0x0A44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AimAssistExtraSocketNames;                         // 0x0A48(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UFMODEvent*                             DeathSound;                                        // 0x0A58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATargetPoint*                           DefendTarget;                                      // 0x0A60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GeneratedHueShift;                                 // 0x0A68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinRandomHue;                                      // 0x0A6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxRandomHue;                                      // 0x0A70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GeneratedHueShiftPower;                            // 0x0A74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinRandomHuePower;                                 // 0x0A78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxRandomHuePower;                                 // 0x0A7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GeneratedValueOverlay;                             // 0x0A80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinRandomValueOverlay;                             // 0x0A84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxRandomValueOverlay;                             // 0x0A88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRandomizeColorTints;                              // 0x0A8C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A8D[0x3];                                      // 0x0A8D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Aim_Assist_Sphere_Adjust_Timer;                    // 0x0A90(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          HasBeenBurned;                                     // 0x0A98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasDeathReactionHappened;                          // 0x0A99(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void GetHasBeenBurned(bool* HasBeenBurned_0);
	const class USceneComponent* GetAimAssistSocketComponent();
	const class FName GetAimAssistMainSocket();
	const TArray<class FName> GetAimAssistSockets(const bool bIncludeMainAimSocket);
	void GetHasDeathReactionHappened(bool* HasDied);
	void GetMobPlayerCollision(class UCapsuleComponent** MobPlayerCollission);
	void SetStartBurrowed(bool beginBurrowed, bool* Success);
	void SetOrderTarget(const struct FVector& Location, bool* Success);
	void HitscanWeaponFired(bool* Success);
	void GetMostSuitableMeleeSection(EAnimationMontageIdentifier* Value);
	void GetAggroState(bool* Aggro);
	void SetNewAggro(bool NewAggro, bool* Success);
	void IncrementJac3ProneCounter(int32* ProneCounter);
	void GetCharacterSize(ECharacterSize* Size_0);
	void GetCemeteryCreatureType(ECemeteryCreatureType* CemeteryCreatureType);
	void SetCanCirculate(bool CanCirculate, bool* Success);
	void SetStartOnWall(bool StartOnWall, bool* Success);
	void AimedAt(bool* Return);
	void GetUpgradeComponent(class UWeaponUpgradeComponent_C** UpgradeComponent);
	void FlashlightHit(float Distance, bool* Success);
	void RemoveComponentByTag(class FName Tag);
	void OnDeathVisibilityBasedAnimTickOptionReset();
	void On_Difficulty_Changed(EDifficulty NewDifficulty);
	void RandomizeColorTints();
	void blackboardSetup();
	void SetDefendLocation(const struct FVector& DefendLocation);
	void RemoveFromGroupCombat();
	void WakeUpFromSleep();
	void SetPatrolPathRef(TSoftObjectPtr<class ABP_PatrolPath_C> Input);
	void PlayAggroSounds();
	void SpawnGroupCombatActor(class ABP_Group_Combat_Master_C** GroupCombatMasterActor);
	void SetOrder(const struct FVector& VectorValue);
	void Toggle_Sight(const bool bEnable);
	void SetPatrol(bool ShouldPatrol_0);
	void Apply_Sleep_if_Applicable();
	void SpawnWallHitVFX(const struct FHitResult& Hit);
	void DestoryDamagePointComponents();
	void OnHealthChangedEvent(float DeltaValue, bool* SignificantDamage);
	void OnDeathEvent(const struct FGameplayTagContainer& Tags_0);
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void OnLoaded_47F0ADFB4297F805BA211391D20F7C8F(class UObject* Loaded);
	void MeleeAttack();
	void SetCemeteryCreatureType(ECemeteryCreatureType CreatureType);
	void QuicktimeSuccess();
	void QuicktimeInput(float CurrentProgress, float MaxProgress);
	void MeleeAttackTranslate(const struct FVector& StartVector, const struct FVector& EndVector);
	void ControlRotationFocus(class AActor* FocusTarget);
	void SetMostSuitableMeleeSection(EAnimationMontageIdentifier Value);
	void UpdateBossHealthData(float CurrentHealthPercentage);
	void ReceiveBeginPlay();
	void Receive_Death_Event(const struct FGameplayTagContainer& EventTags);
	void ReceiveHealthChangedEvent(float NewCurrentHealth, float DeltaValue, const struct FGameplayTagContainer& EventTags);
	void OnSleepChanged(bool IsSleeping);
	void AggroEvent(bool bEnabled);
	void WeaponHit(class AActor* Weapon, const struct FGameplayTag& EventTag, const struct FGameplayEventData& Payload);
	void LaserHit();
	void MoveToGrappleLocatio(const struct FVector& Grapple_Location);
	void SpawnCharacterDecal(const struct FHitResult& HitResult);
	void EVENT_OnPoolBeginPlay();
	void BeginPlaySpawn();
	void BeginPlayOnce();
	void Adjust_Auto_Aim_Sphere();
	void SetHasBeenBurned(bool HasBeenBurned_0);
	void SetHasDeathReactionHappened(bool HasDied);
	void ExecuteUbergraph_BP_EnemyCommon(int32 EntryPoint);
	void On_Enemy_Hit__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EnemyCommon_C">();
	}
	static class ABP_EnemyCommon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EnemyCommon_C>();
	}
};
static_assert(alignof(ABP_EnemyCommon_C) == 0x000010, "Wrong alignment on ABP_EnemyCommon_C");
static_assert(sizeof(ABP_EnemyCommon_C) == 0x000AA0, "Wrong size on ABP_EnemyCommon_C");
static_assert(offsetof(ABP_EnemyCommon_C, UberGraphFrame) == 0x000890, "Member 'ABP_EnemyCommon_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, ThreatWidget) == 0x000898, "Member 'ABP_EnemyCommon_C::ThreatWidget' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, AimAssistSphere) == 0x0008A0, "Member 'ABP_EnemyCommon_C::AimAssistSphere' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, SkinnedDecalSampler) == 0x0008A8, "Member 'ABP_EnemyCommon_C::SkinnedDecalSampler' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, AimAssistTargetComponent) == 0x0008B0, "Member 'ABP_EnemyCommon_C::AimAssistTargetComponent' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, BP_DeathBloodPoolSpawner) == 0x0008B8, "Member 'ABP_EnemyCommon_C::BP_DeathBloodPoolSpawner' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, Flow) == 0x0008C0, "Member 'ABP_EnemyCommon_C::Flow' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, MaterialSettingsComponent) == 0x0008C8, "Member 'ABP_EnemyCommon_C::MaterialSettingsComponent' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, MobPlayerCollision) == 0x0008D0, "Member 'ABP_EnemyCommon_C::MobPlayerCollision' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, ProximitySound) == 0x0008D8, "Member 'ABP_EnemyCommon_C::ProximitySound' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, MeleeAttackHitZones) == 0x0008E0, "Member 'ABP_EnemyCommon_C::MeleeAttackHitZones' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, DamagePointSequence) == 0x0008E8, "Member 'ABP_EnemyCommon_C::DamagePointSequence' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, GenericTeamAgent) == 0x0008F0, "Member 'ABP_EnemyCommon_C::GenericTeamAgent' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, MeleeWeaponComponent) == 0x0008F8, "Member 'ABP_EnemyCommon_C::MeleeWeaponComponent' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, HealthHistory) == 0x000900, "Member 'ABP_EnemyCommon_C::HealthHistory' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, EQSDataComponent) == 0x000908, "Member 'ABP_EnemyCommon_C::EQSDataComponent' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, StaggerBonesComponent) == 0x000910, "Member 'ABP_EnemyCommon_C::StaggerBonesComponent' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, Timeline_0_LerpV_83AC807A420A408852C709B84F3B2AD8) == 0x000918, "Member 'ABP_EnemyCommon_C::Timeline_0_LerpV_83AC807A420A408852C709B84F3B2AD8' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, Timeline_0__Direction_83AC807A420A408852C709B84F3B2AD8) == 0x00091C, "Member 'ABP_EnemyCommon_C::Timeline_0__Direction_83AC807A420A408852C709B84F3B2AD8' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, Timeline_0) == 0x000920, "Member 'ABP_EnemyCommon_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, LeftWeaponSocket) == 0x000928, "Member 'ABP_EnemyCommon_C::LeftWeaponSocket' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, HealthRegenHandle) == 0x000930, "Member 'ABP_EnemyCommon_C::HealthRegenHandle' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, RightHandSocket) == 0x000938, "Member 'ABP_EnemyCommon_C::RightHandSocket' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, Bones) == 0x000940, "Member 'ABP_EnemyCommon_C::Bones' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, Dead) == 0x000950, "Member 'ABP_EnemyCommon_C::Dead' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, Size) == 0x000951, "Member 'ABP_EnemyCommon_C::Size' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, GrappleStartLocation) == 0x000954, "Member 'ABP_EnemyCommon_C::GrappleStartLocation' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, RotationLockBlackboardKey) == 0x000960, "Member 'ABP_EnemyCommon_C::RotationLockBlackboardKey' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, UseHomeRange) == 0x000968, "Member 'ABP_EnemyCommon_C::UseHomeRange' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, StartAsSleeping) == 0x000969, "Member 'ABP_EnemyCommon_C::StartAsSleeping' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, ShouldPatrol) == 0x00096A, "Member 'ABP_EnemyCommon_C::ShouldPatrol' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, OrderTarget) == 0x000970, "Member 'ABP_EnemyCommon_C::OrderTarget' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, FlashlightThreat) == 0x000978, "Member 'ABP_EnemyCommon_C::FlashlightThreat' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, HasAggroed) == 0x000979, "Member 'ABP_EnemyCommon_C::HasAggroed' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, UseAggroSound) == 0x00097A, "Member 'ABP_EnemyCommon_C::UseAggroSound' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, AggroSound) == 0x000980, "Member 'ABP_EnemyCommon_C::AggroSound' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, On_Enemy_Hit) == 0x000988, "Member 'ABP_EnemyCommon_C::On_Enemy_Hit' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, PatrolPathRef) == 0x000998, "Member 'ABP_EnemyCommon_C::PatrolPathRef' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, LaserHitFireEffect) == 0x0009C0, "Member 'ABP_EnemyCommon_C::LaserHitFireEffect' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, Sleep_GE) == 0x0009E8, "Member 'ABP_EnemyCommon_C::Sleep_GE' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, Wakeup_GA) == 0x000A10, "Member 'ABP_EnemyCommon_C::Wakeup_GA' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, SkinnedDecalSize) == 0x000A38, "Member 'ABP_EnemyCommon_C::SkinnedDecalSize' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, AimAssistMainTargetSocket) == 0x000A3C, "Member 'ABP_EnemyCommon_C::AimAssistMainTargetSocket' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, AimAssistExtraSocketNames) == 0x000A48, "Member 'ABP_EnemyCommon_C::AimAssistExtraSocketNames' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, DeathSound) == 0x000A58, "Member 'ABP_EnemyCommon_C::DeathSound' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, DefendTarget) == 0x000A60, "Member 'ABP_EnemyCommon_C::DefendTarget' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, GeneratedHueShift) == 0x000A68, "Member 'ABP_EnemyCommon_C::GeneratedHueShift' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, MinRandomHue) == 0x000A6C, "Member 'ABP_EnemyCommon_C::MinRandomHue' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, MaxRandomHue) == 0x000A70, "Member 'ABP_EnemyCommon_C::MaxRandomHue' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, GeneratedHueShiftPower) == 0x000A74, "Member 'ABP_EnemyCommon_C::GeneratedHueShiftPower' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, MinRandomHuePower) == 0x000A78, "Member 'ABP_EnemyCommon_C::MinRandomHuePower' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, MaxRandomHuePower) == 0x000A7C, "Member 'ABP_EnemyCommon_C::MaxRandomHuePower' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, GeneratedValueOverlay) == 0x000A80, "Member 'ABP_EnemyCommon_C::GeneratedValueOverlay' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, MinRandomValueOverlay) == 0x000A84, "Member 'ABP_EnemyCommon_C::MinRandomValueOverlay' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, MaxRandomValueOverlay) == 0x000A88, "Member 'ABP_EnemyCommon_C::MaxRandomValueOverlay' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, bRandomizeColorTints) == 0x000A8C, "Member 'ABP_EnemyCommon_C::bRandomizeColorTints' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, Aim_Assist_Sphere_Adjust_Timer) == 0x000A90, "Member 'ABP_EnemyCommon_C::Aim_Assist_Sphere_Adjust_Timer' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, HasBeenBurned) == 0x000A98, "Member 'ABP_EnemyCommon_C::HasBeenBurned' has a wrong offset!");
static_assert(offsetof(ABP_EnemyCommon_C, HasDeathReactionHappened) == 0x000A99, "Member 'ABP_EnemyCommon_C::HasDeathReactionHappened' has a wrong offset!");

}

