#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OBJPool

#include "Basic.hpp"

#include "OBJPool_classes.hpp"
#include "OBJPool_parameters.hpp"


namespace SDK
{

// Function OBJPool.PooledProjectile.Break
// (Native, Event, Public, BlueprintEvent)

void UPooledProjectile::Break()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledProjectile", "Break");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PooledProjectile.ProjectileBounce
// (Native, Public, HasOutParams, HasDefaults)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVector                          Velocity                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPooledProjectile::ProjectileBounce(const struct FHitResult& HitResult, const struct FVector& Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledProjectile", "ProjectileBounce");

	Params::PooledProjectile_ProjectileBounce Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.Velocity = std::move(Velocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PooledProjectile.ProjectileStop
// (Native, Public, HasOutParams)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UPooledProjectile::ProjectileStop(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledProjectile", "ProjectileStop");

	Params::PooledProjectile_ProjectileStop Parms{};

	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PooledProjectile.Shoot
// (Native, Event, Public, BlueprintEvent)

void UPooledProjectile::Shoot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledProjectile", "Shoot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PooledProjectile.GetMovementComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UProjectileMovementComponent*     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UProjectileMovementComponent* UPooledProjectile::GetMovementComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledProjectile", "GetMovementComponent");

	Params::PooledProjectile_GetMovementComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.ObjectPool.BeginDeferredSpawnFromPool
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObjectPool*                      ObjectPool                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           PooledClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPoolSpawnOptions                SpawnOptions                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform                       SpawnTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ESpawnActorCollisionHandlingMethod      CollisionHandlingOverride                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Reconstruct                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SpawnSuccessful                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APooledActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APooledActor* UObjectPool::BeginDeferredSpawnFromPool(const class UObject* WorldContextObject, class UObjectPool* ObjectPool, class UClass* PooledClass, const struct FPoolSpawnOptions& SpawnOptions, const struct FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner, const bool Reconstruct, bool* SpawnSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ObjectPool", "BeginDeferredSpawnFromPool");

	Params::ObjectPool_BeginDeferredSpawnFromPool Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ObjectPool = ObjectPool;
	Parms.PooledClass = PooledClass;
	Parms.SpawnOptions = std::move(SpawnOptions);
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.CollisionHandlingOverride = CollisionHandlingOverride;
	Parms.Owner = Owner;
	Parms.Reconstruct = Reconstruct;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SpawnSuccessful != nullptr)
		*SpawnSuccessful = Parms.SpawnSuccessful;

	return Parms.ReturnValue;
}


// Function OBJPool.ObjectPool.FinishDeferredSpawnFromPool
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class APooledActor*                     Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Reconstruct                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       SpawnTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class APooledActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APooledActor* UObjectPool::FinishDeferredSpawnFromPool(class APooledActor* Actor, const bool Reconstruct, const struct FTransform& SpawnTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ObjectPool", "FinishDeferredSpawnFromPool");

	Params::ObjectPool_FinishDeferredSpawnFromPool Parms{};

	Parms.Actor = Actor;
	Parms.Reconstruct = Reconstruct;
	Parms.SpawnTransform = std::move(SpawnTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.ObjectPool.EmptyObjectPool
// (Final, Native, Public, BlueprintCallable)

void UObjectPool::EmptyObjectPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ObjectPool", "EmptyObjectPool");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.ObjectPool.GetInactiveObjects
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class APooledActor*>             Inactive                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UObjectPool::GetInactiveObjects(TArray<class APooledActor*>* Inactive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ObjectPool", "GetInactiveObjects");

	Params::ObjectPool_GetInactiveObjects Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Inactive != nullptr)
		*Inactive = std::move(Parms.Inactive);
}


// Function OBJPool.ObjectPool.GetObjectsFromPool
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class APooledActor*>             Spawned                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class APooledActor*>             Inactive                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UObjectPool::GetObjectsFromPool(TArray<class APooledActor*>* Spawned, TArray<class APooledActor*>* Inactive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ObjectPool", "GetObjectsFromPool");

	Params::ObjectPool_GetObjectsFromPool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Spawned != nullptr)
		*Spawned = std::move(Parms.Spawned);

	if (Inactive != nullptr)
		*Inactive = std::move(Parms.Inactive);
}


// Function OBJPool.ObjectPool.GetSpawnedObjects
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class APooledActor*>             Spawned                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UObjectPool::GetSpawnedObjects(TArray<class APooledActor*>* Spawned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ObjectPool", "GetSpawnedObjects");

	Params::ObjectPool_GetSpawnedObjects Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Spawned != nullptr)
		*Spawned = std::move(Parms.Spawned);
}


// Function OBJPool.ObjectPool.InitializeObjectPool
// (Native, Public, BlueprintCallable)

void UObjectPool::InitializeObjectPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ObjectPool", "InitializeObjectPool");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.ObjectPool.InitializeObjectPoolWithNewTemplateClass
// (Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class APooledActor>         Template                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SizeOfPool                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UObjectPool::InitializeObjectPoolWithNewTemplateClass(const TSubclassOf<class APooledActor> Template, const int32 SizeOfPool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ObjectPool", "InitializeObjectPoolWithNewTemplateClass");

	Params::ObjectPool_InitializeObjectPoolWithNewTemplateClass Parms{};

	Parms.Template = Template;
	Parms.SizeOfPool = SizeOfPool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.ObjectPool.ReturnActor
// (Final, Native, Public)
// Parameters:
// class APooledActor*                     PooledActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UObjectPool::ReturnActor(class APooledActor* PooledActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ObjectPool", "ReturnActor");

	Params::ObjectPool_ReturnActor Parms{};

	Parms.PooledActor = PooledActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.ObjectPool.GetInactiveObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APooledActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APooledActor* UObjectPool::GetInactiveObject() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ObjectPool", "GetInactiveObject");

	Params::ObjectPool_GetInactiveObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.ObjectPool.GetObjectArray
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class APooledActor*>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class APooledActor*> UObjectPool::GetObjectArray() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ObjectPool", "GetObjectArray");

	Params::ObjectPool_GetObjectArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.ObjectPool.GetSpawnedObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APooledActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APooledActor* UObjectPool::GetSpawnedObject() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ObjectPool", "GetSpawnedObject");

	Params::ObjectPool_GetSpawnedObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.PawnPool.BeginDeferredSpawnFromPool
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPawnPool*                        ObjectPool                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           PooledClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPoolSpawnOptions                SpawnOptions                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform                       SpawnTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ESpawnActorCollisionHandlingMethod      CollisionHandlingOverride                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Reconstruct                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SpawnSuccessful                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APooledPawn*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APooledPawn* UPawnPool::BeginDeferredSpawnFromPool(const class UObject* WorldContextObject, class UPawnPool* ObjectPool, class UClass* PooledClass, const struct FPoolSpawnOptions& SpawnOptions, const struct FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner, const bool Reconstruct, bool* SpawnSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PawnPool", "BeginDeferredSpawnFromPool");

	Params::PawnPool_BeginDeferredSpawnFromPool Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ObjectPool = ObjectPool;
	Parms.PooledClass = PooledClass;
	Parms.SpawnOptions = std::move(SpawnOptions);
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.CollisionHandlingOverride = CollisionHandlingOverride;
	Parms.Owner = Owner;
	Parms.Reconstruct = Reconstruct;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SpawnSuccessful != nullptr)
		*SpawnSuccessful = Parms.SpawnSuccessful;

	return Parms.ReturnValue;
}


// Function OBJPool.PawnPool.FinishDeferredSpawnFromPool
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class APooledPawn*                      Pawn                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Reconstruct                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       SpawnTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class APooledPawn*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APooledPawn* UPawnPool::FinishDeferredSpawnFromPool(class APooledPawn* Pawn, const bool Reconstruct, const struct FTransform& SpawnTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PawnPool", "FinishDeferredSpawnFromPool");

	Params::PawnPool_FinishDeferredSpawnFromPool Parms{};

	Parms.Pawn = Pawn;
	Parms.Reconstruct = Reconstruct;
	Parms.SpawnTransform = std::move(SpawnTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.PawnPool.EmptyObjectPool
// (Final, Native, Public, BlueprintCallable)

void UPawnPool::EmptyObjectPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnPool", "EmptyObjectPool");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PawnPool.GetInactiveObjects
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class APooledPawn*>              Inactive                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UPawnPool::GetInactiveObjects(TArray<class APooledPawn*>* Inactive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnPool", "GetInactiveObjects");

	Params::PawnPool_GetInactiveObjects Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Inactive != nullptr)
		*Inactive = std::move(Parms.Inactive);
}


// Function OBJPool.PawnPool.GetObjectsFromPool
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class APooledPawn*>              Spawned                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class APooledPawn*>              Inactive                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UPawnPool::GetObjectsFromPool(TArray<class APooledPawn*>* Spawned, TArray<class APooledPawn*>* Inactive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnPool", "GetObjectsFromPool");

	Params::PawnPool_GetObjectsFromPool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Spawned != nullptr)
		*Spawned = std::move(Parms.Spawned);

	if (Inactive != nullptr)
		*Inactive = std::move(Parms.Inactive);
}


// Function OBJPool.PawnPool.GetSpawnedObjects
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class APooledPawn*>              Spawned                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UPawnPool::GetSpawnedObjects(TArray<class APooledPawn*>* Spawned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnPool", "GetSpawnedObjects");

	Params::PawnPool_GetSpawnedObjects Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Spawned != nullptr)
		*Spawned = std::move(Parms.Spawned);
}


// Function OBJPool.PawnPool.InitializeObjectPool
// (Native, Public, BlueprintCallable)

void UPawnPool::InitializeObjectPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnPool", "InitializeObjectPool");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PawnPool.InitializeObjectPoolWithNewTemplateClass
// (Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class APooledPawn>          Template                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SizeOfPool                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPawnPool::InitializeObjectPoolWithNewTemplateClass(const TSubclassOf<class APooledPawn> Template, const int32 SizeOfPool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnPool", "InitializeObjectPoolWithNewTemplateClass");

	Params::PawnPool_InitializeObjectPoolWithNewTemplateClass Parms{};

	Parms.Template = Template;
	Parms.SizeOfPool = SizeOfPool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PawnPool.ReturnActor
// (Final, Native, Public)
// Parameters:
// class APooledPawn*                      PooledActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPawnPool::ReturnActor(class APooledPawn* PooledActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnPool", "ReturnActor");

	Params::PawnPool_ReturnActor Parms{};

	Parms.PooledActor = PooledActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PawnPool.GetInactiveObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APooledPawn*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APooledPawn* UPawnPool::GetInactiveObject() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnPool", "GetInactiveObject");

	Params::PawnPool_GetInactiveObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.PawnPool.GetObjectArray
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class APooledPawn*>              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class APooledPawn*> UPawnPool::GetObjectArray() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnPool", "GetObjectArray");

	Params::PawnPool_GetObjectArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.PawnPool.GetSpawnedObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APooledPawn*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APooledPawn* UPawnPool::GetSpawnedObject() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PawnPool", "GetSpawnedObject");

	Params::PawnPool_GetSpawnedObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.CharacterPool.BeginDeferredSpawnFromPool
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCharacterPool*                   ObjectPool                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           PooledClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPoolSpawnOptions                SpawnOptions                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform                       SpawnTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ESpawnActorCollisionHandlingMethod      CollisionHandlingOverride                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Reconstruct                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SpawnSuccessful                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APooledCharacter*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APooledCharacter* UCharacterPool::BeginDeferredSpawnFromPool(const class UObject* WorldContextObject, class UCharacterPool* ObjectPool, class UClass* PooledClass, const struct FPoolSpawnOptions& SpawnOptions, const struct FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner, const bool Reconstruct, bool* SpawnSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterPool", "BeginDeferredSpawnFromPool");

	Params::CharacterPool_BeginDeferredSpawnFromPool Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ObjectPool = ObjectPool;
	Parms.PooledClass = PooledClass;
	Parms.SpawnOptions = std::move(SpawnOptions);
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.CollisionHandlingOverride = CollisionHandlingOverride;
	Parms.Owner = Owner;
	Parms.Reconstruct = Reconstruct;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SpawnSuccessful != nullptr)
		*SpawnSuccessful = Parms.SpawnSuccessful;

	return Parms.ReturnValue;
}


// Function OBJPool.CharacterPool.FinishDeferredSpawnFromPool
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class APooledCharacter*                 Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Reconstruct                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       SpawnTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class APooledCharacter*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APooledCharacter* UCharacterPool::FinishDeferredSpawnFromPool(class APooledCharacter* Character, const bool Reconstruct, const struct FTransform& SpawnTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CharacterPool", "FinishDeferredSpawnFromPool");

	Params::CharacterPool_FinishDeferredSpawnFromPool Parms{};

	Parms.Character = Character;
	Parms.Reconstruct = Reconstruct;
	Parms.SpawnTransform = std::move(SpawnTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.CharacterPool.EmptyObjectPool
// (Final, Native, Public, BlueprintCallable)

void UCharacterPool::EmptyObjectPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterPool", "EmptyObjectPool");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.CharacterPool.GetInactiveObjects
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class APooledCharacter*>         Inactive                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UCharacterPool::GetInactiveObjects(TArray<class APooledCharacter*>* Inactive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterPool", "GetInactiveObjects");

	Params::CharacterPool_GetInactiveObjects Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Inactive != nullptr)
		*Inactive = std::move(Parms.Inactive);
}


// Function OBJPool.CharacterPool.GetObjectsFromPool
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class APooledCharacter*>         Spawned                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class APooledCharacter*>         Inactive                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UCharacterPool::GetObjectsFromPool(TArray<class APooledCharacter*>* Spawned, TArray<class APooledCharacter*>* Inactive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterPool", "GetObjectsFromPool");

	Params::CharacterPool_GetObjectsFromPool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Spawned != nullptr)
		*Spawned = std::move(Parms.Spawned);

	if (Inactive != nullptr)
		*Inactive = std::move(Parms.Inactive);
}


// Function OBJPool.CharacterPool.GetSpawnedObjects
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class APooledCharacter*>         Spawned                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UCharacterPool::GetSpawnedObjects(TArray<class APooledCharacter*>* Spawned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterPool", "GetSpawnedObjects");

	Params::CharacterPool_GetSpawnedObjects Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Spawned != nullptr)
		*Spawned = std::move(Parms.Spawned);
}


// Function OBJPool.CharacterPool.InitializeObjectPool
// (Native, Public, BlueprintCallable)

void UCharacterPool::InitializeObjectPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterPool", "InitializeObjectPool");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.CharacterPool.InitializeObjectPoolWithNewTemplateClass
// (Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class APooledCharacter>     Template                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SizeOfPool                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterPool::InitializeObjectPoolWithNewTemplateClass(const TSubclassOf<class APooledCharacter> Template, const int32 SizeOfPool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterPool", "InitializeObjectPoolWithNewTemplateClass");

	Params::CharacterPool_InitializeObjectPoolWithNewTemplateClass Parms{};

	Parms.Template = Template;
	Parms.SizeOfPool = SizeOfPool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.CharacterPool.ReturnActor
// (Final, Native, Public)
// Parameters:
// class APooledCharacter*                 PooledActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterPool::ReturnActor(class APooledCharacter* PooledActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterPool", "ReturnActor");

	Params::CharacterPool_ReturnActor Parms{};

	Parms.PooledActor = PooledActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.CharacterPool.GetInactiveObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APooledCharacter*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APooledCharacter* UCharacterPool::GetInactiveObject() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterPool", "GetInactiveObject");

	Params::CharacterPool_GetInactiveObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.CharacterPool.GetObjectArray
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class APooledCharacter*>         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class APooledCharacter*> UCharacterPool::GetObjectArray() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterPool", "GetObjectArray");

	Params::CharacterPool_GetObjectArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.CharacterPool.GetSpawnedObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APooledCharacter*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APooledCharacter* UCharacterPool::GetSpawnedObject() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterPool", "GetSpawnedObject");

	Params::CharacterPool_GetSpawnedObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.SharedObjectPool.BeginDeferredSpawnFromPool
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USharedObjectPool*                SharedPool                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           Class_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPoolSpawnOptions                SpawnOptions                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform                       SpawnTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ESpawnActorCollisionHandlingMethod      CollisionHandlingOverride                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Reconstruct                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SpawnSuccessful                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APooledActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APooledActor* USharedObjectPool::BeginDeferredSpawnFromPool(const class UObject* WorldContextObject, class USharedObjectPool* SharedPool, class UClass* Class_0, const struct FPoolSpawnOptions& SpawnOptions, const struct FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner, const bool Reconstruct, bool* SpawnSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SharedObjectPool", "BeginDeferredSpawnFromPool");

	Params::SharedObjectPool_BeginDeferredSpawnFromPool Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.SharedPool = SharedPool;
	Parms.Class_0 = Class_0;
	Parms.SpawnOptions = std::move(SpawnOptions);
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.CollisionHandlingOverride = CollisionHandlingOverride;
	Parms.Owner = Owner;
	Parms.Reconstruct = Reconstruct;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SpawnSuccessful != nullptr)
		*SpawnSuccessful = Parms.SpawnSuccessful;

	return Parms.ReturnValue;
}


// Function OBJPool.SharedObjectPool.FinishDeferredSpawnFromPool
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class APooledActor*                     Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Reconstruct                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       SpawnTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class APooledActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APooledActor* USharedObjectPool::FinishDeferredSpawnFromPool(class APooledActor* Actor, const bool Reconstruct, const struct FTransform& SpawnTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SharedObjectPool", "FinishDeferredSpawnFromPool");

	Params::SharedObjectPool_FinishDeferredSpawnFromPool Parms{};

	Parms.Actor = Actor;
	Parms.Reconstruct = Reconstruct;
	Parms.SpawnTransform = std::move(SpawnTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.SharedObjectPool.EmptyObjectPool
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                           Class_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USharedObjectPool::EmptyObjectPool(const class UClass* Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SharedObjectPool", "EmptyObjectPool");

	Params::SharedObjectPool_EmptyObjectPool Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.SharedObjectPool.GetInactiveObjects
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UClass*                           Class_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class APooledActor*>             Inactive                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USharedObjectPool::GetInactiveObjects(const class UClass* Class_0, TArray<class APooledActor*>* Inactive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SharedObjectPool", "GetInactiveObjects");

	Params::SharedObjectPool_GetInactiveObjects Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Inactive != nullptr)
		*Inactive = std::move(Parms.Inactive);
}


// Function OBJPool.SharedObjectPool.GetObjectsFromPool
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UClass*                           Class_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class APooledActor*>             Spawned                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class APooledActor*>             Inactive                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USharedObjectPool::GetObjectsFromPool(const class UClass* Class_0, TArray<class APooledActor*>* Spawned, TArray<class APooledActor*>* Inactive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SharedObjectPool", "GetObjectsFromPool");

	Params::SharedObjectPool_GetObjectsFromPool Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Spawned != nullptr)
		*Spawned = std::move(Parms.Spawned);

	if (Inactive != nullptr)
		*Inactive = std::move(Parms.Inactive);
}


// Function OBJPool.SharedObjectPool.GetSpawnedObjects
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UClass*                           Class_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class APooledActor*>             Spawned                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USharedObjectPool::GetSpawnedObjects(const class UClass* Class_0, TArray<class APooledActor*>* Spawned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SharedObjectPool", "GetSpawnedObjects");

	Params::SharedObjectPool_GetSpawnedObjects Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Spawned != nullptr)
		*Spawned = std::move(Parms.Spawned);
}


// Function OBJPool.SharedObjectPool.InitializeObjectPool
// (Final, Native, Public, BlueprintCallable)

void USharedObjectPool::InitializeObjectPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SharedObjectPool", "InitializeObjectPool");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.SharedObjectPool.ReturnActor
// (Final, Native, Public)
// Parameters:
// class APooledActor*                     PooledActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USharedObjectPool::ReturnActor(class APooledActor* PooledActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SharedObjectPool", "ReturnActor");

	Params::SharedObjectPool_ReturnActor Parms{};

	Parms.PooledActor = PooledActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.SharedObjectPool.GetInactiveObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UClass*                           Class_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APooledActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APooledActor* USharedObjectPool::GetInactiveObject(const class UClass* Class_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SharedObjectPool", "GetInactiveObject");

	Params::SharedObjectPool_GetInactiveObject Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.SharedObjectPool.GetObjectArray
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class APooledActor*>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class APooledActor*> USharedObjectPool::GetObjectArray() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SharedObjectPool", "GetObjectArray");

	Params::SharedObjectPool_GetObjectArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.SharedObjectPool.GetSpawnedObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UClass*                           Class_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APooledActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APooledActor* USharedObjectPool::GetSpawnedObject(const class UClass* Class_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SharedObjectPool", "GetSpawnedObject");

	Params::SharedObjectPool_GetSpawnedObject Parms{};

	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.PooledActor.EVENT_OnPoolBeginPlay
// (Native, Event, Public, BlueprintEvent)

void APooledActor::EVENT_OnPoolBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledActor", "EVENT_OnPoolBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PooledActor.EVENT_OnPoolEndPlay
// (Native, Event, Public, BlueprintEvent)

void APooledActor::EVENT_OnPoolEndPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledActor", "EVENT_OnPoolEndPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PooledActor.ReturnToPool
// (Final, Native, Public, BlueprintCallable)

void APooledActor::ReturnToPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledActor", "ReturnToPool");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PooledActor.SetLifeSpanPool
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InLifespan                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APooledActor::SetLifeSpanPool(float InLifespan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledActor", "SetLifeSpanPool");

	Params::PooledActor_SetLifeSpanPool Parms{};

	Parms.InLifespan = InLifespan;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PooledActor.SpawnFromPool
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// bool                                    Reconstruct                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPoolSpawnOptions                SpawnOptions                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform                       SpawnTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void APooledActor::SpawnFromPool(const bool Reconstruct, const struct FPoolSpawnOptions& SpawnOptions, const struct FTransform& SpawnTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledActor", "SpawnFromPool");

	Params::PooledActor_SpawnFromPool Parms{};

	Parms.Reconstruct = Reconstruct;
	Parms.SpawnOptions = std::move(SpawnOptions);
	Parms.SpawnTransform = std::move(SpawnTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PooledActor.GetLifeSpanPool
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float APooledActor::GetLifeSpanPool() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledActor", "GetLifeSpanPool");

	Params::PooledActor_GetLifeSpanPool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.PooledActor.GetOwningPool
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObjectPool*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObjectPool* APooledActor::GetOwningPool() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledActor", "GetOwningPool");

	Params::PooledActor_GetOwningPool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.PooledActor.GetSharedPool
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USharedObjectPool*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USharedObjectPool* APooledActor::GetSharedPool() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledActor", "GetSharedPool");

	Params::PooledActor_GetSharedPool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.PooledCharacter.EVENT_OnPoolBeginPlay
// (Native, Event, Public, BlueprintEvent)

void APooledCharacter::EVENT_OnPoolBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledCharacter", "EVENT_OnPoolBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PooledCharacter.EVENT_OnPoolEndPlay
// (Native, Event, Public, BlueprintEvent)

void APooledCharacter::EVENT_OnPoolEndPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledCharacter", "EVENT_OnPoolEndPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PooledCharacter.ReturnToPool
// (Final, Native, Public, BlueprintCallable)

void APooledCharacter::ReturnToPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledCharacter", "ReturnToPool");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PooledCharacter.SetLifeSpanPool
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InLifespan                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APooledCharacter::SetLifeSpanPool(float InLifespan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledCharacter", "SetLifeSpanPool");

	Params::PooledCharacter_SetLifeSpanPool Parms{};

	Parms.InLifespan = InLifespan;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PooledCharacter.SpawnFromPool
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// bool                                    Reconstruct                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPoolSpawnOptions                SpawnOptions                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform                       SpawnTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void APooledCharacter::SpawnFromPool(const bool Reconstruct, const struct FPoolSpawnOptions& SpawnOptions, const struct FTransform& SpawnTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledCharacter", "SpawnFromPool");

	Params::PooledCharacter_SpawnFromPool Parms{};

	Parms.Reconstruct = Reconstruct;
	Parms.SpawnOptions = std::move(SpawnOptions);
	Parms.SpawnTransform = std::move(SpawnTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PooledCharacter.GetLifeSpanPool
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float APooledCharacter::GetLifeSpanPool() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledCharacter", "GetLifeSpanPool");

	Params::PooledCharacter_GetLifeSpanPool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.PooledCharacter.GetOwningPool
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCharacterPool*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCharacterPool* APooledCharacter::GetOwningPool() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledCharacter", "GetOwningPool");

	Params::PooledCharacter_GetOwningPool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.PooledPawn.EVENT_OnPoolBeginPlay
// (Native, Event, Public, BlueprintEvent)

void APooledPawn::EVENT_OnPoolBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledPawn", "EVENT_OnPoolBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PooledPawn.EVENT_OnPoolEndPlay
// (Native, Event, Public, BlueprintEvent)

void APooledPawn::EVENT_OnPoolEndPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledPawn", "EVENT_OnPoolEndPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PooledPawn.ReturnToPool
// (Final, Native, Public, BlueprintCallable)

void APooledPawn::ReturnToPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledPawn", "ReturnToPool");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PooledPawn.SetLifeSpanPool
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InLifespan                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APooledPawn::SetLifeSpanPool(float InLifespan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledPawn", "SetLifeSpanPool");

	Params::PooledPawn_SetLifeSpanPool Parms{};

	Parms.InLifespan = InLifespan;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PooledPawn.SpawnFromPool
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// bool                                    Reconstruct                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPoolSpawnOptions                SpawnOptions                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform                       SpawnTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void APooledPawn::SpawnFromPool(const bool Reconstruct, const struct FPoolSpawnOptions& SpawnOptions, const struct FTransform& SpawnTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledPawn", "SpawnFromPool");

	Params::PooledPawn_SpawnFromPool Parms{};

	Parms.Reconstruct = Reconstruct;
	Parms.SpawnOptions = std::move(SpawnOptions);
	Parms.SpawnTransform = std::move(SpawnTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PooledPawn.GetLifeSpanPool
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float APooledPawn::GetLifeSpanPool() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledPawn", "GetLifeSpanPool");

	Params::PooledPawn_GetLifeSpanPool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.PooledPawn.GetOwningPool
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPawnPool*                        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPawnPool* APooledPawn::GetOwningPool() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledPawn", "GetOwningPool");

	Params::PooledPawn_GetOwningPool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OBJPool.PooledSplineProjectile.Break
// (Native, Event, Public, BlueprintEvent)

void UPooledSplineProjectile::Break()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledSplineProjectile", "Break");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PooledSplineProjectile.SetSplineComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USplineComponent*                 Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPooledSplineProjectile::SetSplineComponent(class USplineComponent* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledSplineProjectile", "SetSplineComponent");

	Params::PooledSplineProjectile_SetSplineComponent Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PooledSplineProjectile.Shoot
// (Native, Event, Public, BlueprintEvent)

void UPooledSplineProjectile::Shoot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledSplineProjectile", "Shoot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OBJPool.PooledSplineProjectile.GetSplineComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USplineComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USplineComponent* UPooledSplineProjectile::GetSplineComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PooledSplineProjectile", "GetSplineComponent");

	Params::PooledSplineProjectile_GetSplineComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

