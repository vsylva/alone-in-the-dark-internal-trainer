#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Rat

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Rat.ABP_Rat_C
// 0x0460 (0x0730 - 0x02D0)
class UABP_Rat_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2C8[0x8];                                      // 0x02C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02D8(0x0030)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0308(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0330(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0358(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0380(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x03A8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x03D0(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x03F8(0x00B0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x04A8(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x04D8(0x00B0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0588(0x0030)()
	struct FAnimNode_RandomPlayer                 AnimGraphNode_RandomPlayer;                        // 0x05B8(0x0078)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0630(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0660(0x00B0)()
	struct FVector                                Velocity;                                          // 0x0710(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71C[0x4];                                      // 0x071C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_FleeingRatEvent_C*                  RatOwner;                                          // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFalling;                                         // 0x0728(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsRunning;                                         // 0x0729(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TransitionFromFallingToEat;                        // 0x072A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TransitionFromFallingToRun;                        // 0x072B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void ExecuteUbergraph_ABP_Rat(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Rat_C">();
	}
	static class UABP_Rat_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Rat_C>();
	}
};
static_assert(alignof(UABP_Rat_C) == 0x000010, "Wrong alignment on UABP_Rat_C");
static_assert(sizeof(UABP_Rat_C) == 0x000730, "Wrong size on UABP_Rat_C");
static_assert(offsetof(UABP_Rat_C, UberGraphFrame) == 0x0002D0, "Member 'UABP_Rat_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Rat_C, AnimGraphNode_Root) == 0x0002D8, "Member 'UABP_Rat_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Rat_C, AnimGraphNode_TransitionResult_5) == 0x000308, "Member 'UABP_Rat_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_Rat_C, AnimGraphNode_TransitionResult_4) == 0x000330, "Member 'UABP_Rat_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Rat_C, AnimGraphNode_TransitionResult_3) == 0x000358, "Member 'UABP_Rat_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Rat_C, AnimGraphNode_TransitionResult_2) == 0x000380, "Member 'UABP_Rat_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Rat_C, AnimGraphNode_TransitionResult_1) == 0x0003A8, "Member 'UABP_Rat_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Rat_C, AnimGraphNode_TransitionResult) == 0x0003D0, "Member 'UABP_Rat_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_Rat_C, AnimGraphNode_SequencePlayer_1) == 0x0003F8, "Member 'UABP_Rat_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Rat_C, AnimGraphNode_StateResult_2) == 0x0004A8, "Member 'UABP_Rat_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Rat_C, AnimGraphNode_SequencePlayer) == 0x0004D8, "Member 'UABP_Rat_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Rat_C, AnimGraphNode_StateResult_1) == 0x000588, "Member 'UABP_Rat_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Rat_C, AnimGraphNode_RandomPlayer) == 0x0005B8, "Member 'UABP_Rat_C::AnimGraphNode_RandomPlayer' has a wrong offset!");
static_assert(offsetof(UABP_Rat_C, AnimGraphNode_StateResult) == 0x000630, "Member 'UABP_Rat_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_Rat_C, AnimGraphNode_StateMachine) == 0x000660, "Member 'UABP_Rat_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_Rat_C, Velocity) == 0x000710, "Member 'UABP_Rat_C::Velocity' has a wrong offset!");
static_assert(offsetof(UABP_Rat_C, RatOwner) == 0x000720, "Member 'UABP_Rat_C::RatOwner' has a wrong offset!");
static_assert(offsetof(UABP_Rat_C, IsFalling) == 0x000728, "Member 'UABP_Rat_C::IsFalling' has a wrong offset!");
static_assert(offsetof(UABP_Rat_C, IsRunning) == 0x000729, "Member 'UABP_Rat_C::IsRunning' has a wrong offset!");
static_assert(offsetof(UABP_Rat_C, TransitionFromFallingToEat) == 0x00072A, "Member 'UABP_Rat_C::TransitionFromFallingToEat' has a wrong offset!");
static_assert(offsetof(UABP_Rat_C, TransitionFromFallingToRun) == 0x00072B, "Member 'UABP_Rat_C::TransitionFromFallingToRun' has a wrong offset!");

}

