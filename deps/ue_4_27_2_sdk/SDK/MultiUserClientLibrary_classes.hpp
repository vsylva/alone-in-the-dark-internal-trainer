#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MultiUserClientLibrary

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "MultiUserClientLibrary_structs.hpp"


namespace SDK
{

// Class MultiUserClientLibrary.MultiUserClientStatics
// 0x0000 (0x0028 - 0x0028)
class UMultiUserClientStatics final : public UBlueprintFunctionLibrary
{
public:
	static bool ConfigureMultiUserClient(const struct FMultiUserClientConfig& ClientConfig);
	static struct FMultiUserConnectionError GetLastMultiUserConnectionError();
	static struct FMultiUserClientInfo GetLocalMultiUserClientInfo();
	static bool GetMultiUserClientInfoByName(const class FString& ClientName, struct FMultiUserClientInfo* ClientInfo);
	static bool GetMultiUserConnectionStatus();
	static EMultiUserConnectionStatus GetMultiUserConnectionStatusDetail();
	static struct FTransform GetMultiUserPresenceTransform(const struct FGuid& ClientEndpointId);
	static bool GetRemoteMultiUserClientInfos(TArray<struct FMultiUserClientInfo>* ClientInfos);
	static void JumpToMultiUserPresence(const class FString& OtherUserName, const struct FTransform& TransformOffset);
	static void PersistMultiUserSessionChanges();
	static void SetMultiUserPresenceEnabled(const bool IsEnabled);
	static void SetMultiUserPresenceVisibility(const class FString& Name_0, bool Visibility, bool PropagateToAll);
	static void SetMultiUserPresenceVisibilityById(const struct FGuid& ClientEndpointId, bool Visibility, bool PropagateToAll);
	static bool StartMultiUserDefaultConnection();
	static void UpdateWorkspaceModifiedPackages();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MultiUserClientStatics">();
	}
	static class UMultiUserClientStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMultiUserClientStatics>();
	}
};
static_assert(alignof(UMultiUserClientStatics) == 0x000008, "Wrong alignment on UMultiUserClientStatics");
static_assert(sizeof(UMultiUserClientStatics) == 0x000028, "Wrong size on UMultiUserClientStatics");

}

