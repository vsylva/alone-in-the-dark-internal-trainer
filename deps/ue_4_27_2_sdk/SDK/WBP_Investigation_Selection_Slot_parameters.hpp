#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Investigation_Selection_Slot

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WBP_Investigation_Selection_Slot.WBP_Investigation_Selection_Slot_C.PlayItemSlotAnimationBackward
// 0x0010 (0x0010 - 0x0000)
struct WBP_Investigation_Selection_Slot_C_PlayItemSlotAnimationBackward final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Investigation_Selection_Slot_C_PlayItemSlotAnimationBackward) == 0x000008, "Wrong alignment on WBP_Investigation_Selection_Slot_C_PlayItemSlotAnimationBackward");
static_assert(sizeof(WBP_Investigation_Selection_Slot_C_PlayItemSlotAnimationBackward) == 0x000010, "Wrong size on WBP_Investigation_Selection_Slot_C_PlayItemSlotAnimationBackward");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_PlayItemSlotAnimationBackward, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'WBP_Investigation_Selection_Slot_C_PlayItemSlotAnimationBackward::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_PlayItemSlotAnimationBackward, CallFunc_PlayAnimation_ReturnValue_1) == 0x000008, "Member 'WBP_Investigation_Selection_Slot_C_PlayItemSlotAnimationBackward::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function WBP_Investigation_Selection_Slot.WBP_Investigation_Selection_Slot_C.PlayItemSlotAnimationForward
// 0x0010 (0x0010 - 0x0000)
struct WBP_Investigation_Selection_Slot_C_PlayItemSlotAnimationForward final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Investigation_Selection_Slot_C_PlayItemSlotAnimationForward) == 0x000008, "Wrong alignment on WBP_Investigation_Selection_Slot_C_PlayItemSlotAnimationForward");
static_assert(sizeof(WBP_Investigation_Selection_Slot_C_PlayItemSlotAnimationForward) == 0x000010, "Wrong size on WBP_Investigation_Selection_Slot_C_PlayItemSlotAnimationForward");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_PlayItemSlotAnimationForward, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'WBP_Investigation_Selection_Slot_C_PlayItemSlotAnimationForward::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_PlayItemSlotAnimationForward, CallFunc_PlayAnimation_ReturnValue_1) == 0x000008, "Member 'WBP_Investigation_Selection_Slot_C_PlayItemSlotAnimationForward::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function WBP_Investigation_Selection_Slot.WBP_Investigation_Selection_Slot_C.ItemSlotAnimation
// 0x0018 (0x0018 - 0x0000)
struct WBP_Investigation_Selection_Slot_C_ItemSlotAnimation final
{
public:
	bool                                          Finished;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParameterName;                                     // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetEffectMaterial_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Investigation_Selection_Slot_C_ItemSlotAnimation) == 0x000008, "Wrong alignment on WBP_Investigation_Selection_Slot_C_ItemSlotAnimation");
static_assert(sizeof(WBP_Investigation_Selection_Slot_C_ItemSlotAnimation) == 0x000018, "Wrong size on WBP_Investigation_Selection_Slot_C_ItemSlotAnimation");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_ItemSlotAnimation, Finished) == 0x000000, "Member 'WBP_Investigation_Selection_Slot_C_ItemSlotAnimation::Finished' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_ItemSlotAnimation, ParameterName) == 0x000004, "Member 'WBP_Investigation_Selection_Slot_C_ItemSlotAnimation::ParameterName' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_ItemSlotAnimation, CallFunc_GetEffectMaterial_ReturnValue) == 0x000010, "Member 'WBP_Investigation_Selection_Slot_C_ItemSlotAnimation::CallFunc_GetEffectMaterial_ReturnValue' has a wrong offset!");

// Function WBP_Investigation_Selection_Slot.WBP_Investigation_Selection_Slot_C.UpdateNewItemNotificationShimmer
// 0x0010 (0x0010 - 0x0000)
struct WBP_Investigation_Selection_Slot_C_UpdateNewItemNotificationShimmer final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetEffectMaterial_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Investigation_Selection_Slot_C_UpdateNewItemNotificationShimmer) == 0x000008, "Wrong alignment on WBP_Investigation_Selection_Slot_C_UpdateNewItemNotificationShimmer");
static_assert(sizeof(WBP_Investigation_Selection_Slot_C_UpdateNewItemNotificationShimmer) == 0x000010, "Wrong size on WBP_Investigation_Selection_Slot_C_UpdateNewItemNotificationShimmer");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_UpdateNewItemNotificationShimmer, Enabled) == 0x000000, "Member 'WBP_Investigation_Selection_Slot_C_UpdateNewItemNotificationShimmer::Enabled' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_UpdateNewItemNotificationShimmer, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000004, "Member 'WBP_Investigation_Selection_Slot_C_UpdateNewItemNotificationShimmer::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_UpdateNewItemNotificationShimmer, CallFunc_GetEffectMaterial_ReturnValue) == 0x000008, "Member 'WBP_Investigation_Selection_Slot_C_UpdateNewItemNotificationShimmer::CallFunc_GetEffectMaterial_ReturnValue' has a wrong offset!");

// Function WBP_Investigation_Selection_Slot.WBP_Investigation_Selection_Slot_C.UpdateSlotWithItemData
// 0x0028 (0x0028 - 0x0000)
struct WBP_Investigation_Selection_Slot_C_UpdateSlotWithItemData final
{
public:
	TSoftObjectPtr<class UItemData>               ItemData_0;                                        // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Investigation_Selection_Slot_C_UpdateSlotWithItemData) == 0x000008, "Wrong alignment on WBP_Investigation_Selection_Slot_C_UpdateSlotWithItemData");
static_assert(sizeof(WBP_Investigation_Selection_Slot_C_UpdateSlotWithItemData) == 0x000028, "Wrong size on WBP_Investigation_Selection_Slot_C_UpdateSlotWithItemData");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_UpdateSlotWithItemData, ItemData_0) == 0x000000, "Member 'WBP_Investigation_Selection_Slot_C_UpdateSlotWithItemData::ItemData_0' has a wrong offset!");

// Function WBP_Investigation_Selection_Slot.WBP_Investigation_Selection_Slot_C.SetLabelPosition
// 0x0010 (0x0010 - 0x0000)
struct WBP_Investigation_Selection_Slot_C_SetLabelPosition final
{
public:
	class UCanvasPanelSlot*                       K2Node_DynamicCast_AsCanvas_Panel_Slot;            // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Investigation_Selection_Slot_C_SetLabelPosition) == 0x000008, "Wrong alignment on WBP_Investigation_Selection_Slot_C_SetLabelPosition");
static_assert(sizeof(WBP_Investigation_Selection_Slot_C_SetLabelPosition) == 0x000010, "Wrong size on WBP_Investigation_Selection_Slot_C_SetLabelPosition");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_SetLabelPosition, K2Node_DynamicCast_AsCanvas_Panel_Slot) == 0x000000, "Member 'WBP_Investigation_Selection_Slot_C_SetLabelPosition::K2Node_DynamicCast_AsCanvas_Panel_Slot' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_SetLabelPosition, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'WBP_Investigation_Selection_Slot_C_SetLabelPosition::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WBP_Investigation_Selection_Slot.WBP_Investigation_Selection_Slot_C.UpdateVisiblity
// 0x0004 (0x0004 - 0x0000)
struct WBP_Investigation_Selection_Slot_C_UpdateVisiblity final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Investigation_Selection_Slot_C_UpdateVisiblity) == 0x000001, "Wrong alignment on WBP_Investigation_Selection_Slot_C_UpdateVisiblity");
static_assert(sizeof(WBP_Investigation_Selection_Slot_C_UpdateVisiblity) == 0x000004, "Wrong size on WBP_Investigation_Selection_Slot_C_UpdateVisiblity");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_UpdateVisiblity, Temp_bool_Variable) == 0x000000, "Member 'WBP_Investigation_Selection_Slot_C_UpdateVisiblity::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_UpdateVisiblity, Temp_byte_Variable) == 0x000001, "Member 'WBP_Investigation_Selection_Slot_C_UpdateVisiblity::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_UpdateVisiblity, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_Investigation_Selection_Slot_C_UpdateVisiblity::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_UpdateVisiblity, K2Node_Select_Default) == 0x000003, "Member 'WBP_Investigation_Selection_Slot_C_UpdateVisiblity::K2Node_Select_Default' has a wrong offset!");

// Function WBP_Investigation_Selection_Slot.WBP_Investigation_Selection_Slot_C.UpdateSlotSize
// 0x0020 (0x0020 - 0x0000)
struct WBP_Investigation_Selection_Slot_C_UpdateSlotSize final
{
public:
	float                                         SizeY;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SizeX;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       K2Node_DynamicCast_AsCanvas_Panel_Slot;            // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Investigation_Selection_Slot_C_UpdateSlotSize) == 0x000008, "Wrong alignment on WBP_Investigation_Selection_Slot_C_UpdateSlotSize");
static_assert(sizeof(WBP_Investigation_Selection_Slot_C_UpdateSlotSize) == 0x000020, "Wrong size on WBP_Investigation_Selection_Slot_C_UpdateSlotSize");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_UpdateSlotSize, SizeY) == 0x000000, "Member 'WBP_Investigation_Selection_Slot_C_UpdateSlotSize::SizeY' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_UpdateSlotSize, SizeX) == 0x000004, "Member 'WBP_Investigation_Selection_Slot_C_UpdateSlotSize::SizeX' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_UpdateSlotSize, CallFunc_MakeVector2D_ReturnValue) == 0x000008, "Member 'WBP_Investigation_Selection_Slot_C_UpdateSlotSize::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_UpdateSlotSize, K2Node_DynamicCast_AsCanvas_Panel_Slot) == 0x000010, "Member 'WBP_Investigation_Selection_Slot_C_UpdateSlotSize::K2Node_DynamicCast_AsCanvas_Panel_Slot' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_UpdateSlotSize, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WBP_Investigation_Selection_Slot_C_UpdateSlotSize::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WBP_Investigation_Selection_Slot.WBP_Investigation_Selection_Slot_C.UpdateSlot
// 0x0040 (0x0040 - 0x0000)
struct WBP_Investigation_Selection_Slot_C_UpdateSlot final
{
public:
	TSoftObjectPtr<class UTexture2D>              NewTexture;                                        // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_DynamicCast_AsTexture_2D;                   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Investigation_Selection_Slot_C_UpdateSlot) == 0x000008, "Wrong alignment on WBP_Investigation_Selection_Slot_C_UpdateSlot");
static_assert(sizeof(WBP_Investigation_Selection_Slot_C_UpdateSlot) == 0x000040, "Wrong size on WBP_Investigation_Selection_Slot_C_UpdateSlot");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_UpdateSlot, NewTexture) == 0x000000, "Member 'WBP_Investigation_Selection_Slot_C_UpdateSlot::NewTexture' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_UpdateSlot, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000028, "Member 'WBP_Investigation_Selection_Slot_C_UpdateSlot::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_UpdateSlot, K2Node_DynamicCast_AsTexture_2D) == 0x000030, "Member 'WBP_Investigation_Selection_Slot_C_UpdateSlot::K2Node_DynamicCast_AsTexture_2D' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_UpdateSlot, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'WBP_Investigation_Selection_Slot_C_UpdateSlot::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WBP_Investigation_Selection_Slot.WBP_Investigation_Selection_Slot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_Investigation_Selection_Slot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Investigation_Selection_Slot_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_Investigation_Selection_Slot_C_PreConstruct");
static_assert(sizeof(WBP_Investigation_Selection_Slot_C_PreConstruct) == 0x000001, "Wrong size on WBP_Investigation_Selection_Slot_C_PreConstruct");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_Investigation_Selection_Slot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_Investigation_Selection_Slot.WBP_Investigation_Selection_Slot_C.UpdateSlotItemData
// 0x0030 (0x0030 - 0x0000)
struct WBP_Investigation_Selection_Slot_C_UpdateSlotItemData final
{
public:
	TSoftObjectPtr<class UItemData>               ItemData_0;                                        // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Investigation_Selection_Slot_C_UpdateSlotItemData) == 0x000008, "Wrong alignment on WBP_Investigation_Selection_Slot_C_UpdateSlotItemData");
static_assert(sizeof(WBP_Investigation_Selection_Slot_C_UpdateSlotItemData) == 0x000030, "Wrong size on WBP_Investigation_Selection_Slot_C_UpdateSlotItemData");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_UpdateSlotItemData, ItemData_0) == 0x000000, "Member 'WBP_Investigation_Selection_Slot_C_UpdateSlotItemData::ItemData_0' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_UpdateSlotItemData, Active) == 0x000028, "Member 'WBP_Investigation_Selection_Slot_C_UpdateSlotItemData::Active' has a wrong offset!");

// Function WBP_Investigation_Selection_Slot.WBP_Investigation_Selection_Slot_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_Investigation_Selection_Slot_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Investigation_Selection_Slot_C_Tick) == 0x000004, "Wrong alignment on WBP_Investigation_Selection_Slot_C_Tick");
static_assert(sizeof(WBP_Investigation_Selection_Slot_C_Tick) == 0x00003C, "Wrong size on WBP_Investigation_Selection_Slot_C_Tick");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_Investigation_Selection_Slot_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_Investigation_Selection_Slot_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_Investigation_Selection_Slot.WBP_Investigation_Selection_Slot_C.ExecuteUbergraph_WBP_Investigation_Selection_Slot
// 0x00D8 (0x00D8 - 0x0000)
struct WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWidgetTransform                       K2Node_MakeStruct_WidgetTransform;                 // 0x0010(0x001C)(NoDestructor)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UItemData>               K2Node_CustomEvent_ItemData;                       // 0x0030(0x0028)(HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Active;                         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0068(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ItemSlotAnimation_Finished;               // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGridSlot*                              K2Node_DynamicCast_AsGrid_Slot;                    // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGridSlot*                              K2Node_DynamicCast_AsGrid_Slot_1;                  // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGridSlot*                              K2Node_DynamicCast_AsGrid_Slot_2;                  // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot) == 0x000008, "Wrong alignment on WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot");
static_assert(sizeof(WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot) == 0x0000D8, "Wrong size on WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot, EntryPoint) == 0x000000, "Member 'WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot, K2Node_Event_IsDesignTime) == 0x000005, "Member 'WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot, K2Node_MakeStruct_WidgetTransform) == 0x000010, "Member 'WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot::K2Node_MakeStruct_WidgetTransform' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot, K2Node_CustomEvent_ItemData) == 0x000030, "Member 'WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot::K2Node_CustomEvent_ItemData' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot, K2Node_CustomEvent_Active) == 0x000058, "Member 'WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot::K2Node_CustomEvent_Active' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot, CallFunc_PlayAnimation_ReturnValue_1) == 0x000060, "Member 'WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot, K2Node_Event_MyGeometry) == 0x000068, "Member 'WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot, K2Node_Event_InDeltaTime) == 0x0000A0, "Member 'WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot, CallFunc_ItemSlotAnimation_Finished) == 0x0000A4, "Member 'WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot::CallFunc_ItemSlotAnimation_Finished' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot, K2Node_DynamicCast_AsGrid_Slot) == 0x0000A8, "Member 'WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot::K2Node_DynamicCast_AsGrid_Slot' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot, K2Node_DynamicCast_bSuccess) == 0x0000B0, "Member 'WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot, K2Node_DynamicCast_AsGrid_Slot_1) == 0x0000B8, "Member 'WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot::K2Node_DynamicCast_AsGrid_Slot_1' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot, K2Node_DynamicCast_bSuccess_1) == 0x0000C0, "Member 'WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot, K2Node_DynamicCast_AsGrid_Slot_2) == 0x0000C8, "Member 'WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot::K2Node_DynamicCast_AsGrid_Slot_2' has a wrong offset!");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot, K2Node_DynamicCast_bSuccess_2) == 0x0000D0, "Member 'WBP_Investigation_Selection_Slot_C_ExecuteUbergraph_WBP_Investigation_Selection_Slot::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function WBP_Investigation_Selection_Slot.WBP_Investigation_Selection_Slot_C.OnSlotUnhovered__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_Investigation_Selection_Slot_C_OnSlotUnhovered__DelegateSignature final
{
public:
	class UWBP_Investigation_Selection_Slot_C*    NewParam;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Investigation_Selection_Slot_C_OnSlotUnhovered__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Investigation_Selection_Slot_C_OnSlotUnhovered__DelegateSignature");
static_assert(sizeof(WBP_Investigation_Selection_Slot_C_OnSlotUnhovered__DelegateSignature) == 0x000008, "Wrong size on WBP_Investigation_Selection_Slot_C_OnSlotUnhovered__DelegateSignature");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_OnSlotUnhovered__DelegateSignature, NewParam) == 0x000000, "Member 'WBP_Investigation_Selection_Slot_C_OnSlotUnhovered__DelegateSignature::NewParam' has a wrong offset!");

// Function WBP_Investigation_Selection_Slot.WBP_Investigation_Selection_Slot_C.SlotHovered__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_Investigation_Selection_Slot_C_SlotHovered__DelegateSignature final
{
public:
	class UWBP_Investigation_Selection_Slot_C*    InvestigationSlot;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Investigation_Selection_Slot_C_SlotHovered__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Investigation_Selection_Slot_C_SlotHovered__DelegateSignature");
static_assert(sizeof(WBP_Investigation_Selection_Slot_C_SlotHovered__DelegateSignature) == 0x000008, "Wrong size on WBP_Investigation_Selection_Slot_C_SlotHovered__DelegateSignature");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_SlotHovered__DelegateSignature, InvestigationSlot) == 0x000000, "Member 'WBP_Investigation_Selection_Slot_C_SlotHovered__DelegateSignature::InvestigationSlot' has a wrong offset!");

// Function WBP_Investigation_Selection_Slot.WBP_Investigation_Selection_Slot_C.OnIconClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_Investigation_Selection_Slot_C_OnIconClicked__DelegateSignature final
{
public:
	class UItemData*                              ItemData_0;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Investigation_Selection_Slot_C_OnIconClicked__DelegateSignature) == 0x000008, "Wrong alignment on WBP_Investigation_Selection_Slot_C_OnIconClicked__DelegateSignature");
static_assert(sizeof(WBP_Investigation_Selection_Slot_C_OnIconClicked__DelegateSignature) == 0x000008, "Wrong size on WBP_Investigation_Selection_Slot_C_OnIconClicked__DelegateSignature");
static_assert(offsetof(WBP_Investigation_Selection_Slot_C_OnIconClicked__DelegateSignature, ItemData_0) == 0x000000, "Member 'WBP_Investigation_Selection_Slot_C_OnIconClicked__DelegateSignature::ItemData_0' has a wrong offset!");

}

