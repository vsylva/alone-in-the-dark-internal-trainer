#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Checkpoint

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "ObsidianFox_structs.hpp"


namespace SDK::Params
{

// Function BP_Checkpoint.BP_Checkpoint_C.ReactivateSaveOnStart
// 0x0002 (0x0002 - 0x0000)
struct BP_Checkpoint_C_ReactivateSaveOnStart final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Checkpoint_C_ReactivateSaveOnStart) == 0x000001, "Wrong alignment on BP_Checkpoint_C_ReactivateSaveOnStart");
static_assert(sizeof(BP_Checkpoint_C_ReactivateSaveOnStart) == 0x000002, "Wrong size on BP_Checkpoint_C_ReactivateSaveOnStart");
static_assert(offsetof(BP_Checkpoint_C_ReactivateSaveOnStart, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'BP_Checkpoint_C_ReactivateSaveOnStart::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ReactivateSaveOnStart, CallFunc_BooleanAND_ReturnValue) == 0x000001, "Member 'BP_Checkpoint_C_ReactivateSaveOnStart::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_Checkpoint.BP_Checkpoint_C.IsSavingAllowed
// 0x0020 (0x0020 - 0x0000)
struct BP_Checkpoint_C_IsSavingAllowed final
{
public:
	bool                                          Allowed;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCheckpointSubsystem*                   CallFunc_GetGameplaySessionSubsystem_ReturnValue;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_GetCurrentCheckpoint_ReturnValue;         // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsGameplayTagValid_ReturnValue;           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_GameplayTag_ReturnValue;         // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Checkpoint_C_IsSavingAllowed) == 0x000008, "Wrong alignment on BP_Checkpoint_C_IsSavingAllowed");
static_assert(sizeof(BP_Checkpoint_C_IsSavingAllowed) == 0x000020, "Wrong size on BP_Checkpoint_C_IsSavingAllowed");
static_assert(offsetof(BP_Checkpoint_C_IsSavingAllowed, Allowed) == 0x000000, "Member 'BP_Checkpoint_C_IsSavingAllowed::Allowed' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_IsSavingAllowed, CallFunc_GetGameplaySessionSubsystem_ReturnValue) == 0x000008, "Member 'BP_Checkpoint_C_IsSavingAllowed::CallFunc_GetGameplaySessionSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_IsSavingAllowed, CallFunc_GetCurrentCheckpoint_ReturnValue) == 0x000010, "Member 'BP_Checkpoint_C_IsSavingAllowed::CallFunc_GetCurrentCheckpoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_IsSavingAllowed, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'BP_Checkpoint_C_IsSavingAllowed::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_IsSavingAllowed, CallFunc_IsGameplayTagValid_ReturnValue) == 0x000019, "Member 'BP_Checkpoint_C_IsSavingAllowed::CallFunc_IsGameplayTagValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_IsSavingAllowed, CallFunc_NotEqual_GameplayTag_ReturnValue) == 0x00001A, "Member 'BP_Checkpoint_C_IsSavingAllowed::CallFunc_NotEqual_GameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_IsSavingAllowed, CallFunc_BooleanAND_ReturnValue) == 0x00001B, "Member 'BP_Checkpoint_C_IsSavingAllowed::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_IsSavingAllowed, CallFunc_BooleanAND_ReturnValue_1) == 0x00001C, "Member 'BP_Checkpoint_C_IsSavingAllowed::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_IsSavingAllowed, CallFunc_BooleanAND_ReturnValue_2) == 0x00001D, "Member 'BP_Checkpoint_C_IsSavingAllowed::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function BP_Checkpoint.BP_Checkpoint_C.StartEventIfPlayerIsOverlapping
// 0x0006 (0x0006 - 0x0000)
struct BP_Checkpoint_C_StartEventIfPlayerIsOverlapping final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerOverlapping_IsPlayerOverlapping;  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Checkpoint_C_StartEventIfPlayerIsOverlapping) == 0x000001, "Wrong alignment on BP_Checkpoint_C_StartEventIfPlayerIsOverlapping");
static_assert(sizeof(BP_Checkpoint_C_StartEventIfPlayerIsOverlapping) == 0x000006, "Wrong size on BP_Checkpoint_C_StartEventIfPlayerIsOverlapping");
static_assert(offsetof(BP_Checkpoint_C_StartEventIfPlayerIsOverlapping, Temp_bool_Variable) == 0x000000, "Member 'BP_Checkpoint_C_StartEventIfPlayerIsOverlapping::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_StartEventIfPlayerIsOverlapping, Temp_bool_Variable_1) == 0x000001, "Member 'BP_Checkpoint_C_StartEventIfPlayerIsOverlapping::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_StartEventIfPlayerIsOverlapping, Temp_bool_Variable_2) == 0x000002, "Member 'BP_Checkpoint_C_StartEventIfPlayerIsOverlapping::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_StartEventIfPlayerIsOverlapping, K2Node_Select_Default) == 0x000003, "Member 'BP_Checkpoint_C_StartEventIfPlayerIsOverlapping::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_StartEventIfPlayerIsOverlapping, CallFunc_IsPlayerOverlapping_IsPlayerOverlapping) == 0x000004, "Member 'BP_Checkpoint_C_StartEventIfPlayerIsOverlapping::CallFunc_IsPlayerOverlapping_IsPlayerOverlapping' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_StartEventIfPlayerIsOverlapping, CallFunc_BooleanAND_ReturnValue) == 0x000005, "Member 'BP_Checkpoint_C_StartEventIfPlayerIsOverlapping::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_Checkpoint.BP_Checkpoint_C.OnMainStateChanged
// 0x0002 (0x0002 - 0x0000)
struct BP_Checkpoint_C_OnMainStateChanged final
{
public:
	EGameMainState                                OldGameState;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGameMainState                                NewGameState;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Checkpoint_C_OnMainStateChanged) == 0x000001, "Wrong alignment on BP_Checkpoint_C_OnMainStateChanged");
static_assert(sizeof(BP_Checkpoint_C_OnMainStateChanged) == 0x000002, "Wrong size on BP_Checkpoint_C_OnMainStateChanged");
static_assert(offsetof(BP_Checkpoint_C_OnMainStateChanged, OldGameState) == 0x000000, "Member 'BP_Checkpoint_C_OnMainStateChanged::OldGameState' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_OnMainStateChanged, NewGameState) == 0x000001, "Member 'BP_Checkpoint_C_OnMainStateChanged::NewGameState' has a wrong offset!");

// Function BP_Checkpoint.BP_Checkpoint_C.BndEvt__BP_Checkpoint_Flow_K2Node_ComponentBoundEvent_0_FlowComponentDynamicNotify__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_Checkpoint_C_BndEvt__BP_Checkpoint_Flow_K2Node_ComponentBoundEvent_0_FlowComponentDynamicNotify__DelegateSignature final
{
public:
	class UFlowComponent*                         FlowComponent;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           NotifyTag;                                         // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Checkpoint_C_BndEvt__BP_Checkpoint_Flow_K2Node_ComponentBoundEvent_0_FlowComponentDynamicNotify__DelegateSignature) == 0x000008, "Wrong alignment on BP_Checkpoint_C_BndEvt__BP_Checkpoint_Flow_K2Node_ComponentBoundEvent_0_FlowComponentDynamicNotify__DelegateSignature");
static_assert(sizeof(BP_Checkpoint_C_BndEvt__BP_Checkpoint_Flow_K2Node_ComponentBoundEvent_0_FlowComponentDynamicNotify__DelegateSignature) == 0x000010, "Wrong size on BP_Checkpoint_C_BndEvt__BP_Checkpoint_Flow_K2Node_ComponentBoundEvent_0_FlowComponentDynamicNotify__DelegateSignature");
static_assert(offsetof(BP_Checkpoint_C_BndEvt__BP_Checkpoint_Flow_K2Node_ComponentBoundEvent_0_FlowComponentDynamicNotify__DelegateSignature, FlowComponent) == 0x000000, "Member 'BP_Checkpoint_C_BndEvt__BP_Checkpoint_Flow_K2Node_ComponentBoundEvent_0_FlowComponentDynamicNotify__DelegateSignature::FlowComponent' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_BndEvt__BP_Checkpoint_Flow_K2Node_ComponentBoundEvent_0_FlowComponentDynamicNotify__DelegateSignature, NotifyTag) == 0x000008, "Member 'BP_Checkpoint_C_BndEvt__BP_Checkpoint_Flow_K2Node_ComponentBoundEvent_0_FlowComponentDynamicNotify__DelegateSignature::NotifyTag' has a wrong offset!");

// Function BP_Checkpoint.BP_Checkpoint_C.TryEnableManualSave
// 0x0001 (0x0001 - 0x0000)
struct BP_Checkpoint_C_TryEnableManualSave final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Checkpoint_C_TryEnableManualSave) == 0x000001, "Wrong alignment on BP_Checkpoint_C_TryEnableManualSave");
static_assert(sizeof(BP_Checkpoint_C_TryEnableManualSave) == 0x000001, "Wrong size on BP_Checkpoint_C_TryEnableManualSave");
static_assert(offsetof(BP_Checkpoint_C_TryEnableManualSave, Success) == 0x000000, "Member 'BP_Checkpoint_C_TryEnableManualSave::Success' has a wrong offset!");

// Function BP_Checkpoint.BP_Checkpoint_C.IsPlayerOverlapping
// 0x0040 (0x0040 - 0x0000)
struct BP_Checkpoint_C_IsPlayerOverlapping final
{
public:
	bool                                          IsPlayerOverlapping_0;                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0018(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Checkpoint_C_IsPlayerOverlapping) == 0x000008, "Wrong alignment on BP_Checkpoint_C_IsPlayerOverlapping");
static_assert(sizeof(BP_Checkpoint_C_IsPlayerOverlapping) == 0x000040, "Wrong size on BP_Checkpoint_C_IsPlayerOverlapping");
static_assert(offsetof(BP_Checkpoint_C_IsPlayerOverlapping, IsPlayerOverlapping_0) == 0x000000, "Member 'BP_Checkpoint_C_IsPlayerOverlapping::IsPlayerOverlapping_0' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_IsPlayerOverlapping, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_Checkpoint_C_IsPlayerOverlapping::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_IsPlayerOverlapping, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_Checkpoint_C_IsPlayerOverlapping::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_IsPlayerOverlapping, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_Checkpoint_C_IsPlayerOverlapping::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_IsPlayerOverlapping, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000010, "Member 'BP_Checkpoint_C_IsPlayerOverlapping::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_IsPlayerOverlapping, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000018, "Member 'BP_Checkpoint_C_IsPlayerOverlapping::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_IsPlayerOverlapping, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_Checkpoint_C_IsPlayerOverlapping::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_IsPlayerOverlapping, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_Checkpoint_C_IsPlayerOverlapping::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_IsPlayerOverlapping, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'BP_Checkpoint_C_IsPlayerOverlapping::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_IsPlayerOverlapping, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000039, "Member 'BP_Checkpoint_C_IsPlayerOverlapping::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_Checkpoint.BP_Checkpoint_C.ExecuteUbergraph_BP_Checkpoint
// 0x0098 (0x0098 - 0x0000)
struct BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOverlappingActor_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPiecesSavingEnabledSubsystem*          CallFunc_GetGameplaySessionSubsystem_ReturnValue;  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPiecesSavingEnabledSubsystem*          CallFunc_GetGameplaySessionSubsystem_ReturnValue_1; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCheckpointSubsystem*                   CallFunc_GetGameplaySessionSubsystem_ReturnValue_2; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGameplayTagValid_ReturnValue;           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EGameMainState                                K2Node_CustomEvent_OldGameState;                   // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGameMainState                                K2Node_CustomEvent_NewGameState;                   // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UGameSubsystem_PlayState*               CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EGameMainState                                CallFunc_GetMainState_ReturnValue;                 // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFactsDB*                               CallFunc_GetGameplaySessionSubsystem_ReturnValue_3; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFactTrue_ReturnValue;                   // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFlowComponent*                         K2Node_ComponentBoundEvent_FlowComponent;          // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_ComponentBoundEvent_NotifyTag;              // 0x0060(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool Success)>                 K2Node_CreateDelegate_OutputDelegate;              // 0x006C(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_CustomEvent_Success;                        // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EGameMainState OldGameState, EGameMainState NewGameState)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0080(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsSavingAllowed_Allowed;                  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint) == 0x000008, "Wrong alignment on BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint");
static_assert(sizeof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint) == 0x000098, "Wrong size on BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, EntryPoint) == 0x000000, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, CallFunc_IsOverlappingActor_ReturnValue) == 0x000010, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::CallFunc_IsOverlappingActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, CallFunc_GetGameplaySessionSubsystem_ReturnValue) == 0x000018, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::CallFunc_GetGameplaySessionSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, CallFunc_GetGameplaySessionSubsystem_ReturnValue_1) == 0x000020, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::CallFunc_GetGameplaySessionSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, CallFunc_GetGameplaySessionSubsystem_ReturnValue_2) == 0x000028, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::CallFunc_GetGameplaySessionSubsystem_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, CallFunc_IsGameplayTagValid_ReturnValue) == 0x000030, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::CallFunc_IsGameplayTagValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, CallFunc_Not_PreBool_ReturnValue) == 0x000031, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, K2Node_CustomEvent_OldGameState) == 0x000032, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::K2Node_CustomEvent_OldGameState' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, K2Node_CustomEvent_NewGameState) == 0x000033, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::K2Node_CustomEvent_NewGameState' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000034, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000035, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000036, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, CallFunc_BooleanOR_ReturnValue) == 0x000037, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000038, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, CallFunc_BooleanAND_ReturnValue) == 0x000040, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, CallFunc_GetMainState_ReturnValue) == 0x000041, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::CallFunc_GetMainState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, CallFunc_GetGameplaySessionSubsystem_ReturnValue_3) == 0x000048, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::CallFunc_GetGameplaySessionSubsystem_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, K2Node_SwitchEnum_CmpSuccess) == 0x000050, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, CallFunc_IsFactTrue_ReturnValue) == 0x000051, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::CallFunc_IsFactTrue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, K2Node_ComponentBoundEvent_FlowComponent) == 0x000058, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::K2Node_ComponentBoundEvent_FlowComponent' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, K2Node_ComponentBoundEvent_NotifyTag) == 0x000060, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::K2Node_ComponentBoundEvent_NotifyTag' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x000068, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, K2Node_CreateDelegate_OutputDelegate) == 0x00006C, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, K2Node_CustomEvent_Success) == 0x00007C, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::K2Node_CustomEvent_Success' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, K2Node_CreateDelegate_OutputDelegate_1) == 0x000080, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, CallFunc_IsSavingAllowed_Allowed) == 0x000090, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::CallFunc_IsSavingAllowed_Allowed' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, CallFunc_Not_PreBool_ReturnValue_1) == 0x000091, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, CallFunc_BooleanAND_ReturnValue_1) == 0x000092, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint, CallFunc_BooleanAND_ReturnValue_2) == 0x000093, "Member 'BP_Checkpoint_C_ExecuteUbergraph_BP_Checkpoint::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

}

