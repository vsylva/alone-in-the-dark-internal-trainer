#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PiecesFactsDB

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "PiecesFactsDB_structs.hpp"
#include "PiecesGameplaySession_classes.hpp"


namespace SDK
{

// Class PiecesFactsDB.FactsDB
// 0x00B0 (0x00E0 - 0x0030)
class UFactsDB final : public UGameplaySessionSubsystem
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, int32>              Facts;                                             // 0x0040(0x0050)(SaveGame, NativeAccessSpecifierPrivate)
	TMap<struct FGameplayTag, struct FSubscriberArrayWrapper> Subscriptions;                                     // 0x0090(0x0050)(Transient, NativeAccessSpecifierPrivate)

public:
	void IncrementFact(const struct FGameplayTag& Tag, const int32 Value, bool bAddIfMissing);
	void RemoveFact(const struct FGameplayTag& Tag);
	void ResetFactsDB();
	void SetFact(const struct FGameplayTag& Tag, const int32 Value);
	void SetFactAsBool(const struct FGameplayTag& Tag, const bool Value);
	void SubscribeToFactChanges(const struct FGameplayTag& Tag, const TDelegate<void(struct FGameplayTag& Tag, ESubscriptionTagChangeType ChangeType)>& Event);
	void UnsubscribeFromFactChanges(const struct FGameplayTag& Tag, const class UObject* Subscriber);
	bool WriteFactsToFile(const class FString& Filename, bool bAllowOverwriting, bool bExportForUnreal);

	bool DoesFactExist(const struct FGameplayTag& Tag) const;
	int32 GetFactValue(const struct FGameplayTag& Tag, bool* bFactExists, int32 DefaultIfNoExist) const;
	bool IsFactTrue(const struct FGameplayTag& Tag) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FactsDB">();
	}
	static class UFactsDB* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFactsDB>();
	}
};
static_assert(alignof(UFactsDB) == 0x000008, "Wrong alignment on UFactsDB");
static_assert(sizeof(UFactsDB) == 0x0000E0, "Wrong size on UFactsDB");
static_assert(offsetof(UFactsDB, Facts) == 0x000040, "Member 'UFactsDB::Facts' has a wrong offset!");
static_assert(offsetof(UFactsDB, Subscriptions) == 0x000090, "Member 'UFactsDB::Subscriptions' has a wrong offset!");

}

