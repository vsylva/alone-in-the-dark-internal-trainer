#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPL_InternalTelemetry

#include "Basic.hpp"

#include "BPL_InternalTelemetry_classes.hpp"
#include "BPL_InternalTelemetry_parameters.hpp"


namespace SDK
{

// Function BPL_InternalTelemetry.BPL_InternalTelemetry_C.Internal Simple Telemetry
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Server                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Subtype                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TMap<class FString, class FString>      Parameters                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPL_InternalTelemetry_C::Internal_Simple_Telemetry(const class FString& Server, const class FString& Type, const class FString& Subtype, const TMap<class FString, class FString>& Parameters, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_InternalTelemetry_C", "Internal Simple Telemetry");

	Params::BPL_InternalTelemetry_C_Internal_Simple_Telemetry Parms{};

	Parms.Server = std::move(Server);
	Parms.Type = std::move(Type);
	Parms.Subtype = std::move(Subtype);
	Parms.Parameters = std::move(Parameters);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPL_InternalTelemetry.BPL_InternalTelemetry_C.Internal Simple Telemetry AssetLink
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Server                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Subtype                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<class FString, class FString>      Parameters                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPL_InternalTelemetry_C::Internal_Simple_Telemetry_AssetLink(const class FString& Server, const class FString& Type, const class FString& Subtype, class AActor* Actor, const TMap<class FString, class FString>& Parameters, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_InternalTelemetry_C", "Internal Simple Telemetry AssetLink");

	Params::BPL_InternalTelemetry_C_Internal_Simple_Telemetry_AssetLink Parms{};

	Parms.Server = std::move(Server);
	Parms.Type = std::move(Type);
	Parms.Subtype = std::move(Subtype);
	Parms.Actor = Actor;
	Parms.Parameters = std::move(Parameters);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPL_InternalTelemetry.BPL_InternalTelemetry_C.BuildRequestParamsString
// (Static, Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FString, class FString>      Parameters                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBPL_InternalTelemetry_C::BuildRequestParamsString(const TMap<class FString, class FString>& Parameters, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_InternalTelemetry_C", "BuildRequestParamsString");

	Params::BPL_InternalTelemetry_C_BuildRequestParamsString Parms{};

	Parms.Parameters = std::move(Parameters);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

