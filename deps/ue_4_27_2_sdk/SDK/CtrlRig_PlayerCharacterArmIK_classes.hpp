#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CtrlRig_PlayerCharacterArmIK

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ControlRig_classes.hpp"


namespace SDK
{

// ControlRigBlueprintGeneratedClass CtrlRig_PlayerCharacterArmIK.CtrlRig_PlayerCharacterArmIK_C
// 0x00F0 (0x0740 - 0x0650)
class UCtrlRig_PlayerCharacterArmIK_C final : public UControlRig
{
public:
	struct FVector                                SpineStiffness;                                    // 0x0650(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65C[0x4];                                      // 0x065C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RightHandTargetTransform;                          // 0x0660(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FTransform                             RightHandReferenceTransform;                       // 0x0690(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	float                                         RightHandWeight;                                   // 0x06C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RightHandRotationAlpha;                            // 0x06C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C8[0x8];                                      // 0x06C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LeftHandTargetTransform;                           // 0x06D0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FTransform                             LeftHandReferenceTransform;                        // 0x0700(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	float                                         LeftHandWeight;                                    // 0x0730(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeftHandRotationAlpha;                             // 0x0734(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LeftHandIsWorldSpace;                              // 0x0738(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RightHandIsWorldSpace;                             // 0x0739(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnableRightHandGrip;                               // 0x073A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnableLeftHandGrip;                                // 0x073B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Right_Hand_Use_FK_As_Origin;                       // 0x073C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Left_Hand_Use_FK_As_Origin;                        // 0x073D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CtrlRig_PlayerCharacterArmIK_C">();
	}
	static class UCtrlRig_PlayerCharacterArmIK_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCtrlRig_PlayerCharacterArmIK_C>();
	}
};
static_assert(alignof(UCtrlRig_PlayerCharacterArmIK_C) == 0x000010, "Wrong alignment on UCtrlRig_PlayerCharacterArmIK_C");
static_assert(sizeof(UCtrlRig_PlayerCharacterArmIK_C) == 0x000740, "Wrong size on UCtrlRig_PlayerCharacterArmIK_C");
static_assert(offsetof(UCtrlRig_PlayerCharacterArmIK_C, SpineStiffness) == 0x000650, "Member 'UCtrlRig_PlayerCharacterArmIK_C::SpineStiffness' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacterArmIK_C, RightHandTargetTransform) == 0x000660, "Member 'UCtrlRig_PlayerCharacterArmIK_C::RightHandTargetTransform' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacterArmIK_C, RightHandReferenceTransform) == 0x000690, "Member 'UCtrlRig_PlayerCharacterArmIK_C::RightHandReferenceTransform' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacterArmIK_C, RightHandWeight) == 0x0006C0, "Member 'UCtrlRig_PlayerCharacterArmIK_C::RightHandWeight' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacterArmIK_C, RightHandRotationAlpha) == 0x0006C4, "Member 'UCtrlRig_PlayerCharacterArmIK_C::RightHandRotationAlpha' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacterArmIK_C, LeftHandTargetTransform) == 0x0006D0, "Member 'UCtrlRig_PlayerCharacterArmIK_C::LeftHandTargetTransform' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacterArmIK_C, LeftHandReferenceTransform) == 0x000700, "Member 'UCtrlRig_PlayerCharacterArmIK_C::LeftHandReferenceTransform' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacterArmIK_C, LeftHandWeight) == 0x000730, "Member 'UCtrlRig_PlayerCharacterArmIK_C::LeftHandWeight' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacterArmIK_C, LeftHandRotationAlpha) == 0x000734, "Member 'UCtrlRig_PlayerCharacterArmIK_C::LeftHandRotationAlpha' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacterArmIK_C, LeftHandIsWorldSpace) == 0x000738, "Member 'UCtrlRig_PlayerCharacterArmIK_C::LeftHandIsWorldSpace' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacterArmIK_C, RightHandIsWorldSpace) == 0x000739, "Member 'UCtrlRig_PlayerCharacterArmIK_C::RightHandIsWorldSpace' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacterArmIK_C, EnableRightHandGrip) == 0x00073A, "Member 'UCtrlRig_PlayerCharacterArmIK_C::EnableRightHandGrip' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacterArmIK_C, EnableLeftHandGrip) == 0x00073B, "Member 'UCtrlRig_PlayerCharacterArmIK_C::EnableLeftHandGrip' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacterArmIK_C, Right_Hand_Use_FK_As_Origin) == 0x00073C, "Member 'UCtrlRig_PlayerCharacterArmIK_C::Right_Hand_Use_FK_As_Origin' has a wrong offset!");
static_assert(offsetof(UCtrlRig_PlayerCharacterArmIK_C, Left_Hand_Use_FK_As_Origin) == 0x00073D, "Member 'UCtrlRig_PlayerCharacterArmIK_C::Left_Hand_Use_FK_As_Origin' has a wrong offset!");

}

