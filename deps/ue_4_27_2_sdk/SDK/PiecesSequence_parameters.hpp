#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PiecesSequence

#include "Basic.hpp"

#include "MovieScene_structs.hpp"
#include "PiecesSequence_structs.hpp"
#include "EnhancedInput_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function PiecesSequence.PiecesLevelSequenceActor.OnCameraCutHandler
// 0x0008 (0x0008 - 0x0000)
struct PiecesLevelSequenceActor_OnCameraCutHandler final
{
public:
	class UCameraComponent*                       CameraComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesLevelSequenceActor_OnCameraCutHandler) == 0x000008, "Wrong alignment on PiecesLevelSequenceActor_OnCameraCutHandler");
static_assert(sizeof(PiecesLevelSequenceActor_OnCameraCutHandler) == 0x000008, "Wrong size on PiecesLevelSequenceActor_OnCameraCutHandler");
static_assert(offsetof(PiecesLevelSequenceActor_OnCameraCutHandler, CameraComponent) == 0x000000, "Member 'PiecesLevelSequenceActor_OnCameraCutHandler::CameraComponent' has a wrong offset!");

// Function PiecesSequence.PiecesLevelSequenceActor.OnSequenceSkipped
// 0x0008 (0x0008 - 0x0000)
struct PiecesLevelSequenceActor_OnSequenceSkipped final
{
public:
	class UPiecesLevelSequencePlayer*             SkippingSequencePlayer;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesLevelSequenceActor_OnSequenceSkipped) == 0x000008, "Wrong alignment on PiecesLevelSequenceActor_OnSequenceSkipped");
static_assert(sizeof(PiecesLevelSequenceActor_OnSequenceSkipped) == 0x000008, "Wrong size on PiecesLevelSequenceActor_OnSequenceSkipped");
static_assert(offsetof(PiecesLevelSequenceActor_OnSequenceSkipped, SkippingSequencePlayer) == 0x000000, "Member 'PiecesLevelSequenceActor_OnSequenceSkipped::SkippingSequencePlayer' has a wrong offset!");

// Function PiecesSequence.PiecesLevelSequenceActor.GetFirstMetaData
// 0x0010 (0x0010 - 0x0000)
struct PiecesLevelSequenceActor_GetFirstMetaData final
{
public:
	TSubclassOf<class UPiecesSequenceMetaData>    MetaDataClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPiecesSequenceMetaData*          ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesLevelSequenceActor_GetFirstMetaData) == 0x000008, "Wrong alignment on PiecesLevelSequenceActor_GetFirstMetaData");
static_assert(sizeof(PiecesLevelSequenceActor_GetFirstMetaData) == 0x000010, "Wrong size on PiecesLevelSequenceActor_GetFirstMetaData");
static_assert(offsetof(PiecesLevelSequenceActor_GetFirstMetaData, MetaDataClass) == 0x000000, "Member 'PiecesLevelSequenceActor_GetFirstMetaData::MetaDataClass' has a wrong offset!");
static_assert(offsetof(PiecesLevelSequenceActor_GetFirstMetaData, ReturnValue) == 0x000008, "Member 'PiecesLevelSequenceActor_GetFirstMetaData::ReturnValue' has a wrong offset!");

// Function PiecesSequence.PiecesLevelSequenceActor.GetMetadata
// 0x0020 (0x0020 - 0x0000)
struct PiecesLevelSequenceActor_GetMetadata final
{
public:
	TSubclassOf<class UPiecesSequenceMetaData>    MetaDataClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPiecesSequenceMetaData*>        OutMetaData;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PiecesLevelSequenceActor_GetMetadata) == 0x000008, "Wrong alignment on PiecesLevelSequenceActor_GetMetadata");
static_assert(sizeof(PiecesLevelSequenceActor_GetMetadata) == 0x000020, "Wrong size on PiecesLevelSequenceActor_GetMetadata");
static_assert(offsetof(PiecesLevelSequenceActor_GetMetadata, MetaDataClass) == 0x000000, "Member 'PiecesLevelSequenceActor_GetMetadata::MetaDataClass' has a wrong offset!");
static_assert(offsetof(PiecesLevelSequenceActor_GetMetadata, OutMetaData) == 0x000008, "Member 'PiecesLevelSequenceActor_GetMetadata::OutMetaData' has a wrong offset!");
static_assert(offsetof(PiecesLevelSequenceActor_GetMetadata, ReturnValue) == 0x000018, "Member 'PiecesLevelSequenceActor_GetMetadata::ReturnValue' has a wrong offset!");

// Function PiecesSequence.PiecesLevelSequenceActor.TeleportPlayer
// 0x0008 (0x0008 - 0x0000)
struct PiecesLevelSequenceActor_TeleportPlayer final
{
public:
	const class UPiecesSequenceMetadataGoalLocation* GoalLocationMetadata;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesLevelSequenceActor_TeleportPlayer) == 0x000008, "Wrong alignment on PiecesLevelSequenceActor_TeleportPlayer");
static_assert(sizeof(PiecesLevelSequenceActor_TeleportPlayer) == 0x000008, "Wrong size on PiecesLevelSequenceActor_TeleportPlayer");
static_assert(offsetof(PiecesLevelSequenceActor_TeleportPlayer, GoalLocationMetadata) == 0x000000, "Member 'PiecesLevelSequenceActor_TeleportPlayer::GoalLocationMetadata' has a wrong offset!");

// Function PiecesSequence.InteractiveLevelSequenceActor.InteractiveSegmentStarted
// 0x0004 (0x0004 - 0x0000)
struct InteractiveLevelSequenceActor_InteractiveSegmentStarted final
{
public:
	int32                                         SegmentNumber;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractiveLevelSequenceActor_InteractiveSegmentStarted) == 0x000004, "Wrong alignment on InteractiveLevelSequenceActor_InteractiveSegmentStarted");
static_assert(sizeof(InteractiveLevelSequenceActor_InteractiveSegmentStarted) == 0x000004, "Wrong size on InteractiveLevelSequenceActor_InteractiveSegmentStarted");
static_assert(offsetof(InteractiveLevelSequenceActor_InteractiveSegmentStarted, SegmentNumber) == 0x000000, "Member 'InteractiveLevelSequenceActor_InteractiveSegmentStarted::SegmentNumber' has a wrong offset!");

// Function PiecesSequence.InteractiveLevelSequenceActor.InteractiveSegmentTick
// 0x0004 (0x0004 - 0x0000)
struct InteractiveLevelSequenceActor_InteractiveSegmentTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractiveLevelSequenceActor_InteractiveSegmentTick) == 0x000004, "Wrong alignment on InteractiveLevelSequenceActor_InteractiveSegmentTick");
static_assert(sizeof(InteractiveLevelSequenceActor_InteractiveSegmentTick) == 0x000004, "Wrong size on InteractiveLevelSequenceActor_InteractiveSegmentTick");
static_assert(offsetof(InteractiveLevelSequenceActor_InteractiveSegmentTick, DeltaSeconds) == 0x000000, "Member 'InteractiveLevelSequenceActor_InteractiveSegmentTick::DeltaSeconds' has a wrong offset!");

// Function PiecesSequence.InteractiveLevelSequenceActor.OnSequenceObjectSpawned
// 0x0020 (0x0020 - 0x0000)
struct InteractiveLevelSequenceActor_OnSequenceObjectSpawned final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneEvaluationOperand           Operand;                                           // 0x0008(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractiveLevelSequenceActor_OnSequenceObjectSpawned) == 0x000008, "Wrong alignment on InteractiveLevelSequenceActor_OnSequenceObjectSpawned");
static_assert(sizeof(InteractiveLevelSequenceActor_OnSequenceObjectSpawned) == 0x000020, "Wrong size on InteractiveLevelSequenceActor_OnSequenceObjectSpawned");
static_assert(offsetof(InteractiveLevelSequenceActor_OnSequenceObjectSpawned, Object) == 0x000000, "Member 'InteractiveLevelSequenceActor_OnSequenceObjectSpawned::Object' has a wrong offset!");
static_assert(offsetof(InteractiveLevelSequenceActor_OnSequenceObjectSpawned, Operand) == 0x000008, "Member 'InteractiveLevelSequenceActor_OnSequenceObjectSpawned::Operand' has a wrong offset!");

// Function PiecesSequence.InteractiveLevelSequenceActor.CanActivateInteractiveSegment
// 0x0008 (0x0008 - 0x0000)
struct InteractiveLevelSequenceActor_CanActivateInteractiveSegment final
{
public:
	int32                                         SectionNumber;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractiveLevelSequenceActor_CanActivateInteractiveSegment) == 0x000004, "Wrong alignment on InteractiveLevelSequenceActor_CanActivateInteractiveSegment");
static_assert(sizeof(InteractiveLevelSequenceActor_CanActivateInteractiveSegment) == 0x000008, "Wrong size on InteractiveLevelSequenceActor_CanActivateInteractiveSegment");
static_assert(offsetof(InteractiveLevelSequenceActor_CanActivateInteractiveSegment, SectionNumber) == 0x000000, "Member 'InteractiveLevelSequenceActor_CanActivateInteractiveSegment::SectionNumber' has a wrong offset!");
static_assert(offsetof(InteractiveLevelSequenceActor_CanActivateInteractiveSegment, ReturnValue) == 0x000004, "Member 'InteractiveLevelSequenceActor_CanActivateInteractiveSegment::ReturnValue' has a wrong offset!");

// Function PiecesSequence.InteractiveLevelSequenceActor.GetLevelSequenceAsSoftObject
// 0x0028 (0x0028 - 0x0000)
struct InteractiveLevelSequenceActor_GetLevelSequenceAsSoftObject final
{
public:
	TSoftObjectPtr<class ULevelSequence>          ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractiveLevelSequenceActor_GetLevelSequenceAsSoftObject) == 0x000008, "Wrong alignment on InteractiveLevelSequenceActor_GetLevelSequenceAsSoftObject");
static_assert(sizeof(InteractiveLevelSequenceActor_GetLevelSequenceAsSoftObject) == 0x000028, "Wrong size on InteractiveLevelSequenceActor_GetLevelSequenceAsSoftObject");
static_assert(offsetof(InteractiveLevelSequenceActor_GetLevelSequenceAsSoftObject, ReturnValue) == 0x000000, "Member 'InteractiveLevelSequenceActor_GetLevelSequenceAsSoftObject::ReturnValue' has a wrong offset!");

// Function PiecesSequence.InteractiveLevelSequenceActor.GetSectionSequenceData
// 0x0038 (0x0038 - 0x0000)
struct InteractiveLevelSequenceActor_GetSectionSequenceData final
{
public:
	int32                                         SectionNumber;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInteractiveSequenceSegment            ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractiveLevelSequenceActor_GetSectionSequenceData) == 0x000008, "Wrong alignment on InteractiveLevelSequenceActor_GetSectionSequenceData");
static_assert(sizeof(InteractiveLevelSequenceActor_GetSectionSequenceData) == 0x000038, "Wrong size on InteractiveLevelSequenceActor_GetSectionSequenceData");
static_assert(offsetof(InteractiveLevelSequenceActor_GetSectionSequenceData, SectionNumber) == 0x000000, "Member 'InteractiveLevelSequenceActor_GetSectionSequenceData::SectionNumber' has a wrong offset!");
static_assert(offsetof(InteractiveLevelSequenceActor_GetSectionSequenceData, ReturnValue) == 0x000008, "Member 'InteractiveLevelSequenceActor_GetSectionSequenceData::ReturnValue' has a wrong offset!");

// Function PiecesSequence.InteractiveLevelSequenceActor.HasSection
// 0x0008 (0x0008 - 0x0000)
struct InteractiveLevelSequenceActor_HasSection final
{
public:
	int32                                         SectionNumber;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractiveLevelSequenceActor_HasSection) == 0x000004, "Wrong alignment on InteractiveLevelSequenceActor_HasSection");
static_assert(sizeof(InteractiveLevelSequenceActor_HasSection) == 0x000008, "Wrong size on InteractiveLevelSequenceActor_HasSection");
static_assert(offsetof(InteractiveLevelSequenceActor_HasSection, SectionNumber) == 0x000000, "Member 'InteractiveLevelSequenceActor_HasSection::SectionNumber' has a wrong offset!");
static_assert(offsetof(InteractiveLevelSequenceActor_HasSection, ReturnValue) == 0x000004, "Member 'InteractiveLevelSequenceActor_HasSection::ReturnValue' has a wrong offset!");

// Function PiecesSequence.InteractiveSequenceCameraModifier.GetBlendValue
// 0x0004 (0x0004 - 0x0000)
struct InteractiveSequenceCameraModifier_GetBlendValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractiveSequenceCameraModifier_GetBlendValue) == 0x000004, "Wrong alignment on InteractiveSequenceCameraModifier_GetBlendValue");
static_assert(sizeof(InteractiveSequenceCameraModifier_GetBlendValue) == 0x000004, "Wrong size on InteractiveSequenceCameraModifier_GetBlendValue");
static_assert(offsetof(InteractiveSequenceCameraModifier_GetBlendValue, ReturnValue) == 0x000000, "Member 'InteractiveSequenceCameraModifier_GetBlendValue::ReturnValue' has a wrong offset!");

// Function PiecesSequence.PiecesCutsceneWidget.ListenForInputSequence
// 0x0028 (0x0028 - 0x0000)
struct PiecesCutsceneWidget_ListenForInputSequence final
{
public:
	TArray<class FName>                           ActionNames;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EInputEvent                                   EventType;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsume;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             Callback;                                          // 0x0014(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PiecesCutsceneWidget_ListenForInputSequence) == 0x000008, "Wrong alignment on PiecesCutsceneWidget_ListenForInputSequence");
static_assert(sizeof(PiecesCutsceneWidget_ListenForInputSequence) == 0x000028, "Wrong size on PiecesCutsceneWidget_ListenForInputSequence");
static_assert(offsetof(PiecesCutsceneWidget_ListenForInputSequence, ActionNames) == 0x000000, "Member 'PiecesCutsceneWidget_ListenForInputSequence::ActionNames' has a wrong offset!");
static_assert(offsetof(PiecesCutsceneWidget_ListenForInputSequence, EventType) == 0x000010, "Member 'PiecesCutsceneWidget_ListenForInputSequence::EventType' has a wrong offset!");
static_assert(offsetof(PiecesCutsceneWidget_ListenForInputSequence, bConsume) == 0x000011, "Member 'PiecesCutsceneWidget_ListenForInputSequence::bConsume' has a wrong offset!");
static_assert(offsetof(PiecesCutsceneWidget_ListenForInputSequence, Callback) == 0x000014, "Member 'PiecesCutsceneWidget_ListenForInputSequence::Callback' has a wrong offset!");

// Function PiecesSequence.PiecesCutsceneWidget.OnSkipCutscene
// 0x0001 (0x0001 - 0x0000)
struct PiecesCutsceneWidget_OnSkipCutscene final
{
public:
	bool                                          bPressed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesCutsceneWidget_OnSkipCutscene) == 0x000001, "Wrong alignment on PiecesCutsceneWidget_OnSkipCutscene");
static_assert(sizeof(PiecesCutsceneWidget_OnSkipCutscene) == 0x000001, "Wrong size on PiecesCutsceneWidget_OnSkipCutscene");
static_assert(offsetof(PiecesCutsceneWidget_OnSkipCutscene, bPressed) == 0x000000, "Member 'PiecesCutsceneWidget_OnSkipCutscene::bPressed' has a wrong offset!");

// Function PiecesSequence.PiecesCutsceneWidget.SetFadeToBlackOnSkip
// 0x0001 (0x0001 - 0x0000)
struct PiecesCutsceneWidget_SetFadeToBlackOnSkip final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesCutsceneWidget_SetFadeToBlackOnSkip) == 0x000001, "Wrong alignment on PiecesCutsceneWidget_SetFadeToBlackOnSkip");
static_assert(sizeof(PiecesCutsceneWidget_SetFadeToBlackOnSkip) == 0x000001, "Wrong size on PiecesCutsceneWidget_SetFadeToBlackOnSkip");
static_assert(offsetof(PiecesCutsceneWidget_SetFadeToBlackOnSkip, Value) == 0x000000, "Member 'PiecesCutsceneWidget_SetFadeToBlackOnSkip::Value' has a wrong offset!");

// Function PiecesSequence.PiecesCutsceneWidget.SkipCutsceneActionHandler
// 0x0010 (0x0010 - 0x0000)
struct PiecesCutsceneWidget_SkipCutsceneActionHandler final
{
public:
	struct FInputActionValue                      InputActionValue;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesCutsceneWidget_SkipCutsceneActionHandler) == 0x000004, "Wrong alignment on PiecesCutsceneWidget_SkipCutsceneActionHandler");
static_assert(sizeof(PiecesCutsceneWidget_SkipCutsceneActionHandler) == 0x000010, "Wrong size on PiecesCutsceneWidget_SkipCutsceneActionHandler");
static_assert(offsetof(PiecesCutsceneWidget_SkipCutsceneActionHandler, InputActionValue) == 0x000000, "Member 'PiecesCutsceneWidget_SkipCutsceneActionHandler::InputActionValue' has a wrong offset!");

// Function PiecesSequence.PiecesCutsceneWidget.IsAutoDestroyActive
// 0x0001 (0x0001 - 0x0000)
struct PiecesCutsceneWidget_IsAutoDestroyActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesCutsceneWidget_IsAutoDestroyActive) == 0x000001, "Wrong alignment on PiecesCutsceneWidget_IsAutoDestroyActive");
static_assert(sizeof(PiecesCutsceneWidget_IsAutoDestroyActive) == 0x000001, "Wrong size on PiecesCutsceneWidget_IsAutoDestroyActive");
static_assert(offsetof(PiecesCutsceneWidget_IsAutoDestroyActive, ReturnValue) == 0x000000, "Member 'PiecesCutsceneWidget_IsAutoDestroyActive::ReturnValue' has a wrong offset!");

// Function PiecesSequence.PiecesLevelSequenceDirector.EndInteractiveSequenceModifier
// 0x0010 (0x0010 - 0x0000)
struct PiecesLevelSequenceDirector_EndInteractiveSequenceModifier final
{
public:
	class UInteractiveSequenceModifier*           Modifier;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesLevelSequenceDirector_EndInteractiveSequenceModifier) == 0x000008, "Wrong alignment on PiecesLevelSequenceDirector_EndInteractiveSequenceModifier");
static_assert(sizeof(PiecesLevelSequenceDirector_EndInteractiveSequenceModifier) == 0x000010, "Wrong size on PiecesLevelSequenceDirector_EndInteractiveSequenceModifier");
static_assert(offsetof(PiecesLevelSequenceDirector_EndInteractiveSequenceModifier, Modifier) == 0x000000, "Member 'PiecesLevelSequenceDirector_EndInteractiveSequenceModifier::Modifier' has a wrong offset!");
static_assert(offsetof(PiecesLevelSequenceDirector_EndInteractiveSequenceModifier, PlayerController) == 0x000008, "Member 'PiecesLevelSequenceDirector_EndInteractiveSequenceModifier::PlayerController' has a wrong offset!");

// Function PiecesSequence.PiecesLevelSequenceDirector.StartInteractiveSequenceModifier
// 0x0010 (0x0010 - 0x0000)
struct PiecesLevelSequenceDirector_StartInteractiveSequenceModifier final
{
public:
	class UInteractiveSequenceModifier*           Modifier;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesLevelSequenceDirector_StartInteractiveSequenceModifier) == 0x000008, "Wrong alignment on PiecesLevelSequenceDirector_StartInteractiveSequenceModifier");
static_assert(sizeof(PiecesLevelSequenceDirector_StartInteractiveSequenceModifier) == 0x000010, "Wrong size on PiecesLevelSequenceDirector_StartInteractiveSequenceModifier");
static_assert(offsetof(PiecesLevelSequenceDirector_StartInteractiveSequenceModifier, Modifier) == 0x000000, "Member 'PiecesLevelSequenceDirector_StartInteractiveSequenceModifier::Modifier' has a wrong offset!");
static_assert(offsetof(PiecesLevelSequenceDirector_StartInteractiveSequenceModifier, PlayerController) == 0x000008, "Member 'PiecesLevelSequenceDirector_StartInteractiveSequenceModifier::PlayerController' has a wrong offset!");

// Function PiecesSequence.PiecesLevelSequenceDirector.TriggerSequenceNotify
// 0x0008 (0x0008 - 0x0000)
struct PiecesLevelSequenceDirector_TriggerSequenceNotify final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesLevelSequenceDirector_TriggerSequenceNotify) == 0x000004, "Wrong alignment on PiecesLevelSequenceDirector_TriggerSequenceNotify");
static_assert(sizeof(PiecesLevelSequenceDirector_TriggerSequenceNotify) == 0x000008, "Wrong size on PiecesLevelSequenceDirector_TriggerSequenceNotify");
static_assert(offsetof(PiecesLevelSequenceDirector_TriggerSequenceNotify, EventTag) == 0x000000, "Member 'PiecesLevelSequenceDirector_TriggerSequenceNotify::EventTag' has a wrong offset!");

// Function PiecesSequence.PiecesLevelSequenceDirector.GetSequencePlayer
// 0x0008 (0x0008 - 0x0000)
struct PiecesLevelSequenceDirector_GetSequencePlayer final
{
public:
	class UPiecesLevelSequencePlayer*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesLevelSequenceDirector_GetSequencePlayer) == 0x000008, "Wrong alignment on PiecesLevelSequenceDirector_GetSequencePlayer");
static_assert(sizeof(PiecesLevelSequenceDirector_GetSequencePlayer) == 0x000008, "Wrong size on PiecesLevelSequenceDirector_GetSequencePlayer");
static_assert(offsetof(PiecesLevelSequenceDirector_GetSequencePlayer, ReturnValue) == 0x000000, "Member 'PiecesLevelSequenceDirector_GetSequencePlayer::ReturnValue' has a wrong offset!");

// Function PiecesSequence.PiecesLevelSequencePlayer.CreatePiecesLevelSequencePlayer
// 0x0058 (0x0058 - 0x0000)
struct PiecesLevelSequencePlayer_CreatePiecesLevelSequencePlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         InLevelSequence;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneSequencePlaybackSettings    Settings;                                          // 0x0010(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPiecesLevelSequencePlayerPlaybackSettings PiecesSettings;                                    // 0x0028(0x0020)(Parm, NativeAccessSpecifierPublic)
	class APiecesLevelSequenceActor*              OutActor;                                          // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPiecesLevelSequencePlayer*             ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesLevelSequencePlayer_CreatePiecesLevelSequencePlayer) == 0x000008, "Wrong alignment on PiecesLevelSequencePlayer_CreatePiecesLevelSequencePlayer");
static_assert(sizeof(PiecesLevelSequencePlayer_CreatePiecesLevelSequencePlayer) == 0x000058, "Wrong size on PiecesLevelSequencePlayer_CreatePiecesLevelSequencePlayer");
static_assert(offsetof(PiecesLevelSequencePlayer_CreatePiecesLevelSequencePlayer, WorldContextObject) == 0x000000, "Member 'PiecesLevelSequencePlayer_CreatePiecesLevelSequencePlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PiecesLevelSequencePlayer_CreatePiecesLevelSequencePlayer, InLevelSequence) == 0x000008, "Member 'PiecesLevelSequencePlayer_CreatePiecesLevelSequencePlayer::InLevelSequence' has a wrong offset!");
static_assert(offsetof(PiecesLevelSequencePlayer_CreatePiecesLevelSequencePlayer, Settings) == 0x000010, "Member 'PiecesLevelSequencePlayer_CreatePiecesLevelSequencePlayer::Settings' has a wrong offset!");
static_assert(offsetof(PiecesLevelSequencePlayer_CreatePiecesLevelSequencePlayer, PiecesSettings) == 0x000028, "Member 'PiecesLevelSequencePlayer_CreatePiecesLevelSequencePlayer::PiecesSettings' has a wrong offset!");
static_assert(offsetof(PiecesLevelSequencePlayer_CreatePiecesLevelSequencePlayer, OutActor) == 0x000048, "Member 'PiecesLevelSequencePlayer_CreatePiecesLevelSequencePlayer::OutActor' has a wrong offset!");
static_assert(offsetof(PiecesLevelSequencePlayer_CreatePiecesLevelSequencePlayer, ReturnValue) == 0x000050, "Member 'PiecesLevelSequencePlayer_CreatePiecesLevelSequencePlayer::ReturnValue' has a wrong offset!");

// Function PiecesSequence.PiecesLevelSequencePlayer.OnCameraCutHandler
// 0x0008 (0x0008 - 0x0000)
struct PiecesLevelSequencePlayer_OnCameraCutHandler final
{
public:
	class UCameraComponent*                       CameraComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesLevelSequencePlayer_OnCameraCutHandler) == 0x000008, "Wrong alignment on PiecesLevelSequencePlayer_OnCameraCutHandler");
static_assert(sizeof(PiecesLevelSequencePlayer_OnCameraCutHandler) == 0x000008, "Wrong size on PiecesLevelSequencePlayer_OnCameraCutHandler");
static_assert(offsetof(PiecesLevelSequencePlayer_OnCameraCutHandler, CameraComponent) == 0x000000, "Member 'PiecesLevelSequencePlayer_OnCameraCutHandler::CameraComponent' has a wrong offset!");

// DelegateFunction PiecesSequence.PiecesLevelSequencePlayer.OnSequenceSkipped__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct PiecesLevelSequencePlayer_OnSequenceSkipped__DelegateSignature final
{
public:
	class UPiecesLevelSequencePlayer*             SequencePlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesLevelSequencePlayer_OnSequenceSkipped__DelegateSignature) == 0x000008, "Wrong alignment on PiecesLevelSequencePlayer_OnSequenceSkipped__DelegateSignature");
static_assert(sizeof(PiecesLevelSequencePlayer_OnSequenceSkipped__DelegateSignature) == 0x000008, "Wrong size on PiecesLevelSequencePlayer_OnSequenceSkipped__DelegateSignature");
static_assert(offsetof(PiecesLevelSequencePlayer_OnSequenceSkipped__DelegateSignature, SequencePlayer) == 0x000000, "Member 'PiecesLevelSequencePlayer_OnSequenceSkipped__DelegateSignature::SequencePlayer' has a wrong offset!");

// Function PiecesSequence.PiecesLevelSequencePlayer.IsSkipInitiated
// 0x0001 (0x0001 - 0x0000)
struct PiecesLevelSequencePlayer_IsSkipInitiated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesLevelSequencePlayer_IsSkipInitiated) == 0x000001, "Wrong alignment on PiecesLevelSequencePlayer_IsSkipInitiated");
static_assert(sizeof(PiecesLevelSequencePlayer_IsSkipInitiated) == 0x000001, "Wrong size on PiecesLevelSequencePlayer_IsSkipInitiated");
static_assert(offsetof(PiecesLevelSequencePlayer_IsSkipInitiated, ReturnValue) == 0x000000, "Member 'PiecesLevelSequencePlayer_IsSkipInitiated::ReturnValue' has a wrong offset!");

// Function PiecesSequence.PiecesMovieSceneLetterboxWidget.SetAlpha
// 0x0004 (0x0004 - 0x0000)
struct PiecesMovieSceneLetterboxWidget_SetAlpha final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesMovieSceneLetterboxWidget_SetAlpha) == 0x000004, "Wrong alignment on PiecesMovieSceneLetterboxWidget_SetAlpha");
static_assert(sizeof(PiecesMovieSceneLetterboxWidget_SetAlpha) == 0x000004, "Wrong size on PiecesMovieSceneLetterboxWidget_SetAlpha");
static_assert(offsetof(PiecesMovieSceneLetterboxWidget_SetAlpha, Value) == 0x000000, "Member 'PiecesMovieSceneLetterboxWidget_SetAlpha::Value' has a wrong offset!");

}

