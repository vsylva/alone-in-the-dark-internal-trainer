#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PrefabricatorRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function PrefabricatorRuntime.PrefabActor.GetPrefabAsset
// 0x0008 (0x0008 - 0x0000)
struct PrefabActor_GetPrefabAsset final
{
public:
	class UPrefabricatorAsset*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrefabActor_GetPrefabAsset) == 0x000008, "Wrong alignment on PrefabActor_GetPrefabAsset");
static_assert(sizeof(PrefabActor_GetPrefabAsset) == 0x000008, "Wrong size on PrefabActor_GetPrefabAsset");
static_assert(offsetof(PrefabActor_GetPrefabAsset, ReturnValue) == 0x000000, "Member 'PrefabActor_GetPrefabAsset::ReturnValue' has a wrong offset!");

// Function PrefabricatorRuntime.PrefabActor.IsPrefabOutdated
// 0x0001 (0x0001 - 0x0000)
struct PrefabActor_IsPrefabOutdated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrefabActor_IsPrefabOutdated) == 0x000001, "Wrong alignment on PrefabActor_IsPrefabOutdated");
static_assert(sizeof(PrefabActor_IsPrefabOutdated) == 0x000001, "Wrong size on PrefabActor_IsPrefabOutdated");
static_assert(offsetof(PrefabActor_IsPrefabOutdated, ReturnValue) == 0x000000, "Member 'PrefabActor_IsPrefabOutdated::ReturnValue' has a wrong offset!");

// Function PrefabricatorRuntime.PrefabActor.RandomizeSeed
// 0x000C (0x000C - 0x0000)
struct PrefabActor_RandomizeSeed final
{
public:
	struct FRandomStream                          InRandom;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRecursive;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PrefabActor_RandomizeSeed) == 0x000004, "Wrong alignment on PrefabActor_RandomizeSeed");
static_assert(sizeof(PrefabActor_RandomizeSeed) == 0x00000C, "Wrong size on PrefabActor_RandomizeSeed");
static_assert(offsetof(PrefabActor_RandomizeSeed, InRandom) == 0x000000, "Member 'PrefabActor_RandomizeSeed::InRandom' has a wrong offset!");
static_assert(offsetof(PrefabActor_RandomizeSeed, bRecursive) == 0x000008, "Member 'PrefabActor_RandomizeSeed::bRecursive' has a wrong offset!");

// Function PrefabricatorRuntime.PrefabRandomizer.Randomize
// 0x0004 (0x0004 - 0x0000)
struct PrefabRandomizer_Randomize final
{
public:
	int32                                         InSeed;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrefabRandomizer_Randomize) == 0x000004, "Wrong alignment on PrefabRandomizer_Randomize");
static_assert(sizeof(PrefabRandomizer_Randomize) == 0x000004, "Wrong size on PrefabRandomizer_Randomize");
static_assert(offsetof(PrefabRandomizer_Randomize, InSeed) == 0x000000, "Member 'PrefabRandomizer_Randomize::InSeed' has a wrong offset!");

// Function PrefabricatorRuntime.PrefabricatorEventListener.PostSpawn
// 0x0008 (0x0008 - 0x0000)
struct PrefabricatorEventListener_PostSpawn final
{
public:
	class APrefabActor*                           Prefab;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrefabricatorEventListener_PostSpawn) == 0x000008, "Wrong alignment on PrefabricatorEventListener_PostSpawn");
static_assert(sizeof(PrefabricatorEventListener_PostSpawn) == 0x000008, "Wrong size on PrefabricatorEventListener_PostSpawn");
static_assert(offsetof(PrefabricatorEventListener_PostSpawn, Prefab) == 0x000000, "Member 'PrefabricatorEventListener_PostSpawn::Prefab' has a wrong offset!");

// Function PrefabricatorRuntime.PrefabricatorBlueprintLibrary.FindTopMostPrefabActor
// 0x0010 (0x0010 - 0x0000)
struct PrefabricatorBlueprintLibrary_FindTopMostPrefabActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APrefabActor*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrefabricatorBlueprintLibrary_FindTopMostPrefabActor) == 0x000008, "Wrong alignment on PrefabricatorBlueprintLibrary_FindTopMostPrefabActor");
static_assert(sizeof(PrefabricatorBlueprintLibrary_FindTopMostPrefabActor) == 0x000010, "Wrong size on PrefabricatorBlueprintLibrary_FindTopMostPrefabActor");
static_assert(offsetof(PrefabricatorBlueprintLibrary_FindTopMostPrefabActor, InActor) == 0x000000, "Member 'PrefabricatorBlueprintLibrary_FindTopMostPrefabActor::InActor' has a wrong offset!");
static_assert(offsetof(PrefabricatorBlueprintLibrary_FindTopMostPrefabActor, ReturnValue) == 0x000008, "Member 'PrefabricatorBlueprintLibrary_FindTopMostPrefabActor::ReturnValue' has a wrong offset!");

// Function PrefabricatorRuntime.PrefabricatorBlueprintLibrary.GetAllAttachedActors
// 0x0018 (0x0018 - 0x0000)
struct PrefabricatorBlueprintLibrary_GetAllAttachedActors final
{
public:
	class AActor*                                 Prefab;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         AttachedActors;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrefabricatorBlueprintLibrary_GetAllAttachedActors) == 0x000008, "Wrong alignment on PrefabricatorBlueprintLibrary_GetAllAttachedActors");
static_assert(sizeof(PrefabricatorBlueprintLibrary_GetAllAttachedActors) == 0x000018, "Wrong size on PrefabricatorBlueprintLibrary_GetAllAttachedActors");
static_assert(offsetof(PrefabricatorBlueprintLibrary_GetAllAttachedActors, Prefab) == 0x000000, "Member 'PrefabricatorBlueprintLibrary_GetAllAttachedActors::Prefab' has a wrong offset!");
static_assert(offsetof(PrefabricatorBlueprintLibrary_GetAllAttachedActors, AttachedActors) == 0x000008, "Member 'PrefabricatorBlueprintLibrary_GetAllAttachedActors::AttachedActors' has a wrong offset!");

// Function PrefabricatorRuntime.PrefabricatorBlueprintLibrary.RandomizePrefab
// 0x0010 (0x0010 - 0x0000)
struct PrefabricatorBlueprintLibrary_RandomizePrefab final
{
public:
	class APrefabActor*                           PrefabActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRandomStream                          InRandom;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrefabricatorBlueprintLibrary_RandomizePrefab) == 0x000008, "Wrong alignment on PrefabricatorBlueprintLibrary_RandomizePrefab");
static_assert(sizeof(PrefabricatorBlueprintLibrary_RandomizePrefab) == 0x000010, "Wrong size on PrefabricatorBlueprintLibrary_RandomizePrefab");
static_assert(offsetof(PrefabricatorBlueprintLibrary_RandomizePrefab, PrefabActor) == 0x000000, "Member 'PrefabricatorBlueprintLibrary_RandomizePrefab::PrefabActor' has a wrong offset!");
static_assert(offsetof(PrefabricatorBlueprintLibrary_RandomizePrefab, InRandom) == 0x000008, "Member 'PrefabricatorBlueprintLibrary_RandomizePrefab::InRandom' has a wrong offset!");

// Function PrefabricatorRuntime.PrefabricatorBlueprintLibrary.SetPrefabAsset
// 0x0018 (0x0018 - 0x0000)
struct PrefabricatorBlueprintLibrary_SetPrefabAsset final
{
public:
	class APrefabActor*                           PrefabActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrefabricatorAssetInterface*           Prefab;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReloadPrefab;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PrefabricatorBlueprintLibrary_SetPrefabAsset) == 0x000008, "Wrong alignment on PrefabricatorBlueprintLibrary_SetPrefabAsset");
static_assert(sizeof(PrefabricatorBlueprintLibrary_SetPrefabAsset) == 0x000018, "Wrong size on PrefabricatorBlueprintLibrary_SetPrefabAsset");
static_assert(offsetof(PrefabricatorBlueprintLibrary_SetPrefabAsset, PrefabActor) == 0x000000, "Member 'PrefabricatorBlueprintLibrary_SetPrefabAsset::PrefabActor' has a wrong offset!");
static_assert(offsetof(PrefabricatorBlueprintLibrary_SetPrefabAsset, Prefab) == 0x000008, "Member 'PrefabricatorBlueprintLibrary_SetPrefabAsset::Prefab' has a wrong offset!");
static_assert(offsetof(PrefabricatorBlueprintLibrary_SetPrefabAsset, bReloadPrefab) == 0x000010, "Member 'PrefabricatorBlueprintLibrary_SetPrefabAsset::bReloadPrefab' has a wrong offset!");

// Function PrefabricatorRuntime.PrefabricatorBlueprintLibrary.SpawnPrefab
// 0x0050 (0x0050 - 0x0000)
struct PrefabricatorBlueprintLibrary_SpawnPrefab final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrefabricatorAssetInterface*           Prefab;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Seed;                                              // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APrefabActor*                           ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrefabricatorBlueprintLibrary_SpawnPrefab) == 0x000010, "Wrong alignment on PrefabricatorBlueprintLibrary_SpawnPrefab");
static_assert(sizeof(PrefabricatorBlueprintLibrary_SpawnPrefab) == 0x000050, "Wrong size on PrefabricatorBlueprintLibrary_SpawnPrefab");
static_assert(offsetof(PrefabricatorBlueprintLibrary_SpawnPrefab, WorldContextObject) == 0x000000, "Member 'PrefabricatorBlueprintLibrary_SpawnPrefab::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PrefabricatorBlueprintLibrary_SpawnPrefab, Prefab) == 0x000008, "Member 'PrefabricatorBlueprintLibrary_SpawnPrefab::Prefab' has a wrong offset!");
static_assert(offsetof(PrefabricatorBlueprintLibrary_SpawnPrefab, Transform) == 0x000010, "Member 'PrefabricatorBlueprintLibrary_SpawnPrefab::Transform' has a wrong offset!");
static_assert(offsetof(PrefabricatorBlueprintLibrary_SpawnPrefab, Seed) == 0x000040, "Member 'PrefabricatorBlueprintLibrary_SpawnPrefab::Seed' has a wrong offset!");
static_assert(offsetof(PrefabricatorBlueprintLibrary_SpawnPrefab, ReturnValue) == 0x000048, "Member 'PrefabricatorBlueprintLibrary_SpawnPrefab::ReturnValue' has a wrong offset!");

// Function PrefabricatorRuntime.PrefabricatorBlueprintLibrary.UnlinkPrefab
// 0x0008 (0x0008 - 0x0000)
struct PrefabricatorBlueprintLibrary_UnlinkPrefab final
{
public:
	class APrefabActor*                           PrefabActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrefabricatorBlueprintLibrary_UnlinkPrefab) == 0x000008, "Wrong alignment on PrefabricatorBlueprintLibrary_UnlinkPrefab");
static_assert(sizeof(PrefabricatorBlueprintLibrary_UnlinkPrefab) == 0x000008, "Wrong size on PrefabricatorBlueprintLibrary_UnlinkPrefab");
static_assert(offsetof(PrefabricatorBlueprintLibrary_UnlinkPrefab, PrefabActor) == 0x000000, "Member 'PrefabricatorBlueprintLibrary_UnlinkPrefab::PrefabActor' has a wrong offset!");

}

