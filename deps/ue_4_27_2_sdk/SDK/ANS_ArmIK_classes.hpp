#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ANS_ArmIK

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ANS_ArmIK.ANS_ArmIK_C
// 0x0020 (0x0050 - 0x0030)
class UANS_ArmIK_C final : public UAnimNotifyState
{
public:
	bool                                          TriggerActive;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsRightArm;                                        // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WeightCurveName;                                   // 0x0034(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TargetCompensationBone;                            // 0x003C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseConstantCompensationOffset;                    // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bUseInteractionReachAsLocationReference;           // 0x0045(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InteractionReachBoneName;                          // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void GetReferenceAndCompensationData(class UAnimSequenceBase* Sequence, class FName BoneName, const class UAnimInstance* AnimInstance, class USkeletalMeshComponent* Mesh, struct FArmIKReferenceTarget* ArmIKReferenceTarget, struct FArmIKCompensationData* ArmIKCompensationData) const;
	bool Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation) const;
	bool Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ANS_ArmIK_C">();
	}
	static class UANS_ArmIK_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UANS_ArmIK_C>();
	}
};
static_assert(alignof(UANS_ArmIK_C) == 0x000008, "Wrong alignment on UANS_ArmIK_C");
static_assert(sizeof(UANS_ArmIK_C) == 0x000050, "Wrong size on UANS_ArmIK_C");
static_assert(offsetof(UANS_ArmIK_C, TriggerActive) == 0x000030, "Member 'UANS_ArmIK_C::TriggerActive' has a wrong offset!");
static_assert(offsetof(UANS_ArmIK_C, IsRightArm) == 0x000031, "Member 'UANS_ArmIK_C::IsRightArm' has a wrong offset!");
static_assert(offsetof(UANS_ArmIK_C, WeightCurveName) == 0x000034, "Member 'UANS_ArmIK_C::WeightCurveName' has a wrong offset!");
static_assert(offsetof(UANS_ArmIK_C, TargetCompensationBone) == 0x00003C, "Member 'UANS_ArmIK_C::TargetCompensationBone' has a wrong offset!");
static_assert(offsetof(UANS_ArmIK_C, bUseConstantCompensationOffset) == 0x000044, "Member 'UANS_ArmIK_C::bUseConstantCompensationOffset' has a wrong offset!");
static_assert(offsetof(UANS_ArmIK_C, bUseInteractionReachAsLocationReference) == 0x000045, "Member 'UANS_ArmIK_C::bUseInteractionReachAsLocationReference' has a wrong offset!");
static_assert(offsetof(UANS_ArmIK_C, InteractionReachBoneName) == 0x000048, "Member 'UANS_ArmIK_C::InteractionReachBoneName' has a wrong offset!");

}

