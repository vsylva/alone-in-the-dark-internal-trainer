#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_PC_Edward_PostProcess

#include "Basic.hpp"

#include "PiecesAnimNodes_structs.hpp"
#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "ObsidianFox_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_PC_Edward_PostProcess.ABP_PC_Edward_PostProcess_C
// 0x4840 (0x52B0 - 0x0A70)
class UABP_PC_Edward_PostProcess_C final : public UOFPostProcessAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0A70(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0A78(0x0020)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0A98(0x0020)()
	uint8                                         Pad_AB8[0x8];                                      // 0x0AB8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_AnimDynamics                 AnimGraphNode_AnimDynamics_1;                      // 0x0AC0(0x0440)()
	struct FAnimNode_AnimDynamics                 AnimGraphNode_AnimDynamics;                        // 0x0F00(0x0440)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose_1;                   // 0x1340(0x0118)()
	uint8                                         Pad_1458[0x8];                                     // 0x1458(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPiecesAnimNode_AnimDynamics           PiecesAnimGraphNode_AnimDynamics_11;               // 0x1460(0x0440)()
	struct FPiecesAnimNode_AnimDynamics           PiecesAnimGraphNode_AnimDynamics_10;               // 0x18A0(0x0440)()
	struct FPiecesAnimNode_AnimDynamics           PiecesAnimGraphNode_AnimDynamics_9;                // 0x1CE0(0x0440)()
	struct FPiecesAnimNode_AnimDynamics           PiecesAnimGraphNode_AnimDynamics_8;                // 0x2120(0x0440)()
	struct FPiecesAnimNode_AnimDynamics           PiecesAnimGraphNode_AnimDynamics_7;                // 0x2560(0x0440)()
	struct FPiecesAnimNode_AnimDynamics           PiecesAnimGraphNode_AnimDynamics_6;                // 0x29A0(0x0440)()
	struct FPiecesAnimNode_AnimDynamics           PiecesAnimGraphNode_AnimDynamics_5;                // 0x2DE0(0x0440)()
	struct FPiecesAnimNode_AnimDynamics           PiecesAnimGraphNode_AnimDynamics_4;                // 0x3220(0x0440)()
	struct FPiecesAnimNode_AnimDynamics           PiecesAnimGraphNode_AnimDynamics_3;                // 0x3660(0x0440)()
	struct FPiecesAnimNode_AnimDynamics           PiecesAnimGraphNode_AnimDynamics_2;                // 0x3AA0(0x0440)()
	struct FPiecesAnimNode_AnimDynamics           PiecesAnimGraphNode_AnimDynamics_1;                // 0x3EE0(0x0440)()
	struct FPiecesAnimNode_AnimDynamics           PiecesAnimGraphNode_AnimDynamics;                  // 0x4320(0x0440)()
	struct FPiecesAnimNode_RigidBody              PiecesAnimGraphNode_RigidBody;                     // 0x4760(0x0860)()
	struct FPiecesAnimNode_DynamicsResetter       PiecesAnimGraphNode_DynamicsResetter;              // 0x4FC0(0x00A0)()
	struct FAnimNode_Root                         AnimGraphNode_Root_1;                              // 0x5060(0x0030)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x5090(0x0030)()
	struct FAnimNode_LinkedAnimLayer              AnimGraphNode_LinkedAnimLayer;                     // 0x50C0(0x00B0)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose;                     // 0x5170(0x0118)()
	float                                         TieBlend;                                          // 0x5288(0x0004)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __CustomProperty_TieBlend_EB61D8CC49062B6952DBD9B25CE3F877; // 0x528C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WindDirection;                                     // 0x5290(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tie_Dynamics_Alpha;                                // 0x529C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Vest_Dynamics_Alpha;                               // 0x52A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Dynamics(const struct FPoseLink& DynamicsLayerInputPose, float TieBlend_0, struct FPoseLink* Dynamics_0);
	void AnimGraph(const struct FPoseLink& InPose, struct FPoseLink* AnimGraph_0);
	struct FVector GetRandomVector(float* Magnitude);
	void SlirreTest(float Offset, struct FVector* Force);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_PC_Edward_PostProcess_PiecesAnimGraphNode_RigidBody_55321AA646F14909BFC4A1B312F7D8F6();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void ExecuteUbergraph_ABP_PC_Edward_PostProcess(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_PC_Edward_PostProcess_C">();
	}
	static class UABP_PC_Edward_PostProcess_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_PC_Edward_PostProcess_C>();
	}
};
static_assert(alignof(UABP_PC_Edward_PostProcess_C) == 0x000010, "Wrong alignment on UABP_PC_Edward_PostProcess_C");
static_assert(sizeof(UABP_PC_Edward_PostProcess_C) == 0x0052B0, "Wrong size on UABP_PC_Edward_PostProcess_C");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, UberGraphFrame) == 0x000A70, "Member 'UABP_PC_Edward_PostProcess_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, AnimGraphNode_ComponentToLocalSpace) == 0x000A78, "Member 'UABP_PC_Edward_PostProcess_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, AnimGraphNode_LocalToComponentSpace) == 0x000A98, "Member 'UABP_PC_Edward_PostProcess_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, AnimGraphNode_AnimDynamics_1) == 0x000AC0, "Member 'UABP_PC_Edward_PostProcess_C::AnimGraphNode_AnimDynamics_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, AnimGraphNode_AnimDynamics) == 0x000F00, "Member 'UABP_PC_Edward_PostProcess_C::AnimGraphNode_AnimDynamics' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, AnimGraphNode_LinkedInputPose_1) == 0x001340, "Member 'UABP_PC_Edward_PostProcess_C::AnimGraphNode_LinkedInputPose_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, PiecesAnimGraphNode_AnimDynamics_11) == 0x001460, "Member 'UABP_PC_Edward_PostProcess_C::PiecesAnimGraphNode_AnimDynamics_11' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, PiecesAnimGraphNode_AnimDynamics_10) == 0x0018A0, "Member 'UABP_PC_Edward_PostProcess_C::PiecesAnimGraphNode_AnimDynamics_10' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, PiecesAnimGraphNode_AnimDynamics_9) == 0x001CE0, "Member 'UABP_PC_Edward_PostProcess_C::PiecesAnimGraphNode_AnimDynamics_9' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, PiecesAnimGraphNode_AnimDynamics_8) == 0x002120, "Member 'UABP_PC_Edward_PostProcess_C::PiecesAnimGraphNode_AnimDynamics_8' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, PiecesAnimGraphNode_AnimDynamics_7) == 0x002560, "Member 'UABP_PC_Edward_PostProcess_C::PiecesAnimGraphNode_AnimDynamics_7' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, PiecesAnimGraphNode_AnimDynamics_6) == 0x0029A0, "Member 'UABP_PC_Edward_PostProcess_C::PiecesAnimGraphNode_AnimDynamics_6' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, PiecesAnimGraphNode_AnimDynamics_5) == 0x002DE0, "Member 'UABP_PC_Edward_PostProcess_C::PiecesAnimGraphNode_AnimDynamics_5' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, PiecesAnimGraphNode_AnimDynamics_4) == 0x003220, "Member 'UABP_PC_Edward_PostProcess_C::PiecesAnimGraphNode_AnimDynamics_4' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, PiecesAnimGraphNode_AnimDynamics_3) == 0x003660, "Member 'UABP_PC_Edward_PostProcess_C::PiecesAnimGraphNode_AnimDynamics_3' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, PiecesAnimGraphNode_AnimDynamics_2) == 0x003AA0, "Member 'UABP_PC_Edward_PostProcess_C::PiecesAnimGraphNode_AnimDynamics_2' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, PiecesAnimGraphNode_AnimDynamics_1) == 0x003EE0, "Member 'UABP_PC_Edward_PostProcess_C::PiecesAnimGraphNode_AnimDynamics_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, PiecesAnimGraphNode_AnimDynamics) == 0x004320, "Member 'UABP_PC_Edward_PostProcess_C::PiecesAnimGraphNode_AnimDynamics' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, PiecesAnimGraphNode_RigidBody) == 0x004760, "Member 'UABP_PC_Edward_PostProcess_C::PiecesAnimGraphNode_RigidBody' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, PiecesAnimGraphNode_DynamicsResetter) == 0x004FC0, "Member 'UABP_PC_Edward_PostProcess_C::PiecesAnimGraphNode_DynamicsResetter' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, AnimGraphNode_Root_1) == 0x005060, "Member 'UABP_PC_Edward_PostProcess_C::AnimGraphNode_Root_1' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, AnimGraphNode_Root) == 0x005090, "Member 'UABP_PC_Edward_PostProcess_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, AnimGraphNode_LinkedAnimLayer) == 0x0050C0, "Member 'UABP_PC_Edward_PostProcess_C::AnimGraphNode_LinkedAnimLayer' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, AnimGraphNode_LinkedInputPose) == 0x005170, "Member 'UABP_PC_Edward_PostProcess_C::AnimGraphNode_LinkedInputPose' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, TieBlend) == 0x005288, "Member 'UABP_PC_Edward_PostProcess_C::TieBlend' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, __CustomProperty_TieBlend_EB61D8CC49062B6952DBD9B25CE3F877) == 0x00528C, "Member 'UABP_PC_Edward_PostProcess_C::__CustomProperty_TieBlend_EB61D8CC49062B6952DBD9B25CE3F877' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, WindDirection) == 0x005290, "Member 'UABP_PC_Edward_PostProcess_C::WindDirection' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, Tie_Dynamics_Alpha) == 0x00529C, "Member 'UABP_PC_Edward_PostProcess_C::Tie_Dynamics_Alpha' has a wrong offset!");
static_assert(offsetof(UABP_PC_Edward_PostProcess_C, Vest_Dynamics_Alpha) == 0x0052A0, "Member 'UABP_PC_Edward_PostProcess_C::Vest_Dynamics_Alpha' has a wrong offset!");

}

