#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PrefabricatorRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum PrefabricatorRuntime.EPrefabricatorPivotPosition
// NumValues: 0x0004
enum class EPrefabricatorPivotPosition : uint8
{
	ExtremeLeft                              = 0,
	ExtremeRight                             = 1,
	Center                                   = 2,
	EPrefabricatorPivotPosition_MAX          = 3,
};

// ScriptStruct PrefabricatorRuntime.PrefabricatorAssetCollectionItem
// 0x0030 (0x0030 - 0x0000)
struct FPrefabricatorAssetCollectionItem final
{
public:
	TSoftObjectPtr<class UPrefabricatorAsset>     PrefabAsset;                                       // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPrefabricatorAssetCollectionItem) == 0x000008, "Wrong alignment on FPrefabricatorAssetCollectionItem");
static_assert(sizeof(FPrefabricatorAssetCollectionItem) == 0x000030, "Wrong size on FPrefabricatorAssetCollectionItem");
static_assert(offsetof(FPrefabricatorAssetCollectionItem, PrefabAsset) == 0x000000, "Member 'FPrefabricatorAssetCollectionItem::PrefabAsset' has a wrong offset!");
static_assert(offsetof(FPrefabricatorAssetCollectionItem, Weight) == 0x000028, "Member 'FPrefabricatorAssetCollectionItem::Weight' has a wrong offset!");

// ScriptStruct PrefabricatorRuntime.PrefabricatorComponentData
// 0x0050 (0x0050 - 0x0000)
struct FPrefabricatorComponentData final
{
public:
	struct FTransform                             RelativeTransform;                                 // 0x0000(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ComponentName;                                     // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPrefabricatorProperty*>         Properties;                                        // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPrefabricatorComponentData) == 0x000010, "Wrong alignment on FPrefabricatorComponentData");
static_assert(sizeof(FPrefabricatorComponentData) == 0x000050, "Wrong size on FPrefabricatorComponentData");
static_assert(offsetof(FPrefabricatorComponentData, RelativeTransform) == 0x000000, "Member 'FPrefabricatorComponentData::RelativeTransform' has a wrong offset!");
static_assert(offsetof(FPrefabricatorComponentData, ComponentName) == 0x000030, "Member 'FPrefabricatorComponentData::ComponentName' has a wrong offset!");
static_assert(offsetof(FPrefabricatorComponentData, Properties) == 0x000040, "Member 'FPrefabricatorComponentData::Properties' has a wrong offset!");

// ScriptStruct PrefabricatorRuntime.PrefabricatorActorData
// 0x0090 (0x0090 - 0x0000)
struct FPrefabricatorActorData final
{
public:
	struct FGuid                                  PrefabItemID;                                      // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             RelativeTransform;                                 // 0x0010(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ClassPath;                                         // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         ClassPathRef;                                      // 0x0050(0x0018)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPrefabricatorProperty*>         Properties;                                        // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPrefabricatorComponentData>    Components;                                        // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPrefabricatorActorData) == 0x000010, "Wrong alignment on FPrefabricatorActorData");
static_assert(sizeof(FPrefabricatorActorData) == 0x000090, "Wrong size on FPrefabricatorActorData");
static_assert(offsetof(FPrefabricatorActorData, PrefabItemID) == 0x000000, "Member 'FPrefabricatorActorData::PrefabItemID' has a wrong offset!");
static_assert(offsetof(FPrefabricatorActorData, RelativeTransform) == 0x000010, "Member 'FPrefabricatorActorData::RelativeTransform' has a wrong offset!");
static_assert(offsetof(FPrefabricatorActorData, ClassPath) == 0x000040, "Member 'FPrefabricatorActorData::ClassPath' has a wrong offset!");
static_assert(offsetof(FPrefabricatorActorData, ClassPathRef) == 0x000050, "Member 'FPrefabricatorActorData::ClassPathRef' has a wrong offset!");
static_assert(offsetof(FPrefabricatorActorData, Properties) == 0x000068, "Member 'FPrefabricatorActorData::Properties' has a wrong offset!");
static_assert(offsetof(FPrefabricatorActorData, Components) == 0x000078, "Member 'FPrefabricatorActorData::Components' has a wrong offset!");

// ScriptStruct PrefabricatorRuntime.PrefabricatorPropertyAssetMapping
// 0x0038 (0x0038 - 0x0000)
struct FPrefabricatorPropertyAssetMapping final
{
public:
	struct FSoftObjectPath                        AssetReference;                                    // 0x0000(0x0018)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssetClassName;                                    // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AssetObjectPath;                                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseQuotes;                                        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPrefabricatorPropertyAssetMapping) == 0x000008, "Wrong alignment on FPrefabricatorPropertyAssetMapping");
static_assert(sizeof(FPrefabricatorPropertyAssetMapping) == 0x000038, "Wrong size on FPrefabricatorPropertyAssetMapping");
static_assert(offsetof(FPrefabricatorPropertyAssetMapping, AssetReference) == 0x000000, "Member 'FPrefabricatorPropertyAssetMapping::AssetReference' has a wrong offset!");
static_assert(offsetof(FPrefabricatorPropertyAssetMapping, AssetClassName) == 0x000018, "Member 'FPrefabricatorPropertyAssetMapping::AssetClassName' has a wrong offset!");
static_assert(offsetof(FPrefabricatorPropertyAssetMapping, AssetObjectPath) == 0x000028, "Member 'FPrefabricatorPropertyAssetMapping::AssetObjectPath' has a wrong offset!");
static_assert(offsetof(FPrefabricatorPropertyAssetMapping, bUseQuotes) == 0x000030, "Member 'FPrefabricatorPropertyAssetMapping::bUseQuotes' has a wrong offset!");

}

