#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EnemySpawn

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "ObsidianFox_classes.hpp"
#include "FMODStudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EnemySpawn.BP_EnemySpawn_C
// 0x0140 (0x0400 - 0x02C0)
class ABP_EnemySpawn_C final : public AEnemySpawner
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        Arrow;                                             // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFlowComponent*                         Flow;                                              // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_CommonEventsComponent_C*            CommonEventsComponent;                             // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SpawnPoint_Orb;                                    // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 SpawnPawnClass_DEPRECATED;                         // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         SpawnDelay;                                        // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartWithAggro;                                    // 0x02FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FD[0x3];                                      // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ABP_Door_C>              Door;                                              // 0x0300(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class ABP_Door_Double_C>       DoorDouble;                                        // 0x0328(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class ABP_EnemyCommon_C*                      BPEnemyCommon_;                                    // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             SpawnPlaySound;                                    // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             AggroPlaySound;                                    // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     SpawnSoundInstance;                                // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FFMODEventInstance                     AggroSoundInstance;                                // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasSpawned;                                        // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor)
	bool                                          Deactivate;                                        // 0x0379(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37A[0x6];                                      // 0x037A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIC_EnemyCommon_C*                     AIController;                                      // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartWithBehaviourTree;                            // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          StartSleeping;                                     // 0x0389(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShouldPatrol;                                      // 0x038A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38B[0x5];                                      // 0x038B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ATargetPoint*                           OrderTarget;                                       // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomeRangeRadius;                                   // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SpawnedCreatureIdentifyingTag;                     // 0x039C(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ABP_PatrolPath_C>        PatrolPathRef;                                     // 0x03A8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnEnemySpawned;                                    // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	ESpawnActorCollisionHandlingMethod            SpawnCollisionHandlingOverride;                    // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartOnWall;                                       // 0x03E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CanCirculate;                                      // 0x03E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SkipSpawnAnimation;                                // 0x03E3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          StartWithMonsterIntro;                             // 0x03E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E5[0x3];                                      // 0x03E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ATargetPoint*                           DefendTarget;                                      // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseOrderTargetAsHomeLocation;                      // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          beginBurrowed;                                     // 0x03F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NGPlusOnly;                                        // 0x03F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void OnEnemySpawned__DelegateSignature(class ABP_EnemyCommon_C* EnemySpawned, class AAIController* Spawn_AI_Controller, class ABP_EnemySpawn_C* Spawner);
	void ExecuteUbergraph_BP_EnemySpawn(int32 EntryPoint);
	void OnAggroChangedEvent(bool bEnabled);
	void OnDeathEvent(const struct FGameplayTagContainer& EventTags);
	void SpawnEnemy();
	void ReceiveBeginPlay();
	void OnDeath(const struct FGameplayTagContainer& EventTags);
	void BndEvt__BP_EnemySpawn_Flow_K2Node_ComponentBoundEvent_0_FlowComponentDynamicNotify__DelegateSignature(class UFlowComponent* FlowComponent, const struct FGameplayTag& NotifyTag);
	void StopBehaviourTree();
	void StartBehaviourTree();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Spawn();
	void UserConstructionScript();
	void StopAndDeleteSoundInstance(const struct FFMODEventInstance& EventInstance);
	void IsSpawnedAndAlive(bool* IsAliveAndSpawned);
	void Make_Enemy_Into_A_Corpse(class AObsidianFoxCharacter* OFCharacter);
	void NewGamePlusCheck(bool* ShouldSpawn);

	void ShouldSpawn_(bool* NewParam) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EnemySpawn_C">();
	}
	static class ABP_EnemySpawn_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EnemySpawn_C>();
	}
};
static_assert(alignof(ABP_EnemySpawn_C) == 0x000010, "Wrong alignment on ABP_EnemySpawn_C");
static_assert(sizeof(ABP_EnemySpawn_C) == 0x000400, "Wrong size on ABP_EnemySpawn_C");
static_assert(offsetof(ABP_EnemySpawn_C, UberGraphFrame) == 0x0002C0, "Member 'ABP_EnemySpawn_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, Arrow) == 0x0002C8, "Member 'ABP_EnemySpawn_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, Billboard) == 0x0002D0, "Member 'ABP_EnemySpawn_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, Flow) == 0x0002D8, "Member 'ABP_EnemySpawn_C::Flow' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, CommonEventsComponent) == 0x0002E0, "Member 'ABP_EnemySpawn_C::CommonEventsComponent' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, SpawnPoint_Orb) == 0x0002E8, "Member 'ABP_EnemySpawn_C::SpawnPoint_Orb' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, SpawnPawnClass_DEPRECATED) == 0x0002F0, "Member 'ABP_EnemySpawn_C::SpawnPawnClass_DEPRECATED' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, SpawnDelay) == 0x0002F8, "Member 'ABP_EnemySpawn_C::SpawnDelay' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, StartWithAggro) == 0x0002FC, "Member 'ABP_EnemySpawn_C::StartWithAggro' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, Door) == 0x000300, "Member 'ABP_EnemySpawn_C::Door' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, DoorDouble) == 0x000328, "Member 'ABP_EnemySpawn_C::DoorDouble' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, BPEnemyCommon_) == 0x000350, "Member 'ABP_EnemySpawn_C::BPEnemyCommon_' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, SpawnPlaySound) == 0x000358, "Member 'ABP_EnemySpawn_C::SpawnPlaySound' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, AggroPlaySound) == 0x000360, "Member 'ABP_EnemySpawn_C::AggroPlaySound' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, SpawnSoundInstance) == 0x000368, "Member 'ABP_EnemySpawn_C::SpawnSoundInstance' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, AggroSoundInstance) == 0x000370, "Member 'ABP_EnemySpawn_C::AggroSoundInstance' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, HasSpawned) == 0x000378, "Member 'ABP_EnemySpawn_C::HasSpawned' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, Deactivate) == 0x000379, "Member 'ABP_EnemySpawn_C::Deactivate' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, AIController) == 0x000380, "Member 'ABP_EnemySpawn_C::AIController' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, StartWithBehaviourTree) == 0x000388, "Member 'ABP_EnemySpawn_C::StartWithBehaviourTree' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, StartSleeping) == 0x000389, "Member 'ABP_EnemySpawn_C::StartSleeping' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, ShouldPatrol) == 0x00038A, "Member 'ABP_EnemySpawn_C::ShouldPatrol' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, OrderTarget) == 0x000390, "Member 'ABP_EnemySpawn_C::OrderTarget' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, HomeRangeRadius) == 0x000398, "Member 'ABP_EnemySpawn_C::HomeRangeRadius' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, SpawnedCreatureIdentifyingTag) == 0x00039C, "Member 'ABP_EnemySpawn_C::SpawnedCreatureIdentifyingTag' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, PatrolPathRef) == 0x0003A8, "Member 'ABP_EnemySpawn_C::PatrolPathRef' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, OnEnemySpawned) == 0x0003D0, "Member 'ABP_EnemySpawn_C::OnEnemySpawned' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, SpawnCollisionHandlingOverride) == 0x0003E0, "Member 'ABP_EnemySpawn_C::SpawnCollisionHandlingOverride' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, StartOnWall) == 0x0003E1, "Member 'ABP_EnemySpawn_C::StartOnWall' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, CanCirculate) == 0x0003E2, "Member 'ABP_EnemySpawn_C::CanCirculate' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, SkipSpawnAnimation) == 0x0003E3, "Member 'ABP_EnemySpawn_C::SkipSpawnAnimation' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, StartWithMonsterIntro) == 0x0003E4, "Member 'ABP_EnemySpawn_C::StartWithMonsterIntro' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, DefendTarget) == 0x0003E8, "Member 'ABP_EnemySpawn_C::DefendTarget' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, UseOrderTargetAsHomeLocation) == 0x0003F0, "Member 'ABP_EnemySpawn_C::UseOrderTargetAsHomeLocation' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, beginBurrowed) == 0x0003F1, "Member 'ABP_EnemySpawn_C::beginBurrowed' has a wrong offset!");
static_assert(offsetof(ABP_EnemySpawn_C, NGPlusOnly) == 0x0003F2, "Member 'ABP_EnemySpawn_C::NGPlusOnly' has a wrong offset!");

}

