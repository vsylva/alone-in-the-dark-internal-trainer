#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CockroachesBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FCockroachData_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CockroachesBase.BP_CockroachesBase_C
// 0x0090 (0x02C8 - 0x0238)
class ABP_CockroachesBase_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          SecondaryTrigger;                                  // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                AbilitySystem;                                     // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHierarchicalInstancedStaticMeshComponent* HISM;                                              // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Trigger;                                           // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFCockroachData>                Instances;                                         // 0x0268(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         Time;                                              // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinScale;                                          // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Mesh;                                              // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          SpawnSeed;                                         // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor)
	int32                                         Amount;                                            // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnRadius;                                       // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseSize;                                          // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SizeVariation;                                     // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          RunSeed;                                           // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor)
	bool                                          CanReset;                                          // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DestroyAfterFinish;                                // 0x02A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AA[0x2];                                      // 0x02AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinSpeed;                                          // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpeed;                                          // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LongestReactionTime;                               // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomTurningAmount;                               // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnSpeed;                                         // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CloseEnoughRadius;                                 // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseSecondaryDestination;                          // 0x02C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                          bUseSecondaryTrigger;                              // 0x02C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_CockroachesBase(int32 EntryPoint);
	void End_Overlap(class AActor* Other_Actor);
	void Begin_Overlap(class AActor* Other_Actor, bool Secondary_Trigger);
	void BndEvt__BP_CockroachesBase_SecondaryTrigger_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_CockroachesBase_SecondaryTrigger_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void WeaponHit(class AActor* Weapon, const struct FGameplayTag& EventTag, const struct FGameplayEventData& Payload);
	void EndTriggerOverlap();
	void BndEvt__Trigger_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void StartTriggerOverlap();
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Reset();
	void UserConstructionScript();
	void AddRoaches(int32 Amount_0, float Radius);
	void DestroyAndClearRoaches();
	void ResetLocations();
	void MoveRoachForwards(const struct FFCockroachData& RoachData, float SpeedMultiplier);
	void RotateRoach(const struct FFCockroachData& RoachData, const struct FVector& FocusLocation);
	void CheckIfAllHasReachedDestination(const struct FVector& Destination, int32 WantedLocationID, bool* IsAtDestination);
	void CheckIfRoachHasReachDestination(const struct FFCockroachData& FCockroachData, const struct FVector& Destination, int32 WantedLocationID, bool* IsAtDestination);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CockroachesBase_C">();
	}
	static class ABP_CockroachesBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CockroachesBase_C>();
	}
};
static_assert(alignof(ABP_CockroachesBase_C) == 0x000008, "Wrong alignment on ABP_CockroachesBase_C");
static_assert(sizeof(ABP_CockroachesBase_C) == 0x0002C8, "Wrong size on ABP_CockroachesBase_C");
static_assert(offsetof(ABP_CockroachesBase_C, UberGraphFrame) == 0x000238, "Member 'ABP_CockroachesBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, SecondaryTrigger) == 0x000240, "Member 'ABP_CockroachesBase_C::SecondaryTrigger' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, AbilitySystem) == 0x000248, "Member 'ABP_CockroachesBase_C::AbilitySystem' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, HISM) == 0x000250, "Member 'ABP_CockroachesBase_C::HISM' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, Trigger) == 0x000258, "Member 'ABP_CockroachesBase_C::Trigger' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, DefaultSceneRoot) == 0x000260, "Member 'ABP_CockroachesBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, Instances) == 0x000268, "Member 'ABP_CockroachesBase_C::Instances' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, Time) == 0x000278, "Member 'ABP_CockroachesBase_C::Time' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, MinScale) == 0x00027C, "Member 'ABP_CockroachesBase_C::MinScale' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, Mesh) == 0x000280, "Member 'ABP_CockroachesBase_C::Mesh' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, SpawnSeed) == 0x000288, "Member 'ABP_CockroachesBase_C::SpawnSeed' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, Amount) == 0x000290, "Member 'ABP_CockroachesBase_C::Amount' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, SpawnRadius) == 0x000294, "Member 'ABP_CockroachesBase_C::SpawnRadius' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, BaseSize) == 0x000298, "Member 'ABP_CockroachesBase_C::BaseSize' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, SizeVariation) == 0x00029C, "Member 'ABP_CockroachesBase_C::SizeVariation' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, RunSeed) == 0x0002A0, "Member 'ABP_CockroachesBase_C::RunSeed' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, CanReset) == 0x0002A8, "Member 'ABP_CockroachesBase_C::CanReset' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, DestroyAfterFinish) == 0x0002A9, "Member 'ABP_CockroachesBase_C::DestroyAfterFinish' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, MinSpeed) == 0x0002AC, "Member 'ABP_CockroachesBase_C::MinSpeed' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, MaxSpeed) == 0x0002B0, "Member 'ABP_CockroachesBase_C::MaxSpeed' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, LongestReactionTime) == 0x0002B4, "Member 'ABP_CockroachesBase_C::LongestReactionTime' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, RandomTurningAmount) == 0x0002B8, "Member 'ABP_CockroachesBase_C::RandomTurningAmount' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, TurnSpeed) == 0x0002BC, "Member 'ABP_CockroachesBase_C::TurnSpeed' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, CloseEnoughRadius) == 0x0002C0, "Member 'ABP_CockroachesBase_C::CloseEnoughRadius' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, bUseSecondaryDestination) == 0x0002C4, "Member 'ABP_CockroachesBase_C::bUseSecondaryDestination' has a wrong offset!");
static_assert(offsetof(ABP_CockroachesBase_C, bUseSecondaryTrigger) == 0x0002C5, "Member 'ABP_CockroachesBase_C::bUseSecondaryTrigger' has a wrong offset!");

}

