#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DarkMan

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ObsidianFox_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_EnemyCommon_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DarkMan.BP_DarkMan_C
// 0x0120 (0x0BC0 - 0x0AA0)
class ABP_DarkMan_C final : public ABP_EnemyCommon_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_DarkMan_C;                       // 0x0AA0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UForceFeedbackComponent*                ProximityForceFeedback;                            // 0x0AA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFocusPointComponent*                   FocusEyes;                                         // 0x0AB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    FMODAudio_Obsession;                               // 0x0AB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        EyeArrow;                                          // 0x0AC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    FMODAudio;                                         // 0x0AC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         MinDistance;                                       // 0x0AD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MediumDistance;                                    // 0x0AD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraModifier*                        ObsessionCameraModifier;                           // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CameraPivotCurve;                                  // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDistance;                                       // 0x0AE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AEC[0x4];                                      // 0x0AEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CloseRangeCurve;                                   // 0x0AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasPlayerLOS;                                     // 0x0AF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHasCameraLOS;                                     // 0x0AF9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPrintDebugText;                                   // 0x0AFA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AFB[0x1];                                      // 0x0AFB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ObsessionMultiplier;                               // 0x0AFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookAtObsesssionMultiplier;                        // 0x0B00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B04[0x4];                                      // 0x0B04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      SmokeArea;                                         // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Obsession_Camera_Modifier;                         // 0x0B10(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Start_As_Active_Dark_Man;                          // 0x0B38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B39[0x7];                                      // 0x0B39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UBehaviorTree>           BehaviorTree;                                      // 0x0B40(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class FName                                   AI_Player_LOS_Key;                                 // 0x0B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartingLocation;                                  // 0x0B70(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseStartingLocationOnActivation;                  // 0x0B7C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bObsessionEnabled;                                 // 0x0B7D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_B7E[0x2];                                      // 0x0B7E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   Melee_Protection_GE;                               // 0x0B80(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            Melee_Protection_Handle;                           // 0x0BA8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bDrawDebug;                                        // 0x0BB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasActiveAreaEffects;                              // 0x0BB1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_BB2[0x6];                                      // 0x0BB2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ObsessionRangeCurve;                               // 0x0BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_DarkMan(int32 EntryPoint);
	void OnPlayer(const struct FGameplayTagContainer& EventTags);
	void InputTypeChanged(bool IsGamepadType);
	void OnMainStateChanged(EGameMainState OldGameState, EGameMainState NewGameState);
	void ReceiveDestroyed();
	void SpawnCharacterDecal(const struct FHitResult& HitResult);
	void BndEvt__BP_DarkMan_Flow_K2Node_ComponentBoundEvent_0_FlowComponentDynamicNotify__DelegateSignature(class UFlowComponent* FlowComponent_0, const struct FGameplayTag& NotifyTag);
	void Activate_Dark_Man();
	void DeactivateDarkMan();
	void CameraSwivel();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void OnLoaded_2BD0E0754061A227A287FB9E60FDB5C5(TSubclassOf<class UObject> Loaded);
	void OnLoaded_A1CB66724548CE2768DCCEB543A24D05(class UObject* Loaded);
	void OnLoaded_EBDE17F84284A1D2C47D62916CEB1AF5(TSubclassOf<class UObject> Loaded);
	void UserConstructionScript();
	void CheckForLOS();
	void ObsessionHealthDecay();
	void UpdateAudio();
	void SetActivationLocation();
	void SetupAreaEffects();
	void EnableAreaEffects();
	void DisableAreaEffects(float FadeDuration);
	void UpdateSmokeLocation();
	void Update_Proximity_Force_Feedback();
	void Tick_Force_Feedback_Intensity();
	float GetObsessionRate();

	float GetEyeContactDotProduct() const;
	float GetPlayerLookAtDotProduct() const;
	bool IsActorViewable() const;
	void GetObsessionDecay(float* DecayRate) const;
	float GetStareAtPlayerDotProduct() const;
	void GetStareValues(float* StareObsessionRate, bool* bIsStaring) const;
	void GetObsession(float* Normalised_Obsession) const;
	float CalculateObsessionRate() const;
	float ObsessionBaseDecay() const;
	float CalculateSavingGraceOsessionMultiplier(float Distance_to_Min_Alpha) const;
	void Output_Debug() const;
	void Print_Debug_Text() const;
	void Draw_Debug_Distances() const;
	void GetDistanceToPlayer(float* Distance_To_Player, ENavigationQueryResult* Path_Find_Success) const;
	bool IsActive() const;
	bool CanPlayerSeeDarkMan() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DarkMan_C">();
	}
	static class ABP_DarkMan_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DarkMan_C>();
	}
};
static_assert(alignof(ABP_DarkMan_C) == 0x000010, "Wrong alignment on ABP_DarkMan_C");
static_assert(sizeof(ABP_DarkMan_C) == 0x000BC0, "Wrong size on ABP_DarkMan_C");
static_assert(offsetof(ABP_DarkMan_C, UberGraphFrame_BP_DarkMan_C) == 0x000AA0, "Member 'ABP_DarkMan_C::UberGraphFrame_BP_DarkMan_C' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, ProximityForceFeedback) == 0x000AA8, "Member 'ABP_DarkMan_C::ProximityForceFeedback' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, FocusEyes) == 0x000AB0, "Member 'ABP_DarkMan_C::FocusEyes' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, FMODAudio_Obsession) == 0x000AB8, "Member 'ABP_DarkMan_C::FMODAudio_Obsession' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, EyeArrow) == 0x000AC0, "Member 'ABP_DarkMan_C::EyeArrow' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, FMODAudio) == 0x000AC8, "Member 'ABP_DarkMan_C::FMODAudio' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, MinDistance) == 0x000AD0, "Member 'ABP_DarkMan_C::MinDistance' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, MediumDistance) == 0x000AD4, "Member 'ABP_DarkMan_C::MediumDistance' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, ObsessionCameraModifier) == 0x000AD8, "Member 'ABP_DarkMan_C::ObsessionCameraModifier' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, CameraPivotCurve) == 0x000AE0, "Member 'ABP_DarkMan_C::CameraPivotCurve' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, MaxDistance) == 0x000AE8, "Member 'ABP_DarkMan_C::MaxDistance' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, CloseRangeCurve) == 0x000AF0, "Member 'ABP_DarkMan_C::CloseRangeCurve' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, bHasPlayerLOS) == 0x000AF8, "Member 'ABP_DarkMan_C::bHasPlayerLOS' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, bHasCameraLOS) == 0x000AF9, "Member 'ABP_DarkMan_C::bHasCameraLOS' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, bPrintDebugText) == 0x000AFA, "Member 'ABP_DarkMan_C::bPrintDebugText' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, ObsessionMultiplier) == 0x000AFC, "Member 'ABP_DarkMan_C::ObsessionMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, LookAtObsesssionMultiplier) == 0x000B00, "Member 'ABP_DarkMan_C::LookAtObsesssionMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, SmokeArea) == 0x000B08, "Member 'ABP_DarkMan_C::SmokeArea' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, Obsession_Camera_Modifier) == 0x000B10, "Member 'ABP_DarkMan_C::Obsession_Camera_Modifier' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, Start_As_Active_Dark_Man) == 0x000B38, "Member 'ABP_DarkMan_C::Start_As_Active_Dark_Man' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, BehaviorTree) == 0x000B40, "Member 'ABP_DarkMan_C::BehaviorTree' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, AI_Player_LOS_Key) == 0x000B68, "Member 'ABP_DarkMan_C::AI_Player_LOS_Key' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, StartingLocation) == 0x000B70, "Member 'ABP_DarkMan_C::StartingLocation' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, bUseStartingLocationOnActivation) == 0x000B7C, "Member 'ABP_DarkMan_C::bUseStartingLocationOnActivation' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, bObsessionEnabled) == 0x000B7D, "Member 'ABP_DarkMan_C::bObsessionEnabled' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, Melee_Protection_GE) == 0x000B80, "Member 'ABP_DarkMan_C::Melee_Protection_GE' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, Melee_Protection_Handle) == 0x000BA8, "Member 'ABP_DarkMan_C::Melee_Protection_Handle' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, bDrawDebug) == 0x000BB0, "Member 'ABP_DarkMan_C::bDrawDebug' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, HasActiveAreaEffects) == 0x000BB1, "Member 'ABP_DarkMan_C::HasActiveAreaEffects' has a wrong offset!");
static_assert(offsetof(ABP_DarkMan_C, ObsessionRangeCurve) == 0x000BB8, "Member 'ABP_DarkMan_C::ObsessionRangeCurve' has a wrong offset!");

}

