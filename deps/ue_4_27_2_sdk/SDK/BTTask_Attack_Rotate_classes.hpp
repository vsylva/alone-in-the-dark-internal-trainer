#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTTask_Attack_Rotate

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTTask_Attack_Rotate.BTTask_Attack_Rotate_C
// 0x0078 (0x0120 - 0x00A8)
class UBTTask_Attack_Rotate_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 SelfActor;                                         // 0x00B0(0x0028)(Edit, BlueprintVisible)
	float                                         RotationSpeed;                                     // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ConeHalfAngle;                                     // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LookForAttackRotateAnimationTag;                   // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          Owner_Controller;                                  // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBlackboardKeySelector                 LookAtRotationTarget;                              // 0x00F0(0x0028)(Edit, BlueprintVisible)
	bool                                          RotateTowardsPlayer;                               // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UpdateVelocityVector;                              // 0x0119(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void GetRotationData(bool* RotatedTowardsTarget, bool* OutsideLookAtCone, bool* ShouldRotatePositiveDirection);
	void ReceiveTick(class AActor* OwnerActor, float DeltaSeconds);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveExecute(class AActor* OwnerActor);
	void ExecuteUbergraph_BTTask_Attack_Rotate(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTTask_Attack_Rotate_C">();
	}
	static class UBTTask_Attack_Rotate_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_Attack_Rotate_C>();
	}
};
static_assert(alignof(UBTTask_Attack_Rotate_C) == 0x000008, "Wrong alignment on UBTTask_Attack_Rotate_C");
static_assert(sizeof(UBTTask_Attack_Rotate_C) == 0x000120, "Wrong size on UBTTask_Attack_Rotate_C");
static_assert(offsetof(UBTTask_Attack_Rotate_C, UberGraphFrame) == 0x0000A8, "Member 'UBTTask_Attack_Rotate_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTTask_Attack_Rotate_C, SelfActor) == 0x0000B0, "Member 'UBTTask_Attack_Rotate_C::SelfActor' has a wrong offset!");
static_assert(offsetof(UBTTask_Attack_Rotate_C, RotationSpeed) == 0x0000D8, "Member 'UBTTask_Attack_Rotate_C::RotationSpeed' has a wrong offset!");
static_assert(offsetof(UBTTask_Attack_Rotate_C, ConeHalfAngle) == 0x0000DC, "Member 'UBTTask_Attack_Rotate_C::ConeHalfAngle' has a wrong offset!");
static_assert(offsetof(UBTTask_Attack_Rotate_C, LookForAttackRotateAnimationTag) == 0x0000E0, "Member 'UBTTask_Attack_Rotate_C::LookForAttackRotateAnimationTag' has a wrong offset!");
static_assert(offsetof(UBTTask_Attack_Rotate_C, Owner_Controller) == 0x0000E8, "Member 'UBTTask_Attack_Rotate_C::Owner_Controller' has a wrong offset!");
static_assert(offsetof(UBTTask_Attack_Rotate_C, LookAtRotationTarget) == 0x0000F0, "Member 'UBTTask_Attack_Rotate_C::LookAtRotationTarget' has a wrong offset!");
static_assert(offsetof(UBTTask_Attack_Rotate_C, RotateTowardsPlayer) == 0x000118, "Member 'UBTTask_Attack_Rotate_C::RotateTowardsPlayer' has a wrong offset!");
static_assert(offsetof(UBTTask_Attack_Rotate_C, UpdateVelocityVector) == 0x000119, "Member 'UBTTask_Attack_Rotate_C::UpdateVelocityVector' has a wrong offset!");

}

