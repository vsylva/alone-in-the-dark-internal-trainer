#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Grapple

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MovieScene_structs.hpp"
#include "CharacterSize_structs.hpp"
#include "AnimationMontageIdentifier_structs.hpp"
#include "CemeteryCreatureType_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "ObsidianFox_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK::Params
{

// Function GA_Grapple.GA_Grapple_C.setStartBurrowed
// 0x0002 (0x0002 - 0x0000)
struct GA_Grapple_C_SetStartBurrowed final
{
public:
	bool                                          beginBurrowed;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Grapple_C_SetStartBurrowed) == 0x000001, "Wrong alignment on GA_Grapple_C_SetStartBurrowed");
static_assert(sizeof(GA_Grapple_C_SetStartBurrowed) == 0x000002, "Wrong size on GA_Grapple_C_SetStartBurrowed");
static_assert(offsetof(GA_Grapple_C_SetStartBurrowed, beginBurrowed) == 0x000000, "Member 'GA_Grapple_C_SetStartBurrowed::beginBurrowed' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_SetStartBurrowed, Success) == 0x000001, "Member 'GA_Grapple_C_SetStartBurrowed::Success' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.setOrderTarget
// 0x0010 (0x0010 - 0x0000)
struct GA_Grapple_C_SetOrderTarget final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Grapple_C_SetOrderTarget) == 0x000004, "Wrong alignment on GA_Grapple_C_SetOrderTarget");
static_assert(sizeof(GA_Grapple_C_SetOrderTarget) == 0x000010, "Wrong size on GA_Grapple_C_SetOrderTarget");
static_assert(offsetof(GA_Grapple_C_SetOrderTarget, Location) == 0x000000, "Member 'GA_Grapple_C_SetOrderTarget::Location' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_SetOrderTarget, Success) == 0x00000C, "Member 'GA_Grapple_C_SetOrderTarget::Success' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.hitscanWeaponFired
// 0x0001 (0x0001 - 0x0000)
struct GA_Grapple_C_HitscanWeaponFired final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Grapple_C_HitscanWeaponFired) == 0x000001, "Wrong alignment on GA_Grapple_C_HitscanWeaponFired");
static_assert(sizeof(GA_Grapple_C_HitscanWeaponFired) == 0x000001, "Wrong size on GA_Grapple_C_HitscanWeaponFired");
static_assert(offsetof(GA_Grapple_C_HitscanWeaponFired, Success) == 0x000000, "Member 'GA_Grapple_C_HitscanWeaponFired::Success' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.GetMostSuitableMeleeSection
// 0x0001 (0x0001 - 0x0000)
struct GA_Grapple_C_GetMostSuitableMeleeSection final
{
public:
	EAnimationMontageIdentifier                   Value;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Grapple_C_GetMostSuitableMeleeSection) == 0x000001, "Wrong alignment on GA_Grapple_C_GetMostSuitableMeleeSection");
static_assert(sizeof(GA_Grapple_C_GetMostSuitableMeleeSection) == 0x000001, "Wrong size on GA_Grapple_C_GetMostSuitableMeleeSection");
static_assert(offsetof(GA_Grapple_C_GetMostSuitableMeleeSection, Value) == 0x000000, "Member 'GA_Grapple_C_GetMostSuitableMeleeSection::Value' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.getAggroState
// 0x0001 (0x0001 - 0x0000)
struct GA_Grapple_C_GetAggroState final
{
public:
	bool                                          Aggro;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Grapple_C_GetAggroState) == 0x000001, "Wrong alignment on GA_Grapple_C_GetAggroState");
static_assert(sizeof(GA_Grapple_C_GetAggroState) == 0x000001, "Wrong size on GA_Grapple_C_GetAggroState");
static_assert(offsetof(GA_Grapple_C_GetAggroState, Aggro) == 0x000000, "Member 'GA_Grapple_C_GetAggroState::Aggro' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.setNewAggro
// 0x0002 (0x0002 - 0x0000)
struct GA_Grapple_C_SetNewAggro final
{
public:
	bool                                          NewAggro;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Grapple_C_SetNewAggro) == 0x000001, "Wrong alignment on GA_Grapple_C_SetNewAggro");
static_assert(sizeof(GA_Grapple_C_SetNewAggro) == 0x000002, "Wrong size on GA_Grapple_C_SetNewAggro");
static_assert(offsetof(GA_Grapple_C_SetNewAggro, NewAggro) == 0x000000, "Member 'GA_Grapple_C_SetNewAggro::NewAggro' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_SetNewAggro, Success) == 0x000001, "Member 'GA_Grapple_C_SetNewAggro::Success' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.IncrementJac3ProneCounter
// 0x0004 (0x0004 - 0x0000)
struct GA_Grapple_C_IncrementJac3ProneCounter final
{
public:
	int32                                         ProneCounter;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Grapple_C_IncrementJac3ProneCounter) == 0x000004, "Wrong alignment on GA_Grapple_C_IncrementJac3ProneCounter");
static_assert(sizeof(GA_Grapple_C_IncrementJac3ProneCounter) == 0x000004, "Wrong size on GA_Grapple_C_IncrementJac3ProneCounter");
static_assert(offsetof(GA_Grapple_C_IncrementJac3ProneCounter, ProneCounter) == 0x000000, "Member 'GA_Grapple_C_IncrementJac3ProneCounter::ProneCounter' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.GetCharacterSize
// 0x0001 (0x0001 - 0x0000)
struct GA_Grapple_C_GetCharacterSize final
{
public:
	ECharacterSize                                Size_0;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Grapple_C_GetCharacterSize) == 0x000001, "Wrong alignment on GA_Grapple_C_GetCharacterSize");
static_assert(sizeof(GA_Grapple_C_GetCharacterSize) == 0x000001, "Wrong size on GA_Grapple_C_GetCharacterSize");
static_assert(offsetof(GA_Grapple_C_GetCharacterSize, Size_0) == 0x000000, "Member 'GA_Grapple_C_GetCharacterSize::Size_0' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.getCemeteryCreatureType
// 0x0001 (0x0001 - 0x0000)
struct GA_Grapple_C_GetCemeteryCreatureType final
{
public:
	ECemeteryCreatureType                         CemeteryCreatureType;                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Grapple_C_GetCemeteryCreatureType) == 0x000001, "Wrong alignment on GA_Grapple_C_GetCemeteryCreatureType");
static_assert(sizeof(GA_Grapple_C_GetCemeteryCreatureType) == 0x000001, "Wrong size on GA_Grapple_C_GetCemeteryCreatureType");
static_assert(offsetof(GA_Grapple_C_GetCemeteryCreatureType, CemeteryCreatureType) == 0x000000, "Member 'GA_Grapple_C_GetCemeteryCreatureType::CemeteryCreatureType' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.setCanCirculate
// 0x0002 (0x0002 - 0x0000)
struct GA_Grapple_C_SetCanCirculate final
{
public:
	bool                                          CanCirculate;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Grapple_C_SetCanCirculate) == 0x000001, "Wrong alignment on GA_Grapple_C_SetCanCirculate");
static_assert(sizeof(GA_Grapple_C_SetCanCirculate) == 0x000002, "Wrong size on GA_Grapple_C_SetCanCirculate");
static_assert(offsetof(GA_Grapple_C_SetCanCirculate, CanCirculate) == 0x000000, "Member 'GA_Grapple_C_SetCanCirculate::CanCirculate' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_SetCanCirculate, Success) == 0x000001, "Member 'GA_Grapple_C_SetCanCirculate::Success' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.setStartOnWall
// 0x0002 (0x0002 - 0x0000)
struct GA_Grapple_C_SetStartOnWall final
{
public:
	bool                                          StartOnWall;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Grapple_C_SetStartOnWall) == 0x000001, "Wrong alignment on GA_Grapple_C_SetStartOnWall");
static_assert(sizeof(GA_Grapple_C_SetStartOnWall) == 0x000002, "Wrong size on GA_Grapple_C_SetStartOnWall");
static_assert(offsetof(GA_Grapple_C_SetStartOnWall, StartOnWall) == 0x000000, "Member 'GA_Grapple_C_SetStartOnWall::StartOnWall' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_SetStartOnWall, Success) == 0x000001, "Member 'GA_Grapple_C_SetStartOnWall::Success' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.AimedAt
// 0x0001 (0x0001 - 0x0000)
struct GA_Grapple_C_AimedAt final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Grapple_C_AimedAt) == 0x000001, "Wrong alignment on GA_Grapple_C_AimedAt");
static_assert(sizeof(GA_Grapple_C_AimedAt) == 0x000001, "Wrong size on GA_Grapple_C_AimedAt");
static_assert(offsetof(GA_Grapple_C_AimedAt, Return) == 0x000000, "Member 'GA_Grapple_C_AimedAt::Return' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.GetUpgradeComponent
// 0x0008 (0x0008 - 0x0000)
struct GA_Grapple_C_GetUpgradeComponent final
{
public:
	class UWeaponUpgradeComponent_C*              UpgradeComponent;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Grapple_C_GetUpgradeComponent) == 0x000008, "Wrong alignment on GA_Grapple_C_GetUpgradeComponent");
static_assert(sizeof(GA_Grapple_C_GetUpgradeComponent) == 0x000008, "Wrong size on GA_Grapple_C_GetUpgradeComponent");
static_assert(offsetof(GA_Grapple_C_GetUpgradeComponent, UpgradeComponent) == 0x000000, "Member 'GA_Grapple_C_GetUpgradeComponent::UpgradeComponent' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.FlashlightHit
// 0x0008 (0x0008 - 0x0000)
struct GA_Grapple_C_FlashlightHit final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Grapple_C_FlashlightHit) == 0x000004, "Wrong alignment on GA_Grapple_C_FlashlightHit");
static_assert(sizeof(GA_Grapple_C_FlashlightHit) == 0x000008, "Wrong size on GA_Grapple_C_FlashlightHit");
static_assert(offsetof(GA_Grapple_C_FlashlightHit, Distance) == 0x000000, "Member 'GA_Grapple_C_FlashlightHit::Distance' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_FlashlightHit, Success) == 0x000004, "Member 'GA_Grapple_C_FlashlightHit::Success' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.GetEndSequence
// 0x0018 (0x0018 - 0x0000)
struct GA_Grapple_C_GetEndSequence final
{
public:
	class ULevelSequence*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         K2Node_Select_Default;                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Grapple_C_GetEndSequence) == 0x000008, "Wrong alignment on GA_Grapple_C_GetEndSequence");
static_assert(sizeof(GA_Grapple_C_GetEndSequence) == 0x000018, "Wrong size on GA_Grapple_C_GetEndSequence");
static_assert(offsetof(GA_Grapple_C_GetEndSequence, ReturnValue) == 0x000000, "Member 'GA_Grapple_C_GetEndSequence::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_GetEndSequence, Temp_bool_Variable) == 0x000008, "Member 'GA_Grapple_C_GetEndSequence::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_GetEndSequence, K2Node_Select_Default) == 0x000010, "Member 'GA_Grapple_C_GetEndSequence::K2Node_Select_Default' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.GA_Grapple_AutoGenFunc1
// 0x0008 (0x0008 - 0x0000)
struct GA_Grapple_C_GA_Grapple_AutoGenFunc1 final
{
public:
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Grapple_C_GA_Grapple_AutoGenFunc1) == 0x000008, "Wrong alignment on GA_Grapple_C_GA_Grapple_AutoGenFunc1");
static_assert(sizeof(GA_Grapple_C_GA_Grapple_AutoGenFunc1) == 0x000008, "Wrong size on GA_Grapple_C_GA_Grapple_AutoGenFunc1");
static_assert(offsetof(GA_Grapple_C_GA_Grapple_AutoGenFunc1, CallFunc_GetSequencePlayer_ReturnValue) == 0x000000, "Member 'GA_Grapple_C_GA_Grapple_AutoGenFunc1::CallFunc_GetSequencePlayer_ReturnValue' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.TickTimer
// 0x01A4 (0x01A4 - 0x0000)
struct GA_Grapple_C_TickTimer final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x005C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_1;                           // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0118(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Grapple_C_TickTimer) == 0x000004, "Wrong alignment on GA_Grapple_C_TickTimer");
static_assert(sizeof(GA_Grapple_C_TickTimer) == 0x0001A4, "Wrong size on GA_Grapple_C_TickTimer");
static_assert(offsetof(GA_Grapple_C_TickTimer, Temp_bool_Variable) == 0x000000, "Member 'GA_Grapple_C_TickTimer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_TickTimer, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000004, "Member 'GA_Grapple_C_TickTimer::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_TickTimer, CallFunc_Abs_ReturnValue) == 0x000008, "Member 'GA_Grapple_C_TickTimer::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_TickTimer, CallFunc_MakeVector_ReturnValue) == 0x00000C, "Member 'GA_Grapple_C_TickTimer::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_TickTimer, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000018, "Member 'GA_Grapple_C_TickTimer::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_TickTimer, CallFunc_Add_VectorVector_ReturnValue) == 0x000024, "Member 'GA_Grapple_C_TickTimer::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_TickTimer, CallFunc_BreakRotator_Roll) == 0x000030, "Member 'GA_Grapple_C_TickTimer::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_TickTimer, CallFunc_BreakRotator_Pitch) == 0x000034, "Member 'GA_Grapple_C_TickTimer::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_TickTimer, CallFunc_BreakRotator_Yaw) == 0x000038, "Member 'GA_Grapple_C_TickTimer::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_TickTimer, K2Node_Select_Default) == 0x00003C, "Member 'GA_Grapple_C_TickTimer::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_TickTimer, CallFunc_Add_FloatFloat_ReturnValue) == 0x000048, "Member 'GA_Grapple_C_TickTimer::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_TickTimer, Temp_bool_Variable_1) == 0x00004C, "Member 'GA_Grapple_C_TickTimer::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_TickTimer, CallFunc_MakeRotator_ReturnValue) == 0x000050, "Member 'GA_Grapple_C_TickTimer::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_TickTimer, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x00005C, "Member 'GA_Grapple_C_TickTimer::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_TickTimer, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x0000E4, "Member 'GA_Grapple_C_TickTimer::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_TickTimer, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0000E8, "Member 'GA_Grapple_C_TickTimer::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_TickTimer, CallFunc_IsValid_ReturnValue) == 0x0000EC, "Member 'GA_Grapple_C_TickTimer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_TickTimer, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0000F0, "Member 'GA_Grapple_C_TickTimer::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_TickTimer, CallFunc_MakeVector_ReturnValue_1) == 0x0000F4, "Member 'GA_Grapple_C_TickTimer::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_TickTimer, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000100, "Member 'GA_Grapple_C_TickTimer::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_TickTimer, K2Node_Select_Default_1) == 0x00010C, "Member 'GA_Grapple_C_TickTimer::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_TickTimer, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000118, "Member 'GA_Grapple_C_TickTimer::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_TickTimer, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0001A0, "Member 'GA_Grapple_C_TickTimer::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.OnAbilityStart
// 0x0018 (0x0018 - 0x0000)
struct GA_Grapple_C_OnAbilityStart final
{
public:
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue; // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    CallFunc_PlayEventAttached_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Grapple_C_OnAbilityStart) == 0x000008, "Wrong alignment on GA_Grapple_C_OnAbilityStart");
static_assert(sizeof(GA_Grapple_C_OnAbilityStart) == 0x000018, "Wrong size on GA_Grapple_C_OnAbilityStart");
static_assert(offsetof(GA_Grapple_C_OnAbilityStart, CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue) == 0x000000, "Member 'GA_Grapple_C_OnAbilityStart::CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnAbilityStart, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000008, "Member 'GA_Grapple_C_OnAbilityStart::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnAbilityStart, CallFunc_PlayEventAttached_ReturnValue) == 0x000010, "Member 'GA_Grapple_C_OnAbilityStart::CallFunc_PlayEventAttached_ReturnValue' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.DeathEvent
// 0x0018 (0x0018 - 0x0000)
struct GA_Grapple_C_DeathEvent final
{
public:
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue; // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue_1; // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Grapple_C_DeathEvent) == 0x000008, "Wrong alignment on GA_Grapple_C_DeathEvent");
static_assert(sizeof(GA_Grapple_C_DeathEvent) == 0x000018, "Wrong size on GA_Grapple_C_DeathEvent");
static_assert(offsetof(GA_Grapple_C_DeathEvent, CallFunc_GetPlayerController_ReturnValue) == 0x000000, "Member 'GA_Grapple_C_DeathEvent::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_DeathEvent, CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue) == 0x000008, "Member 'GA_Grapple_C_DeathEvent::CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_DeathEvent, CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue_1) == 0x000010, "Member 'GA_Grapple_C_DeathEvent::CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue_1' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.OnGrapple
// 0x01F0 (0x01F0 - 0x0000)
struct GA_Grapple_C_OnGrapple final
{
public:
	float                                         NewLocalVar_0;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0020(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x00A4(0x0010)(ZeroConstructor, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMovieSceneSequenceLoopCount           K2Node_MakeStruct_MovieSceneSequenceLoopCount;     // 0x00D4(0x0004)(NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMovieSceneSequencePlaybackSettings    K2Node_MakeStruct_MovieSceneSequencePlaybackSettings; // 0x00E4(0x0014)(NoDestructor)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue_1;         // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerCharacterType                          CallFunc_GetPlayerCharacterType_ReturnValue;       // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x013C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               K2Node_Select_Default_1;                           // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0160(0x0030)(IsPlainOldData, NoDestructor)
	class APiecesLevelSequenceActor*              CallFunc_CreatePiecesLevelSequencePlayer_OutActor; // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPiecesLevelSequencePlayer*             CallFunc_CreatePiecesLevelSequencePlayer_ReturnValue; // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x01A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_2;                           // 0x01AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          CallFunc_GetAIController_ReturnValue;              // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraShakeBase*                       CallFunc_StartCameraShake_ReturnValue;             // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue_1;     // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraModifier*                        CallFunc_AddNewCameraModifier_ReturnValue;         // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue; // 0x01E0(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Grapple_C_OnGrapple) == 0x000010, "Wrong alignment on GA_Grapple_C_OnGrapple");
static_assert(sizeof(GA_Grapple_C_OnGrapple) == 0x0001F0, "Wrong size on GA_Grapple_C_OnGrapple");
static_assert(offsetof(GA_Grapple_C_OnGrapple, NewLocalVar_0) == 0x000000, "Member 'GA_Grapple_C_OnGrapple::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, Temp_bool_Variable) == 0x000004, "Member 'GA_Grapple_C_OnGrapple::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, Temp_bool_Variable_1) == 0x000005, "Member 'GA_Grapple_C_OnGrapple::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, Temp_bool_Variable_2) == 0x000006, "Member 'GA_Grapple_C_OnGrapple::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'GA_Grapple_C_OnGrapple::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_GetTransform_ReturnValue) == 0x000020, "Member 'GA_Grapple_C_OnGrapple::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_BreakTransform_Location) == 0x000050, "Member 'GA_Grapple_C_OnGrapple::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_BreakTransform_Rotation) == 0x00005C, "Member 'GA_Grapple_C_OnGrapple::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_BreakTransform_Scale) == 0x000068, "Member 'GA_Grapple_C_OnGrapple::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_BreakRotator_Roll) == 0x000074, "Member 'GA_Grapple_C_OnGrapple::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_BreakRotator_Pitch) == 0x000078, "Member 'GA_Grapple_C_OnGrapple::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_BreakRotator_Yaw) == 0x00007C, "Member 'GA_Grapple_C_OnGrapple::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_Add_FloatFloat_ReturnValue) == 0x000080, "Member 'GA_Grapple_C_OnGrapple::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_MakeRotator_ReturnValue) == 0x000084, "Member 'GA_Grapple_C_OnGrapple::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000090, "Member 'GA_Grapple_C_OnGrapple::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000094, "Member 'GA_Grapple_C_OnGrapple::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_MakeVector_ReturnValue) == 0x000098, "Member 'GA_Grapple_C_OnGrapple::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, K2Node_CreateDelegate_OutputDelegate) == 0x0000A4, "Member 'GA_Grapple_C_OnGrapple::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_Add_VectorVector_ReturnValue) == 0x0000B4, "Member 'GA_Grapple_C_OnGrapple::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_GetPlayerCharacter_ReturnValue) == 0x0000C0, "Member 'GA_Grapple_C_OnGrapple::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, K2Node_Select_Default) == 0x0000C8, "Member 'GA_Grapple_C_OnGrapple::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, K2Node_MakeStruct_MovieSceneSequenceLoopCount) == 0x0000D4, "Member 'GA_Grapple_C_OnGrapple::K2Node_MakeStruct_MovieSceneSequenceLoopCount' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_BreakVector_X) == 0x0000D8, "Member 'GA_Grapple_C_OnGrapple::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_BreakVector_Y) == 0x0000DC, "Member 'GA_Grapple_C_OnGrapple::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_BreakVector_Z) == 0x0000E0, "Member 'GA_Grapple_C_OnGrapple::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, K2Node_MakeStruct_MovieSceneSequencePlaybackSettings) == 0x0000E4, "Member 'GA_Grapple_C_OnGrapple::K2Node_MakeStruct_MovieSceneSequencePlaybackSettings' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0000F8, "Member 'GA_Grapple_C_OnGrapple::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_MakeVector_ReturnValue_1) == 0x0000FC, "Member 'GA_Grapple_C_OnGrapple::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_GetPlayerCharacter_ReturnValue_1) == 0x000108, "Member 'GA_Grapple_C_OnGrapple::CallFunc_GetPlayerCharacter_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_GetPlayerCharacterType_ReturnValue) == 0x000110, "Member 'GA_Grapple_C_OnGrapple::CallFunc_GetPlayerCharacterType_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000114, "Member 'GA_Grapple_C_OnGrapple::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000120, "Member 'GA_Grapple_C_OnGrapple::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_BreakRotator_Roll_1) == 0x000130, "Member 'GA_Grapple_C_OnGrapple::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_BreakRotator_Pitch_1) == 0x000134, "Member 'GA_Grapple_C_OnGrapple::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_BreakRotator_Yaw_1) == 0x000138, "Member 'GA_Grapple_C_OnGrapple::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_Conv_StringToName_ReturnValue) == 0x00013C, "Member 'GA_Grapple_C_OnGrapple::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000144, "Member 'GA_Grapple_C_OnGrapple::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_MakeRotator_ReturnValue_1) == 0x000148, "Member 'GA_Grapple_C_OnGrapple::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, K2Node_Select_Default_1) == 0x000154, "Member 'GA_Grapple_C_OnGrapple::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_MakeTransform_ReturnValue) == 0x000160, "Member 'GA_Grapple_C_OnGrapple::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_CreatePiecesLevelSequencePlayer_OutActor) == 0x000190, "Member 'GA_Grapple_C_OnGrapple::CallFunc_CreatePiecesLevelSequencePlayer_OutActor' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_CreatePiecesLevelSequencePlayer_ReturnValue) == 0x000198, "Member 'GA_Grapple_C_OnGrapple::CallFunc_CreatePiecesLevelSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0001A0, "Member 'GA_Grapple_C_OnGrapple::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, K2Node_Select_Default_2) == 0x0001AC, "Member 'GA_Grapple_C_OnGrapple::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_GetAIController_ReturnValue) == 0x0001B8, "Member 'GA_Grapple_C_OnGrapple::CallFunc_GetAIController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x0001C0, "Member 'GA_Grapple_C_OnGrapple::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_StartCameraShake_ReturnValue) == 0x0001C8, "Member 'GA_Grapple_C_OnGrapple::CallFunc_StartCameraShake_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_GetPlayerCameraManager_ReturnValue_1) == 0x0001D0, "Member 'GA_Grapple_C_OnGrapple::CallFunc_GetPlayerCameraManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_AddNewCameraModifier_ReturnValue) == 0x0001D8, "Member 'GA_Grapple_C_OnGrapple::CallFunc_AddNewCameraModifier_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrapple, CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue) == 0x0001E0, "Member 'GA_Grapple_C_OnGrapple::CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.MoveToGrappleLocation
// 0x00A0 (0x00A0 - 0x0000)
struct GA_Grapple_C_MoveToGrappleLocation final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_CombatInterface_C> K2Node_DynamicCast_AsBPI_Combat_Interface;         // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_1;                           // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_2;                           // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Grapple_C_MoveToGrappleLocation) == 0x000008, "Wrong alignment on GA_Grapple_C_MoveToGrappleLocation");
static_assert(sizeof(GA_Grapple_C_MoveToGrappleLocation) == 0x0000A0, "Wrong size on GA_Grapple_C_MoveToGrappleLocation");
static_assert(offsetof(GA_Grapple_C_MoveToGrappleLocation, Temp_bool_Variable) == 0x000000, "Member 'GA_Grapple_C_MoveToGrappleLocation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_MoveToGrappleLocation, Temp_bool_Variable_1) == 0x000001, "Member 'GA_Grapple_C_MoveToGrappleLocation::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_MoveToGrappleLocation, Temp_bool_Variable_2) == 0x000002, "Member 'GA_Grapple_C_MoveToGrappleLocation::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_MoveToGrappleLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'GA_Grapple_C_MoveToGrappleLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_MoveToGrappleLocation, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'GA_Grapple_C_MoveToGrappleLocation::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_MoveToGrappleLocation, CallFunc_Abs_ReturnValue) == 0x000014, "Member 'GA_Grapple_C_MoveToGrappleLocation::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_MoveToGrappleLocation, CallFunc_MakeVector_ReturnValue) == 0x000018, "Member 'GA_Grapple_C_MoveToGrappleLocation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_MoveToGrappleLocation, CallFunc_Add_VectorVector_ReturnValue) == 0x000024, "Member 'GA_Grapple_C_MoveToGrappleLocation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_MoveToGrappleLocation, K2Node_Select_Default) == 0x000030, "Member 'GA_Grapple_C_MoveToGrappleLocation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_MoveToGrappleLocation, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00003C, "Member 'GA_Grapple_C_MoveToGrappleLocation::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_MoveToGrappleLocation, CallFunc_Abs_ReturnValue_1) == 0x000040, "Member 'GA_Grapple_C_MoveToGrappleLocation::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_MoveToGrappleLocation, K2Node_DynamicCast_AsBPI_Combat_Interface) == 0x000048, "Member 'GA_Grapple_C_MoveToGrappleLocation::K2Node_DynamicCast_AsBPI_Combat_Interface' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_MoveToGrappleLocation, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'GA_Grapple_C_MoveToGrappleLocation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_MoveToGrappleLocation, CallFunc_MakeVector_ReturnValue_1) == 0x00005C, "Member 'GA_Grapple_C_MoveToGrappleLocation::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_MoveToGrappleLocation, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000068, "Member 'GA_Grapple_C_MoveToGrappleLocation::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_MoveToGrappleLocation, K2Node_Select_Default_1) == 0x000074, "Member 'GA_Grapple_C_MoveToGrappleLocation::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_MoveToGrappleLocation, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000080, "Member 'GA_Grapple_C_MoveToGrappleLocation::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_MoveToGrappleLocation, K2Node_Select_Default_2) == 0x00008C, "Member 'GA_Grapple_C_MoveToGrappleLocation::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_MoveToGrappleLocation, CallFunc_IsValid_ReturnValue) == 0x000098, "Member 'GA_Grapple_C_MoveToGrappleLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_MoveToGrappleLocation, CallFunc_IsValid_ReturnValue_1) == 0x000099, "Member 'GA_Grapple_C_MoveToGrappleLocation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.OnGrappleEnd
// 0x0010 (0x0010 - 0x0000)
struct GA_Grapple_C_OnGrappleEnd final
{
public:
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Grapple_C_OnGrappleEnd) == 0x000008, "Wrong alignment on GA_Grapple_C_OnGrappleEnd");
static_assert(sizeof(GA_Grapple_C_OnGrappleEnd) == 0x000010, "Wrong size on GA_Grapple_C_OnGrappleEnd");
static_assert(offsetof(GA_Grapple_C_OnGrappleEnd, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000000, "Member 'GA_Grapple_C_OnGrappleEnd::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrappleEnd, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'GA_Grapple_C_OnGrappleEnd::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrappleEnd, CallFunc_IsValid_ReturnValue_1) == 0x000009, "Member 'GA_Grapple_C_OnGrappleEnd::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrappleEnd, CallFunc_IsValid_ReturnValue_2) == 0x00000A, "Member 'GA_Grapple_C_OnGrappleEnd::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_OnGrappleEnd, CallFunc_IsValid_ReturnValue_3) == 0x00000B, "Member 'GA_Grapple_C_OnGrappleEnd::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.EventReceived_C4754BBC460A2FE72DC5EB8769C24FEE
// 0x00B0 (0x00B0 - 0x0000)
struct GA_Grapple_C_EventReceived_C4754BBC460A2FE72DC5EB8769C24FEE final
{
public:
	struct FGameplayEventData                     Payload;                                           // 0x0000(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GA_Grapple_C_EventReceived_C4754BBC460A2FE72DC5EB8769C24FEE) == 0x000008, "Wrong alignment on GA_Grapple_C_EventReceived_C4754BBC460A2FE72DC5EB8769C24FEE");
static_assert(sizeof(GA_Grapple_C_EventReceived_C4754BBC460A2FE72DC5EB8769C24FEE) == 0x0000B0, "Wrong size on GA_Grapple_C_EventReceived_C4754BBC460A2FE72DC5EB8769C24FEE");
static_assert(offsetof(GA_Grapple_C_EventReceived_C4754BBC460A2FE72DC5EB8769C24FEE, Payload) == 0x000000, "Member 'GA_Grapple_C_EventReceived_C4754BBC460A2FE72DC5EB8769C24FEE::Payload' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.EventReceived_C4311F71462092EC87856895E37E7A0C
// 0x00B0 (0x00B0 - 0x0000)
struct GA_Grapple_C_EventReceived_C4311F71462092EC87856895E37E7A0C final
{
public:
	struct FGameplayEventData                     Payload;                                           // 0x0000(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GA_Grapple_C_EventReceived_C4311F71462092EC87856895E37E7A0C) == 0x000008, "Wrong alignment on GA_Grapple_C_EventReceived_C4311F71462092EC87856895E37E7A0C");
static_assert(sizeof(GA_Grapple_C_EventReceived_C4311F71462092EC87856895E37E7A0C) == 0x0000B0, "Wrong size on GA_Grapple_C_EventReceived_C4311F71462092EC87856895E37E7A0C");
static_assert(offsetof(GA_Grapple_C_EventReceived_C4311F71462092EC87856895E37E7A0C, Payload) == 0x000000, "Member 'GA_Grapple_C_EventReceived_C4311F71462092EC87856895E37E7A0C::Payload' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.EventReceived_70B9556B427F6A1BD44E2393562B0E64
// 0x00B0 (0x00B0 - 0x0000)
struct GA_Grapple_C_EventReceived_70B9556B427F6A1BD44E2393562B0E64 final
{
public:
	struct FGameplayEventData                     Payload;                                           // 0x0000(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GA_Grapple_C_EventReceived_70B9556B427F6A1BD44E2393562B0E64) == 0x000008, "Wrong alignment on GA_Grapple_C_EventReceived_70B9556B427F6A1BD44E2393562B0E64");
static_assert(sizeof(GA_Grapple_C_EventReceived_70B9556B427F6A1BD44E2393562B0E64) == 0x0000B0, "Wrong size on GA_Grapple_C_EventReceived_70B9556B427F6A1BD44E2393562B0E64");
static_assert(offsetof(GA_Grapple_C_EventReceived_70B9556B427F6A1BD44E2393562B0E64, Payload) == 0x000000, "Member 'GA_Grapple_C_EventReceived_70B9556B427F6A1BD44E2393562B0E64::Payload' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.SetCemeteryCreatureType
// 0x0001 (0x0001 - 0x0000)
struct GA_Grapple_C_SetCemeteryCreatureType final
{
public:
	ECemeteryCreatureType                         CreatureType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Grapple_C_SetCemeteryCreatureType) == 0x000001, "Wrong alignment on GA_Grapple_C_SetCemeteryCreatureType");
static_assert(sizeof(GA_Grapple_C_SetCemeteryCreatureType) == 0x000001, "Wrong size on GA_Grapple_C_SetCemeteryCreatureType");
static_assert(offsetof(GA_Grapple_C_SetCemeteryCreatureType, CreatureType) == 0x000000, "Member 'GA_Grapple_C_SetCemeteryCreatureType::CreatureType' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.QuicktimeInput
// 0x0008 (0x0008 - 0x0000)
struct GA_Grapple_C_QuicktimeInput final
{
public:
	float                                         CurrentProgress;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxProgress;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Grapple_C_QuicktimeInput) == 0x000004, "Wrong alignment on GA_Grapple_C_QuicktimeInput");
static_assert(sizeof(GA_Grapple_C_QuicktimeInput) == 0x000008, "Wrong size on GA_Grapple_C_QuicktimeInput");
static_assert(offsetof(GA_Grapple_C_QuicktimeInput, CurrentProgress) == 0x000000, "Member 'GA_Grapple_C_QuicktimeInput::CurrentProgress' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_QuicktimeInput, MaxProgress) == 0x000004, "Member 'GA_Grapple_C_QuicktimeInput::MaxProgress' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.MeleeAttackTranslate
// 0x0018 (0x0018 - 0x0000)
struct GA_Grapple_C_MeleeAttackTranslate final
{
public:
	struct FVector                                StartVector;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndVector;                                         // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Grapple_C_MeleeAttackTranslate) == 0x000004, "Wrong alignment on GA_Grapple_C_MeleeAttackTranslate");
static_assert(sizeof(GA_Grapple_C_MeleeAttackTranslate) == 0x000018, "Wrong size on GA_Grapple_C_MeleeAttackTranslate");
static_assert(offsetof(GA_Grapple_C_MeleeAttackTranslate, StartVector) == 0x000000, "Member 'GA_Grapple_C_MeleeAttackTranslate::StartVector' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_MeleeAttackTranslate, EndVector) == 0x00000C, "Member 'GA_Grapple_C_MeleeAttackTranslate::EndVector' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.ControlRotationFocus
// 0x0008 (0x0008 - 0x0000)
struct GA_Grapple_C_ControlRotationFocus final
{
public:
	class AActor*                                 FocusTarget;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Grapple_C_ControlRotationFocus) == 0x000008, "Wrong alignment on GA_Grapple_C_ControlRotationFocus");
static_assert(sizeof(GA_Grapple_C_ControlRotationFocus) == 0x000008, "Wrong size on GA_Grapple_C_ControlRotationFocus");
static_assert(offsetof(GA_Grapple_C_ControlRotationFocus, FocusTarget) == 0x000000, "Member 'GA_Grapple_C_ControlRotationFocus::FocusTarget' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.MoveToGrappleLocatio
// 0x000C (0x000C - 0x0000)
struct GA_Grapple_C_MoveToGrappleLocatio final
{
public:
	struct FVector                                Grapple_Location;                                  // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Grapple_C_MoveToGrappleLocatio) == 0x000004, "Wrong alignment on GA_Grapple_C_MoveToGrappleLocatio");
static_assert(sizeof(GA_Grapple_C_MoveToGrappleLocatio) == 0x00000C, "Wrong size on GA_Grapple_C_MoveToGrappleLocatio");
static_assert(offsetof(GA_Grapple_C_MoveToGrappleLocatio, Grapple_Location) == 0x000000, "Member 'GA_Grapple_C_MoveToGrappleLocatio::Grapple_Location' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.SetMostSuitableMeleeSection
// 0x0001 (0x0001 - 0x0000)
struct GA_Grapple_C_SetMostSuitableMeleeSection final
{
public:
	EAnimationMontageIdentifier                   Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Grapple_C_SetMostSuitableMeleeSection) == 0x000001, "Wrong alignment on GA_Grapple_C_SetMostSuitableMeleeSection");
static_assert(sizeof(GA_Grapple_C_SetMostSuitableMeleeSection) == 0x000001, "Wrong size on GA_Grapple_C_SetMostSuitableMeleeSection");
static_assert(offsetof(GA_Grapple_C_SetMostSuitableMeleeSection, Value) == 0x000000, "Member 'GA_Grapple_C_SetMostSuitableMeleeSection::Value' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.QueryComplete
// 0x0010 (0x0010 - 0x0000)
struct GA_Grapple_C_QueryComplete final
{
public:
	class UEnvQueryInstanceBlueprintWrapper*      QueryInstance;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEnvQueryStatus                               QueryStatus;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Grapple_C_QueryComplete) == 0x000008, "Wrong alignment on GA_Grapple_C_QueryComplete");
static_assert(sizeof(GA_Grapple_C_QueryComplete) == 0x000010, "Wrong size on GA_Grapple_C_QueryComplete");
static_assert(offsetof(GA_Grapple_C_QueryComplete, QueryInstance) == 0x000000, "Member 'GA_Grapple_C_QueryComplete::QueryInstance' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_QueryComplete, QueryStatus) == 0x000008, "Member 'GA_Grapple_C_QueryComplete::QueryStatus' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.updateBossHealthData
// 0x0004 (0x0004 - 0x0000)
struct GA_Grapple_C_UpdateBossHealthData final
{
public:
	float                                         CurrentHealthPercentage;                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Grapple_C_UpdateBossHealthData) == 0x000004, "Wrong alignment on GA_Grapple_C_UpdateBossHealthData");
static_assert(sizeof(GA_Grapple_C_UpdateBossHealthData) == 0x000004, "Wrong size on GA_Grapple_C_UpdateBossHealthData");
static_assert(offsetof(GA_Grapple_C_UpdateBossHealthData, CurrentHealthPercentage) == 0x000000, "Member 'GA_Grapple_C_UpdateBossHealthData::CurrentHealthPercentage' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct GA_Grapple_C_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Grapple_C_K2_OnEndAbility) == 0x000001, "Wrong alignment on GA_Grapple_C_K2_OnEndAbility");
static_assert(sizeof(GA_Grapple_C_K2_OnEndAbility) == 0x000001, "Wrong size on GA_Grapple_C_K2_OnEndAbility");
static_assert(offsetof(GA_Grapple_C_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'GA_Grapple_C_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.ExecuteUbergraph_GA_Grapple
// 0x0C20 (0x0C20 - 0x0000)
struct GA_Grapple_C_ExecuteUbergraph_GA_Grapple final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGameplayEventData                     Temp_struct_Variable;                              // 0x0028(0x00B0)()
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitGameplayEvent*         CallFunc_WaitGameplayEvent_ReturnValue;            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x00EC(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0100(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0114(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AOFEnemyAIController*                   K2Node_DynamicCast_AsOFEnemy_AIController;         // 0x0140(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     K2Node_CustomEvent_Payload_2;                      // 0x0150(0x00B0)()
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECemeteryCreatureType                         K2Node_Event_CreatureType;                         // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_202[0x2];                                      // 0x0202(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_CurrentProgress;                      // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_MaxProgress;                          // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_StartVector;                          // 0x020C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_EndVector;                            // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_FocusTarget;                          // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_Grapple_Location;                     // 0x0230(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimationMontageIdentifier                   K2Node_Event_Value;                                // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23D[0x3];                                      // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_currentHealthPercentage;              // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bWasCancelled;                        // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_245[0x3];                                      // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FGameplayEventData& Payload)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0248(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_259[0x3];                                      // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0264(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_265[0x3];                                      // 0x0265(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue; // 0x0268(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RemoveActiveEffectsWithTags_ReturnValue;  // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RemoveActiveEffectsWithTags_ReturnValue_1; // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue; // 0x0278(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     K2Node_MakeStruct_GameplayEventData;               // 0x0280(0x00B0)()
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue;            // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     K2Node_CustomEvent_Payload;                        // 0x0340(0x00B0)()
	TDelegate<void(const struct FGameplayEventData& Payload)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x03F0(0x0010)(ZeroConstructor, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0400(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40C[0x4];                                      // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNavigationPath*                        CallFunc_FindPathToActorSynchronously_ReturnValue; // 0x0410(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPartial_ReturnValue;                    // 0x0418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilityTask_WaitGameplayEvent*         CallFunc_WaitGameplayEvent_ReturnValue_1;          // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     Temp_struct_Variable_1;                            // 0x0430(0x00B0)()
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x04E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E1[0x7];                                      // 0x04E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x04E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue_1;          // 0x04F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x04F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F9[0x7];                                      // 0x04F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0500(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     K2Node_CustomEvent_Payload_1;                      // 0x0508(0x00B0)()
	TArray<class ABP_GrappleSceneMover_C*>        CallFunc_GetAllActorsOfClass_OutActors;            // 0x05B8(0x0010)(ReferenceParm)
	class ABP_GrappleSceneMover_C*                CallFunc_Array_Get_Item;                           // 0x05C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x05D0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x0658(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_659[0x7];                                      // 0x0659(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_GrappleSceneMover_C*>        CallFunc_GetAllActorsOfClass_OutActors_1;          // 0x0660(0x0010)(ReferenceParm)
	class ABP_GrappleSceneMover_C*                CallFunc_Array_Get_Item_1;                         // 0x0670(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0678(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x067C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_67D[0x3];                                      // 0x067D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue_2;          // 0x0680(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0688(0x0010)(ZeroConstructor, NoDestructor)
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue_3;          // 0x0698(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FGameplayEventData& Payload)> K2Node_CreateDelegate_OutputDelegate_4;            // 0x06A0(0x0010)(ZeroConstructor, NoDestructor)
	struct FMovieSceneSequenceLoopCount           K2Node_MakeStruct_MovieSceneSequenceLoopCount;     // 0x06B0(0x0004)(NoDestructor)
	uint8                                         Pad_6B4[0x4];                                      // 0x06B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         CallFunc_GetEndSequence_ReturnValue;               // 0x06B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMovieSceneSequencePlaybackSettings    K2Node_MakeStruct_MovieSceneSequencePlaybackSettings; // 0x06C0(0x0014)(NoDestructor)
	EPlayerCharacterType                          CallFunc_GetPlayerCharacterType_ReturnValue;       // 0x06D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D5[0x3];                                      // 0x06D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x06D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x06E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UEnvQueryInstanceBlueprintWrapper*      CallFunc_RunEQSQuery_ReturnValue;                  // 0x06F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x06F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UEnvQueryInstanceBlueprintWrapper* QueryInstance, EEnvQueryStatus QueryStatus)> K2Node_CreateDelegate_OutputDelegate_5;            // 0x0700(0x0010)(ZeroConstructor, NoDestructor)
	class UAbilityTask_WaitGameplayEvent*         CallFunc_WaitGameplayEvent_ReturnValue_2;          // 0x0710(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0718(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_719[0x7];                                      // 0x0719(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnvQueryInstanceBlueprintWrapper*      K2Node_CustomEvent_QueryInstance;                  // 0x0720(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEnvQueryStatus                               K2Node_CustomEvent_QueryStatus;                    // 0x0728(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_729[0x7];                                      // 0x0729(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        CallFunc_GetQueryResultsAsLocations_ResultLocations; // 0x0730(0x0010)(ReferenceParm)
	bool                                          CallFunc_GetQueryResultsAsLocations_ReturnValue;   // 0x0740(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_741[0x3];                                      // 0x0741(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0744(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0750(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x075C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0768(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Array_Get_Item_2;                         // 0x0774(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0780(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0784(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0788(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x078C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     Temp_struct_Variable_2;                            // 0x0790(0x00B0)()
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0840(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue_1;        // 0x0841(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_842[0x2];                                      // 0x0842(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0844(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x0848(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_849[0x3];                                      // 0x0849(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult_1;    // 0x084C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue_1;       // 0x08D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D5[0x3];                                      // 0x08D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x08D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x08DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E8[0x8];                                      // 0x08E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x08F0(0x0030)(IsPlainOldData, NoDestructor)
	class ULevelSequencePlayer*                   CallFunc_GetSequencePlayer_ReturnValue_4;          // 0x0920(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_928[0x8];                                      // 0x0928(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_TInterpTo_ReturnValue;                    // 0x0930(0x0030)(IsPlainOldData, NoDestructor)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue_1;         // 0x0960(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0968(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_974[0x4];                                      // 0x0974(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue_1; // 0x0978(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0980(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_98C[0x4];                                      // 0x098C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0990(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_BoxTraceSingle_OutHit;                    // 0x09A0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BoxTraceSingle_ReturnValue;               // 0x0A28(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0A29(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0A2A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0A2B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0A2C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0A30(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0A34(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0A40(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0A4C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0A58(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A64[0x4];                                      // 0x0A64(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0A68(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0A70(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0A78(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0A80(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0A88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0A8C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0A90(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0A94(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0AA0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0AAC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0AB0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0AB4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0AB8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0AC4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddActorWorldOffset_SweepHitResult;    // 0x0AD0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x0B58(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x0B64(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x0B70(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B7C[0x4];                                      // 0x0B7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0B80(0x0030)(IsPlainOldData, NoDestructor)
	class APiecesLevelSequenceActor*              CallFunc_CreatePiecesLevelSequencePlayer_OutActor; // 0x0BB0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPiecesLevelSequencePlayer*             CallFunc_CreatePiecesLevelSequencePlayer_ReturnValue; // 0x0BB8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwningActorFromActorInfo_ReturnValue;  // 0x0BC0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0BC8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOFEnemyCharacter*                      K2Node_DynamicCast_AsOFEnemy_Character;            // 0x0BD0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0BD8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD9[0x7];                                      // 0x0BD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerCharacter_C*                  K2Node_DynamicCast_AsBP_Player_Character;          // 0x0BE0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0BE8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0BE9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BEA[0x2];                                      // 0x0BEA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_1;        // 0x0BEC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0BF8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x0BFC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x0C00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x0C04(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue_2;        // 0x0C10(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple) == 0x000010, "Wrong alignment on GA_Grapple_C_ExecuteUbergraph_GA_Grapple");
static_assert(sizeof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple) == 0x000C20, "Wrong size on GA_Grapple_C_ExecuteUbergraph_GA_Grapple");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, EntryPoint) == 0x000000, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000004, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakRotator_Roll) == 0x000010, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakRotator_Pitch) == 0x000014, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakRotator_Yaw) == 0x000018, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_MakeRotator_ReturnValue) == 0x00001C, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, Temp_struct_Variable) == 0x000028, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_K2_SetActorRotation_ReturnValue) == 0x0000D8, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_WaitGameplayEvent_ReturnValue) == 0x0000E0, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_WaitGameplayEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_IsValid_ReturnValue) == 0x0000E8, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_CreateDelegate_OutputDelegate) == 0x0000EC, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000100, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakTransform_Location) == 0x000108, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakTransform_Rotation) == 0x000114, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakTransform_Scale) == 0x000120, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, Temp_bool_Variable) == 0x00012C, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_GetController_ReturnValue) == 0x000130, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, Temp_int_Array_Index_Variable) == 0x000138, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_DynamicCast_AsOFEnemy_AIController) == 0x000140, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_DynamicCast_AsOFEnemy_AIController' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_DynamicCast_bSuccess) == 0x000148, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_CustomEvent_Payload_2) == 0x000150, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_CustomEvent_Payload_2' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, Temp_bool_IsClosed_Variable) == 0x000200, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_Event_CreatureType) == 0x000201, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_Event_CreatureType' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_Event_CurrentProgress) == 0x000204, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_Event_CurrentProgress' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_Event_MaxProgress) == 0x000208, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_Event_MaxProgress' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_Event_StartVector) == 0x00020C, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_Event_StartVector' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_Event_EndVector) == 0x000218, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_Event_EndVector' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_Event_FocusTarget) == 0x000228, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_Event_FocusTarget' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_Event_Grapple_Location) == 0x000230, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_Event_Grapple_Location' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_Event_Value) == 0x00023C, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_Event_currentHealthPercentage) == 0x000240, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_Event_currentHealthPercentage' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_Event_bWasCancelled) == 0x000244, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_Event_bWasCancelled' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_CreateDelegate_OutputDelegate_1) == 0x000248, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x000258, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, Temp_int_Loop_Counter_Variable) == 0x00025C, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_Add_IntInt_ReturnValue) == 0x000260, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_IsValid_ReturnValue_1) == 0x000264, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue) == 0x000268, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_RemoveActiveEffectsWithTags_ReturnValue) == 0x000270, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_RemoveActiveEffectsWithTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_RemoveActiveEffectsWithTags_ReturnValue_1) == 0x000274, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_RemoveActiveEffectsWithTags_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue) == 0x000278, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_MakeStruct_GameplayEventData) == 0x000280, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_MakeStruct_GameplayEventData' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_GetSequencePlayer_ReturnValue) == 0x000330, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_GetSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_IsValid_ReturnValue_2) == 0x000338, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_CustomEvent_Payload) == 0x000340, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_CustomEvent_Payload' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_CreateDelegate_OutputDelegate_2) == 0x0003F0, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000400, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_FindPathToActorSynchronously_ReturnValue) == 0x000410, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_FindPathToActorSynchronously_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_IsPartial_ReturnValue) == 0x000418, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_IsPartial_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_GetPlayerController_ReturnValue) == 0x000420, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_WaitGameplayEvent_ReturnValue_1) == 0x000428, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_WaitGameplayEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, Temp_struct_Variable_1) == 0x000430, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_IsValid_ReturnValue_3) == 0x0004E0, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_GetPlayerController_ReturnValue_1) == 0x0004E8, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_GetSequencePlayer_ReturnValue_1) == 0x0004F0, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_GetSequencePlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, Temp_bool_Has_Been_Initd_Variable) == 0x0004F8, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000500, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_CustomEvent_Payload_1) == 0x000508, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_CustomEvent_Payload_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_GetAllActorsOfClass_OutActors) == 0x0005B8, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_Array_Get_Item) == 0x0005C8, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x0005D0, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_K2_SetActorTransform_ReturnValue) == 0x000658, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_GetAllActorsOfClass_OutActors_1) == 0x000660, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_GetAllActorsOfClass_OutActors_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_Array_Get_Item_1) == 0x000670, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_Array_Length_ReturnValue) == 0x000678, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_Less_IntInt_ReturnValue) == 0x00067C, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_GetSequencePlayer_ReturnValue_2) == 0x000680, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_GetSequencePlayer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_CreateDelegate_OutputDelegate_3) == 0x000688, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_GetSequencePlayer_ReturnValue_3) == 0x000698, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_GetSequencePlayer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_CreateDelegate_OutputDelegate_4) == 0x0006A0, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_MakeStruct_MovieSceneSequenceLoopCount) == 0x0006B0, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_MakeStruct_MovieSceneSequenceLoopCount' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_GetEndSequence_ReturnValue) == 0x0006B8, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_GetEndSequence_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_MakeStruct_MovieSceneSequencePlaybackSettings) == 0x0006C0, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_MakeStruct_MovieSceneSequencePlaybackSettings' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_GetPlayerCharacterType_ReturnValue) == 0x0006D4, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_GetPlayerCharacterType_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x0006D8, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x0006E0, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_RunEQSQuery_ReturnValue) == 0x0006F0, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_RunEQSQuery_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_Conv_StringToName_ReturnValue) == 0x0006F8, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_CreateDelegate_OutputDelegate_5) == 0x000700, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_WaitGameplayEvent_ReturnValue_2) == 0x000710, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_WaitGameplayEvent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_IsValid_ReturnValue_4) == 0x000718, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_CustomEvent_QueryInstance) == 0x000720, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_CustomEvent_QueryInstance' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_CustomEvent_QueryStatus) == 0x000728, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_CustomEvent_QueryStatus' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_GetQueryResultsAsLocations_ResultLocations) == 0x000730, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_GetQueryResultsAsLocations_ResultLocations' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_GetQueryResultsAsLocations_ReturnValue) == 0x000740, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_GetQueryResultsAsLocations_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakTransform_Location_1) == 0x000744, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakTransform_Rotation_1) == 0x000750, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakTransform_Scale_1) == 0x00075C, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_FindLookAtRotation_ReturnValue) == 0x000768, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_Array_Get_Item_2) == 0x000774, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakRotator_Roll_1) == 0x000780, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakRotator_Pitch_1) == 0x000784, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakRotator_Yaw_1) == 0x000788, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_Add_FloatFloat_ReturnValue) == 0x00078C, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, Temp_struct_Variable_2) == 0x000790, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_IsValid_ReturnValue_5) == 0x000840, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_K2_SetActorRotation_ReturnValue_1) == 0x000841, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_K2_SetActorRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000844, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, Temp_bool_Has_Been_Initd_Variable_1) == 0x000848, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_K2_SetActorTransform_SweepHitResult_1) == 0x00084C, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_K2_SetActorTransform_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_K2_SetActorTransform_ReturnValue_1) == 0x0008D4, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_K2_SetActorTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_Select_Default) == 0x0008D8, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_MakeRotator_ReturnValue_1) == 0x0008DC, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_MakeTransform_ReturnValue) == 0x0008F0, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_GetSequencePlayer_ReturnValue_4) == 0x000920, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_GetSequencePlayer_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_TInterpTo_ReturnValue) == 0x000930, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_TInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_GetPlayerCharacter_ReturnValue_1) == 0x000960, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_GetPlayerCharacter_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000968, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_GetAvatarActorFromActorInfo_ReturnValue_1) == 0x000978, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_GetAvatarActorFromActorInfo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_Add_VectorVector_ReturnValue) == 0x000980, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_MakeArray_Array) == 0x000990, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BoxTraceSingle_OutHit) == 0x0009A0, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BoxTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BoxTraceSingle_ReturnValue) == 0x000A28, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BoxTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_IsValid_ReturnValue_6) == 0x000A29, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakHitResult_bBlockingHit) == 0x000A2A, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakHitResult_bInitialOverlap) == 0x000A2B, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakHitResult_Time) == 0x000A2C, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakHitResult_Distance) == 0x000A30, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakHitResult_Location) == 0x000A34, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakHitResult_ImpactPoint) == 0x000A40, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakHitResult_Normal) == 0x000A4C, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakHitResult_ImpactNormal) == 0x000A58, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakHitResult_PhysMat) == 0x000A68, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakHitResult_HitActor) == 0x000A70, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakHitResult_HitComponent) == 0x000A78, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakHitResult_HitBoneName) == 0x000A80, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakHitResult_HitItem) == 0x000A88, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakHitResult_ElementIndex) == 0x000A8C, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakHitResult_FaceIndex) == 0x000A90, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakHitResult_TraceStart) == 0x000A94, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakHitResult_TraceEnd) == 0x000AA0, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakVector_X) == 0x000AAC, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakVector_Y) == 0x000AB0, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakVector_Z) == 0x000AB4, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000AB8, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_MakeVector_ReturnValue) == 0x000AC4, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_K2_AddActorWorldOffset_SweepHitResult) == 0x000AD0, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_K2_AddActorWorldOffset_SweepHitResult' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakTransform_Location_2) == 0x000B58, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakTransform_Rotation_2) == 0x000B64, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakTransform_Scale_2) == 0x000B70, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_MakeTransform_ReturnValue_1) == 0x000B80, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_CreatePiecesLevelSequencePlayer_OutActor) == 0x000BB0, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_CreatePiecesLevelSequencePlayer_OutActor' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_CreatePiecesLevelSequencePlayer_ReturnValue) == 0x000BB8, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_CreatePiecesLevelSequencePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_GetOwningActorFromActorInfo_ReturnValue) == 0x000BC0, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_GetOwningActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_GetPlayerPawn_ReturnValue) == 0x000BC8, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_DynamicCast_AsOFEnemy_Character) == 0x000BD0, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_DynamicCast_AsOFEnemy_Character' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_DynamicCast_bSuccess_1) == 0x000BD8, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_DynamicCast_AsBP_Player_Character) == 0x000BE0, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_DynamicCast_AsBP_Player_Character' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, K2Node_DynamicCast_bSuccess_2) == 0x000BE8, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, Temp_bool_IsClosed_Variable_1) == 0x000BE9, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_K2_GetActorRotation_ReturnValue_1) == 0x000BEC, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_K2_GetActorRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakRotator_Roll_2) == 0x000BF8, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakRotator_Pitch_2) == 0x000BFC, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_BreakRotator_Yaw_2) == 0x000C00, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_MakeRotator_ReturnValue_2) == 0x000C04, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_ExecuteUbergraph_GA_Grapple, CallFunc_K2_SetActorRotation_ReturnValue_2) == 0x000C10, "Member 'GA_Grapple_C_ExecuteUbergraph_GA_Grapple::CallFunc_K2_SetActorRotation_ReturnValue_2' has a wrong offset!");

// Function GA_Grapple.GA_Grapple_C.K2_CanActivateAbility
// 0x00A0 (0x00A0 - 0x0000)
struct GA_Grapple_C_K2_CanActivateAbility final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0048)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	struct FGameplayAbilitySpecHandle             Handle;                                            // 0x0048(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RelevantTags;                                      // 0x0050(0x0020)(Parm, OutParm)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                CallFunc_GetPlayerAbilitySystemComponent_ReturnValue; // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Grapple_C_K2_CanActivateAbility) == 0x000008, "Wrong alignment on GA_Grapple_C_K2_CanActivateAbility");
static_assert(sizeof(GA_Grapple_C_K2_CanActivateAbility) == 0x0000A0, "Wrong size on GA_Grapple_C_K2_CanActivateAbility");
static_assert(offsetof(GA_Grapple_C_K2_CanActivateAbility, ActorInfo) == 0x000000, "Member 'GA_Grapple_C_K2_CanActivateAbility::ActorInfo' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_K2_CanActivateAbility, Handle) == 0x000048, "Member 'GA_Grapple_C_K2_CanActivateAbility::Handle' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_K2_CanActivateAbility, RelevantTags) == 0x000050, "Member 'GA_Grapple_C_K2_CanActivateAbility::RelevantTags' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_K2_CanActivateAbility, ReturnValue) == 0x000070, "Member 'GA_Grapple_C_K2_CanActivateAbility::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_K2_CanActivateAbility, CallFunc_GetPlayerAbilitySystemComponent_ReturnValue) == 0x000078, "Member 'GA_Grapple_C_K2_CanActivateAbility::CallFunc_GetPlayerAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_K2_CanActivateAbility, CallFunc_IsValid_ReturnValue) == 0x000080, "Member 'GA_Grapple_C_K2_CanActivateAbility::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_K2_CanActivateAbility, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x000088, "Member 'GA_Grapple_C_K2_CanActivateAbility::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_K2_CanActivateAbility, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x000098, "Member 'GA_Grapple_C_K2_CanActivateAbility::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Grapple_C_K2_CanActivateAbility, CallFunc_Not_PreBool_ReturnValue) == 0x000099, "Member 'GA_Grapple_C_K2_CanActivateAbility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

}

