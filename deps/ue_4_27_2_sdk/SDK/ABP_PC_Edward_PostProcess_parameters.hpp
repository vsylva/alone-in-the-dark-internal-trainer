#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_PC_Edward_PostProcess

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ObsidianFox_structs.hpp"


namespace SDK::Params
{

// Function ABP_PC_Edward_PostProcess.ABP_PC_Edward_PostProcess_C.Dynamics
// 0x0028 (0x0028 - 0x0000)
struct ABP_PC_Edward_PostProcess_C_Dynamics final
{
public:
	struct FPoseLink                              DynamicsLayerInputPose;                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	float                                         TieBlend_0;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              Dynamics_0;                                        // 0x0018(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PC_Edward_PostProcess_C_Dynamics) == 0x000008, "Wrong alignment on ABP_PC_Edward_PostProcess_C_Dynamics");
static_assert(sizeof(ABP_PC_Edward_PostProcess_C_Dynamics) == 0x000028, "Wrong size on ABP_PC_Edward_PostProcess_C_Dynamics");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_Dynamics, DynamicsLayerInputPose) == 0x000000, "Member 'ABP_PC_Edward_PostProcess_C_Dynamics::DynamicsLayerInputPose' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_Dynamics, TieBlend_0) == 0x000010, "Member 'ABP_PC_Edward_PostProcess_C_Dynamics::TieBlend_0' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_Dynamics, Dynamics_0) == 0x000018, "Member 'ABP_PC_Edward_PostProcess_C_Dynamics::Dynamics_0' has a wrong offset!");

// Function ABP_PC_Edward_PostProcess.ABP_PC_Edward_PostProcess_C.AnimGraph
// 0x0020 (0x0020 - 0x0000)
struct ABP_PC_Edward_PostProcess_C_AnimGraph final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AnimGraph_0;                                       // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PC_Edward_PostProcess_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_PC_Edward_PostProcess_C_AnimGraph");
static_assert(sizeof(ABP_PC_Edward_PostProcess_C_AnimGraph) == 0x000020, "Wrong size on ABP_PC_Edward_PostProcess_C_AnimGraph");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_AnimGraph, InPose) == 0x000000, "Member 'ABP_PC_Edward_PostProcess_C_AnimGraph::InPose' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_AnimGraph, AnimGraph_0) == 0x000010, "Member 'ABP_PC_Edward_PostProcess_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_PC_Edward_PostProcess.ABP_PC_Edward_PostProcess_C.GetRandomVector
// 0x01E8 (0x01E8 - 0x0000)
struct ABP_PC_Edward_PostProcess_C_GetRandomVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Magnitude;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UEnvironmentGameSubSystem*              CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEnvironmentStruct                     CallFunc_GetWeatherStruct_ReturnValue;             // 0x0020(0x0170)()
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PerlinNoise1D_ReturnValue;                // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PerlinNoise1D_ReturnValue_1;              // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PerlinNoise1D_ReturnValue_2;              // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PerlinNoise1D_ReturnValue_3;              // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PC_Edward_PostProcess_C_GetRandomVector) == 0x000008, "Wrong alignment on ABP_PC_Edward_PostProcess_C_GetRandomVector");
static_assert(sizeof(ABP_PC_Edward_PostProcess_C_GetRandomVector) == 0x0001E8, "Wrong size on ABP_PC_Edward_PostProcess_C_GetRandomVector");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, ReturnValue) == 0x000000, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, Magnitude) == 0x00000C, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::Magnitude' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000010, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000018, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, CallFunc_GetWeatherStruct_ReturnValue) == 0x000020, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::CallFunc_GetWeatherStruct_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000190, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000194, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, CallFunc_Lerp_ReturnValue) == 0x000198, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, CallFunc_Add_FloatFloat_ReturnValue) == 0x00019C, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x0001A0, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, CallFunc_PerlinNoise1D_ReturnValue) == 0x0001A4, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::CallFunc_PerlinNoise1D_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0001A8, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0001AC, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x0001B0, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x0001B4, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, CallFunc_PerlinNoise1D_ReturnValue_1) == 0x0001B8, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::CallFunc_PerlinNoise1D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, CallFunc_PerlinNoise1D_ReturnValue_2) == 0x0001BC, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::CallFunc_PerlinNoise1D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, CallFunc_PerlinNoise1D_ReturnValue_3) == 0x0001C0, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::CallFunc_PerlinNoise1D_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, CallFunc_Lerp_ReturnValue_1) == 0x0001C4, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0001C8, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x0001CC, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x0001D0, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x0001D4, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x0001D8, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_GetRandomVector, CallFunc_MakeVector_ReturnValue) == 0x0001DC, "Member 'ABP_PC_Edward_PostProcess_C_GetRandomVector::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function ABP_PC_Edward_PostProcess.ABP_PC_Edward_PostProcess_C.SlirreTest
// 0x0030 (0x0030 - 0x0000)
struct ABP_PC_Edward_PostProcess_C_SlirreTest final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Force;                                             // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PerlinNoise1D_ReturnValue;                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PC_Edward_PostProcess_C_SlirreTest) == 0x000004, "Wrong alignment on ABP_PC_Edward_PostProcess_C_SlirreTest");
static_assert(sizeof(ABP_PC_Edward_PostProcess_C_SlirreTest) == 0x000030, "Wrong size on ABP_PC_Edward_PostProcess_C_SlirreTest");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_SlirreTest, Offset) == 0x000000, "Member 'ABP_PC_Edward_PostProcess_C_SlirreTest::Offset' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_SlirreTest, Force) == 0x000004, "Member 'ABP_PC_Edward_PostProcess_C_SlirreTest::Force' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_SlirreTest, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000010, "Member 'ABP_PC_Edward_PostProcess_C_SlirreTest::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_SlirreTest, CallFunc_Add_FloatFloat_ReturnValue) == 0x000014, "Member 'ABP_PC_Edward_PostProcess_C_SlirreTest::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_SlirreTest, CallFunc_PerlinNoise1D_ReturnValue) == 0x000018, "Member 'ABP_PC_Edward_PostProcess_C_SlirreTest::CallFunc_PerlinNoise1D_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_SlirreTest, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'ABP_PC_Edward_PostProcess_C_SlirreTest::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_SlirreTest, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'ABP_PC_Edward_PostProcess_C_SlirreTest::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_SlirreTest, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000024, "Member 'ABP_PC_Edward_PostProcess_C_SlirreTest::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");

// Function ABP_PC_Edward_PostProcess.ABP_PC_Edward_PostProcess_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_PC_Edward_PostProcess_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PC_Edward_PostProcess_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_PC_Edward_PostProcess_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_PC_Edward_PostProcess_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_PC_Edward_PostProcess_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_PC_Edward_PostProcess_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_PC_Edward_PostProcess.ABP_PC_Edward_PostProcess_C.ExecuteUbergraph_ABP_PC_Edward_PostProcess
// 0x01C8 (0x01C8 - 0x0000)
struct ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnvironmentGameSubSystem*              CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEnvironmentStruct                     CallFunc_GetWeatherStruct_ReturnValue;             // 0x0020(0x0170)()
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRandomVector_ReturnValue;              // 0x01A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRandomVector_Magnitude;                // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x01BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess) == 0x000008, "Wrong alignment on ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess");
static_assert(sizeof(ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess) == 0x0001C8, "Wrong size on ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess, EntryPoint) == 0x000000, "Member 'ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000008, "Member 'ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000010, "Member 'ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess, CallFunc_GetWeatherStruct_ReturnValue) == 0x000020, "Member 'ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess::CallFunc_GetWeatherStruct_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000190, "Member 'ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess, K2Node_Event_DeltaTimeX) == 0x00019C, "Member 'ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess, CallFunc_GetRandomVector_ReturnValue) == 0x0001A0, "Member 'ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess::CallFunc_GetRandomVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess, CallFunc_GetRandomVector_Magnitude) == 0x0001AC, "Member 'ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess::CallFunc_GetRandomVector_Magnitude' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess, CallFunc_Add_VectorVector_ReturnValue) == 0x0001B0, "Member 'ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x0001BC, "Member 'ABP_PC_Edward_PostProcess_C_ExecuteUbergraph_ABP_PC_Edward_PostProcess::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");

}

