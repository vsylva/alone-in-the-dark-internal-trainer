#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ContextualTraverse_Climb_Base

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_ContextualTraverse_TwoWayTraversalBase_classes.hpp"
#include "ObsidianFox_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ContextualTraverse_Climb_Base.BP_ContextualTraverse_Climb_Base_C
// 0x00A0 (0x03A8 - 0x0308)
class ABP_ContextualTraverse_Climb_Base_C : public ABP_ContextualTraverse_TwoWayTraversalBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_ContextualTraverse_Climb_Base_C; // 0x0308(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    MotionWarpClimbStart;                              // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    MotionWarpClimbEnd;                                // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    MotionWarpLandPoint;                               // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        MotionWarpingStartLocationEdward;                  // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInteractLedgeComponent_C*              InteractLedgeComponent;                            // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ArrowDown;                                         // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ArrowUp;                                           // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BoxTop;                                            // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BoxSide;                                           // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreStaticCollisions;                            // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_361[0x3];                                      // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ClimbMontageTag;                                   // 0x0364(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ClimbMontage;                                      // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraModifier*                        CameraModifierRef;                                 // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             CachedCollision;                                   // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_PC_ContextualTraverse_JumpDown_C*  ContextualABP;                                     // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FGameplayTag                           FallMontageTag;                                    // 0x0390(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FallMontage;                                       // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseCameraModifier;                                // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          TraceForMotionWarpTargetLocation;                  // 0x03A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void GetTracedMotionWarpingEndLocation(struct FVector* TargetLocation);
	void MakeMotionWarpPoint(class ACharacter* PlayerCharacter, struct FVector* WorldLocation);
	void Setup_Climb_Motion_Warp();
	void BindToAnimationStates();
	void PlayAnimation();
	void CacheAndChangeCollision();
	void UserConstructionScript();
	void Failed_D11DCA564D5D6CBEB55DD2A0F83C585D(class UAnimMontage* Montage);
	void Completed_D11DCA564D5D6CBEB55DD2A0F83C585D(class UAnimMontage* Montage);
	void OnNotifyEnd_1821AC924A18A07761553782D7116892(class FName NotifyName);
	void OnNotifyBegin_1821AC924A18A07761553782D7116892(class FName NotifyName);
	void OnInterrupted_1821AC924A18A07761553782D7116892(class FName NotifyName);
	void OnBlendOut_1821AC924A18A07761553782D7116892(class FName NotifyName);
	void OnCompleted_1821AC924A18A07761553782D7116892(class FName NotifyName);
	void Failed_D11DCA564D5D6CBEB55DD2A02A34C1D7(class UAnimMontage* Montage);
	void Completed_D11DCA564D5D6CBEB55DD2A02A34C1D7(class UAnimMontage* Montage);
	void Failed_504C1BF04BB165FEF37BA5ACD37C4FD3(class UAnimMontage* Montage);
	void Completed_504C1BF04BB165FEF37BA5ACD37C4FD3(class UAnimMontage* Montage);
	void OnNotifyEnd_A127E6484024CC76B5C0869CFA1F05D5(class FName NotifyName);
	void OnNotifyBegin_A127E6484024CC76B5C0869CFA1F05D5(class FName NotifyName);
	void OnInterrupted_A127E6484024CC76B5C0869CFA1F05D5(class FName NotifyName);
	void OnBlendOut_A127E6484024CC76B5C0869CFA1F05D5(class FName NotifyName);
	void OnCompleted_A127E6484024CC76B5C0869CFA1F05D5(class FName NotifyName);
	void Failed_504C1BF04BB165FEF37BA5AC4915A860(class UAnimMontage* Montage);
	void Completed_504C1BF04BB165FEF37BA5AC4915A860(class UAnimMontage* Montage);
	void StartClimb();
	void ReceiveBeginPlay();
	void OnCharacterSwitched(const class AOFPlayerCharacter* Character);
	void StartFall();
	void OnLanded();
	void OnTraverseEnd();
	void BndEvt__BP_ContextualTraverse_Climb_Base_InteractActivateColl_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_ContextualTraverse_Climb_Base_InteractActivateCollEnd_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void RepositionFinished();
	void ExecuteUbergraph_BP_ContextualTraverse_Climb_Base(int32 EntryPoint);
	void OnStartFalling();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ContextualTraverse_Climb_Base_C">();
	}
	static class ABP_ContextualTraverse_Climb_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ContextualTraverse_Climb_Base_C>();
	}
};
static_assert(alignof(ABP_ContextualTraverse_Climb_Base_C) == 0x000008, "Wrong alignment on ABP_ContextualTraverse_Climb_Base_C");
static_assert(sizeof(ABP_ContextualTraverse_Climb_Base_C) == 0x0003A8, "Wrong size on ABP_ContextualTraverse_Climb_Base_C");
static_assert(offsetof(ABP_ContextualTraverse_Climb_Base_C, UberGraphFrame_BP_ContextualTraverse_Climb_Base_C) == 0x000308, "Member 'ABP_ContextualTraverse_Climb_Base_C::UberGraphFrame_BP_ContextualTraverse_Climb_Base_C' has a wrong offset!");
static_assert(offsetof(ABP_ContextualTraverse_Climb_Base_C, MotionWarpClimbStart) == 0x000310, "Member 'ABP_ContextualTraverse_Climb_Base_C::MotionWarpClimbStart' has a wrong offset!");
static_assert(offsetof(ABP_ContextualTraverse_Climb_Base_C, MotionWarpClimbEnd) == 0x000318, "Member 'ABP_ContextualTraverse_Climb_Base_C::MotionWarpClimbEnd' has a wrong offset!");
static_assert(offsetof(ABP_ContextualTraverse_Climb_Base_C, MotionWarpLandPoint) == 0x000320, "Member 'ABP_ContextualTraverse_Climb_Base_C::MotionWarpLandPoint' has a wrong offset!");
static_assert(offsetof(ABP_ContextualTraverse_Climb_Base_C, MotionWarpingStartLocationEdward) == 0x000328, "Member 'ABP_ContextualTraverse_Climb_Base_C::MotionWarpingStartLocationEdward' has a wrong offset!");
static_assert(offsetof(ABP_ContextualTraverse_Climb_Base_C, Box) == 0x000330, "Member 'ABP_ContextualTraverse_Climb_Base_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_ContextualTraverse_Climb_Base_C, InteractLedgeComponent) == 0x000338, "Member 'ABP_ContextualTraverse_Climb_Base_C::InteractLedgeComponent' has a wrong offset!");
static_assert(offsetof(ABP_ContextualTraverse_Climb_Base_C, ArrowDown) == 0x000340, "Member 'ABP_ContextualTraverse_Climb_Base_C::ArrowDown' has a wrong offset!");
static_assert(offsetof(ABP_ContextualTraverse_Climb_Base_C, ArrowUp) == 0x000348, "Member 'ABP_ContextualTraverse_Climb_Base_C::ArrowUp' has a wrong offset!");
static_assert(offsetof(ABP_ContextualTraverse_Climb_Base_C, BoxTop) == 0x000350, "Member 'ABP_ContextualTraverse_Climb_Base_C::BoxTop' has a wrong offset!");
static_assert(offsetof(ABP_ContextualTraverse_Climb_Base_C, BoxSide) == 0x000358, "Member 'ABP_ContextualTraverse_Climb_Base_C::BoxSide' has a wrong offset!");
static_assert(offsetof(ABP_ContextualTraverse_Climb_Base_C, IgnoreStaticCollisions) == 0x000360, "Member 'ABP_ContextualTraverse_Climb_Base_C::IgnoreStaticCollisions' has a wrong offset!");
static_assert(offsetof(ABP_ContextualTraverse_Climb_Base_C, ClimbMontageTag) == 0x000364, "Member 'ABP_ContextualTraverse_Climb_Base_C::ClimbMontageTag' has a wrong offset!");
static_assert(offsetof(ABP_ContextualTraverse_Climb_Base_C, ClimbMontage) == 0x000370, "Member 'ABP_ContextualTraverse_Climb_Base_C::ClimbMontage' has a wrong offset!");
static_assert(offsetof(ABP_ContextualTraverse_Climb_Base_C, CameraModifierRef) == 0x000378, "Member 'ABP_ContextualTraverse_Climb_Base_C::CameraModifierRef' has a wrong offset!");
static_assert(offsetof(ABP_ContextualTraverse_Climb_Base_C, CachedCollision) == 0x000380, "Member 'ABP_ContextualTraverse_Climb_Base_C::CachedCollision' has a wrong offset!");
static_assert(offsetof(ABP_ContextualTraverse_Climb_Base_C, ContextualABP) == 0x000388, "Member 'ABP_ContextualTraverse_Climb_Base_C::ContextualABP' has a wrong offset!");
static_assert(offsetof(ABP_ContextualTraverse_Climb_Base_C, FallMontageTag) == 0x000390, "Member 'ABP_ContextualTraverse_Climb_Base_C::FallMontageTag' has a wrong offset!");
static_assert(offsetof(ABP_ContextualTraverse_Climb_Base_C, FallMontage) == 0x000398, "Member 'ABP_ContextualTraverse_Climb_Base_C::FallMontage' has a wrong offset!");
static_assert(offsetof(ABP_ContextualTraverse_Climb_Base_C, bUseCameraModifier) == 0x0003A0, "Member 'ABP_ContextualTraverse_Climb_Base_C::bUseCameraModifier' has a wrong offset!");
static_assert(offsetof(ABP_ContextualTraverse_Climb_Base_C, TraceForMotionWarpTargetLocation) == 0x0003A1, "Member 'ABP_ContextualTraverse_Climb_Base_C::TraceForMotionWarpTargetLocation' has a wrong offset!");

}

