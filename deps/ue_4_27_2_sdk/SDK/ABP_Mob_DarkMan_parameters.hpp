#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Mob_DarkMan

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "DarkManAlertDirection_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DarkManEmoteType_structs.hpp"


namespace SDK::Params
{

// Function ABP_Mob_DarkMan.ABP_Mob_DarkMan_C.ExecuteUbergraph_ABP_Mob_DarkMan
// 0x00A0 (0x00A0 - 0x0000)
struct ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Value;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue_1; // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1; // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_2;          // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue_2; // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_2; // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_2;            // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_3;          // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_3;            // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_3; // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_1;        // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_4;            // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SmoothStep_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SmoothStep_ReturnValue_1;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDarkManEmoteDataAsset*                 K2Node_Event_Emote;                                // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_AlertTargetActor;                     // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_DarkManEmoteDataAsset_C> K2Node_DynamicCast_AsBPI_Dark_Man_Emote_Data_Asset; // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EDarkManEmoteType                             CallFunc_GetEmoteType_EmoteType;                   // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDarkManAlertDirection                        CallFunc_CalculateAlertDirection_Direction;        // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_93[0x1];                                       // 0x0093(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CalculateAlertDirection_AlertAngle;       // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan) == 0x000008, "Wrong alignment on ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan");
static_assert(sizeof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan) == 0x0000A0, "Wrong size on ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, EntryPoint) == 0x000000, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, K2Node_Event_Value) == 0x000004, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000005, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_Not_PreBool_ReturnValue) == 0x000006, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_Not_PreBool_ReturnValue_1) == 0x000007, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_BooleanAND_ReturnValue) == 0x000008, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000009, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue) == 0x00000C, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_BooleanAND_ReturnValue_1) == 0x000010, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue) == 0x000014, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_Less_FloatFloat_ReturnValue) == 0x000018, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000019, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x00001A, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_Not_PreBool_ReturnValue_2) == 0x00001B, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00001C, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_BooleanAND_ReturnValue_2) == 0x00001D, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue_1) == 0x000020, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1) == 0x000024, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000028, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_Not_PreBool_ReturnValue_3) == 0x000029, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_NotEqual_ByteByte_ReturnValue_2) == 0x00002A, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_NotEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00002B, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_BooleanAND_ReturnValue_3) == 0x00002C, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue_2) == 0x000030, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_2) == 0x000034, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_Less_FloatFloat_ReturnValue_2) == 0x000038, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_Less_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000039, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_NotEqual_ByteByte_ReturnValue_3) == 0x00003A, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_NotEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_Not_PreBool_ReturnValue_4) == 0x00003B, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_BooleanAND_ReturnValue_4) == 0x00003C, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_Less_FloatFloat_ReturnValue_3) == 0x00003D, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_Less_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_3) == 0x000040, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_NotEqual_FloatFloat_ReturnValue_1) == 0x000044, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_NotEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_Less_FloatFloat_ReturnValue_4) == 0x000045, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_Less_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_Not_PreBool_ReturnValue_5) == 0x000046, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_BooleanAND_ReturnValue_5) == 0x000047, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000048, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_BreakRotator_Roll) == 0x00004C, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_BreakRotator_Pitch) == 0x000050, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_BreakRotator_Yaw) == 0x000054, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_Abs_ReturnValue) == 0x000058, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_Abs_ReturnValue_1) == 0x00005C, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_SmoothStep_ReturnValue) == 0x000060, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_SmoothStep_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_SmoothStep_ReturnValue_1) == 0x000064, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_SmoothStep_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_FMax_ReturnValue) == 0x000068, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, K2Node_Event_DeltaTimeX) == 0x00006C, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, K2Node_Event_Emote) == 0x000070, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::K2Node_Event_Emote' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, K2Node_Event_AlertTargetActor) == 0x000078, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::K2Node_Event_AlertTargetActor' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, K2Node_DynamicCast_AsBPI_Dark_Man_Emote_Data_Asset) == 0x000080, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::K2Node_DynamicCast_AsBPI_Dark_Man_Emote_Data_Asset' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, K2Node_DynamicCast_bSuccess) == 0x000090, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_GetEmoteType_EmoteType) == 0x000091, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_GetEmoteType_EmoteType' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_CalculateAlertDirection_Direction) == 0x000092, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_CalculateAlertDirection_Direction' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_CalculateAlertDirection_AlertAngle) == 0x000094, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_CalculateAlertDirection_AlertAngle' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x000098, "Member 'ABP_Mob_DarkMan_C_ExecuteUbergraph_ABP_Mob_DarkMan::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");

// Function ABP_Mob_DarkMan.ABP_Mob_DarkMan_C.SetTransitionInstantlyToEmoteLoop
// 0x0001 (0x0001 - 0x0000)
struct ABP_Mob_DarkMan_C_SetTransitionInstantlyToEmoteLoop final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Mob_DarkMan_C_SetTransitionInstantlyToEmoteLoop) == 0x000001, "Wrong alignment on ABP_Mob_DarkMan_C_SetTransitionInstantlyToEmoteLoop");
static_assert(sizeof(ABP_Mob_DarkMan_C_SetTransitionInstantlyToEmoteLoop) == 0x000001, "Wrong size on ABP_Mob_DarkMan_C_SetTransitionInstantlyToEmoteLoop");
static_assert(offsetof(ABP_Mob_DarkMan_C_SetTransitionInstantlyToEmoteLoop, Value) == 0x000000, "Member 'ABP_Mob_DarkMan_C_SetTransitionInstantlyToEmoteLoop::Value' has a wrong offset!");

// Function ABP_Mob_DarkMan.ABP_Mob_DarkMan_C.BPEndEmote
// 0x0008 (0x0008 - 0x0000)
struct ABP_Mob_DarkMan_C_BPEndEmote final
{
public:
	class AActor*                                 AlertTargetActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Mob_DarkMan_C_BPEndEmote) == 0x000008, "Wrong alignment on ABP_Mob_DarkMan_C_BPEndEmote");
static_assert(sizeof(ABP_Mob_DarkMan_C_BPEndEmote) == 0x000008, "Wrong size on ABP_Mob_DarkMan_C_BPEndEmote");
static_assert(offsetof(ABP_Mob_DarkMan_C_BPEndEmote, AlertTargetActor) == 0x000000, "Member 'ABP_Mob_DarkMan_C_BPEndEmote::AlertTargetActor' has a wrong offset!");

// Function ABP_Mob_DarkMan.ABP_Mob_DarkMan_C.BPStartEmote
// 0x0008 (0x0008 - 0x0000)
struct ABP_Mob_DarkMan_C_BPStartEmote final
{
public:
	class UDarkManEmoteDataAsset*                 Emote;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Mob_DarkMan_C_BPStartEmote) == 0x000008, "Wrong alignment on ABP_Mob_DarkMan_C_BPStartEmote");
static_assert(sizeof(ABP_Mob_DarkMan_C_BPStartEmote) == 0x000008, "Wrong size on ABP_Mob_DarkMan_C_BPStartEmote");
static_assert(offsetof(ABP_Mob_DarkMan_C_BPStartEmote, Emote) == 0x000000, "Member 'ABP_Mob_DarkMan_C_BPStartEmote::Emote' has a wrong offset!");

// Function ABP_Mob_DarkMan.ABP_Mob_DarkMan_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_Mob_DarkMan_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Mob_DarkMan_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_Mob_DarkMan_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_Mob_DarkMan_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_Mob_DarkMan_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_Mob_DarkMan_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_Mob_DarkMan_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_Mob_DarkMan.ABP_Mob_DarkMan_C.CalculateAlertDirection
// 0x0078 (0x0078 - 0x0000)
struct ABP_Mob_DarkMan_C_CalculateAlertDirection final
{
public:
	class AActor*                                 TargetLocation;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDarkManAlertDirection                        Direction;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AlertAngle;                                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectVectorOnToPlane_ReturnValue;       // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectVectorOnToPlane_ReturnValue_1;     // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAngleToVector2D_ReturnValue;           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Mob_DarkMan_C_CalculateAlertDirection) == 0x000008, "Wrong alignment on ABP_Mob_DarkMan_C_CalculateAlertDirection");
static_assert(sizeof(ABP_Mob_DarkMan_C_CalculateAlertDirection) == 0x000078, "Wrong size on ABP_Mob_DarkMan_C_CalculateAlertDirection");
static_assert(offsetof(ABP_Mob_DarkMan_C_CalculateAlertDirection, TargetLocation) == 0x000000, "Member 'ABP_Mob_DarkMan_C_CalculateAlertDirection::TargetLocation' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_CalculateAlertDirection, Direction) == 0x000008, "Member 'ABP_Mob_DarkMan_C_CalculateAlertDirection::Direction' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_CalculateAlertDirection, AlertAngle) == 0x00000C, "Member 'ABP_Mob_DarkMan_C_CalculateAlertDirection::AlertAngle' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_CalculateAlertDirection, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'ABP_Mob_DarkMan_C_CalculateAlertDirection::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_CalculateAlertDirection, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000014, "Member 'ABP_Mob_DarkMan_C_CalculateAlertDirection::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_CalculateAlertDirection, CallFunc_ProjectVectorOnToPlane_ReturnValue) == 0x000020, "Member 'ABP_Mob_DarkMan_C_CalculateAlertDirection::CallFunc_ProjectVectorOnToPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_CalculateAlertDirection, CallFunc_GetForwardVector_ReturnValue) == 0x00002C, "Member 'ABP_Mob_DarkMan_C_CalculateAlertDirection::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_CalculateAlertDirection, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000038, "Member 'ABP_Mob_DarkMan_C_CalculateAlertDirection::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_CalculateAlertDirection, CallFunc_ProjectVectorOnToPlane_ReturnValue_1) == 0x000044, "Member 'ABP_Mob_DarkMan_C_CalculateAlertDirection::CallFunc_ProjectVectorOnToPlane_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_CalculateAlertDirection, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000050, "Member 'ABP_Mob_DarkMan_C_CalculateAlertDirection::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_CalculateAlertDirection, CallFunc_Normal_ReturnValue) == 0x00005C, "Member 'ABP_Mob_DarkMan_C_CalculateAlertDirection::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_CalculateAlertDirection, CallFunc_GetAngleToVector2D_ReturnValue) == 0x000068, "Member 'ABP_Mob_DarkMan_C_CalculateAlertDirection::CallFunc_GetAngleToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_CalculateAlertDirection, CallFunc_Abs_ReturnValue) == 0x00006C, "Member 'ABP_Mob_DarkMan_C_CalculateAlertDirection::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_CalculateAlertDirection, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000070, "Member 'ABP_Mob_DarkMan_C_CalculateAlertDirection::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_CalculateAlertDirection, CallFunc_Less_FloatFloat_ReturnValue) == 0x000071, "Member 'ABP_Mob_DarkMan_C_CalculateAlertDirection::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_CalculateAlertDirection, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000072, "Member 'ABP_Mob_DarkMan_C_CalculateAlertDirection::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function ABP_Mob_DarkMan.ABP_Mob_DarkMan_C.CalculateContinousAlertAngle
// 0x000C (0x000C - 0x0000)
struct ABP_Mob_DarkMan_C_CalculateContinousAlertAngle final
{
public:
	EDarkManAlertDirection                        CallFunc_CalculateAlertDirection_Direction;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CalculateAlertDirection_AlertAngle;       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Mob_DarkMan_C_CalculateContinousAlertAngle) == 0x000004, "Wrong alignment on ABP_Mob_DarkMan_C_CalculateContinousAlertAngle");
static_assert(sizeof(ABP_Mob_DarkMan_C_CalculateContinousAlertAngle) == 0x00000C, "Wrong size on ABP_Mob_DarkMan_C_CalculateContinousAlertAngle");
static_assert(offsetof(ABP_Mob_DarkMan_C_CalculateContinousAlertAngle, CallFunc_CalculateAlertDirection_Direction) == 0x000000, "Member 'ABP_Mob_DarkMan_C_CalculateContinousAlertAngle::CallFunc_CalculateAlertDirection_Direction' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_CalculateContinousAlertAngle, CallFunc_CalculateAlertDirection_AlertAngle) == 0x000004, "Member 'ABP_Mob_DarkMan_C_CalculateContinousAlertAngle::CallFunc_CalculateAlertDirection_AlertAngle' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_CalculateContinousAlertAngle, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'ABP_Mob_DarkMan_C_CalculateContinousAlertAngle::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ABP_Mob_DarkMan.ABP_Mob_DarkMan_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_Mob_DarkMan_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Mob_DarkMan_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_Mob_DarkMan_C_AnimGraph");
static_assert(sizeof(ABP_Mob_DarkMan_C_AnimGraph) == 0x000010, "Wrong size on ABP_Mob_DarkMan_C_AnimGraph");
static_assert(offsetof(ABP_Mob_DarkMan_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_Mob_DarkMan_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_Mob_DarkMan.ABP_Mob_DarkMan_C.BodyFocusLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_Mob_DarkMan_C_BodyFocusLayer final
{
public:
	struct FPoseLink                              BodyFocusLayerInputPose;                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              BodyFocusLayer_0;                                  // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Mob_DarkMan_C_BodyFocusLayer) == 0x000008, "Wrong alignment on ABP_Mob_DarkMan_C_BodyFocusLayer");
static_assert(sizeof(ABP_Mob_DarkMan_C_BodyFocusLayer) == 0x000020, "Wrong size on ABP_Mob_DarkMan_C_BodyFocusLayer");
static_assert(offsetof(ABP_Mob_DarkMan_C_BodyFocusLayer, BodyFocusLayerInputPose) == 0x000000, "Member 'ABP_Mob_DarkMan_C_BodyFocusLayer::BodyFocusLayerInputPose' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_BodyFocusLayer, BodyFocusLayer_0) == 0x000010, "Member 'ABP_Mob_DarkMan_C_BodyFocusLayer::BodyFocusLayer_0' has a wrong offset!");

// Function ABP_Mob_DarkMan.ABP_Mob_DarkMan_C.DynamicsLayer
// 0x0028 (0x0028 - 0x0000)
struct ABP_Mob_DarkMan_C_DynamicsLayer final
{
public:
	struct FPoseLink                              DynamicsLayerInputPose;                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	float                                         Alpha_0;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              DynamicsLayer_0;                                   // 0x0018(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Mob_DarkMan_C_DynamicsLayer) == 0x000008, "Wrong alignment on ABP_Mob_DarkMan_C_DynamicsLayer");
static_assert(sizeof(ABP_Mob_DarkMan_C_DynamicsLayer) == 0x000028, "Wrong size on ABP_Mob_DarkMan_C_DynamicsLayer");
static_assert(offsetof(ABP_Mob_DarkMan_C_DynamicsLayer, DynamicsLayerInputPose) == 0x000000, "Member 'ABP_Mob_DarkMan_C_DynamicsLayer::DynamicsLayerInputPose' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_DynamicsLayer, Alpha_0) == 0x000010, "Member 'ABP_Mob_DarkMan_C_DynamicsLayer::Alpha_0' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_DynamicsLayer, DynamicsLayer_0) == 0x000018, "Member 'ABP_Mob_DarkMan_C_DynamicsLayer::DynamicsLayer_0' has a wrong offset!");

// Function ABP_Mob_DarkMan.ABP_Mob_DarkMan_C.GetDynamicsAlpha
// 0x0010 (0x0010 - 0x0000)
struct ABP_Mob_DarkMan_C_GetDynamicsAlpha final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Mob_DarkMan_C_GetDynamicsAlpha) == 0x000004, "Wrong alignment on ABP_Mob_DarkMan_C_GetDynamicsAlpha");
static_assert(sizeof(ABP_Mob_DarkMan_C_GetDynamicsAlpha) == 0x000010, "Wrong size on ABP_Mob_DarkMan_C_GetDynamicsAlpha");
static_assert(offsetof(ABP_Mob_DarkMan_C_GetDynamicsAlpha, Key) == 0x000000, "Member 'ABP_Mob_DarkMan_C_GetDynamicsAlpha::Key' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_GetDynamicsAlpha, ReturnValue) == 0x000008, "Member 'ABP_Mob_DarkMan_C_GetDynamicsAlpha::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Mob_DarkMan_C_GetDynamicsAlpha, CallFunc_SelectFloat_ReturnValue) == 0x00000C, "Member 'ABP_Mob_DarkMan_C_GetDynamicsAlpha::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

}

