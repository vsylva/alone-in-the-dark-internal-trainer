#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OpenCVLensDistortion

#include "Basic.hpp"

#include "OpenCVLensDistortion_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function OpenCVLensDistortion.OpenCVLensDistortionBlueprintLibrary.CreateUndistortUVDisplacementMap
// 0x0058 (0x0058 - 0x0000)
struct OpenCVLensDistortionBlueprintLibrary_CreateUndistortUVDisplacementMap final
{
public:
	struct FOpenCVLensDistortionParameters        LensParameters;                                    // 0x0000(0x0034)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FIntPoint                              ImageSize;                                         // 0x0034(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CroppingFactor;                                    // 0x003C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOpenCVCameraViewInfo                  CameraViewInfo;                                    // 0x0040(0x000C)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenCVLensDistortionBlueprintLibrary_CreateUndistortUVDisplacementMap) == 0x000008, "Wrong alignment on OpenCVLensDistortionBlueprintLibrary_CreateUndistortUVDisplacementMap");
static_assert(sizeof(OpenCVLensDistortionBlueprintLibrary_CreateUndistortUVDisplacementMap) == 0x000058, "Wrong size on OpenCVLensDistortionBlueprintLibrary_CreateUndistortUVDisplacementMap");
static_assert(offsetof(OpenCVLensDistortionBlueprintLibrary_CreateUndistortUVDisplacementMap, LensParameters) == 0x000000, "Member 'OpenCVLensDistortionBlueprintLibrary_CreateUndistortUVDisplacementMap::LensParameters' has a wrong offset!");
static_assert(offsetof(OpenCVLensDistortionBlueprintLibrary_CreateUndistortUVDisplacementMap, ImageSize) == 0x000034, "Member 'OpenCVLensDistortionBlueprintLibrary_CreateUndistortUVDisplacementMap::ImageSize' has a wrong offset!");
static_assert(offsetof(OpenCVLensDistortionBlueprintLibrary_CreateUndistortUVDisplacementMap, CroppingFactor) == 0x00003C, "Member 'OpenCVLensDistortionBlueprintLibrary_CreateUndistortUVDisplacementMap::CroppingFactor' has a wrong offset!");
static_assert(offsetof(OpenCVLensDistortionBlueprintLibrary_CreateUndistortUVDisplacementMap, CameraViewInfo) == 0x000040, "Member 'OpenCVLensDistortionBlueprintLibrary_CreateUndistortUVDisplacementMap::CameraViewInfo' has a wrong offset!");
static_assert(offsetof(OpenCVLensDistortionBlueprintLibrary_CreateUndistortUVDisplacementMap, ReturnValue) == 0x000050, "Member 'OpenCVLensDistortionBlueprintLibrary_CreateUndistortUVDisplacementMap::ReturnValue' has a wrong offset!");

// Function OpenCVLensDistortion.OpenCVLensDistortionBlueprintLibrary.DrawDisplacementMapToRenderTarget
// 0x0018 (0x0018 - 0x0000)
struct OpenCVLensDistortionBlueprintLibrary_DrawDisplacementMapToRenderTarget final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 OutputRenderTarget;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             PreComputedUndistortDisplacementMap;               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OpenCVLensDistortionBlueprintLibrary_DrawDisplacementMapToRenderTarget) == 0x000008, "Wrong alignment on OpenCVLensDistortionBlueprintLibrary_DrawDisplacementMapToRenderTarget");
static_assert(sizeof(OpenCVLensDistortionBlueprintLibrary_DrawDisplacementMapToRenderTarget) == 0x000018, "Wrong size on OpenCVLensDistortionBlueprintLibrary_DrawDisplacementMapToRenderTarget");
static_assert(offsetof(OpenCVLensDistortionBlueprintLibrary_DrawDisplacementMapToRenderTarget, WorldContextObject) == 0x000000, "Member 'OpenCVLensDistortionBlueprintLibrary_DrawDisplacementMapToRenderTarget::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OpenCVLensDistortionBlueprintLibrary_DrawDisplacementMapToRenderTarget, OutputRenderTarget) == 0x000008, "Member 'OpenCVLensDistortionBlueprintLibrary_DrawDisplacementMapToRenderTarget::OutputRenderTarget' has a wrong offset!");
static_assert(offsetof(OpenCVLensDistortionBlueprintLibrary_DrawDisplacementMapToRenderTarget, PreComputedUndistortDisplacementMap) == 0x000010, "Member 'OpenCVLensDistortionBlueprintLibrary_DrawDisplacementMapToRenderTarget::PreComputedUndistortDisplacementMap' has a wrong offset!");

// Function OpenCVLensDistortion.OpenCVLensDistortionBlueprintLibrary.EqualEqual_CompareLensDistortionModels
// 0x006C (0x006C - 0x0000)
struct OpenCVLensDistortionBlueprintLibrary_EqualEqual_CompareLensDistortionModels final
{
public:
	struct FOpenCVLensDistortionParameters        A;                                                 // 0x0000(0x0034)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FOpenCVLensDistortionParameters        B;                                                 // 0x0034(0x0034)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OpenCVLensDistortionBlueprintLibrary_EqualEqual_CompareLensDistortionModels) == 0x000004, "Wrong alignment on OpenCVLensDistortionBlueprintLibrary_EqualEqual_CompareLensDistortionModels");
static_assert(sizeof(OpenCVLensDistortionBlueprintLibrary_EqualEqual_CompareLensDistortionModels) == 0x00006C, "Wrong size on OpenCVLensDistortionBlueprintLibrary_EqualEqual_CompareLensDistortionModels");
static_assert(offsetof(OpenCVLensDistortionBlueprintLibrary_EqualEqual_CompareLensDistortionModels, A) == 0x000000, "Member 'OpenCVLensDistortionBlueprintLibrary_EqualEqual_CompareLensDistortionModels::A' has a wrong offset!");
static_assert(offsetof(OpenCVLensDistortionBlueprintLibrary_EqualEqual_CompareLensDistortionModels, B) == 0x000034, "Member 'OpenCVLensDistortionBlueprintLibrary_EqualEqual_CompareLensDistortionModels::B' has a wrong offset!");
static_assert(offsetof(OpenCVLensDistortionBlueprintLibrary_EqualEqual_CompareLensDistortionModels, ReturnValue) == 0x000068, "Member 'OpenCVLensDistortionBlueprintLibrary_EqualEqual_CompareLensDistortionModels::ReturnValue' has a wrong offset!");

// Function OpenCVLensDistortion.OpenCVLensDistortionBlueprintLibrary.NotEqual_CompareLensDistortionModels
// 0x006C (0x006C - 0x0000)
struct OpenCVLensDistortionBlueprintLibrary_NotEqual_CompareLensDistortionModels final
{
public:
	struct FOpenCVLensDistortionParameters        A;                                                 // 0x0000(0x0034)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FOpenCVLensDistortionParameters        B;                                                 // 0x0034(0x0034)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OpenCVLensDistortionBlueprintLibrary_NotEqual_CompareLensDistortionModels) == 0x000004, "Wrong alignment on OpenCVLensDistortionBlueprintLibrary_NotEqual_CompareLensDistortionModels");
static_assert(sizeof(OpenCVLensDistortionBlueprintLibrary_NotEqual_CompareLensDistortionModels) == 0x00006C, "Wrong size on OpenCVLensDistortionBlueprintLibrary_NotEqual_CompareLensDistortionModels");
static_assert(offsetof(OpenCVLensDistortionBlueprintLibrary_NotEqual_CompareLensDistortionModels, A) == 0x000000, "Member 'OpenCVLensDistortionBlueprintLibrary_NotEqual_CompareLensDistortionModels::A' has a wrong offset!");
static_assert(offsetof(OpenCVLensDistortionBlueprintLibrary_NotEqual_CompareLensDistortionModels, B) == 0x000034, "Member 'OpenCVLensDistortionBlueprintLibrary_NotEqual_CompareLensDistortionModels::B' has a wrong offset!");
static_assert(offsetof(OpenCVLensDistortionBlueprintLibrary_NotEqual_CompareLensDistortionModels, ReturnValue) == 0x000068, "Member 'OpenCVLensDistortionBlueprintLibrary_NotEqual_CompareLensDistortionModels::ReturnValue' has a wrong offset!");

}

