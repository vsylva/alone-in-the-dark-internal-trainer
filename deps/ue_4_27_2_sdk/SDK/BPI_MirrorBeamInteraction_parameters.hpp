#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_MirrorBeamInteraction

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPI_MirrorBeamInteraction.BPI_MirrorBeamInteraction_C.Deactivate Lens
// 0x0008 (0x0008 - 0x0000)
struct BPI_MirrorBeamInteraction_C_Deactivate_Lens final
{
public:
	class AActor*                                 MirrorRef;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MirrorBeamInteraction_C_Deactivate_Lens) == 0x000008, "Wrong alignment on BPI_MirrorBeamInteraction_C_Deactivate_Lens");
static_assert(sizeof(BPI_MirrorBeamInteraction_C_Deactivate_Lens) == 0x000008, "Wrong size on BPI_MirrorBeamInteraction_C_Deactivate_Lens");
static_assert(offsetof(BPI_MirrorBeamInteraction_C_Deactivate_Lens, MirrorRef) == 0x000000, "Member 'BPI_MirrorBeamInteraction_C_Deactivate_Lens::MirrorRef' has a wrong offset!");

// Function BPI_MirrorBeamInteraction.BPI_MirrorBeamInteraction_C.BeamInteraction
// 0x0020 (0x0020 - 0x0000)
struct BPI_MirrorBeamInteraction_C_BeamInteraction final
{
public:
	struct FVector                                ImpactPoint;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 MirrorRef;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_MirrorBeamInteraction_C_BeamInteraction) == 0x000008, "Wrong alignment on BPI_MirrorBeamInteraction_C_BeamInteraction");
static_assert(sizeof(BPI_MirrorBeamInteraction_C_BeamInteraction) == 0x000020, "Wrong size on BPI_MirrorBeamInteraction_C_BeamInteraction");
static_assert(offsetof(BPI_MirrorBeamInteraction_C_BeamInteraction, ImpactPoint) == 0x000000, "Member 'BPI_MirrorBeamInteraction_C_BeamInteraction::ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPI_MirrorBeamInteraction_C_BeamInteraction, HitComponent) == 0x000010, "Member 'BPI_MirrorBeamInteraction_C_BeamInteraction::HitComponent' has a wrong offset!");
static_assert(offsetof(BPI_MirrorBeamInteraction_C_BeamInteraction, MirrorRef) == 0x000018, "Member 'BPI_MirrorBeamInteraction_C_BeamInteraction::MirrorRef' has a wrong offset!");

}

