#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Strider

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function Strider.StriderMath.AngleBetween
// 0x001C (0x001C - 0x0000)
struct StriderMath_AngleBetween final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B;                                                 // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StriderMath_AngleBetween) == 0x000004, "Wrong alignment on StriderMath_AngleBetween");
static_assert(sizeof(StriderMath_AngleBetween) == 0x00001C, "Wrong size on StriderMath_AngleBetween");
static_assert(offsetof(StriderMath_AngleBetween, A) == 0x000000, "Member 'StriderMath_AngleBetween::A' has a wrong offset!");
static_assert(offsetof(StriderMath_AngleBetween, B) == 0x00000C, "Member 'StriderMath_AngleBetween::B' has a wrong offset!");
static_assert(offsetof(StriderMath_AngleBetween, ReturnValue) == 0x000018, "Member 'StriderMath_AngleBetween::ReturnValue' has a wrong offset!");

// Function Strider.StriderMath.CalculateCircleStrafeDirectionDelta
// 0x0010 (0x0010 - 0x0000)
struct StriderMath_CalculateCircleStrafeDirectionDelta final
{
public:
	float                                         LastDirection;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Direction;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StriderMath_CalculateCircleStrafeDirectionDelta) == 0x000004, "Wrong alignment on StriderMath_CalculateCircleStrafeDirectionDelta");
static_assert(sizeof(StriderMath_CalculateCircleStrafeDirectionDelta) == 0x000010, "Wrong size on StriderMath_CalculateCircleStrafeDirectionDelta");
static_assert(offsetof(StriderMath_CalculateCircleStrafeDirectionDelta, LastDirection) == 0x000000, "Member 'StriderMath_CalculateCircleStrafeDirectionDelta::LastDirection' has a wrong offset!");
static_assert(offsetof(StriderMath_CalculateCircleStrafeDirectionDelta, Direction) == 0x000004, "Member 'StriderMath_CalculateCircleStrafeDirectionDelta::Direction' has a wrong offset!");
static_assert(offsetof(StriderMath_CalculateCircleStrafeDirectionDelta, DeltaTime) == 0x000008, "Member 'StriderMath_CalculateCircleStrafeDirectionDelta::DeltaTime' has a wrong offset!");
static_assert(offsetof(StriderMath_CalculateCircleStrafeDirectionDelta, ReturnValue) == 0x00000C, "Member 'StriderMath_CalculateCircleStrafeDirectionDelta::ReturnValue' has a wrong offset!");

// Function Strider.StriderMath.CalculatePlayRate
// 0x0014 (0x0014 - 0x0000)
struct StriderMath_CalculatePlayRate final
{
public:
	float                                         TotalSpeedScale;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlaybackWeight;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPlayRate;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPlayRate;                                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StriderMath_CalculatePlayRate) == 0x000004, "Wrong alignment on StriderMath_CalculatePlayRate");
static_assert(sizeof(StriderMath_CalculatePlayRate) == 0x000014, "Wrong size on StriderMath_CalculatePlayRate");
static_assert(offsetof(StriderMath_CalculatePlayRate, TotalSpeedScale) == 0x000000, "Member 'StriderMath_CalculatePlayRate::TotalSpeedScale' has a wrong offset!");
static_assert(offsetof(StriderMath_CalculatePlayRate, PlaybackWeight) == 0x000004, "Member 'StriderMath_CalculatePlayRate::PlaybackWeight' has a wrong offset!");
static_assert(offsetof(StriderMath_CalculatePlayRate, MinPlayRate) == 0x000008, "Member 'StriderMath_CalculatePlayRate::MinPlayRate' has a wrong offset!");
static_assert(offsetof(StriderMath_CalculatePlayRate, MaxPlayRate) == 0x00000C, "Member 'StriderMath_CalculatePlayRate::MaxPlayRate' has a wrong offset!");
static_assert(offsetof(StriderMath_CalculatePlayRate, ReturnValue) == 0x000010, "Member 'StriderMath_CalculatePlayRate::ReturnValue' has a wrong offset!");

// Function Strider.StriderMath.CalculateStrideScale
// 0x000C (0x000C - 0x0000)
struct StriderMath_CalculateStrideScale final
{
public:
	float                                         TotalSpeedScale;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StriderMath_CalculateStrideScale) == 0x000004, "Wrong alignment on StriderMath_CalculateStrideScale");
static_assert(sizeof(StriderMath_CalculateStrideScale) == 0x00000C, "Wrong size on StriderMath_CalculateStrideScale");
static_assert(offsetof(StriderMath_CalculateStrideScale, TotalSpeedScale) == 0x000000, "Member 'StriderMath_CalculateStrideScale::TotalSpeedScale' has a wrong offset!");
static_assert(offsetof(StriderMath_CalculateStrideScale, PlayRate) == 0x000004, "Member 'StriderMath_CalculateStrideScale::PlayRate' has a wrong offset!");
static_assert(offsetof(StriderMath_CalculateStrideScale, ReturnValue) == 0x000008, "Member 'StriderMath_CalculateStrideScale::ReturnValue' has a wrong offset!");

// Function Strider.StriderMath.GetAngleDelta
// 0x000C (0x000C - 0x0000)
struct StriderMath_GetAngleDelta final
{
public:
	float                                         StartAngle;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndAngle;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StriderMath_GetAngleDelta) == 0x000004, "Wrong alignment on StriderMath_GetAngleDelta");
static_assert(sizeof(StriderMath_GetAngleDelta) == 0x00000C, "Wrong size on StriderMath_GetAngleDelta");
static_assert(offsetof(StriderMath_GetAngleDelta, StartAngle) == 0x000000, "Member 'StriderMath_GetAngleDelta::StartAngle' has a wrong offset!");
static_assert(offsetof(StriderMath_GetAngleDelta, EndAngle) == 0x000004, "Member 'StriderMath_GetAngleDelta::EndAngle' has a wrong offset!");
static_assert(offsetof(StriderMath_GetAngleDelta, ReturnValue) == 0x000008, "Member 'StriderMath_GetAngleDelta::ReturnValue' has a wrong offset!");

// Function Strider.StriderMath.GetNextCardinalDirection
// 0x0014 (0x0014 - 0x0000)
struct StriderMath_GetNextCardinalDirection final
{
public:
	int32                                         CurrentCardinalDirection;                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeDirection;                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepDelta;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkipDelta;                                         // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StriderMath_GetNextCardinalDirection) == 0x000004, "Wrong alignment on StriderMath_GetNextCardinalDirection");
static_assert(sizeof(StriderMath_GetNextCardinalDirection) == 0x000014, "Wrong size on StriderMath_GetNextCardinalDirection");
static_assert(offsetof(StriderMath_GetNextCardinalDirection, CurrentCardinalDirection) == 0x000000, "Member 'StriderMath_GetNextCardinalDirection::CurrentCardinalDirection' has a wrong offset!");
static_assert(offsetof(StriderMath_GetNextCardinalDirection, RelativeDirection) == 0x000004, "Member 'StriderMath_GetNextCardinalDirection::RelativeDirection' has a wrong offset!");
static_assert(offsetof(StriderMath_GetNextCardinalDirection, StepDelta) == 0x000008, "Member 'StriderMath_GetNextCardinalDirection::StepDelta' has a wrong offset!");
static_assert(offsetof(StriderMath_GetNextCardinalDirection, SkipDelta) == 0x00000C, "Member 'StriderMath_GetNextCardinalDirection::SkipDelta' has a wrong offset!");
static_assert(offsetof(StriderMath_GetNextCardinalDirection, ReturnValue) == 0x000010, "Member 'StriderMath_GetNextCardinalDirection::ReturnValue' has a wrong offset!");

// Function Strider.StriderMath.GetRotationRelativeToVelocity
// 0x0010 (0x0010 - 0x0000)
struct StriderMath_GetRotationRelativeToVelocity final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StriderMath_GetRotationRelativeToVelocity) == 0x000008, "Wrong alignment on StriderMath_GetRotationRelativeToVelocity");
static_assert(sizeof(StriderMath_GetRotationRelativeToVelocity) == 0x000010, "Wrong size on StriderMath_GetRotationRelativeToVelocity");
static_assert(offsetof(StriderMath_GetRotationRelativeToVelocity, Actor) == 0x000000, "Member 'StriderMath_GetRotationRelativeToVelocity::Actor' has a wrong offset!");
static_assert(offsetof(StriderMath_GetRotationRelativeToVelocity, ReturnValue) == 0x000008, "Member 'StriderMath_GetRotationRelativeToVelocity::ReturnValue' has a wrong offset!");

// Function Strider.StriderMath.MoveComponentsToward
// 0x001C (0x001C - 0x0000)
struct StriderMath_MoveComponentsToward final
{
public:
	struct FVector                                InStart;                                           // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDelta;                                          // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StriderMath_MoveComponentsToward) == 0x000004, "Wrong alignment on StriderMath_MoveComponentsToward");
static_assert(sizeof(StriderMath_MoveComponentsToward) == 0x00001C, "Wrong size on StriderMath_MoveComponentsToward");
static_assert(offsetof(StriderMath_MoveComponentsToward, InStart) == 0x000000, "Member 'StriderMath_MoveComponentsToward::InStart' has a wrong offset!");
static_assert(offsetof(StriderMath_MoveComponentsToward, End) == 0x00000C, "Member 'StriderMath_MoveComponentsToward::End' has a wrong offset!");
static_assert(offsetof(StriderMath_MoveComponentsToward, MaxDelta) == 0x000018, "Member 'StriderMath_MoveComponentsToward::MaxDelta' has a wrong offset!");

// Function Strider.StriderMath.MoveToward
// 0x0010 (0x0010 - 0x0000)
struct StriderMath_MoveToward final
{
public:
	float                                         Start;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         End;                                               // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDelta;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StriderMath_MoveToward) == 0x000004, "Wrong alignment on StriderMath_MoveToward");
static_assert(sizeof(StriderMath_MoveToward) == 0x000010, "Wrong size on StriderMath_MoveToward");
static_assert(offsetof(StriderMath_MoveToward, Start) == 0x000000, "Member 'StriderMath_MoveToward::Start' has a wrong offset!");
static_assert(offsetof(StriderMath_MoveToward, End) == 0x000004, "Member 'StriderMath_MoveToward::End' has a wrong offset!");
static_assert(offsetof(StriderMath_MoveToward, MaxDelta) == 0x000008, "Member 'StriderMath_MoveToward::MaxDelta' has a wrong offset!");
static_assert(offsetof(StriderMath_MoveToward, ReturnValue) == 0x00000C, "Member 'StriderMath_MoveToward::ReturnValue' has a wrong offset!");

// Function Strider.StriderMath.MoveTowardAngle
// 0x0010 (0x0010 - 0x0000)
struct StriderMath_MoveTowardAngle final
{
public:
	float                                         StartAngle;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndAngle;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDelta;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StriderMath_MoveTowardAngle) == 0x000004, "Wrong alignment on StriderMath_MoveTowardAngle");
static_assert(sizeof(StriderMath_MoveTowardAngle) == 0x000010, "Wrong size on StriderMath_MoveTowardAngle");
static_assert(offsetof(StriderMath_MoveTowardAngle, StartAngle) == 0x000000, "Member 'StriderMath_MoveTowardAngle::StartAngle' has a wrong offset!");
static_assert(offsetof(StriderMath_MoveTowardAngle, EndAngle) == 0x000004, "Member 'StriderMath_MoveTowardAngle::EndAngle' has a wrong offset!");
static_assert(offsetof(StriderMath_MoveTowardAngle, MaxDelta) == 0x000008, "Member 'StriderMath_MoveTowardAngle::MaxDelta' has a wrong offset!");
static_assert(offsetof(StriderMath_MoveTowardAngle, ReturnValue) == 0x00000C, "Member 'StriderMath_MoveTowardAngle::ReturnValue' has a wrong offset!");

// Function Strider.StriderMath.MoveTowardVector
// 0x001C (0x001C - 0x0000)
struct StriderMath_MoveTowardVector final
{
public:
	struct FVector                                InStart;                                           // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDelta;                                          // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StriderMath_MoveTowardVector) == 0x000004, "Wrong alignment on StriderMath_MoveTowardVector");
static_assert(sizeof(StriderMath_MoveTowardVector) == 0x00001C, "Wrong size on StriderMath_MoveTowardVector");
static_assert(offsetof(StriderMath_MoveTowardVector, InStart) == 0x000000, "Member 'StriderMath_MoveTowardVector::InStart' has a wrong offset!");
static_assert(offsetof(StriderMath_MoveTowardVector, End) == 0x00000C, "Member 'StriderMath_MoveTowardVector::End' has a wrong offset!");
static_assert(offsetof(StriderMath_MoveTowardVector, MaxDelta) == 0x000018, "Member 'StriderMath_MoveTowardVector::MaxDelta' has a wrong offset!");

// Function Strider.StriderMath.WrapAngle
// 0x0008 (0x0008 - 0x0000)
struct StriderMath_WrapAngle final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StriderMath_WrapAngle) == 0x000004, "Wrong alignment on StriderMath_WrapAngle");
static_assert(sizeof(StriderMath_WrapAngle) == 0x000008, "Wrong size on StriderMath_WrapAngle");
static_assert(offsetof(StriderMath_WrapAngle, Angle) == 0x000000, "Member 'StriderMath_WrapAngle::Angle' has a wrong offset!");
static_assert(offsetof(StriderMath_WrapAngle, ReturnValue) == 0x000004, "Member 'StriderMath_WrapAngle::ReturnValue' has a wrong offset!");

}

