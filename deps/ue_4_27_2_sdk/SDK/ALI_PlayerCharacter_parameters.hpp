#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALI_PlayerCharacter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ObsidianFox_structs.hpp"


namespace SDK::Params
{

// Function ALI_PlayerCharacter.ALI_PlayerCharacter_C.WalkTwistHandTweaks
// 0x0028 (0x0028 - 0x0000)
struct ALI_PlayerCharacter_C_WalkTwistHandTweaks final
{
public:
	struct FPoseLink                              WalkTwistHandTweaksInputPose;                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	float                                         TwistInput;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JogBlend;                                          // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPoseLink                              WalkTwistHandTweaks_0;                             // 0x0018(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ALI_PlayerCharacter_C_WalkTwistHandTweaks) == 0x000008, "Wrong alignment on ALI_PlayerCharacter_C_WalkTwistHandTweaks");
static_assert(sizeof(ALI_PlayerCharacter_C_WalkTwistHandTweaks) == 0x000028, "Wrong size on ALI_PlayerCharacter_C_WalkTwistHandTweaks");
static_assert(offsetof(ALI_PlayerCharacter_C_WalkTwistHandTweaks, WalkTwistHandTweaksInputPose) == 0x000000, "Member 'ALI_PlayerCharacter_C_WalkTwistHandTweaks::WalkTwistHandTweaksInputPose' has a wrong offset!");
static_assert(offsetof(ALI_PlayerCharacter_C_WalkTwistHandTweaks, TwistInput) == 0x000010, "Member 'ALI_PlayerCharacter_C_WalkTwistHandTweaks::TwistInput' has a wrong offset!");
static_assert(offsetof(ALI_PlayerCharacter_C_WalkTwistHandTweaks, JogBlend) == 0x000014, "Member 'ALI_PlayerCharacter_C_WalkTwistHandTweaks::JogBlend' has a wrong offset!");
static_assert(offsetof(ALI_PlayerCharacter_C_WalkTwistHandTweaks, WalkTwistHandTweaks_0) == 0x000018, "Member 'ALI_PlayerCharacter_C_WalkTwistHandTweaks::WalkTwistHandTweaks_0' has a wrong offset!");

// Function ALI_PlayerCharacter.ALI_PlayerCharacter_C.ArmIKLayer
// 0x00C0 (0x00C0 - 0x0000)
struct ALI_PlayerCharacter_C_ArmIKLayer final
{
public:
	struct FPoseLink                              ArmIKInputPose;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FArmIKEffectorData                     RightArmIKData;                                    // 0x0010(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FArmIKEffectorData                     LeftArmIKData;                                     // 0x0050(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FVector                                RightArmPoleVector;                                // 0x0090(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LeftArmPoleVector;                                 // 0x009C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IKActive;                                          // 0x00A8(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              ArmIKLayer_0;                                      // 0x00B0(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ALI_PlayerCharacter_C_ArmIKLayer) == 0x000008, "Wrong alignment on ALI_PlayerCharacter_C_ArmIKLayer");
static_assert(sizeof(ALI_PlayerCharacter_C_ArmIKLayer) == 0x0000C0, "Wrong size on ALI_PlayerCharacter_C_ArmIKLayer");
static_assert(offsetof(ALI_PlayerCharacter_C_ArmIKLayer, ArmIKInputPose) == 0x000000, "Member 'ALI_PlayerCharacter_C_ArmIKLayer::ArmIKInputPose' has a wrong offset!");
static_assert(offsetof(ALI_PlayerCharacter_C_ArmIKLayer, RightArmIKData) == 0x000010, "Member 'ALI_PlayerCharacter_C_ArmIKLayer::RightArmIKData' has a wrong offset!");
static_assert(offsetof(ALI_PlayerCharacter_C_ArmIKLayer, LeftArmIKData) == 0x000050, "Member 'ALI_PlayerCharacter_C_ArmIKLayer::LeftArmIKData' has a wrong offset!");
static_assert(offsetof(ALI_PlayerCharacter_C_ArmIKLayer, RightArmPoleVector) == 0x000090, "Member 'ALI_PlayerCharacter_C_ArmIKLayer::RightArmPoleVector' has a wrong offset!");
static_assert(offsetof(ALI_PlayerCharacter_C_ArmIKLayer, LeftArmPoleVector) == 0x00009C, "Member 'ALI_PlayerCharacter_C_ArmIKLayer::LeftArmPoleVector' has a wrong offset!");
static_assert(offsetof(ALI_PlayerCharacter_C_ArmIKLayer, IKActive) == 0x0000A8, "Member 'ALI_PlayerCharacter_C_ArmIKLayer::IKActive' has a wrong offset!");
static_assert(offsetof(ALI_PlayerCharacter_C_ArmIKLayer, ArmIKLayer_0) == 0x0000B0, "Member 'ALI_PlayerCharacter_C_ArmIKLayer::ArmIKLayer_0' has a wrong offset!");

// Function ALI_PlayerCharacter.ALI_PlayerCharacter_C.FootIKLayer
// 0x0030 (0x0030 - 0x0000)
struct ALI_PlayerCharacter_C_FootIKLayer final
{
public:
	struct FPoseLink                              FootIKInputPose;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	class UAnimComponentFootIK*                   FootIKData;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FootIKHipsOffset;                                  // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              FootIKLayer_0;                                     // 0x0020(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ALI_PlayerCharacter_C_FootIKLayer) == 0x000008, "Wrong alignment on ALI_PlayerCharacter_C_FootIKLayer");
static_assert(sizeof(ALI_PlayerCharacter_C_FootIKLayer) == 0x000030, "Wrong size on ALI_PlayerCharacter_C_FootIKLayer");
static_assert(offsetof(ALI_PlayerCharacter_C_FootIKLayer, FootIKInputPose) == 0x000000, "Member 'ALI_PlayerCharacter_C_FootIKLayer::FootIKInputPose' has a wrong offset!");
static_assert(offsetof(ALI_PlayerCharacter_C_FootIKLayer, FootIKData) == 0x000010, "Member 'ALI_PlayerCharacter_C_FootIKLayer::FootIKData' has a wrong offset!");
static_assert(offsetof(ALI_PlayerCharacter_C_FootIKLayer, FootIKHipsOffset) == 0x000018, "Member 'ALI_PlayerCharacter_C_FootIKLayer::FootIKHipsOffset' has a wrong offset!");
static_assert(offsetof(ALI_PlayerCharacter_C_FootIKLayer, FootIKLayer_0) == 0x000020, "Member 'ALI_PlayerCharacter_C_FootIKLayer::FootIKLayer_0' has a wrong offset!");

}

