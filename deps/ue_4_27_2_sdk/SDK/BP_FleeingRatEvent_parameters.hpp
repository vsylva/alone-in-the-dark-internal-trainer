#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FleeingRatEvent

#include "Basic.hpp"

#include "FMODStudio_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_FleeingRatEvent.BP_FleeingRatEvent_C.AlignRotationWithMoveDirection
// 0x00A4 (0x00A4 - 0x0000)
struct BP_FleeingRatEvent_C_AlignRotationWithMoveDirection final
{
public:
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x001C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_FleeingRatEvent_C_AlignRotationWithMoveDirection) == 0x000004, "Wrong alignment on BP_FleeingRatEvent_C_AlignRotationWithMoveDirection");
static_assert(sizeof(BP_FleeingRatEvent_C_AlignRotationWithMoveDirection) == 0x0000A4, "Wrong size on BP_FleeingRatEvent_C_AlignRotationWithMoveDirection");
static_assert(offsetof(BP_FleeingRatEvent_C_AlignRotationWithMoveDirection, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000000, "Member 'BP_FleeingRatEvent_C_AlignRotationWithMoveDirection::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_AlignRotationWithMoveDirection, CallFunc_MakeRotFromX_ReturnValue) == 0x000004, "Member 'BP_FleeingRatEvent_C_AlignRotationWithMoveDirection::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_AlignRotationWithMoveDirection, CallFunc_RInterpTo_ReturnValue) == 0x000010, "Member 'BP_FleeingRatEvent_C_AlignRotationWithMoveDirection::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_AlignRotationWithMoveDirection, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x00001C, "Member 'BP_FleeingRatEvent_C_AlignRotationWithMoveDirection::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");

// Function BP_FleeingRatEvent.BP_FleeingRatEvent_C.Align Rotation with Surface and Move Dir
// 0x01F0 (0x01F0 - 0x0000)
struct BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir final
{
public:
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_CheckForGround_OutHit;                    // 0x0024(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B2[0x2];                                       // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0100(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue_1;         // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromXY_ReturnValue;                // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0164(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir) == 0x000008, "Wrong alignment on BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir");
static_assert(sizeof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir) == 0x0001F0, "Wrong size on BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_Normal_ReturnValue) == 0x000000, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00000C, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000018, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_CheckForGround_OutHit) == 0x000024, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_CheckForGround_OutHit' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x0000AC, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_BreakHitResult_bBlockingHit) == 0x0000B0, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000B1, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_BreakHitResult_Time) == 0x0000B4, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_BreakHitResult_Distance) == 0x0000B8, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_BreakHitResult_Location) == 0x0000BC, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_BreakHitResult_ImpactPoint) == 0x0000C8, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_BreakHitResult_Normal) == 0x0000D4, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_BreakHitResult_ImpactNormal) == 0x0000E0, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_BreakHitResult_PhysMat) == 0x0000F0, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_BreakHitResult_HitActor) == 0x0000F8, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_BreakHitResult_HitComponent) == 0x000100, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_BreakHitResult_HitBoneName) == 0x000108, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_BreakHitResult_HitItem) == 0x000110, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_BreakHitResult_ElementIndex) == 0x000114, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_BreakHitResult_FaceIndex) == 0x000118, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_BreakHitResult_TraceStart) == 0x00011C, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_BreakHitResult_TraceEnd) == 0x000128, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_Cross_VectorVector_ReturnValue) == 0x000134, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_Cross_VectorVector_ReturnValue_1) == 0x000140, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_Cross_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_MakeRotFromXY_ReturnValue) == 0x00014C, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_MakeRotFromXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_RInterpTo_ReturnValue) == 0x000158, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000164, "Member 'BP_FleeingRatEvent_C_Align_Rotation_with_Surface_and_Move_Dir::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");

// Function BP_FleeingRatEvent.BP_FleeingRatEvent_C.DebugDrawLineWithDot
// 0x004C (0x004C - 0x0000)
struct BP_FleeingRatEvent_C_DebugDrawLineWithDot final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DotSize;                                           // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LineLength;                                        // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Thickness;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0024(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FleeingRatEvent_C_DebugDrawLineWithDot) == 0x000004, "Wrong alignment on BP_FleeingRatEvent_C_DebugDrawLineWithDot");
static_assert(sizeof(BP_FleeingRatEvent_C_DebugDrawLineWithDot) == 0x00004C, "Wrong size on BP_FleeingRatEvent_C_DebugDrawLineWithDot");
static_assert(offsetof(BP_FleeingRatEvent_C_DebugDrawLineWithDot, Position) == 0x000000, "Member 'BP_FleeingRatEvent_C_DebugDrawLineWithDot::Position' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_DebugDrawLineWithDot, Direction) == 0x00000C, "Member 'BP_FleeingRatEvent_C_DebugDrawLineWithDot::Direction' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_DebugDrawLineWithDot, DotSize) == 0x000018, "Member 'BP_FleeingRatEvent_C_DebugDrawLineWithDot::DotSize' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_DebugDrawLineWithDot, LineLength) == 0x00001C, "Member 'BP_FleeingRatEvent_C_DebugDrawLineWithDot::LineLength' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_DebugDrawLineWithDot, Thickness) == 0x000020, "Member 'BP_FleeingRatEvent_C_DebugDrawLineWithDot::Thickness' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_DebugDrawLineWithDot, Color) == 0x000024, "Member 'BP_FleeingRatEvent_C_DebugDrawLineWithDot::Color' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_DebugDrawLineWithDot, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000034, "Member 'BP_FleeingRatEvent_C_DebugDrawLineWithDot::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_DebugDrawLineWithDot, CallFunc_Add_VectorVector_ReturnValue) == 0x000040, "Member 'BP_FleeingRatEvent_C_DebugDrawLineWithDot::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_FleeingRatEvent.BP_FleeingRatEvent_C.DebugTurnSlowdown
// 0x0034 (0x0034 - 0x0000)
struct BP_FleeingRatEvent_C_DebugTurnSlowdown final
{
public:
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue; // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_1; // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDirectionAtDistanceAlongSpline_ReturnValue; // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDirectionAtDistanceAlongSpline_ReturnValue_1; // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FleeingRatEvent_C_DebugTurnSlowdown) == 0x000004, "Wrong alignment on BP_FleeingRatEvent_C_DebugTurnSlowdown");
static_assert(sizeof(BP_FleeingRatEvent_C_DebugTurnSlowdown) == 0x000034, "Wrong size on BP_FleeingRatEvent_C_DebugTurnSlowdown");
static_assert(offsetof(BP_FleeingRatEvent_C_DebugTurnSlowdown, CallFunc_Add_FloatFloat_ReturnValue) == 0x000000, "Member 'BP_FleeingRatEvent_C_DebugTurnSlowdown::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_DebugTurnSlowdown, CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue) == 0x000004, "Member 'BP_FleeingRatEvent_C_DebugTurnSlowdown::CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_DebugTurnSlowdown, CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_1) == 0x000010, "Member 'BP_FleeingRatEvent_C_DebugTurnSlowdown::CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_DebugTurnSlowdown, CallFunc_GetDirectionAtDistanceAlongSpline_ReturnValue) == 0x00001C, "Member 'BP_FleeingRatEvent_C_DebugTurnSlowdown::CallFunc_GetDirectionAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_DebugTurnSlowdown, CallFunc_GetDirectionAtDistanceAlongSpline_ReturnValue_1) == 0x000028, "Member 'BP_FleeingRatEvent_C_DebugTurnSlowdown::CallFunc_GetDirectionAtDistanceAlongSpline_ReturnValue_1' has a wrong offset!");

// Function BP_FleeingRatEvent.BP_FleeingRatEvent_C.DebugRatTransform
// 0x0070 (0x0070 - 0x0000)
struct BP_FleeingRatEvent_C_DebugRatTransform final
{
public:
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0000(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue;       // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FleeingRatEvent_C_DebugRatTransform) == 0x000010, "Wrong alignment on BP_FleeingRatEvent_C_DebugRatTransform");
static_assert(sizeof(BP_FleeingRatEvent_C_DebugRatTransform) == 0x000070, "Wrong size on BP_FleeingRatEvent_C_DebugRatTransform");
static_assert(offsetof(BP_FleeingRatEvent_C_DebugRatTransform, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000000, "Member 'BP_FleeingRatEvent_C_DebugRatTransform::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_DebugRatTransform, CallFunc_BreakTransform_Location) == 0x000030, "Member 'BP_FleeingRatEvent_C_DebugRatTransform::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_DebugRatTransform, CallFunc_BreakTransform_Rotation) == 0x00003C, "Member 'BP_FleeingRatEvent_C_DebugRatTransform::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_DebugRatTransform, CallFunc_BreakTransform_Scale) == 0x000048, "Member 'BP_FleeingRatEvent_C_DebugRatTransform::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_DebugRatTransform, CallFunc_GetForwardVector_ReturnValue) == 0x000054, "Member 'BP_FleeingRatEvent_C_DebugRatTransform::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_DebugRatTransform, CallFunc_LessLess_VectorRotator_ReturnValue) == 0x000060, "Member 'BP_FleeingRatEvent_C_DebugRatTransform::CallFunc_LessLess_VectorRotator_ReturnValue' has a wrong offset!");

// Function BP_FleeingRatEvent.BP_FleeingRatEvent_C.UpdateSplineProgress
// 0x0048 (0x0048 - 0x0000)
struct BP_FleeingRatEvent_C_UpdateSplineProgress final
{
public:
	float                                         CallFunc_GetMaxSplineDistance_ReturnValue;         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FleeingRatEvent_C_UpdateSplineProgress) == 0x000004, "Wrong alignment on BP_FleeingRatEvent_C_UpdateSplineProgress");
static_assert(sizeof(BP_FleeingRatEvent_C_UpdateSplineProgress) == 0x000048, "Wrong size on BP_FleeingRatEvent_C_UpdateSplineProgress");
static_assert(offsetof(BP_FleeingRatEvent_C_UpdateSplineProgress, CallFunc_GetMaxSplineDistance_ReturnValue) == 0x000000, "Member 'BP_FleeingRatEvent_C_UpdateSplineProgress::CallFunc_GetMaxSplineDistance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_UpdateSplineProgress, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000004, "Member 'BP_FleeingRatEvent_C_UpdateSplineProgress::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_UpdateSplineProgress, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000008, "Member 'BP_FleeingRatEvent_C_UpdateSplineProgress::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_UpdateSplineProgress, CallFunc_Normal_ReturnValue) == 0x000014, "Member 'BP_FleeingRatEvent_C_UpdateSplineProgress::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_UpdateSplineProgress, CallFunc_VSize_ReturnValue) == 0x000020, "Member 'BP_FleeingRatEvent_C_UpdateSplineProgress::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_UpdateSplineProgress, CallFunc_BreakVector_X) == 0x000024, "Member 'BP_FleeingRatEvent_C_UpdateSplineProgress::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_UpdateSplineProgress, CallFunc_BreakVector_Y) == 0x000028, "Member 'BP_FleeingRatEvent_C_UpdateSplineProgress::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_UpdateSplineProgress, CallFunc_BreakVector_Z) == 0x00002C, "Member 'BP_FleeingRatEvent_C_UpdateSplineProgress::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_UpdateSplineProgress, CallFunc_Abs_ReturnValue) == 0x000030, "Member 'BP_FleeingRatEvent_C_UpdateSplineProgress::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_UpdateSplineProgress, CallFunc_Abs_ReturnValue_1) == 0x000034, "Member 'BP_FleeingRatEvent_C_UpdateSplineProgress::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_UpdateSplineProgress, CallFunc_Add_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_FleeingRatEvent_C_UpdateSplineProgress::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_UpdateSplineProgress, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_FleeingRatEvent_C_UpdateSplineProgress::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_UpdateSplineProgress, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000040, "Member 'BP_FleeingRatEvent_C_UpdateSplineProgress::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_UpdateSplineProgress, CallFunc_FClamp_ReturnValue) == 0x000044, "Member 'BP_FleeingRatEvent_C_UpdateSplineProgress::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function BP_FleeingRatEvent.BP_FleeingRatEvent_C.Predict Base Move Speed
// 0x002C (0x002C - 0x0000)
struct BP_FleeingRatEvent_C_Predict_Base_Move_Speed final
{
public:
	float                                         Acceleration_0;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FleeingRatEvent_C_Predict_Base_Move_Speed) == 0x000004, "Wrong alignment on BP_FleeingRatEvent_C_Predict_Base_Move_Speed");
static_assert(sizeof(BP_FleeingRatEvent_C_Predict_Base_Move_Speed) == 0x00002C, "Wrong size on BP_FleeingRatEvent_C_Predict_Base_Move_Speed");
static_assert(offsetof(BP_FleeingRatEvent_C_Predict_Base_Move_Speed, Acceleration_0) == 0x000000, "Member 'BP_FleeingRatEvent_C_Predict_Base_Move_Speed::Acceleration_0' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Predict_Base_Move_Speed, Velocity) == 0x000004, "Member 'BP_FleeingRatEvent_C_Predict_Base_Move_Speed::Velocity' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Predict_Base_Move_Speed, ReturnValue) == 0x000010, "Member 'BP_FleeingRatEvent_C_Predict_Base_Move_Speed::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Predict_Base_Move_Speed, CallFunc_VSize_ReturnValue) == 0x000014, "Member 'BP_FleeingRatEvent_C_Predict_Base_Move_Speed::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Predict_Base_Move_Speed, CallFunc_VSize_ReturnValue_1) == 0x000018, "Member 'BP_FleeingRatEvent_C_Predict_Base_Move_Speed::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Predict_Base_Move_Speed, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_FleeingRatEvent_C_Predict_Base_Move_Speed::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Predict_Base_Move_Speed, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_FleeingRatEvent_C_Predict_Base_Move_Speed::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Predict_Base_Move_Speed, CallFunc_Add_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_FleeingRatEvent_C_Predict_Base_Move_Speed::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_Predict_Base_Move_Speed, CallFunc_FClamp_ReturnValue) == 0x000028, "Member 'BP_FleeingRatEvent_C_Predict_Base_Move_Speed::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function BP_FleeingRatEvent.BP_FleeingRatEvent_C.ApplyMovement
// 0x00DC (0x00DC - 0x0000)
struct BP_FleeingRatEvent_C_ApplyMovement final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue; // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0054(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_FleeingRatEvent_C_ApplyMovement) == 0x000004, "Wrong alignment on BP_FleeingRatEvent_C_ApplyMovement");
static_assert(sizeof(BP_FleeingRatEvent_C_ApplyMovement) == 0x0000DC, "Wrong size on BP_FleeingRatEvent_C_ApplyMovement");
static_assert(offsetof(BP_FleeingRatEvent_C_ApplyMovement, Temp_bool_Variable) == 0x000000, "Member 'BP_FleeingRatEvent_C_ApplyMovement::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ApplyMovement, CallFunc_BreakVector_X) == 0x000004, "Member 'BP_FleeingRatEvent_C_ApplyMovement::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ApplyMovement, CallFunc_BreakVector_Y) == 0x000008, "Member 'BP_FleeingRatEvent_C_ApplyMovement::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ApplyMovement, CallFunc_BreakVector_Z) == 0x00000C, "Member 'BP_FleeingRatEvent_C_ApplyMovement::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ApplyMovement, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000010, "Member 'BP_FleeingRatEvent_C_ApplyMovement::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ApplyMovement, CallFunc_Add_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_FleeingRatEvent_C_ApplyMovement::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ApplyMovement, CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue) == 0x000018, "Member 'BP_FleeingRatEvent_C_ApplyMovement::CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ApplyMovement, CallFunc_BreakVector_X_1) == 0x000024, "Member 'BP_FleeingRatEvent_C_ApplyMovement::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ApplyMovement, CallFunc_BreakVector_Y_1) == 0x000028, "Member 'BP_FleeingRatEvent_C_ApplyMovement::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ApplyMovement, CallFunc_BreakVector_Z_1) == 0x00002C, "Member 'BP_FleeingRatEvent_C_ApplyMovement::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ApplyMovement, CallFunc_BreakVector_X_2) == 0x000030, "Member 'BP_FleeingRatEvent_C_ApplyMovement::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ApplyMovement, CallFunc_BreakVector_Y_2) == 0x000034, "Member 'BP_FleeingRatEvent_C_ApplyMovement::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ApplyMovement, CallFunc_BreakVector_Z_2) == 0x000038, "Member 'BP_FleeingRatEvent_C_ApplyMovement::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ApplyMovement, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_FleeingRatEvent_C_ApplyMovement::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ApplyMovement, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000040, "Member 'BP_FleeingRatEvent_C_ApplyMovement::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ApplyMovement, K2Node_Select_Default) == 0x000044, "Member 'BP_FleeingRatEvent_C_ApplyMovement::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ApplyMovement, CallFunc_MakeVector_ReturnValue) == 0x000048, "Member 'BP_FleeingRatEvent_C_ApplyMovement::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ApplyMovement, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000054, "Member 'BP_FleeingRatEvent_C_ApplyMovement::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");

// Function BP_FleeingRatEvent.BP_FleeingRatEvent_C.SetVelocity
// 0x0040 (0x0040 - 0x0000)
struct BP_FleeingRatEvent_C_SetVelocity final
{
public:
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDirectionAtDistanceAlongSpline_ReturnValue; // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FleeingRatEvent_C_SetVelocity) == 0x000004, "Wrong alignment on BP_FleeingRatEvent_C_SetVelocity");
static_assert(sizeof(BP_FleeingRatEvent_C_SetVelocity) == 0x000040, "Wrong size on BP_FleeingRatEvent_C_SetVelocity");
static_assert(offsetof(BP_FleeingRatEvent_C_SetVelocity, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000000, "Member 'BP_FleeingRatEvent_C_SetVelocity::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_SetVelocity, CallFunc_GetDirectionAtDistanceAlongSpline_ReturnValue) == 0x000004, "Member 'BP_FleeingRatEvent_C_SetVelocity::CallFunc_GetDirectionAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_SetVelocity, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_FleeingRatEvent_C_SetVelocity::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_SetVelocity, CallFunc_BreakVector_X) == 0x000014, "Member 'BP_FleeingRatEvent_C_SetVelocity::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_SetVelocity, CallFunc_BreakVector_Y) == 0x000018, "Member 'BP_FleeingRatEvent_C_SetVelocity::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_SetVelocity, CallFunc_BreakVector_Z) == 0x00001C, "Member 'BP_FleeingRatEvent_C_SetVelocity::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_SetVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000020, "Member 'BP_FleeingRatEvent_C_SetVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_SetVelocity, CallFunc_Add_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_FleeingRatEvent_C_SetVelocity::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_SetVelocity, CallFunc_MakeVector_ReturnValue) == 0x000028, "Member 'BP_FleeingRatEvent_C_SetVelocity::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_SetVelocity, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000034, "Member 'BP_FleeingRatEvent_C_SetVelocity::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");

// Function BP_FleeingRatEvent.BP_FleeingRatEvent_C.CheckWantedMoveLocation
// 0x0140 (0x0140 - 0x0000)
struct BP_FleeingRatEvent_C_CheckWantedMoveLocation final
{
public:
	struct FVector                                WantedMoveLocation;                                // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_CheckForGround_OutHit;                    // 0x000C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FleeingRatEvent_C_CheckWantedMoveLocation) == 0x000008, "Wrong alignment on BP_FleeingRatEvent_C_CheckWantedMoveLocation");
static_assert(sizeof(BP_FleeingRatEvent_C_CheckWantedMoveLocation) == 0x000140, "Wrong size on BP_FleeingRatEvent_C_CheckWantedMoveLocation");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, WantedMoveLocation) == 0x000000, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::WantedMoveLocation' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_CheckForGround_OutHit) == 0x00000C, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_CheckForGround_OutHit' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000094, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_BreakHitResult_bBlockingHit) == 0x0000A0, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000A1, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_BreakHitResult_Time) == 0x0000A4, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_BreakHitResult_Distance) == 0x0000A8, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_BreakHitResult_Location) == 0x0000AC, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_BreakHitResult_ImpactPoint) == 0x0000B8, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_BreakHitResult_Normal) == 0x0000C4, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_BreakHitResult_ImpactNormal) == 0x0000D0, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_BreakHitResult_PhysMat) == 0x0000E0, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_BreakHitResult_HitActor) == 0x0000E8, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_BreakHitResult_HitComponent) == 0x0000F0, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_BreakHitResult_HitBoneName) == 0x0000F8, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_BreakHitResult_HitItem) == 0x000100, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_BreakHitResult_ElementIndex) == 0x000104, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_BreakHitResult_FaceIndex) == 0x000108, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_BreakHitResult_TraceStart) == 0x00010C, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_BreakHitResult_TraceEnd) == 0x000118, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_Not_PreBool_ReturnValue) == 0x000124, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000128, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_BreakVector_X) == 0x000134, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_BreakVector_Y) == 0x000138, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckWantedMoveLocation, CallFunc_BreakVector_Z) == 0x00013C, "Member 'BP_FleeingRatEvent_C_CheckWantedMoveLocation::CallFunc_BreakVector_Z' has a wrong offset!");

// Function BP_FleeingRatEvent.BP_FleeingRatEvent_C.PredictMovement
// 0x0048 (0x0048 - 0x0000)
struct BP_FleeingRatEvent_C_PredictMovement final
{
public:
	struct FVector                                PredictMoveLocation;                               // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Predict_Base_Move_Speed_ReturnValue;      // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FleeingRatEvent_C_PredictMovement) == 0x000004, "Wrong alignment on BP_FleeingRatEvent_C_PredictMovement");
static_assert(sizeof(BP_FleeingRatEvent_C_PredictMovement) == 0x000048, "Wrong size on BP_FleeingRatEvent_C_PredictMovement");
static_assert(offsetof(BP_FleeingRatEvent_C_PredictMovement, PredictMoveLocation) == 0x000000, "Member 'BP_FleeingRatEvent_C_PredictMovement::PredictMoveLocation' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_PredictMovement, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x00000C, "Member 'BP_FleeingRatEvent_C_PredictMovement::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_PredictMovement, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000010, "Member 'BP_FleeingRatEvent_C_PredictMovement::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_PredictMovement, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_FleeingRatEvent_C_PredictMovement::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_PredictMovement, CallFunc_GetForwardVector_ReturnValue) == 0x000020, "Member 'BP_FleeingRatEvent_C_PredictMovement::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_PredictMovement, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00002C, "Member 'BP_FleeingRatEvent_C_PredictMovement::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_PredictMovement, CallFunc_Add_VectorVector_ReturnValue) == 0x000038, "Member 'BP_FleeingRatEvent_C_PredictMovement::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_PredictMovement, CallFunc_Predict_Base_Move_Speed_ReturnValue) == 0x000044, "Member 'BP_FleeingRatEvent_C_PredictMovement::CallFunc_Predict_Base_Move_Speed_ReturnValue' has a wrong offset!");

// Function BP_FleeingRatEvent.BP_FleeingRatEvent_C.CheckForGround
// 0x0160 (0x0160 - 0x0000)
struct BP_FleeingRatEvent_C_CheckForGround final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             OutHit;                                            // 0x000C(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x00A0(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x00D4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_FleeingRatEvent_C_CheckForGround) == 0x000008, "Wrong alignment on BP_FleeingRatEvent_C_CheckForGround");
static_assert(sizeof(BP_FleeingRatEvent_C_CheckForGround) == 0x000160, "Wrong size on BP_FleeingRatEvent_C_CheckForGround");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckForGround, Location) == 0x000000, "Member 'BP_FleeingRatEvent_C_CheckForGround::Location' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckForGround, OutHit) == 0x00000C, "Member 'BP_FleeingRatEvent_C_CheckForGround::OutHit' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckForGround, CallFunc_MakeVector_ReturnValue) == 0x000094, "Member 'BP_FleeingRatEvent_C_CheckForGround::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckForGround, Temp_object_Variable) == 0x0000A0, "Member 'BP_FleeingRatEvent_C_CheckForGround::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckForGround, CallFunc_Add_VectorVector_ReturnValue) == 0x0000B0, "Member 'BP_FleeingRatEvent_C_CheckForGround::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckForGround, CallFunc_MakeVector_ReturnValue_1) == 0x0000BC, "Member 'BP_FleeingRatEvent_C_CheckForGround::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckForGround, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000C8, "Member 'BP_FleeingRatEvent_C_CheckForGround::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckForGround, CallFunc_LineTraceSingle_OutHit) == 0x0000D4, "Member 'BP_FleeingRatEvent_C_CheckForGround::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_CheckForGround, CallFunc_LineTraceSingle_ReturnValue) == 0x00015C, "Member 'BP_FleeingRatEvent_C_CheckForGround::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");

// Function BP_FleeingRatEvent.BP_FleeingRatEvent_C.GetRatVelocity
// 0x000C (0x000C - 0x0000)
struct BP_FleeingRatEvent_C_GetRatVelocity final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FleeingRatEvent_C_GetRatVelocity) == 0x000004, "Wrong alignment on BP_FleeingRatEvent_C_GetRatVelocity");
static_assert(sizeof(BP_FleeingRatEvent_C_GetRatVelocity) == 0x00000C, "Wrong size on BP_FleeingRatEvent_C_GetRatVelocity");
static_assert(offsetof(BP_FleeingRatEvent_C_GetRatVelocity, Velocity) == 0x000000, "Member 'BP_FleeingRatEvent_C_GetRatVelocity::Velocity' has a wrong offset!");

// Function BP_FleeingRatEvent.BP_FleeingRatEvent_C.UserConstructionScript
// 0x00AC (0x00AC - 0x0000)
struct BP_FleeingRatEvent_C_UserConstructionScript final
{
public:
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDirectionAtDistanceAlongSpline_ReturnValue; // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0024(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_FleeingRatEvent_C_UserConstructionScript) == 0x000004, "Wrong alignment on BP_FleeingRatEvent_C_UserConstructionScript");
static_assert(sizeof(BP_FleeingRatEvent_C_UserConstructionScript) == 0x0000AC, "Wrong size on BP_FleeingRatEvent_C_UserConstructionScript");
static_assert(offsetof(BP_FleeingRatEvent_C_UserConstructionScript, CallFunc_Conv_FloatToVector_ReturnValue) == 0x000000, "Member 'BP_FleeingRatEvent_C_UserConstructionScript::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_UserConstructionScript, CallFunc_GetDirectionAtDistanceAlongSpline_ReturnValue) == 0x00000C, "Member 'BP_FleeingRatEvent_C_UserConstructionScript::CallFunc_GetDirectionAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_UserConstructionScript, CallFunc_MakeRotFromX_ReturnValue) == 0x000018, "Member 'BP_FleeingRatEvent_C_UserConstructionScript::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_UserConstructionScript, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000024, "Member 'BP_FleeingRatEvent_C_UserConstructionScript::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");

// Function BP_FleeingRatEvent.BP_FleeingRatEvent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_FleeingRatEvent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FleeingRatEvent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_FleeingRatEvent_C_ReceiveTick");
static_assert(sizeof(BP_FleeingRatEvent_C_ReceiveTick) == 0x000004, "Wrong size on BP_FleeingRatEvent_C_ReceiveTick");
static_assert(offsetof(BP_FleeingRatEvent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_FleeingRatEvent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_FleeingRatEvent.BP_FleeingRatEvent_C.BndEvt__BP_FleeingRatEvent_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct BP_FleeingRatEvent_C_BndEvt__BP_FleeingRatEvent_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_FleeingRatEvent_C_BndEvt__BP_FleeingRatEvent_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_FleeingRatEvent_C_BndEvt__BP_FleeingRatEvent_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_FleeingRatEvent_C_BndEvt__BP_FleeingRatEvent_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on BP_FleeingRatEvent_C_BndEvt__BP_FleeingRatEvent_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_FleeingRatEvent_C_BndEvt__BP_FleeingRatEvent_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_FleeingRatEvent_C_BndEvt__BP_FleeingRatEvent_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_BndEvt__BP_FleeingRatEvent_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_FleeingRatEvent_C_BndEvt__BP_FleeingRatEvent_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_BndEvt__BP_FleeingRatEvent_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_FleeingRatEvent_C_BndEvt__BP_FleeingRatEvent_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_BndEvt__BP_FleeingRatEvent_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_FleeingRatEvent_C_BndEvt__BP_FleeingRatEvent_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_BndEvt__BP_FleeingRatEvent_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_FleeingRatEvent_C_BndEvt__BP_FleeingRatEvent_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_BndEvt__BP_FleeingRatEvent_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_FleeingRatEvent_C_BndEvt__BP_FleeingRatEvent_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_FleeingRatEvent.BP_FleeingRatEvent_C.GetMaxSplineDistance
// 0x0014 (0x0014 - 0x0000)
struct BP_FleeingRatEvent_C_GetMaxSplineDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FleeingRatEvent_C_GetMaxSplineDistance) == 0x000004, "Wrong alignment on BP_FleeingRatEvent_C_GetMaxSplineDistance");
static_assert(sizeof(BP_FleeingRatEvent_C_GetMaxSplineDistance) == 0x000014, "Wrong size on BP_FleeingRatEvent_C_GetMaxSplineDistance");
static_assert(offsetof(BP_FleeingRatEvent_C_GetMaxSplineDistance, ReturnValue) == 0x000000, "Member 'BP_FleeingRatEvent_C_GetMaxSplineDistance::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_GetMaxSplineDistance, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x000004, "Member 'BP_FleeingRatEvent_C_GetMaxSplineDistance::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_GetMaxSplineDistance, CallFunc_Subtract_IntInt_ReturnValue) == 0x000008, "Member 'BP_FleeingRatEvent_C_GetMaxSplineDistance::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_GetMaxSplineDistance, CallFunc_Max_ReturnValue) == 0x00000C, "Member 'BP_FleeingRatEvent_C_GetMaxSplineDistance::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_GetMaxSplineDistance, CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue) == 0x000010, "Member 'BP_FleeingRatEvent_C_GetMaxSplineDistance::CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue' has a wrong offset!");

// Function BP_FleeingRatEvent.BP_FleeingRatEvent_C.WeaponHit
// 0x00C0 (0x00C0 - 0x0000)
struct BP_FleeingRatEvent_C_WeaponHit final
{
public:
	class AActor*                                 Weapon;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EventTag;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     Payload;                                           // 0x0010(0x00B0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_FleeingRatEvent_C_WeaponHit) == 0x000008, "Wrong alignment on BP_FleeingRatEvent_C_WeaponHit");
static_assert(sizeof(BP_FleeingRatEvent_C_WeaponHit) == 0x0000C0, "Wrong size on BP_FleeingRatEvent_C_WeaponHit");
static_assert(offsetof(BP_FleeingRatEvent_C_WeaponHit, Weapon) == 0x000000, "Member 'BP_FleeingRatEvent_C_WeaponHit::Weapon' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_WeaponHit, EventTag) == 0x000008, "Member 'BP_FleeingRatEvent_C_WeaponHit::EventTag' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_WeaponHit, Payload) == 0x000010, "Member 'BP_FleeingRatEvent_C_WeaponHit::Payload' has a wrong offset!");

// Function BP_FleeingRatEvent.BP_FleeingRatEvent_C.ExecuteUbergraph_BP_FleeingRatEvent
// 0x0240 (0x0240 - 0x0000)
struct BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxSplineDistance_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0030(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_PredictMovement_PredictMoveLocation;      // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Weapon;                               // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_EventTag;                             // 0x00E0(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayEventData                     K2Node_Event_Payload;                              // 0x00E8(0x00B0)()
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x01A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RandomUnitVector_ReturnValue;             // 0x01B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x01BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x01C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x01D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_Conv_VectorToTransform_ReturnValue;       // 0x01E0(0x0030)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotFromXY_ReturnValue;                // 0x0210(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21C[0x4];                                      // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFMODEventInstance                     CallFunc_PlayEventAtLocation_ReturnValue;          // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UDecalComponent*                        CallFunc_SpawnDecalAtLocation_ReturnValue;         // 0x0228(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        CallFunc_SpawnDecalAtLocation_ReturnValue_1;       // 0x0230(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent) == 0x000010, "Wrong alignment on BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent");
static_assert(sizeof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent) == 0x000240, "Wrong size on BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, EntryPoint) == 0x000000, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, CallFunc_GetMaxSplineDistance_ReturnValue) == 0x000004, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::CallFunc_GetMaxSplineDistance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000010, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, K2Node_ComponentBoundEvent_OtherActor) == 0x000018, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, K2Node_ComponentBoundEvent_OtherComp) == 0x000020, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000028, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, K2Node_ComponentBoundEvent_bFromSweep) == 0x00002C, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, K2Node_ComponentBoundEvent_SweepResult) == 0x000030, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, K2Node_Event_DeltaSeconds) == 0x0000B8, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, CallFunc_IsValid_ReturnValue) == 0x0000BC, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, CallFunc_GetPlayerPawn_ReturnValue) == 0x0000C0, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000C8, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, CallFunc_PredictMovement_PredictMoveLocation) == 0x0000CC, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::CallFunc_PredictMovement_PredictMoveLocation' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, K2Node_Event_Weapon) == 0x0000D8, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::K2Node_Event_Weapon' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, K2Node_Event_EventTag) == 0x0000E0, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::K2Node_Event_EventTag' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, K2Node_Event_Payload) == 0x0000E8, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::K2Node_Event_Payload' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000198, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, CallFunc_GetUpVector_ReturnValue) == 0x0001A4, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, CallFunc_RandomUnitVector_ReturnValue) == 0x0001B0, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::CallFunc_RandomUnitVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0001BC, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0001C8, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, CallFunc_Cross_VectorVector_ReturnValue) == 0x0001D4, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, CallFunc_Conv_VectorToTransform_ReturnValue) == 0x0001E0, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::CallFunc_Conv_VectorToTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, CallFunc_MakeRotFromXY_ReturnValue) == 0x000210, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::CallFunc_MakeRotFromXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, CallFunc_PlayEventAtLocation_ReturnValue) == 0x000220, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::CallFunc_PlayEventAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, CallFunc_SpawnDecalAtLocation_ReturnValue) == 0x000228, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::CallFunc_SpawnDecalAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent, CallFunc_SpawnDecalAtLocation_ReturnValue_1) == 0x000230, "Member 'BP_FleeingRatEvent_C_ExecuteUbergraph_BP_FleeingRatEvent::CallFunc_SpawnDecalAtLocation_ReturnValue_1' has a wrong offset!");

}

