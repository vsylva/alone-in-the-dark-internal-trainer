#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PiecesPlatform

#include "Basic.hpp"

#include "PiecesPlatform_structs.hpp"


namespace SDK::Params
{

// Function PiecesPlatform.PiecesPlatform.GetActivePlatformSubtype
// 0x0001 (0x0001 - 0x0000)
struct PiecesPlatform_GetActivePlatformSubtype final
{
public:
	EPlatformSubtype                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesPlatform_GetActivePlatformSubtype) == 0x000001, "Wrong alignment on PiecesPlatform_GetActivePlatformSubtype");
static_assert(sizeof(PiecesPlatform_GetActivePlatformSubtype) == 0x000001, "Wrong size on PiecesPlatform_GetActivePlatformSubtype");
static_assert(offsetof(PiecesPlatform_GetActivePlatformSubtype, ReturnValue) == 0x000000, "Member 'PiecesPlatform_GetActivePlatformSubtype::ReturnValue' has a wrong offset!");

// Function PiecesPlatform.PiecesPlatform.GetActivePlatformtype
// 0x0001 (0x0001 - 0x0000)
struct PiecesPlatform_GetActivePlatformtype final
{
public:
	EPlatformtype                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesPlatform_GetActivePlatformtype) == 0x000001, "Wrong alignment on PiecesPlatform_GetActivePlatformtype");
static_assert(sizeof(PiecesPlatform_GetActivePlatformtype) == 0x000001, "Wrong size on PiecesPlatform_GetActivePlatformtype");
static_assert(offsetof(PiecesPlatform_GetActivePlatformtype, ReturnValue) == 0x000000, "Member 'PiecesPlatform_GetActivePlatformtype::ReturnValue' has a wrong offset!");

// Function PiecesPlatform.PiecesPlatform.GetCurrentGamepadConnected
// 0x0001 (0x0001 - 0x0000)
struct PiecesPlatform_GetCurrentGamepadConnected final
{
public:
	EGamepadType                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesPlatform_GetCurrentGamepadConnected) == 0x000001, "Wrong alignment on PiecesPlatform_GetCurrentGamepadConnected");
static_assert(sizeof(PiecesPlatform_GetCurrentGamepadConnected) == 0x000001, "Wrong size on PiecesPlatform_GetCurrentGamepadConnected");
static_assert(offsetof(PiecesPlatform_GetCurrentGamepadConnected, ReturnValue) == 0x000000, "Member 'PiecesPlatform_GetCurrentGamepadConnected::ReturnValue' has a wrong offset!");

// Function PiecesPlatform.PiecesPlatform.IsPCActivePlatformType
// 0x0001 (0x0001 - 0x0000)
struct PiecesPlatform_IsPCActivePlatformType final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesPlatform_IsPCActivePlatformType) == 0x000001, "Wrong alignment on PiecesPlatform_IsPCActivePlatformType");
static_assert(sizeof(PiecesPlatform_IsPCActivePlatformType) == 0x000001, "Wrong size on PiecesPlatform_IsPCActivePlatformType");
static_assert(offsetof(PiecesPlatform_IsPCActivePlatformType, ReturnValue) == 0x000000, "Member 'PiecesPlatform_IsPCActivePlatformType::ReturnValue' has a wrong offset!");

}

