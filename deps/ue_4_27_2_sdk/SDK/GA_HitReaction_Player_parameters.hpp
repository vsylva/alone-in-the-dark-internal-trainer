#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_HitReaction_Player

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "ObsidianFox_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function GA_HitReaction_Player.GA_HitReaction_Player_C.ExecuteUbergraph_GA_HitReaction_Player
// 0x0248 (0x0248 - 0x0000)
struct GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              K2Node_CustomEvent_HitReactionType_2;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EHitReactionType HitReactionType)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	EHitReactionType                              K2Node_CustomEvent_HitReactionType_1;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EHitReactionType HitReactionType)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x001C(0x0010)(ZeroConstructor, NoDestructor)
	EHitReactionType                              K2Node_CustomEvent_HitReactionType;                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EHitReactionType HitReactionType)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0030(0x0010)(ZeroConstructor, NoDestructor)
	EHitReactionType                              Temp_byte_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              Temp_byte_Variable_1;                              // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            Temp_class_Variable;                               // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            Temp_class_Variable_1;                             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            Temp_class_Variable_2;                             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            Temp_class_Variable_3;                             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            Temp_class_Variable_4;                             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            K2Node_Select_Default;                             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FHitReactionData                       K2Node_Event_HitReactionData;                      // 0x0078(0x00E0)(ContainsInstancedReference)
	struct FGameplayEventData                     K2Node_Event_GameplayEventData;                    // 0x0158(0x00B0)(ConstParm)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue; // 0x0208(0x0008)(NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              CallFunc_Evaluate_Hit_Reaction_And_Apply_Hardiness_EvaluatedHitReaction; // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHitReactionComponent*                  CallFunc_GetHitReactionComponent_Comp;             // 0x0218(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              K2Node_CustomEvent_HitReactionType_3;              // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_222[0x2];                                      // 0x0222(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EHitReactionType HitReactionType)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0224(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBPAsyncAction_HitReaction*             CallFunc_PlayHitReaction_ReturnValue;              // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player) == 0x000008, "Wrong alignment on GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player");
static_assert(sizeof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player) == 0x000248, "Wrong size on GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, EntryPoint) == 0x000000, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, K2Node_CustomEvent_HitReactionType_2) == 0x000004, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::K2Node_CustomEvent_HitReactionType_2' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, K2Node_CustomEvent_HitReactionType_1) == 0x000018, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::K2Node_CustomEvent_HitReactionType_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, K2Node_CreateDelegate_OutputDelegate_1) == 0x00001C, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, K2Node_CustomEvent_HitReactionType) == 0x00002C, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::K2Node_CustomEvent_HitReactionType' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, K2Node_CreateDelegate_OutputDelegate_2) == 0x000030, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, Temp_byte_Variable) == 0x000040, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, Temp_byte_Variable_1) == 0x000041, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, Temp_class_Variable) == 0x000048, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, Temp_class_Variable_1) == 0x000050, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::Temp_class_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, Temp_class_Variable_2) == 0x000058, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::Temp_class_Variable_2' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, Temp_class_Variable_3) == 0x000060, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::Temp_class_Variable_3' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, Temp_class_Variable_4) == 0x000068, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::Temp_class_Variable_4' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, K2Node_Select_Default) == 0x000070, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, K2Node_Event_HitReactionData) == 0x000078, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::K2Node_Event_HitReactionData' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, K2Node_Event_GameplayEventData) == 0x000158, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::K2Node_Event_GameplayEventData' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue) == 0x000208, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, CallFunc_Evaluate_Hit_Reaction_And_Apply_Hardiness_EvaluatedHitReaction) == 0x000210, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::CallFunc_Evaluate_Hit_Reaction_And_Apply_Hardiness_EvaluatedHitReaction' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, CallFunc_GetHitReactionComponent_Comp) == 0x000218, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::CallFunc_GetHitReactionComponent_Comp' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, K2Node_CustomEvent_HitReactionType_3) == 0x000220, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::K2Node_CustomEvent_HitReactionType_3' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, CallFunc_IsValid_ReturnValue) == 0x000221, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, K2Node_CreateDelegate_OutputDelegate_3) == 0x000224, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, CallFunc_PlayHitReaction_ReturnValue) == 0x000238, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::CallFunc_PlayHitReaction_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player, CallFunc_IsValid_ReturnValue_1) == 0x000240, "Member 'GA_HitReaction_Player_C_ExecuteUbergraph_GA_HitReaction_Player::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function GA_HitReaction_Player.GA_HitReaction_Player_C.Handle Hit Reaction
// 0x0190 (0x0190 - 0x0000)
struct GA_HitReaction_Player_C_Handle_Hit_Reaction final
{
public:
	struct FHitReactionData                       HitReactionData;                                   // 0x0000(0x00E0)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	struct FGameplayEventData                     GameplayEventData;                                 // 0x00E0(0x00B0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GA_HitReaction_Player_C_Handle_Hit_Reaction) == 0x000008, "Wrong alignment on GA_HitReaction_Player_C_Handle_Hit_Reaction");
static_assert(sizeof(GA_HitReaction_Player_C_Handle_Hit_Reaction) == 0x000190, "Wrong size on GA_HitReaction_Player_C_Handle_Hit_Reaction");
static_assert(offsetof(GA_HitReaction_Player_C_Handle_Hit_Reaction, HitReactionData) == 0x000000, "Member 'GA_HitReaction_Player_C_Handle_Hit_Reaction::HitReactionData' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Handle_Hit_Reaction, GameplayEventData) == 0x0000E0, "Member 'GA_HitReaction_Player_C_Handle_Hit_Reaction::GameplayEventData' has a wrong offset!");

// Function GA_HitReaction_Player.GA_HitReaction_Player_C.OnFailed_BE3B92A74A6AD186F36E17B29C71D1A0
// 0x0001 (0x0001 - 0x0000)
struct GA_HitReaction_Player_C_OnFailed_BE3B92A74A6AD186F36E17B29C71D1A0 final
{
public:
	EHitReactionType                              HitReactionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_HitReaction_Player_C_OnFailed_BE3B92A74A6AD186F36E17B29C71D1A0) == 0x000001, "Wrong alignment on GA_HitReaction_Player_C_OnFailed_BE3B92A74A6AD186F36E17B29C71D1A0");
static_assert(sizeof(GA_HitReaction_Player_C_OnFailed_BE3B92A74A6AD186F36E17B29C71D1A0) == 0x000001, "Wrong size on GA_HitReaction_Player_C_OnFailed_BE3B92A74A6AD186F36E17B29C71D1A0");
static_assert(offsetof(GA_HitReaction_Player_C_OnFailed_BE3B92A74A6AD186F36E17B29C71D1A0, HitReactionType) == 0x000000, "Member 'GA_HitReaction_Player_C_OnFailed_BE3B92A74A6AD186F36E17B29C71D1A0::HitReactionType' has a wrong offset!");

// Function GA_HitReaction_Player.GA_HitReaction_Player_C.OnReactionBegin_BE3B92A74A6AD186F36E17B29C71D1A0
// 0x0001 (0x0001 - 0x0000)
struct GA_HitReaction_Player_C_OnReactionBegin_BE3B92A74A6AD186F36E17B29C71D1A0 final
{
public:
	EHitReactionType                              HitReactionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_HitReaction_Player_C_OnReactionBegin_BE3B92A74A6AD186F36E17B29C71D1A0) == 0x000001, "Wrong alignment on GA_HitReaction_Player_C_OnReactionBegin_BE3B92A74A6AD186F36E17B29C71D1A0");
static_assert(sizeof(GA_HitReaction_Player_C_OnReactionBegin_BE3B92A74A6AD186F36E17B29C71D1A0) == 0x000001, "Wrong size on GA_HitReaction_Player_C_OnReactionBegin_BE3B92A74A6AD186F36E17B29C71D1A0");
static_assert(offsetof(GA_HitReaction_Player_C_OnReactionBegin_BE3B92A74A6AD186F36E17B29C71D1A0, HitReactionType) == 0x000000, "Member 'GA_HitReaction_Player_C_OnReactionBegin_BE3B92A74A6AD186F36E17B29C71D1A0::HitReactionType' has a wrong offset!");

// Function GA_HitReaction_Player.GA_HitReaction_Player_C.OnCompleted_BE3B92A74A6AD186F36E17B29C71D1A0
// 0x0001 (0x0001 - 0x0000)
struct GA_HitReaction_Player_C_OnCompleted_BE3B92A74A6AD186F36E17B29C71D1A0 final
{
public:
	EHitReactionType                              HitReactionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_HitReaction_Player_C_OnCompleted_BE3B92A74A6AD186F36E17B29C71D1A0) == 0x000001, "Wrong alignment on GA_HitReaction_Player_C_OnCompleted_BE3B92A74A6AD186F36E17B29C71D1A0");
static_assert(sizeof(GA_HitReaction_Player_C_OnCompleted_BE3B92A74A6AD186F36E17B29C71D1A0) == 0x000001, "Wrong size on GA_HitReaction_Player_C_OnCompleted_BE3B92A74A6AD186F36E17B29C71D1A0");
static_assert(offsetof(GA_HitReaction_Player_C_OnCompleted_BE3B92A74A6AD186F36E17B29C71D1A0, HitReactionType) == 0x000000, "Member 'GA_HitReaction_Player_C_OnCompleted_BE3B92A74A6AD186F36E17B29C71D1A0::HitReactionType' has a wrong offset!");

// Function GA_HitReaction_Player.GA_HitReaction_Player_C.OnInterrupted_BE3B92A74A6AD186F36E17B29C71D1A0
// 0x0001 (0x0001 - 0x0000)
struct GA_HitReaction_Player_C_OnInterrupted_BE3B92A74A6AD186F36E17B29C71D1A0 final
{
public:
	EHitReactionType                              HitReactionType;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_HitReaction_Player_C_OnInterrupted_BE3B92A74A6AD186F36E17B29C71D1A0) == 0x000001, "Wrong alignment on GA_HitReaction_Player_C_OnInterrupted_BE3B92A74A6AD186F36E17B29C71D1A0");
static_assert(sizeof(GA_HitReaction_Player_C_OnInterrupted_BE3B92A74A6AD186F36E17B29C71D1A0) == 0x000001, "Wrong size on GA_HitReaction_Player_C_OnInterrupted_BE3B92A74A6AD186F36E17B29C71D1A0");
static_assert(offsetof(GA_HitReaction_Player_C_OnInterrupted_BE3B92A74A6AD186F36E17B29C71D1A0, HitReactionType) == 0x000000, "Member 'GA_HitReaction_Player_C_OnInterrupted_BE3B92A74A6AD186F36E17B29C71D1A0::HitReactionType' has a wrong offset!");

// Function GA_HitReaction_Player.GA_HitReaction_Player_C.PlayHitReactionSounds
// 0x0010 (0x0010 - 0x0000)
struct GA_HitReaction_Player_C_PlayHitReactionSounds final
{
public:
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponentFromActorInfo_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    CallFunc_PlayEventAttached_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_HitReaction_Player_C_PlayHitReactionSounds) == 0x000008, "Wrong alignment on GA_HitReaction_Player_C_PlayHitReactionSounds");
static_assert(sizeof(GA_HitReaction_Player_C_PlayHitReactionSounds) == 0x000010, "Wrong size on GA_HitReaction_Player_C_PlayHitReactionSounds");
static_assert(offsetof(GA_HitReaction_Player_C_PlayHitReactionSounds, CallFunc_GetOwningComponentFromActorInfo_ReturnValue) == 0x000000, "Member 'GA_HitReaction_Player_C_PlayHitReactionSounds::CallFunc_GetOwningComponentFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_PlayHitReactionSounds, CallFunc_PlayEventAttached_ReturnValue) == 0x000008, "Member 'GA_HitReaction_Player_C_PlayHitReactionSounds::CallFunc_PlayEventAttached_ReturnValue' has a wrong offset!");

// Function GA_HitReaction_Player.GA_HitReaction_Player_C.GetAnimInstance
// 0x0018 (0x0018 - 0x0000)
struct GA_HitReaction_Player_C_GetAnimInstance final
{
public:
	class UAnimInstance*                          Anim_Instance;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponentFromActorInfo_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_HitReaction_Player_C_GetAnimInstance) == 0x000008, "Wrong alignment on GA_HitReaction_Player_C_GetAnimInstance");
static_assert(sizeof(GA_HitReaction_Player_C_GetAnimInstance) == 0x000018, "Wrong size on GA_HitReaction_Player_C_GetAnimInstance");
static_assert(offsetof(GA_HitReaction_Player_C_GetAnimInstance, Anim_Instance) == 0x000000, "Member 'GA_HitReaction_Player_C_GetAnimInstance::Anim_Instance' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_GetAnimInstance, CallFunc_GetOwningComponentFromActorInfo_ReturnValue) == 0x000008, "Member 'GA_HitReaction_Player_C_GetAnimInstance::CallFunc_GetOwningComponentFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_GetAnimInstance, CallFunc_GetAnimInstance_ReturnValue) == 0x000010, "Member 'GA_HitReaction_Player_C_GetAnimInstance::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");

// Function GA_HitReaction_Player.GA_HitReaction_Player_C.Evaluate Hit Reaction And Apply Hardiness
// 0x0288 (0x0288 - 0x0000)
struct GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness final
{
public:
	struct FGameplayEventData                     GameplayEventData;                                 // 0x0000(0x00B0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	EHitReactionType                              EvaluatedHitReaction;                              // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              DesiredHitReaction;                                // 0x00B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            HardinessGameplayEffect;                           // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHitReactionDataObject_C*               K2Node_DynamicCast_AsHit_Reaction_Data_Object;     // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              Temp_byte_Variable;                                // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              Temp_byte_Variable_1;                              // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              Temp_byte_Variable_2;                              // 0x00DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              Temp_byte_Variable_3;                              // 0x00DF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              Temp_byte_Variable_4;                              // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              Temp_byte_Variable_5;                              // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectQuery                   K2Node_MakeStruct_GameplayEffectQuery;             // 0x00E8(0x0150)(ContainsInstancedReference)
	bool                                          Temp_bool_Variable;                                // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_3;                             // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              CallFunc_DowngradeHitReactionType_ReturnValue;     // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_241[0x3];                                      // 0x0241(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue; // 0x0244(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue; // 0x0250(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FActiveGameplayEffectHandle>    CallFunc_GetActiveEffects_ReturnValue;             // 0x0258(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_Array_Get_Item;                           // 0x026C(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0274(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_275[0x3];                                      // 0x0275(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetActiveGameplayEffectStackCount_ReturnValue; // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBoolWithWeight_ReturnValue;         // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHitReactionType                              K2Node_Select_Default_1;                           // 0x0281(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              K2Node_Select_Default_2;                           // 0x0282(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness) == 0x000008, "Wrong alignment on GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness");
static_assert(sizeof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness) == 0x000288, "Wrong size on GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, GameplayEventData) == 0x000000, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::GameplayEventData' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, EvaluatedHitReaction) == 0x0000B0, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::EvaluatedHitReaction' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, DesiredHitReaction) == 0x0000B1, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::DesiredHitReaction' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, HardinessGameplayEffect) == 0x0000B8, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::HardinessGameplayEffect' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, Temp_float_Variable) == 0x0000C0, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, K2Node_DynamicCast_AsHit_Reaction_Data_Object) == 0x0000C8, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::K2Node_DynamicCast_AsHit_Reaction_Data_Object' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, K2Node_DynamicCast_bSuccess) == 0x0000D0, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, Temp_float_Variable_1) == 0x0000D4, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, Temp_float_Variable_2) == 0x0000D8, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, Temp_byte_Variable) == 0x0000DC, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, Temp_byte_Variable_1) == 0x0000DD, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, Temp_byte_Variable_2) == 0x0000DE, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, Temp_byte_Variable_3) == 0x0000DF, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, Temp_byte_Variable_4) == 0x0000E0, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, Temp_byte_Variable_5) == 0x0000E1, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, K2Node_MakeStruct_GameplayEffectQuery) == 0x0000E8, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::K2Node_MakeStruct_GameplayEffectQuery' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, Temp_bool_Variable) == 0x000238, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, Temp_float_Variable_3) == 0x00023C, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, CallFunc_DowngradeHitReactionType_ReturnValue) == 0x000240, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::CallFunc_DowngradeHitReactionType_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue) == 0x000244, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, Temp_int_Variable) == 0x00024C, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue) == 0x000250, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, CallFunc_GetActiveEffects_ReturnValue) == 0x000258, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::CallFunc_GetActiveEffects_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, CallFunc_Array_Length_ReturnValue) == 0x000268, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, CallFunc_Array_Get_Item) == 0x00026C, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, CallFunc_Greater_IntInt_ReturnValue) == 0x000274, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, CallFunc_GetActiveGameplayEffectStackCount_ReturnValue) == 0x000278, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::CallFunc_GetActiveGameplayEffectStackCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, K2Node_Select_Default) == 0x00027C, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, CallFunc_RandomBoolWithWeight_ReturnValue) == 0x000280, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::CallFunc_RandomBoolWithWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, K2Node_Select_Default_1) == 0x000281, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness, K2Node_Select_Default_2) == 0x000282, "Member 'GA_HitReaction_Player_C_Evaluate_Hit_Reaction_And_Apply_Hardiness::K2Node_Select_Default_2' has a wrong offset!");

// Function GA_HitReaction_Player.GA_HitReaction_Player_C.Play Force Feedback
// 0x0140 (0x0140 - 0x0000)
struct GA_HitReaction_Player_C_Play_Force_Feedback final
{
public:
	struct FHitReactionData                       HitReactionData;                                   // 0x0000(0x00E0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x00E0(0x0048)(ContainsInstancedReference)
	bool                                          CallFunc_IsGamepadLastInputTypeUsed_ReturnValue;   // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponentFromActorInfo_ReturnValue; // 0x0130(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackComponent*                CallFunc_SpawnForceFeedbackAttached_ReturnValue;   // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_HitReaction_Player_C_Play_Force_Feedback) == 0x000008, "Wrong alignment on GA_HitReaction_Player_C_Play_Force_Feedback");
static_assert(sizeof(GA_HitReaction_Player_C_Play_Force_Feedback) == 0x000140, "Wrong size on GA_HitReaction_Player_C_Play_Force_Feedback");
static_assert(offsetof(GA_HitReaction_Player_C_Play_Force_Feedback, HitReactionData) == 0x000000, "Member 'GA_HitReaction_Player_C_Play_Force_Feedback::HitReactionData' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Play_Force_Feedback, CallFunc_GetActorInfo_ReturnValue) == 0x0000E0, "Member 'GA_HitReaction_Player_C_Play_Force_Feedback::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Play_Force_Feedback, CallFunc_IsGamepadLastInputTypeUsed_ReturnValue) == 0x000128, "Member 'GA_HitReaction_Player_C_Play_Force_Feedback::CallFunc_IsGamepadLastInputTypeUsed_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Play_Force_Feedback, CallFunc_GetOwningComponentFromActorInfo_ReturnValue) == 0x000130, "Member 'GA_HitReaction_Player_C_Play_Force_Feedback::CallFunc_GetOwningComponentFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Play_Force_Feedback, CallFunc_SpawnForceFeedbackAttached_ReturnValue) == 0x000138, "Member 'GA_HitReaction_Player_C_Play_Force_Feedback::CallFunc_SpawnForceFeedbackAttached_ReturnValue' has a wrong offset!");

// Function GA_HitReaction_Player.GA_HitReaction_Player_C.PlayCameraShake
// 0x0070 (0x0070 - 0x0000)
struct GA_HitReaction_Player_C_PlayCameraShake final
{
public:
	EHitReactionType                              Hit_Reaction_Type;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0018(0x0048)(ContainsInstancedReference)
	float                                         K2Node_Select_Default;                             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraShakeBase*                       CallFunc_StartCameraShake_ReturnValue;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_HitReaction_Player_C_PlayCameraShake) == 0x000008, "Wrong alignment on GA_HitReaction_Player_C_PlayCameraShake");
static_assert(sizeof(GA_HitReaction_Player_C_PlayCameraShake) == 0x000070, "Wrong size on GA_HitReaction_Player_C_PlayCameraShake");
static_assert(offsetof(GA_HitReaction_Player_C_PlayCameraShake, Hit_Reaction_Type) == 0x000000, "Member 'GA_HitReaction_Player_C_PlayCameraShake::Hit_Reaction_Type' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_PlayCameraShake, Temp_byte_Variable) == 0x000001, "Member 'GA_HitReaction_Player_C_PlayCameraShake::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_PlayCameraShake, Temp_float_Variable) == 0x000004, "Member 'GA_HitReaction_Player_C_PlayCameraShake::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_PlayCameraShake, Temp_float_Variable_1) == 0x000008, "Member 'GA_HitReaction_Player_C_PlayCameraShake::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_PlayCameraShake, Temp_float_Variable_2) == 0x00000C, "Member 'GA_HitReaction_Player_C_PlayCameraShake::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_PlayCameraShake, Temp_float_Variable_3) == 0x000010, "Member 'GA_HitReaction_Player_C_PlayCameraShake::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_PlayCameraShake, Temp_float_Variable_4) == 0x000014, "Member 'GA_HitReaction_Player_C_PlayCameraShake::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_PlayCameraShake, CallFunc_GetActorInfo_ReturnValue) == 0x000018, "Member 'GA_HitReaction_Player_C_PlayCameraShake::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_PlayCameraShake, K2Node_Select_Default) == 0x000060, "Member 'GA_HitReaction_Player_C_PlayCameraShake::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_PlayCameraShake, CallFunc_IsValid_ReturnValue) == 0x000064, "Member 'GA_HitReaction_Player_C_PlayCameraShake::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_PlayCameraShake, CallFunc_StartCameraShake_ReturnValue) == 0x000068, "Member 'GA_HitReaction_Player_C_PlayCameraShake::CallFunc_StartCameraShake_ReturnValue' has a wrong offset!");

// Function GA_HitReaction_Player.GA_HitReaction_Player_C.DowngradeHitReactionType
// 0x0009 (0x0009 - 0x0000)
struct GA_HitReaction_Player_C_DowngradeHitReactionType final
{
public:
	EHitReactionType                              Hitreaction;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              Temp_byte_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              Temp_byte_Variable_4;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              Temp_byte_Variable_5;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHitReactionType                              K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_HitReaction_Player_C_DowngradeHitReactionType) == 0x000001, "Wrong alignment on GA_HitReaction_Player_C_DowngradeHitReactionType");
static_assert(sizeof(GA_HitReaction_Player_C_DowngradeHitReactionType) == 0x000009, "Wrong size on GA_HitReaction_Player_C_DowngradeHitReactionType");
static_assert(offsetof(GA_HitReaction_Player_C_DowngradeHitReactionType, Hitreaction) == 0x000000, "Member 'GA_HitReaction_Player_C_DowngradeHitReactionType::Hitreaction' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_DowngradeHitReactionType, ReturnValue) == 0x000001, "Member 'GA_HitReaction_Player_C_DowngradeHitReactionType::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_DowngradeHitReactionType, Temp_byte_Variable) == 0x000002, "Member 'GA_HitReaction_Player_C_DowngradeHitReactionType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_DowngradeHitReactionType, Temp_byte_Variable_1) == 0x000003, "Member 'GA_HitReaction_Player_C_DowngradeHitReactionType::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_DowngradeHitReactionType, Temp_byte_Variable_2) == 0x000004, "Member 'GA_HitReaction_Player_C_DowngradeHitReactionType::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_DowngradeHitReactionType, Temp_byte_Variable_3) == 0x000005, "Member 'GA_HitReaction_Player_C_DowngradeHitReactionType::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_DowngradeHitReactionType, Temp_byte_Variable_4) == 0x000006, "Member 'GA_HitReaction_Player_C_DowngradeHitReactionType::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_DowngradeHitReactionType, Temp_byte_Variable_5) == 0x000007, "Member 'GA_HitReaction_Player_C_DowngradeHitReactionType::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_DowngradeHitReactionType, K2Node_Select_Default) == 0x000008, "Member 'GA_HitReaction_Player_C_DowngradeHitReactionType::K2Node_Select_Default' has a wrong offset!");

// Function GA_HitReaction_Player.GA_HitReaction_Player_C.Get Hit Reaction Montage
// 0x01A0 (0x01A0 - 0x0000)
struct GA_HitReaction_Player_C_Get_Hit_Reaction_Montage final
{
public:
	struct FHitReactionData                       HitReactionData;                                   // 0x0000(0x00E0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	struct FGameplayTag                           ReturnValue;                                       // 0x00E0(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	ECardinalDirection                            Temp_byte_Variable;                                // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x00EC(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_1;                            // 0x00F4(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_2;                            // 0x00FC(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_3;                            // 0x0104(0x0008)(NoDestructor, HasGetValueTypeHash)
	ECardinalDirection                            Temp_byte_Variable_1;                              // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Select_Default;                             // 0x0110(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_4;                            // 0x0118(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_5;                            // 0x0120(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_6;                            // 0x0128(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_7;                            // 0x0130(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Select_Default_1;                           // 0x013C(0x0008)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0148(0x0048)(ContainsInstancedReference)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_195[0x3];                                      // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Select_Default_2;                           // 0x0198(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_HitReaction_Player_C_Get_Hit_Reaction_Montage) == 0x000008, "Wrong alignment on GA_HitReaction_Player_C_Get_Hit_Reaction_Montage");
static_assert(sizeof(GA_HitReaction_Player_C_Get_Hit_Reaction_Montage) == 0x0001A0, "Wrong size on GA_HitReaction_Player_C_Get_Hit_Reaction_Montage");
static_assert(offsetof(GA_HitReaction_Player_C_Get_Hit_Reaction_Montage, HitReactionData) == 0x000000, "Member 'GA_HitReaction_Player_C_Get_Hit_Reaction_Montage::HitReactionData' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Get_Hit_Reaction_Montage, ReturnValue) == 0x0000E0, "Member 'GA_HitReaction_Player_C_Get_Hit_Reaction_Montage::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Get_Hit_Reaction_Montage, Temp_byte_Variable) == 0x0000E8, "Member 'GA_HitReaction_Player_C_Get_Hit_Reaction_Montage::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Get_Hit_Reaction_Montage, Temp_struct_Variable) == 0x0000EC, "Member 'GA_HitReaction_Player_C_Get_Hit_Reaction_Montage::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Get_Hit_Reaction_Montage, Temp_struct_Variable_1) == 0x0000F4, "Member 'GA_HitReaction_Player_C_Get_Hit_Reaction_Montage::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Get_Hit_Reaction_Montage, Temp_struct_Variable_2) == 0x0000FC, "Member 'GA_HitReaction_Player_C_Get_Hit_Reaction_Montage::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Get_Hit_Reaction_Montage, Temp_struct_Variable_3) == 0x000104, "Member 'GA_HitReaction_Player_C_Get_Hit_Reaction_Montage::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Get_Hit_Reaction_Montage, Temp_byte_Variable_1) == 0x00010C, "Member 'GA_HitReaction_Player_C_Get_Hit_Reaction_Montage::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Get_Hit_Reaction_Montage, K2Node_Select_Default) == 0x000110, "Member 'GA_HitReaction_Player_C_Get_Hit_Reaction_Montage::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Get_Hit_Reaction_Montage, Temp_struct_Variable_4) == 0x000118, "Member 'GA_HitReaction_Player_C_Get_Hit_Reaction_Montage::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Get_Hit_Reaction_Montage, Temp_struct_Variable_5) == 0x000120, "Member 'GA_HitReaction_Player_C_Get_Hit_Reaction_Montage::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Get_Hit_Reaction_Montage, Temp_struct_Variable_6) == 0x000128, "Member 'GA_HitReaction_Player_C_Get_Hit_Reaction_Montage::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Get_Hit_Reaction_Montage, Temp_struct_Variable_7) == 0x000130, "Member 'GA_HitReaction_Player_C_Get_Hit_Reaction_Montage::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Get_Hit_Reaction_Montage, Temp_bool_Variable) == 0x000138, "Member 'GA_HitReaction_Player_C_Get_Hit_Reaction_Montage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Get_Hit_Reaction_Montage, K2Node_Select_Default_1) == 0x00013C, "Member 'GA_HitReaction_Player_C_Get_Hit_Reaction_Montage::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Get_Hit_Reaction_Montage, CallFunc_GetActorInfo_ReturnValue) == 0x000148, "Member 'GA_HitReaction_Player_C_Get_Hit_Reaction_Montage::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Get_Hit_Reaction_Montage, CallFunc_VSize_ReturnValue) == 0x000190, "Member 'GA_HitReaction_Player_C_Get_Hit_Reaction_Montage::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Get_Hit_Reaction_Montage, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000194, "Member 'GA_HitReaction_Player_C_Get_Hit_Reaction_Montage::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_HitReaction_Player_C_Get_Hit_Reaction_Montage, K2Node_Select_Default_2) == 0x000198, "Member 'GA_HitReaction_Player_C_Get_Hit_Reaction_Montage::K2Node_Select_Default_2' has a wrong offset!");

}

