#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ObsidianFoxSettings

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "ObsidianFoxSettings_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ObsidianFoxSettings.OFGameUserSettings.ChangeLanguage
// 0x0020 (0x0020 - 0x0000)
struct OFGameUserSettings_ChangeLanguage final
{
public:
	bool                                          bMoveRight;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_ChangeLanguage) == 0x000008, "Wrong alignment on OFGameUserSettings_ChangeLanguage");
static_assert(sizeof(OFGameUserSettings_ChangeLanguage) == 0x000020, "Wrong size on OFGameUserSettings_ChangeLanguage");
static_assert(offsetof(OFGameUserSettings_ChangeLanguage, bMoveRight) == 0x000000, "Member 'OFGameUserSettings_ChangeLanguage::bMoveRight' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_ChangeLanguage, ReturnValue) == 0x000008, "Member 'OFGameUserSettings_ChangeLanguage::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.LoadDefaultSettings
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_LoadDefaultSettings final
{
public:
	EFOptionsSection                              Section;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_LoadDefaultSettings) == 0x000001, "Wrong alignment on OFGameUserSettings_LoadDefaultSettings");
static_assert(sizeof(OFGameUserSettings_LoadDefaultSettings) == 0x000001, "Wrong size on OFGameUserSettings_LoadDefaultSettings");
static_assert(offsetof(OFGameUserSettings_LoadDefaultSettings, Section) == 0x000000, "Member 'OFGameUserSettings_LoadDefaultSettings::Section' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.OnApplicationWindowActivatedEvent
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_OnApplicationWindowActivatedEvent final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_OnApplicationWindowActivatedEvent) == 0x000001, "Wrong alignment on OFGameUserSettings_OnApplicationWindowActivatedEvent");
static_assert(sizeof(OFGameUserSettings_OnApplicationWindowActivatedEvent) == 0x000001, "Wrong size on OFGameUserSettings_OnApplicationWindowActivatedEvent");
static_assert(offsetof(OFGameUserSettings_OnApplicationWindowActivatedEvent, IsActive) == 0x000000, "Member 'OFGameUserSettings_OnApplicationWindowActivatedEvent::IsActive' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.ResetPrimaryKeyBinding
// 0x000C (0x000C - 0x0000)
struct OFGameUserSettings_ResetPrimaryKeyBinding final
{
public:
	class FName                                   BindingToReset;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGamepadKey;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFGameUserSettings_ResetPrimaryKeyBinding) == 0x000004, "Wrong alignment on OFGameUserSettings_ResetPrimaryKeyBinding");
static_assert(sizeof(OFGameUserSettings_ResetPrimaryKeyBinding) == 0x00000C, "Wrong size on OFGameUserSettings_ResetPrimaryKeyBinding");
static_assert(offsetof(OFGameUserSettings_ResetPrimaryKeyBinding, BindingToReset) == 0x000000, "Member 'OFGameUserSettings_ResetPrimaryKeyBinding::BindingToReset' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_ResetPrimaryKeyBinding, bIsGamepadKey) == 0x000008, "Member 'OFGameUserSettings_ResetPrimaryKeyBinding::bIsGamepadKey' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.ResetSecondaryKeyBinding
// 0x0008 (0x0008 - 0x0000)
struct OFGameUserSettings_ResetSecondaryKeyBinding final
{
public:
	class FName                                   BindingToReset;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_ResetSecondaryKeyBinding) == 0x000004, "Wrong alignment on OFGameUserSettings_ResetSecondaryKeyBinding");
static_assert(sizeof(OFGameUserSettings_ResetSecondaryKeyBinding) == 0x000008, "Wrong size on OFGameUserSettings_ResetSecondaryKeyBinding");
static_assert(offsetof(OFGameUserSettings_ResetSecondaryKeyBinding, BindingToReset) == 0x000000, "Member 'OFGameUserSettings_ResetSecondaryKeyBinding::BindingToReset' has a wrong offset!");

// DelegateFunction ObsidianFoxSettings.OFGameUserSettings.ScaleabilitySettingsValueChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_ScaleabilitySettingsValueChanged__DelegateSignature final
{
public:
	bool                                          HasChanged;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_ScaleabilitySettingsValueChanged__DelegateSignature) == 0x000001, "Wrong alignment on OFGameUserSettings_ScaleabilitySettingsValueChanged__DelegateSignature");
static_assert(sizeof(OFGameUserSettings_ScaleabilitySettingsValueChanged__DelegateSignature) == 0x000001, "Wrong size on OFGameUserSettings_ScaleabilitySettingsValueChanged__DelegateSignature");
static_assert(offsetof(OFGameUserSettings_ScaleabilitySettingsValueChanged__DelegateSignature, HasChanged) == 0x000000, "Member 'OFGameUserSettings_ScaleabilitySettingsValueChanged__DelegateSignature::HasChanged' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetAimSensitivity
// 0x0008 (0x0008 - 0x0000)
struct OFGameUserSettings_SetAimSensitivity final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFGameUserSettings_SetAimSensitivity) == 0x000004, "Wrong alignment on OFGameUserSettings_SetAimSensitivity");
static_assert(sizeof(OFGameUserSettings_SetAimSensitivity) == 0x000008, "Wrong size on OFGameUserSettings_SetAimSensitivity");
static_assert(offsetof(OFGameUserSettings_SetAimSensitivity, Value) == 0x000000, "Member 'OFGameUserSettings_SetAimSensitivity::Value' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetAimSensitivity, bApply) == 0x000004, "Member 'OFGameUserSettings_SetAimSensitivity::bApply' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetCameraControlsInverted
// 0x0002 (0x0002 - 0x0000)
struct OFGameUserSettings_SetCameraControlsInverted final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetCameraControlsInverted) == 0x000001, "Wrong alignment on OFGameUserSettings_SetCameraControlsInverted");
static_assert(sizeof(OFGameUserSettings_SetCameraControlsInverted) == 0x000002, "Wrong size on OFGameUserSettings_SetCameraControlsInverted");
static_assert(offsetof(OFGameUserSettings_SetCameraControlsInverted, Value) == 0x000000, "Member 'OFGameUserSettings_SetCameraControlsInverted::Value' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetCameraControlsInverted, bApply) == 0x000001, "Member 'OFGameUserSettings_SetCameraControlsInverted::bApply' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetCameraFieldOfView
// 0x0008 (0x0008 - 0x0000)
struct OFGameUserSettings_SetCameraFieldOfView final
{
public:
	float                                         NewFOV;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFGameUserSettings_SetCameraFieldOfView) == 0x000004, "Wrong alignment on OFGameUserSettings_SetCameraFieldOfView");
static_assert(sizeof(OFGameUserSettings_SetCameraFieldOfView) == 0x000008, "Wrong size on OFGameUserSettings_SetCameraFieldOfView");
static_assert(offsetof(OFGameUserSettings_SetCameraFieldOfView, NewFOV) == 0x000000, "Member 'OFGameUserSettings_SetCameraFieldOfView::NewFOV' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetCameraFieldOfView, bApply) == 0x000004, "Member 'OFGameUserSettings_SetCameraFieldOfView::bApply' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetCameraHorizontalInverted
// 0x0002 (0x0002 - 0x0000)
struct OFGameUserSettings_SetCameraHorizontalInverted final
{
public:
	bool                                          bInverted;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetCameraHorizontalInverted) == 0x000001, "Wrong alignment on OFGameUserSettings_SetCameraHorizontalInverted");
static_assert(sizeof(OFGameUserSettings_SetCameraHorizontalInverted) == 0x000002, "Wrong size on OFGameUserSettings_SetCameraHorizontalInverted");
static_assert(offsetof(OFGameUserSettings_SetCameraHorizontalInverted, bInverted) == 0x000000, "Member 'OFGameUserSettings_SetCameraHorizontalInverted::bInverted' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetCameraHorizontalInverted, bApply) == 0x000001, "Member 'OFGameUserSettings_SetCameraHorizontalInverted::bApply' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetCameraSensitivity
// 0x0008 (0x0008 - 0x0000)
struct OFGameUserSettings_SetCameraSensitivity final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFGameUserSettings_SetCameraSensitivity) == 0x000004, "Wrong alignment on OFGameUserSettings_SetCameraSensitivity");
static_assert(sizeof(OFGameUserSettings_SetCameraSensitivity) == 0x000008, "Wrong size on OFGameUserSettings_SetCameraSensitivity");
static_assert(offsetof(OFGameUserSettings_SetCameraSensitivity, Value) == 0x000000, "Member 'OFGameUserSettings_SetCameraSensitivity::Value' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetCameraSensitivity, bApply) == 0x000004, "Member 'OFGameUserSettings_SetCameraSensitivity::bApply' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetCameraShakeScale
// 0x0008 (0x0008 - 0x0000)
struct OFGameUserSettings_SetCameraShakeScale final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFGameUserSettings_SetCameraShakeScale) == 0x000004, "Wrong alignment on OFGameUserSettings_SetCameraShakeScale");
static_assert(sizeof(OFGameUserSettings_SetCameraShakeScale) == 0x000008, "Wrong size on OFGameUserSettings_SetCameraShakeScale");
static_assert(offsetof(OFGameUserSettings_SetCameraShakeScale, Value) == 0x000000, "Member 'OFGameUserSettings_SetCameraShakeScale::Value' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetCameraShakeScale, bApply) == 0x000004, "Member 'OFGameUserSettings_SetCameraShakeScale::bApply' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetContrast
// 0x0008 (0x0008 - 0x0000)
struct OFGameUserSettings_SetContrast final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFGameUserSettings_SetContrast) == 0x000004, "Wrong alignment on OFGameUserSettings_SetContrast");
static_assert(sizeof(OFGameUserSettings_SetContrast) == 0x000008, "Wrong size on OFGameUserSettings_SetContrast");
static_assert(offsetof(OFGameUserSettings_SetContrast, Value) == 0x000000, "Member 'OFGameUserSettings_SetContrast::Value' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetContrast, bApply) == 0x000004, "Member 'OFGameUserSettings_SetContrast::bApply' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetCopyrightMusic
// 0x0002 (0x0002 - 0x0000)
struct OFGameUserSettings_SetCopyrightMusic final
{
public:
	bool                                          InCopyrightMusic;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InApply;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetCopyrightMusic) == 0x000001, "Wrong alignment on OFGameUserSettings_SetCopyrightMusic");
static_assert(sizeof(OFGameUserSettings_SetCopyrightMusic) == 0x000002, "Wrong size on OFGameUserSettings_SetCopyrightMusic");
static_assert(offsetof(OFGameUserSettings_SetCopyrightMusic, InCopyrightMusic) == 0x000000, "Member 'OFGameUserSettings_SetCopyrightMusic::InCopyrightMusic' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetCopyrightMusic, InApply) == 0x000001, "Member 'OFGameUserSettings_SetCopyrightMusic::InApply' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetCreateShadersOnLoad
// 0x0002 (0x0002 - 0x0000)
struct OFGameUserSettings_SetCreateShadersOnLoad final
{
public:
	bool                                          InCreateShadersOnLoad;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InApply;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetCreateShadersOnLoad) == 0x000001, "Wrong alignment on OFGameUserSettings_SetCreateShadersOnLoad");
static_assert(sizeof(OFGameUserSettings_SetCreateShadersOnLoad) == 0x000002, "Wrong size on OFGameUserSettings_SetCreateShadersOnLoad");
static_assert(offsetof(OFGameUserSettings_SetCreateShadersOnLoad, InCreateShadersOnLoad) == 0x000000, "Member 'OFGameUserSettings_SetCreateShadersOnLoad::InCreateShadersOnLoad' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetCreateShadersOnLoad, InApply) == 0x000001, "Member 'OFGameUserSettings_SetCreateShadersOnLoad::InApply' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetForceFeedbackEnabled
// 0x0002 (0x0002 - 0x0000)
struct OFGameUserSettings_SetForceFeedbackEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetForceFeedbackEnabled) == 0x000001, "Wrong alignment on OFGameUserSettings_SetForceFeedbackEnabled");
static_assert(sizeof(OFGameUserSettings_SetForceFeedbackEnabled) == 0x000002, "Wrong size on OFGameUserSettings_SetForceFeedbackEnabled");
static_assert(offsetof(OFGameUserSettings_SetForceFeedbackEnabled, bEnabled) == 0x000000, "Member 'OFGameUserSettings_SetForceFeedbackEnabled::bEnabled' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetForceFeedbackEnabled, bApply) == 0x000001, "Member 'OFGameUserSettings_SetForceFeedbackEnabled::bApply' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetGamma
// 0x0008 (0x0008 - 0x0000)
struct OFGameUserSettings_SetGamma final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFGameUserSettings_SetGamma) == 0x000004, "Wrong alignment on OFGameUserSettings_SetGamma");
static_assert(sizeof(OFGameUserSettings_SetGamma) == 0x000008, "Wrong size on OFGameUserSettings_SetGamma");
static_assert(offsetof(OFGameUserSettings_SetGamma, Value) == 0x000000, "Member 'OFGameUserSettings_SetGamma::Value' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetGamma, bApply) == 0x000004, "Member 'OFGameUserSettings_SetGamma::bApply' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetMotionBlurQuality
// 0x0002 (0x0002 - 0x0000)
struct OFGameUserSettings_SetMotionBlurQuality final
{
public:
	EMotionBlurQuality                            Quality;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetMotionBlurQuality) == 0x000001, "Wrong alignment on OFGameUserSettings_SetMotionBlurQuality");
static_assert(sizeof(OFGameUserSettings_SetMotionBlurQuality) == 0x000002, "Wrong size on OFGameUserSettings_SetMotionBlurQuality");
static_assert(offsetof(OFGameUserSettings_SetMotionBlurQuality, Quality) == 0x000000, "Member 'OFGameUserSettings_SetMotionBlurQuality::Quality' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetMotionBlurQuality, bApply) == 0x000001, "Member 'OFGameUserSettings_SetMotionBlurQuality::bApply' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFAmbientOcclusionQuality
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_SetOFAmbientOcclusionQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFAmbientOcclusionQuality) == 0x000004, "Wrong alignment on OFGameUserSettings_SetOFAmbientOcclusionQuality");
static_assert(sizeof(OFGameUserSettings_SetOFAmbientOcclusionQuality) == 0x000004, "Wrong size on OFGameUserSettings_SetOFAmbientOcclusionQuality");
static_assert(offsetof(OFGameUserSettings_SetOFAmbientOcclusionQuality, Value) == 0x000000, "Member 'OFGameUserSettings_SetOFAmbientOcclusionQuality::Value' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFAnisotropicFilteringQuality
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_SetOFAnisotropicFilteringQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFAnisotropicFilteringQuality) == 0x000004, "Wrong alignment on OFGameUserSettings_SetOFAnisotropicFilteringQuality");
static_assert(sizeof(OFGameUserSettings_SetOFAnisotropicFilteringQuality) == 0x000004, "Wrong size on OFGameUserSettings_SetOFAnisotropicFilteringQuality");
static_assert(offsetof(OFGameUserSettings_SetOFAnisotropicFilteringQuality, Value) == 0x000000, "Member 'OFGameUserSettings_SetOFAnisotropicFilteringQuality::Value' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFAntiAliasingQuality
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_SetOFAntiAliasingQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFAntiAliasingQuality) == 0x000004, "Wrong alignment on OFGameUserSettings_SetOFAntiAliasingQuality");
static_assert(sizeof(OFGameUserSettings_SetOFAntiAliasingQuality) == 0x000004, "Wrong size on OFGameUserSettings_SetOFAntiAliasingQuality");
static_assert(offsetof(OFGameUserSettings_SetOFAntiAliasingQuality, Value) == 0x000000, "Member 'OFGameUserSettings_SetOFAntiAliasingQuality::Value' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFChromaticAberrationEnabled
// 0x0002 (0x0002 - 0x0000)
struct OFGameUserSettings_SetOFChromaticAberrationEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFChromaticAberrationEnabled) == 0x000001, "Wrong alignment on OFGameUserSettings_SetOFChromaticAberrationEnabled");
static_assert(sizeof(OFGameUserSettings_SetOFChromaticAberrationEnabled) == 0x000002, "Wrong size on OFGameUserSettings_SetOFChromaticAberrationEnabled");
static_assert(offsetof(OFGameUserSettings_SetOFChromaticAberrationEnabled, bEnable) == 0x000000, "Member 'OFGameUserSettings_SetOFChromaticAberrationEnabled::bEnable' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetOFChromaticAberrationEnabled, bApply) == 0x000001, "Member 'OFGameUserSettings_SetOFChromaticAberrationEnabled::bApply' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFDepthOfFieldEnabled
// 0x0002 (0x0002 - 0x0000)
struct OFGameUserSettings_SetOFDepthOfFieldEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFDepthOfFieldEnabled) == 0x000001, "Wrong alignment on OFGameUserSettings_SetOFDepthOfFieldEnabled");
static_assert(sizeof(OFGameUserSettings_SetOFDepthOfFieldEnabled) == 0x000002, "Wrong size on OFGameUserSettings_SetOFDepthOfFieldEnabled");
static_assert(offsetof(OFGameUserSettings_SetOFDepthOfFieldEnabled, bEnable) == 0x000000, "Member 'OFGameUserSettings_SetOFDepthOfFieldEnabled::bEnable' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetOFDepthOfFieldEnabled, bApply) == 0x000001, "Member 'OFGameUserSettings_SetOFDepthOfFieldEnabled::bApply' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFDetailQuality
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_SetOFDetailQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFDetailQuality) == 0x000004, "Wrong alignment on OFGameUserSettings_SetOFDetailQuality");
static_assert(sizeof(OFGameUserSettings_SetOFDetailQuality) == 0x000004, "Wrong size on OFGameUserSettings_SetOFDetailQuality");
static_assert(offsetof(OFGameUserSettings_SetOFDetailQuality, Value) == 0x000000, "Member 'OFGameUserSettings_SetOFDetailQuality::Value' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFDLAA
// 0x0002 (0x0002 - 0x0000)
struct OFGameUserSettings_SetOFDLAA final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFDLAA) == 0x000001, "Wrong alignment on OFGameUserSettings_SetOFDLAA");
static_assert(sizeof(OFGameUserSettings_SetOFDLAA) == 0x000002, "Wrong size on OFGameUserSettings_SetOFDLAA");
static_assert(offsetof(OFGameUserSettings_SetOFDLAA, Enabled) == 0x000000, "Member 'OFGameUserSettings_SetOFDLAA::Enabled' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetOFDLAA, bApply) == 0x000001, "Member 'OFGameUserSettings_SetOFDLAA::bApply' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFDLSS
// 0x0008 (0x0008 - 0x0000)
struct OFGameUserSettings_SetOFDLSS final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFGameUserSettings_SetOFDLSS) == 0x000004, "Wrong alignment on OFGameUserSettings_SetOFDLSS");
static_assert(sizeof(OFGameUserSettings_SetOFDLSS) == 0x000008, "Wrong size on OFGameUserSettings_SetOFDLSS");
static_assert(offsetof(OFGameUserSettings_SetOFDLSS, Value) == 0x000000, "Member 'OFGameUserSettings_SetOFDLSS::Value' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetOFDLSS, bApply) == 0x000004, "Member 'OFGameUserSettings_SetOFDLSS::bApply' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFEffectsQuality
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_SetOFEffectsQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFEffectsQuality) == 0x000004, "Wrong alignment on OFGameUserSettings_SetOFEffectsQuality");
static_assert(sizeof(OFGameUserSettings_SetOFEffectsQuality) == 0x000004, "Wrong size on OFGameUserSettings_SetOFEffectsQuality");
static_assert(offsetof(OFGameUserSettings_SetOFEffectsQuality, Value) == 0x000000, "Member 'OFGameUserSettings_SetOFEffectsQuality::Value' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFFoliageQuality
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_SetOFFoliageQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFFoliageQuality) == 0x000004, "Wrong alignment on OFGameUserSettings_SetOFFoliageQuality");
static_assert(sizeof(OFGameUserSettings_SetOFFoliageQuality) == 0x000004, "Wrong size on OFGameUserSettings_SetOFFoliageQuality");
static_assert(offsetof(OFGameUserSettings_SetOFFoliageQuality, Value) == 0x000000, "Member 'OFGameUserSettings_SetOFFoliageQuality::Value' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFFrameRate
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_SetOFFrameRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFFrameRate) == 0x000004, "Wrong alignment on OFGameUserSettings_SetOFFrameRate");
static_assert(sizeof(OFGameUserSettings_SetOFFrameRate) == 0x000004, "Wrong size on OFGameUserSettings_SetOFFrameRate");
static_assert(offsetof(OFGameUserSettings_SetOFFrameRate, Value) == 0x000000, "Member 'OFGameUserSettings_SetOFFrameRate::Value' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFFSR
// 0x0008 (0x0008 - 0x0000)
struct OFGameUserSettings_SetOFFSR final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFGameUserSettings_SetOFFSR) == 0x000004, "Wrong alignment on OFGameUserSettings_SetOFFSR");
static_assert(sizeof(OFGameUserSettings_SetOFFSR) == 0x000008, "Wrong size on OFGameUserSettings_SetOFFSR");
static_assert(offsetof(OFGameUserSettings_SetOFFSR, Value) == 0x000000, "Member 'OFGameUserSettings_SetOFFSR::Value' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetOFFSR, bApply) == 0x000004, "Member 'OFGameUserSettings_SetOFFSR::bApply' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFGraphicsMode
// 0x0002 (0x0002 - 0x0000)
struct OFGameUserSettings_SetOFGraphicsMode final
{
public:
	EFGraphicsMode                                Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFGraphicsMode) == 0x000001, "Wrong alignment on OFGameUserSettings_SetOFGraphicsMode");
static_assert(sizeof(OFGameUserSettings_SetOFGraphicsMode) == 0x000002, "Wrong size on OFGameUserSettings_SetOFGraphicsMode");
static_assert(offsetof(OFGameUserSettings_SetOFGraphicsMode, Value) == 0x000000, "Member 'OFGameUserSettings_SetOFGraphicsMode::Value' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetOFGraphicsMode, bApply) == 0x000001, "Member 'OFGameUserSettings_SetOFGraphicsMode::bApply' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFHDRValue
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_SetOFHDRValue final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFHDRValue) == 0x000001, "Wrong alignment on OFGameUserSettings_SetOFHDRValue");
static_assert(sizeof(OFGameUserSettings_SetOFHDRValue) == 0x000001, "Wrong size on OFGameUserSettings_SetOFHDRValue");
static_assert(offsetof(OFGameUserSettings_SetOFHDRValue, Enable) == 0x000000, "Member 'OFGameUserSettings_SetOFHDRValue::Enable' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFParticlesQuality
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_SetOFParticlesQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFParticlesQuality) == 0x000004, "Wrong alignment on OFGameUserSettings_SetOFParticlesQuality");
static_assert(sizeof(OFGameUserSettings_SetOFParticlesQuality) == 0x000004, "Wrong size on OFGameUserSettings_SetOFParticlesQuality");
static_assert(offsetof(OFGameUserSettings_SetOFParticlesQuality, Value) == 0x000000, "Member 'OFGameUserSettings_SetOFParticlesQuality::Value' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFPostProcessQuality
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_SetOFPostProcessQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFPostProcessQuality) == 0x000004, "Wrong alignment on OFGameUserSettings_SetOFPostProcessQuality");
static_assert(sizeof(OFGameUserSettings_SetOFPostProcessQuality) == 0x000004, "Wrong size on OFGameUserSettings_SetOFPostProcessQuality");
static_assert(offsetof(OFGameUserSettings_SetOFPostProcessQuality, Value) == 0x000000, "Member 'OFGameUserSettings_SetOFPostProcessQuality::Value' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFScreenMode
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_SetOFScreenMode final
{
public:
	EWindowMode                                   InFullscreenMode;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFScreenMode) == 0x000001, "Wrong alignment on OFGameUserSettings_SetOFScreenMode");
static_assert(sizeof(OFGameUserSettings_SetOFScreenMode) == 0x000001, "Wrong size on OFGameUserSettings_SetOFScreenMode");
static_assert(offsetof(OFGameUserSettings_SetOFScreenMode, InFullscreenMode) == 0x000000, "Member 'OFGameUserSettings_SetOFScreenMode::InFullscreenMode' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFScreenResolution
// 0x0008 (0x0008 - 0x0000)
struct OFGameUserSettings_SetOFScreenResolution final
{
public:
	struct FIntPoint                              Resolution;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFScreenResolution) == 0x000004, "Wrong alignment on OFGameUserSettings_SetOFScreenResolution");
static_assert(sizeof(OFGameUserSettings_SetOFScreenResolution) == 0x000008, "Wrong size on OFGameUserSettings_SetOFScreenResolution");
static_assert(offsetof(OFGameUserSettings_SetOFScreenResolution, Resolution) == 0x000000, "Member 'OFGameUserSettings_SetOFScreenResolution::Resolution' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFScreenSpaceReflectionsQuality
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_SetOFScreenSpaceReflectionsQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFScreenSpaceReflectionsQuality) == 0x000004, "Wrong alignment on OFGameUserSettings_SetOFScreenSpaceReflectionsQuality");
static_assert(sizeof(OFGameUserSettings_SetOFScreenSpaceReflectionsQuality) == 0x000004, "Wrong size on OFGameUserSettings_SetOFScreenSpaceReflectionsQuality");
static_assert(offsetof(OFGameUserSettings_SetOFScreenSpaceReflectionsQuality, Value) == 0x000000, "Member 'OFGameUserSettings_SetOFScreenSpaceReflectionsQuality::Value' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFShadingQuality
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_SetOFShadingQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFShadingQuality) == 0x000004, "Wrong alignment on OFGameUserSettings_SetOFShadingQuality");
static_assert(sizeof(OFGameUserSettings_SetOFShadingQuality) == 0x000004, "Wrong size on OFGameUserSettings_SetOFShadingQuality");
static_assert(offsetof(OFGameUserSettings_SetOFShadingQuality, Value) == 0x000000, "Member 'OFGameUserSettings_SetOFShadingQuality::Value' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFShadowQuality
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_SetOFShadowQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFShadowQuality) == 0x000004, "Wrong alignment on OFGameUserSettings_SetOFShadowQuality");
static_assert(sizeof(OFGameUserSettings_SetOFShadowQuality) == 0x000004, "Wrong size on OFGameUserSettings_SetOFShadowQuality");
static_assert(offsetof(OFGameUserSettings_SetOFShadowQuality, Value) == 0x000000, "Member 'OFGameUserSettings_SetOFShadowQuality::Value' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFShowSubtitles
// 0x0002 (0x0002 - 0x0000)
struct OFGameUserSettings_SetOFShowSubtitles final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFShowSubtitles) == 0x000001, "Wrong alignment on OFGameUserSettings_SetOFShowSubtitles");
static_assert(sizeof(OFGameUserSettings_SetOFShowSubtitles) == 0x000002, "Wrong size on OFGameUserSettings_SetOFShowSubtitles");
static_assert(offsetof(OFGameUserSettings_SetOFShowSubtitles, Value) == 0x000000, "Member 'OFGameUserSettings_SetOFShowSubtitles::Value' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetOFShowSubtitles, bApply) == 0x000001, "Member 'OFGameUserSettings_SetOFShowSubtitles::bApply' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFSubSurfaceScatteringQuality
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_SetOFSubSurfaceScatteringQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFSubSurfaceScatteringQuality) == 0x000004, "Wrong alignment on OFGameUserSettings_SetOFSubSurfaceScatteringQuality");
static_assert(sizeof(OFGameUserSettings_SetOFSubSurfaceScatteringQuality) == 0x000004, "Wrong size on OFGameUserSettings_SetOFSubSurfaceScatteringQuality");
static_assert(offsetof(OFGameUserSettings_SetOFSubSurfaceScatteringQuality, Value) == 0x000000, "Member 'OFGameUserSettings_SetOFSubSurfaceScatteringQuality::Value' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFTextureQuality
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_SetOFTextureQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFTextureQuality) == 0x000004, "Wrong alignment on OFGameUserSettings_SetOFTextureQuality");
static_assert(sizeof(OFGameUserSettings_SetOFTextureQuality) == 0x000004, "Wrong size on OFGameUserSettings_SetOFTextureQuality");
static_assert(offsetof(OFGameUserSettings_SetOFTextureQuality, Value) == 0x000000, "Member 'OFGameUserSettings_SetOFTextureQuality::Value' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFVideoQuality
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_SetOFVideoQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFVideoQuality) == 0x000004, "Wrong alignment on OFGameUserSettings_SetOFVideoQuality");
static_assert(sizeof(OFGameUserSettings_SetOFVideoQuality) == 0x000004, "Wrong size on OFGameUserSettings_SetOFVideoQuality");
static_assert(offsetof(OFGameUserSettings_SetOFVideoQuality, Value) == 0x000000, "Member 'OFGameUserSettings_SetOFVideoQuality::Value' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFViewDistance
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_SetOFViewDistance final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFViewDistance) == 0x000004, "Wrong alignment on OFGameUserSettings_SetOFViewDistance");
static_assert(sizeof(OFGameUserSettings_SetOFViewDistance) == 0x000004, "Wrong size on OFGameUserSettings_SetOFViewDistance");
static_assert(offsetof(OFGameUserSettings_SetOFViewDistance, Value) == 0x000000, "Member 'OFGameUserSettings_SetOFViewDistance::Value' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFVolumetricQuality
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_SetOFVolumetricQuality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFVolumetricQuality) == 0x000004, "Wrong alignment on OFGameUserSettings_SetOFVolumetricQuality");
static_assert(sizeof(OFGameUserSettings_SetOFVolumetricQuality) == 0x000004, "Wrong size on OFGameUserSettings_SetOFVolumetricQuality");
static_assert(offsetof(OFGameUserSettings_SetOFVolumetricQuality, Value) == 0x000000, "Member 'OFGameUserSettings_SetOFVolumetricQuality::Value' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetOFVSyncEnabled
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_SetOFVSyncEnabled final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetOFVSyncEnabled) == 0x000001, "Wrong alignment on OFGameUserSettings_SetOFVSyncEnabled");
static_assert(sizeof(OFGameUserSettings_SetOFVSyncEnabled) == 0x000001, "Wrong size on OFGameUserSettings_SetOFVSyncEnabled");
static_assert(offsetof(OFGameUserSettings_SetOFVSyncEnabled, Enable) == 0x000000, "Member 'OFGameUserSettings_SetOFVSyncEnabled::Enable' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetPostEffectExtra
// 0x0002 (0x0002 - 0x0000)
struct OFGameUserSettings_SetPostEffectExtra final
{
public:
	EPostEffectExtra                              NewPostEffectExtra;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetPostEffectExtra) == 0x000001, "Wrong alignment on OFGameUserSettings_SetPostEffectExtra");
static_assert(sizeof(OFGameUserSettings_SetPostEffectExtra) == 0x000002, "Wrong size on OFGameUserSettings_SetPostEffectExtra");
static_assert(offsetof(OFGameUserSettings_SetPostEffectExtra, NewPostEffectExtra) == 0x000000, "Member 'OFGameUserSettings_SetPostEffectExtra::NewPostEffectExtra' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetPostEffectExtra, bApply) == 0x000001, "Member 'OFGameUserSettings_SetPostEffectExtra::bApply' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetSlowHDDMode
// 0x0002 (0x0002 - 0x0000)
struct OFGameUserSettings_SetSlowHDDMode final
{
public:
	bool                                          InSlowHDDMode;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InApply;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetSlowHDDMode) == 0x000001, "Wrong alignment on OFGameUserSettings_SetSlowHDDMode");
static_assert(sizeof(OFGameUserSettings_SetSlowHDDMode) == 0x000002, "Wrong size on OFGameUserSettings_SetSlowHDDMode");
static_assert(offsetof(OFGameUserSettings_SetSlowHDDMode, InSlowHDDMode) == 0x000000, "Member 'OFGameUserSettings_SetSlowHDDMode::InSlowHDDMode' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetSlowHDDMode, InApply) == 0x000001, "Member 'OFGameUserSettings_SetSlowHDDMode::InApply' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetSubtitleSize
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_SetSubtitleSize final
{
public:
	ESubtitleSizes                                InSubtitleSize;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetSubtitleSize) == 0x000001, "Wrong alignment on OFGameUserSettings_SetSubtitleSize");
static_assert(sizeof(OFGameUserSettings_SetSubtitleSize) == 0x000001, "Wrong size on OFGameUserSettings_SetSubtitleSize");
static_assert(offsetof(OFGameUserSettings_SetSubtitleSize, InSubtitleSize) == 0x000000, "Member 'OFGameUserSettings_SetSubtitleSize::InSubtitleSize' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetTelemetryEnabled
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_SetTelemetryEnabled final
{
public:
	bool                                          InTelemetryEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetTelemetryEnabled) == 0x000001, "Wrong alignment on OFGameUserSettings_SetTelemetryEnabled");
static_assert(sizeof(OFGameUserSettings_SetTelemetryEnabled) == 0x000001, "Wrong size on OFGameUserSettings_SetTelemetryEnabled");
static_assert(offsetof(OFGameUserSettings_SetTelemetryEnabled, InTelemetryEnabled) == 0x000000, "Member 'OFGameUserSettings_SetTelemetryEnabled::InTelemetryEnabled' has a wrong offset!");

// DelegateFunction ObsidianFoxSettings.OFGameUserSettings.SettingsChangedSignature__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct OFGameUserSettings_SettingsChangedSignature__DelegateSignature final
{
public:
	class UOFGameUserSettings*                    Settings;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SettingsChangedSignature__DelegateSignature) == 0x000008, "Wrong alignment on OFGameUserSettings_SettingsChangedSignature__DelegateSignature");
static_assert(sizeof(OFGameUserSettings_SettingsChangedSignature__DelegateSignature) == 0x000008, "Wrong size on OFGameUserSettings_SettingsChangedSignature__DelegateSignature");
static_assert(offsetof(OFGameUserSettings_SettingsChangedSignature__DelegateSignature, Settings) == 0x000000, "Member 'OFGameUserSettings_SettingsChangedSignature__DelegateSignature::Settings' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetTutorialsEnabled
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_SetTutorialsEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetTutorialsEnabled) == 0x000001, "Wrong alignment on OFGameUserSettings_SetTutorialsEnabled");
static_assert(sizeof(OFGameUserSettings_SetTutorialsEnabled) == 0x000001, "Wrong size on OFGameUserSettings_SetTutorialsEnabled");
static_assert(offsetof(OFGameUserSettings_SetTutorialsEnabled, bEnable) == 0x000000, "Member 'OFGameUserSettings_SetTutorialsEnabled::bEnable' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetUse1982Character
// 0x0002 (0x0002 - 0x0000)
struct OFGameUserSettings_SetUse1982Character final
{
public:
	bool                                          bInUse1982Character;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetUse1982Character) == 0x000001, "Wrong alignment on OFGameUserSettings_SetUse1982Character");
static_assert(sizeof(OFGameUserSettings_SetUse1982Character) == 0x000002, "Wrong size on OFGameUserSettings_SetUse1982Character");
static_assert(offsetof(OFGameUserSettings_SetUse1982Character, bInUse1982Character) == 0x000000, "Member 'OFGameUserSettings_SetUse1982Character::bInUse1982Character' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetUse1982Character, bApply) == 0x000001, "Member 'OFGameUserSettings_SetUse1982Character::bApply' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetUseDeveloperCommentary
// 0x0010 (0x0010 - 0x0000)
struct OFGameUserSettings_SetUseDeveloperCommentary final
{
public:
	bool                                          bInEnableDeveloperCommentary;                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContext;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SetUseDeveloperCommentary) == 0x000008, "Wrong alignment on OFGameUserSettings_SetUseDeveloperCommentary");
static_assert(sizeof(OFGameUserSettings_SetUseDeveloperCommentary) == 0x000010, "Wrong size on OFGameUserSettings_SetUseDeveloperCommentary");
static_assert(offsetof(OFGameUserSettings_SetUseDeveloperCommentary, bInEnableDeveloperCommentary) == 0x000000, "Member 'OFGameUserSettings_SetUseDeveloperCommentary::bInEnableDeveloperCommentary' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetUseDeveloperCommentary, bApply) == 0x000001, "Member 'OFGameUserSettings_SetUseDeveloperCommentary::bApply' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetUseDeveloperCommentary, WorldContext) == 0x000008, "Member 'OFGameUserSettings_SetUseDeveloperCommentary::WorldContext' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.SetVOLanguage
// 0x0018 (0x0018 - 0x0000)
struct OFGameUserSettings_SetVOLanguage final
{
public:
	class FString                                 NewVOLanguage;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFGameUserSettings_SetVOLanguage) == 0x000008, "Wrong alignment on OFGameUserSettings_SetVOLanguage");
static_assert(sizeof(OFGameUserSettings_SetVOLanguage) == 0x000018, "Wrong size on OFGameUserSettings_SetVOLanguage");
static_assert(offsetof(OFGameUserSettings_SetVOLanguage, NewVOLanguage) == 0x000000, "Member 'OFGameUserSettings_SetVOLanguage::NewVOLanguage' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_SetVOLanguage, bApply) == 0x000010, "Member 'OFGameUserSettings_SetVOLanguage::bApply' has a wrong offset!");

// DelegateFunction ObsidianFoxSettings.OFGameUserSettings.SubtitleSizeChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_SubtitleSizeChanged__DelegateSignature final
{
public:
	ESubtitleSizes                                NewSubtitleSize;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_SubtitleSizeChanged__DelegateSignature) == 0x000001, "Wrong alignment on OFGameUserSettings_SubtitleSizeChanged__DelegateSignature");
static_assert(sizeof(OFGameUserSettings_SubtitleSizeChanged__DelegateSignature) == 0x000001, "Wrong size on OFGameUserSettings_SubtitleSizeChanged__DelegateSignature");
static_assert(offsetof(OFGameUserSettings_SubtitleSizeChanged__DelegateSignature, NewSubtitleSize) == 0x000000, "Member 'OFGameUserSettings_SubtitleSizeChanged__DelegateSignature::NewSubtitleSize' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.UpdatePrimaryKeyBinding
// 0x0028 (0x0028 - 0x0000)
struct OFGameUserSettings_UpdatePrimaryKeyBinding final
{
public:
	class FName                                   BindingToChange;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   NewKey;                                            // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldContext;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_UpdatePrimaryKeyBinding) == 0x000008, "Wrong alignment on OFGameUserSettings_UpdatePrimaryKeyBinding");
static_assert(sizeof(OFGameUserSettings_UpdatePrimaryKeyBinding) == 0x000028, "Wrong size on OFGameUserSettings_UpdatePrimaryKeyBinding");
static_assert(offsetof(OFGameUserSettings_UpdatePrimaryKeyBinding, BindingToChange) == 0x000000, "Member 'OFGameUserSettings_UpdatePrimaryKeyBinding::BindingToChange' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_UpdatePrimaryKeyBinding, NewKey) == 0x000008, "Member 'OFGameUserSettings_UpdatePrimaryKeyBinding::NewKey' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_UpdatePrimaryKeyBinding, WorldContext) == 0x000020, "Member 'OFGameUserSettings_UpdatePrimaryKeyBinding::WorldContext' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.UpdateSecondaryKeyBinding
// 0x0028 (0x0028 - 0x0000)
struct OFGameUserSettings_UpdateSecondaryKeyBinding final
{
public:
	class FName                                   BindingToChange;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   NewKey;                                            // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldContext;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_UpdateSecondaryKeyBinding) == 0x000008, "Wrong alignment on OFGameUserSettings_UpdateSecondaryKeyBinding");
static_assert(sizeof(OFGameUserSettings_UpdateSecondaryKeyBinding) == 0x000028, "Wrong size on OFGameUserSettings_UpdateSecondaryKeyBinding");
static_assert(offsetof(OFGameUserSettings_UpdateSecondaryKeyBinding, BindingToChange) == 0x000000, "Member 'OFGameUserSettings_UpdateSecondaryKeyBinding::BindingToChange' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_UpdateSecondaryKeyBinding, NewKey) == 0x000008, "Member 'OFGameUserSettings_UpdateSecondaryKeyBinding::NewKey' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_UpdateSecondaryKeyBinding, WorldContext) == 0x000020, "Member 'OFGameUserSettings_UpdateSecondaryKeyBinding::WorldContext' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.DoesActionHaveCustomBinding
// 0x000C (0x000C - 0x0000)
struct OFGameUserSettings_DoesActionHaveCustomBinding final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPrimaryBinding;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGamepadBinding;                                 // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFGameUserSettings_DoesActionHaveCustomBinding) == 0x000004, "Wrong alignment on OFGameUserSettings_DoesActionHaveCustomBinding");
static_assert(sizeof(OFGameUserSettings_DoesActionHaveCustomBinding) == 0x00000C, "Wrong size on OFGameUserSettings_DoesActionHaveCustomBinding");
static_assert(offsetof(OFGameUserSettings_DoesActionHaveCustomBinding, ActionName) == 0x000000, "Member 'OFGameUserSettings_DoesActionHaveCustomBinding::ActionName' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_DoesActionHaveCustomBinding, bIsPrimaryBinding) == 0x000008, "Member 'OFGameUserSettings_DoesActionHaveCustomBinding::bIsPrimaryBinding' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_DoesActionHaveCustomBinding, bIsGamepadBinding) == 0x000009, "Member 'OFGameUserSettings_DoesActionHaveCustomBinding::bIsGamepadBinding' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_DoesActionHaveCustomBinding, ReturnValue) == 0x00000A, "Member 'OFGameUserSettings_DoesActionHaveCustomBinding::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetAimSensitivity
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_GetAimSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetAimSensitivity) == 0x000004, "Wrong alignment on OFGameUserSettings_GetAimSensitivity");
static_assert(sizeof(OFGameUserSettings_GetAimSensitivity) == 0x000004, "Wrong size on OFGameUserSettings_GetAimSensitivity");
static_assert(offsetof(OFGameUserSettings_GetAimSensitivity, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetAimSensitivity::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetCameraControlsHorizontalInverted
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_GetCameraControlsHorizontalInverted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetCameraControlsHorizontalInverted) == 0x000001, "Wrong alignment on OFGameUserSettings_GetCameraControlsHorizontalInverted");
static_assert(sizeof(OFGameUserSettings_GetCameraControlsHorizontalInverted) == 0x000001, "Wrong size on OFGameUserSettings_GetCameraControlsHorizontalInverted");
static_assert(offsetof(OFGameUserSettings_GetCameraControlsHorizontalInverted, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetCameraControlsHorizontalInverted::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetCameraControlsInverted
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_GetCameraControlsInverted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetCameraControlsInverted) == 0x000001, "Wrong alignment on OFGameUserSettings_GetCameraControlsInverted");
static_assert(sizeof(OFGameUserSettings_GetCameraControlsInverted) == 0x000001, "Wrong size on OFGameUserSettings_GetCameraControlsInverted");
static_assert(offsetof(OFGameUserSettings_GetCameraControlsInverted, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetCameraControlsInverted::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetCameraFieldOfView
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_GetCameraFieldOfView final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetCameraFieldOfView) == 0x000004, "Wrong alignment on OFGameUserSettings_GetCameraFieldOfView");
static_assert(sizeof(OFGameUserSettings_GetCameraFieldOfView) == 0x000004, "Wrong size on OFGameUserSettings_GetCameraFieldOfView");
static_assert(offsetof(OFGameUserSettings_GetCameraFieldOfView, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetCameraFieldOfView::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetCameraSensitivity
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_GetCameraSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetCameraSensitivity) == 0x000004, "Wrong alignment on OFGameUserSettings_GetCameraSensitivity");
static_assert(sizeof(OFGameUserSettings_GetCameraSensitivity) == 0x000004, "Wrong size on OFGameUserSettings_GetCameraSensitivity");
static_assert(offsetof(OFGameUserSettings_GetCameraSensitivity, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetCameraSensitivity::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetCameraShakeScale
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_GetCameraShakeScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetCameraShakeScale) == 0x000004, "Wrong alignment on OFGameUserSettings_GetCameraShakeScale");
static_assert(sizeof(OFGameUserSettings_GetCameraShakeScale) == 0x000004, "Wrong size on OFGameUserSettings_GetCameraShakeScale");
static_assert(offsetof(OFGameUserSettings_GetCameraShakeScale, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetCameraShakeScale::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetContrast
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_GetContrast final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetContrast) == 0x000004, "Wrong alignment on OFGameUserSettings_GetContrast");
static_assert(sizeof(OFGameUserSettings_GetContrast) == 0x000004, "Wrong size on OFGameUserSettings_GetContrast");
static_assert(offsetof(OFGameUserSettings_GetContrast, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetContrast::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetCopyrightMusic
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_GetCopyrightMusic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetCopyrightMusic) == 0x000001, "Wrong alignment on OFGameUserSettings_GetCopyrightMusic");
static_assert(sizeof(OFGameUserSettings_GetCopyrightMusic) == 0x000001, "Wrong size on OFGameUserSettings_GetCopyrightMusic");
static_assert(offsetof(OFGameUserSettings_GetCopyrightMusic, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetCopyrightMusic::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetCreateShadersOnLoad
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_GetCreateShadersOnLoad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetCreateShadersOnLoad) == 0x000001, "Wrong alignment on OFGameUserSettings_GetCreateShadersOnLoad");
static_assert(sizeof(OFGameUserSettings_GetCreateShadersOnLoad) == 0x000001, "Wrong size on OFGameUserSettings_GetCreateShadersOnLoad");
static_assert(offsetof(OFGameUserSettings_GetCreateShadersOnLoad, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetCreateShadersOnLoad::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetGamma
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_GetGamma final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetGamma) == 0x000004, "Wrong alignment on OFGameUserSettings_GetGamma");
static_assert(sizeof(OFGameUserSettings_GetGamma) == 0x000004, "Wrong size on OFGameUserSettings_GetGamma");
static_assert(offsetof(OFGameUserSettings_GetGamma, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetGamma::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetMotionBlurQuality
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_GetMotionBlurQuality final
{
public:
	EMotionBlurQuality                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetMotionBlurQuality) == 0x000001, "Wrong alignment on OFGameUserSettings_GetMotionBlurQuality");
static_assert(sizeof(OFGameUserSettings_GetMotionBlurQuality) == 0x000001, "Wrong size on OFGameUserSettings_GetMotionBlurQuality");
static_assert(offsetof(OFGameUserSettings_GetMotionBlurQuality, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetMotionBlurQuality::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetOFAmbientOcclusionQuality
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_GetOFAmbientOcclusionQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetOFAmbientOcclusionQuality) == 0x000004, "Wrong alignment on OFGameUserSettings_GetOFAmbientOcclusionQuality");
static_assert(sizeof(OFGameUserSettings_GetOFAmbientOcclusionQuality) == 0x000004, "Wrong size on OFGameUserSettings_GetOFAmbientOcclusionQuality");
static_assert(offsetof(OFGameUserSettings_GetOFAmbientOcclusionQuality, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetOFAmbientOcclusionQuality::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetOFAnisotropicFilteringQuality
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_GetOFAnisotropicFilteringQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetOFAnisotropicFilteringQuality) == 0x000004, "Wrong alignment on OFGameUserSettings_GetOFAnisotropicFilteringQuality");
static_assert(sizeof(OFGameUserSettings_GetOFAnisotropicFilteringQuality) == 0x000004, "Wrong size on OFGameUserSettings_GetOFAnisotropicFilteringQuality");
static_assert(offsetof(OFGameUserSettings_GetOFAnisotropicFilteringQuality, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetOFAnisotropicFilteringQuality::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetOFChromaticAberrationEnabled
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_GetOFChromaticAberrationEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetOFChromaticAberrationEnabled) == 0x000001, "Wrong alignment on OFGameUserSettings_GetOFChromaticAberrationEnabled");
static_assert(sizeof(OFGameUserSettings_GetOFChromaticAberrationEnabled) == 0x000001, "Wrong size on OFGameUserSettings_GetOFChromaticAberrationEnabled");
static_assert(offsetof(OFGameUserSettings_GetOFChromaticAberrationEnabled, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetOFChromaticAberrationEnabled::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetOFCurrentRenderSettingsAsText
// 0x0018 (0x0018 - 0x0000)
struct OFGameUserSettings_GetOFCurrentRenderSettingsAsText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetOFCurrentRenderSettingsAsText) == 0x000008, "Wrong alignment on OFGameUserSettings_GetOFCurrentRenderSettingsAsText");
static_assert(sizeof(OFGameUserSettings_GetOFCurrentRenderSettingsAsText) == 0x000018, "Wrong size on OFGameUserSettings_GetOFCurrentRenderSettingsAsText");
static_assert(offsetof(OFGameUserSettings_GetOFCurrentRenderSettingsAsText, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetOFCurrentRenderSettingsAsText::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetOFCurrentRenderSettingsSingleQualityLevel
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_GetOFCurrentRenderSettingsSingleQualityLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetOFCurrentRenderSettingsSingleQualityLevel) == 0x000004, "Wrong alignment on OFGameUserSettings_GetOFCurrentRenderSettingsSingleQualityLevel");
static_assert(sizeof(OFGameUserSettings_GetOFCurrentRenderSettingsSingleQualityLevel) == 0x000004, "Wrong size on OFGameUserSettings_GetOFCurrentRenderSettingsSingleQualityLevel");
static_assert(offsetof(OFGameUserSettings_GetOFCurrentRenderSettingsSingleQualityLevel, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetOFCurrentRenderSettingsSingleQualityLevel::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetOFDepthOfFieldEnabled
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_GetOFDepthOfFieldEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetOFDepthOfFieldEnabled) == 0x000001, "Wrong alignment on OFGameUserSettings_GetOFDepthOfFieldEnabled");
static_assert(sizeof(OFGameUserSettings_GetOFDepthOfFieldEnabled) == 0x000001, "Wrong size on OFGameUserSettings_GetOFDepthOfFieldEnabled");
static_assert(offsetof(OFGameUserSettings_GetOFDepthOfFieldEnabled, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetOFDepthOfFieldEnabled::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetOFDetailQuality
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_GetOFDetailQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetOFDetailQuality) == 0x000004, "Wrong alignment on OFGameUserSettings_GetOFDetailQuality");
static_assert(sizeof(OFGameUserSettings_GetOFDetailQuality) == 0x000004, "Wrong size on OFGameUserSettings_GetOFDetailQuality");
static_assert(offsetof(OFGameUserSettings_GetOFDetailQuality, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetOFDetailQuality::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetOFDLAAEnabled
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_GetOFDLAAEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetOFDLAAEnabled) == 0x000001, "Wrong alignment on OFGameUserSettings_GetOFDLAAEnabled");
static_assert(sizeof(OFGameUserSettings_GetOFDLAAEnabled) == 0x000001, "Wrong size on OFGameUserSettings_GetOFDLAAEnabled");
static_assert(offsetof(OFGameUserSettings_GetOFDLAAEnabled, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetOFDLAAEnabled::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetOFDLSSValue
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_GetOFDLSSValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetOFDLSSValue) == 0x000004, "Wrong alignment on OFGameUserSettings_GetOFDLSSValue");
static_assert(sizeof(OFGameUserSettings_GetOFDLSSValue) == 0x000004, "Wrong size on OFGameUserSettings_GetOFDLSSValue");
static_assert(offsetof(OFGameUserSettings_GetOFDLSSValue, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetOFDLSSValue::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetOFFrameRate
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_GetOFFrameRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetOFFrameRate) == 0x000004, "Wrong alignment on OFGameUserSettings_GetOFFrameRate");
static_assert(sizeof(OFGameUserSettings_GetOFFrameRate) == 0x000004, "Wrong size on OFGameUserSettings_GetOFFrameRate");
static_assert(offsetof(OFGameUserSettings_GetOFFrameRate, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetOFFrameRate::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetOFFSRValue
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_GetOFFSRValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetOFFSRValue) == 0x000004, "Wrong alignment on OFGameUserSettings_GetOFFSRValue");
static_assert(sizeof(OFGameUserSettings_GetOFFSRValue) == 0x000004, "Wrong size on OFGameUserSettings_GetOFFSRValue");
static_assert(offsetof(OFGameUserSettings_GetOFFSRValue, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetOFFSRValue::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetOFGraphicsMode
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_GetOFGraphicsMode final
{
public:
	EFGraphicsMode                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetOFGraphicsMode) == 0x000001, "Wrong alignment on OFGameUserSettings_GetOFGraphicsMode");
static_assert(sizeof(OFGameUserSettings_GetOFGraphicsMode) == 0x000001, "Wrong size on OFGameUserSettings_GetOFGraphicsMode");
static_assert(offsetof(OFGameUserSettings_GetOFGraphicsMode, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetOFGraphicsMode::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetOFParticlesQuality
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_GetOFParticlesQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetOFParticlesQuality) == 0x000004, "Wrong alignment on OFGameUserSettings_GetOFParticlesQuality");
static_assert(sizeof(OFGameUserSettings_GetOFParticlesQuality) == 0x000004, "Wrong size on OFGameUserSettings_GetOFParticlesQuality");
static_assert(offsetof(OFGameUserSettings_GetOFParticlesQuality, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetOFParticlesQuality::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetOFScreenSpaceReflectionsQuality
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_GetOFScreenSpaceReflectionsQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetOFScreenSpaceReflectionsQuality) == 0x000004, "Wrong alignment on OFGameUserSettings_GetOFScreenSpaceReflectionsQuality");
static_assert(sizeof(OFGameUserSettings_GetOFScreenSpaceReflectionsQuality) == 0x000004, "Wrong size on OFGameUserSettings_GetOFScreenSpaceReflectionsQuality");
static_assert(offsetof(OFGameUserSettings_GetOFScreenSpaceReflectionsQuality, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetOFScreenSpaceReflectionsQuality::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetOFShowSubtitles
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_GetOFShowSubtitles final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetOFShowSubtitles) == 0x000001, "Wrong alignment on OFGameUserSettings_GetOFShowSubtitles");
static_assert(sizeof(OFGameUserSettings_GetOFShowSubtitles) == 0x000001, "Wrong size on OFGameUserSettings_GetOFShowSubtitles");
static_assert(offsetof(OFGameUserSettings_GetOFShowSubtitles, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetOFShowSubtitles::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetOFSubSurfaceScatteringQuality
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_GetOFSubSurfaceScatteringQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetOFSubSurfaceScatteringQuality) == 0x000004, "Wrong alignment on OFGameUserSettings_GetOFSubSurfaceScatteringQuality");
static_assert(sizeof(OFGameUserSettings_GetOFSubSurfaceScatteringQuality) == 0x000004, "Wrong size on OFGameUserSettings_GetOFSubSurfaceScatteringQuality");
static_assert(offsetof(OFGameUserSettings_GetOFSubSurfaceScatteringQuality, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetOFSubSurfaceScatteringQuality::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetOFVolumetricQuality
// 0x0004 (0x0004 - 0x0000)
struct OFGameUserSettings_GetOFVolumetricQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetOFVolumetricQuality) == 0x000004, "Wrong alignment on OFGameUserSettings_GetOFVolumetricQuality");
static_assert(sizeof(OFGameUserSettings_GetOFVolumetricQuality) == 0x000004, "Wrong size on OFGameUserSettings_GetOFVolumetricQuality");
static_assert(offsetof(OFGameUserSettings_GetOFVolumetricQuality, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetOFVolumetricQuality::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetPostEffectExtra
// 0x0010 (0x0010 - 0x0000)
struct OFGameUserSettings_GetPostEffectExtra final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPostEffectExtra                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFGameUserSettings_GetPostEffectExtra) == 0x000008, "Wrong alignment on OFGameUserSettings_GetPostEffectExtra");
static_assert(sizeof(OFGameUserSettings_GetPostEffectExtra) == 0x000010, "Wrong size on OFGameUserSettings_GetPostEffectExtra");
static_assert(offsetof(OFGameUserSettings_GetPostEffectExtra, WorldContext) == 0x000000, "Member 'OFGameUserSettings_GetPostEffectExtra::WorldContext' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_GetPostEffectExtra, ReturnValue) == 0x000008, "Member 'OFGameUserSettings_GetPostEffectExtra::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetSlowHDDMode
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_GetSlowHDDMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetSlowHDDMode) == 0x000001, "Wrong alignment on OFGameUserSettings_GetSlowHDDMode");
static_assert(sizeof(OFGameUserSettings_GetSlowHDDMode) == 0x000001, "Wrong size on OFGameUserSettings_GetSlowHDDMode");
static_assert(offsetof(OFGameUserSettings_GetSlowHDDMode, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetSlowHDDMode::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetSubtitleSize
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_GetSubtitleSize final
{
public:
	ESubtitleSizes                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetSubtitleSize) == 0x000001, "Wrong alignment on OFGameUserSettings_GetSubtitleSize");
static_assert(sizeof(OFGameUserSettings_GetSubtitleSize) == 0x000001, "Wrong size on OFGameUserSettings_GetSubtitleSize");
static_assert(offsetof(OFGameUserSettings_GetSubtitleSize, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetSubtitleSize::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetTelemetryEnabled
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_GetTelemetryEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetTelemetryEnabled) == 0x000001, "Wrong alignment on OFGameUserSettings_GetTelemetryEnabled");
static_assert(sizeof(OFGameUserSettings_GetTelemetryEnabled) == 0x000001, "Wrong size on OFGameUserSettings_GetTelemetryEnabled");
static_assert(offsetof(OFGameUserSettings_GetTelemetryEnabled, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetTelemetryEnabled::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetTutorialsEnabled
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_GetTutorialsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_GetTutorialsEnabled) == 0x000001, "Wrong alignment on OFGameUserSettings_GetTutorialsEnabled");
static_assert(sizeof(OFGameUserSettings_GetTutorialsEnabled) == 0x000001, "Wrong size on OFGameUserSettings_GetTutorialsEnabled");
static_assert(offsetof(OFGameUserSettings_GetTutorialsEnabled, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_GetTutorialsEnabled::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetUse1982Character
// 0x0010 (0x0010 - 0x0000)
struct OFGameUserSettings_GetUse1982Character final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFGameUserSettings_GetUse1982Character) == 0x000008, "Wrong alignment on OFGameUserSettings_GetUse1982Character");
static_assert(sizeof(OFGameUserSettings_GetUse1982Character) == 0x000010, "Wrong size on OFGameUserSettings_GetUse1982Character");
static_assert(offsetof(OFGameUserSettings_GetUse1982Character, WorldContext) == 0x000000, "Member 'OFGameUserSettings_GetUse1982Character::WorldContext' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_GetUse1982Character, ReturnValue) == 0x000008, "Member 'OFGameUserSettings_GetUse1982Character::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.GetUseDeveloperCommentary
// 0x0010 (0x0010 - 0x0000)
struct OFGameUserSettings_GetUseDeveloperCommentary final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OFGameUserSettings_GetUseDeveloperCommentary) == 0x000008, "Wrong alignment on OFGameUserSettings_GetUseDeveloperCommentary");
static_assert(sizeof(OFGameUserSettings_GetUseDeveloperCommentary) == 0x000010, "Wrong size on OFGameUserSettings_GetUseDeveloperCommentary");
static_assert(offsetof(OFGameUserSettings_GetUseDeveloperCommentary, WorldContext) == 0x000000, "Member 'OFGameUserSettings_GetUseDeveloperCommentary::WorldContext' has a wrong offset!");
static_assert(offsetof(OFGameUserSettings_GetUseDeveloperCommentary, ReturnValue) == 0x000008, "Member 'OFGameUserSettings_GetUseDeveloperCommentary::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.HasVideoSettingsChanged
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_HasVideoSettingsChanged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_HasVideoSettingsChanged) == 0x000001, "Wrong alignment on OFGameUserSettings_HasVideoSettingsChanged");
static_assert(sizeof(OFGameUserSettings_HasVideoSettingsChanged) == 0x000001, "Wrong size on OFGameUserSettings_HasVideoSettingsChanged");
static_assert(offsetof(OFGameUserSettings_HasVideoSettingsChanged, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_HasVideoSettingsChanged::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.IsForceFeedbackEnabled
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_IsForceFeedbackEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_IsForceFeedbackEnabled) == 0x000001, "Wrong alignment on OFGameUserSettings_IsForceFeedbackEnabled");
static_assert(sizeof(OFGameUserSettings_IsForceFeedbackEnabled) == 0x000001, "Wrong size on OFGameUserSettings_IsForceFeedbackEnabled");
static_assert(offsetof(OFGameUserSettings_IsForceFeedbackEnabled, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_IsForceFeedbackEnabled::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.IsHDREnabledForDisplay
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_IsHDREnabledForDisplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_IsHDREnabledForDisplay) == 0x000001, "Wrong alignment on OFGameUserSettings_IsHDREnabledForDisplay");
static_assert(sizeof(OFGameUserSettings_IsHDREnabledForDisplay) == 0x000001, "Wrong size on OFGameUserSettings_IsHDREnabledForDisplay");
static_assert(offsetof(OFGameUserSettings_IsHDREnabledForDisplay, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_IsHDREnabledForDisplay::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFGameUserSettings.ShouldRunBenchmark
// 0x0001 (0x0001 - 0x0000)
struct OFGameUserSettings_ShouldRunBenchmark final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFGameUserSettings_ShouldRunBenchmark) == 0x000001, "Wrong alignment on OFGameUserSettings_ShouldRunBenchmark");
static_assert(sizeof(OFGameUserSettings_ShouldRunBenchmark) == 0x000001, "Wrong size on OFGameUserSettings_ShouldRunBenchmark");
static_assert(offsetof(OFGameUserSettings_ShouldRunBenchmark, ReturnValue) == 0x000000, "Member 'OFGameUserSettings_ShouldRunBenchmark::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFSaveGameDataSubsystem.SetDifficulty
// 0x0001 (0x0001 - 0x0000)
struct OFSaveGameDataSubsystem_SetDifficulty final
{
public:
	EDifficulty                                   NewDifficulty;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFSaveGameDataSubsystem_SetDifficulty) == 0x000001, "Wrong alignment on OFSaveGameDataSubsystem_SetDifficulty");
static_assert(sizeof(OFSaveGameDataSubsystem_SetDifficulty) == 0x000001, "Wrong size on OFSaveGameDataSubsystem_SetDifficulty");
static_assert(offsetof(OFSaveGameDataSubsystem_SetDifficulty, NewDifficulty) == 0x000000, "Member 'OFSaveGameDataSubsystem_SetDifficulty::NewDifficulty' has a wrong offset!");

// Function ObsidianFoxSettings.OFSaveGameDataSubsystem.SetPlayerGuidanceLevel
// 0x0001 (0x0001 - 0x0000)
struct OFSaveGameDataSubsystem_SetPlayerGuidanceLevel final
{
public:
	EPlayerGuidanceLevel                          GuidanceLevel;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFSaveGameDataSubsystem_SetPlayerGuidanceLevel) == 0x000001, "Wrong alignment on OFSaveGameDataSubsystem_SetPlayerGuidanceLevel");
static_assert(sizeof(OFSaveGameDataSubsystem_SetPlayerGuidanceLevel) == 0x000001, "Wrong size on OFSaveGameDataSubsystem_SetPlayerGuidanceLevel");
static_assert(offsetof(OFSaveGameDataSubsystem_SetPlayerGuidanceLevel, GuidanceLevel) == 0x000000, "Member 'OFSaveGameDataSubsystem_SetPlayerGuidanceLevel::GuidanceLevel' has a wrong offset!");

// Function ObsidianFoxSettings.OFSaveGameDataSubsystem.SetPlayerGuidanceSystemState
// 0x0002 (0x0002 - 0x0000)
struct OFSaveGameDataSubsystem_SetPlayerGuidanceSystemState final
{
public:
	EPlayerGuidanceSystem                         GuidanceSystem;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bState;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFSaveGameDataSubsystem_SetPlayerGuidanceSystemState) == 0x000001, "Wrong alignment on OFSaveGameDataSubsystem_SetPlayerGuidanceSystemState");
static_assert(sizeof(OFSaveGameDataSubsystem_SetPlayerGuidanceSystemState) == 0x000002, "Wrong size on OFSaveGameDataSubsystem_SetPlayerGuidanceSystemState");
static_assert(offsetof(OFSaveGameDataSubsystem_SetPlayerGuidanceSystemState, GuidanceSystem) == 0x000000, "Member 'OFSaveGameDataSubsystem_SetPlayerGuidanceSystemState::GuidanceSystem' has a wrong offset!");
static_assert(offsetof(OFSaveGameDataSubsystem_SetPlayerGuidanceSystemState, bState) == 0x000001, "Member 'OFSaveGameDataSubsystem_SetPlayerGuidanceSystemState::bState' has a wrong offset!");

// Function ObsidianFoxSettings.OFSaveGameDataSubsystem.GetCurrentDifficulty
// 0x0001 (0x0001 - 0x0000)
struct OFSaveGameDataSubsystem_GetCurrentDifficulty final
{
public:
	EDifficulty                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFSaveGameDataSubsystem_GetCurrentDifficulty) == 0x000001, "Wrong alignment on OFSaveGameDataSubsystem_GetCurrentDifficulty");
static_assert(sizeof(OFSaveGameDataSubsystem_GetCurrentDifficulty) == 0x000001, "Wrong size on OFSaveGameDataSubsystem_GetCurrentDifficulty");
static_assert(offsetof(OFSaveGameDataSubsystem_GetCurrentDifficulty, ReturnValue) == 0x000000, "Member 'OFSaveGameDataSubsystem_GetCurrentDifficulty::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFSaveGameDataSubsystem.GetPlayerGuidanceLevel
// 0x0001 (0x0001 - 0x0000)
struct OFSaveGameDataSubsystem_GetPlayerGuidanceLevel final
{
public:
	EPlayerGuidanceLevel                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFSaveGameDataSubsystem_GetPlayerGuidanceLevel) == 0x000001, "Wrong alignment on OFSaveGameDataSubsystem_GetPlayerGuidanceLevel");
static_assert(sizeof(OFSaveGameDataSubsystem_GetPlayerGuidanceLevel) == 0x000001, "Wrong size on OFSaveGameDataSubsystem_GetPlayerGuidanceLevel");
static_assert(offsetof(OFSaveGameDataSubsystem_GetPlayerGuidanceLevel, ReturnValue) == 0x000000, "Member 'OFSaveGameDataSubsystem_GetPlayerGuidanceLevel::ReturnValue' has a wrong offset!");

// Function ObsidianFoxSettings.OFSaveGameDataSubsystem.GetPlayerGuidanceSystemState
// 0x0002 (0x0002 - 0x0000)
struct OFSaveGameDataSubsystem_GetPlayerGuidanceSystemState final
{
public:
	EPlayerGuidanceSystem                         GuidanceSystem;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OFSaveGameDataSubsystem_GetPlayerGuidanceSystemState) == 0x000001, "Wrong alignment on OFSaveGameDataSubsystem_GetPlayerGuidanceSystemState");
static_assert(sizeof(OFSaveGameDataSubsystem_GetPlayerGuidanceSystemState) == 0x000002, "Wrong size on OFSaveGameDataSubsystem_GetPlayerGuidanceSystemState");
static_assert(offsetof(OFSaveGameDataSubsystem_GetPlayerGuidanceSystemState, GuidanceSystem) == 0x000000, "Member 'OFSaveGameDataSubsystem_GetPlayerGuidanceSystemState::GuidanceSystem' has a wrong offset!");
static_assert(offsetof(OFSaveGameDataSubsystem_GetPlayerGuidanceSystemState, ReturnValue) == 0x000001, "Member 'OFSaveGameDataSubsystem_GetPlayerGuidanceSystemState::ReturnValue' has a wrong offset!");

}

