#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BFGTickOptimizer

#include "Basic.hpp"


namespace SDK
{

// ScriptStruct BFGTickOptimizer.BFGTickOptimizer_ReferenceEntry
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FBFGTickOptimizer_ReferenceEntry final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBFGTickOptimizer_ReferenceEntry) == 0x000008, "Wrong alignment on FBFGTickOptimizer_ReferenceEntry");
static_assert(sizeof(FBFGTickOptimizer_ReferenceEntry) == 0x000058, "Wrong size on FBFGTickOptimizer_ReferenceEntry");

// ScriptStruct BFGTickOptimizer.BFGTickOptimizerLODLevel
// 0x0028 (0x0028 - 0x0000)
struct FBFGTickOptimizerLODLevel final
{
public:
	class FName                                   M_nTagName;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   M_tDescriptiveName;                                // 0x0008(0x0018)(NativeAccessSpecifierPublic)
	float                                         M_Distance;                                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         M_AmortizationRate;                                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBFGTickOptimizerLODLevel) == 0x000008, "Wrong alignment on FBFGTickOptimizerLODLevel");
static_assert(sizeof(FBFGTickOptimizerLODLevel) == 0x000028, "Wrong size on FBFGTickOptimizerLODLevel");
static_assert(offsetof(FBFGTickOptimizerLODLevel, M_nTagName) == 0x000000, "Member 'FBFGTickOptimizerLODLevel::M_nTagName' has a wrong offset!");
static_assert(offsetof(FBFGTickOptimizerLODLevel, M_tDescriptiveName) == 0x000008, "Member 'FBFGTickOptimizerLODLevel::M_tDescriptiveName' has a wrong offset!");
static_assert(offsetof(FBFGTickOptimizerLODLevel, M_Distance) == 0x000020, "Member 'FBFGTickOptimizerLODLevel::M_Distance' has a wrong offset!");
static_assert(offsetof(FBFGTickOptimizerLODLevel, M_AmortizationRate) == 0x000024, "Member 'FBFGTickOptimizerLODLevel::M_AmortizationRate' has a wrong offset!");

}

