#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DaedalicTestAutomationPlugin

#include "Basic.hpp"

#include "Gauntlet_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "DaedalicTestAutomationPlugin_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class DaedalicTestAutomationPlugin.DaeGauntletTestController
// 0x0030 (0x0060 - 0x0030)
class UDaeGauntletTestController : public UGauntletTestController
{
public:
	uint8                                         Pad_30[0x30];                                      // 0x0030(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeLevel();
	void DiscoverTests();
	void OnTestSuiteFinished(class ADaeTestSuiteActor* TestSuite);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaeGauntletTestController">();
	}
	static class UDaeGauntletTestController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaeGauntletTestController>();
	}
};
static_assert(alignof(UDaeGauntletTestController) == 0x000008, "Wrong alignment on UDaeGauntletTestController");
static_assert(sizeof(UDaeGauntletTestController) == 0x000060, "Wrong size on UDaeGauntletTestController");

// Class DaedalicTestAutomationPlugin.DaeTestActor
// 0x0078 (0x02B0 - 0x0238)
class ADaeTestActor : public AActor
{
public:
	uint8                                         Pad_238[0x30];                                     // 0x0238(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeoutInSeconds;                                  // 0x0268(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SkipReason;                                        // 0x0270(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TSoftObjectPtr<class UObject>>         Parameters;                                        // 0x0280(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class ADaeTestParameterProviderActor*> ParameterProviders;                                // 0x0290(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class UObject*                                CurrentParameter;                                  // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A8[0x8];                                      // 0x02A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FinishAct();
	void ReceiveOnAct(class UObject* Parameter);
	void ReceiveOnArrange(class UObject* Parameter);
	void ReceiveOnAssert(class UObject* Parameter);
	void ReceiveOnAssume(class UObject* Parameter);

	class UObject* GetCurrentParameter() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaeTestActor">();
	}
	static class ADaeTestActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADaeTestActor>();
	}
};
static_assert(alignof(ADaeTestActor) == 0x000008, "Wrong alignment on ADaeTestActor");
static_assert(sizeof(ADaeTestActor) == 0x0002B0, "Wrong size on ADaeTestActor");
static_assert(offsetof(ADaeTestActor, TimeoutInSeconds) == 0x000268, "Member 'ADaeTestActor::TimeoutInSeconds' has a wrong offset!");
static_assert(offsetof(ADaeTestActor, SkipReason) == 0x000270, "Member 'ADaeTestActor::SkipReason' has a wrong offset!");
static_assert(offsetof(ADaeTestActor, Parameters) == 0x000280, "Member 'ADaeTestActor::Parameters' has a wrong offset!");
static_assert(offsetof(ADaeTestActor, ParameterProviders) == 0x000290, "Member 'ADaeTestActor::ParameterProviders' has a wrong offset!");
static_assert(offsetof(ADaeTestActor, CurrentParameter) == 0x0002A0, "Member 'ADaeTestActor::CurrentParameter' has a wrong offset!");

// Class DaedalicTestAutomationPlugin.DaeTestActorBlueprint
// 0x0000 (0x00A0 - 0x00A0)
class UDaeTestActorBlueprint final : public UBlueprint
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaeTestActorBlueprint">();
	}
	static class UDaeTestActorBlueprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaeTestActorBlueprint>();
	}
};
static_assert(alignof(UDaeTestActorBlueprint) == 0x000008, "Wrong alignment on UDaeTestActorBlueprint");
static_assert(sizeof(UDaeTestActorBlueprint) == 0x0000A0, "Wrong size on UDaeTestActorBlueprint");

// Class DaedalicTestAutomationPlugin.DaeTestAssertBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UDaeTestAssertBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AssertCompareByte(uint8 First, EDaeTestComparisonMethod ShouldBe, uint8 Second, const class FString& What, class UObject* Context);
	static void AssertCompareFloat(float First, EDaeTestComparisonMethod ShouldBe, float Second, const class FString& What, class UObject* Context);
	static void AssertCompareInt32(int32 First, EDaeTestComparisonMethod ShouldBe, int32 Second, const class FString& What, class UObject* Context);
	static void AssertCompareInt64(int64 First, EDaeTestComparisonMethod ShouldBe, int64 Second, const class FString& What, class UObject* Context);
	static void AssertEqualByte(uint8 Actual, uint8 Expected, const class FString& What, class UObject* Context);
	static void AssertEqualFloat(float Actual, float Expected, const class FString& What, class UObject* Context, const float Tolerance);
	static void AssertEqualInt32(int32 Actual, int32 Expected, const class FString& What, class UObject* Context);
	static void AssertEqualInt64(int64 Actual, int64 Expected, const class FString& What, class UObject* Context);
	static void AssertEqualName(const class FName& Actual, const class FName& Expected, bool bIgnoreCase, const class FString& What, class UObject* Context);
	static void AssertEqualRotator(const struct FRotator& Actual, const struct FRotator& Expected, const class FString& What, class UObject* Context, const float Tolerance);
	static void AssertEqualString(const class FString& Actual, const class FString& Expected, bool bIgnoreCase, const class FString& What, class UObject* Context);
	static void AssertEqualText(const class FText& Actual, const class FText& Expected, bool bIgnoreCase, const class FString& What, class UObject* Context);
	static void AssertEqualTransform(const struct FTransform& Actual, const struct FTransform& Expected, const class FString& What, class UObject* Context, const float Tolerance);
	static void AssertEqualVector(const struct FVector& Actual, const struct FVector& Expected, const class FString& What, class UObject* Context, const float Tolerance);
	static void AssertFail(const class FString& What, class UObject* Context);
	static void AssertFalse(bool bValue, const class FString& What, class UObject* Context);
	static void AssertImageIsSet(class UImage* Image, const class FString& What, class UObject* Context);
	static void AssertInRangeByte(uint8 Value, uint8 MinInclusive, uint8 MaxInclusive, const class FString& What, class UObject* Context);
	static void AssertInRangeFloat(float Value, float MinInclusive, float MaxInclusive, const class FString& What, class UObject* Context);
	static void AssertInRangeInt32(int32 Value, int32 MinInclusive, int32 MaxInclusive, const class FString& What, class UObject* Context);
	static void AssertInRangeInt64(int64 Value, int64 MinInclusive, int64 MaxInclusive, const class FString& What, class UObject* Context);
	static void AssertInvalid(class UObject* Object, const class FString& What, class UObject* Context);
	static void AssertNotEqualByte(uint8 Actual, uint8 Unexpected, const class FString& What, class UObject* Context);
	static void AssertNotEqualFloat(float Actual, float Unexpected, const class FString& What, class UObject* Context, const float Tolerance);
	static void AssertNotEqualInt32(int32 Actual, int32 Unexpected, const class FString& What, class UObject* Context);
	static void AssertNotEqualInt64(int64 Actual, int64 Unexpected, const class FString& What, class UObject* Context);
	static void AssertNotEqualName(const class FName& Actual, const class FName& Unexpected, bool bIgnoreCase, const class FString& What, class UObject* Context);
	static void AssertNotEqualRotator(const struct FRotator& Actual, const struct FRotator& Unexpected, const class FString& What, class UObject* Context, const float Tolerance);
	static void AssertNotEqualString(const class FString& Actual, const class FString& Unexpected, bool bIgnoreCase, const class FString& What, class UObject* Context);
	static void AssertNotEqualText(const class FText& Actual, const class FText& Unexpected, bool bIgnoreCase, const class FString& What, class UObject* Context);
	static void AssertNotEqualTransform(const struct FTransform& Actual, const struct FTransform& Unexpected, const class FString& What, class UObject* Context, const float Tolerance);
	static void AssertNotEqualVector(const struct FVector& Actual, const struct FVector& Unexpected, const class FString& What, class UObject* Context, const float Tolerance);
	static void AssertNotInRangeByte(uint8 Value, uint8 MinInclusive, uint8 MaxInclusive, const class FString& What, class UObject* Context);
	static void AssertNotInRangeFloat(float Value, float MinInclusive, float MaxInclusive, const class FString& What, class UObject* Context);
	static void AssertNotInRangeInt32(int32 Value, int32 MinInclusive, int32 MaxInclusive, const class FString& What, class UObject* Context);
	static void AssertNotInRangeInt64(int64 Value, int64 MinInclusive, int64 MaxInclusive, const class FString& What, class UObject* Context);
	static void AssertRichTextIsSet(class URichTextBlock* RichTextBlock, const class FString& What, class UObject* Context);
	static void AssertTextIsSet(class UTextBlock* TextBlock, const class FString& What, class UObject* Context);
	static void AssertTrue(bool bValue, const class FString& What, class UObject* Context);
	static void AssertValid(class UObject* Object, const class FString& What, class UObject* Context);
	static void AssertWasNotTriggered(class ADaeTestTriggerBox* TestTriggerBox, class UObject* Context);
	static void AssertWasTriggered(class ADaeTestTriggerBox* TestTriggerBox, class UObject* Context);
	static void AssertWidgetIsVisible(class UUserWidget* Widget, const class FString& What, class UObject* Context);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaeTestAssertBlueprintFunctionLibrary">();
	}
	static class UDaeTestAssertBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaeTestAssertBlueprintFunctionLibrary>();
	}
};
static_assert(alignof(UDaeTestAssertBlueprintFunctionLibrary) == 0x000008, "Wrong alignment on UDaeTestAssertBlueprintFunctionLibrary");
static_assert(sizeof(UDaeTestAssertBlueprintFunctionLibrary) == 0x000028, "Wrong size on UDaeTestAssertBlueprintFunctionLibrary");

// Class DaedalicTestAutomationPlugin.DaeTestAssumeBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UDaeTestAssumeBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AssumeFalse(bool bValue, const class FString& What, class UObject* Context);
	static void AssumeTrue(bool bValue, const class FString& What, class UObject* Context);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaeTestAssumeBlueprintFunctionLibrary">();
	}
	static class UDaeTestAssumeBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaeTestAssumeBlueprintFunctionLibrary>();
	}
};
static_assert(alignof(UDaeTestAssumeBlueprintFunctionLibrary) == 0x000008, "Wrong alignment on UDaeTestAssumeBlueprintFunctionLibrary");
static_assert(sizeof(UDaeTestAssumeBlueprintFunctionLibrary) == 0x000028, "Wrong size on UDaeTestAssumeBlueprintFunctionLibrary");

// Class DaedalicTestAutomationPlugin.DaeTestAutomationPluginSettings
// 0x00A8 (0x00D0 - 0x0028)
class UDaeTestAutomationPluginSettings final : public UObject
{
public:
	class FString                                 TestMapPath;                                       // 0x0028(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         TestMapFolders;                                    // 0x0038(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FName>                           AdditionalTestMaps;                                // 0x0048(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FName>                           IgnoredMaps;                                       // 0x0058(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ConsoleVariables;                                  // 0x0068(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x18];                                      // 0x00B8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaeTestAutomationPluginSettings">();
	}
	static class UDaeTestAutomationPluginSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaeTestAutomationPluginSettings>();
	}
};
static_assert(alignof(UDaeTestAutomationPluginSettings) == 0x000008, "Wrong alignment on UDaeTestAutomationPluginSettings");
static_assert(sizeof(UDaeTestAutomationPluginSettings) == 0x0000D0, "Wrong size on UDaeTestAutomationPluginSettings");
static_assert(offsetof(UDaeTestAutomationPluginSettings, TestMapPath) == 0x000028, "Member 'UDaeTestAutomationPluginSettings::TestMapPath' has a wrong offset!");
static_assert(offsetof(UDaeTestAutomationPluginSettings, TestMapFolders) == 0x000038, "Member 'UDaeTestAutomationPluginSettings::TestMapFolders' has a wrong offset!");
static_assert(offsetof(UDaeTestAutomationPluginSettings, AdditionalTestMaps) == 0x000048, "Member 'UDaeTestAutomationPluginSettings::AdditionalTestMaps' has a wrong offset!");
static_assert(offsetof(UDaeTestAutomationPluginSettings, IgnoredMaps) == 0x000058, "Member 'UDaeTestAutomationPluginSettings::IgnoredMaps' has a wrong offset!");
static_assert(offsetof(UDaeTestAutomationPluginSettings, ConsoleVariables) == 0x000068, "Member 'UDaeTestAutomationPluginSettings::ConsoleVariables' has a wrong offset!");

// Class DaedalicTestAutomationPlugin.DaeTestDelayBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UDaeTestDelayBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void DelayFrames(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, int32 NumFrames);
	static void DelayUntilTriggered(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, class ADaeTestTriggerBox* TestTriggerBox);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaeTestDelayBlueprintFunctionLibrary">();
	}
	static class UDaeTestDelayBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaeTestDelayBlueprintFunctionLibrary>();
	}
};
static_assert(alignof(UDaeTestDelayBlueprintFunctionLibrary) == 0x000008, "Wrong alignment on UDaeTestDelayBlueprintFunctionLibrary");
static_assert(sizeof(UDaeTestDelayBlueprintFunctionLibrary) == 0x000028, "Wrong size on UDaeTestDelayBlueprintFunctionLibrary");

// Class DaedalicTestAutomationPlugin.DaeTestInputBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UDaeTestInputBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ApplyInputAction(class UObject* Context, const class FName& ActionName, EInputEvent InputEventType);
	static void ApplyInputAxis(class UObject* Context, const class FName& AxisName, float AxisValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaeTestInputBlueprintFunctionLibrary">();
	}
	static class UDaeTestInputBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaeTestInputBlueprintFunctionLibrary>();
	}
};
static_assert(alignof(UDaeTestInputBlueprintFunctionLibrary) == 0x000008, "Wrong alignment on UDaeTestInputBlueprintFunctionLibrary");
static_assert(sizeof(UDaeTestInputBlueprintFunctionLibrary) == 0x000028, "Wrong size on UDaeTestInputBlueprintFunctionLibrary");

// Class DaedalicTestAutomationPlugin.DaeTestParameterProviderActor
// 0x0000 (0x0238 - 0x0238)
class ADaeTestParameterProviderActor final : public AActor
{
public:
	TArray<class UObject*> GetParameters();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaeTestParameterProviderActor">();
	}
	static class ADaeTestParameterProviderActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADaeTestParameterProviderActor>();
	}
};
static_assert(alignof(ADaeTestParameterProviderActor) == 0x000008, "Wrong alignment on ADaeTestParameterProviderActor");
static_assert(sizeof(ADaeTestParameterProviderActor) == 0x000238, "Wrong size on ADaeTestParameterProviderActor");

// Class DaedalicTestAutomationPlugin.DaeTestParameterProviderActorBlueprint
// 0x0000 (0x00A0 - 0x00A0)
class UDaeTestParameterProviderActorBlueprint final : public UBlueprint
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaeTestParameterProviderActorBlueprint">();
	}
	static class UDaeTestParameterProviderActorBlueprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaeTestParameterProviderActorBlueprint>();
	}
};
static_assert(alignof(UDaeTestParameterProviderActorBlueprint) == 0x000008, "Wrong alignment on UDaeTestParameterProviderActorBlueprint");
static_assert(sizeof(UDaeTestParameterProviderActorBlueprint) == 0x0000A0, "Wrong size on UDaeTestParameterProviderActorBlueprint");

// Class DaedalicTestAutomationPlugin.DaeTestPerformanceBudgetActor
// 0x0088 (0x0338 - 0x02B0)
class ADaeTestPerformanceBudgetActor final : public ADaeTestActor
{
public:
	TArray<class ATargetPoint*>                   FlightPath;                                        // 0x02B0(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPrivate)
	TArray<class ACriticalPathTool*>              CriticalPathToolActor;                             // 0x02C0(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D0[0x8];                                      // 0x02D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class APawn>                      PawnClass;                                         // 0x02D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InitialDelay;                                      // 0x02E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FlightSpeed;                                       // 0x02E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AcceptanceRadius;                                  // 0x02E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BudgetViolationTimeout;                            // 0x02EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         GameThreadBudget;                                  // 0x02F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RenderThreadBudget;                                // 0x02F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         GPUBudget;                                         // 0x02F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIncludeInDefaultTestReport;                       // 0x02FC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2FD[0x3];                                      // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetPointOffset;                                 // 0x0300(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30C[0x2C];                                     // 0x030C(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaeTestPerformanceBudgetActor">();
	}
	static class ADaeTestPerformanceBudgetActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADaeTestPerformanceBudgetActor>();
	}
};
static_assert(alignof(ADaeTestPerformanceBudgetActor) == 0x000008, "Wrong alignment on ADaeTestPerformanceBudgetActor");
static_assert(sizeof(ADaeTestPerformanceBudgetActor) == 0x000338, "Wrong size on ADaeTestPerformanceBudgetActor");
static_assert(offsetof(ADaeTestPerformanceBudgetActor, FlightPath) == 0x0002B0, "Member 'ADaeTestPerformanceBudgetActor::FlightPath' has a wrong offset!");
static_assert(offsetof(ADaeTestPerformanceBudgetActor, CriticalPathToolActor) == 0x0002C0, "Member 'ADaeTestPerformanceBudgetActor::CriticalPathToolActor' has a wrong offset!");
static_assert(offsetof(ADaeTestPerformanceBudgetActor, PawnClass) == 0x0002D8, "Member 'ADaeTestPerformanceBudgetActor::PawnClass' has a wrong offset!");
static_assert(offsetof(ADaeTestPerformanceBudgetActor, InitialDelay) == 0x0002E0, "Member 'ADaeTestPerformanceBudgetActor::InitialDelay' has a wrong offset!");
static_assert(offsetof(ADaeTestPerformanceBudgetActor, FlightSpeed) == 0x0002E4, "Member 'ADaeTestPerformanceBudgetActor::FlightSpeed' has a wrong offset!");
static_assert(offsetof(ADaeTestPerformanceBudgetActor, AcceptanceRadius) == 0x0002E8, "Member 'ADaeTestPerformanceBudgetActor::AcceptanceRadius' has a wrong offset!");
static_assert(offsetof(ADaeTestPerformanceBudgetActor, BudgetViolationTimeout) == 0x0002EC, "Member 'ADaeTestPerformanceBudgetActor::BudgetViolationTimeout' has a wrong offset!");
static_assert(offsetof(ADaeTestPerformanceBudgetActor, GameThreadBudget) == 0x0002F0, "Member 'ADaeTestPerformanceBudgetActor::GameThreadBudget' has a wrong offset!");
static_assert(offsetof(ADaeTestPerformanceBudgetActor, RenderThreadBudget) == 0x0002F4, "Member 'ADaeTestPerformanceBudgetActor::RenderThreadBudget' has a wrong offset!");
static_assert(offsetof(ADaeTestPerformanceBudgetActor, GPUBudget) == 0x0002F8, "Member 'ADaeTestPerformanceBudgetActor::GPUBudget' has a wrong offset!");
static_assert(offsetof(ADaeTestPerformanceBudgetActor, bIncludeInDefaultTestReport) == 0x0002FC, "Member 'ADaeTestPerformanceBudgetActor::bIncludeInDefaultTestReport' has a wrong offset!");
static_assert(offsetof(ADaeTestPerformanceBudgetActor, TargetPointOffset) == 0x000300, "Member 'ADaeTestPerformanceBudgetActor::TargetPointOffset' has a wrong offset!");

// Class DaedalicTestAutomationPlugin.DaeTestSuiteActor
// 0x0078 (0x02B0 - 0x0238)
class ADaeTestSuiteActor final : public AActor
{
public:
	uint8                                         Pad_238[0x20];                                     // 0x0238(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADaeTestActor*>                  Tests;                                             // 0x0258(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPrivate)
	bool                                          bRunInPIE;                                         // 0x0268(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_269[0x47];                                     // 0x0269(0x0047)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTestFailed(class ADaeTestActor* Test, class UObject* Parameter, const class FString& FailureMessage);
	void OnTestSkipped(class ADaeTestActor* Test, class UObject* Parameter, const class FString& SkipReason);
	void OnTestSuccessful(class ADaeTestActor* Test, class UObject* Parameter);
	void ReceiveOnAfterAll();
	void ReceiveOnAfterEach();
	void ReceiveOnBeforeAll();
	void ReceiveOnBeforeEach();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaeTestSuiteActor">();
	}
	static class ADaeTestSuiteActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADaeTestSuiteActor>();
	}
};
static_assert(alignof(ADaeTestSuiteActor) == 0x000008, "Wrong alignment on ADaeTestSuiteActor");
static_assert(sizeof(ADaeTestSuiteActor) == 0x0002B0, "Wrong size on ADaeTestSuiteActor");
static_assert(offsetof(ADaeTestSuiteActor, Tests) == 0x000258, "Member 'ADaeTestSuiteActor::Tests' has a wrong offset!");
static_assert(offsetof(ADaeTestSuiteActor, bRunInPIE) == 0x000268, "Member 'ADaeTestSuiteActor::bRunInPIE' has a wrong offset!");

// Class DaedalicTestAutomationPlugin.DaeTestSuiteActorBlueprint
// 0x0000 (0x00A0 - 0x00A0)
class UDaeTestSuiteActorBlueprint final : public UBlueprint
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaeTestSuiteActorBlueprint">();
	}
	static class UDaeTestSuiteActorBlueprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDaeTestSuiteActorBlueprint>();
	}
};
static_assert(alignof(UDaeTestSuiteActorBlueprint) == 0x000008, "Wrong alignment on UDaeTestSuiteActorBlueprint");
static_assert(sizeof(UDaeTestSuiteActorBlueprint) == 0x0000A0, "Wrong size on UDaeTestSuiteActorBlueprint");

// Class DaedalicTestAutomationPlugin.DaeTestTriggerBox
// 0x0008 (0x0248 - 0x0240)
class ADaeTestTriggerBox final : public ATriggerBox
{
public:
	uint8                                         Pad_240[0x8];                                      // 0x0240(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnActorBeginOverlapBroadcast(class AActor* OverlappedActor, class AActor* OtherActor);

	bool WasTriggered() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DaeTestTriggerBox">();
	}
	static class ADaeTestTriggerBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADaeTestTriggerBox>();
	}
};
static_assert(alignof(ADaeTestTriggerBox) == 0x000008, "Wrong alignment on ADaeTestTriggerBox");
static_assert(sizeof(ADaeTestTriggerBox) == 0x000248, "Wrong size on ADaeTestTriggerBox");

}

