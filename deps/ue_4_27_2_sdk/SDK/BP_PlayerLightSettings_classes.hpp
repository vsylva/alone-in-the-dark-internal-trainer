#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerLightSettings

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerLightSettings.BP_PlayerLightSettings_C
// 0x0128 (0x0360 - 0x0238)
class ABP_PlayerLightSettings_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          OverlapBox;                                        // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         FlashlightLerp_Lerp_29CFDF1F40820707845B19BED2218D81; // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FlashlightLerp__Direction_29CFDF1F40820707845B19BED2218D81; // 0x024C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24D[0x3];                                      // 0x024D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FlashlightLerp;                                    // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lerp_Lerp_571859674C2D22AA26622E949C0E9A66;        // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Lerp__Direction_571859674C2D22AA26622E949C0E9A66;  // 0x025C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25D[0x3];                                      // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Lerp;                                              // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Intensity;                                         // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InterpSpeed;                                       // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 Intensities;                                       // 0x0270(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UPointLightComponent*>           PointLights;                                       // 0x0280(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<EObjectTypeQuery>                      Object_Types;                                      // 0x0290(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTransform                             Component_Transform;                               // 0x02A0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         Priority;                                          // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PlayerLightSettings_C*>      OtherVolumes;                                      // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<int32>                                 OtherPriorities;                                   // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<float>                                 AttenuationRadiuses;                               // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<float>                                 LightFalloffExponents;                             // 0x0308(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         AttenuationRadius;                                 // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FalloffExponent;                                   // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Overlapping_Actors;                                // 0x0320(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         Flashlight_Intensity;                              // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreviousFlashlightIntensity;                       // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULightComponent*                        Flashlight;                                        // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  PlayerPawn;                                        // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULightComponent*                        FlashLightFill;                                    // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Flashlight_Fill_Intensity_Fraction;                // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PlayerLightSettings(int32 EntryPoint);
	void PlayerIsOverlapping();
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void FlashlightLerp__UpdateFunc();
	void FlashlightLerp__FinishedFunc();
	void Lerp__UpdateFunc();
	void Lerp__FinishedFunc();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerLightSettings_C">();
	}
	static class ABP_PlayerLightSettings_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerLightSettings_C>();
	}
};
static_assert(alignof(ABP_PlayerLightSettings_C) == 0x000010, "Wrong alignment on ABP_PlayerLightSettings_C");
static_assert(sizeof(ABP_PlayerLightSettings_C) == 0x000360, "Wrong size on ABP_PlayerLightSettings_C");
static_assert(offsetof(ABP_PlayerLightSettings_C, UberGraphFrame) == 0x000238, "Member 'ABP_PlayerLightSettings_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, OverlapBox) == 0x000240, "Member 'ABP_PlayerLightSettings_C::OverlapBox' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, FlashlightLerp_Lerp_29CFDF1F40820707845B19BED2218D81) == 0x000248, "Member 'ABP_PlayerLightSettings_C::FlashlightLerp_Lerp_29CFDF1F40820707845B19BED2218D81' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, FlashlightLerp__Direction_29CFDF1F40820707845B19BED2218D81) == 0x00024C, "Member 'ABP_PlayerLightSettings_C::FlashlightLerp__Direction_29CFDF1F40820707845B19BED2218D81' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, FlashlightLerp) == 0x000250, "Member 'ABP_PlayerLightSettings_C::FlashlightLerp' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, Lerp_Lerp_571859674C2D22AA26622E949C0E9A66) == 0x000258, "Member 'ABP_PlayerLightSettings_C::Lerp_Lerp_571859674C2D22AA26622E949C0E9A66' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, Lerp__Direction_571859674C2D22AA26622E949C0E9A66) == 0x00025C, "Member 'ABP_PlayerLightSettings_C::Lerp__Direction_571859674C2D22AA26622E949C0E9A66' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, Lerp) == 0x000260, "Member 'ABP_PlayerLightSettings_C::Lerp' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, Intensity) == 0x000268, "Member 'ABP_PlayerLightSettings_C::Intensity' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, InterpSpeed) == 0x00026C, "Member 'ABP_PlayerLightSettings_C::InterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, Intensities) == 0x000270, "Member 'ABP_PlayerLightSettings_C::Intensities' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, PointLights) == 0x000280, "Member 'ABP_PlayerLightSettings_C::PointLights' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, Object_Types) == 0x000290, "Member 'ABP_PlayerLightSettings_C::Object_Types' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, Component_Transform) == 0x0002A0, "Member 'ABP_PlayerLightSettings_C::Component_Transform' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, Priority) == 0x0002D0, "Member 'ABP_PlayerLightSettings_C::Priority' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, OtherVolumes) == 0x0002D8, "Member 'ABP_PlayerLightSettings_C::OtherVolumes' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, OtherPriorities) == 0x0002E8, "Member 'ABP_PlayerLightSettings_C::OtherPriorities' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, AttenuationRadiuses) == 0x0002F8, "Member 'ABP_PlayerLightSettings_C::AttenuationRadiuses' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, LightFalloffExponents) == 0x000308, "Member 'ABP_PlayerLightSettings_C::LightFalloffExponents' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, AttenuationRadius) == 0x000318, "Member 'ABP_PlayerLightSettings_C::AttenuationRadius' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, FalloffExponent) == 0x00031C, "Member 'ABP_PlayerLightSettings_C::FalloffExponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, Overlapping_Actors) == 0x000320, "Member 'ABP_PlayerLightSettings_C::Overlapping_Actors' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, Flashlight_Intensity) == 0x000330, "Member 'ABP_PlayerLightSettings_C::Flashlight_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, PreviousFlashlightIntensity) == 0x000334, "Member 'ABP_PlayerLightSettings_C::PreviousFlashlightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, Flashlight) == 0x000338, "Member 'ABP_PlayerLightSettings_C::Flashlight' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, PlayerPawn) == 0x000340, "Member 'ABP_PlayerLightSettings_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, FlashLightFill) == 0x000348, "Member 'ABP_PlayerLightSettings_C::FlashLightFill' has a wrong offset!");
static_assert(offsetof(ABP_PlayerLightSettings_C, Flashlight_Fill_Intensity_Fraction) == 0x000350, "Member 'ABP_PlayerLightSettings_C::Flashlight_Fill_Intensity_Fraction' has a wrong offset!");

}

