#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Attack_Base_Hitscan

#include "Basic.hpp"

#include "ObsidianFox_structs.hpp"
#include "WeaponUpgrades_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FMODStudio_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CemeteryCreatureType_structs.hpp"
#include "AnimationMontageIdentifier_structs.hpp"
#include "CharacterSize_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.ExecuteUbergraph_GA_Attack_Base_Hitscan
// 0x00C8 (0x00C8 - 0x0000)
struct GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitGameplayTagRemoved*    CallFunc_WaitGameplayTagRemove_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECemeteryCreatureType                         K2Node_Event_CreatureType;                         // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_CurrentProgress;                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_MaxProgress;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_StartVector;                          // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_EndVector;                            // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_FocusTarget;                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_Grapple_Location;                     // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAnimationMontageIdentifier                   K2Node_Event_Value;                                // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_currentHealthPercentage;              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UEquipmentManager*                      CallFunc_GetComponentByClass_ReturnValue;          // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHitscanWeaponActor*                    CallFunc_GetRangedWeapon_ReturnValue;              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHitscanWeaponActor*                    CallFunc_GetSourceHitscanWeapon_AsHitscan_Weapon_Actor; // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AnyAmmoLeft_ReturnValue;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_ImmuneActor;                    // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* ImmuneActor)>    K2Node_CreateDelegate_OutputDelegate_1;            // 0x009C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue; // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFactsDB*                               CallFunc_GetGameplaySessionSubsystem_ReturnValue;  // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryActivateAbilitiesByTag_ReturnValue;    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan) == 0x000008, "Wrong alignment on GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan) == 0x0000C8, "Wrong size on GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, EntryPoint) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, CallFunc_WaitGameplayTagRemove_ReturnValue) == 0x000018, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::CallFunc_WaitGameplayTagRemove_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, K2Node_Event_CreatureType) == 0x000021, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::K2Node_Event_CreatureType' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, K2Node_Event_CurrentProgress) == 0x000024, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::K2Node_Event_CurrentProgress' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, K2Node_Event_MaxProgress) == 0x000028, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::K2Node_Event_MaxProgress' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, K2Node_Event_StartVector) == 0x00002C, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::K2Node_Event_StartVector' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, K2Node_Event_EndVector) == 0x000038, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::K2Node_Event_EndVector' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, K2Node_Event_FocusTarget) == 0x000048, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::K2Node_Event_FocusTarget' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, K2Node_Event_Grapple_Location) == 0x000050, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::K2Node_Event_Grapple_Location' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, K2Node_Event_Value) == 0x00005C, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, K2Node_Event_currentHealthPercentage) == 0x000060, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::K2Node_Event_currentHealthPercentage' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000068, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, CallFunc_GetComponentByClass_ReturnValue) == 0x000070, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, CallFunc_GetRangedWeapon_ReturnValue) == 0x000078, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::CallFunc_GetRangedWeapon_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, CallFunc_GetSourceHitscanWeapon_AsHitscan_Weapon_Actor) == 0x000080, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::CallFunc_GetSourceHitscanWeapon_AsHitscan_Weapon_Actor' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, CallFunc_AnyAmmoLeft_ReturnValue) == 0x000088, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::CallFunc_AnyAmmoLeft_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, K2Node_CustomEvent_ImmuneActor) == 0x000090, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::K2Node_CustomEvent_ImmuneActor' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, CallFunc_DoesImplementInterface_ReturnValue) == 0x000098, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, K2Node_CreateDelegate_OutputDelegate_1) == 0x00009C, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue) == 0x0000B0, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::CallFunc_GetAbilitySystemComponentFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, CallFunc_GetGameplaySessionSubsystem_ReturnValue) == 0x0000B8, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::CallFunc_GetGameplaySessionSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan, CallFunc_TryActivateAbilitiesByTag_ReturnValue) == 0x0000C0, "Member 'GA_Attack_Base_Hitscan_C_ExecuteUbergraph_GA_Attack_Base_Hitscan::CallFunc_TryActivateAbilitiesByTag_ReturnValue' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.OnFireFailedDueToImmunity
// 0x0008 (0x0008 - 0x0000)
struct GA_Attack_Base_Hitscan_C_OnFireFailedDueToImmunity final
{
public:
	class AActor*                                 ImmuneActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_OnFireFailedDueToImmunity) == 0x000008, "Wrong alignment on GA_Attack_Base_Hitscan_C_OnFireFailedDueToImmunity");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_OnFireFailedDueToImmunity) == 0x000008, "Wrong size on GA_Attack_Base_Hitscan_C_OnFireFailedDueToImmunity");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_OnFireFailedDueToImmunity, ImmuneActor) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_OnFireFailedDueToImmunity::ImmuneActor' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.updateBossHealthData
// 0x0004 (0x0004 - 0x0000)
struct GA_Attack_Base_Hitscan_C_UpdateBossHealthData final
{
public:
	float                                         CurrentHealthPercentage;                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_UpdateBossHealthData) == 0x000004, "Wrong alignment on GA_Attack_Base_Hitscan_C_UpdateBossHealthData");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_UpdateBossHealthData) == 0x000004, "Wrong size on GA_Attack_Base_Hitscan_C_UpdateBossHealthData");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_UpdateBossHealthData, CurrentHealthPercentage) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_UpdateBossHealthData::CurrentHealthPercentage' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.SetMostSuitableMeleeSection
// 0x0001 (0x0001 - 0x0000)
struct GA_Attack_Base_Hitscan_C_SetMostSuitableMeleeSection final
{
public:
	EAnimationMontageIdentifier                   Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_SetMostSuitableMeleeSection) == 0x000001, "Wrong alignment on GA_Attack_Base_Hitscan_C_SetMostSuitableMeleeSection");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_SetMostSuitableMeleeSection) == 0x000001, "Wrong size on GA_Attack_Base_Hitscan_C_SetMostSuitableMeleeSection");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_SetMostSuitableMeleeSection, Value) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_SetMostSuitableMeleeSection::Value' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.MoveToGrappleLocatio
// 0x000C (0x000C - 0x0000)
struct GA_Attack_Base_Hitscan_C_MoveToGrappleLocatio final
{
public:
	struct FVector                                Grapple_Location;                                  // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_MoveToGrappleLocatio) == 0x000004, "Wrong alignment on GA_Attack_Base_Hitscan_C_MoveToGrappleLocatio");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_MoveToGrappleLocatio) == 0x00000C, "Wrong size on GA_Attack_Base_Hitscan_C_MoveToGrappleLocatio");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_MoveToGrappleLocatio, Grapple_Location) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_MoveToGrappleLocatio::Grapple_Location' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.ControlRotationFocus
// 0x0008 (0x0008 - 0x0000)
struct GA_Attack_Base_Hitscan_C_ControlRotationFocus final
{
public:
	class AActor*                                 FocusTarget;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_ControlRotationFocus) == 0x000008, "Wrong alignment on GA_Attack_Base_Hitscan_C_ControlRotationFocus");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_ControlRotationFocus) == 0x000008, "Wrong size on GA_Attack_Base_Hitscan_C_ControlRotationFocus");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ControlRotationFocus, FocusTarget) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_ControlRotationFocus::FocusTarget' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.MeleeAttackTranslate
// 0x0018 (0x0018 - 0x0000)
struct GA_Attack_Base_Hitscan_C_MeleeAttackTranslate final
{
public:
	struct FVector                                StartVector;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndVector;                                         // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_MeleeAttackTranslate) == 0x000004, "Wrong alignment on GA_Attack_Base_Hitscan_C_MeleeAttackTranslate");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_MeleeAttackTranslate) == 0x000018, "Wrong size on GA_Attack_Base_Hitscan_C_MeleeAttackTranslate");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_MeleeAttackTranslate, StartVector) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_MeleeAttackTranslate::StartVector' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_MeleeAttackTranslate, EndVector) == 0x00000C, "Member 'GA_Attack_Base_Hitscan_C_MeleeAttackTranslate::EndVector' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.QuicktimeInput
// 0x0008 (0x0008 - 0x0000)
struct GA_Attack_Base_Hitscan_C_QuicktimeInput final
{
public:
	float                                         CurrentProgress;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxProgress;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_QuicktimeInput) == 0x000004, "Wrong alignment on GA_Attack_Base_Hitscan_C_QuicktimeInput");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_QuicktimeInput) == 0x000008, "Wrong size on GA_Attack_Base_Hitscan_C_QuicktimeInput");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_QuicktimeInput, CurrentProgress) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_QuicktimeInput::CurrentProgress' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_QuicktimeInput, MaxProgress) == 0x000004, "Member 'GA_Attack_Base_Hitscan_C_QuicktimeInput::MaxProgress' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.SetCemeteryCreatureType
// 0x0001 (0x0001 - 0x0000)
struct GA_Attack_Base_Hitscan_C_SetCemeteryCreatureType final
{
public:
	ECemeteryCreatureType                         CreatureType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_SetCemeteryCreatureType) == 0x000001, "Wrong alignment on GA_Attack_Base_Hitscan_C_SetCemeteryCreatureType");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_SetCemeteryCreatureType) == 0x000001, "Wrong size on GA_Attack_Base_Hitscan_C_SetCemeteryCreatureType");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_SetCemeteryCreatureType, CreatureType) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_SetCemeteryCreatureType::CreatureType' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.ModifyDamageFromUpgrades
// 0x00A8 (0x00A8 - 0x0000)
struct GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades final
{
public:
	float                                         ModifiedDamage;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ModifiedDmg;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CombatInterface_C> K2Node_DynamicCast_AsBPI_Combat_Interface;         // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWeaponUpgradeComponent_C*              CallFunc_GetUpgradeComponent_UpgradeComponent;     // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeaponUpgrades                        CallFunc_Array_Get_Item;                           // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	EEvaluateCurveTableResult                     CallFunc_EvaluateCurveTableRow_OutResult;          // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_EvaluateCurveTableRow_OutXY;              // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades) == 0x000008, "Wrong alignment on GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades) == 0x0000A8, "Wrong size on GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades, ModifiedDamage) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades::ModifiedDamage' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades, ModifiedDmg) == 0x000004, "Member 'GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades::ModifiedDmg' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades, Temp_int_Array_Index_Variable) == 0x000010, "Member 'GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000018, "Member 'GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades, K2Node_DynamicCast_AsBPI_Combat_Interface) == 0x000020, "Member 'GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades::K2Node_DynamicCast_AsBPI_Combat_Interface' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades, CallFunc_GetUpgradeComponent_UpgradeComponent) == 0x000038, "Member 'GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades::CallFunc_GetUpgradeComponent_UpgradeComponent' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades, CallFunc_Array_Get_Item) == 0x000044, "Member 'GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades, CallFunc_Array_Length_ReturnValue) == 0x00004C, "Member 'GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000051, "Member 'GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000054, "Member 'GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades, CallFunc_Concat_StrStr_ReturnValue) == 0x000058, "Member 'GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades, CallFunc_EvaluateCurveTableRow_OutResult) == 0x000068, "Member 'GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades::CallFunc_EvaluateCurveTableRow_OutResult' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades, CallFunc_EvaluateCurveTableRow_OutXY) == 0x00006C, "Member 'GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades::CallFunc_EvaluateCurveTableRow_OutXY' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades, CallFunc_Conv_NameToString_ReturnValue) == 0x000070, "Member 'GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000080, "Member 'GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades, K2Node_SwitchEnum_CmpSuccess) == 0x000090, "Member 'GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000098, "Member 'GA_Attack_Base_Hitscan_C_ModifyDamageFromUpgrades::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.SetMontageToPlay
// 0x0108 (0x0108 - 0x0000)
struct GA_Attack_Base_Hitscan_C_SetMontageToPlay final
{
public:
	class AActor*                                 CallFunc_GetOwningActorFromActorInfo_ReturnValue;  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWeaponAnimationComponent*              CallFunc_GetComponentByClass_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOFPlayerCharacter*                     K2Node_DynamicCast_AsOFPlayer_Character;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWeaponAnimationDataAsset*              CallFunc_GetAnimations_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWeaponAnimationData                   CallFunc_GetAnimationDataForCharacter_ReturnValue; // 0x0028(0x00C8)()
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_DynamicCast_AsAnim_Montage;                 // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_SetMontageToPlay) == 0x000008, "Wrong alignment on GA_Attack_Base_Hitscan_C_SetMontageToPlay");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_SetMontageToPlay) == 0x000108, "Wrong size on GA_Attack_Base_Hitscan_C_SetMontageToPlay");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_SetMontageToPlay, CallFunc_GetOwningActorFromActorInfo_ReturnValue) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_SetMontageToPlay::CallFunc_GetOwningActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_SetMontageToPlay, CallFunc_GetComponentByClass_ReturnValue) == 0x000008, "Member 'GA_Attack_Base_Hitscan_C_SetMontageToPlay::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_SetMontageToPlay, K2Node_DynamicCast_AsOFPlayer_Character) == 0x000010, "Member 'GA_Attack_Base_Hitscan_C_SetMontageToPlay::K2Node_DynamicCast_AsOFPlayer_Character' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_SetMontageToPlay, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'GA_Attack_Base_Hitscan_C_SetMontageToPlay::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_SetMontageToPlay, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'GA_Attack_Base_Hitscan_C_SetMontageToPlay::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_SetMontageToPlay, CallFunc_GetAnimations_ReturnValue) == 0x000020, "Member 'GA_Attack_Base_Hitscan_C_SetMontageToPlay::CallFunc_GetAnimations_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_SetMontageToPlay, CallFunc_GetAnimationDataForCharacter_ReturnValue) == 0x000028, "Member 'GA_Attack_Base_Hitscan_C_SetMontageToPlay::CallFunc_GetAnimationDataForCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_SetMontageToPlay, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x0000F0, "Member 'GA_Attack_Base_Hitscan_C_SetMontageToPlay::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_SetMontageToPlay, K2Node_DynamicCast_AsAnim_Montage) == 0x0000F8, "Member 'GA_Attack_Base_Hitscan_C_SetMontageToPlay::K2Node_DynamicCast_AsAnim_Montage' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_SetMontageToPlay, K2Node_DynamicCast_bSuccess_1) == 0x000100, "Member 'GA_Attack_Base_Hitscan_C_SetMontageToPlay::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.Play Fire Force Feedback
// 0x0078 (0x0078 - 0x0000)
struct GA_Attack_Base_Hitscan_C_Play_Fire_Force_Feedback final
{
public:
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0000(0x0048)(ContainsInstancedReference)
	bool                                          CallFunc_IsGamepadLastInputTypeUsed_ReturnValue;   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackComponent*                CallFunc_SpawnForceFeedbackAtLocation_ReturnValue; // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_Play_Fire_Force_Feedback) == 0x000008, "Wrong alignment on GA_Attack_Base_Hitscan_C_Play_Fire_Force_Feedback");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_Play_Fire_Force_Feedback) == 0x000078, "Wrong size on GA_Attack_Base_Hitscan_C_Play_Fire_Force_Feedback");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_Play_Fire_Force_Feedback, CallFunc_GetActorInfo_ReturnValue) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_Play_Fire_Force_Feedback::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_Play_Fire_Force_Feedback, CallFunc_IsGamepadLastInputTypeUsed_ReturnValue) == 0x000048, "Member 'GA_Attack_Base_Hitscan_C_Play_Fire_Force_Feedback::CallFunc_IsGamepadLastInputTypeUsed_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_Play_Fire_Force_Feedback, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000050, "Member 'GA_Attack_Base_Hitscan_C_Play_Fire_Force_Feedback::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_Play_Fire_Force_Feedback, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000058, "Member 'GA_Attack_Base_Hitscan_C_Play_Fire_Force_Feedback::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_Play_Fire_Force_Feedback, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000064, "Member 'GA_Attack_Base_Hitscan_C_Play_Fire_Force_Feedback::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_Play_Fire_Force_Feedback, CallFunc_SpawnForceFeedbackAtLocation_ReturnValue) == 0x000070, "Member 'GA_Attack_Base_Hitscan_C_Play_Fire_Force_Feedback::CallFunc_SpawnForceFeedbackAtLocation_ReturnValue' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.MakeEffectSpecFromTargetData
// 0x00A0 (0x00A0 - 0x0000)
struct GA_Attack_Base_Hitscan_C_MakeEffectSpecFromTargetData final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0008(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         Level;                                             // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpecHandle              Effect_Spec_Handle;                                // 0x0038(0x0010)(Parm, OutParm)
	struct FGameplayEffectContextHandle           Effect_Context_Handle;                             // 0x0048(0x0018)(Parm, OutParm)
	struct FGameplayEffectSpecHandle              CallFunc_MakeEffectSpecFromTargetData_Effect_Spec_Handle; // 0x0060(0x0010)()
	struct FGameplayEffectContextHandle           CallFunc_MakeEffectSpecFromTargetData_Effect_Context_Handle; // 0x0070(0x0018)()
	float                                         CallFunc_ModifyDamageFromUpgrades_modifiedDamage;  // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpecHandle              CallFunc_AssignTagSetByCallerMagnitude_ReturnValue; // 0x0090(0x0010)()
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_MakeEffectSpecFromTargetData) == 0x000008, "Wrong alignment on GA_Attack_Base_Hitscan_C_MakeEffectSpecFromTargetData");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_MakeEffectSpecFromTargetData) == 0x0000A0, "Wrong size on GA_Attack_Base_Hitscan_C_MakeEffectSpecFromTargetData");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_MakeEffectSpecFromTargetData, GameplayEffectClass) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_MakeEffectSpecFromTargetData::GameplayEffectClass' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_MakeEffectSpecFromTargetData, TargetData) == 0x000008, "Member 'GA_Attack_Base_Hitscan_C_MakeEffectSpecFromTargetData::TargetData' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_MakeEffectSpecFromTargetData, Level) == 0x000030, "Member 'GA_Attack_Base_Hitscan_C_MakeEffectSpecFromTargetData::Level' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_MakeEffectSpecFromTargetData, Effect_Spec_Handle) == 0x000038, "Member 'GA_Attack_Base_Hitscan_C_MakeEffectSpecFromTargetData::Effect_Spec_Handle' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_MakeEffectSpecFromTargetData, Effect_Context_Handle) == 0x000048, "Member 'GA_Attack_Base_Hitscan_C_MakeEffectSpecFromTargetData::Effect_Context_Handle' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_MakeEffectSpecFromTargetData, CallFunc_MakeEffectSpecFromTargetData_Effect_Spec_Handle) == 0x000060, "Member 'GA_Attack_Base_Hitscan_C_MakeEffectSpecFromTargetData::CallFunc_MakeEffectSpecFromTargetData_Effect_Spec_Handle' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_MakeEffectSpecFromTargetData, CallFunc_MakeEffectSpecFromTargetData_Effect_Context_Handle) == 0x000070, "Member 'GA_Attack_Base_Hitscan_C_MakeEffectSpecFromTargetData::CallFunc_MakeEffectSpecFromTargetData_Effect_Context_Handle' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_MakeEffectSpecFromTargetData, CallFunc_ModifyDamageFromUpgrades_modifiedDamage) == 0x000088, "Member 'GA_Attack_Base_Hitscan_C_MakeEffectSpecFromTargetData::CallFunc_ModifyDamageFromUpgrades_modifiedDamage' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_MakeEffectSpecFromTargetData, CallFunc_AssignTagSetByCallerMagnitude_ReturnValue) == 0x000090, "Member 'GA_Attack_Base_Hitscan_C_MakeEffectSpecFromTargetData::CallFunc_AssignTagSetByCallerMagnitude_ReturnValue' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.Play Gun Click
// 0x0050 (0x0050 - 0x0000)
struct GA_Attack_Base_Hitscan_C_Play_Gun_Click final
{
public:
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0010(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FFMODEventInstance                     CallFunc_PlayEventAtLocation_ReturnValue;          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_Play_Gun_Click) == 0x000010, "Wrong alignment on GA_Attack_Base_Hitscan_C_Play_Gun_Click");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_Play_Gun_Click) == 0x000050, "Wrong size on GA_Attack_Base_Hitscan_C_Play_Gun_Click");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_Play_Gun_Click, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_Play_Gun_Click::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_Play_Gun_Click, CallFunc_GetTransform_ReturnValue) == 0x000010, "Member 'GA_Attack_Base_Hitscan_C_Play_Gun_Click::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_Play_Gun_Click, CallFunc_PlayEventAtLocation_ReturnValue) == 0x000040, "Member 'GA_Attack_Base_Hitscan_C_Play_Gun_Click::CallFunc_PlayEventAtLocation_ReturnValue' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.GetMostSuitableMeleeSection
// 0x0001 (0x0001 - 0x0000)
struct GA_Attack_Base_Hitscan_C_GetMostSuitableMeleeSection final
{
public:
	EAnimationMontageIdentifier                   Value;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_GetMostSuitableMeleeSection) == 0x000001, "Wrong alignment on GA_Attack_Base_Hitscan_C_GetMostSuitableMeleeSection");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_GetMostSuitableMeleeSection) == 0x000001, "Wrong size on GA_Attack_Base_Hitscan_C_GetMostSuitableMeleeSection");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_GetMostSuitableMeleeSection, Value) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_GetMostSuitableMeleeSection::Value' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.getAggroState
// 0x0001 (0x0001 - 0x0000)
struct GA_Attack_Base_Hitscan_C_GetAggroState final
{
public:
	bool                                          Aggro;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_GetAggroState) == 0x000001, "Wrong alignment on GA_Attack_Base_Hitscan_C_GetAggroState");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_GetAggroState) == 0x000001, "Wrong size on GA_Attack_Base_Hitscan_C_GetAggroState");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_GetAggroState, Aggro) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_GetAggroState::Aggro' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.setNewAggro
// 0x0002 (0x0002 - 0x0000)
struct GA_Attack_Base_Hitscan_C_SetNewAggro final
{
public:
	bool                                          NewAggro;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_SetNewAggro) == 0x000001, "Wrong alignment on GA_Attack_Base_Hitscan_C_SetNewAggro");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_SetNewAggro) == 0x000002, "Wrong size on GA_Attack_Base_Hitscan_C_SetNewAggro");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_SetNewAggro, NewAggro) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_SetNewAggro::NewAggro' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_SetNewAggro, Success) == 0x000001, "Member 'GA_Attack_Base_Hitscan_C_SetNewAggro::Success' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.IncrementJac3ProneCounter
// 0x0004 (0x0004 - 0x0000)
struct GA_Attack_Base_Hitscan_C_IncrementJac3ProneCounter final
{
public:
	int32                                         ProneCounter;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_IncrementJac3ProneCounter) == 0x000004, "Wrong alignment on GA_Attack_Base_Hitscan_C_IncrementJac3ProneCounter");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_IncrementJac3ProneCounter) == 0x000004, "Wrong size on GA_Attack_Base_Hitscan_C_IncrementJac3ProneCounter");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_IncrementJac3ProneCounter, ProneCounter) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_IncrementJac3ProneCounter::ProneCounter' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.GetCharacterSize
// 0x0001 (0x0001 - 0x0000)
struct GA_Attack_Base_Hitscan_C_GetCharacterSize final
{
public:
	ECharacterSize                                Size_0;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_GetCharacterSize) == 0x000001, "Wrong alignment on GA_Attack_Base_Hitscan_C_GetCharacterSize");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_GetCharacterSize) == 0x000001, "Wrong size on GA_Attack_Base_Hitscan_C_GetCharacterSize");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_GetCharacterSize, Size_0) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_GetCharacterSize::Size_0' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.getCemeteryCreatureType
// 0x0001 (0x0001 - 0x0000)
struct GA_Attack_Base_Hitscan_C_GetCemeteryCreatureType final
{
public:
	ECemeteryCreatureType                         CemeteryCreatureType;                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_GetCemeteryCreatureType) == 0x000001, "Wrong alignment on GA_Attack_Base_Hitscan_C_GetCemeteryCreatureType");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_GetCemeteryCreatureType) == 0x000001, "Wrong size on GA_Attack_Base_Hitscan_C_GetCemeteryCreatureType");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_GetCemeteryCreatureType, CemeteryCreatureType) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_GetCemeteryCreatureType::CemeteryCreatureType' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.setCanCirculate
// 0x0002 (0x0002 - 0x0000)
struct GA_Attack_Base_Hitscan_C_SetCanCirculate final
{
public:
	bool                                          CanCirculate;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_SetCanCirculate) == 0x000001, "Wrong alignment on GA_Attack_Base_Hitscan_C_SetCanCirculate");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_SetCanCirculate) == 0x000002, "Wrong size on GA_Attack_Base_Hitscan_C_SetCanCirculate");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_SetCanCirculate, CanCirculate) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_SetCanCirculate::CanCirculate' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_SetCanCirculate, Success) == 0x000001, "Member 'GA_Attack_Base_Hitscan_C_SetCanCirculate::Success' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.setStartOnWall
// 0x0002 (0x0002 - 0x0000)
struct GA_Attack_Base_Hitscan_C_SetStartOnWall final
{
public:
	bool                                          StartOnWall;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_SetStartOnWall) == 0x000001, "Wrong alignment on GA_Attack_Base_Hitscan_C_SetStartOnWall");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_SetStartOnWall) == 0x000002, "Wrong size on GA_Attack_Base_Hitscan_C_SetStartOnWall");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_SetStartOnWall, StartOnWall) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_SetStartOnWall::StartOnWall' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_SetStartOnWall, Success) == 0x000001, "Member 'GA_Attack_Base_Hitscan_C_SetStartOnWall::Success' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.AimedAt
// 0x0001 (0x0001 - 0x0000)
struct GA_Attack_Base_Hitscan_C_AimedAt final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_AimedAt) == 0x000001, "Wrong alignment on GA_Attack_Base_Hitscan_C_AimedAt");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_AimedAt) == 0x000001, "Wrong size on GA_Attack_Base_Hitscan_C_AimedAt");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_AimedAt, Return) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_AimedAt::Return' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.GetUpgradeComponent
// 0x0008 (0x0008 - 0x0000)
struct GA_Attack_Base_Hitscan_C_GetUpgradeComponent final
{
public:
	class UWeaponUpgradeComponent_C*              UpgradeComponent;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_GetUpgradeComponent) == 0x000008, "Wrong alignment on GA_Attack_Base_Hitscan_C_GetUpgradeComponent");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_GetUpgradeComponent) == 0x000008, "Wrong size on GA_Attack_Base_Hitscan_C_GetUpgradeComponent");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_GetUpgradeComponent, UpgradeComponent) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_GetUpgradeComponent::UpgradeComponent' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.FlashlightHit
// 0x0008 (0x0008 - 0x0000)
struct GA_Attack_Base_Hitscan_C_FlashlightHit final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_FlashlightHit) == 0x000004, "Wrong alignment on GA_Attack_Base_Hitscan_C_FlashlightHit");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_FlashlightHit) == 0x000008, "Wrong size on GA_Attack_Base_Hitscan_C_FlashlightHit");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_FlashlightHit, Distance) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_FlashlightHit::Distance' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_FlashlightHit, Success) == 0x000004, "Member 'GA_Attack_Base_Hitscan_C_FlashlightHit::Success' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.hitscanWeaponFired
// 0x0001 (0x0001 - 0x0000)
struct GA_Attack_Base_Hitscan_C_HitscanWeaponFired final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_HitscanWeaponFired) == 0x000001, "Wrong alignment on GA_Attack_Base_Hitscan_C_HitscanWeaponFired");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_HitscanWeaponFired) == 0x000001, "Wrong size on GA_Attack_Base_Hitscan_C_HitscanWeaponFired");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_HitscanWeaponFired, Success) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_HitscanWeaponFired::Success' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.setOrderTarget
// 0x0010 (0x0010 - 0x0000)
struct GA_Attack_Base_Hitscan_C_SetOrderTarget final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_SetOrderTarget) == 0x000004, "Wrong alignment on GA_Attack_Base_Hitscan_C_SetOrderTarget");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_SetOrderTarget) == 0x000010, "Wrong size on GA_Attack_Base_Hitscan_C_SetOrderTarget");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_SetOrderTarget, Location) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_SetOrderTarget::Location' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_SetOrderTarget, Success) == 0x00000C, "Member 'GA_Attack_Base_Hitscan_C_SetOrderTarget::Success' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.setStartBurrowed
// 0x0002 (0x0002 - 0x0000)
struct GA_Attack_Base_Hitscan_C_SetStartBurrowed final
{
public:
	bool                                          beginBurrowed;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_SetStartBurrowed) == 0x000001, "Wrong alignment on GA_Attack_Base_Hitscan_C_SetStartBurrowed");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_SetStartBurrowed) == 0x000002, "Wrong size on GA_Attack_Base_Hitscan_C_SetStartBurrowed");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_SetStartBurrowed, beginBurrowed) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_SetStartBurrowed::beginBurrowed' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_SetStartBurrowed, Success) == 0x000001, "Member 'GA_Attack_Base_Hitscan_C_SetStartBurrowed::Success' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.K2_CanActivateAbility
// 0x0088 (0x0088 - 0x0000)
struct GA_Attack_Base_Hitscan_C_K2_CanActivateAbility final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0048)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
	struct FGameplayAbilitySpecHandle             Handle;                                            // 0x0048(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RelevantTags;                                      // 0x0050(0x0020)(Parm, OutParm)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEquipmentManager*                      CallFunc_GetComponentByClass_ReturnValue;          // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_K2_CanActivateAbility) == 0x000008, "Wrong alignment on GA_Attack_Base_Hitscan_C_K2_CanActivateAbility");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_K2_CanActivateAbility) == 0x000088, "Wrong size on GA_Attack_Base_Hitscan_C_K2_CanActivateAbility");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_K2_CanActivateAbility, ActorInfo) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_K2_CanActivateAbility::ActorInfo' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_K2_CanActivateAbility, Handle) == 0x000048, "Member 'GA_Attack_Base_Hitscan_C_K2_CanActivateAbility::Handle' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_K2_CanActivateAbility, RelevantTags) == 0x000050, "Member 'GA_Attack_Base_Hitscan_C_K2_CanActivateAbility::RelevantTags' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_K2_CanActivateAbility, ReturnValue) == 0x000070, "Member 'GA_Attack_Base_Hitscan_C_K2_CanActivateAbility::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_K2_CanActivateAbility, CallFunc_GetComponentByClass_ReturnValue) == 0x000078, "Member 'GA_Attack_Base_Hitscan_C_K2_CanActivateAbility::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_K2_CanActivateAbility, CallFunc_IsValid_ReturnValue) == 0x000080, "Member 'GA_Attack_Base_Hitscan_C_K2_CanActivateAbility::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.GetSourceWeapon
// 0x0010 (0x0010 - 0x0000)
struct GA_Attack_Base_Hitscan_C_GetSourceWeapon final
{
public:
	class AOFWeaponActor*                         WeaponActor;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOFWeaponActor*                         CallFunc_GetSourceWeapon_WeaponActor;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_GetSourceWeapon) == 0x000008, "Wrong alignment on GA_Attack_Base_Hitscan_C_GetSourceWeapon");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_GetSourceWeapon) == 0x000010, "Wrong size on GA_Attack_Base_Hitscan_C_GetSourceWeapon");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_GetSourceWeapon, WeaponActor) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_GetSourceWeapon::WeaponActor' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_GetSourceWeapon, CallFunc_GetSourceWeapon_WeaponActor) == 0x000008, "Member 'GA_Attack_Base_Hitscan_C_GetSourceWeapon::CallFunc_GetSourceWeapon_WeaponActor' has a wrong offset!");

// Function GA_Attack_Base_Hitscan.GA_Attack_Base_Hitscan_C.GetSourceHitscanWeapon
// 0x0020 (0x0020 - 0x0000)
struct GA_Attack_Base_Hitscan_C_GetSourceHitscanWeapon final
{
public:
	class AHitscanWeaponActor*                    AsHitscan_Weapon_Actor;                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AOFWeaponActor*                         CallFunc_GetSourceWeapon_WeaponActor;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHitscanWeaponActor*                    K2Node_DynamicCast_AsHitscan_Weapon_Actor;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Attack_Base_Hitscan_C_GetSourceHitscanWeapon) == 0x000008, "Wrong alignment on GA_Attack_Base_Hitscan_C_GetSourceHitscanWeapon");
static_assert(sizeof(GA_Attack_Base_Hitscan_C_GetSourceHitscanWeapon) == 0x000020, "Wrong size on GA_Attack_Base_Hitscan_C_GetSourceHitscanWeapon");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_GetSourceHitscanWeapon, AsHitscan_Weapon_Actor) == 0x000000, "Member 'GA_Attack_Base_Hitscan_C_GetSourceHitscanWeapon::AsHitscan_Weapon_Actor' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_GetSourceHitscanWeapon, CallFunc_GetSourceWeapon_WeaponActor) == 0x000008, "Member 'GA_Attack_Base_Hitscan_C_GetSourceHitscanWeapon::CallFunc_GetSourceWeapon_WeaponActor' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_GetSourceHitscanWeapon, K2Node_DynamicCast_AsHitscan_Weapon_Actor) == 0x000010, "Member 'GA_Attack_Base_Hitscan_C_GetSourceHitscanWeapon::K2Node_DynamicCast_AsHitscan_Weapon_Actor' has a wrong offset!");
static_assert(offsetof(GA_Attack_Base_Hitscan_C_GetSourceHitscanWeapon, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'GA_Attack_Base_Hitscan_C_GetSourceHitscanWeapon::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

