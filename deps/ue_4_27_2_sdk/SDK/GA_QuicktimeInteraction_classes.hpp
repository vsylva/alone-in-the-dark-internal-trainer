#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_QuicktimeInteraction

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "ObsidianFox_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "ObsidianFoxSettings_structs.hpp"
#include "CharacterSize_structs.hpp"
#include "AnimationMontageIdentifier_structs.hpp"
#include "CemeteryCreatureType_structs.hpp"
#include "FaceButtonType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_QuicktimeInteraction.GA_QuicktimeInteraction_C
// 0x0050 (0x0410 - 0x03C0)
class UGA_QuicktimeInteraction_C final : public UGameplayAbility_Passive
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         QuicktimeClicksRequired;                           // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         QuicktimeClicks;                                   // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_QuickTimeEvent_C*                  QuicktimeEventWidget;                              // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                ParentGrappleAbility;                              // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AOFPlayerCharacter*                     PlayerRref;                                        // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FTimerHandle                           DrainTimer;                                        // 0x03E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         QteId;                                             // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            QTEidEffectHandle;                                 // 0x03F4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         DrainTime;                                         // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Draincurve;                                        // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Input_Treat_as_Hold_Tag;                           // 0x0408(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void HitscanWeaponFired(bool* Success);
	void GetMostSuitableMeleeSection(EAnimationMontageIdentifier* Value);
	void GetAggroState(bool* Aggro);
	void SetNewAggro(bool NewAggro, bool* Success);
	void IncrementJac3ProneCounter(int32* ProneCounter);
	void GetCharacterSize(ECharacterSize* Size);
	void GetCemeteryCreatureType(ECemeteryCreatureType* CemeteryCreatureType);
	void SetCanCirculate(bool CanCirculate, bool* Success);
	void SetStartOnWall(bool StartOnWall, bool* Success);
	void AimedAt(bool* Return);
	void FlashlightHit(float Distance, bool* Success);
	void GetUpgradeComponent(class UWeaponUpgradeComponent_C** UpgradeComponent);
	void EventReceived_3E4026B44742CE6CDECEEAB201DE8654(const struct FGameplayEventData& Payload);
	void NoInput_4D15221E492AC0A33A9C18A7B38F51A3();
	void Completed_4D15221E492AC0A33A9C18A7B38F51A3();
	void Triggered_4D15221E492AC0A33A9C18A7B38F51A3();
	void Canceled_4D15221E492AC0A33A9C18A7B38F51A3();
	void Ongoing_4D15221E492AC0A33A9C18A7B38F51A3();
	void Started_4D15221E492AC0A33A9C18A7B38F51A3();
	void OnFinish_36DCA5404ADF197CD4B1AD9069AAE18C();
	void MeleeAttack();
	void SetCemeteryCreatureType(ECemeteryCreatureType CreatureType);
	void QuicktimeSuccess();
	void QuicktimeInput(float CurrentProgress, float MaxProgress);
	void LaserHit();
	void MeleeAttackTranslate(const struct FVector& StartVector, const struct FVector& EndVector);
	void ControlRotationFocus(class AActor* FocusTarget);
	void MoveToGrappleLocatio(const struct FVector& Grapple_Location);
	void SetMostSuitableMeleeSection(EAnimationMontageIdentifier Value);
	void UpdateBossHealthData(float CurrentHealthPercentage);
	void K2_ActivateAbility();
	void K2_OnEndAbility(bool bWasCancelled);
	void Drain();
	void ExecuteUbergraph_GA_QuicktimeInteraction(int32 EntryPoint);
	void SetStartBurrowed(bool beginBurrowed, bool* Success);
	void SetOrderTarget(const struct FVector& Location, bool* Success);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_QuicktimeInteraction_C">();
	}
	static class UGA_QuicktimeInteraction_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_QuicktimeInteraction_C>();
	}
};
static_assert(alignof(UGA_QuicktimeInteraction_C) == 0x000008, "Wrong alignment on UGA_QuicktimeInteraction_C");
static_assert(sizeof(UGA_QuicktimeInteraction_C) == 0x000410, "Wrong size on UGA_QuicktimeInteraction_C");
static_assert(offsetof(UGA_QuicktimeInteraction_C, UberGraphFrame) == 0x0003C0, "Member 'UGA_QuicktimeInteraction_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_QuicktimeInteraction_C, QuicktimeClicksRequired) == 0x0003C8, "Member 'UGA_QuicktimeInteraction_C::QuicktimeClicksRequired' has a wrong offset!");
static_assert(offsetof(UGA_QuicktimeInteraction_C, QuicktimeClicks) == 0x0003CC, "Member 'UGA_QuicktimeInteraction_C::QuicktimeClicks' has a wrong offset!");
static_assert(offsetof(UGA_QuicktimeInteraction_C, QuicktimeEventWidget) == 0x0003D0, "Member 'UGA_QuicktimeInteraction_C::QuicktimeEventWidget' has a wrong offset!");
static_assert(offsetof(UGA_QuicktimeInteraction_C, ParentGrappleAbility) == 0x0003D8, "Member 'UGA_QuicktimeInteraction_C::ParentGrappleAbility' has a wrong offset!");
static_assert(offsetof(UGA_QuicktimeInteraction_C, PlayerRref) == 0x0003E0, "Member 'UGA_QuicktimeInteraction_C::PlayerRref' has a wrong offset!");
static_assert(offsetof(UGA_QuicktimeInteraction_C, DrainTimer) == 0x0003E8, "Member 'UGA_QuicktimeInteraction_C::DrainTimer' has a wrong offset!");
static_assert(offsetof(UGA_QuicktimeInteraction_C, QteId) == 0x0003F0, "Member 'UGA_QuicktimeInteraction_C::QteId' has a wrong offset!");
static_assert(offsetof(UGA_QuicktimeInteraction_C, QTEidEffectHandle) == 0x0003F4, "Member 'UGA_QuicktimeInteraction_C::QTEidEffectHandle' has a wrong offset!");
static_assert(offsetof(UGA_QuicktimeInteraction_C, DrainTime) == 0x0003FC, "Member 'UGA_QuicktimeInteraction_C::DrainTime' has a wrong offset!");
static_assert(offsetof(UGA_QuicktimeInteraction_C, Draincurve) == 0x000400, "Member 'UGA_QuicktimeInteraction_C::Draincurve' has a wrong offset!");
static_assert(offsetof(UGA_QuicktimeInteraction_C, Input_Treat_as_Hold_Tag) == 0x000408, "Member 'UGA_QuicktimeInteraction_C::Input_Treat_as_Hold_Tag' has a wrong offset!");

}

