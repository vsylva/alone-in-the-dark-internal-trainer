#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_PlayerCharacter

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ObsidianFox_structs.hpp"
#include "EWeapons_structs.hpp"


namespace SDK::Params
{

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.InteractiveCinematicLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerCharacter_C_InteractiveCinematicLayer final
{
public:
	struct FPoseLink                              InteractiveCinematicInputPose;                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              InteractiveCinematicLayer_0;                       // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_InteractiveCinematicLayer) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_InteractiveCinematicLayer");
static_assert(sizeof(ABP_PlayerCharacter_C_InteractiveCinematicLayer) == 0x000020, "Wrong size on ABP_PlayerCharacter_C_InteractiveCinematicLayer");
static_assert(offsetof(ABP_PlayerCharacter_C_InteractiveCinematicLayer, InteractiveCinematicInputPose) == 0x000000, "Member 'ABP_PlayerCharacter_C_InteractiveCinematicLayer::InteractiveCinematicInputPose' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_InteractiveCinematicLayer, InteractiveCinematicLayer_0) == 0x000010, "Member 'ABP_PlayerCharacter_C_InteractiveCinematicLayer::InteractiveCinematicLayer_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.GrappleWalkLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerCharacter_C_GrappleWalkLayer final
{
public:
	struct FPoseLink                              GrappleWalkLayerInputPose;                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              GrappleWalkLayer_0;                                // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_GrappleWalkLayer) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_GrappleWalkLayer");
static_assert(sizeof(ABP_PlayerCharacter_C_GrappleWalkLayer) == 0x000020, "Wrong size on ABP_PlayerCharacter_C_GrappleWalkLayer");
static_assert(offsetof(ABP_PlayerCharacter_C_GrappleWalkLayer, GrappleWalkLayerInputPose) == 0x000000, "Member 'ABP_PlayerCharacter_C_GrappleWalkLayer::GrappleWalkLayerInputPose' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_GrappleWalkLayer, GrappleWalkLayer_0) == 0x000010, "Member 'ABP_PlayerCharacter_C_GrappleWalkLayer::GrappleWalkLayer_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.WalkTwistHandTweaks
// 0x0028 (0x0028 - 0x0000)
struct ABP_PlayerCharacter_C_WalkTwistHandTweaks final
{
public:
	struct FPoseLink                              WalkTwistHandTweaksInputPose;                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	float                                         TwistInput_0;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JogBlend_0;                                        // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPoseLink                              WalkTwistHandTweaks_0;                             // 0x0018(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_WalkTwistHandTweaks) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_WalkTwistHandTweaks");
static_assert(sizeof(ABP_PlayerCharacter_C_WalkTwistHandTweaks) == 0x000028, "Wrong size on ABP_PlayerCharacter_C_WalkTwistHandTweaks");
static_assert(offsetof(ABP_PlayerCharacter_C_WalkTwistHandTweaks, WalkTwistHandTweaksInputPose) == 0x000000, "Member 'ABP_PlayerCharacter_C_WalkTwistHandTweaks::WalkTwistHandTweaksInputPose' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_WalkTwistHandTweaks, TwistInput_0) == 0x000010, "Member 'ABP_PlayerCharacter_C_WalkTwistHandTweaks::TwistInput_0' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_WalkTwistHandTweaks, JogBlend_0) == 0x000014, "Member 'ABP_PlayerCharacter_C_WalkTwistHandTweaks::JogBlend_0' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_WalkTwistHandTweaks, WalkTwistHandTweaks_0) == 0x000018, "Member 'ABP_PlayerCharacter_C_WalkTwistHandTweaks::WalkTwistHandTweaks_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.FootIKLayer
// 0x0030 (0x0030 - 0x0000)
struct ABP_PlayerCharacter_C_FootIKLayer final
{
public:
	struct FPoseLink                              FootIKInputPose;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	class UAnimComponentFootIK*                   FootIKData_0;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FootIKHipsOffset;                                  // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              FootIKLayer_0;                                     // 0x0020(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_FootIKLayer) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_FootIKLayer");
static_assert(sizeof(ABP_PlayerCharacter_C_FootIKLayer) == 0x000030, "Wrong size on ABP_PlayerCharacter_C_FootIKLayer");
static_assert(offsetof(ABP_PlayerCharacter_C_FootIKLayer, FootIKInputPose) == 0x000000, "Member 'ABP_PlayerCharacter_C_FootIKLayer::FootIKInputPose' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_FootIKLayer, FootIKData_0) == 0x000010, "Member 'ABP_PlayerCharacter_C_FootIKLayer::FootIKData_0' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_FootIKLayer, FootIKHipsOffset) == 0x000018, "Member 'ABP_PlayerCharacter_C_FootIKLayer::FootIKHipsOffset' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_FootIKLayer, FootIKLayer_0) == 0x000020, "Member 'ABP_PlayerCharacter_C_FootIKLayer::FootIKLayer_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.ArmIKLayer
// 0x00C0 (0x00C0 - 0x0000)
struct ABP_PlayerCharacter_C_ArmIKLayer final
{
public:
	struct FPoseLink                              ArmIKInputPose;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FArmIKEffectorData                     RightArmIKData_0;                                  // 0x0010(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FArmIKEffectorData                     LeftArmIKData_0;                                   // 0x0050(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FVector                                RightArmPoleVector;                                // 0x0090(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LeftArmPoleVector;                                 // 0x009C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IKActive;                                          // 0x00A8(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              ArmIKLayer_0;                                      // 0x00B0(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_ArmIKLayer) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_ArmIKLayer");
static_assert(sizeof(ABP_PlayerCharacter_C_ArmIKLayer) == 0x0000C0, "Wrong size on ABP_PlayerCharacter_C_ArmIKLayer");
static_assert(offsetof(ABP_PlayerCharacter_C_ArmIKLayer, ArmIKInputPose) == 0x000000, "Member 'ABP_PlayerCharacter_C_ArmIKLayer::ArmIKInputPose' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ArmIKLayer, RightArmIKData_0) == 0x000010, "Member 'ABP_PlayerCharacter_C_ArmIKLayer::RightArmIKData_0' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ArmIKLayer, LeftArmIKData_0) == 0x000050, "Member 'ABP_PlayerCharacter_C_ArmIKLayer::LeftArmIKData_0' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ArmIKLayer, RightArmPoleVector) == 0x000090, "Member 'ABP_PlayerCharacter_C_ArmIKLayer::RightArmPoleVector' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ArmIKLayer, LeftArmPoleVector) == 0x00009C, "Member 'ABP_PlayerCharacter_C_ArmIKLayer::LeftArmPoleVector' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ArmIKLayer, IKActive) == 0x0000A8, "Member 'ABP_PlayerCharacter_C_ArmIKLayer::IKActive' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ArmIKLayer, ArmIKLayer_0) == 0x0000B0, "Member 'ABP_PlayerCharacter_C_ArmIKLayer::ArmIKLayer_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.WeaponLocomotion
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerCharacter_C_WeaponLocomotion final
{
public:
	struct FPoseLink                              WeaponLocomotionInputPose;                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              WeaponLocomotion_0;                                // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_WeaponLocomotion) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_WeaponLocomotion");
static_assert(sizeof(ABP_PlayerCharacter_C_WeaponLocomotion) == 0x000020, "Wrong size on ABP_PlayerCharacter_C_WeaponLocomotion");
static_assert(offsetof(ABP_PlayerCharacter_C_WeaponLocomotion, WeaponLocomotionInputPose) == 0x000000, "Member 'ABP_PlayerCharacter_C_WeaponLocomotion::WeaponLocomotionInputPose' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_WeaponLocomotion, WeaponLocomotion_0) == 0x000010, "Member 'ABP_PlayerCharacter_C_WeaponLocomotion::WeaponLocomotion_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.WeaponFocusWalk
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerCharacter_C_WeaponFocusWalk final
{
public:
	struct FPoseLink                              WeaponFocusWalkInputPose;                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              WeaponFocusWalk_0;                                 // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_WeaponFocusWalk) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_WeaponFocusWalk");
static_assert(sizeof(ABP_PlayerCharacter_C_WeaponFocusWalk) == 0x000020, "Wrong size on ABP_PlayerCharacter_C_WeaponFocusWalk");
static_assert(offsetof(ABP_PlayerCharacter_C_WeaponFocusWalk, WeaponFocusWalkInputPose) == 0x000000, "Member 'ABP_PlayerCharacter_C_WeaponFocusWalk::WeaponFocusWalkInputPose' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_WeaponFocusWalk, WeaponFocusWalk_0) == 0x000010, "Member 'ABP_PlayerCharacter_C_WeaponFocusWalk::WeaponFocusWalk_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.WeaponAimOffset
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerCharacter_C_WeaponAimOffset final
{
public:
	struct FPoseLink                              WeaponAimOffsetInputLayer;                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              WeaponAimOffset_0;                                 // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_WeaponAimOffset) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_WeaponAimOffset");
static_assert(sizeof(ABP_PlayerCharacter_C_WeaponAimOffset) == 0x000020, "Wrong size on ABP_PlayerCharacter_C_WeaponAimOffset");
static_assert(offsetof(ABP_PlayerCharacter_C_WeaponAimOffset, WeaponAimOffsetInputLayer) == 0x000000, "Member 'ABP_PlayerCharacter_C_WeaponAimOffset::WeaponAimOffsetInputLayer' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_WeaponAimOffset, WeaponAimOffset_0) == 0x000010, "Member 'ABP_PlayerCharacter_C_WeaponAimOffset::WeaponAimOffset_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.ContextualMovement
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerCharacter_C_ContextualMovement final
{
public:
	struct FPoseLink                              ContextualMovementInputPose;                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              ContextualMovement_0;                              // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_ContextualMovement) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_ContextualMovement");
static_assert(sizeof(ABP_PlayerCharacter_C_ContextualMovement) == 0x000020, "Wrong size on ABP_PlayerCharacter_C_ContextualMovement");
static_assert(offsetof(ABP_PlayerCharacter_C_ContextualMovement, ContextualMovementInputPose) == 0x000000, "Member 'ABP_PlayerCharacter_C_ContextualMovement::ContextualMovementInputPose' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ContextualMovement, ContextualMovement_0) == 0x000010, "Member 'ABP_PlayerCharacter_C_ContextualMovement::ContextualMovement_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.FaceMontageSlots
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerCharacter_C_FaceMontageSlots final
{
public:
	struct FPoseLink                              FaceMontageSlotsInputPose;                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              FaceMontageSlots_0;                                // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_FaceMontageSlots) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_FaceMontageSlots");
static_assert(sizeof(ABP_PlayerCharacter_C_FaceMontageSlots) == 0x000020, "Wrong size on ABP_PlayerCharacter_C_FaceMontageSlots");
static_assert(offsetof(ABP_PlayerCharacter_C_FaceMontageSlots, FaceMontageSlotsInputPose) == 0x000000, "Member 'ABP_PlayerCharacter_C_FaceMontageSlots::FaceMontageSlotsInputPose' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_FaceMontageSlots, FaceMontageSlots_0) == 0x000010, "Member 'ABP_PlayerCharacter_C_FaceMontageSlots::FaceMontageSlots_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.WeaponIKLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerCharacter_C_WeaponIKLayer final
{
public:
	struct FPoseLink                              WeaponIKLayerInputPose;                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              WeaponIKLayer_0;                                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_WeaponIKLayer) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_WeaponIKLayer");
static_assert(sizeof(ABP_PlayerCharacter_C_WeaponIKLayer) == 0x000020, "Wrong size on ABP_PlayerCharacter_C_WeaponIKLayer");
static_assert(offsetof(ABP_PlayerCharacter_C_WeaponIKLayer, WeaponIKLayerInputPose) == 0x000000, "Member 'ABP_PlayerCharacter_C_WeaponIKLayer::WeaponIKLayerInputPose' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_WeaponIKLayer, WeaponIKLayer_0) == 0x000010, "Member 'ABP_PlayerCharacter_C_WeaponIKLayer::WeaponIKLayer_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.HandSlots
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerCharacter_C_HandSlots final
{
public:
	struct FPoseLink                              HandSlotsLayerInputPose;                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              HandSlots_0;                                       // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_HandSlots) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_HandSlots");
static_assert(sizeof(ABP_PlayerCharacter_C_HandSlots) == 0x000020, "Wrong size on ABP_PlayerCharacter_C_HandSlots");
static_assert(offsetof(ABP_PlayerCharacter_C_HandSlots, HandSlotsLayerInputPose) == 0x000000, "Member 'ABP_PlayerCharacter_C_HandSlots::HandSlotsLayerInputPose' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_HandSlots, HandSlots_0) == 0x000010, "Member 'ABP_PlayerCharacter_C_HandSlots::HandSlots_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.FaceIdle
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerCharacter_C_FaceIdle final
{
public:
	struct FPoseLink                              FaceIdle_0;                                        // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_FaceIdle) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_FaceIdle");
static_assert(sizeof(ABP_PlayerCharacter_C_FaceIdle) == 0x000010, "Wrong size on ABP_PlayerCharacter_C_FaceIdle");
static_assert(offsetof(ABP_PlayerCharacter_C_FaceIdle, FaceIdle_0) == 0x000000, "Member 'ABP_PlayerCharacter_C_FaceIdle::FaceIdle_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.IdleHurtAdditives
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerCharacter_C_IdleHurtAdditives final
{
public:
	struct FPoseLink                              IdleHurtAdditivesInputPose;                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              IdleHurtAdditives_0;                               // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_IdleHurtAdditives) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_IdleHurtAdditives");
static_assert(sizeof(ABP_PlayerCharacter_C_IdleHurtAdditives) == 0x000020, "Wrong size on ABP_PlayerCharacter_C_IdleHurtAdditives");
static_assert(offsetof(ABP_PlayerCharacter_C_IdleHurtAdditives, IdleHurtAdditivesInputPose) == 0x000000, "Member 'ABP_PlayerCharacter_C_IdleHurtAdditives::IdleHurtAdditivesInputPose' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_IdleHurtAdditives, IdleHurtAdditives_0) == 0x000010, "Member 'ABP_PlayerCharacter_C_IdleHurtAdditives::IdleHurtAdditives_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.WalkHurtAdditives
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerCharacter_C_WalkHurtAdditives final
{
public:
	struct FPoseLink                              WalkHurtAdditivesBasePose;                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              WalkHurtAdditives_0;                               // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_WalkHurtAdditives) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_WalkHurtAdditives");
static_assert(sizeof(ABP_PlayerCharacter_C_WalkHurtAdditives) == 0x000020, "Wrong size on ABP_PlayerCharacter_C_WalkHurtAdditives");
static_assert(offsetof(ABP_PlayerCharacter_C_WalkHurtAdditives, WalkHurtAdditivesBasePose) == 0x000000, "Member 'ABP_PlayerCharacter_C_WalkHurtAdditives::WalkHurtAdditivesBasePose' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_WalkHurtAdditives, WalkHurtAdditives_0) == 0x000010, "Member 'ABP_PlayerCharacter_C_WalkHurtAdditives::WalkHurtAdditives_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.FocusWalkUpperBodyLayer
// 0x0030 (0x0030 - 0x0000)
struct ABP_PlayerCharacter_C_FocusWalkUpperBodyLayer final
{
public:
	struct FPoseLink                              FocusWalkUpperBodyLayerInputPose;                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              FocusWalkUpperBodyLayerBaseIdlePose;               // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              FocusWalkUpperBodyLayer_0;                         // 0x0020(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_FocusWalkUpperBodyLayer) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_FocusWalkUpperBodyLayer");
static_assert(sizeof(ABP_PlayerCharacter_C_FocusWalkUpperBodyLayer) == 0x000030, "Wrong size on ABP_PlayerCharacter_C_FocusWalkUpperBodyLayer");
static_assert(offsetof(ABP_PlayerCharacter_C_FocusWalkUpperBodyLayer, FocusWalkUpperBodyLayerInputPose) == 0x000000, "Member 'ABP_PlayerCharacter_C_FocusWalkUpperBodyLayer::FocusWalkUpperBodyLayerInputPose' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_FocusWalkUpperBodyLayer, FocusWalkUpperBodyLayerBaseIdlePose) == 0x000010, "Member 'ABP_PlayerCharacter_C_FocusWalkUpperBodyLayer::FocusWalkUpperBodyLayerBaseIdlePose' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_FocusWalkUpperBodyLayer, FocusWalkUpperBodyLayer_0) == 0x000020, "Member 'ABP_PlayerCharacter_C_FocusWalkUpperBodyLayer::FocusWalkUpperBodyLayer_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.BaseIdleLayer
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerCharacter_C_BaseIdleLayer final
{
public:
	struct FPoseLink                              BaseIdleLayer_0;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_BaseIdleLayer) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_BaseIdleLayer");
static_assert(sizeof(ABP_PlayerCharacter_C_BaseIdleLayer) == 0x000010, "Wrong size on ABP_PlayerCharacter_C_BaseIdleLayer");
static_assert(offsetof(ABP_PlayerCharacter_C_BaseIdleLayer, BaseIdleLayer_0) == 0x000000, "Member 'ABP_PlayerCharacter_C_BaseIdleLayer::BaseIdleLayer_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.CopyToIKBones
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerCharacter_C_CopyToIKBones final
{
public:
	struct FPoseLink                              CopyToIKBonesInputPose;                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              CopyToIKBones_0;                                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_CopyToIKBones) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_CopyToIKBones");
static_assert(sizeof(ABP_PlayerCharacter_C_CopyToIKBones) == 0x000020, "Wrong size on ABP_PlayerCharacter_C_CopyToIKBones");
static_assert(offsetof(ABP_PlayerCharacter_C_CopyToIKBones, CopyToIKBonesInputPose) == 0x000000, "Member 'ABP_PlayerCharacter_C_CopyToIKBones::CopyToIKBonesInputPose' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_CopyToIKBones, CopyToIKBones_0) == 0x000010, "Member 'ABP_PlayerCharacter_C_CopyToIKBones::CopyToIKBones_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.ArmIKPreProcessLayer
// 0x00C0 (0x00C0 - 0x0000)
struct ABP_PlayerCharacter_C_ArmIKPreProcessLayer final
{
public:
	struct FPoseLink                              ArmIKPreProcessLayerInput;                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FArmIKEffectorData                     RightArmIKData_0;                                  // 0x0010(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FArmIKEffectorData                     LeftArmIKData_0;                                   // 0x0050(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FVector                                RightArmPoleVector;                                // 0x0090(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LeftArmPoleVector;                                 // 0x009C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IKActive;                                          // 0x00A8(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              ArmIKPreProcessLayer_0;                            // 0x00B0(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_ArmIKPreProcessLayer) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_ArmIKPreProcessLayer");
static_assert(sizeof(ABP_PlayerCharacter_C_ArmIKPreProcessLayer) == 0x0000C0, "Wrong size on ABP_PlayerCharacter_C_ArmIKPreProcessLayer");
static_assert(offsetof(ABP_PlayerCharacter_C_ArmIKPreProcessLayer, ArmIKPreProcessLayerInput) == 0x000000, "Member 'ABP_PlayerCharacter_C_ArmIKPreProcessLayer::ArmIKPreProcessLayerInput' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ArmIKPreProcessLayer, RightArmIKData_0) == 0x000010, "Member 'ABP_PlayerCharacter_C_ArmIKPreProcessLayer::RightArmIKData_0' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ArmIKPreProcessLayer, LeftArmIKData_0) == 0x000050, "Member 'ABP_PlayerCharacter_C_ArmIKPreProcessLayer::LeftArmIKData_0' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ArmIKPreProcessLayer, RightArmPoleVector) == 0x000090, "Member 'ABP_PlayerCharacter_C_ArmIKPreProcessLayer::RightArmPoleVector' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ArmIKPreProcessLayer, LeftArmPoleVector) == 0x00009C, "Member 'ABP_PlayerCharacter_C_ArmIKPreProcessLayer::LeftArmPoleVector' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ArmIKPreProcessLayer, IKActive) == 0x0000A8, "Member 'ABP_PlayerCharacter_C_ArmIKPreProcessLayer::IKActive' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ArmIKPreProcessLayer, ArmIKPreProcessLayer_0) == 0x0000B0, "Member 'ABP_PlayerCharacter_C_ArmIKPreProcessLayer::ArmIKPreProcessLayer_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.EmoteLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerCharacter_C_EmoteLayer final
{
public:
	struct FPoseLink                              EmoteLayerInputPose;                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              EmoteLayer_0;                                      // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_EmoteLayer) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_EmoteLayer");
static_assert(sizeof(ABP_PlayerCharacter_C_EmoteLayer) == 0x000020, "Wrong size on ABP_PlayerCharacter_C_EmoteLayer");
static_assert(offsetof(ABP_PlayerCharacter_C_EmoteLayer, EmoteLayerInputPose) == 0x000000, "Member 'ABP_PlayerCharacter_C_EmoteLayer::EmoteLayerInputPose' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_EmoteLayer, EmoteLayer_0) == 0x000010, "Member 'ABP_PlayerCharacter_C_EmoteLayer::EmoteLayer_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.IKReferenceBoneTransformLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerCharacter_C_IKReferenceBoneTransformLayer final
{
public:
	struct FPoseLink                              IKReferenceBoneTransformLayerInput;                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              IKReferenceBoneTransformLayer_0;                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_IKReferenceBoneTransformLayer) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_IKReferenceBoneTransformLayer");
static_assert(sizeof(ABP_PlayerCharacter_C_IKReferenceBoneTransformLayer) == 0x000020, "Wrong size on ABP_PlayerCharacter_C_IKReferenceBoneTransformLayer");
static_assert(offsetof(ABP_PlayerCharacter_C_IKReferenceBoneTransformLayer, IKReferenceBoneTransformLayerInput) == 0x000000, "Member 'ABP_PlayerCharacter_C_IKReferenceBoneTransformLayer::IKReferenceBoneTransformLayerInput' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_IKReferenceBoneTransformLayer, IKReferenceBoneTransformLayer_0) == 0x000010, "Member 'ABP_PlayerCharacter_C_IKReferenceBoneTransformLayer::IKReferenceBoneTransformLayer_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.FocusLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerCharacter_C_FocusLayer final
{
public:
	struct FPoseLink                              FocusLayerInputPose;                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              FocusLayer_0;                                      // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_FocusLayer) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_FocusLayer");
static_assert(sizeof(ABP_PlayerCharacter_C_FocusLayer) == 0x000020, "Wrong size on ABP_PlayerCharacter_C_FocusLayer");
static_assert(offsetof(ABP_PlayerCharacter_C_FocusLayer, FocusLayerInputPose) == 0x000000, "Member 'ABP_PlayerCharacter_C_FocusLayer::FocusLayerInputPose' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_FocusLayer, FocusLayer_0) == 0x000010, "Member 'ABP_PlayerCharacter_C_FocusLayer::FocusLayer_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.MontageSlotsLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_PlayerCharacter_C_MontageSlotsLayer final
{
public:
	struct FPoseLink                              MontageLayerInputPose;                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              MontageSlotsLayer_0;                               // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_MontageSlotsLayer) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_MontageSlotsLayer");
static_assert(sizeof(ABP_PlayerCharacter_C_MontageSlotsLayer) == 0x000020, "Wrong size on ABP_PlayerCharacter_C_MontageSlotsLayer");
static_assert(offsetof(ABP_PlayerCharacter_C_MontageSlotsLayer, MontageLayerInputPose) == 0x000000, "Member 'ABP_PlayerCharacter_C_MontageSlotsLayer::MontageLayerInputPose' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_MontageSlotsLayer, MontageSlotsLayer_0) == 0x000010, "Member 'ABP_PlayerCharacter_C_MontageSlotsLayer::MontageSlotsLayer_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerCharacter_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_AnimGraph");
static_assert(sizeof(ABP_PlayerCharacter_C_AnimGraph) == 0x000010, "Wrong size on ABP_PlayerCharacter_C_AnimGraph");
static_assert(offsetof(ABP_PlayerCharacter_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_PlayerCharacter_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.TryLoadingAnimationsForPlayedPC
// 0x0018 (0x0018 - 0x0000)
struct ABP_PlayerCharacter_C_TryLoadingAnimationsForPlayedPC final
{
public:
	EPlayerCharacterType                          CallFunc_GetPlayerCharacterType_ReturnValue;       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AOFPlayerCharacter*                     K2Node_DynamicCast_AsOFPlayer_Character;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_TryLoadingAnimationsForPlayedPC) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_TryLoadingAnimationsForPlayedPC");
static_assert(sizeof(ABP_PlayerCharacter_C_TryLoadingAnimationsForPlayedPC) == 0x000018, "Wrong size on ABP_PlayerCharacter_C_TryLoadingAnimationsForPlayedPC");
static_assert(offsetof(ABP_PlayerCharacter_C_TryLoadingAnimationsForPlayedPC, CallFunc_GetPlayerCharacterType_ReturnValue) == 0x000000, "Member 'ABP_PlayerCharacter_C_TryLoadingAnimationsForPlayedPC::CallFunc_GetPlayerCharacterType_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_TryLoadingAnimationsForPlayedPC, K2Node_DynamicCast_AsOFPlayer_Character) == 0x000008, "Member 'ABP_PlayerCharacter_C_TryLoadingAnimationsForPlayedPC::K2Node_DynamicCast_AsOFPlayer_Character' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_TryLoadingAnimationsForPlayedPC, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_PlayerCharacter_C_TryLoadingAnimationsForPlayedPC::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_TryLoadingAnimationsForPlayedPC, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000011, "Member 'ABP_PlayerCharacter_C_TryLoadingAnimationsForPlayedPC::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.SetFingerGripSettingsPreset
// 0x0018 (0x0018 - 0x0000)
struct ABP_PlayerCharacter_C_SetFingerGripSettingsPreset final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AOFPlayerCharacter*                     K2Node_DynamicCast_AsOFPlayer_Character;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_SetFingerGripSettingsPreset) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_SetFingerGripSettingsPreset");
static_assert(sizeof(ABP_PlayerCharacter_C_SetFingerGripSettingsPreset) == 0x000018, "Wrong size on ABP_PlayerCharacter_C_SetFingerGripSettingsPreset");
static_assert(offsetof(ABP_PlayerCharacter_C_SetFingerGripSettingsPreset, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'ABP_PlayerCharacter_C_SetFingerGripSettingsPreset::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_SetFingerGripSettingsPreset, K2Node_DynamicCast_AsOFPlayer_Character) == 0x000008, "Member 'ABP_PlayerCharacter_C_SetFingerGripSettingsPreset::K2Node_DynamicCast_AsOFPlayer_Character' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_SetFingerGripSettingsPreset, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'ABP_PlayerCharacter_C_SetFingerGripSettingsPreset::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_SetFingerGripSettingsPreset, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'ABP_PlayerCharacter_C_SetFingerGripSettingsPreset::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.wall twist blend space input
// 0x000C (0x000C - 0x0000)
struct ABP_PlayerCharacter_C_Wall_twist_blend_space_input final
{
public:
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerCharacter_C_Wall_twist_blend_space_input) == 0x000004, "Wrong alignment on ABP_PlayerCharacter_C_Wall_twist_blend_space_input");
static_assert(sizeof(ABP_PlayerCharacter_C_Wall_twist_blend_space_input) == 0x00000C, "Wrong size on ABP_PlayerCharacter_C_Wall_twist_blend_space_input");
static_assert(offsetof(ABP_PlayerCharacter_C_Wall_twist_blend_space_input, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000000, "Member 'ABP_PlayerCharacter_C_Wall_twist_blend_space_input::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Wall_twist_blend_space_input, CallFunc_SelectFloat_ReturnValue) == 0x000004, "Member 'ABP_PlayerCharacter_C_Wall_twist_blend_space_input::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Wall_twist_blend_space_input, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'ABP_PlayerCharacter_C_Wall_twist_blend_space_input::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.RailingIKBlocked
// 0x0014 (0x0014 - 0x0000)
struct ABP_PlayerCharacter_C_RailingIKBlocked final
{
public:
	class FName                                   IKBoneName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOutIsBlocked;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOutIsInstantBlock;                                // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RailingIKBlocked_bOutIsBlocked;           // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RailingIKBlocked_bOutIsInstantBlock;      // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyGameplayTags_ReturnValue;           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_1;        // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_2;        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_RailingIKBlocked) == 0x000004, "Wrong alignment on ABP_PlayerCharacter_C_RailingIKBlocked");
static_assert(sizeof(ABP_PlayerCharacter_C_RailingIKBlocked) == 0x000014, "Wrong size on ABP_PlayerCharacter_C_RailingIKBlocked");
static_assert(offsetof(ABP_PlayerCharacter_C_RailingIKBlocked, IKBoneName) == 0x000000, "Member 'ABP_PlayerCharacter_C_RailingIKBlocked::IKBoneName' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_RailingIKBlocked, bOutIsBlocked) == 0x000008, "Member 'ABP_PlayerCharacter_C_RailingIKBlocked::bOutIsBlocked' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_RailingIKBlocked, bOutIsInstantBlock) == 0x000009, "Member 'ABP_PlayerCharacter_C_RailingIKBlocked::bOutIsInstantBlock' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_RailingIKBlocked, CallFunc_RailingIKBlocked_bOutIsBlocked) == 0x00000A, "Member 'ABP_PlayerCharacter_C_RailingIKBlocked::CallFunc_RailingIKBlocked_bOutIsBlocked' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_RailingIKBlocked, CallFunc_RailingIKBlocked_bOutIsInstantBlock) == 0x00000B, "Member 'ABP_PlayerCharacter_C_RailingIKBlocked::CallFunc_RailingIKBlocked_bOutIsInstantBlock' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_RailingIKBlocked, CallFunc_HasAnyGameplayTags_ReturnValue) == 0x00000C, "Member 'ABP_PlayerCharacter_C_RailingIKBlocked::CallFunc_HasAnyGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_RailingIKBlocked, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00000D, "Member 'ABP_PlayerCharacter_C_RailingIKBlocked::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_RailingIKBlocked, CallFunc_EqualEqual_NameName_ReturnValue_1) == 0x00000E, "Member 'ABP_PlayerCharacter_C_RailingIKBlocked::CallFunc_EqualEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_RailingIKBlocked, CallFunc_BooleanOR_ReturnValue) == 0x00000F, "Member 'ABP_PlayerCharacter_C_RailingIKBlocked::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_RailingIKBlocked, CallFunc_EqualEqual_NameName_ReturnValue_2) == 0x000010, "Member 'ABP_PlayerCharacter_C_RailingIKBlocked::CallFunc_EqualEqual_NameName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_RailingIKBlocked, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'ABP_PlayerCharacter_C_RailingIKBlocked::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.Update Left Hand Weapon IK
// 0x00F0 (0x00F0 - 0x0000)
struct ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AOFWeaponActor*                         CallFunc_GetActiveWeapon_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetMesh_ReturnValue;                      // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0xF];                                       // 0x0021(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformToBoneSpace_OutPosition;         // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_TransformToBoneSpace_OutRotation;         // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00A0(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D3[0x5];                                       // 0x00D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AOFWeaponActor*                         CallFunc_GetActiveWeapon_ReturnValue_1;            // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x00E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x00E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E7[0x1];                                       // 0x00E7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK) == 0x000010, "Wrong alignment on ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK");
static_assert(sizeof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK) == 0x0000F0, "Wrong size on ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, DeltaTime) == 0x000000, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_Not_PreBool_ReturnValue_1) == 0x000005, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_Not_PreBool_ReturnValue_2) == 0x000006, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_GetActiveWeapon_ReturnValue) == 0x000008, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_GetActiveWeapon_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_GetMesh_ReturnValue) == 0x000018, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_GetMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_GetSocketTransform_ReturnValue) == 0x000030, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_BreakTransform_Location) == 0x000060, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_BreakTransform_Rotation) == 0x00006C, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_BreakTransform_Scale) == 0x000078, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_TransformToBoneSpace_OutPosition) == 0x000084, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_TransformToBoneSpace_OutPosition' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_TransformToBoneSpace_OutRotation) == 0x000090, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_TransformToBoneSpace_OutRotation' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00009C, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_MakeTransform_ReturnValue) == 0x0000A0, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000D0, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x0000D1, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_BooleanAND_ReturnValue) == 0x0000D2, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_GetActiveWeapon_ReturnValue_1) == 0x0000D8, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_GetActiveWeapon_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_IsValid_ReturnValue_2) == 0x0000E0, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_BooleanAND_ReturnValue_1) == 0x0000E1, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_BooleanAND_ReturnValue_2) == 0x0000E2, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_BooleanOR_ReturnValue) == 0x0000E3, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_BooleanAND_ReturnValue_3) == 0x0000E4, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_BooleanAND_ReturnValue_4) == 0x0000E5, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_BooleanAND_ReturnValue_5) == 0x0000E6, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_SelectFloat_ReturnValue) == 0x0000E8, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK, CallFunc_FInterpTo_ReturnValue) == 0x0000EC, "Member 'ABP_PlayerCharacter_C_Update_Left_Hand_Weapon_IK::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.UpdateHeadReactionRotation
// 0x0060 (0x0060 - 0x0000)
struct ABP_PlayerCharacter_C_UpdateHeadReactionRotation final
{
public:
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0000(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_UpdateHeadReactionRotation) == 0x000010, "Wrong alignment on ABP_PlayerCharacter_C_UpdateHeadReactionRotation");
static_assert(sizeof(ABP_PlayerCharacter_C_UpdateHeadReactionRotation) == 0x000060, "Wrong size on ABP_PlayerCharacter_C_UpdateHeadReactionRotation");
static_assert(offsetof(ABP_PlayerCharacter_C_UpdateHeadReactionRotation, CallFunc_GetSocketTransform_ReturnValue) == 0x000000, "Member 'ABP_PlayerCharacter_C_UpdateHeadReactionRotation::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_UpdateHeadReactionRotation, CallFunc_BreakTransform_Location) == 0x000030, "Member 'ABP_PlayerCharacter_C_UpdateHeadReactionRotation::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_UpdateHeadReactionRotation, CallFunc_BreakTransform_Rotation) == 0x00003C, "Member 'ABP_PlayerCharacter_C_UpdateHeadReactionRotation::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_UpdateHeadReactionRotation, CallFunc_BreakTransform_Scale) == 0x000048, "Member 'ABP_PlayerCharacter_C_UpdateHeadReactionRotation::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_UpdateHeadReactionRotation, CallFunc_ComposeRotators_ReturnValue) == 0x000054, "Member 'ABP_PlayerCharacter_C_UpdateHeadReactionRotation::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.SetCurrentWeapon
// 0x0050 (0x0050 - 0x0000)
struct ABP_PlayerCharacter_C_SetCurrentWeapon final
{
public:
	class AOFWeaponActor*                         CallFunc_GetActiveWeapon_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBP_HitScanWeaponInterface_C> K2Node_DynamicCast_AsBP_Hit_Scan_Weapon_Interface; // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EWeapons                                      CallFunc_GetWeaponType_WeaponType;                 // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMeleeWeaponActor*                      K2Node_DynamicCast_AsMelee_Weapon_Actor;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_MeleeWeapon_C>    K2Node_DynamicCast_AsBPI_Melee_Weapon;             // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTwoHanded_Value;                        // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_SetCurrentWeapon) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_SetCurrentWeapon");
static_assert(sizeof(ABP_PlayerCharacter_C_SetCurrentWeapon) == 0x000050, "Wrong size on ABP_PlayerCharacter_C_SetCurrentWeapon");
static_assert(offsetof(ABP_PlayerCharacter_C_SetCurrentWeapon, CallFunc_GetActiveWeapon_ReturnValue) == 0x000000, "Member 'ABP_PlayerCharacter_C_SetCurrentWeapon::CallFunc_GetActiveWeapon_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_SetCurrentWeapon, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'ABP_PlayerCharacter_C_SetCurrentWeapon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_SetCurrentWeapon, K2Node_DynamicCast_AsBP_Hit_Scan_Weapon_Interface) == 0x000010, "Member 'ABP_PlayerCharacter_C_SetCurrentWeapon::K2Node_DynamicCast_AsBP_Hit_Scan_Weapon_Interface' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_SetCurrentWeapon, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'ABP_PlayerCharacter_C_SetCurrentWeapon::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_SetCurrentWeapon, CallFunc_GetWeaponType_WeaponType) == 0x000021, "Member 'ABP_PlayerCharacter_C_SetCurrentWeapon::CallFunc_GetWeaponType_WeaponType' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_SetCurrentWeapon, CallFunc_IsValid_ReturnValue_1) == 0x000022, "Member 'ABP_PlayerCharacter_C_SetCurrentWeapon::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_SetCurrentWeapon, K2Node_SwitchEnum_CmpSuccess) == 0x000023, "Member 'ABP_PlayerCharacter_C_SetCurrentWeapon::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_SetCurrentWeapon, K2Node_DynamicCast_AsMelee_Weapon_Actor) == 0x000028, "Member 'ABP_PlayerCharacter_C_SetCurrentWeapon::K2Node_DynamicCast_AsMelee_Weapon_Actor' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_SetCurrentWeapon, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'ABP_PlayerCharacter_C_SetCurrentWeapon::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_SetCurrentWeapon, K2Node_DynamicCast_AsBPI_Melee_Weapon) == 0x000038, "Member 'ABP_PlayerCharacter_C_SetCurrentWeapon::K2Node_DynamicCast_AsBPI_Melee_Weapon' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_SetCurrentWeapon, K2Node_DynamicCast_bSuccess_2) == 0x000048, "Member 'ABP_PlayerCharacter_C_SetCurrentWeapon::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_SetCurrentWeapon, CallFunc_IsTwoHanded_Value) == 0x000049, "Member 'ABP_PlayerCharacter_C_SetCurrentWeapon::CallFunc_IsTwoHanded_Value' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.DisableBodyFocusOnWalkStart
// 0x0008 (0x0008 - 0x0000)
struct ABP_PlayerCharacter_C_DisableBodyFocusOnWalkStart final
{
public:
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_DisableBodyFocusOnWalkStart) == 0x000004, "Wrong alignment on ABP_PlayerCharacter_C_DisableBodyFocusOnWalkStart");
static_assert(sizeof(ABP_PlayerCharacter_C_DisableBodyFocusOnWalkStart) == 0x000008, "Wrong size on ABP_PlayerCharacter_C_DisableBodyFocusOnWalkStart");
static_assert(offsetof(ABP_PlayerCharacter_C_DisableBodyFocusOnWalkStart, CallFunc_Abs_ReturnValue) == 0x000000, "Member 'ABP_PlayerCharacter_C_DisableBodyFocusOnWalkStart::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_DisableBodyFocusOnWalkStart, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000004, "Member 'ABP_PlayerCharacter_C_DisableBodyFocusOnWalkStart::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.GetHipOffsetInterpolationSpeedForSlopes
// 0x0014 (0x0014 - 0x0000)
struct ABP_PlayerCharacter_C_GetHipOffsetInterpolationSpeedForSlopes final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerCharacter_C_GetHipOffsetInterpolationSpeedForSlopes) == 0x000004, "Wrong alignment on ABP_PlayerCharacter_C_GetHipOffsetInterpolationSpeedForSlopes");
static_assert(sizeof(ABP_PlayerCharacter_C_GetHipOffsetInterpolationSpeedForSlopes) == 0x000014, "Wrong size on ABP_PlayerCharacter_C_GetHipOffsetInterpolationSpeedForSlopes");
static_assert(offsetof(ABP_PlayerCharacter_C_GetHipOffsetInterpolationSpeedForSlopes, ReturnValue) == 0x000000, "Member 'ABP_PlayerCharacter_C_GetHipOffsetInterpolationSpeedForSlopes::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_GetHipOffsetInterpolationSpeedForSlopes, CallFunc_Abs_ReturnValue) == 0x000004, "Member 'ABP_PlayerCharacter_C_GetHipOffsetInterpolationSpeedForSlopes::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_GetHipOffsetInterpolationSpeedForSlopes, CallFunc_Abs_ReturnValue_1) == 0x000008, "Member 'ABP_PlayerCharacter_C_GetHipOffsetInterpolationSpeedForSlopes::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_GetHipOffsetInterpolationSpeedForSlopes, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00000C, "Member 'ABP_PlayerCharacter_C_GetHipOffsetInterpolationSpeedForSlopes::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_GetHipOffsetInterpolationSpeedForSlopes, CallFunc_Less_FloatFloat_ReturnValue) == 0x00000D, "Member 'ABP_PlayerCharacter_C_GetHipOffsetInterpolationSpeedForSlopes::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_GetHipOffsetInterpolationSpeedForSlopes, CallFunc_BooleanAND_ReturnValue) == 0x00000E, "Member 'ABP_PlayerCharacter_C_GetHipOffsetInterpolationSpeedForSlopes::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_GetHipOffsetInterpolationSpeedForSlopes, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'ABP_PlayerCharacter_C_GetHipOffsetInterpolationSpeedForSlopes::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.TryPlayDeathMontage
// 0x0038 (0x0038 - 0x0000)
struct ABP_PlayerCharacter_C_TryPlayDeathMontage final
{
public:
	bool                                          IsDead_0;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ECardinalDirection                            HitQuadrant;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameSubsystem_AnimationAssetManager*   CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameSubsystem_AnimationAssetManager*   CallFunc_GetGameInstanceSubsystem_ReturnValue_1;   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_GetMontageForSkeletonBlockingLoad_ReturnValue; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CallFunc_GetMontageForSkeletonBlockingLoad_ReturnValue_1; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_Play_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_Play_ReturnValue_1;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerCharacter_C_TryPlayDeathMontage) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_TryPlayDeathMontage");
static_assert(sizeof(ABP_PlayerCharacter_C_TryPlayDeathMontage) == 0x000038, "Wrong size on ABP_PlayerCharacter_C_TryPlayDeathMontage");
static_assert(offsetof(ABP_PlayerCharacter_C_TryPlayDeathMontage, IsDead_0) == 0x000000, "Member 'ABP_PlayerCharacter_C_TryPlayDeathMontage::IsDead_0' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_TryPlayDeathMontage, HitQuadrant) == 0x000001, "Member 'ABP_PlayerCharacter_C_TryPlayDeathMontage::HitQuadrant' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_TryPlayDeathMontage, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'ABP_PlayerCharacter_C_TryPlayDeathMontage::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_TryPlayDeathMontage, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'ABP_PlayerCharacter_C_TryPlayDeathMontage::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_TryPlayDeathMontage, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000010, "Member 'ABP_PlayerCharacter_C_TryPlayDeathMontage::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_TryPlayDeathMontage, CallFunc_GetGameInstanceSubsystem_ReturnValue_1) == 0x000018, "Member 'ABP_PlayerCharacter_C_TryPlayDeathMontage::CallFunc_GetGameInstanceSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_TryPlayDeathMontage, CallFunc_GetMontageForSkeletonBlockingLoad_ReturnValue) == 0x000020, "Member 'ABP_PlayerCharacter_C_TryPlayDeathMontage::CallFunc_GetMontageForSkeletonBlockingLoad_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_TryPlayDeathMontage, CallFunc_GetMontageForSkeletonBlockingLoad_ReturnValue_1) == 0x000028, "Member 'ABP_PlayerCharacter_C_TryPlayDeathMontage::CallFunc_GetMontageForSkeletonBlockingLoad_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_TryPlayDeathMontage, CallFunc_Montage_Play_ReturnValue) == 0x000030, "Member 'ABP_PlayerCharacter_C_TryPlayDeathMontage::CallFunc_Montage_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_TryPlayDeathMontage, CallFunc_Montage_Play_ReturnValue_1) == 0x000034, "Member 'ABP_PlayerCharacter_C_TryPlayDeathMontage::CallFunc_Montage_Play_ReturnValue_1' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.UpdateTurnInPlaceStartPosition
// 0x0030 (0x0030 - 0x0000)
struct ABP_PlayerCharacter_C_UpdateTurnInPlaceStartPosition final
{
public:
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetBlendspacePositionFromCurveValue_ReturnValue; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetBlendspacePositionFromCurveValue_ReturnValue_1; // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_UpdateTurnInPlaceStartPosition) == 0x000004, "Wrong alignment on ABP_PlayerCharacter_C_UpdateTurnInPlaceStartPosition");
static_assert(sizeof(ABP_PlayerCharacter_C_UpdateTurnInPlaceStartPosition) == 0x000030, "Wrong size on ABP_PlayerCharacter_C_UpdateTurnInPlaceStartPosition");
static_assert(offsetof(ABP_PlayerCharacter_C_UpdateTurnInPlaceStartPosition, CallFunc_MakeVector_ReturnValue) == 0x000000, "Member 'ABP_PlayerCharacter_C_UpdateTurnInPlaceStartPosition::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_UpdateTurnInPlaceStartPosition, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'ABP_PlayerCharacter_C_UpdateTurnInPlaceStartPosition::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_UpdateTurnInPlaceStartPosition, CallFunc_GetCurveValue_ReturnValue) == 0x000010, "Member 'ABP_PlayerCharacter_C_UpdateTurnInPlaceStartPosition::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_UpdateTurnInPlaceStartPosition, CallFunc_GetBlendspacePositionFromCurveValue_ReturnValue) == 0x000014, "Member 'ABP_PlayerCharacter_C_UpdateTurnInPlaceStartPosition::CallFunc_GetBlendspacePositionFromCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_UpdateTurnInPlaceStartPosition, CallFunc_MakeVector_ReturnValue_1) == 0x000018, "Member 'ABP_PlayerCharacter_C_UpdateTurnInPlaceStartPosition::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_UpdateTurnInPlaceStartPosition, CallFunc_GetCurveValue_ReturnValue_1) == 0x000024, "Member 'ABP_PlayerCharacter_C_UpdateTurnInPlaceStartPosition::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_UpdateTurnInPlaceStartPosition, CallFunc_GetBlendspacePositionFromCurveValue_ReturnValue_1) == 0x000028, "Member 'ABP_PlayerCharacter_C_UpdateTurnInPlaceStartPosition::CallFunc_GetBlendspacePositionFromCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_UpdateTurnInPlaceStartPosition, CallFunc_IsValid_ReturnValue_1) == 0x00002C, "Member 'ABP_PlayerCharacter_C_UpdateTurnInPlaceStartPosition::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.CacheFeetPlantedCurve
// 0x0008 (0x0008 - 0x0000)
struct ABP_PlayerCharacter_C_CacheFeetPlantedCurve final
{
public:
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerCharacter_C_CacheFeetPlantedCurve) == 0x000004, "Wrong alignment on ABP_PlayerCharacter_C_CacheFeetPlantedCurve");
static_assert(sizeof(ABP_PlayerCharacter_C_CacheFeetPlantedCurve) == 0x000008, "Wrong size on ABP_PlayerCharacter_C_CacheFeetPlantedCurve");
static_assert(offsetof(ABP_PlayerCharacter_C_CacheFeetPlantedCurve, CallFunc_GetCurveValue_ReturnValue) == 0x000000, "Member 'ABP_PlayerCharacter_C_CacheFeetPlantedCurve::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_CacheFeetPlantedCurve, CallFunc_GetCurveValue_ReturnValue_1) == 0x000004, "Member 'ABP_PlayerCharacter_C_CacheFeetPlantedCurve::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.LoadCompleteDelegate_9EE0A5334208AC44B6DABEB4A697BB57
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerCharacter_C_LoadCompleteDelegate_9EE0A5334208AC44B6DABEB4A697BB57 final
{
public:
	TArray<class UObject*>                        LoadedAssets;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(ABP_PlayerCharacter_C_LoadCompleteDelegate_9EE0A5334208AC44B6DABEB4A697BB57) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_LoadCompleteDelegate_9EE0A5334208AC44B6DABEB4A697BB57");
static_assert(sizeof(ABP_PlayerCharacter_C_LoadCompleteDelegate_9EE0A5334208AC44B6DABEB4A697BB57) == 0x000010, "Wrong size on ABP_PlayerCharacter_C_LoadCompleteDelegate_9EE0A5334208AC44B6DABEB4A697BB57");
static_assert(offsetof(ABP_PlayerCharacter_C_LoadCompleteDelegate_9EE0A5334208AC44B6DABEB4A697BB57, LoadedAssets) == 0x000000, "Member 'ABP_PlayerCharacter_C_LoadCompleteDelegate_9EE0A5334208AC44B6DABEB4A697BB57::LoadedAssets' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.LoadCompleteDelegate_EAC9E0F14535D52A133BE59179EF1EF4
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerCharacter_C_LoadCompleteDelegate_EAC9E0F14535D52A133BE59179EF1EF4 final
{
public:
	TArray<class UObject*>                        LoadedAssets;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(ABP_PlayerCharacter_C_LoadCompleteDelegate_EAC9E0F14535D52A133BE59179EF1EF4) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_LoadCompleteDelegate_EAC9E0F14535D52A133BE59179EF1EF4");
static_assert(sizeof(ABP_PlayerCharacter_C_LoadCompleteDelegate_EAC9E0F14535D52A133BE59179EF1EF4) == 0x000010, "Wrong size on ABP_PlayerCharacter_C_LoadCompleteDelegate_EAC9E0F14535D52A133BE59179EF1EF4");
static_assert(offsetof(ABP_PlayerCharacter_C_LoadCompleteDelegate_EAC9E0F14535D52A133BE59179EF1EF4, LoadedAssets) == 0x000000, "Member 'ABP_PlayerCharacter_C_LoadCompleteDelegate_EAC9E0F14535D52A133BE59179EF1EF4::LoadedAssets' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.LoadCompleteDelegate_39A45FAB4E27FBBE1CF4A090D855B3E1
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerCharacter_C_LoadCompleteDelegate_39A45FAB4E27FBBE1CF4A090D855B3E1 final
{
public:
	TArray<class UObject*>                        LoadedAssets;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(ABP_PlayerCharacter_C_LoadCompleteDelegate_39A45FAB4E27FBBE1CF4A090D855B3E1) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_LoadCompleteDelegate_39A45FAB4E27FBBE1CF4A090D855B3E1");
static_assert(sizeof(ABP_PlayerCharacter_C_LoadCompleteDelegate_39A45FAB4E27FBBE1CF4A090D855B3E1) == 0x000010, "Wrong size on ABP_PlayerCharacter_C_LoadCompleteDelegate_39A45FAB4E27FBBE1CF4A090D855B3E1");
static_assert(offsetof(ABP_PlayerCharacter_C_LoadCompleteDelegate_39A45FAB4E27FBBE1CF4A090D855B3E1, LoadedAssets) == 0x000000, "Member 'ABP_PlayerCharacter_C_LoadCompleteDelegate_39A45FAB4E27FBBE1CF4A090D855B3E1::LoadedAssets' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.LoadCompleteDelegate_C576CA8A46A89DF2943626AF304A1984
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerCharacter_C_LoadCompleteDelegate_C576CA8A46A89DF2943626AF304A1984 final
{
public:
	TArray<class UObject*>                        LoadedAssets;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(ABP_PlayerCharacter_C_LoadCompleteDelegate_C576CA8A46A89DF2943626AF304A1984) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_LoadCompleteDelegate_C576CA8A46A89DF2943626AF304A1984");
static_assert(sizeof(ABP_PlayerCharacter_C_LoadCompleteDelegate_C576CA8A46A89DF2943626AF304A1984) == 0x000010, "Wrong size on ABP_PlayerCharacter_C_LoadCompleteDelegate_C576CA8A46A89DF2943626AF304A1984");
static_assert(offsetof(ABP_PlayerCharacter_C_LoadCompleteDelegate_C576CA8A46A89DF2943626AF304A1984, LoadedAssets) == 0x000000, "Member 'ABP_PlayerCharacter_C_LoadCompleteDelegate_C576CA8A46A89DF2943626AF304A1984::LoadedAssets' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_PlayerCharacter_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerCharacter_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_PlayerCharacter_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_PlayerCharacter_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_PlayerCharacter_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_PlayerCharacter_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_PlayerCharacter_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.OnWeaponAttackHit
// 0x0238 (0x0238 - 0x0000)
struct ABP_PlayerCharacter_C_OnWeaponAttackHit final
{
public:
	float                                         HitStrength;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitForce;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CharacterIsDead;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitDirection;                                      // 0x000C(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECardinalDirection                            HitQuadrant;                                       // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitInfo;                                           // 0x001C(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitReactionData                       HitReactionData;                                   // 0x00A8(0x00E0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	struct FGameplayEventData                     EventData;                                         // 0x0188(0x00B0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(ABP_PlayerCharacter_C_OnWeaponAttackHit) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_OnWeaponAttackHit");
static_assert(sizeof(ABP_PlayerCharacter_C_OnWeaponAttackHit) == 0x000238, "Wrong size on ABP_PlayerCharacter_C_OnWeaponAttackHit");
static_assert(offsetof(ABP_PlayerCharacter_C_OnWeaponAttackHit, HitStrength) == 0x000000, "Member 'ABP_PlayerCharacter_C_OnWeaponAttackHit::HitStrength' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_OnWeaponAttackHit, HitForce) == 0x000004, "Member 'ABP_PlayerCharacter_C_OnWeaponAttackHit::HitForce' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_OnWeaponAttackHit, CharacterIsDead) == 0x000008, "Member 'ABP_PlayerCharacter_C_OnWeaponAttackHit::CharacterIsDead' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_OnWeaponAttackHit, HitDirection) == 0x00000C, "Member 'ABP_PlayerCharacter_C_OnWeaponAttackHit::HitDirection' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_OnWeaponAttackHit, HitQuadrant) == 0x000018, "Member 'ABP_PlayerCharacter_C_OnWeaponAttackHit::HitQuadrant' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_OnWeaponAttackHit, HitInfo) == 0x00001C, "Member 'ABP_PlayerCharacter_C_OnWeaponAttackHit::HitInfo' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_OnWeaponAttackHit, HitReactionData) == 0x0000A8, "Member 'ABP_PlayerCharacter_C_OnWeaponAttackHit::HitReactionData' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_OnWeaponAttackHit, EventData) == 0x000188, "Member 'ABP_PlayerCharacter_C_OnWeaponAttackHit::EventData' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.StartHeadReaction
// 0x000C (0x000C - 0x0000)
struct ABP_PlayerCharacter_C_StartHeadReaction final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_StartHeadReaction) == 0x000004, "Wrong alignment on ABP_PlayerCharacter_C_StartHeadReaction");
static_assert(sizeof(ABP_PlayerCharacter_C_StartHeadReaction) == 0x00000C, "Wrong size on ABP_PlayerCharacter_C_StartHeadReaction");
static_assert(offsetof(ABP_PlayerCharacter_C_StartHeadReaction, Rotation) == 0x000000, "Member 'ABP_PlayerCharacter_C_StartHeadReaction::Rotation' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.SetCanBlendToTurnInPlace
// 0x0001 (0x0001 - 0x0000)
struct ABP_PlayerCharacter_C_SetCanBlendToTurnInPlace final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_SetCanBlendToTurnInPlace) == 0x000001, "Wrong alignment on ABP_PlayerCharacter_C_SetCanBlendToTurnInPlace");
static_assert(sizeof(ABP_PlayerCharacter_C_SetCanBlendToTurnInPlace) == 0x000001, "Wrong size on ABP_PlayerCharacter_C_SetCanBlendToTurnInPlace");
static_assert(offsetof(ABP_PlayerCharacter_C_SetCanBlendToTurnInPlace, Value) == 0x000000, "Member 'ABP_PlayerCharacter_C_SetCanBlendToTurnInPlace::Value' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.OverrideFaceBlendWeightForBarks
// 0x0004 (0x0004 - 0x0000)
struct ABP_PlayerCharacter_C_OverrideFaceBlendWeightForBarks final
{
public:
	float                                         OverrideWeight;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerCharacter_C_OverrideFaceBlendWeightForBarks) == 0x000004, "Wrong alignment on ABP_PlayerCharacter_C_OverrideFaceBlendWeightForBarks");
static_assert(sizeof(ABP_PlayerCharacter_C_OverrideFaceBlendWeightForBarks) == 0x000004, "Wrong size on ABP_PlayerCharacter_C_OverrideFaceBlendWeightForBarks");
static_assert(offsetof(ABP_PlayerCharacter_C_OverrideFaceBlendWeightForBarks, OverrideWeight) == 0x000000, "Member 'ABP_PlayerCharacter_C_OverrideFaceBlendWeightForBarks::OverrideWeight' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.ExecuteUbergraph_ABP_PlayerCharacter
// 0x06B0 (0x06B0 - 0x0000)
struct ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_1;        // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UObject*>                        K2Node_CustomEvent_LoadedAssets_3;                 // 0x0020(0x0010)(ConstParm, ReferenceParm)
	class UObject*                                CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerCharacter_FaceAnims_C*        K2Node_DynamicCast_AsBP_Player_Character_Face_Anims; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1; // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UObject*>                        K2Node_CustomEvent_LoadedAssets_2;                 // 0x0048(0x0010)(ConstParm, ReferenceParm)
	TArray<class UObject*>                        K2Node_CustomEvent_LoadedAssets_1;                 // 0x0058(0x0010)(ConstParm, ReferenceParm)
	class UObject*                                CallFunc_Array_Get_Item_1;                         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Array_Get_Item_2;                         // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerCharacterWeaponAnimations_C*  K2Node_DynamicCast_AsBP_Player_Character_Weapon_Animations; // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerCharacterContextualMovementAnimations_C* K2Node_DynamicCast_AsBP_Player_Character_Contextual_Movement_Animations; // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue_1; // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UObject*>                        K2Node_CustomEvent_LoadedAssets;                   // 0x0098(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Array_Get_Item_3;                         // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerCharacterAnimations_C*        K2Node_DynamicCast_AsBP_Player_Character_Animations; // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_2;            // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CA[0x2];                                       // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SmoothStep_ReturnValue;                   // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_2;        // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_3;         // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_2;                // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EA[0x2];                                       // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_3;            // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_4;         // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F2[0x2];                                       // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EIKHandRotationMode                           Temp_byte_Variable;                                // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EIKHandRotationMode                           Temp_byte_Variable_1;                              // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_5;         // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11B[0x1];                                      // 0x011B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0130(0x0030)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default;                             // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_165[0xB];                                      // 0x0165(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0170(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0xC];                                      // 0x01A4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x01B0(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E8[0x8];                                      // 0x01E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_3;              // 0x01F0(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MakeLiteralBool_ReturnValue;              // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_222[0x2];                                      // 0x0222(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue_2; // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_235[0x3];                                      // 0x0235(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_3;                // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_241[0x3];                                      // 0x0241(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_4;                // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0248(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0254(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetEffectorTransform_OutTransform;        // 0x0270(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetEffectorTransform_OutTransform_1;      // 0x02A0(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_1;      // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x02D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D2[0x2];                                      // 0x02D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRelevantAnimTime_ReturnValue;          // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue_3; // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_6;         // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x02E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E2[0x2];                                      // 0x02E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_2; // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_4;            // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_2;      // 0x02E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x02EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x02EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SignOfFloat_ReturnValue;                  // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue_1;                // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_8;        // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_3;      // 0x02FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FD[0x3];                                      // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_3;        // 0x0304(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_6;                // 0x0305(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_306[0x2];                                      // 0x0306(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_8;                 // 0x030C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_7;         // 0x030D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_9;                 // 0x030E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x030F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_4;        // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_10;                // 0x0311(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_312[0x2];                                      // 0x0312(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_9;        // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_10;       // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_11;       // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_12;       // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_7;                // 0x0324(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyGameplayTags_ReturnValue;           // 0x0325(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_8;                // 0x0326(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_9;                // 0x0327(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_11;                // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_329[0x3];                                      // 0x0329(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_5;                // 0x032C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_10;               // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_5;        // 0x0331(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_12;                // 0x0332(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_13;                // 0x0333(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_14;                // 0x0334(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_335[0x3];                                      // 0x0335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_3; // 0x0338(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_11;               // 0x033C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_12;               // 0x033D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33E[0x2];                                      // 0x033E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue_4; // 0x034C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_5;            // 0x0351(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_15;                // 0x0352(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_16;                // 0x0353(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_17;                // 0x0354(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_18;                // 0x0355(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_19;                // 0x0356(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_13;               // 0x0357(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_20;                // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_14;               // 0x0359(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35A[0x2];                                      // 0x035A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x035C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_21;                // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_361[0x3];                                      // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeLiteralFloat_ReturnValue_1;           // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_15;               // 0x0368(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369[0x3];                                      // 0x0369(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x036C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_6;                // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(TArray<class UObject*>& LoadedAssets)> K2Node_CreateDelegate_OutputDelegate;              // 0x0374(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_6;            // 0x0384(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_385[0x3];                                      // 0x0385(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(TArray<class UObject*>& LoadedAssets)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0388(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_6;                  // 0x039C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39D[0x3];                                      // 0x039D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(TArray<class UObject*>& LoadedAssets)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x03A0(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_16;               // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B1[0x3];                                      // 0x03B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(TArray<class UObject*>& LoadedAssets)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x03B4(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_Event_HitStrength;                          // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_HitForce;                             // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_CharacterIsDead;                      // 0x03CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CD[0x3];                                      // 0x03CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_HitDirection;                         // 0x03D0(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECardinalDirection                            K2Node_Event_HitQuadrant;                          // 0x03DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DD[0x3];                                      // 0x03DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_Event_HitInfo;                              // 0x03E0(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitReactionData                       K2Node_Event_HitReactionData;                      // 0x0468(0x00E0)(ConstParm, ContainsInstancedReference)
	struct FGameplayEventData                     K2Node_Event_EventData;                            // 0x0548(0x00B0)(ConstParm)
	struct FRotator                               K2Node_Event_Rotation;                             // 0x05F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyGameplayTags_ReturnValue_1;         // 0x0604(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_4;      // 0x0605(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_7;                  // 0x0606(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_8;                  // 0x0607(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_9;                  // 0x0608(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_22;                // 0x0609(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Value;                                // 0x060A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_23;                // 0x060B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x060C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_60D[0x3];                                      // 0x060D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_7;                // 0x0610(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_614[0x4];                                      // 0x0614(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlayerCharacterAnimations_C*        CallFunc_LoadEditorPreviewAnimations_ReturnValue;  // 0x0618(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerCharacterContextualMovementAnimations_C* CallFunc_LoadEditorPreviewAnimations_ReturnValue_1; // 0x0620(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerCharacterWeaponAnimations_C*  CallFunc_LoadEditorPreviewAnimations_ReturnValue_2; // 0x0628(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_PlayerCharacter_FaceAnims_C*        CallFunc_LoadEditorPreviewAnimations_ReturnValue_3; // 0x0630(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_OverrideWeight;                       // 0x0638(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_8;         // 0x063C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_63D[0x3];                                      // 0x063D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0640(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64C[0x4];                                      // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UObject>>         K2Node_MakeArray_Array;                            // 0x0650(0x0010)(ReferenceParm)
	TArray<TSoftObjectPtr<class UObject>>         K2Node_MakeArray_Array_1;                          // 0x0660(0x0010)(ReferenceParm)
	TArray<TSoftObjectPtr<class UObject>>         K2Node_MakeArray_Array_2;                          // 0x0670(0x0010)(ReferenceParm)
	bool                                          CallFunc_Not_PreBool_ReturnValue_17;               // 0x0680(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_681[0x3];                                      // 0x0681(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTime_ReturnValue_1;        // 0x0684(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UObject>>         K2Node_MakeArray_Array_3;                          // 0x0688(0x0010)(ReferenceParm)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_9;         // 0x0698(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_24;                // 0x0699(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_25;                // 0x069A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_10;                 // 0x069B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Abs_ReturnValue_2;                        // 0x069C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_10;        // 0x06A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x06A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_26;                // 0x06A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_11;                 // 0x06A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_27;                // 0x06A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter) == 0x000010, "Wrong alignment on ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter");
static_assert(sizeof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter) == 0x0006B0, "Wrong size on ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, EntryPoint) == 0x000000, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000005, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Not_PreBool_ReturnValue_1) == 0x000006, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000007, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Not_PreBool_ReturnValue_2) == 0x000008, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue) == 0x000009, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_1) == 0x00000A, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_2) == 0x00000B, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue) == 0x00000C, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue) == 0x000010, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Less_FloatFloat_ReturnValue) == 0x000014, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000015, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanOR_ReturnValue) == 0x000016, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_NotEqual_FloatFloat_ReturnValue_1) == 0x000017, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_NotEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_3) == 0x000018, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000019, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_SelectFloat_ReturnValue) == 0x00001C, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_CustomEvent_LoadedAssets_3) == 0x000020, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_CustomEvent_LoadedAssets_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Array_Get_Item) == 0x000030, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_DynamicCast_AsBP_Player_Character_Face_Anims) == 0x000038, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_DynamicCast_AsBP_Player_Character_Face_Anims' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1) == 0x000044, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_CustomEvent_LoadedAssets_2) == 0x000048, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_CustomEvent_LoadedAssets_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_CustomEvent_LoadedAssets_1) == 0x000058, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_CustomEvent_LoadedAssets_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Array_Get_Item_1) == 0x000068, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Array_Get_Item_2) == 0x000070, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_DynamicCast_AsBP_Player_Character_Weapon_Animations) == 0x000078, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_DynamicCast_AsBP_Player_Character_Weapon_Animations' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_DynamicCast_bSuccess_1) == 0x000080, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_DynamicCast_AsBP_Player_Character_Contextual_Movement_Animations) == 0x000088, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_DynamicCast_AsBP_Player_Character_Contextual_Movement_Animations' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_DynamicCast_bSuccess_2) == 0x000090, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue_1) == 0x000094, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_CustomEvent_LoadedAssets) == 0x000098, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_CustomEvent_LoadedAssets' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x0000A8, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Array_Get_Item_3) == 0x0000B0, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_DynamicCast_AsBP_Player_Character_Animations) == 0x0000B8, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_DynamicCast_AsBP_Player_Character_Animations' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_DynamicCast_bSuccess_3) == 0x0000C0, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Abs_ReturnValue) == 0x0000C4, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Less_FloatFloat_ReturnValue_2) == 0x0000C8, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Less_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x0000C9, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_SelectFloat_ReturnValue_1) == 0x0000CC, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_SmoothStep_ReturnValue) == 0x0000D0, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_SmoothStep_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000D4, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_NotEqual_FloatFloat_ReturnValue_2) == 0x0000D8, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_NotEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_4) == 0x0000D9, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Abs_ReturnValue_1) == 0x0000DC, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Greater_FloatFloat_ReturnValue_3) == 0x0000E0, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Greater_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_SelectFloat_ReturnValue_2) == 0x0000E4, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Not_PreBool_ReturnValue_3) == 0x0000E8, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_5) == 0x0000E9, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, Temp_float_Variable) == 0x0000EC, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Less_FloatFloat_ReturnValue_3) == 0x0000F0, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Less_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Greater_FloatFloat_ReturnValue_4) == 0x0000F1, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Greater_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BreakVector_X) == 0x0000F4, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BreakVector_Y) == 0x0000F8, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BreakVector_Z) == 0x0000FC, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, Temp_float_Variable_1) == 0x000100, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000104, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000108, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, Temp_byte_Variable) == 0x00010C, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, Temp_float_Variable_2) == 0x000110, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, Temp_float_Variable_3) == 0x000114, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanOR_ReturnValue_1) == 0x000118, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, Temp_byte_Variable_1) == 0x000119, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Greater_FloatFloat_ReturnValue_5) == 0x00011A, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Greater_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BreakRotator_Roll) == 0x00011C, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BreakRotator_Pitch) == 0x000120, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BreakRotator_Yaw) == 0x000124, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000128, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x00012C, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_MakeTransform_ReturnValue) == 0x000130, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_Select_Default) == 0x000160, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000164, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_MakeTransform_ReturnValue_1) == 0x000170, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_FMax_ReturnValue) == 0x0001A0, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_MakeTransform_ReturnValue_2) == 0x0001B0, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0001E0, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_Select_Default_1) == 0x0001E4, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_MakeTransform_ReturnValue_3) == 0x0001F0, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_MakeTransform_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_MakeLiteralBool_ReturnValue) == 0x000220, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_MakeLiteralBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Not_PreBool_ReturnValue_4) == 0x000221, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BreakRotator_Roll_1) == 0x000224, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BreakRotator_Pitch_1) == 0x000228, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BreakRotator_Yaw_1) == 0x00022C, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue_2) == 0x000230, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Not_PreBool_ReturnValue_5) == 0x000234, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_SelectFloat_ReturnValue_3) == 0x000238, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_SelectFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x00023C, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanOR_ReturnValue_2) == 0x000240, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_SelectFloat_ReturnValue_4) == 0x000244, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_SelectFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BreakTransform_Location) == 0x000248, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BreakTransform_Rotation) == 0x000254, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BreakTransform_Scale) == 0x000260, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_GetEffectorTransform_OutTransform) == 0x000270, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_GetEffectorTransform_OutTransform' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_GetEffectorTransform_OutTransform_1) == 0x0002A0, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_GetEffectorTransform_OutTransform_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_EqualEqual_FloatFloat_ReturnValue_1) == 0x0002D0, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_EqualEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_6) == 0x0002D1, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x0002D4, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_GetRelevantAnimTime_ReturnValue) == 0x0002D8, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_GetRelevantAnimTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue_3) == 0x0002DC, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Greater_FloatFloat_ReturnValue_6) == 0x0002E0, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Greater_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_7) == 0x0002E1, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_2) == 0x0002E4, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Less_FloatFloat_ReturnValue_4) == 0x0002E8, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Less_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_EqualEqual_FloatFloat_ReturnValue_2) == 0x0002E9, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_EqualEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanOR_ReturnValue_3) == 0x0002EA, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanOR_ReturnValue_4) == 0x0002EB, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_SignOfFloat_ReturnValue) == 0x0002EC, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x0002F0, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_SignOfFloat_ReturnValue_1) == 0x0002F4, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_SignOfFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Multiply_FloatFloat_ReturnValue_8) == 0x0002F8, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Multiply_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_EqualEqual_FloatFloat_ReturnValue_3) == 0x0002FC, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_EqualEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000300, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_NotEqual_FloatFloat_ReturnValue_3) == 0x000304, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_NotEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Not_PreBool_ReturnValue_6) == 0x000305, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Not_PreBool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_VSize_ReturnValue) == 0x000308, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_8) == 0x00030C, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Greater_FloatFloat_ReturnValue_7) == 0x00030D, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Greater_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_9) == 0x00030E, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanOR_ReturnValue_5) == 0x00030F, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_NotEqual_FloatFloat_ReturnValue_4) == 0x000310, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_NotEqual_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_10) == 0x000311, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Multiply_FloatFloat_ReturnValue_9) == 0x000314, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Multiply_FloatFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Multiply_FloatFloat_ReturnValue_10) == 0x000318, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Multiply_FloatFloat_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Multiply_FloatFloat_ReturnValue_11) == 0x00031C, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Multiply_FloatFloat_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Multiply_FloatFloat_ReturnValue_12) == 0x000320, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Multiply_FloatFloat_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Not_PreBool_ReturnValue_7) == 0x000324, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Not_PreBool_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_HasAnyGameplayTags_ReturnValue) == 0x000325, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_HasAnyGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Not_PreBool_ReturnValue_8) == 0x000326, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Not_PreBool_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Not_PreBool_ReturnValue_9) == 0x000327, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Not_PreBool_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_11) == 0x000328, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_SelectFloat_ReturnValue_5) == 0x00032C, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_SelectFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Not_PreBool_ReturnValue_10) == 0x000330, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Not_PreBool_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_NotEqual_FloatFloat_ReturnValue_5) == 0x000331, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_NotEqual_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_12) == 0x000332, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_13) == 0x000333, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_14) == 0x000334, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_3) == 0x000338, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Not_PreBool_ReturnValue_11) == 0x00033C, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Not_PreBool_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Not_PreBool_ReturnValue_12) == 0x00033D, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Not_PreBool_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BreakRotator_Roll_2) == 0x000340, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BreakRotator_Pitch_2) == 0x000344, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BreakRotator_Yaw_2) == 0x000348, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue_4) == 0x00034C, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_GetInstanceTransitionCrossfadeDuration_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000350, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Less_FloatFloat_ReturnValue_5) == 0x000351, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Less_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_15) == 0x000352, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_16) == 0x000353, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_17) == 0x000354, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_18) == 0x000355, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_19) == 0x000356, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Not_PreBool_ReturnValue_13) == 0x000357, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Not_PreBool_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_20) == 0x000358, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Not_PreBool_ReturnValue_14) == 0x000359, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Not_PreBool_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_MakeLiteralFloat_ReturnValue) == 0x00035C, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_21) == 0x000360, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_MakeLiteralFloat_ReturnValue_1) == 0x000364, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_MakeLiteralFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Not_PreBool_ReturnValue_15) == 0x000368, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Not_PreBool_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_MapRangeClamped_ReturnValue) == 0x00036C, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_SelectFloat_ReturnValue_6) == 0x000370, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_SelectFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_CreateDelegate_OutputDelegate) == 0x000374, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Less_FloatFloat_ReturnValue_6) == 0x000384, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Less_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_CreateDelegate_OutputDelegate_1) == 0x000388, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_Event_DeltaTimeX) == 0x000398, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanOR_ReturnValue_6) == 0x00039C, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanOR_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_CreateDelegate_OutputDelegate_2) == 0x0003A0, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Not_PreBool_ReturnValue_16) == 0x0003B0, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Not_PreBool_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_CreateDelegate_OutputDelegate_3) == 0x0003B4, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_Event_HitStrength) == 0x0003C4, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_Event_HitStrength' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_Event_HitForce) == 0x0003C8, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_Event_HitForce' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_Event_CharacterIsDead) == 0x0003CC, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_Event_CharacterIsDead' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_Event_HitDirection) == 0x0003D0, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_Event_HitDirection' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_Event_HitQuadrant) == 0x0003DC, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_Event_HitQuadrant' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_Event_HitInfo) == 0x0003E0, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_Event_HitInfo' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_Event_HitReactionData) == 0x000468, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_Event_HitReactionData' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_Event_EventData) == 0x000548, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_Event_EventData' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_Event_Rotation) == 0x0005F8, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_Event_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_HasAnyGameplayTags_ReturnValue_1) == 0x000604, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_HasAnyGameplayTags_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_EqualEqual_FloatFloat_ReturnValue_4) == 0x000605, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_EqualEqual_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanOR_ReturnValue_7) == 0x000606, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanOR_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanOR_ReturnValue_8) == 0x000607, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanOR_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanOR_ReturnValue_9) == 0x000608, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanOR_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_22) == 0x000609, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_Event_Value) == 0x00060A, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_23) == 0x00060B, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_IsValid_ReturnValue) == 0x00060C, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_SelectFloat_ReturnValue_7) == 0x000610, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_SelectFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_LoadEditorPreviewAnimations_ReturnValue) == 0x000618, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_LoadEditorPreviewAnimations_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_LoadEditorPreviewAnimations_ReturnValue_1) == 0x000620, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_LoadEditorPreviewAnimations_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_LoadEditorPreviewAnimations_ReturnValue_2) == 0x000628, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_LoadEditorPreviewAnimations_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_LoadEditorPreviewAnimations_ReturnValue_3) == 0x000630, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_LoadEditorPreviewAnimations_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_Event_OverrideWeight) == 0x000638, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_Event_OverrideWeight' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Greater_FloatFloat_ReturnValue_8) == 0x00063C, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Greater_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000640, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_MakeArray_Array) == 0x000650, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_MakeArray_Array_1) == 0x000660, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_MakeArray_Array_2) == 0x000670, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Not_PreBool_ReturnValue_17) == 0x000680, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Not_PreBool_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_GetRelevantAnimTime_ReturnValue_1) == 0x000684, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_GetRelevantAnimTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, K2Node_MakeArray_Array_3) == 0x000688, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Greater_FloatFloat_ReturnValue_9) == 0x000698, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Greater_FloatFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_24) == 0x000699, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_25) == 0x00069A, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanOR_ReturnValue_10) == 0x00069B, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanOR_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Abs_ReturnValue_2) == 0x00069C, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_Greater_FloatFloat_ReturnValue_10) == 0x0006A0, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_Greater_FloatFloat_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0006A1, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_26) == 0x0006A2, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_26' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanOR_ReturnValue_11) == 0x0006A3, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanOR_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter, CallFunc_BooleanAND_ReturnValue_27) == 0x0006A4, "Member 'ABP_PlayerCharacter_C_ExecuteUbergraph_ABP_PlayerCharacter::CallFunc_BooleanAND_ReturnValue_27' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.GetContextualMovementCharacterData
// 0x0010 (0x0010 - 0x0000)
struct ABP_PlayerCharacter_C_GetContextualMovementCharacterData final
{
public:
	class UBP_PlayerCharacterContextualMovementAnimations_C* Animations_0;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPoseMatchingProfileDataAsset*          PoseMatchingProfile_0;                             // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerCharacter_C_GetContextualMovementCharacterData) == 0x000008, "Wrong alignment on ABP_PlayerCharacter_C_GetContextualMovementCharacterData");
static_assert(sizeof(ABP_PlayerCharacter_C_GetContextualMovementCharacterData) == 0x000010, "Wrong size on ABP_PlayerCharacter_C_GetContextualMovementCharacterData");
static_assert(offsetof(ABP_PlayerCharacter_C_GetContextualMovementCharacterData, Animations_0) == 0x000000, "Member 'ABP_PlayerCharacter_C_GetContextualMovementCharacterData::Animations_0' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_GetContextualMovementCharacterData, PoseMatchingProfile_0) == 0x000008, "Member 'ABP_PlayerCharacter_C_GetContextualMovementCharacterData::PoseMatchingProfile_0' has a wrong offset!");

// Function ABP_PlayerCharacter.ABP_PlayerCharacter_C.GetDynamicsAlpha
// 0x000C (0x000C - 0x0000)
struct ABP_PlayerCharacter_C_GetDynamicsAlpha final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PlayerCharacter_C_GetDynamicsAlpha) == 0x000004, "Wrong alignment on ABP_PlayerCharacter_C_GetDynamicsAlpha");
static_assert(sizeof(ABP_PlayerCharacter_C_GetDynamicsAlpha) == 0x00000C, "Wrong size on ABP_PlayerCharacter_C_GetDynamicsAlpha");
static_assert(offsetof(ABP_PlayerCharacter_C_GetDynamicsAlpha, Key) == 0x000000, "Member 'ABP_PlayerCharacter_C_GetDynamicsAlpha::Key' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C_GetDynamicsAlpha, ReturnValue) == 0x000008, "Member 'ABP_PlayerCharacter_C_GetDynamicsAlpha::ReturnValue' has a wrong offset!");

}

