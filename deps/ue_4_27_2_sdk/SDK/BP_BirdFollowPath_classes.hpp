#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BirdFollowPath

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BirdFollowPath.BP_BirdFollowPath_C
// 0x0078 (0x02B0 - 0x0238)
class ABP_BirdFollowPath_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAbilitySystemComponent*                AbilitySystem;                                     // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    BirdActivateSound;                                 // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    BirdFlyingSound;                                   // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    BirdIdleSound;                                     // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDynamicMaterialEffectsComponent*       DynamicMaterialEffects;                            // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Bird;                                              // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFlying;                                          // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_289[0x3];                                      // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FlyingAnimationAlpha;                              // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxFlyingSpeed;                                    // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartFlyingSpeed;                                  // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AccelerationDuration;                              // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlyingAnimationBlendDuration;                      // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceFlownAlongSpline;                          // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlyingTime;                                        // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreviewLocation;                                   // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SetBirdTransformAtDistAlongSpline(float Distance);
	void UpdateFlyingMovement();
	void UpdateFlyingAnimationBlend();
	void UserConstructionScript();
	void ReceiveTick(float DeltaSeconds);
	void BndEvt__BP_BirdFollowPath_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void TriggerEvent();
	void ReceiveBeginPlay();
	void WeaponHit(class AActor* Weapon, const struct FGameplayTag& EventTag, const struct FGameplayEventData& Payload);
	void ExecuteUbergraph_BP_BirdFollowPath(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BirdFollowPath_C">();
	}
	static class ABP_BirdFollowPath_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BirdFollowPath_C>();
	}
};
static_assert(alignof(ABP_BirdFollowPath_C) == 0x000008, "Wrong alignment on ABP_BirdFollowPath_C");
static_assert(sizeof(ABP_BirdFollowPath_C) == 0x0002B0, "Wrong size on ABP_BirdFollowPath_C");
static_assert(offsetof(ABP_BirdFollowPath_C, UberGraphFrame) == 0x000238, "Member 'ABP_BirdFollowPath_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BirdFollowPath_C, AbilitySystem) == 0x000240, "Member 'ABP_BirdFollowPath_C::AbilitySystem' has a wrong offset!");
static_assert(offsetof(ABP_BirdFollowPath_C, BirdActivateSound) == 0x000248, "Member 'ABP_BirdFollowPath_C::BirdActivateSound' has a wrong offset!");
static_assert(offsetof(ABP_BirdFollowPath_C, BirdFlyingSound) == 0x000250, "Member 'ABP_BirdFollowPath_C::BirdFlyingSound' has a wrong offset!");
static_assert(offsetof(ABP_BirdFollowPath_C, BirdIdleSound) == 0x000258, "Member 'ABP_BirdFollowPath_C::BirdIdleSound' has a wrong offset!");
static_assert(offsetof(ABP_BirdFollowPath_C, DynamicMaterialEffects) == 0x000260, "Member 'ABP_BirdFollowPath_C::DynamicMaterialEffects' has a wrong offset!");
static_assert(offsetof(ABP_BirdFollowPath_C, Box) == 0x000268, "Member 'ABP_BirdFollowPath_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_BirdFollowPath_C, Bird) == 0x000270, "Member 'ABP_BirdFollowPath_C::Bird' has a wrong offset!");
static_assert(offsetof(ABP_BirdFollowPath_C, Spline) == 0x000278, "Member 'ABP_BirdFollowPath_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_BirdFollowPath_C, DefaultSceneRoot) == 0x000280, "Member 'ABP_BirdFollowPath_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BirdFollowPath_C, IsFlying) == 0x000288, "Member 'ABP_BirdFollowPath_C::IsFlying' has a wrong offset!");
static_assert(offsetof(ABP_BirdFollowPath_C, FlyingAnimationAlpha) == 0x00028C, "Member 'ABP_BirdFollowPath_C::FlyingAnimationAlpha' has a wrong offset!");
static_assert(offsetof(ABP_BirdFollowPath_C, MaxFlyingSpeed) == 0x000290, "Member 'ABP_BirdFollowPath_C::MaxFlyingSpeed' has a wrong offset!");
static_assert(offsetof(ABP_BirdFollowPath_C, StartFlyingSpeed) == 0x000294, "Member 'ABP_BirdFollowPath_C::StartFlyingSpeed' has a wrong offset!");
static_assert(offsetof(ABP_BirdFollowPath_C, AccelerationDuration) == 0x000298, "Member 'ABP_BirdFollowPath_C::AccelerationDuration' has a wrong offset!");
static_assert(offsetof(ABP_BirdFollowPath_C, FlyingAnimationBlendDuration) == 0x00029C, "Member 'ABP_BirdFollowPath_C::FlyingAnimationBlendDuration' has a wrong offset!");
static_assert(offsetof(ABP_BirdFollowPath_C, DistanceFlownAlongSpline) == 0x0002A0, "Member 'ABP_BirdFollowPath_C::DistanceFlownAlongSpline' has a wrong offset!");
static_assert(offsetof(ABP_BirdFollowPath_C, FlyingTime) == 0x0002A4, "Member 'ABP_BirdFollowPath_C::FlyingTime' has a wrong offset!");
static_assert(offsetof(ABP_BirdFollowPath_C, PreviewLocation) == 0x0002A8, "Member 'ABP_BirdFollowPath_C::PreviewLocation' has a wrong offset!");

}

