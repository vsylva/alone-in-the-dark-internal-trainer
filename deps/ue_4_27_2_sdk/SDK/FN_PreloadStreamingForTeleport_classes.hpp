#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FN_PreloadStreamingForTeleport

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "Flow_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass FN_PreloadStreamingForTeleport.FN_PreloadStreamingForTeleport_C
// 0x0040 (0x0210 - 0x01D0)
class UFN_PreloadStreamingForTeleport_C final : public UFlowNode
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FGameplayTag                           TeleportTargetIdentityTag;                         // 0x01D8(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	EStreamingVolumeUsage                         Streaming_Method;                                  // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E1[0x7];                                      // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UWorld>>          Levels_To_Not_Stream;                              // 0x01E8(0x0010)(Edit, BlueprintVisible)
	bool                                          PreloadLevels;                                     // 0x01F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PreloadLODs;                                       // 0x01F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FA[0x6];                                      // 0x01FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TickTimer;                                         // 0x0200(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Time_Limit_Handle;                                 // 0x0208(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AddStreamingLoaderComponents(bool* FoundMatchingTag);
	bool ShouldReenableStreaming();
	void GetLevelsNotToStream(TArray<TSoftObjectPtr<class UWorld>>* Value);
	void K2_ExecuteInput(const class FName& PinName);
	void OnLoad();
	void AddStreamingLoaderComponent();
	void CancelPreloadEventTimer();
	void ExecuteUbergraph_FN_PreloadStreamingForTeleport(int32 EntryPoint);

	class FString K2_GetNodeDescription() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FN_PreloadStreamingForTeleport_C">();
	}
	static class UFN_PreloadStreamingForTeleport_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFN_PreloadStreamingForTeleport_C>();
	}
};
static_assert(alignof(UFN_PreloadStreamingForTeleport_C) == 0x000008, "Wrong alignment on UFN_PreloadStreamingForTeleport_C");
static_assert(sizeof(UFN_PreloadStreamingForTeleport_C) == 0x000210, "Wrong size on UFN_PreloadStreamingForTeleport_C");
static_assert(offsetof(UFN_PreloadStreamingForTeleport_C, UberGraphFrame) == 0x0001D0, "Member 'UFN_PreloadStreamingForTeleport_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UFN_PreloadStreamingForTeleport_C, TeleportTargetIdentityTag) == 0x0001D8, "Member 'UFN_PreloadStreamingForTeleport_C::TeleportTargetIdentityTag' has a wrong offset!");
static_assert(offsetof(UFN_PreloadStreamingForTeleport_C, Streaming_Method) == 0x0001E0, "Member 'UFN_PreloadStreamingForTeleport_C::Streaming_Method' has a wrong offset!");
static_assert(offsetof(UFN_PreloadStreamingForTeleport_C, Levels_To_Not_Stream) == 0x0001E8, "Member 'UFN_PreloadStreamingForTeleport_C::Levels_To_Not_Stream' has a wrong offset!");
static_assert(offsetof(UFN_PreloadStreamingForTeleport_C, PreloadLevels) == 0x0001F8, "Member 'UFN_PreloadStreamingForTeleport_C::PreloadLevels' has a wrong offset!");
static_assert(offsetof(UFN_PreloadStreamingForTeleport_C, PreloadLODs) == 0x0001F9, "Member 'UFN_PreloadStreamingForTeleport_C::PreloadLODs' has a wrong offset!");
static_assert(offsetof(UFN_PreloadStreamingForTeleport_C, TickTimer) == 0x000200, "Member 'UFN_PreloadStreamingForTeleport_C::TickTimer' has a wrong offset!");
static_assert(offsetof(UFN_PreloadStreamingForTeleport_C, Time_Limit_Handle) == 0x000208, "Member 'UFN_PreloadStreamingForTeleport_C::Time_Limit_Handle' has a wrong offset!");

}

