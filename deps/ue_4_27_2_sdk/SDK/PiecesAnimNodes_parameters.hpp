#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PiecesAnimNodes

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PiecesAnimNodes_structs.hpp"


namespace SDK::Params
{

// Function PiecesAnimNodes.AnimationTagComponent.AddTag
// 0x0010 (0x0010 - 0x0000)
struct AnimationTagComponent_AddTag final
{
public:
	const class UObject*                          Caller;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationTagComponent_AddTag) == 0x000008, "Wrong alignment on AnimationTagComponent_AddTag");
static_assert(sizeof(AnimationTagComponent_AddTag) == 0x000010, "Wrong size on AnimationTagComponent_AddTag");
static_assert(offsetof(AnimationTagComponent_AddTag, Caller) == 0x000000, "Member 'AnimationTagComponent_AddTag::Caller' has a wrong offset!");
static_assert(offsetof(AnimationTagComponent_AddTag, Tag) == 0x000008, "Member 'AnimationTagComponent_AddTag::Tag' has a wrong offset!");

// Function PiecesAnimNodes.AnimationTagComponent.RemoveTag
// 0x0010 (0x0010 - 0x0000)
struct AnimationTagComponent_RemoveTag final
{
public:
	const class UObject*                          Caller;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationTagComponent_RemoveTag) == 0x000008, "Wrong alignment on AnimationTagComponent_RemoveTag");
static_assert(sizeof(AnimationTagComponent_RemoveTag) == 0x000010, "Wrong size on AnimationTagComponent_RemoveTag");
static_assert(offsetof(AnimationTagComponent_RemoveTag, Caller) == 0x000000, "Member 'AnimationTagComponent_RemoveTag::Caller' has a wrong offset!");
static_assert(offsetof(AnimationTagComponent_RemoveTag, Tag) == 0x000008, "Member 'AnimationTagComponent_RemoveTag::Tag' has a wrong offset!");

// Function PiecesAnimNodes.AnimationTagComponent.GetNumReferencersForTag
// 0x000C (0x000C - 0x0000)
struct AnimationTagComponent_GetNumReferencersForTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationTagComponent_GetNumReferencersForTag) == 0x000004, "Wrong alignment on AnimationTagComponent_GetNumReferencersForTag");
static_assert(sizeof(AnimationTagComponent_GetNumReferencersForTag) == 0x00000C, "Wrong size on AnimationTagComponent_GetNumReferencersForTag");
static_assert(offsetof(AnimationTagComponent_GetNumReferencersForTag, Tag) == 0x000000, "Member 'AnimationTagComponent_GetNumReferencersForTag::Tag' has a wrong offset!");
static_assert(offsetof(AnimationTagComponent_GetNumReferencersForTag, ReturnValue) == 0x000008, "Member 'AnimationTagComponent_GetNumReferencersForTag::ReturnValue' has a wrong offset!");

// Function PiecesAnimNodes.AnimationTagComponent.HasTag
// 0x000C (0x000C - 0x0000)
struct AnimationTagComponent_HasTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimationTagComponent_HasTag) == 0x000004, "Wrong alignment on AnimationTagComponent_HasTag");
static_assert(sizeof(AnimationTagComponent_HasTag) == 0x00000C, "Wrong size on AnimationTagComponent_HasTag");
static_assert(offsetof(AnimationTagComponent_HasTag, Tag) == 0x000000, "Member 'AnimationTagComponent_HasTag::Tag' has a wrong offset!");
static_assert(offsetof(AnimationTagComponent_HasTag, ReturnValue) == 0x000008, "Member 'AnimationTagComponent_HasTag::ReturnValue' has a wrong offset!");

// Function PiecesAnimNodes.BPAsyncAction_PlayMontageBase.OnBlendOutAllowedNotifyStateChangedHandler
// 0x0010 (0x0010 - 0x0000)
struct BPAsyncAction_PlayMontageBase_OnBlendOutAllowedNotifyStateChangedHandler final
{
public:
	const class UAnimSequenceBase*                Sequence;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyBegin;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BPAsyncAction_PlayMontageBase_OnBlendOutAllowedNotifyStateChangedHandler) == 0x000008, "Wrong alignment on BPAsyncAction_PlayMontageBase_OnBlendOutAllowedNotifyStateChangedHandler");
static_assert(sizeof(BPAsyncAction_PlayMontageBase_OnBlendOutAllowedNotifyStateChangedHandler) == 0x000010, "Wrong size on BPAsyncAction_PlayMontageBase_OnBlendOutAllowedNotifyStateChangedHandler");
static_assert(offsetof(BPAsyncAction_PlayMontageBase_OnBlendOutAllowedNotifyStateChangedHandler, Sequence) == 0x000000, "Member 'BPAsyncAction_PlayMontageBase_OnBlendOutAllowedNotifyStateChangedHandler::Sequence' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PlayMontageBase_OnBlendOutAllowedNotifyStateChangedHandler, bNotifyBegin) == 0x000008, "Member 'BPAsyncAction_PlayMontageBase_OnBlendOutAllowedNotifyStateChangedHandler::bNotifyBegin' has a wrong offset!");

// Function PiecesAnimNodes.BPAsyncAction_PlayMontageBase.OnMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct BPAsyncAction_PlayMontageBase_OnMontageBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BPAsyncAction_PlayMontageBase_OnMontageBlendingOut) == 0x000008, "Wrong alignment on BPAsyncAction_PlayMontageBase_OnMontageBlendingOut");
static_assert(sizeof(BPAsyncAction_PlayMontageBase_OnMontageBlendingOut) == 0x000010, "Wrong size on BPAsyncAction_PlayMontageBase_OnMontageBlendingOut");
static_assert(offsetof(BPAsyncAction_PlayMontageBase_OnMontageBlendingOut, Montage) == 0x000000, "Member 'BPAsyncAction_PlayMontageBase_OnMontageBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PlayMontageBase_OnMontageBlendingOut, bInterrupted) == 0x000008, "Member 'BPAsyncAction_PlayMontageBase_OnMontageBlendingOut::bInterrupted' has a wrong offset!");

// Function PiecesAnimNodes.BPAsyncAction_PlayMontageBase.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct BPAsyncAction_PlayMontageBase_OnMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BPAsyncAction_PlayMontageBase_OnMontageEnded) == 0x000008, "Wrong alignment on BPAsyncAction_PlayMontageBase_OnMontageEnded");
static_assert(sizeof(BPAsyncAction_PlayMontageBase_OnMontageEnded) == 0x000010, "Wrong size on BPAsyncAction_PlayMontageBase_OnMontageEnded");
static_assert(offsetof(BPAsyncAction_PlayMontageBase_OnMontageEnded, Montage) == 0x000000, "Member 'BPAsyncAction_PlayMontageBase_OnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PlayMontageBase_OnMontageEnded, bInterrupted) == 0x000008, "Member 'BPAsyncAction_PlayMontageBase_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function PiecesAnimNodes.BPAsyncAction_PlayMontageBase.OnMontageNotifyBegin
// 0x0028 (0x0028 - 0x0000)
struct BPAsyncAction_PlayMontageBase_OnMontageNotifyBegin final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBranchingPointNotifyPayload           BranchingPointPayload;                             // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_PlayMontageBase_OnMontageNotifyBegin) == 0x000008, "Wrong alignment on BPAsyncAction_PlayMontageBase_OnMontageNotifyBegin");
static_assert(sizeof(BPAsyncAction_PlayMontageBase_OnMontageNotifyBegin) == 0x000028, "Wrong size on BPAsyncAction_PlayMontageBase_OnMontageNotifyBegin");
static_assert(offsetof(BPAsyncAction_PlayMontageBase_OnMontageNotifyBegin, NotifyName) == 0x000000, "Member 'BPAsyncAction_PlayMontageBase_OnMontageNotifyBegin::NotifyName' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PlayMontageBase_OnMontageNotifyBegin, BranchingPointPayload) == 0x000008, "Member 'BPAsyncAction_PlayMontageBase_OnMontageNotifyBegin::BranchingPointPayload' has a wrong offset!");

// Function PiecesAnimNodes.BPAsyncAction_PlayMontageBase.OnMontageNotifyEnd
// 0x0028 (0x0028 - 0x0000)
struct BPAsyncAction_PlayMontageBase_OnMontageNotifyEnd final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBranchingPointNotifyPayload           BranchingPointPayload;                             // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_PlayMontageBase_OnMontageNotifyEnd) == 0x000008, "Wrong alignment on BPAsyncAction_PlayMontageBase_OnMontageNotifyEnd");
static_assert(sizeof(BPAsyncAction_PlayMontageBase_OnMontageNotifyEnd) == 0x000028, "Wrong size on BPAsyncAction_PlayMontageBase_OnMontageNotifyEnd");
static_assert(offsetof(BPAsyncAction_PlayMontageBase_OnMontageNotifyEnd, NotifyName) == 0x000000, "Member 'BPAsyncAction_PlayMontageBase_OnMontageNotifyEnd::NotifyName' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PlayMontageBase_OnMontageNotifyEnd, BranchingPointPayload) == 0x000008, "Member 'BPAsyncAction_PlayMontageBase_OnMontageNotifyEnd::BranchingPointPayload' has a wrong offset!");

// Function PiecesAnimNodes.PiecesAnimInstance.BlueprintUpdateAnimationStaggered
// 0x0004 (0x0004 - 0x0000)
struct PiecesAnimInstance_BlueprintUpdateAnimationStaggered final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesAnimInstance_BlueprintUpdateAnimationStaggered) == 0x000004, "Wrong alignment on PiecesAnimInstance_BlueprintUpdateAnimationStaggered");
static_assert(sizeof(PiecesAnimInstance_BlueprintUpdateAnimationStaggered) == 0x000004, "Wrong size on PiecesAnimInstance_BlueprintUpdateAnimationStaggered");
static_assert(offsetof(PiecesAnimInstance_BlueprintUpdateAnimationStaggered, DeltaTime) == 0x000000, "Member 'PiecesAnimInstance_BlueprintUpdateAnimationStaggered::DeltaTime' has a wrong offset!");

// Function PiecesAnimNodes.PiecesAnimInstance.GetEarlyBlendOutPossible
// 0x000C (0x000C - 0x0000)
struct PiecesAnimInstance_GetEarlyBlendOutPossible final
{
public:
	int32                                         MachineIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransitionIndex;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PiecesAnimInstance_GetEarlyBlendOutPossible) == 0x000004, "Wrong alignment on PiecesAnimInstance_GetEarlyBlendOutPossible");
static_assert(sizeof(PiecesAnimInstance_GetEarlyBlendOutPossible) == 0x00000C, "Wrong size on PiecesAnimInstance_GetEarlyBlendOutPossible");
static_assert(offsetof(PiecesAnimInstance_GetEarlyBlendOutPossible, MachineIndex) == 0x000000, "Member 'PiecesAnimInstance_GetEarlyBlendOutPossible::MachineIndex' has a wrong offset!");
static_assert(offsetof(PiecesAnimInstance_GetEarlyBlendOutPossible, TransitionIndex) == 0x000004, "Member 'PiecesAnimInstance_GetEarlyBlendOutPossible::TransitionIndex' has a wrong offset!");
static_assert(offsetof(PiecesAnimInstance_GetEarlyBlendOutPossible, ReturnValue) == 0x000008, "Member 'PiecesAnimInstance_GetEarlyBlendOutPossible::ReturnValue' has a wrong offset!");

// Function PiecesAnimNodes.PiecesAnimInstance.GetRecordedComponentSpaceTransform
// 0x0040 (0x0040 - 0x0000)
struct PiecesAnimInstance_GetRecordedComponentSpaceTransform final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SnapshotName;                                      // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesAnimInstance_GetRecordedComponentSpaceTransform) == 0x000010, "Wrong alignment on PiecesAnimInstance_GetRecordedComponentSpaceTransform");
static_assert(sizeof(PiecesAnimInstance_GetRecordedComponentSpaceTransform) == 0x000040, "Wrong size on PiecesAnimInstance_GetRecordedComponentSpaceTransform");
static_assert(offsetof(PiecesAnimInstance_GetRecordedComponentSpaceTransform, BoneName) == 0x000000, "Member 'PiecesAnimInstance_GetRecordedComponentSpaceTransform::BoneName' has a wrong offset!");
static_assert(offsetof(PiecesAnimInstance_GetRecordedComponentSpaceTransform, SnapshotName) == 0x000008, "Member 'PiecesAnimInstance_GetRecordedComponentSpaceTransform::SnapshotName' has a wrong offset!");
static_assert(offsetof(PiecesAnimInstance_GetRecordedComponentSpaceTransform, ReturnValue) == 0x000010, "Member 'PiecesAnimInstance_GetRecordedComponentSpaceTransform::ReturnValue' has a wrong offset!");

// Function PiecesAnimNodes.PiecesAnimInstance.IsSlotPlayingMontage
// 0x000C (0x000C - 0x0000)
struct PiecesAnimInstance_IsSlotPlayingMontage final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PiecesAnimInstance_IsSlotPlayingMontage) == 0x000004, "Wrong alignment on PiecesAnimInstance_IsSlotPlayingMontage");
static_assert(sizeof(PiecesAnimInstance_IsSlotPlayingMontage) == 0x00000C, "Wrong size on PiecesAnimInstance_IsSlotPlayingMontage");
static_assert(offsetof(PiecesAnimInstance_IsSlotPlayingMontage, SlotName) == 0x000000, "Member 'PiecesAnimInstance_IsSlotPlayingMontage::SlotName' has a wrong offset!");
static_assert(offsetof(PiecesAnimInstance_IsSlotPlayingMontage, ReturnValue) == 0x000008, "Member 'PiecesAnimInstance_IsSlotPlayingMontage::ReturnValue' has a wrong offset!");

// Function PiecesAnimNodes.AbilityTask_PiecesPlayMontageAndWait.PiecesPlayMontageAndWait
// 0x0038 (0x0038 - 0x0000)
struct AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           InMontageToPlay;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRate;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InStartSection;                                    // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInStopWhenAbilityEnds;                            // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InAnimRootMotionTranslationScale;                  // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InStartTimeSeconds;                                // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityTask_PiecesPlayMontageAndWait*  ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait) == 0x000008, "Wrong alignment on AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait");
static_assert(sizeof(AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait) == 0x000038, "Wrong size on AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait");
static_assert(offsetof(AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait, OwningAbility) == 0x000000, "Member 'AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait::OwningAbility' has a wrong offset!");
static_assert(offsetof(AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait, TaskInstanceName) == 0x000008, "Member 'AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait, InMontageToPlay) == 0x000010, "Member 'AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait::InMontageToPlay' has a wrong offset!");
static_assert(offsetof(AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait, InRate) == 0x000018, "Member 'AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait::InRate' has a wrong offset!");
static_assert(offsetof(AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait, InStartSection) == 0x00001C, "Member 'AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait::InStartSection' has a wrong offset!");
static_assert(offsetof(AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait, bInStopWhenAbilityEnds) == 0x000024, "Member 'AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait::bInStopWhenAbilityEnds' has a wrong offset!");
static_assert(offsetof(AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait, InAnimRootMotionTranslationScale) == 0x000028, "Member 'AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait::InAnimRootMotionTranslationScale' has a wrong offset!");
static_assert(offsetof(AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait, InStartTimeSeconds) == 0x00002C, "Member 'AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait::InStartTimeSeconds' has a wrong offset!");
static_assert(offsetof(AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait, ReturnValue) == 0x000030, "Member 'AbilityTask_PiecesPlayMontageAndWait_PiecesPlayMontageAndWait::ReturnValue' has a wrong offset!");

// Function PiecesAnimNodes.AbilityTask_PiecesPlayMontageAndWait.OnBlendOutAllowedNotifyStateChangedHandler
// 0x0010 (0x0010 - 0x0000)
struct AbilityTask_PiecesPlayMontageAndWait_OnBlendOutAllowedNotifyStateChangedHandler final
{
public:
	const class UAnimSequenceBase*                Sequence;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyBegin;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AbilityTask_PiecesPlayMontageAndWait_OnBlendOutAllowedNotifyStateChangedHandler) == 0x000008, "Wrong alignment on AbilityTask_PiecesPlayMontageAndWait_OnBlendOutAllowedNotifyStateChangedHandler");
static_assert(sizeof(AbilityTask_PiecesPlayMontageAndWait_OnBlendOutAllowedNotifyStateChangedHandler) == 0x000010, "Wrong size on AbilityTask_PiecesPlayMontageAndWait_OnBlendOutAllowedNotifyStateChangedHandler");
static_assert(offsetof(AbilityTask_PiecesPlayMontageAndWait_OnBlendOutAllowedNotifyStateChangedHandler, Sequence) == 0x000000, "Member 'AbilityTask_PiecesPlayMontageAndWait_OnBlendOutAllowedNotifyStateChangedHandler::Sequence' has a wrong offset!");
static_assert(offsetof(AbilityTask_PiecesPlayMontageAndWait_OnBlendOutAllowedNotifyStateChangedHandler, bNotifyBegin) == 0x000008, "Member 'AbilityTask_PiecesPlayMontageAndWait_OnBlendOutAllowedNotifyStateChangedHandler::bNotifyBegin' has a wrong offset!");

// Function PiecesAnimNodes.AnimNotifyState_PlaySound.OnMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct AnimNotifyState_PlaySound_OnMontageBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimNotifyState_PlaySound_OnMontageBlendingOut) == 0x000008, "Wrong alignment on AnimNotifyState_PlaySound_OnMontageBlendingOut");
static_assert(sizeof(AnimNotifyState_PlaySound_OnMontageBlendingOut) == 0x000010, "Wrong size on AnimNotifyState_PlaySound_OnMontageBlendingOut");
static_assert(offsetof(AnimNotifyState_PlaySound_OnMontageBlendingOut, Montage) == 0x000000, "Member 'AnimNotifyState_PlaySound_OnMontageBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(AnimNotifyState_PlaySound_OnMontageBlendingOut, bInterrupted) == 0x000008, "Member 'AnimNotifyState_PlaySound_OnMontageBlendingOut::bInterrupted' has a wrong offset!");

// Function PiecesAnimNodes.BarkCollectionFunctionLibrary.GetBarkMontageFromCollection
// 0x0080 (0x0080 - 0x0000)
struct BarkCollectionFunctionLibrary_GetBarkMontageFromCollection final
{
public:
	const class ACharacter*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBarkCollection                        Collection;                                        // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            ReturnValue;                                       // 0x0058(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BarkCollectionFunctionLibrary_GetBarkMontageFromCollection) == 0x000008, "Wrong alignment on BarkCollectionFunctionLibrary_GetBarkMontageFromCollection");
static_assert(sizeof(BarkCollectionFunctionLibrary_GetBarkMontageFromCollection) == 0x000080, "Wrong size on BarkCollectionFunctionLibrary_GetBarkMontageFromCollection");
static_assert(offsetof(BarkCollectionFunctionLibrary_GetBarkMontageFromCollection, Character) == 0x000000, "Member 'BarkCollectionFunctionLibrary_GetBarkMontageFromCollection::Character' has a wrong offset!");
static_assert(offsetof(BarkCollectionFunctionLibrary_GetBarkMontageFromCollection, Collection) == 0x000008, "Member 'BarkCollectionFunctionLibrary_GetBarkMontageFromCollection::Collection' has a wrong offset!");
static_assert(offsetof(BarkCollectionFunctionLibrary_GetBarkMontageFromCollection, ReturnValue) == 0x000058, "Member 'BarkCollectionFunctionLibrary_GetBarkMontageFromCollection::ReturnValue' has a wrong offset!");

// Function PiecesAnimNodes.BarkCollectionFunctionLibrary.GetBarkMontageFromCollectionForMeshComponent
// 0x0080 (0x0080 - 0x0000)
struct BarkCollectionFunctionLibrary_GetBarkMontageFromCollectionForMeshComponent final
{
public:
	const class USkeletalMeshComponent*           MeshComponent;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBarkCollection                        Collection;                                        // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            ReturnValue;                                       // 0x0058(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BarkCollectionFunctionLibrary_GetBarkMontageFromCollectionForMeshComponent) == 0x000008, "Wrong alignment on BarkCollectionFunctionLibrary_GetBarkMontageFromCollectionForMeshComponent");
static_assert(sizeof(BarkCollectionFunctionLibrary_GetBarkMontageFromCollectionForMeshComponent) == 0x000080, "Wrong size on BarkCollectionFunctionLibrary_GetBarkMontageFromCollectionForMeshComponent");
static_assert(offsetof(BarkCollectionFunctionLibrary_GetBarkMontageFromCollectionForMeshComponent, MeshComponent) == 0x000000, "Member 'BarkCollectionFunctionLibrary_GetBarkMontageFromCollectionForMeshComponent::MeshComponent' has a wrong offset!");
static_assert(offsetof(BarkCollectionFunctionLibrary_GetBarkMontageFromCollectionForMeshComponent, Collection) == 0x000008, "Member 'BarkCollectionFunctionLibrary_GetBarkMontageFromCollectionForMeshComponent::Collection' has a wrong offset!");
static_assert(offsetof(BarkCollectionFunctionLibrary_GetBarkMontageFromCollectionForMeshComponent, ReturnValue) == 0x000058, "Member 'BarkCollectionFunctionLibrary_GetBarkMontageFromCollectionForMeshComponent::ReturnValue' has a wrong offset!");

// Function PiecesAnimNodes.BPAsyncAction_PiecesPlayMontage.MontagePlay
// 0x0028 (0x0028 - 0x0000)
struct BPAsyncAction_PiecesPlayMontage_MontagePlay final
{
public:
	class USkeletalMeshComponent*                 InSkeletalMesh;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MontageToPlay;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingPosition;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartingSection;                                   // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBPAsyncAction_PiecesPlayMontage*       ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_PiecesPlayMontage_MontagePlay) == 0x000008, "Wrong alignment on BPAsyncAction_PiecesPlayMontage_MontagePlay");
static_assert(sizeof(BPAsyncAction_PiecesPlayMontage_MontagePlay) == 0x000028, "Wrong size on BPAsyncAction_PiecesPlayMontage_MontagePlay");
static_assert(offsetof(BPAsyncAction_PiecesPlayMontage_MontagePlay, InSkeletalMesh) == 0x000000, "Member 'BPAsyncAction_PiecesPlayMontage_MontagePlay::InSkeletalMesh' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PiecesPlayMontage_MontagePlay, MontageToPlay) == 0x000008, "Member 'BPAsyncAction_PiecesPlayMontage_MontagePlay::MontageToPlay' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PiecesPlayMontage_MontagePlay, PlayRate) == 0x000010, "Member 'BPAsyncAction_PiecesPlayMontage_MontagePlay::PlayRate' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PiecesPlayMontage_MontagePlay, StartingPosition) == 0x000014, "Member 'BPAsyncAction_PiecesPlayMontage_MontagePlay::StartingPosition' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PiecesPlayMontage_MontagePlay, StartingSection) == 0x000018, "Member 'BPAsyncAction_PiecesPlayMontage_MontagePlay::StartingSection' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PiecesPlayMontage_MontagePlay, ReturnValue) == 0x000020, "Member 'BPAsyncAction_PiecesPlayMontage_MontagePlay::ReturnValue' has a wrong offset!");

// Function PiecesAnimNodes.BPAsyncAction_PiecesPlayBarkCollection.PlayBarkCollection
// 0x0068 (0x0068 - 0x0000)
struct BPAsyncAction_PiecesPlayBarkCollection_PlayBarkCollection final
{
public:
	const class ACharacter*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBarkCollection                        BarkCollection;                                    // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EBarkPriority                                 BarkPriority;                                      // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBPAsyncAction_PiecesPlayMontage*       ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPAsyncAction_PiecesPlayBarkCollection_PlayBarkCollection) == 0x000008, "Wrong alignment on BPAsyncAction_PiecesPlayBarkCollection_PlayBarkCollection");
static_assert(sizeof(BPAsyncAction_PiecesPlayBarkCollection_PlayBarkCollection) == 0x000068, "Wrong size on BPAsyncAction_PiecesPlayBarkCollection_PlayBarkCollection");
static_assert(offsetof(BPAsyncAction_PiecesPlayBarkCollection_PlayBarkCollection, Character) == 0x000000, "Member 'BPAsyncAction_PiecesPlayBarkCollection_PlayBarkCollection::Character' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PiecesPlayBarkCollection_PlayBarkCollection, BarkCollection) == 0x000008, "Member 'BPAsyncAction_PiecesPlayBarkCollection_PlayBarkCollection::BarkCollection' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PiecesPlayBarkCollection_PlayBarkCollection, BarkPriority) == 0x000058, "Member 'BPAsyncAction_PiecesPlayBarkCollection_PlayBarkCollection::BarkPriority' has a wrong offset!");
static_assert(offsetof(BPAsyncAction_PiecesPlayBarkCollection_PlayBarkCollection, ReturnValue) == 0x000060, "Member 'BPAsyncAction_PiecesPlayBarkCollection_PlayBarkCollection::ReturnValue' has a wrong offset!");

// Function PiecesAnimNodes.EngineSubsystem_Barks.RegisterBarkPlayed
// 0x0018 (0x0018 - 0x0000)
struct EngineSubsystem_Barks_RegisterBarkPlayed final
{
public:
	class FText                                   BarkIdentifier;                                    // 0x0000(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EngineSubsystem_Barks_RegisterBarkPlayed) == 0x000008, "Wrong alignment on EngineSubsystem_Barks_RegisterBarkPlayed");
static_assert(sizeof(EngineSubsystem_Barks_RegisterBarkPlayed) == 0x000018, "Wrong size on EngineSubsystem_Barks_RegisterBarkPlayed");
static_assert(offsetof(EngineSubsystem_Barks_RegisterBarkPlayed, BarkIdentifier) == 0x000000, "Member 'EngineSubsystem_Barks_RegisterBarkPlayed::BarkIdentifier' has a wrong offset!");

// Function PiecesAnimNodes.EngineSubsystem_Barks.GetRandomBarkWeighted
// 0x0028 (0x0028 - 0x0000)
struct EngineSubsystem_Barks_GetRandomBarkWeighted final
{
public:
	TArray<class FText>                           Candidates;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EngineSubsystem_Barks_GetRandomBarkWeighted) == 0x000008, "Wrong alignment on EngineSubsystem_Barks_GetRandomBarkWeighted");
static_assert(sizeof(EngineSubsystem_Barks_GetRandomBarkWeighted) == 0x000028, "Wrong size on EngineSubsystem_Barks_GetRandomBarkWeighted");
static_assert(offsetof(EngineSubsystem_Barks_GetRandomBarkWeighted, Candidates) == 0x000000, "Member 'EngineSubsystem_Barks_GetRandomBarkWeighted::Candidates' has a wrong offset!");
static_assert(offsetof(EngineSubsystem_Barks_GetRandomBarkWeighted, ReturnValue) == 0x000010, "Member 'EngineSubsystem_Barks_GetRandomBarkWeighted::ReturnValue' has a wrong offset!");

// Function PiecesAnimNodes.MotionWarpingComponent.RemoveMotionWarpingTarget
// 0x0008 (0x0008 - 0x0000)
struct MotionWarpingComponent_RemoveMotionWarpingTarget final
{
public:
	struct FGameplayTag                           MotionIdentifier;                                  // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionWarpingComponent_RemoveMotionWarpingTarget) == 0x000004, "Wrong alignment on MotionWarpingComponent_RemoveMotionWarpingTarget");
static_assert(sizeof(MotionWarpingComponent_RemoveMotionWarpingTarget) == 0x000008, "Wrong size on MotionWarpingComponent_RemoveMotionWarpingTarget");
static_assert(offsetof(MotionWarpingComponent_RemoveMotionWarpingTarget, MotionIdentifier) == 0x000000, "Member 'MotionWarpingComponent_RemoveMotionWarpingTarget::MotionIdentifier' has a wrong offset!");

// Function PiecesAnimNodes.MotionWarpingComponent.SetMotionWarpingTarget
// 0x0050 (0x0050 - 0x0000)
struct MotionWarpingComponent_SetMotionWarpingTarget final
{
public:
	struct FGameplayTag                           MotionIdentifier;                                  // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TransformTarget;                                   // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DataLifeTime;                                      // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionWarpingComponent_SetMotionWarpingTarget) == 0x000010, "Wrong alignment on MotionWarpingComponent_SetMotionWarpingTarget");
static_assert(sizeof(MotionWarpingComponent_SetMotionWarpingTarget) == 0x000050, "Wrong size on MotionWarpingComponent_SetMotionWarpingTarget");
static_assert(offsetof(MotionWarpingComponent_SetMotionWarpingTarget, MotionIdentifier) == 0x000000, "Member 'MotionWarpingComponent_SetMotionWarpingTarget::MotionIdentifier' has a wrong offset!");
static_assert(offsetof(MotionWarpingComponent_SetMotionWarpingTarget, TransformTarget) == 0x000010, "Member 'MotionWarpingComponent_SetMotionWarpingTarget::TransformTarget' has a wrong offset!");
static_assert(offsetof(MotionWarpingComponent_SetMotionWarpingTarget, DataLifeTime) == 0x000040, "Member 'MotionWarpingComponent_SetMotionWarpingTarget::DataLifeTime' has a wrong offset!");

// Function PiecesAnimNodes.MotionWarpingInterface.RemoveMotionWarpingTarget
// 0x0008 (0x0008 - 0x0000)
struct MotionWarpingInterface_RemoveMotionWarpingTarget final
{
public:
	struct FGameplayTag                           MotionIdentifier;                                  // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionWarpingInterface_RemoveMotionWarpingTarget) == 0x000004, "Wrong alignment on MotionWarpingInterface_RemoveMotionWarpingTarget");
static_assert(sizeof(MotionWarpingInterface_RemoveMotionWarpingTarget) == 0x000008, "Wrong size on MotionWarpingInterface_RemoveMotionWarpingTarget");
static_assert(offsetof(MotionWarpingInterface_RemoveMotionWarpingTarget, MotionIdentifier) == 0x000000, "Member 'MotionWarpingInterface_RemoveMotionWarpingTarget::MotionIdentifier' has a wrong offset!");

// Function PiecesAnimNodes.MotionWarpingInterface.SetMotionWarpingTarget
// 0x0050 (0x0050 - 0x0000)
struct MotionWarpingInterface_SetMotionWarpingTarget final
{
public:
	struct FGameplayTag                           MotionIdentifier;                                  // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TransformTarget;                                   // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DataLifeTime;                                      // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MotionWarpingInterface_SetMotionWarpingTarget) == 0x000010, "Wrong alignment on MotionWarpingInterface_SetMotionWarpingTarget");
static_assert(sizeof(MotionWarpingInterface_SetMotionWarpingTarget) == 0x000050, "Wrong size on MotionWarpingInterface_SetMotionWarpingTarget");
static_assert(offsetof(MotionWarpingInterface_SetMotionWarpingTarget, MotionIdentifier) == 0x000000, "Member 'MotionWarpingInterface_SetMotionWarpingTarget::MotionIdentifier' has a wrong offset!");
static_assert(offsetof(MotionWarpingInterface_SetMotionWarpingTarget, TransformTarget) == 0x000010, "Member 'MotionWarpingInterface_SetMotionWarpingTarget::TransformTarget' has a wrong offset!");
static_assert(offsetof(MotionWarpingInterface_SetMotionWarpingTarget, DataLifeTime) == 0x000040, "Member 'MotionWarpingInterface_SetMotionWarpingTarget::DataLifeTime' has a wrong offset!");

// Function PiecesAnimNodes.PiecesAnimationBarkFunctionLibrary.GetBarkMontageBPNodeHelperFunction
// 0x0028 (0x0028 - 0x0000)
struct PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunction final
{
public:
	TArray<TSoftObjectPtr<class UAnimMontage>>    SelectedMontages;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	const class ACharacter*                       Character;                                         // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayMontage;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBarkPriority                                 Priority;                                          // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunction) == 0x000008, "Wrong alignment on PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunction");
static_assert(sizeof(PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunction) == 0x000028, "Wrong size on PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunction");
static_assert(offsetof(PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunction, SelectedMontages) == 0x000000, "Member 'PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunction::SelectedMontages' has a wrong offset!");
static_assert(offsetof(PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunction, Character) == 0x000010, "Member 'PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunction::Character' has a wrong offset!");
static_assert(offsetof(PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunction, bPlayMontage) == 0x000018, "Member 'PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunction::bPlayMontage' has a wrong offset!");
static_assert(offsetof(PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunction, Priority) == 0x000019, "Member 'PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunction::Priority' has a wrong offset!");
static_assert(offsetof(PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunction, ReturnValue) == 0x000020, "Member 'PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunction::ReturnValue' has a wrong offset!");

// Function PiecesAnimNodes.PiecesAnimationBarkFunctionLibrary.GetBarkMontageBPNodeHelperFunctionLoadAsync
// 0x0048 (0x0048 - 0x0000)
struct PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunctionLoadAsync final
{
public:
	TArray<TSoftObjectPtr<class UAnimMontage>>    SelectedMontages;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	const class ACharacter*                       Character;                                         // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayMontage;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBarkPriority                                 Priority;                                          // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            ReturnValue;                                       // 0x0020(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunctionLoadAsync) == 0x000008, "Wrong alignment on PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunctionLoadAsync");
static_assert(sizeof(PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunctionLoadAsync) == 0x000048, "Wrong size on PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunctionLoadAsync");
static_assert(offsetof(PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunctionLoadAsync, SelectedMontages) == 0x000000, "Member 'PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunctionLoadAsync::SelectedMontages' has a wrong offset!");
static_assert(offsetof(PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunctionLoadAsync, Character) == 0x000010, "Member 'PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunctionLoadAsync::Character' has a wrong offset!");
static_assert(offsetof(PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunctionLoadAsync, bPlayMontage) == 0x000018, "Member 'PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunctionLoadAsync::bPlayMontage' has a wrong offset!");
static_assert(offsetof(PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunctionLoadAsync, Priority) == 0x000019, "Member 'PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunctionLoadAsync::Priority' has a wrong offset!");
static_assert(offsetof(PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunctionLoadAsync, ReturnValue) == 0x000020, "Member 'PiecesAnimationBarkFunctionLibrary_GetBarkMontageBPNodeHelperFunctionLoadAsync::ReturnValue' has a wrong offset!");

// Function PiecesAnimNodes.PiecesAnimationBarkInterface.GetCurrentPlayingBark
// 0x0028 (0x0028 - 0x0000)
struct PiecesAnimationBarkInterface_GetCurrentPlayingBark final
{
public:
	TSoftObjectPtr<class UAnimMontage>            ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesAnimationBarkInterface_GetCurrentPlayingBark) == 0x000008, "Wrong alignment on PiecesAnimationBarkInterface_GetCurrentPlayingBark");
static_assert(sizeof(PiecesAnimationBarkInterface_GetCurrentPlayingBark) == 0x000028, "Wrong size on PiecesAnimationBarkInterface_GetCurrentPlayingBark");
static_assert(offsetof(PiecesAnimationBarkInterface_GetCurrentPlayingBark, ReturnValue) == 0x000000, "Member 'PiecesAnimationBarkInterface_GetCurrentPlayingBark::ReturnValue' has a wrong offset!");

// Function PiecesAnimNodes.PiecesAnimationBarkInterface.OnBarkFinished
// 0x0008 (0x0008 - 0x0000)
struct PiecesAnimationBarkInterface_OnBarkFinished final
{
public:
	class UAnimMontage*                           BarkMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesAnimationBarkInterface_OnBarkFinished) == 0x000008, "Wrong alignment on PiecesAnimationBarkInterface_OnBarkFinished");
static_assert(sizeof(PiecesAnimationBarkInterface_OnBarkFinished) == 0x000008, "Wrong size on PiecesAnimationBarkInterface_OnBarkFinished");
static_assert(offsetof(PiecesAnimationBarkInterface_OnBarkFinished, BarkMontage) == 0x000000, "Member 'PiecesAnimationBarkInterface_OnBarkFinished::BarkMontage' has a wrong offset!");

// Function PiecesAnimNodes.PiecesAnimationBarkInterface.OverrideFaceBlendWeightForBarks
// 0x0004 (0x0004 - 0x0000)
struct PiecesAnimationBarkInterface_OverrideFaceBlendWeightForBarks final
{
public:
	float                                         OverrideWeight;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesAnimationBarkInterface_OverrideFaceBlendWeightForBarks) == 0x000004, "Wrong alignment on PiecesAnimationBarkInterface_OverrideFaceBlendWeightForBarks");
static_assert(sizeof(PiecesAnimationBarkInterface_OverrideFaceBlendWeightForBarks) == 0x000004, "Wrong size on PiecesAnimationBarkInterface_OverrideFaceBlendWeightForBarks");
static_assert(offsetof(PiecesAnimationBarkInterface_OverrideFaceBlendWeightForBarks, OverrideWeight) == 0x000000, "Member 'PiecesAnimationBarkInterface_OverrideFaceBlendWeightForBarks::OverrideWeight' has a wrong offset!");

// Function PiecesAnimNodes.PiecesAnimationBarkInterface.StopBark
// 0x0028 (0x0028 - 0x0000)
struct PiecesAnimationBarkInterface_StopBark final
{
public:
	TSoftObjectPtr<class UAnimMontage>            BarkMontage;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesAnimationBarkInterface_StopBark) == 0x000008, "Wrong alignment on PiecesAnimationBarkInterface_StopBark");
static_assert(sizeof(PiecesAnimationBarkInterface_StopBark) == 0x000028, "Wrong size on PiecesAnimationBarkInterface_StopBark");
static_assert(offsetof(PiecesAnimationBarkInterface_StopBark, BarkMontage) == 0x000000, "Member 'PiecesAnimationBarkInterface_StopBark::BarkMontage' has a wrong offset!");

// Function PiecesAnimNodes.PiecesAnimationBlueprintFunctionLibrary.PauseDynamics
// 0x0008 (0x0008 - 0x0000)
struct PiecesAnimationBlueprintFunctionLibrary_PauseDynamics final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesAnimationBlueprintFunctionLibrary_PauseDynamics) == 0x000008, "Wrong alignment on PiecesAnimationBlueprintFunctionLibrary_PauseDynamics");
static_assert(sizeof(PiecesAnimationBlueprintFunctionLibrary_PauseDynamics) == 0x000008, "Wrong size on PiecesAnimationBlueprintFunctionLibrary_PauseDynamics");
static_assert(offsetof(PiecesAnimationBlueprintFunctionLibrary_PauseDynamics, AnimInstance) == 0x000000, "Member 'PiecesAnimationBlueprintFunctionLibrary_PauseDynamics::AnimInstance' has a wrong offset!");

// Function PiecesAnimNodes.PiecesAnimationBlueprintFunctionLibrary.ResumeDynamics
// 0x0008 (0x0008 - 0x0000)
struct PiecesAnimationBlueprintFunctionLibrary_ResumeDynamics final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PiecesAnimationBlueprintFunctionLibrary_ResumeDynamics) == 0x000008, "Wrong alignment on PiecesAnimationBlueprintFunctionLibrary_ResumeDynamics");
static_assert(sizeof(PiecesAnimationBlueprintFunctionLibrary_ResumeDynamics) == 0x000008, "Wrong size on PiecesAnimationBlueprintFunctionLibrary_ResumeDynamics");
static_assert(offsetof(PiecesAnimationBlueprintFunctionLibrary_ResumeDynamics, AnimInstance) == 0x000000, "Member 'PiecesAnimationBlueprintFunctionLibrary_ResumeDynamics::AnimInstance' has a wrong offset!");

}

