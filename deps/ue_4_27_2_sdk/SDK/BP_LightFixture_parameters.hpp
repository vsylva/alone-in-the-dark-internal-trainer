#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightFixture

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_LightFixture.BP_LightFixture_C.ExecuteUbergraph_BP_LightFixture
// 0x0038 (0x0038 - 0x0000)
struct BP_LightFixture_C_ExecuteUbergraph_BP_LightFixture final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        K2Node_CustomEvent_LoadedAssets;                   // 0x0008(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(TArray<class UObject*>& LoadedAssets)> K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	TArray<TSoftObjectPtr<class UObject>>         K2Node_MakeArray_Array;                            // 0x0028(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_LightFixture_C_ExecuteUbergraph_BP_LightFixture) == 0x000008, "Wrong alignment on BP_LightFixture_C_ExecuteUbergraph_BP_LightFixture");
static_assert(sizeof(BP_LightFixture_C_ExecuteUbergraph_BP_LightFixture) == 0x000038, "Wrong size on BP_LightFixture_C_ExecuteUbergraph_BP_LightFixture");
static_assert(offsetof(BP_LightFixture_C_ExecuteUbergraph_BP_LightFixture, EntryPoint) == 0x000000, "Member 'BP_LightFixture_C_ExecuteUbergraph_BP_LightFixture::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_ExecuteUbergraph_BP_LightFixture, K2Node_CustomEvent_LoadedAssets) == 0x000008, "Member 'BP_LightFixture_C_ExecuteUbergraph_BP_LightFixture::K2Node_CustomEvent_LoadedAssets' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_ExecuteUbergraph_BP_LightFixture, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'BP_LightFixture_C_ExecuteUbergraph_BP_LightFixture::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_ExecuteUbergraph_BP_LightFixture, K2Node_MakeArray_Array) == 0x000028, "Member 'BP_LightFixture_C_ExecuteUbergraph_BP_LightFixture::K2Node_MakeArray_Array' has a wrong offset!");

// Function BP_LightFixture.BP_LightFixture_C.LoadCompleteDelegate_CD4940744AC4667E7148BDA96292EF0E
// 0x0010 (0x0010 - 0x0000)
struct BP_LightFixture_C_LoadCompleteDelegate_CD4940744AC4667E7148BDA96292EF0E final
{
public:
	TArray<class UObject*>                        LoadedAssets;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_LightFixture_C_LoadCompleteDelegate_CD4940744AC4667E7148BDA96292EF0E) == 0x000008, "Wrong alignment on BP_LightFixture_C_LoadCompleteDelegate_CD4940744AC4667E7148BDA96292EF0E");
static_assert(sizeof(BP_LightFixture_C_LoadCompleteDelegate_CD4940744AC4667E7148BDA96292EF0E) == 0x000010, "Wrong size on BP_LightFixture_C_LoadCompleteDelegate_CD4940744AC4667E7148BDA96292EF0E");
static_assert(offsetof(BP_LightFixture_C_LoadCompleteDelegate_CD4940744AC4667E7148BDA96292EF0E, LoadedAssets) == 0x000000, "Member 'BP_LightFixture_C_LoadCompleteDelegate_CD4940744AC4667E7148BDA96292EF0E::LoadedAssets' has a wrong offset!");

// Function BP_LightFixture.BP_LightFixture_C.UserConstructionScript
// 0x0001 (0x0001 - 0x0000)
struct BP_LightFixture_C_UserConstructionScript final
{
public:
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LightFixture_C_UserConstructionScript) == 0x000001, "Wrong alignment on BP_LightFixture_C_UserConstructionScript");
static_assert(sizeof(BP_LightFixture_C_UserConstructionScript) == 0x000001, "Wrong size on BP_LightFixture_C_UserConstructionScript");
static_assert(offsetof(BP_LightFixture_C_UserConstructionScript, CallFunc_BooleanAND_ReturnValue) == 0x000000, "Member 'BP_LightFixture_C_UserConstructionScript::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_LightFixture.BP_LightFixture_C.UpdateLightState
// 0x0030 (0x0030 - 0x0000)
struct BP_LightFixture_C_UpdateLightState final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULightComponent*>                CallFunc_GetAllLights_AllLights;                   // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	class ULightComponent*                        CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LightFixture_C_UpdateLightState) == 0x000008, "Wrong alignment on BP_LightFixture_C_UpdateLightState");
static_assert(sizeof(BP_LightFixture_C_UpdateLightState) == 0x000030, "Wrong size on BP_LightFixture_C_UpdateLightState");
static_assert(offsetof(BP_LightFixture_C_UpdateLightState, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_LightFixture_C_UpdateLightState::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_UpdateLightState, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_LightFixture_C_UpdateLightState::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_UpdateLightState, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_LightFixture_C_UpdateLightState::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_UpdateLightState, CallFunc_GetAllLights_AllLights) == 0x000010, "Member 'BP_LightFixture_C_UpdateLightState::CallFunc_GetAllLights_AllLights' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_UpdateLightState, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_LightFixture_C_UpdateLightState::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_UpdateLightState, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_LightFixture_C_UpdateLightState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_UpdateLightState, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'BP_LightFixture_C_UpdateLightState::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_LightFixture.BP_LightFixture_C.UpdateLightSettings
// 0x0030 (0x0030 - 0x0000)
struct BP_LightFixture_C_UpdateLightSettings final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULightComponent*>                CallFunc_GetAllLights_AllLights;                   // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	class ULightComponent*                        CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LightFixture_C_UpdateLightSettings) == 0x000008, "Wrong alignment on BP_LightFixture_C_UpdateLightSettings");
static_assert(sizeof(BP_LightFixture_C_UpdateLightSettings) == 0x000030, "Wrong size on BP_LightFixture_C_UpdateLightSettings");
static_assert(offsetof(BP_LightFixture_C_UpdateLightSettings, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_LightFixture_C_UpdateLightSettings::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_UpdateLightSettings, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_LightFixture_C_UpdateLightSettings::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_UpdateLightSettings, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_LightFixture_C_UpdateLightSettings::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_UpdateLightSettings, CallFunc_GetAllLights_AllLights) == 0x000010, "Member 'BP_LightFixture_C_UpdateLightSettings::CallFunc_GetAllLights_AllLights' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_UpdateLightSettings, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_LightFixture_C_UpdateLightSettings::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_UpdateLightSettings, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_LightFixture_C_UpdateLightSettings::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_UpdateLightSettings, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'BP_LightFixture_C_UpdateLightSettings::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_LightFixture.BP_LightFixture_C.ToggleLights
// 0x0018 (0x0018 - 0x0000)
struct BP_LightFixture_C_ToggleLights final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_LightFixture_C_ToggleLights) == 0x000008, "Wrong alignment on BP_LightFixture_C_ToggleLights");
static_assert(sizeof(BP_LightFixture_C_ToggleLights) == 0x000018, "Wrong size on BP_LightFixture_C_ToggleLights");
static_assert(offsetof(BP_LightFixture_C_ToggleLights, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'BP_LightFixture_C_ToggleLights::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_ToggleLights, CallFunc_K2_SetTimer_ReturnValue) == 0x000008, "Member 'BP_LightFixture_C_ToggleLights::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_ToggleLights, CallFunc_BooleanAND_ReturnValue) == 0x000010, "Member 'BP_LightFixture_C_ToggleLights::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_ToggleLights, CallFunc_Not_PreBool_ReturnValue_1) == 0x000011, "Member 'BP_LightFixture_C_ToggleLights::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");

// Function BP_LightFixture.BP_LightFixture_C.PlaySound
// 0x0070 (0x0070 - 0x0000)
struct BP_LightFixture_C_PlaySound final
{
public:
	TSoftObjectPtr<class UFMODEvent>              Event_Played;                                      // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UObject>>         K2Node_MakeArray_Array;                            // 0x0030(0x0010)(ReferenceParm)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UObject*>                        CallFunc_LoadAssets_ReturnValue;                   // 0x0048(0x0010)(ReferenceParm)
	class UFMODEvent*                             K2Node_DynamicCast_AsFMODEvent;                    // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODAudioComponent*                    CallFunc_PlayEventAttached_ReturnValue;            // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightFixture_C_PlaySound) == 0x000008, "Wrong alignment on BP_LightFixture_C_PlaySound");
static_assert(sizeof(BP_LightFixture_C_PlaySound) == 0x000070, "Wrong size on BP_LightFixture_C_PlaySound");
static_assert(offsetof(BP_LightFixture_C_PlaySound, Event_Played) == 0x000000, "Member 'BP_LightFixture_C_PlaySound::Event_Played' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_PlaySound, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000028, "Member 'BP_LightFixture_C_PlaySound::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_PlaySound, K2Node_MakeArray_Array) == 0x000030, "Member 'BP_LightFixture_C_PlaySound::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_PlaySound, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000040, "Member 'BP_LightFixture_C_PlaySound::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_PlaySound, CallFunc_LoadAssets_ReturnValue) == 0x000048, "Member 'BP_LightFixture_C_PlaySound::CallFunc_LoadAssets_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_PlaySound, K2Node_DynamicCast_AsFMODEvent) == 0x000058, "Member 'BP_LightFixture_C_PlaySound::K2Node_DynamicCast_AsFMODEvent' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_PlaySound, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BP_LightFixture_C_PlaySound::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_PlaySound, CallFunc_IsValid_ReturnValue) == 0x000061, "Member 'BP_LightFixture_C_PlaySound::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_PlaySound, CallFunc_PlayEventAttached_ReturnValue) == 0x000068, "Member 'BP_LightFixture_C_PlaySound::CallFunc_PlayEventAttached_ReturnValue' has a wrong offset!");

// Function BP_LightFixture.BP_LightFixture_C.GatherChildLights
// 0x0048 (0x0048 - 0x0000)
struct BP_LightFixture_C_GatherChildLights final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children;           // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULightComponent*                        K2Node_DynamicCast_AsLight_Component;              // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightFixture_C_GatherChildLights) == 0x000008, "Wrong alignment on BP_LightFixture_C_GatherChildLights");
static_assert(sizeof(BP_LightFixture_C_GatherChildLights) == 0x000048, "Wrong size on BP_LightFixture_C_GatherChildLights");
static_assert(offsetof(BP_LightFixture_C_GatherChildLights, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_LightFixture_C_GatherChildLights::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_GatherChildLights, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_LightFixture_C_GatherChildLights::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_GatherChildLights, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_LightFixture_C_GatherChildLights::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_GatherChildLights, CallFunc_GetChildrenComponents_Children) == 0x000010, "Member 'BP_LightFixture_C_GatherChildLights::CallFunc_GetChildrenComponents_Children' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_GatherChildLights, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_LightFixture_C_GatherChildLights::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_GatherChildLights, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_LightFixture_C_GatherChildLights::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_GatherChildLights, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_LightFixture_C_GatherChildLights::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_GatherChildLights, K2Node_DynamicCast_AsLight_Component) == 0x000038, "Member 'BP_LightFixture_C_GatherChildLights::K2Node_DynamicCast_AsLight_Component' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_GatherChildLights, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_LightFixture_C_GatherChildLights::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_GatherChildLights, CallFunc_Array_AddUnique_ReturnValue) == 0x000044, "Member 'BP_LightFixture_C_GatherChildLights::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function BP_LightFixture.BP_LightFixture_C.GetAllLights
// 0x0020 (0x0020 - 0x0000)
struct BP_LightFixture_C_GetAllLights final
{
public:
	TArray<class ULightComponent*>                AllLights;                                         // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class ULightComponent*>                Found;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
};
static_assert(alignof(BP_LightFixture_C_GetAllLights) == 0x000008, "Wrong alignment on BP_LightFixture_C_GetAllLights");
static_assert(sizeof(BP_LightFixture_C_GetAllLights) == 0x000020, "Wrong size on BP_LightFixture_C_GetAllLights");
static_assert(offsetof(BP_LightFixture_C_GetAllLights, AllLights) == 0x000000, "Member 'BP_LightFixture_C_GetAllLights::AllLights' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_GetAllLights, Found) == 0x000010, "Member 'BP_LightFixture_C_GetAllLights::Found' has a wrong offset!");

// Function BP_LightFixture.BP_LightFixture_C.BreakLights
// 0x0050 (0x0050 - 0x0000)
struct BP_LightFixture_C_BreakLights final
{
public:
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         K2Node_DynamicCast_AsNiagara_System;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CallFunc_SpawnSystemAtLocation_ReturnValue;        // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightFixture_C_BreakLights) == 0x000008, "Wrong alignment on BP_LightFixture_C_BreakLights");
static_assert(sizeof(BP_LightFixture_C_BreakLights) == 0x000050, "Wrong size on BP_LightFixture_C_BreakLights");
static_assert(offsetof(BP_LightFixture_C_BreakLights, CallFunc_BreakTransform_Location) == 0x000000, "Member 'BP_LightFixture_C_BreakLights::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_BreakLights, CallFunc_BreakTransform_Rotation) == 0x00000C, "Member 'BP_LightFixture_C_BreakLights::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_BreakLights, CallFunc_BreakTransform_Scale) == 0x000018, "Member 'BP_LightFixture_C_BreakLights::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_BreakLights, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000024, "Member 'BP_LightFixture_C_BreakLights::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_BreakLights, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000028, "Member 'BP_LightFixture_C_BreakLights::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_BreakLights, K2Node_DynamicCast_AsNiagara_System) == 0x000030, "Member 'BP_LightFixture_C_BreakLights::K2Node_DynamicCast_AsNiagara_System' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_BreakLights, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_LightFixture_C_BreakLights::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_BreakLights, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x000040, "Member 'BP_LightFixture_C_BreakLights::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightFixture_C_BreakLights, CallFunc_SpawnSystemAtLocation_ReturnValue) == 0x000048, "Member 'BP_LightFixture_C_BreakLights::CallFunc_SpawnSystemAtLocation_ReturnValue' has a wrong offset!");

// Function BP_LightFixture.BP_LightFixture_C.Create Dynamic Material Instance
// 0x0008 (0x0008 - 0x0000)
struct BP_LightFixture_C_Create_Dynamic_Material_Instance final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightFixture_C_Create_Dynamic_Material_Instance) == 0x000008, "Wrong alignment on BP_LightFixture_C_Create_Dynamic_Material_Instance");
static_assert(sizeof(BP_LightFixture_C_Create_Dynamic_Material_Instance) == 0x000008, "Wrong size on BP_LightFixture_C_Create_Dynamic_Material_Instance");
static_assert(offsetof(BP_LightFixture_C_Create_Dynamic_Material_Instance, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000000, "Member 'BP_LightFixture_C_Create_Dynamic_Material_Instance::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

}

