#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FluidDripComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ObsidianFox_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FluidDripComponent.BP_FluidDripComponent_C
// 0x0050 (0x0260 - 0x0210)
class UBP_FluidDripComponent_C final : public USceneComponent
{
public:
	uint8                                         Pad_208[0x8];                                      // 0x0208(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0210(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UClass*                                 FluidDrop;                                         // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     DecalOverride;                                     // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           FluidDropSpawnTimerHandle;                         // 0x0228(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           DripTimerHandle;                                   // 0x0230(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnFequency;                                     // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnAreaRadius;                                   // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDripTime;                                       // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ActivateOnStart;                                   // 0x0244(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_245[0x3];                                      // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxFluidDecalSize;                                 // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinFluidDecalSize;                                 // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseMaxTimer;                                       // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsInCutscene;                                      // 0x0251(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void GetRandomLocationInSphereAroundPoint(const struct FVector& Point, float Radius, struct FVector* RandomLocation);
	void ReceiveBeginPlay();
	void SpawnDrops();
	void OnComponentActivated_Event(class UActorComponent* Component, bool bReset);
	void MaxDripTimeReached();
	void OnGameStateChanged(EGameMainState OldGameState, EGameMainState NewGameState);
	void ExecuteUbergraph_BP_FluidDripComponent(int32 EntryPoint);
	void OnComponentDeactivated_Event(class UActorComponent* Component);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FluidDripComponent_C">();
	}
	static class UBP_FluidDripComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_FluidDripComponent_C>();
	}
};
static_assert(alignof(UBP_FluidDripComponent_C) == 0x000010, "Wrong alignment on UBP_FluidDripComponent_C");
static_assert(sizeof(UBP_FluidDripComponent_C) == 0x000260, "Wrong size on UBP_FluidDripComponent_C");
static_assert(offsetof(UBP_FluidDripComponent_C, UberGraphFrame) == 0x000210, "Member 'UBP_FluidDripComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_FluidDripComponent_C, FluidDrop) == 0x000218, "Member 'UBP_FluidDripComponent_C::FluidDrop' has a wrong offset!");
static_assert(offsetof(UBP_FluidDripComponent_C, DecalOverride) == 0x000220, "Member 'UBP_FluidDripComponent_C::DecalOverride' has a wrong offset!");
static_assert(offsetof(UBP_FluidDripComponent_C, FluidDropSpawnTimerHandle) == 0x000228, "Member 'UBP_FluidDripComponent_C::FluidDropSpawnTimerHandle' has a wrong offset!");
static_assert(offsetof(UBP_FluidDripComponent_C, DripTimerHandle) == 0x000230, "Member 'UBP_FluidDripComponent_C::DripTimerHandle' has a wrong offset!");
static_assert(offsetof(UBP_FluidDripComponent_C, SpawnFequency) == 0x000238, "Member 'UBP_FluidDripComponent_C::SpawnFequency' has a wrong offset!");
static_assert(offsetof(UBP_FluidDripComponent_C, SpawnAreaRadius) == 0x00023C, "Member 'UBP_FluidDripComponent_C::SpawnAreaRadius' has a wrong offset!");
static_assert(offsetof(UBP_FluidDripComponent_C, MaxDripTime) == 0x000240, "Member 'UBP_FluidDripComponent_C::MaxDripTime' has a wrong offset!");
static_assert(offsetof(UBP_FluidDripComponent_C, ActivateOnStart) == 0x000244, "Member 'UBP_FluidDripComponent_C::ActivateOnStart' has a wrong offset!");
static_assert(offsetof(UBP_FluidDripComponent_C, MaxFluidDecalSize) == 0x000248, "Member 'UBP_FluidDripComponent_C::MaxFluidDecalSize' has a wrong offset!");
static_assert(offsetof(UBP_FluidDripComponent_C, MinFluidDecalSize) == 0x00024C, "Member 'UBP_FluidDripComponent_C::MinFluidDecalSize' has a wrong offset!");
static_assert(offsetof(UBP_FluidDripComponent_C, UseMaxTimer) == 0x000250, "Member 'UBP_FluidDripComponent_C::UseMaxTimer' has a wrong offset!");
static_assert(offsetof(UBP_FluidDripComponent_C, IsInCutscene) == 0x000251, "Member 'UBP_FluidDripComponent_C::IsInCutscene' has a wrong offset!");

}

